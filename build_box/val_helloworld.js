
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/val_helloworld.data';
    var REMOTE_PACKAGE_BASE = 'val_helloworld.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'Common', true, true);
Module['FS_createPath']('/Common', 'OpenCL', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/val_helloworld.data');

    };
    Module['addRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/val_helloworld.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 25153, "filename": "/Common/OpenCL/b2CLBitonicSort_Intel.cl"}, {"audio": 0, "start": 25153, "crunched": 0, "end": 153313, "filename": "/Common/OpenCL/b2CLBitonicSort_NV.cl"}, {"audio": 0, "start": 153313, "crunched": 0, "end": 153313, "filename": "/Common/OpenCL/b2CLBroadPhase.cl"}, {"audio": 0, "start": 153313, "crunched": 0, "end": 153313, "filename": "/Common/OpenCL/b2CLCommonData.cl"}, {"audio": 0, "start": 153313, "crunched": 0, "end": 153313, "filename": "/Common/OpenCL/b2CLNarrowPhase_Alone.cl"}, {"audio": 0, "start": 153313, "crunched": 0, "end": 153313, "filename": "/Common/OpenCL/b2CLNarrowPhase.cl"}, {"audio": 0, "start": 153313, "crunched": 0, "end": 186566, "filename": "/Common/OpenCL/b2CLPrefixScanFloat4.cl"}, {"audio": 0, "start": 186566, "crunched": 0, "end": 186566, "filename": "/Common/OpenCL/b2CLScan_CLPP.cl"}, {"audio": 0, "start": 186566, "crunched": 0, "end": 424941, "filename": "/Common/OpenCL/b2CLScan.cl"}, {"audio": 0, "start": 424941, "crunched": 0, "end": 817023, "filename": "/Common/OpenCL/b2CLScanKernel.cl"}, {"audio": 0, "start": 817023, "crunched": 0, "end": 817023, "filename": "/Common/OpenCL/b2CLSolvePositionConstraint.cl"}, {"audio": 0, "start": 817023, "crunched": 0, "end": 817023, "filename": "/Common/OpenCL/b2CLSolveTOI.cl"}, {"audio": 0, "start": 817023, "crunched": 0, "end": 817023, "filename": "/Common/OpenCL/b2CLSolveVelocityConstraint_Alone.cl"}, {"audio": 0, "start": 817023, "crunched": 0, "end": 817023, "filename": "/Common/OpenCL/b2CLSolveVelocityConstraint.cl"}, {"audio": 0, "start": 817023, "crunched": 0, "end": 950137, "filename": "/Common/OpenCL/BitonicSort_b.cl"}], "remote_package_size": 950137, "package_uuid": "06dbf761-3e7e-46b7-9446-1be7c4c95abe"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 43216;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_b2Math_cpp() } }, { func: function() { __GLOBAL__sub_I_b2ContactManager_cpp() } });
  

/* memory initializer */ allocate([184,34,0,0,190,43,0,0,224,34,0,0,79,44,0,0,8,0,0,0,0,0,0,0,224,34,0,0,93,44,0,0,8,0,0,0,0,0,0,0,224,34,0,0,60,47,0,0,248,0,0,0,0,0,0,0,224,34,0,0,108,47,0,0,240,0,0,0,0,0,0,0,184,34,0,0,192,77,0,0,184,34,0,0,167,87,0,0,224,34,0,0,185,87,0,0,112,0,0,0,0,0,0,0,184,34,0,0,211,87,0,0,224,34,0,0,91,88,0,0,112,0,0,0,0,0,0,0,224,34,0,0,31,89,0,0,112,0,0,0,0,0,0,0,224,34,0,0,246,91,0,0,112,0,0,0,0,0,0,0,224,34,0,0,138,92,0,0,112,0,0,0,0,0,0,0,224,34,0,0,74,93,0,0,112,0,0,0,0,0,0,0,224,34,0,0,18,94,0,0,112,0,0,0,0,0,0,0,224,34,0,0,163,105,0,0,232,0,0,0,0,0,0,0,184,34,0,0,205,105,0,0,184,34,0,0,223,105,0,0,112,35,0,0,16,106,0,0,0,0,0,0,1,0,0,0,216,0,0,0,3,244,255,255,224,34,0,0,63,106,0,0,160,5,0,0,0,0,0,0,224,34,0,0,89,106,0,0,176,5,0,0,0,0,0,0,224,34,0,0,180,106,0,0,64,1,0,0,0,0,0,0,224,34,0,0,200,106,0,0,144,5,0,0,0,0,0,0,224,34,0,0,222,106,0,0,64,1,0,0,0,0,0,0,112,35,0,0,242,106,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,128,1,0,0,0,0,0,0,112,35,0,0,54,107,0,0,0,0,0,0,1,0,0,0,152,1,0,0,0,0,0,0,184,34,0,0,76,107,0,0,112,35,0,0,139,107,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,192,1,0,0,0,0,0,0,112,35,0,0,207,107,0,0,0,0,0,0,1,0,0,0,152,1,0,0,0,0,0,0,112,35,0,0,229,107,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,248,1,0,0,0,0,0,0,112,35,0,0,41,108,0,0,0,0,0,0,1,0,0,0,16,2,0,0,0,0,0,0,184,34,0,0,63,108,0,0,112,35,0,0,107,108,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,56,2,0,0,0,0,0,0,112,35,0,0,175,108,0,0,0,0,0,0,1,0,0,0,16,2,0,0,0,0,0,0,112,35,0,0,197,108,0,0,0,0,0,0,3,0,0,0,64,1,0,0,2,0,0,0,120,2,0,0,2,0,0,0,128,2,0,0,0,8,0,0,184,34,0,0,10,109,0,0,184,34,0,0,29,109,0,0,112,35,0,0,127,110,0,0,0,0,0,0,3,0,0,0,64,1,0,0,2,0,0,0,120,2,0,0,2,0,0,0,176,2,0,0,0,8,0,0,184,34,0,0,196,110,0,0,112,35,0,0,230,110,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,216,2,0,0,0,8,0,0,184,34,0,0,43,111,0,0,112,35,0,0,64,111,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,216,2,0,0,0,8,0,0,112,35,0,0,154,111,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,32,3,0,0,2,0,0,0,184,34,0,0,182,111,0,0,112,35,0,0,203,111,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,32,3,0,0,2,0,0,0,112,35,0,0,231,111,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,32,3,0,0,2,0,0,0,112,35,0,0,3,112,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,32,3,0,0,2,0,0,0,112,35,0,0,31,112,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,168,3,0,0,0,0,0,0,184,34,0,0,101,112,0,0,112,35,0,0,157,112,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,208,3,0,0,0,0,0,0,184,34,0,0,227,112,0,0,112,35,0,0,7,113,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,248,3,0,0,0,0,0,0,184,34,0,0,77,113,0,0,112,35,0,0,108,113,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,32,4,0,0,0,0,0,0,184,34,0,0,178,113,0,0,112,35,0,0,203,113,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,72,4,0,0,2,0,0,0,184,34,0,0,224,113,0,0,112,35,0,0,248,113,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,72,4,0,0,2,0,0,0,224,34,0,0,13,114,0,0,128,4,0,0,0,0,0,0,112,35,0,0,47,114,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,160,4,0,0,2,0,0,0,184,34,0,0,82,114,0,0,224,34,0,0,105,114,0,0,128,4,0,0,0,0,0,0,112,35,0,0,140,114,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,160,4,0,0,2,0,0,0,112,35,0,0,174,114,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,160,4,0,0,2,0,0,0,112,35,0,0,208,114,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,160,4,0,0,2,0,0,0,224,34,0,0,243,114,0,0,64,1,0,0,0,0,0,0,112,35,0,0,9,115,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,72,5,0,0,2,0,0,0,184,34,0,0,27,115,0,0,112,35,0,0,48,115,0,0,0,0,0,0,2,0,0,0,64,1,0,0,2,0,0,0,72,5,0,0,2,0,0,0,224,34,0,0,66,115,0,0,64,1,0,0,0,0,0,0,224,34,0,0,98,115,0,0,64,1,0,0,0,0,0,0,184,34,0,0,126,115,0,0,184,34,0,0,151,115,0,0,224,34,0,0,176,115,0,0,32,6,0,0,0,0,0,0,224,34,0,0,199,115,0,0,152,5,0,0,0,0,0,0,184,34,0,0,238,116,0,0,224,34,0,0,204,116,0,0,232,5,0,0,0,0,0,0,224,34,0,0,121,116,0,0,200,5,0,0,0,0,0,0,224,34,0,0,158,116,0,0,248,5,0,0,0,0,0,0,184,34,0,0,191,116,0,0,224,34,0,0,230,117,0,0,192,5,0,0,0,0,0,0,224,34,0,0,2,118,0,0,192,5,0,0,0,0,0,0,224,34,0,0,18,118,0,0,192,5,0,0,0,0,0,0,224,34,0,0,36,118,0,0,16,6,0,0,0,0,0,0,224,34,0,0,53,118,0,0,192,5,0,0,0,0,0,0,224,34,0,0,115,118,0,0,232,5,0,0,0,0,0,0,224,34,0,0,79,118,0,0,80,6,0,0,0,0,0,0,224,34,0,0,149,118,0,0,200,5,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,32,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,108,0,0,0,0,0,0,0,48,0,0,0,20,0,0,0,21,0,0,0,148,255,255,255,148,255,255,255,48,0,0,0,22,0,0,0,23,0,0,0,60,7,0,0,116,7,0,0,136,7,0,0,80,7,0,0,108,0,0,0,0,0,0,0,248,0,0,0,24,0,0,0,25,0,0,0,148,255,255,255,148,255,255,255,248,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,64,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,182,48,0,0,204,48,0,0,224,48,0,0,247,48,0,0,20,0,0,0,0,0,0,0,0,0,0,0,121,57,0,0,135,57,0,0,157,57,0,0,192,57,0,0,219,57,0,0,236,57,0,0,2,58,0,0,31,58,0,0,0,0,0,0,80,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,0,0,0,0,88,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,0,0,0,0,96,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,120,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,136,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,112,0,0,0,3,0,0,0,60,0,0,0,61,0,0,0,0,0,0,0,152,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,0,0,0,0,168,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,184,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,200,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,176,9,0,0,5,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,76,0,0,0,199,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,10,0,0,5,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,76,0,0,0,207,164,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,36,0,0,16,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,216,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,232,0,0,0,81,0,0,0,82,0,0,0,0,0,0,0,240,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,35,0,0,0,36,0,0,0,90,0,0,0,38,0,0,0,91,0,0,0,40,0,0,0,92,0,0,0,0,0,0,0,16,1,0,0,93,0,0,0,94,0,0,0,95,0,0,0,0,0,0,0,32,1,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,0,0,0,0,48,1,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,80,1,0,0,109,0,0,0,110,0,0,0,105,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,0,0,0,0,96,1,0,0,114,0,0,0,115,0,0,0,105,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,0,0,0,0,160,1,0,0,127,0,0,0,128,0,0,0,105,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,0,0,0,0,216,1,0,0,140,0,0,0,141,0,0,0,105,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,24,2,0,0,150,0,0,0,151,0,0,0,105,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,80,2,0,0,160,0,0,0,161,0,0,0,105,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,248,255,255,255,80,2,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,0,0,0,0,136,2,0,0,176,0,0,0,177,0,0,0,105,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,248,255,255,255,136,2,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,184,2,0,0,192,0,0,0,193,0,0,0,105,0,0,0,194,0,0,0,0,0,0,0,224,2,0,0,195,0,0,0,196,0,0,0,105,0,0,0,197,0,0,0,0,0,0,0,0,3,0,0,198,0,0,0,199,0,0,0,105,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,40,3,0,0,209,0,0,0,210,0,0,0,105,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,0,0,0,0,72,3,0,0,220,0,0,0,221,0,0,0,105,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,0,0,0,0,104,3,0,0,231,0,0,0,232,0,0,0,105,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,0,0,0,0,136,3,0,0,242,0,0,0,243,0,0,0,105,0,0,0,244,0,0,0,245,0,0,0,0,0,0,0,176,3,0,0,246,0,0,0,247,0,0,0,105,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,216,3,0,0,250,0,0,0,251,0,0,0,105,0,0,0,252,0,0,0,253,0,0,0,0,0,0,0,0,4,0,0,254,0,0,0,255,0,0,0,105,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,40,4,0,0,2,1,0,0,3,1,0,0,105,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,0,0,0,0,80,4,0,0,7,1,0,0,8,1,0,0,105,0,0,0,9,1,0,0,10,1,0,0,11,1,0,0,0,0,0,0,112,4,0,0,12,1,0,0,13,1,0,0,105,0,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,0,0,0,0,168,4,0,0,12,1,0,0,21,1,0,0,105,0,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,0,0,0,0,216,4,0,0,22,1,0,0,23,1,0,0,105,0,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,0,0,0,0,24,5,0,0,31,1,0,0,32,1,0,0,105,0,0,0,0,0,0,0,40,5,0,0,33,1,0,0,34,1,0,0,105,0,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,0,0,0,0,112,5,0,0,43,1,0,0,44,1,0,0,105,0,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,0,0,0,0,128,5,0,0,50,1,0,0,51,1,0,0,105,0,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,12,1,0,0,57,1,0,0,105,0,0,0,0,0,0,0,80,5,0,0,12,1,0,0,58,1,0,0,105,0,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,0,0,0,0,184,4,0,0,12,1,0,0,71,1,0,0,105,0,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,0,0,0,0,248,4,0,0,12,1,0,0,79,1,0,0,105,0,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,0,0,0,0,128,4,0,0,12,1,0,0,87,1,0,0,105,0,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,0,0,0,0,160,5,0,0,88,1,0,0,89,1,0,0,95,0,0,0,90,1,0,0,0,0,0,0,200,5,0,0,91,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,0,0,0,0,216,5,0,0,91,1,0,0,99,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,251,116,0,0,0,0,0,0,0,6,0,0,103,1,0,0,104,1,0,0,105,1,0,0,0,0,0,0,16,6,0,0,106,1,0,0,107,1,0,0,108,1,0,0,0,0,0,0,32,6,0,0,109,1,0,0,110,1,0,0,95,0,0,0,0,0,0,0,48,6,0,0,106,1,0,0,111,1,0,0,108,1,0,0,0,0,0,0,64,6,0,0,112,1,0,0,113,1,0,0,114,1,0,0,0,0,0,0,112,6,0,0,91,1,0,0,115,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,110,32,62,32,48,46,48,102,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,118,101,114,116,101,120,67,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,98,50,69,100,103,101,83,101,112,97,114,97,116,105,111,110,0,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,83,101,116,0,99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0,82,101,97,100,67,97,99,104,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,71,101,116,86,101,114,116,101,120,0,71,101,116,77,101,116,114,105,99,0,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,0,98,50,68,105,115,116,97,110,99,101,0,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,0,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,65,108,108,111,99,97,116,101,78,111,100,101,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,70,114,101,101,78,111,100,101,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,105,65,32,33,61,32,40,45,49,41,0,66,97,108,97,110,99,101,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,0,73,110,115,101,114,116,76,101,97,102,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,77,111,118,101,80,114,111,120,121,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,98,50,84,105,109,101,79,102,73,109,112,97,99,116,0,48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,0,69,118,97,108,117,97,116,101,0,55,98,50,83,104,97,112,101,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,71,101,116,67,104,105,108,100,69,100,103,101,0,49,49,98,50,69,100,103,101,83,104,97,112,101,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,82,97,121,67,97,115,116,0,109,95,118,101,114,116,101,120,67,111,117,110,116,32,62,61,32,51,0,67,111,109,112,117,116,101,77,97,115,115,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,0,48,32,60,32,115,105,122,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,1,109,95,105,110,100,101,120,32,61,61,32,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,65,108,108,111,99,97,116,101,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,70,114,101,101,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,97,0,114,0,114,43,0,119,43,0,97,43,0,119,98,0,97,98,0,114,98,0,114,43,98,0,119,43,98,0,97,43,98,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,39,32,99,111,114,114,101,99,116,63,0,67,111,109,112,117,116,101,65,65,66,66,115,0,67,111,109,112,117,116,101,65,65,66,66,115,84,79,73,0,80,114,101,112,97,114,101,83,117,109,86,97,114,105,97,110,99,101,0,73,110,105,116,83,111,114,116,105,110,103,75,101,121,115,0,67,111,109,112,117,116,101,80,97,105,114,115,0,67,111,109,112,117,116,101,80,97,105,114,115,78,111,65,116,111,109,105,99,0,67,111,109,112,117,116,101,65,65,66,66,73,110,116,101,114,115,101,99,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,65,65,66,66,32,105,110,116,101,114,115,101,99,116,105,111,110,32,107,101,114,110,101,108,33,10,0,82,97,121,67,105,114,99,108,101,73,110,116,101,114,115,101,99,116,105,111,110,0,82,97,121,69,100,103,101,73,110,116,101,114,115,101,99,116,105,111,110,0,82,97,121,80,111,108,121,103,111,110,73,110,116,101,114,115,101,99,116,105,111,110,0,82,97,121,67,104,97,105,110,73,110,116,101,114,115,101,99,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,114,97,121,32,115,104,97,112,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,107,101,114,110,101,108,33,10,0,99,111,109,112,117,116,101,65,65,66,66,115,75,101,114,110,101,108,0,69,114,114,111,114,58,32,67,111,109,112,117,116,101,32,65,65,66,66,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,112,114,101,112,97,114,101,83,117,109,86,97,114,105,97,110,99,101,75,101,114,110,101,108,0,69,114,114,111,114,58,32,67,111,109,112,117,116,101,32,80,97,105,114,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,39,32,99,111,114,114,101,99,116,63,0,82,101,97,100,76,97,115,116,74,111,105,110,116,73,109,112,117,108,115,101,115,0,102,105,120,116,117,114,101,95,105,110,100,101,120,60,61,109,95,112,87,111,114,108,100,45,62,109,95,112,114,111,120,121,67,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,112,112,0,67,111,112,121,83,116,97,116,105,99,70,105,120,116,117,114,101,65,116,116,114,105,98,117,116,101,115,0,99,111,110,110,101,99,116,101,100,65,114,114,97,121,80,111,115,58,32,37,100,10,0,67,111,112,121,83,116,97,116,105,99,66,111,100,121,65,116,116,114,105,98,117,116,101,115,0,110,117,109,84,111,116,97,108,74,111,105,110,116,115,32,62,61,32,48,0,83,116,111,114,101,74,111,105,110,116,73,109,112,117,108,115,101,115,0,112,74,111,105,110,116,45,62,71,101,116,84,121,112,101,40,41,32,60,32,110,117,109,74,111,105,110,116,84,121,112,101,115,0,67,111,112,121,74,111,105,110,116,115,0,99,111,112,121,74,111,105,110,116,70,117,110,99,91,106,111,105,110,116,84,121,112,101,93,0,106,111,105,110,116,32,99,111,108,111,114,32,118,97,108,117,101,32,101,120,99,101,101,100,115,32,109,97,120,32,99,111,110,116,97,99,116,32,110,117,109,98,101,114,32,112,101,114,32,98,111,100,121,32,10,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,46,46,46,10,0,108,32,61,61,32,114,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,68,101,118,105,99,101,46,104,0,98,50,99,108,67,104,101,99,107,69,114,114,111,114,0,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,112,108,97,116,102,111,114,109,115,58,32,37,100,10,0,80,108,97,116,102,111,114,109,32,37,100,32,118,101,110,100,111,114,58,32,37,115,10,0,80,108,97,116,102,111,114,109,32,37,100,32,110,97,109,101,58,32,37,115,10,10,0,85,115,105,110,103,32,80,108,97,116,102,111,114,109,32,37,117,44,32,0,99,108,71,101,116,68,101,118,105,99,101,73,68,115,46,46,46,10,10,0,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,101,118,105,99,101,115,58,32,37,100,10,0,68,101,118,105,99,101,32,35,37,100,32,105,115,32,0,67,80,85,10,9,0,71,80,85,10,9,0,68,101,118,105,99,101,32,118,101,110,100,111,114,58,32,37,115,10,9,0,68,101,118,105,99,101,32,110,97,109,101,58,32,37,115,10,9,0,83,117,112,112,111,114,116,101,100,32,79,112,101,110,67,76,32,118,101,114,115,105,111,110,58,32,37,115,10,9,0,77,97,120,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,37,100,10,9,0,77,97,120,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,117,116,101,32,117,110,105,116,115,58,32,37,100,10,0,102,105,114,115,116,67,80,85,62,61,48,32,124,124,32,102,105,114,115,116,71,80,85,62,61,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,68,101,118,105,99,101,46,99,112,112,0,115,116,97,114,116,117,112,79,112,101,110,67,76,0,84,104,101,32,112,108,97,116,102,111,114,109,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,79,112,101,110,67,76,32,111,110,32,67,80,85,33,10,0,85,115,105,110,103,32,68,101,118,105,99,101,32,37,117,44,32,0,10,10,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,46,46,46,10,10,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,46,46,46,10,10,0,32,99,108,67,114,101,97,116,101,66,117,102,102,101,114,32,40,71,80,85,32,71,77,69,77,44,32,37,117,32,98,121,116,101,115,41,46,46,46,10,10,0,118,98,111,32,61,61,32,48,0,99,111,112,121,65,114,114,97,121,70,114,111,109,68,101,118,105,99,101,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,39,32,99,111,114,114,101,99,116,63,0,98,50,99,108,67,111,108,108,105,100,101,80,111,108,121,103,111,110,115,0,98,50,99,108,67,111,108,108,105,100,101,67,105,114,99,108,101,115,0,98,50,99,108,67,111,108,108,105,100,101,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,0,98,50,99,108,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,98,50,99,108,67,111,108,108,105,100,101,69,100,103,101,65,110,100,80,111,108,121,103,111,110,0,98,50,99,108,67,111,109,112,97,99,116,70,111,114,79,110,101,67,111,110,116,97,99,116,0,69,114,114,111,114,33,32,85,110,115,117,112,112,111,114,116,101,100,32,99,111,110,116,97,99,116,32,116,121,112,101,58,32,37,100,33,10,0,69,114,114,111,114,58,32,67,111,108,108,105,100,101,32,75,101,114,110,101,108,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,67,111,109,112,97,99,116,32,102,111,114,32,79,110,101,32,67,111,110,116,97,99,116,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,112,112,0,101,110,97,98,108,101,66,105,116,65,114,114,97,121,0,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,70,111,114,76,105,115,116,101,110,101,114,0,65,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,101,114,114,111,114,32,105,110,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,58,58,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,70,111,114,76,105,115,116,101,110,101,114,33,33,33,10,0,80,114,101,83,99,97,110,75,101,114,110,101,108,0,80,114,101,83,99,97,110,83,116,111,114,101,83,117,109,75,101,114,110,101,108,0,80,114,101,83,99,97,110,83,116,111,114,101,83,117,109,78,111,110,80,111,119,101,114,79,102,84,119,111,75,101,114,110,101,108,0,80,114,101,83,99,97,110,78,111,110,80,111,119,101,114,79,102,84,119,111,75,101,114,110,101,108,0,85,110,105,102,111,114,109,65,100,100,75,101,114,110,101,108,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,75,101,114,110,101,108,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,73,110,100,105,99,101,115,75,101,114,110,101,108,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,71,101,110,101,114,97,108,75,101,114,110,101,108,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,99,97,110,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,99,97,110,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,99,97,110,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,99,97,110,46,99,108,39,32,99,111,114,114,101,99,116,63,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,39,32,99,111,114,114,101,99,116,63,0,107,101,114,110,101,108,95,95,69,120,99,108,117,115,105,118,101,80,114,101,102,105,120,83,99,97,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,107,101,114,110,101,108,95,95,69,120,99,108,117,115,105,118,101,80,114,101,102,105,120,83,99,97,110,33,10,0,107,101,114,110,101,108,95,95,85,110,105,102,111,114,109,65,100,100,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,107,101,114,110,101,108,95,95,85,110,105,102,111,114,109,65,100,100,33,10,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,108,118,101,114,46,46,46,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,46,99,108,39,32,99,111,114,114,101,99,116,63,0,83,111,108,118,101,83,112,108,105,116,73,109,112,117,108,115,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,32,10,0,83,111,108,118,101,77,101,114,103,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,67,111,117,110,116,67,111,110,116,97,99,116,78,117,109,52,69,97,99,104,66,111,100,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,10,0,83,111,108,118,101,68,105,115,116,97,110,99,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,82,101,118,111,108,117,116,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,71,101,97,114,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,80,117,108,108,101,121,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,82,111,112,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,87,104,101,101,108,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,87,101,108,100,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,77,111,117,115,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,70,114,105,99,116,105,111,110,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,44,32,37,100,32,10,0,73,110,105,116,105,97,108,105,122,101,68,105,115,116,97,110,99,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,82,101,118,111,108,117,116,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,71,101,97,114,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,80,117,108,108,101,121,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,82,111,112,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,87,104,101,101,108,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,87,101,108,100,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,77,111,117,115,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,70,114,105,99,116,105,111,110,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,95,72,97,115,83,112,108,105,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,10,0,73,110,105,116,105,97,108,105,122,101,66,111,100,121,83,116,97,116,101,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,73,110,105,116,105,97,108,105,122,101,66,111,100,121,83,116,97,116,101,70,105,114,115,116,70,114,97,109,101,0,87,97,114,109,83,116,97,114,116,0,87,97,114,109,83,116,97,114,116,87,105,116,104,67,111,108,111,114,105,110,103,0,87,97,114,109,83,116,97,114,116,83,112,108,105,116,0,87,97,114,109,83,116,97,114,116,83,112,108,105,116,87,105,116,104,67,111,108,111,114,105,110,103,0,83,121,110,99,104,114,111,110,105,122,101,88,102,0,82,101,97,100,76,97,115,116,73,109,112,117,108,115,101,115,0,82,101,97,100,76,97,115,116,73,109,112,117,108,115,101,115,70,105,114,115,116,70,114,97,109,101,0,83,116,111,114,101,73,109,112,117,108,115,101,115,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,46,99,108,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,73,110,116,101,103,114,97,116,101,80,111,115,105,116,105,111,110,115,46,99,108,39,32,99,111,114,114,101,99,116,63,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,105,110,105,116,105,97,108,105,122,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,112,114,111,103,114,97,109,33,10,0,73,110,116,101,103,114,97,116,101,80,111,115,105,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,115,32,107,101,114,110,101,108,33,10,0,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,107,101,114,110,101,108,33,10,0,83,111,108,118,101,83,112,108,105,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,95,77,101,114,103,101,83,112,108,105,116,116,101,100,77,97,115,115,0,83,111,108,118,101,68,105,115,116,97,110,99,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,82,101,118,111,108,117,116,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,71,101,97,114,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,80,117,108,108,101,121,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,82,111,112,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,87,104,101,101,108,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,87,101,108,100,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,77,111,117,115,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,83,111,108,118,101,70,114,105,99,116,105,111,110,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,33,10,0,67,111,108,108,101,99,116,83,116,97,116,105,99,68,121,110,97,109,105,99,80,97,105,114,75,101,114,110,101,108,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,67,111,108,108,101,99,116,32,83,116,97,116,105,99,32,68,121,110,97,109,105,99,32,80,97,105,114,32,107,101,114,110,101,108,33,10,0,73,110,105,116,83,116,97,116,105,99,68,121,110,97,109,105,99,66,111,100,121,75,101,114,110,101,108,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,83,68,66,111,100,121,75,101,114,110,101,108,32,33,10,0,83,111,108,118,101,83,68,86,101,108,111,99,105,116,121,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,83,111,108,118,101,83,68,86,101,108,111,99,105,116,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,83,111,108,118,101,83,68,80,111,115,105,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,83,111,108,118,101,83,68,80,111,115,105,116,105,111,110,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,115,121,110,99,83,68,66,111,100,121,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,121,110,99,83,68,66,111,100,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,84,101,115,116,75,101,114,110,101,108,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,105,110,105,116,105,97,108,105,122,101,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,106,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,73,110,105,116,105,97,108,105,122,101,75,101,114,110,101,108,91,37,100,93,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,119,97,114,109,32,115,116,97,114,116,32,119,105,116,104,32,99,111,108,111,114,105,110,103,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,115,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,106,111,105,110,116,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,115,121,110,99,104,114,111,110,105,122,101,32,88,102,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,115,121,110,99,104,114,111,110,105,122,101,32,88,102,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,114,101,97,100,32,108,97,115,116,32,105,109,112,117,108,115,101,115,32,107,101,114,110,101,108,33,10,0,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,114,46,99,112,112,0,82,101,112,111,114,116,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,108,118,101,84,79,73,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,39,32,99,111,114,114,101,99,116,63,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,37,115,10,0,98,50,99,108,115,121,110,99,77,111,118,101,100,66,111,100,121,75,101,114,110,101,108,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,121,110,99,77,111,118,101,100,66,111,100,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,98,50,99,108,67,111,109,112,117,116,101,77,105,110,84,79,73,32,107,101,114,110,101,108,33,10,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,114,116,46,46,46,10,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,98,50,66,111,100,121,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,109,95,73,32,62,32,48,46,48,102,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,71,101,116,70,97,116,65,65,66,66,0,109,95,99,111,117,110,116,32,62,32,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,80,111,112,0,71,101,116,85,115,101,114,68,97,116,97,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([114,108,100,46,99,112,112,0,67,114,101,97,116,101,66,111,100,121,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,65,100,100,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,83,111,108,118,101,84,79,73,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,65,100,118,97,110,99,101,0,47,85,115,101,114,115,47,103,46,114,111,110,103,47,84,105,109,101,100,97,116,97,46,99,115,118,0,119,0,66,111,100,121,35,44,32,74,111,105,110,116,35,44,32,44,32,84,111,116,97,108,32,115,116,101,112,32,84,105,109,101,44,32,83,116,101,112,32,78,80,32,116,105,109,101,44,32,83,116,101,112,32,83,111,108,118,101,114,32,116,105,109,101,44,32,83,116,101,112,32,66,80,32,84,105,109,101,44,32,0,44,32,65,118,101,46,32,71,80,85,32,66,80,32,84,105,109,101,44,32,67,114,101,97,116,101,32,71,80,85,32,66,117,102,102,101,114,44,32,67,111,109,112,117,116,101,32,65,65,66,66,44,32,83,111,114,116,32,65,65,66,66,44,32,67,111,109,112,117,116,101,32,80,97,105,114,44,32,0,44,32,65,118,101,46,32,67,111,110,116,97,99,116,35,44,32,65,118,101,46,32,71,80,85,32,78,80,32,84,105,109,101,44,32,73,110,105,116,46,32,71,80,85,32,100,97,116,97,44,32,67,111,109,112,117,116,97,116,105,111,110,44,32,82,101,97,100,98,97,99,107,32,71,80,85,32,100,97,116,97,44,32,0,44,32,65,118,101,46,32,86,97,108,105,100,32,67,111,110,116,97,99,116,35,44,32,65,118,101,46,32,71,80,85,32,83,111,108,118,101,114,32,84,105,109,101,44,32,73,110,105,116,46,32,67,80,85,44,32,73,110,105,116,32,71,80,85,44,32,67,111,109,112,117,116,97,116,105,111,110,44,32,70,105,110,97,108,105,122,101,44,32,0,10,0,84,111,116,97,108,32,115,116,101,112,32,116,105,109,101,32,105,115,32,37,102,32,109,115,46,10,0,9,83,116,101,112,32,78,97,114,114,111,119,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,9,83,116,101,112,32,83,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,83,116,101,112,32,66,114,111,97,100,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,9,83,116,101,112,32,84,79,73,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,32,10,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,37,100,44,32,37,100,44,32,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,66,114,111,97,100,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,114,101,97,116,101,71,80,85,66,117,102,102,101,114,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,111,109,112,117,116,101,65,65,66,66,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,83,111,114,116,65,65,66,66,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,111,109,112,117,116,101,80,97,105,114,115,32,105,115,32,37,102,32,109,115,46,10,0,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,65,118,101,114,97,103,101,32,99,111,110,116,97,99,116,35,58,32,37,102,46,10,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,78,97,114,114,111,119,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,73,110,105,116,105,97,108,105,122,101,71,80,85,68,97,116,97,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,85,112,100,97,116,101,67,111,110,116,97,99,116,80,97,105,114,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,32,105,115,32,37,102,32,109,115,46,10,0,65,118,101,114,97,103,101,32,118,97,108,105,100,32,99,111,110,116,97,99,116,35,58,32,37,102,46,10,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,67,111,110,115,116,114,97,105,110,116,115,32,83,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,105,110,105,116,105,97,108,105,122,101,32,99,111,110,115,116,114,97,116,105,110,115,32,111,110,32,67,80,85,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,105,110,105,116,105,97,108,105,122,101,32,99,111,110,115,116,114,97,116,105,110,115,32,111,110,32,71,80,85,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,114,32,99,111,109,112,117,116,97,116,105,111,110,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,102,105,110,97,108,105,122,101,32,115,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,116,101,115,116,32,115,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,61,61,61,61,61,68,101,98,117,103,32,84,105,109,105,110,103,32,68,97,116,97,61,61,61,61,61,61,61,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,32,118,101,108,111,99,105,116,121,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,116,101,115,116,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,68,97,116,97,32,111,117,116,112,117,116,32,102,105,110,105,115,104,101,100,46,10,0,98,111,100,105,101,115,47,106,111,105,110,116,115,32,61,32,37,100,47,37,100,10,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,57,98,50,67,111,110,116,97,99,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,65,100,100,84,121,112,101,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,67,114,101,97,116,101,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,68,101,115,116,114,111,121,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,73,110,105,116,105,97,108,105,122,101,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,37,52,46,50,102,32,37,52,46,50,102,32,37,52,46,50,102,10,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,105,110,102,105,110,105,116,121,0,110,97,110,0,80,79,83,73,88,0,114,119,97,0,98,97,115,105,99,95,115,116,114,105,110,103,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,67,0,37,112,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,37,0,0,0,0,0,108,0,108,108,0,76,0,37,112,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,116,114,117,101,0,102,97,108,115,101,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,118,101,99,116,111,114,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,56,98,97,100,95,99,97,115,116,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};var CL={cl_init:0,cl_extensions:["KHR_gl_sharing","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},cl_validator:{},cl_validator_argsize:{},init:function () {
        if (CL.cl_init == 0) {
  
          if (ENVIRONMENT_IS_NODE) {
            console.log('WebCL-Translator + Validator V2.0 !');
            try {
  
              WebCLEvent      = webcl.WebCLEvent;
              WebCLSampler    = webcl.WebCLSampler;
              WebCLContext    = webcl.WebCLContext;
              WebCLProgram    = webcl.WebCLProgram;
              WebCLException  = webcl.WebCLException;
  
            } catch (e) {
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("You are using node, make sure you have node-webcl modules from Motorola.\n");
              console.error("You must define webcl=require('webcl-node'); before require this file.\n");
  
              exit(1);
            }
  
          } else {
            console.log('%c WebCL-Translator + Validator V2.0 ! ', 'background: #222; color: #bada55');
            try {
  
              // Add webcl constant for parser
              /*
              Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
              Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
              Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });
              Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
              Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
              Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
              Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
              */
              webcl["SAMPLER"      ] = 0x1300; 
              webcl["IMAGE2D"      ] = 0x1301;
              webcl["IMAGE3D"      ] = 0x1302;
              webcl["UNSIGNED_LONG"] = 0x1304;
              webcl["LONG"         ] = 0x1303;
              webcl["MAP_READ"     ] = 0x1;
              webcl["MAP_WRITE"    ] = 0x2;
  
            } catch (e) {
              alert("Unfortunately your system does not support WebCL. " +
              "Make sure that you have WebKit Samsung or Firefox Nokia plugin. ");
  
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin.\n");
  
              exit(1);
            }
          }
  
          for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
            if (webcl.enableExtension(CL.cl_extensions[i])) {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
            } else {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
            }
          }
          CL.cl_init = 1;
        }
  
        return CL.cl_init;
      },udid:function (obj) {
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
        var _security = 10;
        do {
          //var _uuid = [];
          //_uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
          //for (var i = 1; i < 7; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
          //_id = _uuid.join('');
  
          _id = Math.random() * 9000000 | 0 + 1000000
        } while (_id in CL.cl_objects && --_security > 0)
  
        assert(!(_id in CL.cl_objects), 'UDID not unique !!!!!!');
  
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          //Object.defineProperty(obj, "udid", { value : _id,writable : false });
          obj["udid"] = _id;
          CL.cl_objects[_id]=obj;
        }
  
        return _id;
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
  
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ????
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) || (string.indexOf("size_t") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
  
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(",");
  
          // Get type of the line
          var _type = CL.parseType(_var[i]);
  
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/);
          if (_res != null) _arrayNum = _res;
  
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" ");
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
  
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
  
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 50;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 50 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) {
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
  
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _param_validator = [];
          var _param_argsize_validator = [];
          var _array = _second_part.split(",");
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else if (_type == -1) {
  
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" ");
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
  
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else {
              _param.push(_type);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
            }
          }
  
          CL.cl_kernels_sig[_name] = _param;
  
          CL.cl_validator[_name] = _param_validator;
          CL.cl_validator_argsize[_name] = _param_argsize_validator;
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          case webcl.HALF_FLOAT:
            _type = webcl.HALF_FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break;
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:
            _sizeOrder = 4;
            break;
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) {
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) {
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getCopyPointerToArrayPowTwo:function (ptr,size,type) {
        var _host_ptr = null
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int8Array(_offset);
              _host_ptr.set( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int16Array(_offset);
              _host_ptr.set( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int32Array(_offset);
              _host_ptr.set( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint8Array(_offset);
              _host_ptr.set( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint16Array(_offset);
              _host_ptr.set( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint32Array(_offset);
              _host_ptr.set( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Float32Array(_offset);
              _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          var _size = size >> 2;
          var _offset = CL.getNextPowOfTwo(_size);
          _host_ptr = new Float32Array(_offset);
          _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getNextPowOfTwo:function (v) {
        // Accept 1 / 2 / 3 / 4
        if (v <= 4) return v;
        // Accept 8 / 16 / 32
        var _v = v;
        _v--;
        _v |= _v >> 1;
        _v |= _v >> 2;
        _v |= _v >> 4;
        _v |= _v >> 8;
        _v |= _v >> 16;
        _v++;
        return _v
      },copyDataToHeap:function (dest, src, size, type) {
  
        // Copy data to Emscripten heap
        //var dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);
        //dataHeap.set( new Uint8Array(_host_ptr.buffer) );
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _data_heap = new Int8Array(Module.HEAP8.buffer, dest, size);
              _data_heap.set( new Int8Array(src) );
              break;
            case webcl.SIGNED_INT16:
              var _data_heap = new Int16Array(Module.HEAP16.buffer, dest, size >> 1);
              _data_heap.set( new Int16Array(src) );
              break;
            case webcl.SIGNED_INT32:
              var _data_heap = new Int32Array(Module.HEAP32.buffer, dest, size >> 2);
              _data_heap.set( new Int32Array(src) );
              break;
            case webcl.UNSIGNED_INT8:
              var _data_heap = new Uint8Array(Module.HEAPU8.buffer, dest, size);
              _data_heap.set( new Uint8Array(src) );
              break;
            case webcl.UNSIGNED_INT16:
              var _data_heap = new Uint16Array(Module.HEAPU16.buffer, dest, size >> 1);
              _data_heap.set( new Uint16Array(src) );
              break;
            case webcl.UNSIGNED_INT32:
              var _data_heap = new Uint32Array(Module.HEAPU32.buffer, dest, size >> 2);
              _data_heap.set( new Uint32Array(src) );
              break;
            default:
              var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
              _data_heap.set( new Float32Array(src) );
              break;
          }
        } else {
          var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
          _data_heap.set( new Float32Array(src) );
        }
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
  
        return _error;
      }};function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try {
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      }
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _clGetDeviceInfo(device,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var  _info = null;
  
      try {
  
          var _object = CL.cl_objects[device];
  
        switch (param_name) {
          case 0x102B /*CL_DEVICE_NAME*/ :
            var _type = _object.getInfo(webcl.DEVICE_TYPE);
            switch (_type) {
              case webcl.DEVICE_TYPE_CPU:
                _info = "WEBCL_DEVICE_CPU";
              break;
              case webcl.DEVICE_TYPE_GPU:
                _info = "WEBCL_DEVICE_GPU";
              break;
              case webcl.DEVICE_TYPE_ACCELERATOR:
                _info = "WEBCL_DEVICE_ACCELERATOR";
              break;
              case webcl.DEVICE_TYPE_DEFAULT:
                _info = "WEBCL_DEVICE_DEFAULT";
              break;
            }
          break;
          case 0x102C /*CL_DEVICE_VENDOR*/ :
            _info = "WEBCL_DEVICE_VENDOR";
          break;
          case 0x100B /*CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE*/ :
            _info = 0;
          break;
          case 0x1030 /*CL_DEVICE_EXTENSIONS*/ :
            _info = webcl.getSupportedExtensions().join(' ') ;
          break;
          case 0x101A /*CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE*/ :
            _info = _object.getInfo(webcl.DEVICE_MEM_BASE_ADDR_ALIGN) >> 3;
          break;
          default:
            _info = _object.getInfo(param_name);
        }
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value_size == 8) {
          if (param_value != 0) (tempI64 = [_info>>>0,((+(Math_abs(_info))) >= 1.0 ? (_info > 0.0 ? ((Math_min((+(Math_floor((_info)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
        } else {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        }
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
  
        if (param_name != webcl.DEVICE_PROFILE) _info += " ";
        if (param_value != 0) writeStringToMemory(_info, param_value);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else if (_info instanceof WebCLPlatform) {
  
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
      var _local_work_size = (local_work_size != 0) ? [] : null;
  
      var _global_work_offset = [];
      var _global_work_size = [];
  
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        else
          _global_work_offset.push(0);
  
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clEnqueueWriteBufferRect(command_queue,buffer,blocking_write,buffer_origin,host_origin,region,buffer_row_pitch,buffer_slice_pitch,host_row_pitch,host_slice_pitch,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _block = blocking_write ? true : false;
      var _event = null;
      var _event_wait_list = [];
  
      var _buffer_origin = [];
      var _host_origin = [];
      var _region = [];
  
      for (var i = 0; i < 3; i++) {
        _buffer_origin.push(HEAP32[(((buffer_origin)+(i*4))>>2)]);
        _host_origin.push(HEAP32[(((host_origin)+(i*4))>>2)]);
        _region.push(HEAP32[(((region)+(i*4))>>2)]);
      }
  
      // console.info("/!\\ clEnqueueWriteBufferRect : Check the size of the ptr '"+_region.reduce(function (a, b) { return a * b; })+"'... need to be more tested");
      var _host_ptr = CL.getCopyPointerToArray(ptr,_region.reduce(function (a, b) { return a * b; }),CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
  
        CL.cl_objects[command_queue].enqueueWriteBufferRect(CL.cl_objects[buffer],_block,_buffer_origin,_host_origin,_region,buffer_row_pitch,buffer_slice_pitch,host_row_pitch,host_slice_pitch,_host_ptr,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function _clGetPlatformInfo(platform,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
  
      var _info = null;
  
      try {
  
  
        switch (param_name) {
          case 0x0902 /*CL_PLATFORM_NAME*/ :
            _info = "WEBCL_PLATFORM_NAME";
          break;
          case 0x0903 /*CL_PLATFORM_VENDOR*/ :
            _info = "WEBCL_PLATFORM_VENDOR";
          break;
            case 0x0904 /*CL_PLATFORM_EXTENSIONS*/ :
            _info = "WEBCL_PLATFORM_EXTENSIONS";
          break;
          default:
            _info = CL.cl_objects[platform].getInfo(param_name);
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
        var _info = "undefined";
  
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
  
        return _error;
      }
  
      if (param_name == webcl.PLATFORM_VERSION) _info += " ";
  
      if (param_value != 0) {
        writeStringToMemory(_info, param_value);
      }
  
      if (param_value_size_ret != 0) {
        HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
      }
  
      return webcl.SUCCESS;
  
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _block = blocking_read ? true : false;
      var _event = null;
      var _event_wait_list = [];
      var _host_ptr = CL.getHostPtrArray(cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
  
        // Copy array to heap
        CL.copyDataToHeap(ptr,_host_ptr.buffer,cb,CL.cl_pn_type);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
  
          // Call the callback
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_cond_wait() { return 0; }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try {
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _clGetDeviceIDs(platform,device_type_i64_1,device_type_i64_2,num_entries,devices,num_devices) {
      // Assume the device_type is i32
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && devices != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_devices == 0 && devices == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( platform != 0 && !(platform in CL.cl_objects)) {
        return webcl.INVALID_PLATFORM;
      }
  
      var _device = null;
  
      try {
  
        // If platform is NULL use the first platform found ...
        if (platform == 0) {
          var _platforms = webcl.getPlatforms();
          if (_platforms.length == 0) {
            return webcl.INVALID_PLATFORM;
          }
  
          // Create a new UDID
          platform = CL.udid(_platforms[0]);
        }
  
        var _platform = CL.cl_objects[platform];
  
        // Fix -1 type
        if (device_type_i64_1 == -1) device_type_i64_1 = webcl.DEVICE_TYPE_ALL;
  
  
        _devices = _platform.getDevices(device_type_i64_1);
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_devices != 0) {
        HEAP32[((num_devices)>>2)]=_devices.length /* Num of device */;
      }
  
      if (devices != 0) {
        for (var i = 0; i < Math.min(num_entries,_devices.length); i++) {
          var _id = CL.udid(_devices[i]);
          HEAP32[(((devices)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
  
    }

   
  Module["_memset"] = _memset;

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = _kernel.val_param[arg_index];
  
      var _sig = _kernel.sig[_posarg];
  
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
          var _sizearg = CL.cast_long(arg_size);
  
          if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
            _kernel.setArg(_posarg+1,_sizearg);
          }
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
  
  
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
              var _size = CL.cl_objects[_value].getInfo(webcl.MEM_SIZE);
              var _sizearg = CL.cast_long(_size);
  
              if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
                _kernel.setArg(_posarg+1,_sizearg);
              }
            }
  
  
          } else {
  
            var _array = CL.getCopyPointerToArrayPowTwo(arg_value,arg_size,[[_sig,1]]);
  
            _kernel.setArg(_posarg,_array);
  
            var _sizearg = CL.cast_long(arg_size);
  
            if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
              _kernel.setArg(_posarg+1,_sizearg);
            }
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _clCreateContext(properties,num_devices,devices,pfn_notify,user_data,cl_errcode_ret) {
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer
      }
  
      var _id = null;
      var _context = null;
  
      try {
  
        var _platform = null;
        var _devices = [];
        var _glclSharedContext = false;
  
        // Verify the device, theorically on OpenCL there are CL_INVALID_VALUE when devices or num_devices is null,
        // WebCL can work using default device / platform, we check only if parameter are set.
        for (var i = 0; i < num_devices; i++) {
          var _idxDevice = HEAP32[(((devices)+(i*4))>>2)];
            _devices.push(CL.cl_objects[_idxDevice]);
        }
  
        // Verify the property
        var _propertiesCounter = 0;
        var _properties = [];
  
        if (properties != 0) {
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200B) /*CL_WGL_HDC_KHR*/:
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:
                _propertiesCounter ++;
                _glclSharedContext = true;
  
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0;
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (num_devices > 0) {
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
  
            _context = webcl.createContext(Module.ctx,_devices);
  
          } else {
  
            _context = webcl.createContext(_devices);
  
          }
        } else if (_platform != null) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx,_platform);
          } else {
            _context = webcl.createContext(_platform);
          }
  
        } else {
          // If no device and no platfomr peek the first one
  
          // Search platform
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLPlatform) {
              _platform = CL.cl_objects[obj];
              break;
            }
          }
          if (_platform == null) {
            var _platforms = webcl.getPlatforms();
  
            _platform = _platforms[0];
  
            CL.udid(_platforms[i]);
          }
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_platform);
          } else {
            _context = webcl.createContext(_platform);
          }
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      //Object.defineProperty(_context, "properties", { value : _properties,writable : false });
      _context["properties"] = _properties;
  
  
      return _id;
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _clGetKernelWorkGroupInfo(kernel,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      try {
  
        var _info = CL.cl_objects[kernel].getWorkGroupInfo(CL.cl_objects[device], param_name);
  
        if(typeof(_info) == "number") {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Int32Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else {
  
          console.error("clGetKernelWorkGroupInfo: unknow type of info '"+_info+"'")
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function ___lock() {}

  function ___unlock() {}

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _block = blocking_write ? true : false;
      var _event_wait_list = [];
      var _host_ptr = CL.getCopyPointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32
      assert(flags_i64_2 == 0, 'Invalid flags i64');
  
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
  
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type);
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      }
  
      try {
  
  
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      //Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _buffer["flags"] = flags_i64_1;
      _id = CL.udid(_buffer);
  
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
  
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0;
          }
        }
      }
      **** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _llvm_fabs_f64=Math_abs;

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options);
  
        if (_option) {
          // Add space after -D
          _option = _option.replace(/-D/g, "-D ");
  
          // Remove all the multispace
          _option = _option.replace(/\s{2,}/g, " ");
        }
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          var _num_devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_NUM_DEVICES);
  
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES);
  
          _devices = _devices.slice(0,_num_devices);
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return
           */
          _callback = function() {
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data)
          };
        }
  
  
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clReleaseEvent(event) {
  
      // If is an object retain don't release it until retains > 0...
      if (event in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[event] - 1;
  
        CL.cl_objects_retains[event] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[event].release();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[event];
  
  
      return webcl.SUCCESS;
    }

  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try {
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
  
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
  
  
        _kernel = CL.cl_objects[program].createKernel(_name);
  
        //Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        //Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
        _kernel["name"] = _name;
        _kernel["sig"] = CL.cl_kernels_sig[_name];
  
        //Object.defineProperty(_kernel, "val_param", { value : CL.cl_validator[_name],writable : false });
        //Object.defineProperty(_kernel, "val_param_argsize", { value : CL.cl_validator_argsize[_name],writable : false });
        _kernel["val_param"] = CL.cl_validator[_name];
        _kernel["val_param_argsize"] = CL.CL.cl_validator_argsize[_name];
  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
  
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
  
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }


  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _clEnqueueCopyBufferRect(command_queue,src_buffer,dst_buffer,src_origin,dst_origin,region,src_row_pitch,src_slice_pitch,dst_row_pitch,dst_slice_pitch,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = [];
      var _src_origin = [];
      var _dest_origin = [];
      var _region = [];
  
      for (var i = 0; i < 3; i++) {
        _src_origin.push( HEAP32[(((src_origin)+(i*4))>>2)]);
        _dest_origin.push( HEAP32[(((dst_origin)+(i*4))>>2)]);
        _region.push( HEAP32[(((region)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueCopyBufferRect(CL.cl_objects[src_buffer],CL.cl_objects[dst_buffer],_src_origin,_dest_origin,_region,src_row_pitch,src_slice_pitch,dst_row_pitch,dst_slice_pitch,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
var GLctx; GL.init();
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidii(x) { Module["printErr"]("Invalid function pointer called with signature 'vidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidi(x) { Module["printErr"]("Invalid function pointer called with signature 'vidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ddd(x) { Module["printErr"]("Invalid function pointer called with signature 'ddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidi(index,a1,a2,a3) {
  try {
    Module["dynCall_vidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ddd(index,a1,a2) {
  try {
    return Module["dynCall_ddd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_vidii": nullFunc_vidii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vidi": nullFunc_vidi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_ddd": nullFunc_ddd, "nullFunc_di": nullFunc_di, "nullFunc_dd": nullFunc_dd, "nullFunc_viid": nullFunc_viid, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_vidii": invoke_vidii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidi": invoke_vidi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_ddd": invoke_ddd, "invoke_di": invoke_di, "invoke_dd": invoke_dd, "invoke_viid": invoke_viid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_cond_wait": _pthread_cond_wait, "___cxa_rethrow": ___cxa_rethrow, "_clReleaseEvent": _clReleaseEvent, "_clSetKernelArg": _clSetKernelArg, "_pthread_key_create": _pthread_key_create, "_clGetKernelWorkGroupInfo": _clGetKernelWorkGroupInfo, "_abort": _abort, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "_clCreateContext": _clCreateContext, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_clGetDeviceInfo": _clGetDeviceInfo, "__addDays": __addDays, "_clEnqueueWriteBufferRect": _clEnqueueWriteBufferRect, "_strftime_l": _strftime_l, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "_clGetPlatformIDs": _clGetPlatformIDs, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "_clGetPlatformInfo": _clGetPlatformInfo, "___cxa_begin_catch": ___cxa_begin_catch, "_strftime": _strftime, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_clFinish": _clFinish, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_once": _pthread_once, "_clCreateCommandQueue": _clCreateCommandQueue, "_pthread_getspecific": _pthread_getspecific, "_clGetDeviceIDs": _clGetDeviceIDs, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "___syscall54": ___syscall54, "___unlock": ___unlock, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "__isLeapYear": __isLeapYear, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "_clReleaseMemObject": _clReleaseMemObject, "_clCreateBuffer": _clCreateBuffer, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "___cxa_throw": ___cxa_throw, "_clCreateKernel": _clCreateKernel, "___lock": ___lock, "__arraySum": __arraySum, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___cxa_pure_virtual": ___cxa_pure_virtual, "_clBuildProgram": _clBuildProgram, "_atexit": _atexit, "___syscall140": ___syscall140, "_clEnqueueCopyBufferRect": _clEnqueueCopyBufferRect, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_clCreateProgramWithSource": _clCreateProgramWithSource, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_vidii=env.nullFunc_vidii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_vidi=env.nullFunc_vidi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_ddd=env.nullFunc_ddd;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_ddd=env.invoke_ddd;
  var invoke_di=env.invoke_di;
  var invoke_dd=env.invoke_dd;
  var invoke_viid=env.invoke_viid;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _clReleaseEvent=env._clReleaseEvent;
  var _clSetKernelArg=env._clSetKernelArg;
  var _pthread_key_create=env._pthread_key_create;
  var _clGetKernelWorkGroupInfo=env._clGetKernelWorkGroupInfo;
  var _abort=env._abort;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var _clCreateContext=env._clCreateContext;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _clGetDeviceInfo=env._clGetDeviceInfo;
  var __addDays=env.__addDays;
  var _clEnqueueWriteBufferRect=env._clEnqueueWriteBufferRect;
  var _strftime_l=env._strftime_l;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var _clGetPlatformIDs=env._clGetPlatformIDs;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __exit=env.__exit;
  var _clGetPlatformInfo=env._clGetPlatformInfo;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _strftime=env._strftime;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _clFinish=env._clFinish;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_once=env._pthread_once;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var _pthread_getspecific=env._pthread_getspecific;
  var _clGetDeviceIDs=env._clGetDeviceIDs;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var __isLeapYear=env.__isLeapYear;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var _clCreateBuffer=env._clCreateBuffer;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var _clCreateKernel=env._clCreateKernel;
  var ___lock=env.___lock;
  var __arraySum=env.__arraySum;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _clBuildProgram=env._clBuildProgram;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var _clEnqueueCopyBufferRect=env._clEnqueueCopyBufferRect;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN12b2BroadPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN13b2DynamicTreeC2Ev($3);
 $4 = ((($3)) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 48|0);
 HEAP32[$5>>2] = 16;
 $6 = ((($3)) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*12)|0;
 __THREW__ = 0;
 $10 = (invoke_ii(375,($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 6;
  } else {
   $13 = ((($3)) + 44|0);
   HEAP32[$13>>2] = $10;
   $14 = ((($3)) + 36|0);
   HEAP32[$14>>2] = 16;
   $15 = ((($3)) + 40|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($3)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17<<2;
   __THREW__ = 0;
   $19 = (invoke_ii(375,($18|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    label = 6;
   } else {
    $22 = ((($3)) + 32|0);
    HEAP32[$22>>2] = $19;
    $23 = ((($3)) + 76|0);
    HEAP32[$23>>2] = 0;
    __THREW__ = 0;
    $24 = (invoke_ii(376,124)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     label = 6;
    } else {
     __THREW__ = 0;
     invoke_vi(377,($24|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $32 = ___cxa_find_matching_catch_2()|0;
      $33 = tempRet0;
      $1 = $32;
      $2 = $33;
      __ZdlPv($24);
      break;
     } else {
      $29 = ((($3)) + 60|0);
      HEAP32[$29>>2] = $24;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $1 = $30;
  $2 = $31;
 }
 __THREW__ = 0;
 invoke_vi(378,($3|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch_3(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $1;
  $37 = $2;
  ___resumeException($36|0);
  // unreachable;
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN12b2BroadPhaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi(379,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  invoke_vi(379,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __ZN13b2DynamicTreeD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __THREW__ = 0;
 invoke_vi(378,($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch_3(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this,$aabb,$userData) {
 $this = $this|0;
 $aabb = $aabb|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($3,$4,$5)|0);
 $proxyId = $6;
 $7 = ((($3)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $proxyId;
 __ZN12b2BroadPhase10BufferMoveEi($3,$10);
 $11 = $proxyId;
 STACKTOP = sp;return ($11|0);
}
function __ZN12b2BroadPhase10BufferMoveEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = ((($2)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $oldBuffer = $9;
  $10 = ((($2)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<1;
  HEAP32[$10>>2] = $12;
  $13 = ((($2)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14<<2;
  $16 = (__Z7b2Alloci($15)|0);
  $17 = ((($2)) + 32|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($2)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $oldBuffer;
  $21 = ((($2)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<2;
  _memcpy(($19|0),($20|0),($23|0))|0;
  $24 = $oldBuffer;
  __Z6b2FreePv($24);
 }
 $25 = $1;
 $26 = ((($2)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27<<2)|0);
 HEAP32[$30>>2] = $25;
 $31 = ((($2)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this,$proxyId,$aabb,$displacement) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 $aabb = $aabb|0;
 $displacement = $displacement|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $aabb;
 $3 = $displacement;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($4,$5,$6,$7)|0);
 $9 = $8&1;
 $buffer = $9;
 $10 = $buffer;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 __ZN12b2BroadPhase10BufferMoveEi($4,$12);
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase13QueryCallbackEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $proxyId;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $52 = $$pre_trunc&1;
  STACKTOP = sp;return ($52|0);
 }
 $8 = ((($3)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $13 = ((($3)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $oldBuffer = $14;
  $15 = ((($3)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  HEAP32[$15>>2] = $17;
  $18 = ((($3)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*12)|0;
  $21 = (__Z7b2Alloci($20)|0);
  $22 = ((($3)) + 44|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($3)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $oldBuffer;
  $26 = ((($3)) + 52|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27*12)|0;
  _memcpy(($24|0),($25|0),($28|0))|0;
  $29 = $oldBuffer;
  __Z6b2FreePv($29);
 }
 $30 = $2;
 $31 = ((($3)) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (__Z5b2MinIiET_S0_S0_($30,$32)|0);
 $34 = ((($3)) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($3)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + (($35*12)|0)|0);
 HEAP32[$38>>2] = $33;
 $39 = $2;
 $40 = ((($3)) + 56|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (__Z5b2MaxIiET_S0_S0_($39,$41)|0);
 $43 = ((($3)) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($3)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($44*12)|0)|0);
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = $42;
 $49 = ((($3)) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$49>>2] = $51;
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $52 = $$pre_trunc&1;
 STACKTOP = sp;return ($52|0);
}
function __Z5b2MinIiET_S0_S0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)<($3|0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return ($7|0);
}
function __Z5b2MaxIiET_S0_S0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)>($3|0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return ($7|0);
}
function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold,$circleA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $circleA = $circleA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $d = 0, $distSqr = 0.0, $pA = 0, $pB = 0, $rA = 0.0, $rB = 0.0, $radius = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pA = sp + 32|0;
 $pB = sp + 24|0;
 $d = sp + 16|0;
 $0 = $manifold;
 $1 = $circleA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($pA,$7,$9);
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($pB,$10,$12);
 __ZmiRK6b2Vec2S1_($d,$pB,$pA);
 $13 = (+__Z5b2DotRK6b2Vec2S1_($d,$d));
 $distSqr = $13;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $rA = $16;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $rB = $19;
 $20 = $rA;
 $21 = $rB;
 $22 = $20 + $21;
 $radius = $22;
 $23 = $distSqr;
 $24 = $radius;
 $25 = $radius;
 $26 = $24 * $25;
 $27 = $23 > $26;
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $0;
 $29 = ((($28)) + 56|0);
 HEAP32[$29>>2] = 0;
 $30 = $0;
 $31 = ((($30)) + 48|0);
 $32 = $1;
 $33 = ((($32)) + 12|0);
 ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;
 $34 = $0;
 $35 = ((($34)) + 40|0);
 __ZN6b2Vec27SetZeroEv($35);
 $36 = $0;
 $37 = ((($36)) + 60|0);
 HEAP32[$37>>2] = 1;
 $38 = $0;
 $39 = $3;
 $40 = ((($39)) + 12|0);
 ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;
 $41 = $0;
 $42 = ((($41)) + 16|0);
 HEAP32[$42>>2] = 0;
 STACKTOP = sp;return;
}
function __Z5b2MulRK11b2TransformRK6b2Vec2($agg$result,$T,$v) {
 $agg$result = $agg$result|0;
 $T = $T|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = ((($3)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 $16 = $8 - $15;
 $17 = $0;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 + $18;
 $x = $19;
 $20 = $0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = +HEAPF32[$23>>2];
 $25 = $22 * $24;
 $26 = $0;
 $27 = ((($26)) + 8|0);
 $28 = ((($27)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $1;
 $31 = ((($30)) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $29 * $32;
 $34 = $25 + $33;
 $35 = $0;
 $36 = ((($35)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result,$39,$40);
 STACKTOP = sp;return;
}
function __ZN6b2Vec2C2Eff($this,$x,$y) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAPF32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZmiRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 - $12;
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2DotRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 STACKTOP = sp;return (+$14);
}
function __ZN6b2Vec27SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold,$polygonA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $polygonA = $polygonA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cLocal = 0, $faceCenter = 0;
 var $i = 0, $normalIndex = 0, $normals = 0, $radius = 0.0, $s = 0.0, $separation = 0.0, $separation1 = 0.0, $u1 = 0.0, $u2 = 0.0, $v1 = 0, $v2 = 0, $vertIndex1 = 0, $vertIndex2 = 0, $vertexCount = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 184|0;
 $cLocal = sp + 176|0;
 $5 = sp + 136|0;
 $v1 = sp + 120|0;
 $v2 = sp + 112|0;
 $6 = sp + 104|0;
 $7 = sp + 96|0;
 $8 = sp + 80|0;
 $9 = sp + 72|0;
 $10 = sp + 56|0;
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $faceCenter = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp;
 $0 = $manifold;
 $1 = $polygonA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $16 = $0;
 $17 = ((($16)) + 60|0);
 HEAP32[$17>>2] = 0;
 $18 = $4;
 $19 = $3;
 $20 = ((($19)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($c,$18,$20);
 $21 = $2;
 __Z6b2MulTRK11b2TransformRK6b2Vec2($cLocal,$21,$c);
 $normalIndex = 0;
 $separation = -3.4028234663852886E+38;
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $3;
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 + $27;
 $radius = $28;
 $29 = $1;
 $30 = ((($29)) + 148|0);
 $31 = HEAP32[$30>>2]|0;
 $vertexCount = $31;
 $32 = $1;
 $33 = ((($32)) + 20|0);
 $vertices = $33;
 $34 = $1;
 $35 = ((($34)) + 84|0);
 $normals = $35;
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = $vertexCount;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = $normals;
  $41 = (($40) + ($39<<3)|0);
  $42 = $i;
  $43 = $vertices;
  $44 = (($43) + ($42<<3)|0);
  __ZmiRK6b2Vec2S1_($5,$cLocal,$44);
  $45 = (+__Z5b2DotRK6b2Vec2S1_($41,$5));
  $s = $45;
  $46 = $s;
  $47 = $radius;
  $48 = $46 > $47;
  if ($48) {
   label = 17;
   break;
  }
  $49 = $s;
  $50 = $separation;
  $51 = $49 > $50;
  if ($51) {
   $52 = $s;
   $separation = $52;
   $53 = $i;
   $normalIndex = $53;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 $56 = $normalIndex;
 $vertIndex1 = $56;
 $57 = $vertIndex1;
 $58 = (($57) + 1)|0;
 $59 = $vertexCount;
 $60 = ($58|0)<($59|0);
 $61 = $vertIndex1;
 $62 = (($61) + 1)|0;
 $63 = $60 ? $62 : 0;
 $vertIndex2 = $63;
 $64 = $vertIndex1;
 $65 = $vertices;
 $66 = (($65) + ($64<<3)|0);
 ;HEAP32[$v1>>2]=HEAP32[$66>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$66+4>>2]|0;
 $67 = $vertIndex2;
 $68 = $vertices;
 $69 = (($68) + ($67<<3)|0);
 ;HEAP32[$v2>>2]=HEAP32[$69>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$69+4>>2]|0;
 $70 = $separation;
 $71 = $70 < 1.1920928955078125E-7;
 if ($71) {
  $72 = $0;
  $73 = ((($72)) + 60|0);
  HEAP32[$73>>2] = 1;
  $74 = $0;
  $75 = ((($74)) + 56|0);
  HEAP32[$75>>2] = 1;
  $76 = $0;
  $77 = ((($76)) + 40|0);
  $78 = $normalIndex;
  $79 = $normals;
  $80 = (($79) + ($78<<3)|0);
  ;HEAP32[$77>>2]=HEAP32[$80>>2]|0;HEAP32[$77+4>>2]=HEAP32[$80+4>>2]|0;
  $81 = $0;
  $82 = ((($81)) + 48|0);
  __ZplRK6b2Vec2S1_($7,$v1,$v2);
  __ZmlfRK6b2Vec2($6,0.5,$7);
  ;HEAP32[$82>>2]=HEAP32[$6>>2]|0;HEAP32[$82+4>>2]=HEAP32[$6+4>>2]|0;
  $83 = $0;
  $84 = $3;
  $85 = ((($84)) + 12|0);
  ;HEAP32[$83>>2]=HEAP32[$85>>2]|0;HEAP32[$83+4>>2]=HEAP32[$85+4>>2]|0;
  $86 = $0;
  $87 = ((($86)) + 16|0);
  HEAP32[$87>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZmiRK6b2Vec2S1_($8,$cLocal,$v1);
 __ZmiRK6b2Vec2S1_($9,$v2,$v1);
 $88 = (+__Z5b2DotRK6b2Vec2S1_($8,$9));
 $u1 = $88;
 __ZmiRK6b2Vec2S1_($10,$cLocal,$v2);
 __ZmiRK6b2Vec2S1_($11,$v1,$v2);
 $89 = (+__Z5b2DotRK6b2Vec2S1_($10,$11));
 $u2 = $89;
 $90 = $u1;
 $91 = $90 <= 0.0;
 if ($91) {
  $92 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal,$v1));
  $93 = $radius;
  $94 = $radius;
  $95 = $93 * $94;
  $96 = $92 > $95;
  if ($96) {
   STACKTOP = sp;return;
  }
  $97 = $0;
  $98 = ((($97)) + 60|0);
  HEAP32[$98>>2] = 1;
  $99 = $0;
  $100 = ((($99)) + 56|0);
  HEAP32[$100>>2] = 1;
  $101 = $0;
  $102 = ((($101)) + 40|0);
  __ZmiRK6b2Vec2S1_($12,$cLocal,$v1);
  ;HEAP32[$102>>2]=HEAP32[$12>>2]|0;HEAP32[$102+4>>2]=HEAP32[$12+4>>2]|0;
  $103 = $0;
  $104 = ((($103)) + 40|0);
  (+__ZN6b2Vec29NormalizeEv($104));
  $105 = $0;
  $106 = ((($105)) + 48|0);
  ;HEAP32[$106>>2]=HEAP32[$v1>>2]|0;HEAP32[$106+4>>2]=HEAP32[$v1+4>>2]|0;
  $107 = $0;
  $108 = $3;
  $109 = ((($108)) + 12|0);
  ;HEAP32[$107>>2]=HEAP32[$109>>2]|0;HEAP32[$107+4>>2]=HEAP32[$109+4>>2]|0;
  $110 = $0;
  $111 = ((($110)) + 16|0);
  HEAP32[$111>>2] = 0;
  STACKTOP = sp;return;
 }
 $112 = $u2;
 $113 = $112 <= 0.0;
 if ($113) {
  $114 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal,$v2));
  $115 = $radius;
  $116 = $radius;
  $117 = $115 * $116;
  $118 = $114 > $117;
  if ($118) {
   STACKTOP = sp;return;
  }
  $119 = $0;
  $120 = ((($119)) + 60|0);
  HEAP32[$120>>2] = 1;
  $121 = $0;
  $122 = ((($121)) + 56|0);
  HEAP32[$122>>2] = 1;
  $123 = $0;
  $124 = ((($123)) + 40|0);
  __ZmiRK6b2Vec2S1_($13,$cLocal,$v2);
  ;HEAP32[$124>>2]=HEAP32[$13>>2]|0;HEAP32[$124+4>>2]=HEAP32[$13+4>>2]|0;
  $125 = $0;
  $126 = ((($125)) + 40|0);
  (+__ZN6b2Vec29NormalizeEv($126));
  $127 = $0;
  $128 = ((($127)) + 48|0);
  ;HEAP32[$128>>2]=HEAP32[$v2>>2]|0;HEAP32[$128+4>>2]=HEAP32[$v2+4>>2]|0;
  $129 = $0;
  $130 = $3;
  $131 = ((($130)) + 12|0);
  ;HEAP32[$129>>2]=HEAP32[$131>>2]|0;HEAP32[$129+4>>2]=HEAP32[$131+4>>2]|0;
  $132 = $0;
  $133 = ((($132)) + 16|0);
  HEAP32[$133>>2] = 0;
  STACKTOP = sp;return;
 } else {
  __ZplRK6b2Vec2S1_($14,$v1,$v2);
  __ZmlfRK6b2Vec2($faceCenter,0.5,$14);
  __ZmiRK6b2Vec2S1_($15,$cLocal,$faceCenter);
  $134 = $vertIndex1;
  $135 = $normals;
  $136 = (($135) + ($134<<3)|0);
  $137 = (+__Z5b2DotRK6b2Vec2S1_($15,$136));
  $separation1 = $137;
  $138 = $separation1;
  $139 = $radius;
  $140 = $138 > $139;
  if ($140) {
   STACKTOP = sp;return;
  }
  $141 = $0;
  $142 = ((($141)) + 60|0);
  HEAP32[$142>>2] = 1;
  $143 = $0;
  $144 = ((($143)) + 56|0);
  HEAP32[$144>>2] = 1;
  $145 = $0;
  $146 = ((($145)) + 40|0);
  $147 = $vertIndex1;
  $148 = $normals;
  $149 = (($148) + ($147<<3)|0);
  ;HEAP32[$146>>2]=HEAP32[$149>>2]|0;HEAP32[$146+4>>2]=HEAP32[$149+4>>2]|0;
  $150 = $0;
  $151 = ((($150)) + 48|0);
  ;HEAP32[$151>>2]=HEAP32[$faceCenter>>2]|0;HEAP32[$151+4>>2]=HEAP32[$faceCenter+4>>2]|0;
  $152 = $0;
  $153 = $3;
  $154 = ((($153)) + 12|0);
  ;HEAP32[$152>>2]=HEAP32[$154>>2]|0;HEAP32[$152+4>>2]=HEAP32[$154+4>>2]|0;
  $155 = $0;
  $156 = ((($155)) + 16|0);
  HEAP32[$156>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __Z6b2MulTRK11b2TransformRK6b2Vec2($agg$result,$T,$v) {
 $agg$result = $agg$result|0;
 $T = $T|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0.0, $px = 0.0, $py = 0.0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $px = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 - $12;
 $py = $13;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $px;
 $19 = $17 * $18;
 $20 = $0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $py;
 $24 = $22 * $23;
 $25 = $19 + $24;
 $x = $25;
 $26 = $0;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = -$28;
 $30 = $px;
 $31 = $29 * $30;
 $32 = $0;
 $33 = ((($32)) + 8|0);
 $34 = ((($33)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $py;
 $37 = $35 * $36;
 $38 = $31 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result,$39,$40);
 STACKTOP = sp;return;
}
function __ZplRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __ZmlfRK6b2Vec2($agg$result,$s,$a) {
 $agg$result = $agg$result|0;
 $s = +$s;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = $2 * $4;
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $6 * $9;
 __ZN6b2Vec2C2Eff($agg$result,$5,$10);
 STACKTOP = sp;return;
}
function __Z17b2DistanceSquaredRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c,$2,$3);
 $4 = (+__Z5b2DotRK6b2Vec2S1_($c,$c));
 STACKTOP = sp;return (+$4);
}
function __ZN6b2Vec29NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $invLength = 0.0, $length = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (+__ZNK6b2Vec26LengthEv($2));
 $length = $3;
 $4 = $length;
 $5 = $4 < 1.1920928955078125E-7;
 if ($5) {
  $0 = 0.0;
  $16 = $0;
  STACKTOP = sp;return (+$16);
 } else {
  $6 = $length;
  $7 = 1.0 / $6;
  $invLength = $7;
  $8 = $invLength;
  $9 = +HEAPF32[$2>>2];
  $10 = $9 * $8;
  HEAPF32[$2>>2] = $10;
  $11 = $invLength;
  $12 = ((($2)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13 * $11;
  HEAPF32[$12>>2] = $14;
  $15 = $length;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return (+$16);
 }
 return +(0.0);
}
function __ZNK6b2Vec26LengthEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 * $4;
 $6 = ((($2)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $0 = $11;
 $12 = $0;
 $13 = (+Math_sqrt((+$12)));
 STACKTOP = sp;return (+$13);
}
function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold,$edgeA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $A = 0, $A1 = 0, $A2 = 0, $B = 0, $B1 = 0, $B2 = 0, $P = 0, $P1 = 0, $P4 = 0, $Q = 0, $cf = 0, $d = 0, $d2 = 0, $d5 = 0, $dd = 0.0, $dd3 = 0.0, $dd6 = 0.0, $den = 0.0, $e = 0;
 var $e1 = 0, $e2 = 0, $n = 0, $radius = 0.0, $u = 0.0, $u1 = 0.0, $v = 0.0, $v2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $Q = sp + 272|0;
 $5 = sp + 264|0;
 $A = sp + 256|0;
 $B = sp + 248|0;
 $e = sp + 240|0;
 $6 = sp + 224|0;
 $7 = sp + 208|0;
 $cf = sp + 300|0;
 $P = sp + 192|0;
 $d = sp + 184|0;
 $A1 = sp + 168|0;
 $B1 = sp + 160|0;
 $e1 = sp + 152|0;
 $8 = sp + 136|0;
 $P1 = sp + 128|0;
 $d2 = sp + 120|0;
 $B2 = sp + 104|0;
 $A2 = sp + 96|0;
 $e2 = sp + 88|0;
 $9 = sp + 72|0;
 $P4 = sp + 56|0;
 $10 = sp + 48|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $d5 = sp + 24|0;
 $n = sp + 8|0;
 $13 = sp;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $14 = $0;
 $15 = ((($14)) + 60|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = $4;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($5,$17,$19);
 __Z6b2MulTRK11b2TransformRK6b2Vec2($Q,$16,$5);
 $20 = $1;
 $21 = ((($20)) + 12|0);
 ;HEAP32[$A>>2]=HEAP32[$21>>2]|0;HEAP32[$A+4>>2]=HEAP32[$21+4>>2]|0;
 $22 = $1;
 $23 = ((($22)) + 20|0);
 ;HEAP32[$B>>2]=HEAP32[$23>>2]|0;HEAP32[$B+4>>2]=HEAP32[$23+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e,$B,$A);
 __ZmiRK6b2Vec2S1_($6,$B,$Q);
 $24 = (+__Z5b2DotRK6b2Vec2S1_($e,$6));
 $u = $24;
 __ZmiRK6b2Vec2S1_($7,$Q,$A);
 $25 = (+__Z5b2DotRK6b2Vec2S1_($e,$7));
 $v = $25;
 $26 = $1;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $3;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $28 + $31;
 $radius = $32;
 $33 = ((($cf)) + 1|0);
 HEAP8[$33>>0] = 0;
 $34 = ((($cf)) + 3|0);
 HEAP8[$34>>0] = 0;
 $35 = $v;
 $36 = $35 <= 0.0;
 if ($36) {
  ;HEAP32[$P>>2]=HEAP32[$A>>2]|0;HEAP32[$P+4>>2]=HEAP32[$A+4>>2]|0;
  __ZmiRK6b2Vec2S1_($d,$Q,$P);
  $37 = (+__Z5b2DotRK6b2Vec2S1_($d,$d));
  $dd = $37;
  $38 = $dd;
  $39 = $radius;
  $40 = $radius;
  $41 = $39 * $40;
  $42 = $38 > $41;
  if ($42) {
   STACKTOP = sp;return;
  }
  $43 = $1;
  $44 = ((($43)) + 44|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&1;
  if ($46) {
   $47 = $1;
   $48 = ((($47)) + 28|0);
   ;HEAP32[$A1>>2]=HEAP32[$48>>2]|0;HEAP32[$A1+4>>2]=HEAP32[$48+4>>2]|0;
   ;HEAP32[$B1>>2]=HEAP32[$A>>2]|0;HEAP32[$B1+4>>2]=HEAP32[$A+4>>2]|0;
   __ZmiRK6b2Vec2S1_($e1,$B1,$A1);
   __ZmiRK6b2Vec2S1_($8,$B1,$Q);
   $49 = (+__Z5b2DotRK6b2Vec2S1_($e1,$8));
   $u1 = $49;
   $50 = $u1;
   $51 = $50 > 0.0;
   if ($51) {
    STACKTOP = sp;return;
   }
  }
  HEAP8[$cf>>0] = 0;
  $52 = ((($cf)) + 2|0);
  HEAP8[$52>>0] = 0;
  $53 = $0;
  $54 = ((($53)) + 60|0);
  HEAP32[$54>>2] = 1;
  $55 = $0;
  $56 = ((($55)) + 56|0);
  HEAP32[$56>>2] = 0;
  $57 = $0;
  $58 = ((($57)) + 40|0);
  __ZN6b2Vec27SetZeroEv($58);
  $59 = $0;
  $60 = ((($59)) + 48|0);
  ;HEAP32[$60>>2]=HEAP32[$P>>2]|0;HEAP32[$60+4>>2]=HEAP32[$P+4>>2]|0;
  $61 = $0;
  $62 = ((($61)) + 16|0);
  HEAP32[$62>>2] = 0;
  $63 = $0;
  $64 = ((($63)) + 16|0);
  ;HEAP8[$64>>0]=HEAP8[$cf>>0]|0;HEAP8[$64+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$cf+3>>0]|0;
  $65 = $0;
  $66 = $3;
  $67 = ((($66)) + 12|0);
  ;HEAP32[$65>>2]=HEAP32[$67>>2]|0;HEAP32[$65+4>>2]=HEAP32[$67+4>>2]|0;
  STACKTOP = sp;return;
 }
 $68 = $u;
 $69 = $68 <= 0.0;
 if ($69) {
  ;HEAP32[$P1>>2]=HEAP32[$B>>2]|0;HEAP32[$P1+4>>2]=HEAP32[$B+4>>2]|0;
  __ZmiRK6b2Vec2S1_($d2,$Q,$P1);
  $70 = (+__Z5b2DotRK6b2Vec2S1_($d2,$d2));
  $dd3 = $70;
  $71 = $dd3;
  $72 = $radius;
  $73 = $radius;
  $74 = $72 * $73;
  $75 = $71 > $74;
  if ($75) {
   STACKTOP = sp;return;
  }
  $76 = $1;
  $77 = ((($76)) + 45|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&1;
  if ($79) {
   $80 = $1;
   $81 = ((($80)) + 36|0);
   ;HEAP32[$B2>>2]=HEAP32[$81>>2]|0;HEAP32[$B2+4>>2]=HEAP32[$81+4>>2]|0;
   ;HEAP32[$A2>>2]=HEAP32[$B>>2]|0;HEAP32[$A2+4>>2]=HEAP32[$B+4>>2]|0;
   __ZmiRK6b2Vec2S1_($e2,$B2,$A2);
   __ZmiRK6b2Vec2S1_($9,$Q,$A2);
   $82 = (+__Z5b2DotRK6b2Vec2S1_($e2,$9));
   $v2 = $82;
   $83 = $v2;
   $84 = $83 > 0.0;
   if ($84) {
    STACKTOP = sp;return;
   }
  }
  HEAP8[$cf>>0] = 1;
  $85 = ((($cf)) + 2|0);
  HEAP8[$85>>0] = 0;
  $86 = $0;
  $87 = ((($86)) + 60|0);
  HEAP32[$87>>2] = 1;
  $88 = $0;
  $89 = ((($88)) + 56|0);
  HEAP32[$89>>2] = 0;
  $90 = $0;
  $91 = ((($90)) + 40|0);
  __ZN6b2Vec27SetZeroEv($91);
  $92 = $0;
  $93 = ((($92)) + 48|0);
  ;HEAP32[$93>>2]=HEAP32[$P1>>2]|0;HEAP32[$93+4>>2]=HEAP32[$P1+4>>2]|0;
  $94 = $0;
  $95 = ((($94)) + 16|0);
  HEAP32[$95>>2] = 0;
  $96 = $0;
  $97 = ((($96)) + 16|0);
  ;HEAP8[$97>>0]=HEAP8[$cf>>0]|0;HEAP8[$97+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$cf+3>>0]|0;
  $98 = $0;
  $99 = $3;
  $100 = ((($99)) + 12|0);
  ;HEAP32[$98>>2]=HEAP32[$100>>2]|0;HEAP32[$98+4>>2]=HEAP32[$100+4>>2]|0;
  STACKTOP = sp;return;
 }
 $101 = (+__Z5b2DotRK6b2Vec2S1_($e,$e));
 $den = $101;
 $102 = $den;
 $103 = $102 > 0.0;
 if (!($103)) {
  ___assert_fail((9872|0),(9883|0),127,(9966|0));
  // unreachable;
 }
 $104 = $den;
 $105 = 1.0 / $104;
 $106 = $u;
 __ZmlfRK6b2Vec2($11,$106,$A);
 $107 = $v;
 __ZmlfRK6b2Vec2($12,$107,$B);
 __ZplRK6b2Vec2S1_($10,$11,$12);
 __ZmlfRK6b2Vec2($P4,$105,$10);
 __ZmiRK6b2Vec2S1_($d5,$Q,$P4);
 $108 = (+__Z5b2DotRK6b2Vec2S1_($d5,$d5));
 $dd6 = $108;
 $109 = $dd6;
 $110 = $radius;
 $111 = $radius;
 $112 = $110 * $111;
 $113 = $109 > $112;
 if ($113) {
  STACKTOP = sp;return;
 }
 $114 = ((($e)) + 4|0);
 $115 = +HEAPF32[$114>>2];
 $116 = -$115;
 $117 = +HEAPF32[$e>>2];
 __ZN6b2Vec2C2Eff($n,$116,$117);
 __ZmiRK6b2Vec2S1_($13,$Q,$A);
 $118 = (+__Z5b2DotRK6b2Vec2S1_($n,$13));
 $119 = $118 < 0.0;
 if ($119) {
  $120 = +HEAPF32[$n>>2];
  $121 = -$120;
  $122 = ((($n)) + 4|0);
  $123 = +HEAPF32[$122>>2];
  $124 = -$123;
  __ZN6b2Vec23SetEff($n,$121,$124);
 }
 (+__ZN6b2Vec29NormalizeEv($n));
 HEAP8[$cf>>0] = 0;
 $125 = ((($cf)) + 2|0);
 HEAP8[$125>>0] = 1;
 $126 = $0;
 $127 = ((($126)) + 60|0);
 HEAP32[$127>>2] = 1;
 $128 = $0;
 $129 = ((($128)) + 56|0);
 HEAP32[$129>>2] = 1;
 $130 = $0;
 $131 = ((($130)) + 40|0);
 ;HEAP32[$131>>2]=HEAP32[$n>>2]|0;HEAP32[$131+4>>2]=HEAP32[$n+4>>2]|0;
 $132 = $0;
 $133 = ((($132)) + 48|0);
 ;HEAP32[$133>>2]=HEAP32[$A>>2]|0;HEAP32[$133+4>>2]=HEAP32[$A+4>>2]|0;
 $134 = $0;
 $135 = ((($134)) + 16|0);
 HEAP32[$135>>2] = 0;
 $136 = $0;
 $137 = ((($136)) + 16|0);
 ;HEAP8[$137>>0]=HEAP8[$cf>>0]|0;HEAP8[$137+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$137+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$137+3>>0]=HEAP8[$cf+3>>0]|0;
 $138 = $0;
 $139 = $3;
 $140 = ((($139)) + 12|0);
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;HEAP32[$138+4>>2]=HEAP32[$140+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6b2Vec23SetEff($this,$x_,$y_) {
 $this = $this|0;
 $x_ = +$x_;
 $y_ = +$y_;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x_;
 $2 = $y_;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = $2;
 $6 = ((($3)) + 4|0);
 HEAPF32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this,$manifold,$edgeA,$xfA,$polygonB,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $polygonB = $polygonB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0.0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bestIndex = 0, $bestValue = 0.0, $clipPoints1 = 0, $clipPoints2 = 0, $convex1 = 0, $convex2 = 0, $cp = 0, $edge0 = 0, $edge1 = 0, $edge2 = 0, $edgeAxis = 0, $hasVertex0 = 0, $hasVertex3 = 0, $i = 0, $i1 = 0, $i12 = 0, $i2 = 0, $i3 = 0, $ie = 0, $k_absoluteTol = 0.0;
 var $k_relativeTol = 0.0, $np = 0, $offset0 = 0.0, $offset1 = 0.0, $offset2 = 0.0, $or$cond = 0, $or$cond3 = 0, $pointCount = 0, $polygonAxis = 0, $primaryAxis = 0, $rf = 0, $separation = 0.0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 568|0;
 $7 = sp + 560|0;
 $edge1 = sp + 552|0;
 $8 = sp + 536|0;
 $edge0 = sp + 520|0;
 $9 = sp + 512|0;
 $edge2 = sp + 504|0;
 $10 = sp + 496|0;
 $11 = sp + 488|0;
 $12 = sp + 480|0;
 $13 = sp + 472|0;
 $14 = sp + 464|0;
 $15 = sp + 456|0;
 $16 = sp + 448|0;
 $17 = sp + 440|0;
 $18 = sp + 432|0;
 $19 = sp + 424|0;
 $20 = sp + 416|0;
 $21 = sp + 408|0;
 $22 = sp + 400|0;
 $23 = sp + 392|0;
 $24 = sp + 384|0;
 $25 = sp + 376|0;
 $26 = sp + 368|0;
 $27 = sp + 360|0;
 $28 = sp + 352|0;
 $29 = sp + 344|0;
 $30 = sp + 336|0;
 $31 = sp + 328|0;
 $32 = sp + 320|0;
 $33 = sp + 312|0;
 $34 = sp + 304|0;
 $35 = sp + 296|0;
 $36 = sp + 288|0;
 $37 = sp + 280|0;
 $38 = sp + 264|0;
 $39 = sp + 256|0;
 $edgeAxis = sp + 240|0;
 $polygonAxis = sp + 228|0;
 $primaryAxis = sp + 208|0;
 $ie = sp + 184|0;
 $rf = sp + 128|0;
 $40 = sp + 96|0;
 $41 = sp + 88|0;
 $clipPoints1 = sp + 64|0;
 $clipPoints2 = sp + 40|0;
 $42 = sp + 16|0;
 $43 = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $edgeA;
 $3 = $xfA;
 $4 = $polygonB;
 $5 = $xfB;
 $44 = $0;
 $45 = ((($44)) + 132|0);
 $46 = $3;
 $47 = $5;
 __Z6b2MulTRK11b2TransformS1_($6,$46,$47);
 ;HEAP32[$45>>2]=HEAP32[$6>>2]|0;HEAP32[$45+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$45+12>>2]=HEAP32[$6+12>>2]|0;
 $48 = ((($44)) + 148|0);
 $49 = ((($44)) + 132|0);
 $50 = $4;
 $51 = ((($50)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$49,$51);
 ;HEAP32[$48>>2]=HEAP32[$7>>2]|0;HEAP32[$48+4>>2]=HEAP32[$7+4>>2]|0;
 $52 = ((($44)) + 156|0);
 $53 = $2;
 $54 = ((($53)) + 28|0);
 ;HEAP32[$52>>2]=HEAP32[$54>>2]|0;HEAP32[$52+4>>2]=HEAP32[$54+4>>2]|0;
 $55 = ((($44)) + 164|0);
 $56 = $2;
 $57 = ((($56)) + 12|0);
 ;HEAP32[$55>>2]=HEAP32[$57>>2]|0;HEAP32[$55+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = ((($44)) + 172|0);
 $59 = $2;
 $60 = ((($59)) + 20|0);
 ;HEAP32[$58>>2]=HEAP32[$60>>2]|0;HEAP32[$58+4>>2]=HEAP32[$60+4>>2]|0;
 $61 = ((($44)) + 180|0);
 $62 = $2;
 $63 = ((($62)) + 36|0);
 ;HEAP32[$61>>2]=HEAP32[$63>>2]|0;HEAP32[$61+4>>2]=HEAP32[$63+4>>2]|0;
 $64 = $2;
 $65 = ((($64)) + 44|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&1;
 $68 = $67&1;
 $hasVertex0 = $68;
 $69 = $2;
 $70 = ((($69)) + 45|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&1;
 $73 = $72&1;
 $hasVertex3 = $73;
 $74 = ((($44)) + 172|0);
 $75 = ((($44)) + 164|0);
 __ZmiRK6b2Vec2S1_($edge1,$74,$75);
 (+__ZN6b2Vec29NormalizeEv($edge1));
 $76 = ((($44)) + 196|0);
 $77 = ((($edge1)) + 4|0);
 $78 = +HEAPF32[$77>>2];
 $79 = +HEAPF32[$edge1>>2];
 $80 = -$79;
 __ZN6b2Vec23SetEff($76,$78,$80);
 $81 = ((($44)) + 196|0);
 $82 = ((($44)) + 148|0);
 $83 = ((($44)) + 164|0);
 __ZmiRK6b2Vec2S1_($8,$82,$83);
 $84 = (+__Z5b2DotRK6b2Vec2S1_($81,$8));
 $offset1 = $84;
 $offset0 = 0.0;
 $offset2 = 0.0;
 $convex1 = 0;
 $convex2 = 0;
 $85 = $hasVertex0;
 $86 = $85&1;
 if ($86) {
  $87 = ((($44)) + 164|0);
  $88 = ((($44)) + 156|0);
  __ZmiRK6b2Vec2S1_($edge0,$87,$88);
  (+__ZN6b2Vec29NormalizeEv($edge0));
  $89 = ((($44)) + 188|0);
  $90 = ((($edge0)) + 4|0);
  $91 = +HEAPF32[$90>>2];
  $92 = +HEAPF32[$edge0>>2];
  $93 = -$92;
  __ZN6b2Vec23SetEff($89,$91,$93);
  $94 = (+__Z7b2CrossRK6b2Vec2S1_($edge0,$edge1));
  $95 = $94 >= 0.0;
  $96 = $95&1;
  $convex1 = $96;
  $97 = ((($44)) + 188|0);
  $98 = ((($44)) + 148|0);
  $99 = ((($44)) + 156|0);
  __ZmiRK6b2Vec2S1_($9,$98,$99);
  $100 = (+__Z5b2DotRK6b2Vec2S1_($97,$9));
  $offset0 = $100;
 }
 $101 = $hasVertex3;
 $102 = $101&1;
 if ($102) {
  $103 = ((($44)) + 180|0);
  $104 = ((($44)) + 172|0);
  __ZmiRK6b2Vec2S1_($edge2,$103,$104);
  (+__ZN6b2Vec29NormalizeEv($edge2));
  $105 = ((($44)) + 204|0);
  $106 = ((($edge2)) + 4|0);
  $107 = +HEAPF32[$106>>2];
  $108 = +HEAPF32[$edge2>>2];
  $109 = -$108;
  __ZN6b2Vec23SetEff($105,$107,$109);
  $110 = (+__Z7b2CrossRK6b2Vec2S1_($edge1,$edge2));
  $111 = $110 > 0.0;
  $112 = $111&1;
  $convex2 = $112;
  $113 = ((($44)) + 204|0);
  $114 = ((($44)) + 148|0);
  $115 = ((($44)) + 172|0);
  __ZmiRK6b2Vec2S1_($10,$114,$115);
  $116 = (+__Z5b2DotRK6b2Vec2S1_($113,$10));
  $offset2 = $116;
 }
 $117 = $hasVertex0;
 $118 = $117&1;
 do {
  if ($118) {
   $119 = $hasVertex3;
   $120 = $119&1;
   if ($120) {
    $121 = $convex1;
    $122 = $121&1;
    if ($122) {
     $123 = $convex2;
     $124 = $123&1;
     if ($124) {
      $125 = $offset0;
      $126 = $125 >= 0.0;
      $127 = $offset1;
      $128 = $127 >= 0.0;
      $or$cond = $126 | $128;
      if ($or$cond) {
       $133 = 1;
      } else {
       $129 = $offset2;
       $130 = $129 >= 0.0;
       $133 = $130;
      }
      $131 = ((($44)) + 248|0);
      $132 = $133&1;
      HEAP8[$131>>0] = $132;
      $134 = ((($44)) + 248|0);
      $135 = HEAP8[$134>>0]|0;
      $136 = $135&1;
      $137 = ((($44)) + 212|0);
      $138 = ((($44)) + 196|0);
      if ($136) {
       ;HEAP32[$137>>2]=HEAP32[$138>>2]|0;HEAP32[$137+4>>2]=HEAP32[$138+4>>2]|0;
       $139 = ((($44)) + 228|0);
       $140 = ((($44)) + 188|0);
       ;HEAP32[$139>>2]=HEAP32[$140>>2]|0;HEAP32[$139+4>>2]=HEAP32[$140+4>>2]|0;
       $141 = ((($44)) + 236|0);
       $142 = ((($44)) + 204|0);
       ;HEAP32[$141>>2]=HEAP32[$142>>2]|0;HEAP32[$141+4>>2]=HEAP32[$142+4>>2]|0;
       break;
      } else {
       __ZNK6b2Vec2ngEv($11,$138);
       ;HEAP32[$137>>2]=HEAP32[$11>>2]|0;HEAP32[$137+4>>2]=HEAP32[$11+4>>2]|0;
       $143 = ((($44)) + 228|0);
       $144 = ((($44)) + 196|0);
       __ZNK6b2Vec2ngEv($12,$144);
       ;HEAP32[$143>>2]=HEAP32[$12>>2]|0;HEAP32[$143+4>>2]=HEAP32[$12+4>>2]|0;
       $145 = ((($44)) + 236|0);
       $146 = ((($44)) + 196|0);
       __ZNK6b2Vec2ngEv($13,$146);
       ;HEAP32[$145>>2]=HEAP32[$13>>2]|0;HEAP32[$145+4>>2]=HEAP32[$13+4>>2]|0;
       break;
      }
     }
    }
    $147 = $convex1;
    $148 = $147&1;
    if ($148) {
     $149 = $offset0;
     $150 = $149 >= 0.0;
     if ($150) {
      $158 = 1;
     } else {
      $151 = $offset1;
      $152 = $151 >= 0.0;
      $153 = $offset2;
      $154 = $153 >= 0.0;
      $155 = $152 ? $154 : 0;
      $158 = $155;
     }
     $156 = ((($44)) + 248|0);
     $157 = $158&1;
     HEAP8[$156>>0] = $157;
     $159 = ((($44)) + 248|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160&1;
     $162 = ((($44)) + 212|0);
     $163 = ((($44)) + 196|0);
     if ($161) {
      ;HEAP32[$162>>2]=HEAP32[$163>>2]|0;HEAP32[$162+4>>2]=HEAP32[$163+4>>2]|0;
      $164 = ((($44)) + 228|0);
      $165 = ((($44)) + 188|0);
      ;HEAP32[$164>>2]=HEAP32[$165>>2]|0;HEAP32[$164+4>>2]=HEAP32[$165+4>>2]|0;
      $166 = ((($44)) + 236|0);
      $167 = ((($44)) + 196|0);
      ;HEAP32[$166>>2]=HEAP32[$167>>2]|0;HEAP32[$166+4>>2]=HEAP32[$167+4>>2]|0;
      break;
     } else {
      __ZNK6b2Vec2ngEv($14,$163);
      ;HEAP32[$162>>2]=HEAP32[$14>>2]|0;HEAP32[$162+4>>2]=HEAP32[$14+4>>2]|0;
      $168 = ((($44)) + 228|0);
      $169 = ((($44)) + 204|0);
      __ZNK6b2Vec2ngEv($15,$169);
      ;HEAP32[$168>>2]=HEAP32[$15>>2]|0;HEAP32[$168+4>>2]=HEAP32[$15+4>>2]|0;
      $170 = ((($44)) + 236|0);
      $171 = ((($44)) + 196|0);
      __ZNK6b2Vec2ngEv($16,$171);
      ;HEAP32[$170>>2]=HEAP32[$16>>2]|0;HEAP32[$170+4>>2]=HEAP32[$16+4>>2]|0;
      break;
     }
    }
    $172 = $convex2;
    $173 = $172&1;
    if ($173) {
     $174 = $offset2;
     $175 = $174 >= 0.0;
     if ($175) {
      $183 = 1;
     } else {
      $176 = $offset0;
      $177 = $176 >= 0.0;
      $178 = $offset1;
      $179 = $178 >= 0.0;
      $180 = $177 ? $179 : 0;
      $183 = $180;
     }
     $181 = ((($44)) + 248|0);
     $182 = $183&1;
     HEAP8[$181>>0] = $182;
     $184 = ((($44)) + 248|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&1;
     $187 = ((($44)) + 212|0);
     $188 = ((($44)) + 196|0);
     if ($186) {
      ;HEAP32[$187>>2]=HEAP32[$188>>2]|0;HEAP32[$187+4>>2]=HEAP32[$188+4>>2]|0;
      $189 = ((($44)) + 228|0);
      $190 = ((($44)) + 196|0);
      ;HEAP32[$189>>2]=HEAP32[$190>>2]|0;HEAP32[$189+4>>2]=HEAP32[$190+4>>2]|0;
      $191 = ((($44)) + 236|0);
      $192 = ((($44)) + 204|0);
      ;HEAP32[$191>>2]=HEAP32[$192>>2]|0;HEAP32[$191+4>>2]=HEAP32[$192+4>>2]|0;
      break;
     } else {
      __ZNK6b2Vec2ngEv($17,$188);
      ;HEAP32[$187>>2]=HEAP32[$17>>2]|0;HEAP32[$187+4>>2]=HEAP32[$17+4>>2]|0;
      $193 = ((($44)) + 228|0);
      $194 = ((($44)) + 196|0);
      __ZNK6b2Vec2ngEv($18,$194);
      ;HEAP32[$193>>2]=HEAP32[$18>>2]|0;HEAP32[$193+4>>2]=HEAP32[$18+4>>2]|0;
      $195 = ((($44)) + 236|0);
      $196 = ((($44)) + 188|0);
      __ZNK6b2Vec2ngEv($19,$196);
      ;HEAP32[$195>>2]=HEAP32[$19>>2]|0;HEAP32[$195+4>>2]=HEAP32[$19+4>>2]|0;
      break;
     }
    } else {
     $197 = $offset0;
     $198 = $197 >= 0.0;
     $199 = $offset1;
     $200 = $199 >= 0.0;
     $or$cond3 = $198 & $200;
     if ($or$cond3) {
      $201 = $offset2;
      $202 = $201 >= 0.0;
      $205 = $202;
     } else {
      $205 = 0;
     }
     $203 = ((($44)) + 248|0);
     $204 = $205&1;
     HEAP8[$203>>0] = $204;
     $206 = ((($44)) + 248|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207&1;
     $209 = ((($44)) + 212|0);
     $210 = ((($44)) + 196|0);
     if ($208) {
      ;HEAP32[$209>>2]=HEAP32[$210>>2]|0;HEAP32[$209+4>>2]=HEAP32[$210+4>>2]|0;
      $211 = ((($44)) + 228|0);
      $212 = ((($44)) + 196|0);
      ;HEAP32[$211>>2]=HEAP32[$212>>2]|0;HEAP32[$211+4>>2]=HEAP32[$212+4>>2]|0;
      $213 = ((($44)) + 236|0);
      $214 = ((($44)) + 196|0);
      ;HEAP32[$213>>2]=HEAP32[$214>>2]|0;HEAP32[$213+4>>2]=HEAP32[$214+4>>2]|0;
      break;
     } else {
      __ZNK6b2Vec2ngEv($20,$210);
      ;HEAP32[$209>>2]=HEAP32[$20>>2]|0;HEAP32[$209+4>>2]=HEAP32[$20+4>>2]|0;
      $215 = ((($44)) + 228|0);
      $216 = ((($44)) + 204|0);
      __ZNK6b2Vec2ngEv($21,$216);
      ;HEAP32[$215>>2]=HEAP32[$21>>2]|0;HEAP32[$215+4>>2]=HEAP32[$21+4>>2]|0;
      $217 = ((($44)) + 236|0);
      $218 = ((($44)) + 188|0);
      __ZNK6b2Vec2ngEv($22,$218);
      ;HEAP32[$217>>2]=HEAP32[$22>>2]|0;HEAP32[$217+4>>2]=HEAP32[$22+4>>2]|0;
      break;
     }
    }
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $219 = $hasVertex0;
   $220 = $219&1;
   if ($220) {
    $221 = $convex1;
    $222 = $221&1;
    $223 = $offset0;
    $224 = $223 >= 0.0;
    $225 = $offset1;
    $226 = $225 >= 0.0;
    if ($222) {
     $227 = $224 ? 1 : $226;
     $228 = ((($44)) + 248|0);
     $229 = $227&1;
     HEAP8[$228>>0] = $229;
     $230 = ((($44)) + 248|0);
     $231 = HEAP8[$230>>0]|0;
     $232 = $231&1;
     $233 = ((($44)) + 212|0);
     $234 = ((($44)) + 196|0);
     if ($232) {
      ;HEAP32[$233>>2]=HEAP32[$234>>2]|0;HEAP32[$233+4>>2]=HEAP32[$234+4>>2]|0;
      $235 = ((($44)) + 228|0);
      $236 = ((($44)) + 188|0);
      ;HEAP32[$235>>2]=HEAP32[$236>>2]|0;HEAP32[$235+4>>2]=HEAP32[$236+4>>2]|0;
      $237 = ((($44)) + 236|0);
      $238 = ((($44)) + 196|0);
      __ZNK6b2Vec2ngEv($23,$238);
      ;HEAP32[$237>>2]=HEAP32[$23>>2]|0;HEAP32[$237+4>>2]=HEAP32[$23+4>>2]|0;
      break;
     } else {
      __ZNK6b2Vec2ngEv($24,$234);
      ;HEAP32[$233>>2]=HEAP32[$24>>2]|0;HEAP32[$233+4>>2]=HEAP32[$24+4>>2]|0;
      $239 = ((($44)) + 228|0);
      $240 = ((($44)) + 196|0);
      ;HEAP32[$239>>2]=HEAP32[$240>>2]|0;HEAP32[$239+4>>2]=HEAP32[$240+4>>2]|0;
      $241 = ((($44)) + 236|0);
      $242 = ((($44)) + 196|0);
      __ZNK6b2Vec2ngEv($25,$242);
      ;HEAP32[$241>>2]=HEAP32[$25>>2]|0;HEAP32[$241+4>>2]=HEAP32[$25+4>>2]|0;
      break;
     }
    } else {
     $243 = $224 ? $226 : 0;
     $244 = ((($44)) + 248|0);
     $245 = $243&1;
     HEAP8[$244>>0] = $245;
     $246 = ((($44)) + 248|0);
     $247 = HEAP8[$246>>0]|0;
     $248 = $247&1;
     $249 = ((($44)) + 212|0);
     $250 = ((($44)) + 196|0);
     if ($248) {
      ;HEAP32[$249>>2]=HEAP32[$250>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
      $251 = ((($44)) + 228|0);
      $252 = ((($44)) + 196|0);
      ;HEAP32[$251>>2]=HEAP32[$252>>2]|0;HEAP32[$251+4>>2]=HEAP32[$252+4>>2]|0;
      $253 = ((($44)) + 236|0);
      $254 = ((($44)) + 196|0);
      __ZNK6b2Vec2ngEv($26,$254);
      ;HEAP32[$253>>2]=HEAP32[$26>>2]|0;HEAP32[$253+4>>2]=HEAP32[$26+4>>2]|0;
      break;
     } else {
      __ZNK6b2Vec2ngEv($27,$250);
      ;HEAP32[$249>>2]=HEAP32[$27>>2]|0;HEAP32[$249+4>>2]=HEAP32[$27+4>>2]|0;
      $255 = ((($44)) + 228|0);
      $256 = ((($44)) + 196|0);
      ;HEAP32[$255>>2]=HEAP32[$256>>2]|0;HEAP32[$255+4>>2]=HEAP32[$256+4>>2]|0;
      $257 = ((($44)) + 236|0);
      $258 = ((($44)) + 188|0);
      __ZNK6b2Vec2ngEv($28,$258);
      ;HEAP32[$257>>2]=HEAP32[$28>>2]|0;HEAP32[$257+4>>2]=HEAP32[$28+4>>2]|0;
      break;
     }
    }
   }
   $259 = $hasVertex3;
   $260 = $259&1;
   if (!($260)) {
    $299 = $offset1;
    $300 = $299 >= 0.0;
    $301 = ((($44)) + 248|0);
    $302 = $300&1;
    HEAP8[$301>>0] = $302;
    $303 = ((($44)) + 248|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&1;
    $306 = ((($44)) + 212|0);
    $307 = ((($44)) + 196|0);
    if ($305) {
     ;HEAP32[$306>>2]=HEAP32[$307>>2]|0;HEAP32[$306+4>>2]=HEAP32[$307+4>>2]|0;
     $308 = ((($44)) + 228|0);
     $309 = ((($44)) + 196|0);
     __ZNK6b2Vec2ngEv($35,$309);
     ;HEAP32[$308>>2]=HEAP32[$35>>2]|0;HEAP32[$308+4>>2]=HEAP32[$35+4>>2]|0;
     $310 = ((($44)) + 236|0);
     $311 = ((($44)) + 196|0);
     __ZNK6b2Vec2ngEv($36,$311);
     ;HEAP32[$310>>2]=HEAP32[$36>>2]|0;HEAP32[$310+4>>2]=HEAP32[$36+4>>2]|0;
     break;
    } else {
     __ZNK6b2Vec2ngEv($37,$307);
     ;HEAP32[$306>>2]=HEAP32[$37>>2]|0;HEAP32[$306+4>>2]=HEAP32[$37+4>>2]|0;
     $312 = ((($44)) + 228|0);
     $313 = ((($44)) + 196|0);
     ;HEAP32[$312>>2]=HEAP32[$313>>2]|0;HEAP32[$312+4>>2]=HEAP32[$313+4>>2]|0;
     $314 = ((($44)) + 236|0);
     $315 = ((($44)) + 196|0);
     ;HEAP32[$314>>2]=HEAP32[$315>>2]|0;HEAP32[$314+4>>2]=HEAP32[$315+4>>2]|0;
     break;
    }
   }
   $261 = $convex2;
   $262 = $261&1;
   $263 = $offset1;
   $264 = $263 >= 0.0;
   $265 = $offset2;
   $266 = $265 >= 0.0;
   if ($262) {
    $267 = $264 ? 1 : $266;
    $268 = ((($44)) + 248|0);
    $269 = $267&1;
    HEAP8[$268>>0] = $269;
    $270 = ((($44)) + 248|0);
    $271 = HEAP8[$270>>0]|0;
    $272 = $271&1;
    $273 = ((($44)) + 212|0);
    $274 = ((($44)) + 196|0);
    if ($272) {
     ;HEAP32[$273>>2]=HEAP32[$274>>2]|0;HEAP32[$273+4>>2]=HEAP32[$274+4>>2]|0;
     $275 = ((($44)) + 228|0);
     $276 = ((($44)) + 196|0);
     __ZNK6b2Vec2ngEv($29,$276);
     ;HEAP32[$275>>2]=HEAP32[$29>>2]|0;HEAP32[$275+4>>2]=HEAP32[$29+4>>2]|0;
     $277 = ((($44)) + 236|0);
     $278 = ((($44)) + 204|0);
     ;HEAP32[$277>>2]=HEAP32[$278>>2]|0;HEAP32[$277+4>>2]=HEAP32[$278+4>>2]|0;
     break;
    } else {
     __ZNK6b2Vec2ngEv($30,$274);
     ;HEAP32[$273>>2]=HEAP32[$30>>2]|0;HEAP32[$273+4>>2]=HEAP32[$30+4>>2]|0;
     $279 = ((($44)) + 228|0);
     $280 = ((($44)) + 196|0);
     __ZNK6b2Vec2ngEv($31,$280);
     ;HEAP32[$279>>2]=HEAP32[$31>>2]|0;HEAP32[$279+4>>2]=HEAP32[$31+4>>2]|0;
     $281 = ((($44)) + 236|0);
     $282 = ((($44)) + 196|0);
     ;HEAP32[$281>>2]=HEAP32[$282>>2]|0;HEAP32[$281+4>>2]=HEAP32[$282+4>>2]|0;
     break;
    }
   } else {
    $283 = $264 ? $266 : 0;
    $284 = ((($44)) + 248|0);
    $285 = $283&1;
    HEAP8[$284>>0] = $285;
    $286 = ((($44)) + 248|0);
    $287 = HEAP8[$286>>0]|0;
    $288 = $287&1;
    $289 = ((($44)) + 212|0);
    $290 = ((($44)) + 196|0);
    if ($288) {
     ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;HEAP32[$289+4>>2]=HEAP32[$290+4>>2]|0;
     $291 = ((($44)) + 228|0);
     $292 = ((($44)) + 196|0);
     __ZNK6b2Vec2ngEv($32,$292);
     ;HEAP32[$291>>2]=HEAP32[$32>>2]|0;HEAP32[$291+4>>2]=HEAP32[$32+4>>2]|0;
     $293 = ((($44)) + 236|0);
     $294 = ((($44)) + 196|0);
     ;HEAP32[$293>>2]=HEAP32[$294>>2]|0;HEAP32[$293+4>>2]=HEAP32[$294+4>>2]|0;
     break;
    } else {
     __ZNK6b2Vec2ngEv($33,$290);
     ;HEAP32[$289>>2]=HEAP32[$33>>2]|0;HEAP32[$289+4>>2]=HEAP32[$33+4>>2]|0;
     $295 = ((($44)) + 228|0);
     $296 = ((($44)) + 204|0);
     __ZNK6b2Vec2ngEv($34,$296);
     ;HEAP32[$295>>2]=HEAP32[$34>>2]|0;HEAP32[$295+4>>2]=HEAP32[$34+4>>2]|0;
     $297 = ((($44)) + 236|0);
     $298 = ((($44)) + 196|0);
     ;HEAP32[$297>>2]=HEAP32[$298>>2]|0;HEAP32[$297+4>>2]=HEAP32[$298+4>>2]|0;
     break;
    }
   }
  }
 } while(0);
 $316 = $4;
 $317 = ((($316)) + 148|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = ((($44)) + 128|0);
 HEAP32[$319>>2] = $318;
 $i = 0;
 while(1) {
  $320 = $i;
  $321 = $4;
  $322 = ((($321)) + 148|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ($320|0)<($323|0);
  if (!($324)) {
   break;
  }
  $325 = $i;
  $326 = (($44) + ($325<<3)|0);
  $327 = ((($44)) + 132|0);
  $328 = $i;
  $329 = $4;
  $330 = ((($329)) + 20|0);
  $331 = (($330) + ($328<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($38,$327,$331);
  ;HEAP32[$326>>2]=HEAP32[$38>>2]|0;HEAP32[$326+4>>2]=HEAP32[$38+4>>2]|0;
  $332 = $i;
  $333 = ((($44)) + 64|0);
  $334 = (($333) + ($332<<3)|0);
  $335 = ((($44)) + 132|0);
  $336 = ((($335)) + 8|0);
  $337 = $i;
  $338 = $4;
  $339 = ((($338)) + 84|0);
  $340 = (($339) + ($337<<3)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($39,$336,$340);
  ;HEAP32[$334>>2]=HEAP32[$39>>2]|0;HEAP32[$334+4>>2]=HEAP32[$39+4>>2]|0;
  $341 = $i;
  $342 = (($341) + 1)|0;
  $i = $342;
 }
 $343 = ((($44)) + 244|0);
 HEAPF32[$343>>2] = 0.019999999552965164;
 $344 = $1;
 $345 = ((($344)) + 60|0);
 HEAP32[$345>>2] = 0;
 __ZN12b2EPCollider21ComputeEdgeSeparationEv($edgeAxis,$44);
 $346 = HEAP32[$edgeAxis>>2]|0;
 $347 = ($346|0)==(0);
 if ($347) {
  STACKTOP = sp;return;
 }
 $348 = ((($edgeAxis)) + 8|0);
 $349 = +HEAPF32[$348>>2];
 $350 = ((($44)) + 244|0);
 $351 = +HEAPF32[$350>>2];
 $352 = $349 > $351;
 if ($352) {
  STACKTOP = sp;return;
 }
 __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis,$44);
 $353 = HEAP32[$polygonAxis>>2]|0;
 $354 = ($353|0)!=(0);
 if ($354) {
  $355 = ((($polygonAxis)) + 8|0);
  $356 = +HEAPF32[$355>>2];
  $357 = ((($44)) + 244|0);
  $358 = +HEAPF32[$357>>2];
  $359 = $356 > $358;
  if ($359) {
   STACKTOP = sp;return;
  }
 }
 $k_relativeTol = 0.98000001907348633;
 $k_absoluteTol = 0.0010000000474974513;
 $360 = HEAP32[$polygonAxis>>2]|0;
 $361 = ($360|0)==(0);
 do {
  if ($361) {
   ;HEAP32[$primaryAxis>>2]=HEAP32[$edgeAxis>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$edgeAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$edgeAxis+8>>2]|0;
  } else {
   $362 = ((($polygonAxis)) + 8|0);
   $363 = +HEAPF32[$362>>2];
   $364 = ((($edgeAxis)) + 8|0);
   $365 = +HEAPF32[$364>>2];
   $366 = 0.98000001907348633 * $365;
   $367 = $366 + 0.0010000000474974513;
   $368 = $363 > $367;
   if ($368) {
    ;HEAP32[$primaryAxis>>2]=HEAP32[$polygonAxis>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$polygonAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$polygonAxis+8>>2]|0;
    break;
   } else {
    ;HEAP32[$primaryAxis>>2]=HEAP32[$edgeAxis>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$edgeAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$edgeAxis+8>>2]|0;
    break;
   }
  }
 } while(0);
 $369 = ((($ie)) + 24|0);
 $370 = $ie;
 while(1) {
  __ZN12b2ClipVertexC2Ev($370);
  $371 = ((($370)) + 12|0);
  $372 = ($371|0)==($369|0);
  if ($372) {
   break;
  } else {
   $370 = $371;
  }
 }
 __ZN15b2ReferenceFaceC2Ev($rf);
 $373 = HEAP32[$primaryAxis>>2]|0;
 $374 = ($373|0)==(1);
 $375 = $1;
 $376 = ((($375)) + 56|0);
 do {
  if ($374) {
   HEAP32[$376>>2] = 1;
   $bestIndex = 0;
   $377 = ((($44)) + 212|0);
   $378 = ((($44)) + 64|0);
   $379 = (+__Z5b2DotRK6b2Vec2S1_($377,$378));
   $bestValue = $379;
   $i1 = 1;
   while(1) {
    $380 = $i1;
    $381 = ((($44)) + 128|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = ($380|0)<($382|0);
    if (!($383)) {
     break;
    }
    $384 = ((($44)) + 212|0);
    $385 = $i1;
    $386 = ((($44)) + 64|0);
    $387 = (($386) + ($385<<3)|0);
    $388 = (+__Z5b2DotRK6b2Vec2S1_($384,$387));
    $value = $388;
    $389 = $value;
    $390 = $bestValue;
    $391 = $389 < $390;
    if ($391) {
     $392 = $value;
     $bestValue = $392;
     $393 = $i1;
     $bestIndex = $393;
    }
    $394 = $i1;
    $395 = (($394) + 1)|0;
    $i1 = $395;
   }
   $396 = $bestIndex;
   $i12 = $396;
   $397 = $i12;
   $398 = (($397) + 1)|0;
   $399 = ((($44)) + 128|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = ($398|0)<($400|0);
   $402 = $i12;
   $403 = (($402) + 1)|0;
   $404 = $401 ? $403 : 0;
   $i2 = $404;
   $405 = $i12;
   $406 = (($44) + ($405<<3)|0);
   ;HEAP32[$ie>>2]=HEAP32[$406>>2]|0;HEAP32[$ie+4>>2]=HEAP32[$406+4>>2]|0;
   $407 = ((($ie)) + 8|0);
   HEAP8[$407>>0] = 0;
   $408 = $i12;
   $409 = $408&255;
   $410 = ((($ie)) + 8|0);
   $411 = ((($410)) + 1|0);
   HEAP8[$411>>0] = $409;
   $412 = ((($ie)) + 8|0);
   $413 = ((($412)) + 2|0);
   HEAP8[$413>>0] = 1;
   $414 = ((($ie)) + 8|0);
   $415 = ((($414)) + 3|0);
   HEAP8[$415>>0] = 0;
   $416 = ((($ie)) + 12|0);
   $417 = $i2;
   $418 = (($44) + ($417<<3)|0);
   ;HEAP32[$416>>2]=HEAP32[$418>>2]|0;HEAP32[$416+4>>2]=HEAP32[$418+4>>2]|0;
   $419 = ((($ie)) + 12|0);
   $420 = ((($419)) + 8|0);
   HEAP8[$420>>0] = 0;
   $421 = $i2;
   $422 = $421&255;
   $423 = ((($ie)) + 12|0);
   $424 = ((($423)) + 8|0);
   $425 = ((($424)) + 1|0);
   HEAP8[$425>>0] = $422;
   $426 = ((($ie)) + 12|0);
   $427 = ((($426)) + 8|0);
   $428 = ((($427)) + 2|0);
   HEAP8[$428>>0] = 1;
   $429 = ((($ie)) + 12|0);
   $430 = ((($429)) + 8|0);
   $431 = ((($430)) + 3|0);
   HEAP8[$431>>0] = 0;
   $432 = ((($44)) + 248|0);
   $433 = HEAP8[$432>>0]|0;
   $434 = $433&1;
   if ($434) {
    HEAP32[$rf>>2] = 0;
    $435 = ((($rf)) + 4|0);
    HEAP32[$435>>2] = 1;
    $436 = ((($rf)) + 8|0);
    $437 = ((($44)) + 164|0);
    ;HEAP32[$436>>2]=HEAP32[$437>>2]|0;HEAP32[$436+4>>2]=HEAP32[$437+4>>2]|0;
    $438 = ((($rf)) + 16|0);
    $439 = ((($44)) + 172|0);
    ;HEAP32[$438>>2]=HEAP32[$439>>2]|0;HEAP32[$438+4>>2]=HEAP32[$439+4>>2]|0;
    $440 = ((($rf)) + 24|0);
    $441 = ((($44)) + 196|0);
    ;HEAP32[$440>>2]=HEAP32[$441>>2]|0;HEAP32[$440+4>>2]=HEAP32[$441+4>>2]|0;
    break;
   } else {
    HEAP32[$rf>>2] = 1;
    $442 = ((($rf)) + 4|0);
    HEAP32[$442>>2] = 0;
    $443 = ((($rf)) + 8|0);
    $444 = ((($44)) + 172|0);
    ;HEAP32[$443>>2]=HEAP32[$444>>2]|0;HEAP32[$443+4>>2]=HEAP32[$444+4>>2]|0;
    $445 = ((($rf)) + 16|0);
    $446 = ((($44)) + 164|0);
    ;HEAP32[$445>>2]=HEAP32[$446>>2]|0;HEAP32[$445+4>>2]=HEAP32[$446+4>>2]|0;
    $447 = ((($rf)) + 24|0);
    $448 = ((($44)) + 196|0);
    __ZNK6b2Vec2ngEv($40,$448);
    ;HEAP32[$447>>2]=HEAP32[$40>>2]|0;HEAP32[$447+4>>2]=HEAP32[$40+4>>2]|0;
    break;
   }
  } else {
   HEAP32[$376>>2] = 2;
   $449 = ((($44)) + 164|0);
   ;HEAP32[$ie>>2]=HEAP32[$449>>2]|0;HEAP32[$ie+4>>2]=HEAP32[$449+4>>2]|0;
   $450 = ((($ie)) + 8|0);
   HEAP8[$450>>0] = 0;
   $451 = ((($primaryAxis)) + 4|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = $452&255;
   $454 = ((($ie)) + 8|0);
   $455 = ((($454)) + 1|0);
   HEAP8[$455>>0] = $453;
   $456 = ((($ie)) + 8|0);
   $457 = ((($456)) + 2|0);
   HEAP8[$457>>0] = 0;
   $458 = ((($ie)) + 8|0);
   $459 = ((($458)) + 3|0);
   HEAP8[$459>>0] = 1;
   $460 = ((($ie)) + 12|0);
   $461 = ((($44)) + 172|0);
   ;HEAP32[$460>>2]=HEAP32[$461>>2]|0;HEAP32[$460+4>>2]=HEAP32[$461+4>>2]|0;
   $462 = ((($ie)) + 12|0);
   $463 = ((($462)) + 8|0);
   HEAP8[$463>>0] = 0;
   $464 = ((($primaryAxis)) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $465&255;
   $467 = ((($ie)) + 12|0);
   $468 = ((($467)) + 8|0);
   $469 = ((($468)) + 1|0);
   HEAP8[$469>>0] = $466;
   $470 = ((($ie)) + 12|0);
   $471 = ((($470)) + 8|0);
   $472 = ((($471)) + 2|0);
   HEAP8[$472>>0] = 0;
   $473 = ((($ie)) + 12|0);
   $474 = ((($473)) + 8|0);
   $475 = ((($474)) + 3|0);
   HEAP8[$475>>0] = 1;
   $476 = ((($primaryAxis)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   HEAP32[$rf>>2] = $477;
   $478 = HEAP32[$rf>>2]|0;
   $479 = (($478) + 1)|0;
   $480 = ((($44)) + 128|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = ($479|0)<($481|0);
   $483 = HEAP32[$rf>>2]|0;
   $484 = (($483) + 1)|0;
   $485 = $482 ? $484 : 0;
   $486 = ((($rf)) + 4|0);
   HEAP32[$486>>2] = $485;
   $487 = ((($rf)) + 8|0);
   $488 = HEAP32[$rf>>2]|0;
   $489 = (($44) + ($488<<3)|0);
   ;HEAP32[$487>>2]=HEAP32[$489>>2]|0;HEAP32[$487+4>>2]=HEAP32[$489+4>>2]|0;
   $490 = ((($rf)) + 16|0);
   $491 = ((($rf)) + 4|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = (($44) + ($492<<3)|0);
   ;HEAP32[$490>>2]=HEAP32[$493>>2]|0;HEAP32[$490+4>>2]=HEAP32[$493+4>>2]|0;
   $494 = ((($rf)) + 24|0);
   $495 = HEAP32[$rf>>2]|0;
   $496 = ((($44)) + 64|0);
   $497 = (($496) + ($495<<3)|0);
   ;HEAP32[$494>>2]=HEAP32[$497>>2]|0;HEAP32[$494+4>>2]=HEAP32[$497+4>>2]|0;
  }
 } while(0);
 $498 = ((($rf)) + 32|0);
 $499 = ((($rf)) + 24|0);
 $500 = ((($499)) + 4|0);
 $501 = +HEAPF32[$500>>2];
 $502 = ((($rf)) + 24|0);
 $503 = +HEAPF32[$502>>2];
 $504 = -$503;
 __ZN6b2Vec23SetEff($498,$501,$504);
 $505 = ((($rf)) + 44|0);
 $506 = ((($rf)) + 32|0);
 __ZNK6b2Vec2ngEv($41,$506);
 ;HEAP32[$505>>2]=HEAP32[$41>>2]|0;HEAP32[$505+4>>2]=HEAP32[$41+4>>2]|0;
 $507 = ((($rf)) + 32|0);
 $508 = ((($rf)) + 8|0);
 $509 = (+__Z5b2DotRK6b2Vec2S1_($507,$508));
 $510 = ((($rf)) + 40|0);
 HEAPF32[$510>>2] = $509;
 $511 = ((($rf)) + 44|0);
 $512 = ((($rf)) + 16|0);
 $513 = (+__Z5b2DotRK6b2Vec2S1_($511,$512));
 $514 = ((($rf)) + 52|0);
 HEAPF32[$514>>2] = $513;
 $515 = ((($clipPoints1)) + 24|0);
 $516 = $clipPoints1;
 while(1) {
  __ZN12b2ClipVertexC2Ev($516);
  $517 = ((($516)) + 12|0);
  $518 = ($517|0)==($515|0);
  if ($518) {
   break;
  } else {
   $516 = $517;
  }
 }
 $519 = ((($clipPoints2)) + 24|0);
 $520 = $clipPoints2;
 while(1) {
  __ZN12b2ClipVertexC2Ev($520);
  $521 = ((($520)) + 12|0);
  $522 = ($521|0)==($519|0);
  if ($522) {
   break;
  } else {
   $520 = $521;
  }
 }
 $523 = ((($rf)) + 32|0);
 $524 = ((($rf)) + 40|0);
 $525 = +HEAPF32[$524>>2];
 $526 = HEAP32[$rf>>2]|0;
 $527 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1,$ie,$523,$525,$526)|0);
 $np = $527;
 $528 = $np;
 $529 = ($528|0)<(2);
 if ($529) {
  STACKTOP = sp;return;
 }
 $530 = ((($rf)) + 44|0);
 $531 = ((($rf)) + 52|0);
 $532 = +HEAPF32[$531>>2];
 $533 = ((($rf)) + 4|0);
 $534 = HEAP32[$533>>2]|0;
 $535 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2,$clipPoints1,$530,$532,$534)|0);
 $np = $535;
 $536 = $np;
 $537 = ($536|0)<(2);
 if ($537) {
  STACKTOP = sp;return;
 }
 $538 = HEAP32[$primaryAxis>>2]|0;
 $539 = ($538|0)==(1);
 $540 = $1;
 $541 = ((($540)) + 40|0);
 if ($539) {
  $542 = ((($rf)) + 24|0);
  ;HEAP32[$541>>2]=HEAP32[$542>>2]|0;HEAP32[$541+4>>2]=HEAP32[$542+4>>2]|0;
  $543 = $1;
  $544 = ((($543)) + 48|0);
  $545 = ((($rf)) + 8|0);
  ;HEAP32[$544>>2]=HEAP32[$545>>2]|0;HEAP32[$544+4>>2]=HEAP32[$545+4>>2]|0;
 } else {
  $546 = HEAP32[$rf>>2]|0;
  $547 = $4;
  $548 = ((($547)) + 84|0);
  $549 = (($548) + ($546<<3)|0);
  ;HEAP32[$541>>2]=HEAP32[$549>>2]|0;HEAP32[$541+4>>2]=HEAP32[$549+4>>2]|0;
  $550 = $1;
  $551 = ((($550)) + 48|0);
  $552 = HEAP32[$rf>>2]|0;
  $553 = $4;
  $554 = ((($553)) + 20|0);
  $555 = (($554) + ($552<<3)|0);
  ;HEAP32[$551>>2]=HEAP32[$555>>2]|0;HEAP32[$551+4>>2]=HEAP32[$555+4>>2]|0;
 }
 $pointCount = 0;
 $i3 = 0;
 while(1) {
  $556 = $i3;
  $557 = ($556|0)<(2);
  if (!($557)) {
   break;
  }
  $558 = ((($rf)) + 24|0);
  $559 = $i3;
  $560 = (($clipPoints2) + (($559*12)|0)|0);
  $561 = ((($rf)) + 8|0);
  __ZmiRK6b2Vec2S1_($42,$560,$561);
  $562 = (+__Z5b2DotRK6b2Vec2S1_($558,$42));
  $separation = $562;
  $563 = $separation;
  $564 = ((($44)) + 244|0);
  $565 = +HEAPF32[$564>>2];
  $566 = $563 <= $565;
  if ($566) {
   $567 = $1;
   $568 = $pointCount;
   $569 = (($567) + (($568*20)|0)|0);
   $cp = $569;
   $570 = HEAP32[$primaryAxis>>2]|0;
   $571 = ($570|0)==(1);
   $572 = $cp;
   if ($571) {
    $573 = ((($44)) + 132|0);
    $574 = $i3;
    $575 = (($clipPoints2) + (($574*12)|0)|0);
    __Z6b2MulTRK11b2TransformRK6b2Vec2($43,$573,$575);
    ;HEAP32[$572>>2]=HEAP32[$43>>2]|0;HEAP32[$572+4>>2]=HEAP32[$43+4>>2]|0;
    $576 = $cp;
    $577 = ((($576)) + 16|0);
    $578 = $i3;
    $579 = (($clipPoints2) + (($578*12)|0)|0);
    $580 = ((($579)) + 8|0);
    ;HEAP32[$577>>2]=HEAP32[$580>>2]|0;
   } else {
    $581 = $i3;
    $582 = (($clipPoints2) + (($581*12)|0)|0);
    ;HEAP32[$572>>2]=HEAP32[$582>>2]|0;HEAP32[$572+4>>2]=HEAP32[$582+4>>2]|0;
    $583 = $i3;
    $584 = (($clipPoints2) + (($583*12)|0)|0);
    $585 = ((($584)) + 8|0);
    $586 = ((($585)) + 3|0);
    $587 = HEAP8[$586>>0]|0;
    $588 = $cp;
    $589 = ((($588)) + 16|0);
    $590 = ((($589)) + 2|0);
    HEAP8[$590>>0] = $587;
    $591 = $i3;
    $592 = (($clipPoints2) + (($591*12)|0)|0);
    $593 = ((($592)) + 8|0);
    $594 = ((($593)) + 2|0);
    $595 = HEAP8[$594>>0]|0;
    $596 = $cp;
    $597 = ((($596)) + 16|0);
    $598 = ((($597)) + 3|0);
    HEAP8[$598>>0] = $595;
    $599 = $i3;
    $600 = (($clipPoints2) + (($599*12)|0)|0);
    $601 = ((($600)) + 8|0);
    $602 = ((($601)) + 1|0);
    $603 = HEAP8[$602>>0]|0;
    $604 = $cp;
    $605 = ((($604)) + 16|0);
    HEAP8[$605>>0] = $603;
    $606 = $i3;
    $607 = (($clipPoints2) + (($606*12)|0)|0);
    $608 = ((($607)) + 8|0);
    $609 = HEAP8[$608>>0]|0;
    $610 = $cp;
    $611 = ((($610)) + 16|0);
    $612 = ((($611)) + 1|0);
    HEAP8[$612>>0] = $609;
   }
   $613 = $pointCount;
   $614 = (($613) + 1)|0;
   $pointCount = $614;
  }
  $615 = $i3;
  $616 = (($615) + 1)|0;
  $i3 = $616;
 }
 $617 = $pointCount;
 $618 = $1;
 $619 = ((($618)) + 60|0);
 HEAP32[$619>>2] = $617;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK11b2TransformS1_($agg$result,$A,$B) {
 $agg$result = $agg$result|0;
 $A = $A|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $A;
 $1 = $B;
 __ZN11b2TransformC2Ev($agg$result);
 $5 = ((($agg$result)) + 8|0);
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = $1;
 $9 = ((($8)) + 8|0);
 __Z6b2MulTRK5b2RotS1_($2,$7,$9);
 ;HEAP32[$5>>2]=HEAP32[$2>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 $12 = $1;
 $13 = $0;
 __ZmiRK6b2Vec2S1_($4,$12,$13);
 __Z6b2MulTRK5b2RotRK6b2Vec2($3,$11,$4);
 ;HEAP32[$agg$result>>2]=HEAP32[$3>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11b2TransformC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN5b2RotC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6b2Vec2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN5b2RotC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK5b2RotS1_($agg$result,$q,$r) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $r;
 __ZN5b2RotC2Ev($agg$result);
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 - $13;
 HEAPF32[$agg$result>>2] = $14;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = ((($18)) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $0;
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = +HEAPF32[$24>>2];
 $26 = $23 * $25;
 $27 = $21 + $26;
 $28 = ((($agg$result)) + 4|0);
 HEAPF32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK5b2RotRK6b2Vec2($agg$result,$q,$v) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 + $13;
 $15 = $0;
 $16 = +HEAPF32[$15>>2];
 $17 = -$16;
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = $0;
 $22 = ((($21)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 * $26;
 $28 = $20 + $27;
 __ZN6b2Vec2C2Eff($agg$result,$14,$28);
 STACKTOP = sp;return;
}
function __Z7b2CrossRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $7 - $13;
 STACKTOP = sp;return (+$14);
}
function __ZNK6b2Vec2ngEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($agg$result);
 $2 = +HEAPF32[$1>>2];
 $3 = -$2;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = -$5;
 __ZN6b2Vec23SetEff($agg$result,$3,$6);
 STACKTOP = sp;return;
}
function __Z5b2MulRK5b2RotRK6b2Vec2($agg$result,$q,$v) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 - $13;
 $15 = $0;
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 * $18;
 $20 = $0;
 $21 = ((($20)) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 * $25;
 $27 = $19 + $26;
 __ZN6b2Vec2C2Eff($agg$result,$14,$27);
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 HEAP32[$agg$result>>2] = 1;
 $3 = ((($2)) + 248|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 $6 = $5 ? 0 : 1;
 $7 = ((($agg$result)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($agg$result)) + 8|0);
 HEAPF32[$8>>2] = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($2)) + 128|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = ((($2)) + 212|0);
  $14 = $i;
  $15 = (($2) + ($14<<3)|0);
  $16 = ((($2)) + 164|0);
  __ZmiRK6b2Vec2S1_($1,$15,$16);
  $17 = (+__Z5b2DotRK6b2Vec2S1_($13,$1));
  $s = $17;
  $18 = $s;
  $19 = ((($agg$result)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $18 < $20;
  if ($21) {
   $22 = $s;
   $23 = ((($agg$result)) + 8|0);
   HEAPF32[$23>>2] = $22;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $n = 0, $perp = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $perp = sp + 72|0;
 $n = sp + 56|0;
 $1 = sp + 40|0;
 $2 = sp + 24|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 HEAP32[$agg$result>>2] = 0;
 $6 = ((($agg$result)) + 4|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($agg$result)) + 8|0);
 HEAPF32[$7>>2] = -3.4028234663852886E+38;
 $8 = ((($5)) + 212|0);
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = -$10;
 $12 = ((($5)) + 212|0);
 $13 = +HEAPF32[$12>>2];
 __ZN6b2Vec2C2Eff($perp,$11,$13);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ((($5)) + 128|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   label = 11;
   break;
  }
  $18 = $i;
  $19 = ((($5)) + 64|0);
  $20 = (($19) + ($18<<3)|0);
  __ZNK6b2Vec2ngEv($n,$20);
  $21 = $i;
  $22 = (($5) + ($21<<3)|0);
  $23 = ((($5)) + 164|0);
  __ZmiRK6b2Vec2S1_($1,$22,$23);
  $24 = (+__Z5b2DotRK6b2Vec2S1_($n,$1));
  $s1 = $24;
  $25 = $i;
  $26 = (($5) + ($25<<3)|0);
  $27 = ((($5)) + 172|0);
  __ZmiRK6b2Vec2S1_($2,$26,$27);
  $28 = (+__Z5b2DotRK6b2Vec2S1_($n,$2));
  $s2 = $28;
  $29 = $s1;
  $30 = $s2;
  $31 = (+__Z5b2MinIfET_S0_S0_($29,$30));
  $s = $31;
  $32 = $s;
  $33 = ((($5)) + 244|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $32 > $34;
  if ($35) {
   break;
  }
  $40 = (+__Z5b2DotRK6b2Vec2S1_($n,$perp));
  $41 = $40 >= 0.0;
  if ($41) {
   $42 = ((($5)) + 236|0);
   __ZmiRK6b2Vec2S1_($3,$n,$42);
   $43 = ((($5)) + 212|0);
   $44 = (+__Z5b2DotRK6b2Vec2S1_($3,$43));
   $45 = $44 < -0.034906588494777679;
   if (!($45)) {
    label = 8;
   }
  } else {
   $46 = ((($5)) + 228|0);
   __ZmiRK6b2Vec2S1_($4,$n,$46);
   $47 = ((($5)) + 212|0);
   $48 = (+__Z5b2DotRK6b2Vec2S1_($4,$47));
   $49 = $48 < -0.034906588494777679;
   if (!($49)) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $50 = $s;
   $51 = ((($agg$result)) + 8|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $50 > $52;
   if ($53) {
    HEAP32[$agg$result>>2] = 2;
    $54 = $i;
    $55 = ((($agg$result)) + 4|0);
    HEAP32[$55>>2] = $54;
    $56 = $s;
    $57 = ((($agg$result)) + 8|0);
    HEAPF32[$57>>2] = $56;
   }
  }
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 HEAP32[$agg$result>>2] = 2;
 $36 = $i;
 $37 = ((($agg$result)) + 4|0);
 HEAP32[$37>>2] = $36;
 $38 = $s;
 $39 = ((($agg$result)) + 8|0);
 HEAPF32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function __Z5b2MinIfET_S0_S0_($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return (+$7);
}
function __ZN12b2ClipVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;return;
}
function __ZN15b2ReferenceFaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = ((($1)) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = ((($1)) + 24|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = ((($1)) + 32|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = ((($1)) + 44|0);
 __ZN6b2Vec2C2Ev($6);
 STACKTOP = sp;return;
}
function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold,$edgeA,$xfA,$polygonB,$xfB) {
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $polygonB = $polygonB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collider = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $collider = sp;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $polygonB;
 $4 = $xfB;
 __ZN12b2EPColliderC2Ev($collider);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider,$5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN12b2EPColliderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13b2TempPolygonC2Ev($1);
 $2 = ((($1)) + 132|0);
 __ZN11b2TransformC2Ev($2);
 $3 = ((($1)) + 148|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = ((($1)) + 156|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = ((($1)) + 164|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = ((($1)) + 172|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = ((($1)) + 180|0);
 __ZN6b2Vec2C2Ev($7);
 $8 = ((($1)) + 188|0);
 __ZN6b2Vec2C2Ev($8);
 $9 = ((($1)) + 196|0);
 __ZN6b2Vec2C2Ev($9);
 $10 = ((($1)) + 204|0);
 __ZN6b2Vec2C2Ev($10);
 $11 = ((($1)) + 212|0);
 __ZN6b2Vec2C2Ev($11);
 $12 = ((($1)) + 228|0);
 __ZN6b2Vec2C2Ev($12);
 $13 = ((($1)) + 236|0);
 __ZN6b2Vec2C2Ev($13);
 STACKTOP = sp;return;
}
function __ZN13b2TempPolygonC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = $1;
 while(1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = ((($3)) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = ((($1)) + 64|0);
 $7 = ((($6)) + 64|0);
 $8 = $6;
 while(1) {
  __ZN6b2Vec2C2Ev($8);
  $9 = ((($8)) + 8|0);
  $10 = ($9|0)==($7|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 STACKTOP = sp;return;
}
function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold,$polyA,$xfA,$polyB,$xfB) {
 $manifold = $manifold|0;
 $polyA = $polyA|0;
 $xfA = $xfA|0;
 $polyB = $polyB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0;
 var $99 = 0, $cf = 0, $clipPoints1 = 0, $clipPoints2 = 0, $count1 = 0, $cp = 0, $edge1 = 0, $edgeA = 0, $edgeB = 0, $flip = 0, $frontOffset = 0.0, $i = 0, $incidentEdge = 0, $iv1 = 0, $iv2 = 0, $k_absoluteTol = 0.0, $k_relativeTol = 0.0, $localNormal = 0, $localTangent = 0, $normal = 0;
 var $np = 0, $planePoint = 0, $pointCount = 0, $poly1 = 0, $poly2 = 0, $separation = 0.0, $separationA = 0.0, $separationB = 0.0, $sideOffset1 = 0.0, $sideOffset2 = 0.0, $tangent = 0, $totalRadius = 0.0, $v11 = 0, $v12 = 0, $vertices1 = 0, $xf1 = 0, $xf2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edgeA = sp + 292|0;
 $edgeB = sp + 284|0;
 $xf1 = sp + 256|0;
 $xf2 = sp + 240|0;
 $incidentEdge = sp + 200|0;
 $v11 = sp + 176|0;
 $v12 = sp + 168|0;
 $localTangent = sp + 160|0;
 $localNormal = sp + 152|0;
 $planePoint = sp + 144|0;
 $5 = sp + 136|0;
 $tangent = sp + 128|0;
 $normal = sp + 120|0;
 $6 = sp + 112|0;
 $7 = sp + 104|0;
 $clipPoints1 = sp + 64|0;
 $clipPoints2 = sp + 40|0;
 $8 = sp + 24|0;
 $9 = sp;
 $cf = sp + 320|0;
 $0 = $manifold;
 $1 = $polyA;
 $2 = $xfA;
 $3 = $polyB;
 $4 = $xfB;
 $10 = $0;
 $11 = ((($10)) + 60|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 + $17;
 $totalRadius = $18;
 HEAP32[$edgeA>>2] = 0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = (+__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA,$19,$20,$21,$22));
 $separationA = $23;
 $24 = $separationA;
 $25 = $totalRadius;
 $26 = $24 > $25;
 if ($26) {
  STACKTOP = sp;return;
 }
 HEAP32[$edgeB>>2] = 0;
 $27 = $3;
 $28 = $4;
 $29 = $1;
 $30 = $2;
 $31 = (+__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB,$27,$28,$29,$30));
 $separationB = $31;
 $32 = $separationB;
 $33 = $totalRadius;
 $34 = $32 > $33;
 if ($34) {
  STACKTOP = sp;return;
 }
 __ZN11b2TransformC2Ev($xf1);
 __ZN11b2TransformC2Ev($xf2);
 $k_relativeTol = 0.98000001907348633;
 $k_absoluteTol = 0.0010000000474974513;
 $35 = $separationB;
 $36 = $separationA;
 $37 = 0.98000001907348633 * $36;
 $38 = $37 + 0.0010000000474974513;
 $39 = $35 > $38;
 if ($39) {
  $40 = $3;
  $poly1 = $40;
  $41 = $1;
  $poly2 = $41;
  $42 = $4;
  ;HEAP32[$xf1>>2]=HEAP32[$42>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$xf1+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$xf1+12>>2]=HEAP32[$42+12>>2]|0;
  $43 = $2;
  ;HEAP32[$xf2>>2]=HEAP32[$43>>2]|0;HEAP32[$xf2+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$xf2+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$xf2+12>>2]=HEAP32[$43+12>>2]|0;
  $44 = HEAP32[$edgeB>>2]|0;
  $edge1 = $44;
  $45 = $0;
  $46 = ((($45)) + 56|0);
  HEAP32[$46>>2] = 2;
  $flip = 1;
 } else {
  $47 = $1;
  $poly1 = $47;
  $48 = $3;
  $poly2 = $48;
  $49 = $2;
  ;HEAP32[$xf1>>2]=HEAP32[$49>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$xf1+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$xf1+12>>2]=HEAP32[$49+12>>2]|0;
  $50 = $4;
  ;HEAP32[$xf2>>2]=HEAP32[$50>>2]|0;HEAP32[$xf2+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$xf2+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$xf2+12>>2]=HEAP32[$50+12>>2]|0;
  $51 = HEAP32[$edgeA>>2]|0;
  $edge1 = $51;
  $52 = $0;
  $53 = ((($52)) + 56|0);
  HEAP32[$53>>2] = 1;
  $flip = 0;
 }
 $54 = ((($incidentEdge)) + 24|0);
 $55 = $incidentEdge;
 while(1) {
  __ZN12b2ClipVertexC2Ev($55);
  $56 = ((($55)) + 12|0);
  $57 = ($56|0)==($54|0);
  if ($57) {
   break;
  } else {
   $55 = $56;
  }
 }
 $58 = $poly1;
 $59 = $edge1;
 $60 = $poly2;
 __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($incidentEdge,$58,$xf1,$59,$60,$xf2);
 $61 = $poly1;
 $62 = ((($61)) + 148|0);
 $63 = HEAP32[$62>>2]|0;
 $count1 = $63;
 $64 = $poly1;
 $65 = ((($64)) + 20|0);
 $vertices1 = $65;
 $66 = $edge1;
 $iv1 = $66;
 $67 = $edge1;
 $68 = (($67) + 1)|0;
 $69 = $count1;
 $70 = ($68|0)<($69|0);
 $71 = $edge1;
 $72 = (($71) + 1)|0;
 $73 = $70 ? $72 : 0;
 $iv2 = $73;
 $74 = $iv1;
 $75 = $vertices1;
 $76 = (($75) + ($74<<3)|0);
 ;HEAP32[$v11>>2]=HEAP32[$76>>2]|0;HEAP32[$v11+4>>2]=HEAP32[$76+4>>2]|0;
 $77 = $iv2;
 $78 = $vertices1;
 $79 = (($78) + ($77<<3)|0);
 ;HEAP32[$v12>>2]=HEAP32[$79>>2]|0;HEAP32[$v12+4>>2]=HEAP32[$79+4>>2]|0;
 __ZmiRK6b2Vec2S1_($localTangent,$v12,$v11);
 (+__ZN6b2Vec29NormalizeEv($localTangent));
 __Z7b2CrossRK6b2Vec2f($localNormal,$localTangent,1.0);
 __ZplRK6b2Vec2S1_($5,$v11,$v12);
 __ZmlfRK6b2Vec2($planePoint,0.5,$5);
 $80 = ((($xf1)) + 8|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($tangent,$80,$localTangent);
 __Z7b2CrossRK6b2Vec2f($normal,$tangent,1.0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($6,$xf1,$v11);
 ;HEAP32[$v11>>2]=HEAP32[$6>>2]|0;HEAP32[$v11+4>>2]=HEAP32[$6+4>>2]|0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$xf1,$v12);
 ;HEAP32[$v12>>2]=HEAP32[$7>>2]|0;HEAP32[$v12+4>>2]=HEAP32[$7+4>>2]|0;
 $81 = (+__Z5b2DotRK6b2Vec2S1_($normal,$v11));
 $frontOffset = $81;
 $82 = (+__Z5b2DotRK6b2Vec2S1_($tangent,$v11));
 $83 = -$82;
 $84 = $totalRadius;
 $85 = $83 + $84;
 $sideOffset1 = $85;
 $86 = (+__Z5b2DotRK6b2Vec2S1_($tangent,$v12));
 $87 = $totalRadius;
 $88 = $86 + $87;
 $sideOffset2 = $88;
 $89 = ((($clipPoints1)) + 24|0);
 $90 = $clipPoints1;
 while(1) {
  __ZN12b2ClipVertexC2Ev($90);
  $91 = ((($90)) + 12|0);
  $92 = ($91|0)==($89|0);
  if ($92) {
   break;
  } else {
   $90 = $91;
  }
 }
 $93 = ((($clipPoints2)) + 24|0);
 $94 = $clipPoints2;
 while(1) {
  __ZN12b2ClipVertexC2Ev($94);
  $95 = ((($94)) + 12|0);
  $96 = ($95|0)==($93|0);
  if ($96) {
   break;
  } else {
   $94 = $95;
  }
 }
 __ZNK6b2Vec2ngEv($8,$tangent);
 $97 = $sideOffset1;
 $98 = $iv1;
 $99 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1,$incidentEdge,$8,$97,$98)|0);
 $np = $99;
 $100 = $np;
 $101 = ($100|0)<(2);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $sideOffset2;
 $103 = $iv2;
 $104 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2,$clipPoints1,$tangent,$102,$103)|0);
 $np = $104;
 $105 = $np;
 $106 = ($105|0)<(2);
 if ($106) {
  STACKTOP = sp;return;
 }
 $107 = $0;
 $108 = ((($107)) + 40|0);
 ;HEAP32[$108>>2]=HEAP32[$localNormal>>2]|0;HEAP32[$108+4>>2]=HEAP32[$localNormal+4>>2]|0;
 $109 = $0;
 $110 = ((($109)) + 48|0);
 ;HEAP32[$110>>2]=HEAP32[$planePoint>>2]|0;HEAP32[$110+4>>2]=HEAP32[$planePoint+4>>2]|0;
 $pointCount = 0;
 $i = 0;
 while(1) {
  $111 = $i;
  $112 = ($111|0)<(2);
  if (!($112)) {
   break;
  }
  $113 = $i;
  $114 = (($clipPoints2) + (($113*12)|0)|0);
  $115 = (+__Z5b2DotRK6b2Vec2S1_($normal,$114));
  $116 = $frontOffset;
  $117 = $115 - $116;
  $separation = $117;
  $118 = $separation;
  $119 = $totalRadius;
  $120 = $118 <= $119;
  if ($120) {
   $121 = $0;
   $122 = $pointCount;
   $123 = (($121) + (($122*20)|0)|0);
   $cp = $123;
   $124 = $cp;
   $125 = $i;
   $126 = (($clipPoints2) + (($125*12)|0)|0);
   __Z6b2MulTRK11b2TransformRK6b2Vec2($9,$xf2,$126);
   ;HEAP32[$124>>2]=HEAP32[$9>>2]|0;HEAP32[$124+4>>2]=HEAP32[$9+4>>2]|0;
   $127 = $cp;
   $128 = ((($127)) + 16|0);
   $129 = $i;
   $130 = (($clipPoints2) + (($129*12)|0)|0);
   $131 = ((($130)) + 8|0);
   ;HEAP32[$128>>2]=HEAP32[$131>>2]|0;
   $132 = $flip;
   $133 = ($132<<24>>24)!=(0);
   if ($133) {
    $134 = $cp;
    $135 = ((($134)) + 16|0);
    ;HEAP8[$cf>>0]=HEAP8[$135>>0]|0;HEAP8[$cf+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$cf+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$cf+3>>0]=HEAP8[$135+3>>0]|0;
    $136 = ((($cf)) + 1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $cp;
    $139 = ((($138)) + 16|0);
    HEAP8[$139>>0] = $137;
    $140 = HEAP8[$cf>>0]|0;
    $141 = $cp;
    $142 = ((($141)) + 16|0);
    $143 = ((($142)) + 1|0);
    HEAP8[$143>>0] = $140;
    $144 = ((($cf)) + 3|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $cp;
    $147 = ((($146)) + 16|0);
    $148 = ((($147)) + 2|0);
    HEAP8[$148>>0] = $145;
    $149 = ((($cf)) + 2|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $cp;
    $152 = ((($151)) + 16|0);
    $153 = ((($152)) + 3|0);
    HEAP8[$153>>0] = $150;
   }
   $154 = $pointCount;
   $155 = (($154) + 1)|0;
   $pointCount = $155;
  }
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
 }
 $158 = $pointCount;
 $159 = $0;
 $160 = ((($159)) + 60|0);
 HEAP32[$160>>2] = $158;
 STACKTOP = sp;return;
}
function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex,$poly1,$xf1,$poly2,$xf2) {
 $edgeIndex = $edgeIndex|0;
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $$sink = 0, $$sink1 = 0, $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestEdge = 0, $bestSeparation = 0.0, $count1 = 0, $d = 0, $dLocal1 = 0, $dot = 0.0, $edge = 0;
 var $i = 0, $increment = 0, $maxDot = 0.0, $nextEdge = 0, $normals1 = 0, $prevEdge = 0, $s = 0.0, $sNext = 0.0, $sPrev = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp + 72|0;
 $6 = sp + 64|0;
 $7 = sp + 56|0;
 $dLocal1 = sp + 48|0;
 $1 = $edgeIndex;
 $2 = $poly1;
 $3 = $xf1;
 $4 = $poly2;
 $5 = $xf2;
 $8 = $2;
 $9 = ((($8)) + 148|0);
 $10 = HEAP32[$9>>2]|0;
 $count1 = $10;
 $11 = $2;
 $12 = ((($11)) + 84|0);
 $normals1 = $12;
 $13 = $5;
 $14 = $4;
 $15 = ((($14)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($6,$13,$15);
 $16 = $3;
 $17 = $2;
 $18 = ((($17)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$16,$18);
 __ZmiRK6b2Vec2S1_($d,$6,$7);
 $19 = $3;
 $20 = ((($19)) + 8|0);
 __Z6b2MulTRK5b2RotRK6b2Vec2($dLocal1,$20,$d);
 $edge = 0;
 $maxDot = -3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $count1;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $normals1;
  $26 = (($25) + ($24<<3)|0);
  $27 = (+__Z5b2DotRK6b2Vec2S1_($26,$dLocal1));
  $dot = $27;
  $28 = $dot;
  $29 = $maxDot;
  $30 = $28 > $29;
  if ($30) {
   $31 = $dot;
   $maxDot = $31;
   $32 = $i;
   $edge = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $2;
 $36 = $3;
 $37 = $edge;
 $38 = $4;
 $39 = $5;
 $40 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($35,$36,$37,$38,$39));
 $s = $40;
 $41 = $edge;
 $42 = (($41) - 1)|0;
 $43 = ($42|0)>=(0);
 $44 = $edge;
 $45 = $count1;
 $$sink = $43 ? $44 : $45;
 $46 = (($$sink) - 1)|0;
 $prevEdge = $46;
 $47 = $2;
 $48 = $3;
 $49 = $prevEdge;
 $50 = $4;
 $51 = $5;
 $52 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($47,$48,$49,$50,$51));
 $sPrev = $52;
 $53 = $edge;
 $54 = (($53) + 1)|0;
 $55 = $count1;
 $56 = ($54|0)<($55|0);
 $57 = $edge;
 $58 = (($57) + 1)|0;
 $59 = $56 ? $58 : 0;
 $nextEdge = $59;
 $60 = $2;
 $61 = $3;
 $62 = $nextEdge;
 $63 = $4;
 $64 = $5;
 $65 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($60,$61,$62,$63,$64));
 $sNext = $65;
 $66 = $sPrev;
 $67 = $s;
 $68 = $66 > $67;
 if ($68) {
  $69 = $sPrev;
  $70 = $sNext;
  $71 = $69 > $70;
  if ($71) {
   $increment = -1;
   $72 = $prevEdge;
   $bestEdge = $72;
   $73 = $sPrev;
   $bestSeparation = $73;
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 do {
  if ((label|0) == 9) {
   $74 = $sNext;
   $75 = $s;
   $76 = $74 > $75;
   if ($76) {
    $increment = 1;
    $77 = $nextEdge;
    $bestEdge = $77;
    $78 = $sNext;
    $bestSeparation = $78;
    break;
   }
   $79 = $edge;
   $80 = $1;
   HEAP32[$80>>2] = $79;
   $81 = $s;
   $0 = $81;
   $110 = $0;
   STACKTOP = sp;return (+$110);
  }
 } while(0);
 while(1) {
  $82 = $increment;
  $83 = ($82|0)==(-1);
  $84 = $bestEdge;
  if ($83) {
   $85 = (($84) - 1)|0;
   $86 = ($85|0)>=(0);
   $87 = $bestEdge;
   $88 = $count1;
   $$sink1 = $86 ? $87 : $88;
   $89 = (($$sink1) - 1)|0;
   $edge = $89;
  } else {
   $90 = (($84) + 1)|0;
   $91 = $count1;
   $92 = ($90|0)<($91|0);
   $93 = $bestEdge;
   $94 = (($93) + 1)|0;
   $95 = $92 ? $94 : 0;
   $edge = $95;
  }
  $96 = $2;
  $97 = $3;
  $98 = $edge;
  $99 = $4;
  $100 = $5;
  $101 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($96,$97,$98,$99,$100));
  $s = $101;
  $102 = $s;
  $103 = $bestSeparation;
  $104 = $102 > $103;
  if (!($104)) {
   break;
  }
  $105 = $edge;
  $bestEdge = $105;
  $106 = $s;
  $bestSeparation = $106;
 }
 $107 = $bestEdge;
 $108 = $1;
 HEAP32[$108>>2] = $107;
 $109 = $bestSeparation;
 $0 = $109;
 $110 = $0;
 STACKTOP = sp;return (+$110);
}
function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1,$xf1,$edge1,$poly2,$xf2) {
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $edge1 = $edge1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count2 = 0, $dot = 0.0, $i = 0, $index = 0, $minDot = 0.0, $normal1 = 0, $normal1World = 0;
 var $normals1 = 0, $separation = 0.0, $v1 = 0, $v2 = 0, $vertices1 = 0, $vertices2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal1World = sp + 56|0;
 $normal1 = sp + 48|0;
 $v1 = sp + 24|0;
 $v2 = sp + 16|0;
 $5 = sp;
 $0 = $poly1;
 $1 = $xf1;
 $2 = $edge1;
 $3 = $poly2;
 $4 = $xf2;
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $vertices1 = $7;
 $8 = $0;
 $9 = ((($8)) + 84|0);
 $normals1 = $9;
 $10 = $3;
 $11 = ((($10)) + 148|0);
 $12 = HEAP32[$11>>2]|0;
 $count2 = $12;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 $vertices2 = $14;
 $15 = $2;
 $16 = (0)<=($15|0);
 if (!($16)) {
  ___assert_fail((9989|0),(10032|0),32,(10118|0));
  // unreachable;
 }
 $17 = $2;
 $18 = $0;
 $19 = ((($18)) + 148|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)<($20|0);
 if (!($21)) {
  ___assert_fail((9989|0),(10032|0),32,(10118|0));
  // unreachable;
 }
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = $2;
 $25 = $normals1;
 $26 = (($25) + ($24<<3)|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($normal1World,$23,$26);
 $27 = $4;
 $28 = ((($27)) + 8|0);
 __Z6b2MulTRK5b2RotRK6b2Vec2($normal1,$28,$normal1World);
 $index = 0;
 $minDot = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $count2;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  $33 = $vertices2;
  $34 = (($33) + ($32<<3)|0);
  $35 = (+__Z5b2DotRK6b2Vec2S1_($34,$normal1));
  $dot = $35;
  $36 = $dot;
  $37 = $minDot;
  $38 = $36 < $37;
  if ($38) {
   $39 = $dot;
   $minDot = $39;
   $40 = $i;
   $index = $40;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $1;
 $44 = $2;
 $45 = $vertices1;
 $46 = (($45) + ($44<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v1,$43,$46);
 $47 = $4;
 $48 = $index;
 $49 = $vertices2;
 $50 = (($49) + ($48<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v2,$47,$50);
 __ZmiRK6b2Vec2S1_($5,$v2,$v1);
 $51 = (+__Z5b2DotRK6b2Vec2S1_($5,$normal1World));
 $separation = $51;
 $52 = $separation;
 STACKTOP = sp;return (+$52);
}
function __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($c,$poly1,$xf1,$edge1,$poly2,$xf2) {
 $c = $c|0;
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $edge1 = $edge1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $count2 = 0;
 var $dot = 0.0, $i = 0, $i1 = 0, $i2 = 0, $index = 0, $minDot = 0.0, $normal1 = 0, $normals1 = 0, $normals2 = 0, $vertices2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal1 = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 8|0;
 $8 = sp;
 $0 = $c;
 $1 = $poly1;
 $2 = $xf1;
 $3 = $edge1;
 $4 = $poly2;
 $5 = $xf2;
 $9 = $1;
 $10 = ((($9)) + 84|0);
 $normals1 = $10;
 $11 = $4;
 $12 = ((($11)) + 148|0);
 $13 = HEAP32[$12>>2]|0;
 $count2 = $13;
 $14 = $4;
 $15 = ((($14)) + 20|0);
 $vertices2 = $15;
 $16 = $4;
 $17 = ((($16)) + 84|0);
 $normals2 = $17;
 $18 = $3;
 $19 = (0)<=($18|0);
 if (!($19)) {
  ___assert_fail((9989|0),(10032|0),151,(10135|0));
  // unreachable;
 }
 $20 = $3;
 $21 = $1;
 $22 = ((($21)) + 148|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)<($23|0);
 if (!($24)) {
  ___assert_fail((9989|0),(10032|0),151,(10135|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ((($25)) + 8|0);
 $27 = $2;
 $28 = ((($27)) + 8|0);
 $29 = $3;
 $30 = $normals1;
 $31 = (($30) + ($29<<3)|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($6,$28,$31);
 __Z6b2MulTRK5b2RotRK6b2Vec2($normal1,$26,$6);
 $index = 0;
 $minDot = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $count2;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = $normals2;
  $37 = (($36) + ($35<<3)|0);
  $38 = (+__Z5b2DotRK6b2Vec2S1_($normal1,$37));
  $dot = $38;
  $39 = $dot;
  $40 = $minDot;
  $41 = $39 < $40;
  if ($41) {
   $42 = $dot;
   $minDot = $42;
   $43 = $i;
   $index = $43;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $index;
 $i1 = $46;
 $47 = $i1;
 $48 = (($47) + 1)|0;
 $49 = $count2;
 $50 = ($48|0)<($49|0);
 $51 = $i1;
 $52 = (($51) + 1)|0;
 $53 = $50 ? $52 : 0;
 $i2 = $53;
 $54 = $0;
 $55 = $5;
 $56 = $i1;
 $57 = $vertices2;
 $58 = (($57) + ($56<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$55,$58);
 ;HEAP32[$54>>2]=HEAP32[$7>>2]|0;HEAP32[$54+4>>2]=HEAP32[$7+4>>2]|0;
 $59 = $3;
 $60 = $59&255;
 $61 = $0;
 $62 = ((($61)) + 8|0);
 HEAP8[$62>>0] = $60;
 $63 = $i1;
 $64 = $63&255;
 $65 = $0;
 $66 = ((($65)) + 8|0);
 $67 = ((($66)) + 1|0);
 HEAP8[$67>>0] = $64;
 $68 = $0;
 $69 = ((($68)) + 8|0);
 $70 = ((($69)) + 2|0);
 HEAP8[$70>>0] = 1;
 $71 = $0;
 $72 = ((($71)) + 8|0);
 $73 = ((($72)) + 3|0);
 HEAP8[$73>>0] = 0;
 $74 = $0;
 $75 = ((($74)) + 12|0);
 $76 = $5;
 $77 = $i2;
 $78 = $vertices2;
 $79 = (($78) + ($77<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($8,$76,$79);
 ;HEAP32[$75>>2]=HEAP32[$8>>2]|0;HEAP32[$75+4>>2]=HEAP32[$8+4>>2]|0;
 $80 = $3;
 $81 = $80&255;
 $82 = $0;
 $83 = ((($82)) + 12|0);
 $84 = ((($83)) + 8|0);
 HEAP8[$84>>0] = $81;
 $85 = $i2;
 $86 = $85&255;
 $87 = $0;
 $88 = ((($87)) + 12|0);
 $89 = ((($88)) + 8|0);
 $90 = ((($89)) + 1|0);
 HEAP8[$90>>0] = $86;
 $91 = $0;
 $92 = ((($91)) + 12|0);
 $93 = ((($92)) + 8|0);
 $94 = ((($93)) + 2|0);
 HEAP8[$94>>0] = 1;
 $95 = $0;
 $96 = ((($95)) + 12|0);
 $97 = ((($96)) + 8|0);
 $98 = ((($97)) + 3|0);
 HEAP8[$98>>0] = 0;
 STACKTOP = sp;return;
}
function __Z7b2CrossRK6b2Vec2f($agg$result,$a,$s) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $s;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2 * $5;
 $7 = $1;
 $8 = -$7;
 $9 = $0;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result,$6,$11);
 STACKTOP = sp;return;
}
function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this,$manifold,$xfA,$radiusA,$xfB,$radiusB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $radiusA = +$radiusA;
 $xfB = $xfB|0;
 $radiusB = +$radiusB;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $cA = 0, $cA1 = 0, $cA7 = 0, $cB = 0, $cB2 = 0, $cB6 = 0, $clipPoint = 0, $clipPoint5 = 0;
 var $i = 0, $i4 = 0, $planePoint = 0, $planePoint3 = 0, $pointA = 0, $pointB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pointA = sp + 248|0;
 $pointB = sp + 240|0;
 $6 = sp + 232|0;
 $cA = sp + 224|0;
 $7 = sp + 216|0;
 $cB = sp + 208|0;
 $8 = sp + 200|0;
 $9 = sp + 192|0;
 $10 = sp + 184|0;
 $11 = sp + 176|0;
 $planePoint = sp + 168|0;
 $clipPoint = sp + 152|0;
 $cA1 = sp + 144|0;
 $12 = sp + 136|0;
 $13 = sp + 128|0;
 $cB2 = sp + 120|0;
 $14 = sp + 112|0;
 $15 = sp + 104|0;
 $16 = sp + 96|0;
 $17 = sp + 88|0;
 $planePoint3 = sp + 80|0;
 $clipPoint5 = sp + 64|0;
 $cB6 = sp + 56|0;
 $18 = sp + 48|0;
 $19 = sp + 40|0;
 $cA7 = sp + 32|0;
 $20 = sp + 24|0;
 $21 = sp + 16|0;
 $22 = sp + 8|0;
 $23 = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $radiusA;
 $4 = $xfB;
 $5 = $radiusB;
 $24 = $0;
 $25 = $1;
 $26 = ((($25)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 switch ($31|0) {
 case 0:  {
  __ZN6b2Vec23SetEff($24,1.0,0.0);
  $32 = $2;
  $33 = $1;
  $34 = ((($33)) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$32,$34);
  $35 = $4;
  $36 = $1;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$35,$36);
  $37 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($pointA,$pointB));
  $38 = $37 > 1.4210854715202004E-14;
  if ($38) {
   __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
   ;HEAP32[$24>>2]=HEAP32[$6>>2]|0;HEAP32[$24+4>>2]=HEAP32[$6+4>>2]|0;
   (+__ZN6b2Vec29NormalizeEv($24));
  }
  $39 = $3;
  __ZmlfRK6b2Vec2($7,$39,$24);
  __ZplRK6b2Vec2S1_($cA,$pointA,$7);
  $40 = $5;
  __ZmlfRK6b2Vec2($8,$40,$24);
  __ZmiRK6b2Vec2S1_($cB,$pointB,$8);
  $41 = ((($24)) + 8|0);
  __ZplRK6b2Vec2S1_($10,$cA,$cB);
  __ZmlfRK6b2Vec2($9,0.5,$10);
  ;HEAP32[$41>>2]=HEAP32[$9>>2]|0;HEAP32[$41+4>>2]=HEAP32[$9+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $42 = $2;
  $43 = ((($42)) + 8|0);
  $44 = $1;
  $45 = ((($44)) + 40|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($11,$43,$45);
  ;HEAP32[$24>>2]=HEAP32[$11>>2]|0;HEAP32[$24+4>>2]=HEAP32[$11+4>>2]|0;
  $46 = $2;
  $47 = $1;
  $48 = ((($47)) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint,$46,$48);
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = $1;
   $51 = ((($50)) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49|0)<($52|0);
   if (!($53)) {
    break;
   }
   $54 = $4;
   $55 = $i;
   $56 = $1;
   $57 = (($56) + (($55*20)|0)|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint,$54,$57);
   $58 = $3;
   __ZmiRK6b2Vec2S1_($13,$clipPoint,$planePoint);
   $59 = (+__Z5b2DotRK6b2Vec2S1_($13,$24));
   $60 = $58 - $59;
   __ZmlfRK6b2Vec2($12,$60,$24);
   __ZplRK6b2Vec2S1_($cA1,$clipPoint,$12);
   $61 = $5;
   __ZmlfRK6b2Vec2($14,$61,$24);
   __ZmiRK6b2Vec2S1_($cB2,$clipPoint,$14);
   $62 = $i;
   $63 = ((($24)) + 8|0);
   $64 = (($63) + ($62<<3)|0);
   __ZplRK6b2Vec2S1_($16,$cA1,$cB2);
   __ZmlfRK6b2Vec2($15,0.5,$16);
   ;HEAP32[$64>>2]=HEAP32[$15>>2]|0;HEAP32[$64+4>>2]=HEAP32[$15+4>>2]|0;
   $65 = $i;
   $66 = (($65) + 1)|0;
   $i = $66;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $67 = $4;
  $68 = ((($67)) + 8|0);
  $69 = $1;
  $70 = ((($69)) + 40|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($17,$68,$70);
  ;HEAP32[$24>>2]=HEAP32[$17>>2]|0;HEAP32[$24+4>>2]=HEAP32[$17+4>>2]|0;
  $71 = $4;
  $72 = $1;
  $73 = ((($72)) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint3,$71,$73);
  $i4 = 0;
  while(1) {
   $74 = $i4;
   $75 = $1;
   $76 = ((($75)) + 60|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)<($77|0);
   if (!($78)) {
    break;
   }
   $79 = $2;
   $80 = $i4;
   $81 = $1;
   $82 = (($81) + (($80*20)|0)|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint5,$79,$82);
   $83 = $5;
   __ZmiRK6b2Vec2S1_($19,$clipPoint5,$planePoint3);
   $84 = (+__Z5b2DotRK6b2Vec2S1_($19,$24));
   $85 = $83 - $84;
   __ZmlfRK6b2Vec2($18,$85,$24);
   __ZplRK6b2Vec2S1_($cB6,$clipPoint5,$18);
   $86 = $3;
   __ZmlfRK6b2Vec2($20,$86,$24);
   __ZmiRK6b2Vec2S1_($cA7,$clipPoint5,$20);
   $87 = $i4;
   $88 = ((($24)) + 8|0);
   $89 = (($88) + ($87<<3)|0);
   __ZplRK6b2Vec2S1_($22,$cA7,$cB6);
   __ZmlfRK6b2Vec2($21,0.5,$22);
   ;HEAP32[$89>>2]=HEAP32[$21>>2]|0;HEAP32[$89+4>>2]=HEAP32[$21+4>>2]|0;
   $90 = $i4;
   $91 = (($90) + 1)|0;
   $i4 = $91;
  }
  __ZNK6b2Vec2ngEv($23,$24);
  ;HEAP32[$24>>2]=HEAP32[$23>>2]|0;HEAP32[$24+4>>2]=HEAP32[$23+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __Z5b2AbsIfET_S0_($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 > 0.0;
 $3 = $0;
 $4 = -$3;
 $5 = $2 ? $3 : $4;
 STACKTOP = sp;return (+$5);
}
function __ZN6b2Vec2clEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<2)|0);
 STACKTOP = sp;return ($4|0);
}
function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut,$vIn,$normal,$offset,$vertexIndexA) {
 $vOut = $vOut|0;
 $vIn = $vIn|0;
 $normal = $normal|0;
 $offset = +$offset;
 $vertexIndexA = $vertexIndexA|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $distance0 = 0.0;
 var $distance1 = 0.0, $interp = 0.0, $numOut = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $0 = $vOut;
 $1 = $vIn;
 $2 = $normal;
 $3 = $offset;
 $4 = $vertexIndexA;
 $numOut = 0;
 $8 = $2;
 $9 = $1;
 $10 = (+__Z5b2DotRK6b2Vec2S1_($8,$9));
 $11 = $3;
 $12 = $10 - $11;
 $distance0 = $12;
 $13 = $2;
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = (+__Z5b2DotRK6b2Vec2S1_($13,$15));
 $17 = $3;
 $18 = $16 - $17;
 $distance1 = $18;
 $19 = $distance0;
 $20 = $19 <= 0.0;
 if ($20) {
  $21 = $numOut;
  $22 = (($21) + 1)|0;
  $numOut = $22;
  $23 = $0;
  $24 = (($23) + (($21*12)|0)|0);
  $25 = $1;
  ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;
 }
 $26 = $distance1;
 $27 = $26 <= 0.0;
 if ($27) {
  $28 = $numOut;
  $29 = (($28) + 1)|0;
  $numOut = $29;
  $30 = $0;
  $31 = (($30) + (($28*12)|0)|0);
  $32 = $1;
  $33 = ((($32)) + 12|0);
  ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;
 }
 $34 = $distance0;
 $35 = $distance1;
 $36 = $34 * $35;
 $37 = $36 < 0.0;
 if (!($37)) {
  $78 = $numOut;
  STACKTOP = sp;return ($78|0);
 }
 $38 = $distance0;
 $39 = $distance0;
 $40 = $distance1;
 $41 = $39 - $40;
 $42 = $38 / $41;
 $interp = $42;
 $43 = $numOut;
 $44 = $0;
 $45 = (($44) + (($43*12)|0)|0);
 $46 = $1;
 $47 = $interp;
 $48 = $1;
 $49 = ((($48)) + 12|0);
 $50 = $1;
 __ZmiRK6b2Vec2S1_($7,$49,$50);
 __ZmlfRK6b2Vec2($6,$47,$7);
 __ZplRK6b2Vec2S1_($5,$46,$6);
 ;HEAP32[$45>>2]=HEAP32[$5>>2]|0;HEAP32[$45+4>>2]=HEAP32[$5+4>>2]|0;
 $51 = $4;
 $52 = $51&255;
 $53 = $numOut;
 $54 = $0;
 $55 = (($54) + (($53*12)|0)|0);
 $56 = ((($55)) + 8|0);
 HEAP8[$56>>0] = $52;
 $57 = $1;
 $58 = ((($57)) + 8|0);
 $59 = ((($58)) + 1|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $numOut;
 $62 = $0;
 $63 = (($62) + (($61*12)|0)|0);
 $64 = ((($63)) + 8|0);
 $65 = ((($64)) + 1|0);
 HEAP8[$65>>0] = $60;
 $66 = $numOut;
 $67 = $0;
 $68 = (($67) + (($66*12)|0)|0);
 $69 = ((($68)) + 8|0);
 $70 = ((($69)) + 2|0);
 HEAP8[$70>>0] = 0;
 $71 = $numOut;
 $72 = $0;
 $73 = (($72) + (($71*12)|0)|0);
 $74 = ((($73)) + 8|0);
 $75 = ((($74)) + 3|0);
 HEAP8[$75>>0] = 1;
 $76 = $numOut;
 $77 = (($76) + 1)|0;
 $numOut = $77;
 $78 = $numOut;
 STACKTOP = sp;return ($78|0);
}
function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA,$indexA,$shapeB,$indexB,$xfA,$xfB) {
 $shapeA = $shapeA|0;
 $indexA = $indexA|0;
 $shapeB = $shapeB|0;
 $indexB = $indexB|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cache = 0, $input = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input = sp + 36|0;
 $cache = sp + 24|0;
 $output = sp;
 $0 = $shapeA;
 $1 = $indexA;
 $2 = $shapeB;
 $3 = $indexB;
 $4 = $xfA;
 $5 = $xfB;
 __ZN15b2DistanceInputC2Ev($input);
 $6 = $0;
 $7 = $1;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($input,$6,$7);
 $8 = ((($input)) + 28|0);
 $9 = $2;
 $10 = $3;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($8,$9,$10);
 $11 = ((($input)) + 56|0);
 $12 = $4;
 ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$12+12>>2]|0;
 $13 = ((($input)) + 72|0);
 $14 = $5;
 ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;
 $15 = ((($input)) + 88|0);
 HEAP8[$15>>0] = 1;
 $16 = ((($cache)) + 4|0);
 HEAP16[$16>>1] = 0;
 __ZN16b2DistanceOutputC2Ev($output);
 __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output,$cache,$input);
 $17 = ((($output)) + 16|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 < 1.1920928955078125E-6;
 STACKTOP = sp;return ($19|0);
}
function __ZN15b2DistanceInputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = ((($1)) + 28|0);
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = ((($1)) + 56|0);
 __ZN11b2TransformC2Ev($3);
 $4 = ((($1)) + 72|0);
 __ZN11b2TransformC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN15b2DistanceProxyC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $1;
 while(1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = ((($3)) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 24|0);
 HEAPF32[$8>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN16b2DistanceOutputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this,$shape,$index) {
 $this = $this|0;
 $shape = $shape|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $chain = 0, $circle = 0, $edge = 0, $polygon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shape;
 $2 = $index;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK7b2Shape7GetTypeEv($4)|0);
 switch ($5|0) {
 case 0:  {
  $6 = $1;
  $circle = $6;
  $7 = $circle;
  $8 = ((($7)) + 12|0);
  $9 = ((($3)) + 16|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($3)) + 20|0);
  HEAP32[$10>>2] = 1;
  $11 = $circle;
  $12 = ((($11)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = ((($3)) + 24|0);
  HEAPF32[$14>>2] = $13;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $15 = $1;
  $polygon = $15;
  $16 = $polygon;
  $17 = ((($16)) + 20|0);
  $18 = ((($3)) + 16|0);
  HEAP32[$18>>2] = $17;
  $19 = $polygon;
  $20 = ((($19)) + 148|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($3)) + 20|0);
  HEAP32[$22>>2] = $21;
  $23 = $polygon;
  $24 = ((($23)) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($3)) + 24|0);
  HEAPF32[$26>>2] = $25;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $27 = $1;
  $chain = $27;
  $28 = $2;
  $29 = (0)<=($28|0);
  if (!($29)) {
   ___assert_fail((10154|0),(10191|0),53,(10271|0));
   // unreachable;
  }
  $30 = $2;
  $31 = $chain;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   ___assert_fail((10154|0),(10191|0),53,(10271|0));
   // unreachable;
  }
  $35 = $2;
  $36 = $chain;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35<<3)|0);
  ;HEAP32[$3>>2]=HEAP32[$39>>2]|0;HEAP32[$3+4>>2]=HEAP32[$39+4>>2]|0;
  $40 = $2;
  $41 = (($40) + 1)|0;
  $42 = $chain;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  $46 = ((($3)) + 8|0);
  if ($45) {
   $47 = $2;
   $48 = (($47) + 1)|0;
   $49 = $chain;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<3)|0);
   ;HEAP32[$46>>2]=HEAP32[$52>>2]|0;HEAP32[$46+4>>2]=HEAP32[$52+4>>2]|0;
  } else {
   $53 = $chain;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   ;HEAP32[$46>>2]=HEAP32[$55>>2]|0;HEAP32[$46+4>>2]=HEAP32[$55+4>>2]|0;
  }
  $56 = ((($3)) + 16|0);
  HEAP32[$56>>2] = $3;
  $57 = ((($3)) + 20|0);
  HEAP32[$57>>2] = 2;
  $58 = $chain;
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($3)) + 24|0);
  HEAPF32[$61>>2] = $60;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $62 = $1;
  $edge = $62;
  $63 = $edge;
  $64 = ((($63)) + 12|0);
  $65 = ((($3)) + 16|0);
  HEAP32[$65>>2] = $64;
  $66 = ((($3)) + 20|0);
  HEAP32[$66>>2] = 2;
  $67 = $edge;
  $68 = ((($67)) + 8|0);
  $69 = +HEAPF32[$68>>2];
  $70 = ((($3)) + 24|0);
  HEAPF32[$70>>2] = $69;
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((29532|0),(10191|0),81,(10271|0));
  // unreachable;
 }
 }
}
function __ZNK7b2Shape7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Simplex6Solve2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $d12_1 = 0.0, $d12_2 = 0.0, $e12 = 0, $inv_d12 = 0.0, $w1 = 0, $w2 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w1 = sp + 32|0;
 $w2 = sp + 24|0;
 $e12 = sp + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 ;HEAP32[$w1>>2]=HEAP32[$2>>2]|0;HEAP32[$w1+4>>2]=HEAP32[$2+4>>2]|0;
 $3 = ((($1)) + 36|0);
 $4 = ((($3)) + 16|0);
 ;HEAP32[$w2>>2]=HEAP32[$4>>2]|0;HEAP32[$w2+4>>2]=HEAP32[$4+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e12,$w2,$w1);
 $5 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e12));
 $6 = -$5;
 $d12_2 = $6;
 $7 = $d12_2;
 $8 = $7 <= 0.0;
 if ($8) {
  $9 = ((($1)) + 24|0);
  HEAPF32[$9>>2] = 1.0;
  $10 = ((($1)) + 108|0);
  HEAP32[$10>>2] = 1;
  STACKTOP = sp;return;
 }
 $11 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e12));
 $d12_1 = $11;
 $12 = $d12_1;
 $13 = $12 <= 0.0;
 if ($13) {
  $14 = ((($1)) + 36|0);
  $15 = ((($14)) + 24|0);
  HEAPF32[$15>>2] = 1.0;
  $16 = ((($1)) + 108|0);
  HEAP32[$16>>2] = 1;
  $17 = ((($1)) + 36|0);
  dest=$1; src=$17; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  $18 = $d12_1;
  $19 = $d12_2;
  $20 = $18 + $19;
  $21 = 1.0 / $20;
  $inv_d12 = $21;
  $22 = $d12_1;
  $23 = $inv_d12;
  $24 = $22 * $23;
  $25 = ((($1)) + 24|0);
  HEAPF32[$25>>2] = $24;
  $26 = $d12_2;
  $27 = $inv_d12;
  $28 = $26 * $27;
  $29 = ((($1)) + 36|0);
  $30 = ((($29)) + 24|0);
  HEAPF32[$30>>2] = $28;
  $31 = ((($1)) + 108|0);
  HEAP32[$31>>2] = 2;
  STACKTOP = sp;return;
 }
}
function __ZN9b2Simplex6Solve3Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $d123_1 = 0.0;
 var $d123_2 = 0.0, $d123_3 = 0.0, $d12_1 = 0.0, $d12_2 = 0.0, $d13_1 = 0.0, $d13_2 = 0.0, $d23_1 = 0.0, $d23_2 = 0.0, $e12 = 0, $e13 = 0, $e23 = 0, $inv_d12 = 0.0, $inv_d123 = 0.0, $inv_d13 = 0.0, $inv_d23 = 0.0, $n123 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $w1 = 0, $w1e12 = 0.0, $w1e13 = 0.0, $w2 = 0, $w2e12 = 0.0, $w2e23 = 0.0, $w3 = 0, $w3e13 = 0.0, $w3e23 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w1 = sp + 120|0;
 $w2 = sp + 112|0;
 $w3 = sp + 104|0;
 $e12 = sp + 96|0;
 $e13 = sp + 72|0;
 $e23 = sp + 48|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 ;HEAP32[$w1>>2]=HEAP32[$2>>2]|0;HEAP32[$w1+4>>2]=HEAP32[$2+4>>2]|0;
 $3 = ((($1)) + 36|0);
 $4 = ((($3)) + 16|0);
 ;HEAP32[$w2>>2]=HEAP32[$4>>2]|0;HEAP32[$w2+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = ((($1)) + 72|0);
 $6 = ((($5)) + 16|0);
 ;HEAP32[$w3>>2]=HEAP32[$6>>2]|0;HEAP32[$w3+4>>2]=HEAP32[$6+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e12,$w2,$w1);
 $7 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e12));
 $w1e12 = $7;
 $8 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e12));
 $w2e12 = $8;
 $9 = $w2e12;
 $d12_1 = $9;
 $10 = $w1e12;
 $11 = -$10;
 $d12_2 = $11;
 __ZmiRK6b2Vec2S1_($e13,$w3,$w1);
 $12 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e13));
 $w1e13 = $12;
 $13 = (+__Z5b2DotRK6b2Vec2S1_($w3,$e13));
 $w3e13 = $13;
 $14 = $w3e13;
 $d13_1 = $14;
 $15 = $w1e13;
 $16 = -$15;
 $d13_2 = $16;
 __ZmiRK6b2Vec2S1_($e23,$w3,$w2);
 $17 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e23));
 $w2e23 = $17;
 $18 = (+__Z5b2DotRK6b2Vec2S1_($w3,$e23));
 $w3e23 = $18;
 $19 = $w3e23;
 $d23_1 = $19;
 $20 = $w2e23;
 $21 = -$20;
 $d23_2 = $21;
 $22 = (+__Z7b2CrossRK6b2Vec2S1_($e12,$e13));
 $n123 = $22;
 $23 = $n123;
 $24 = (+__Z7b2CrossRK6b2Vec2S1_($w2,$w3));
 $25 = $23 * $24;
 $d123_1 = $25;
 $26 = $n123;
 $27 = (+__Z7b2CrossRK6b2Vec2S1_($w3,$w1));
 $28 = $26 * $27;
 $d123_2 = $28;
 $29 = $n123;
 $30 = (+__Z7b2CrossRK6b2Vec2S1_($w1,$w2));
 $31 = $29 * $30;
 $d123_3 = $31;
 $32 = $d12_2;
 $33 = $32 <= 0.0;
 $34 = $d13_2;
 $35 = $34 <= 0.0;
 $or$cond = $33 & $35;
 if ($or$cond) {
  $36 = ((($1)) + 24|0);
  HEAPF32[$36>>2] = 1.0;
  $37 = ((($1)) + 108|0);
  HEAP32[$37>>2] = 1;
  STACKTOP = sp;return;
 }
 $38 = $d12_1;
 $39 = $38 > 0.0;
 $40 = $d12_2;
 $41 = $40 > 0.0;
 $or$cond3 = $39 & $41;
 $42 = $d123_3;
 $43 = $42 <= 0.0;
 $or$cond5 = $or$cond3 & $43;
 if ($or$cond5) {
  $44 = $d12_1;
  $45 = $d12_2;
  $46 = $44 + $45;
  $47 = 1.0 / $46;
  $inv_d12 = $47;
  $48 = $d12_1;
  $49 = $inv_d12;
  $50 = $48 * $49;
  $51 = ((($1)) + 24|0);
  HEAPF32[$51>>2] = $50;
  $52 = $d12_2;
  $53 = $inv_d12;
  $54 = $52 * $53;
  $55 = ((($1)) + 36|0);
  $56 = ((($55)) + 24|0);
  HEAPF32[$56>>2] = $54;
  $57 = ((($1)) + 108|0);
  HEAP32[$57>>2] = 2;
  STACKTOP = sp;return;
 }
 $58 = $d13_1;
 $59 = $58 > 0.0;
 $60 = $d13_2;
 $61 = $60 > 0.0;
 $or$cond7 = $59 & $61;
 $62 = $d123_2;
 $63 = $62 <= 0.0;
 $or$cond9 = $or$cond7 & $63;
 if ($or$cond9) {
  $64 = $d13_1;
  $65 = $d13_2;
  $66 = $64 + $65;
  $67 = 1.0 / $66;
  $inv_d13 = $67;
  $68 = $d13_1;
  $69 = $inv_d13;
  $70 = $68 * $69;
  $71 = ((($1)) + 24|0);
  HEAPF32[$71>>2] = $70;
  $72 = $d13_2;
  $73 = $inv_d13;
  $74 = $72 * $73;
  $75 = ((($1)) + 72|0);
  $76 = ((($75)) + 24|0);
  HEAPF32[$76>>2] = $74;
  $77 = ((($1)) + 108|0);
  HEAP32[$77>>2] = 2;
  $78 = ((($1)) + 36|0);
  $79 = ((($1)) + 72|0);
  dest=$78; src=$79; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $80 = $d12_1;
 $81 = $80 <= 0.0;
 $82 = $d23_2;
 $83 = $82 <= 0.0;
 $or$cond11 = $81 & $83;
 if ($or$cond11) {
  $84 = ((($1)) + 36|0);
  $85 = ((($84)) + 24|0);
  HEAPF32[$85>>2] = 1.0;
  $86 = ((($1)) + 108|0);
  HEAP32[$86>>2] = 1;
  $87 = ((($1)) + 36|0);
  dest=$1; src=$87; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $88 = $d13_1;
 $89 = $88 <= 0.0;
 $90 = $d23_1;
 $91 = $90 <= 0.0;
 $or$cond13 = $89 & $91;
 if ($or$cond13) {
  $92 = ((($1)) + 72|0);
  $93 = ((($92)) + 24|0);
  HEAPF32[$93>>2] = 1.0;
  $94 = ((($1)) + 108|0);
  HEAP32[$94>>2] = 1;
  $95 = ((($1)) + 72|0);
  dest=$1; src=$95; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $96 = $d23_1;
 $97 = $96 > 0.0;
 $98 = $d23_2;
 $99 = $98 > 0.0;
 $or$cond15 = $97 & $99;
 $100 = $d123_1;
 $101 = $100 <= 0.0;
 $or$cond17 = $or$cond15 & $101;
 if ($or$cond17) {
  $102 = $d23_1;
  $103 = $d23_2;
  $104 = $102 + $103;
  $105 = 1.0 / $104;
  $inv_d23 = $105;
  $106 = $d23_1;
  $107 = $inv_d23;
  $108 = $106 * $107;
  $109 = ((($1)) + 36|0);
  $110 = ((($109)) + 24|0);
  HEAPF32[$110>>2] = $108;
  $111 = $d23_2;
  $112 = $inv_d23;
  $113 = $111 * $112;
  $114 = ((($1)) + 72|0);
  $115 = ((($114)) + 24|0);
  HEAPF32[$115>>2] = $113;
  $116 = ((($1)) + 108|0);
  HEAP32[$116>>2] = 2;
  $117 = ((($1)) + 72|0);
  dest=$1; src=$117; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  $118 = $d123_1;
  $119 = $d123_2;
  $120 = $118 + $119;
  $121 = $d123_3;
  $122 = $120 + $121;
  $123 = 1.0 / $122;
  $inv_d123 = $123;
  $124 = $d123_1;
  $125 = $inv_d123;
  $126 = $124 * $125;
  $127 = ((($1)) + 24|0);
  HEAPF32[$127>>2] = $126;
  $128 = $d123_2;
  $129 = $inv_d123;
  $130 = $128 * $129;
  $131 = ((($1)) + 36|0);
  $132 = ((($131)) + 24|0);
  HEAPF32[$132>>2] = $130;
  $133 = $d123_3;
  $134 = $inv_d123;
  $135 = $133 * $134;
  $136 = ((($1)) + 72|0);
  $137 = ((($136)) + 24|0);
  HEAPF32[$137>>2] = $135;
  $138 = ((($1)) + 108|0);
  HEAP32[$138>>2] = 3;
  STACKTOP = sp;return;
 }
}
function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output,$cache,$input) {
 $output = $output|0;
 $cache = $cache|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $closestPoint = 0, $d = 0;
 var $distanceSqr1 = 0.0, $distanceSqr2 = 0.0, $duplicate = 0, $i = 0, $i1 = 0, $iter = 0, $k_maxIters = 0, $normal = 0, $p = 0, $p2 = 0, $proxyA = 0, $proxyB = 0, $rA = 0.0, $rB = 0.0, $saveA = 0, $saveB = 0, $saveCount = 0, $simplex = 0, $transformA = 0, $transformB = 0;
 var $vertex = 0, $vertices = 0, $wBLocal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $transformA = sp + 328|0;
 $transformB = sp + 312|0;
 $simplex = sp + 200|0;
 $saveA = sp + 176|0;
 $saveB = sp + 164|0;
 $closestPoint = sp + 152|0;
 $p = sp + 128|0;
 $d = sp + 120|0;
 $3 = sp + 104|0;
 $4 = sp + 96|0;
 $5 = sp + 88|0;
 $wBLocal = sp + 80|0;
 $6 = sp + 72|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $normal = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $p2 = sp + 8|0;
 $11 = sp;
 $0 = $output;
 $1 = $cache;
 $2 = $input;
 $12 = HEAP32[7786]|0;
 $13 = (($12) + 1)|0;
 HEAP32[7786] = $13;
 $14 = $2;
 $proxyA = $14;
 $15 = $2;
 $16 = ((($15)) + 28|0);
 $proxyB = $16;
 $17 = $2;
 $18 = ((($17)) + 56|0);
 ;HEAP32[$transformA>>2]=HEAP32[$18>>2]|0;HEAP32[$transformA+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$transformA+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$transformA+12>>2]=HEAP32[$18+12>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 72|0);
 ;HEAP32[$transformB>>2]=HEAP32[$20>>2]|0;HEAP32[$transformB+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$transformB+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$transformB+12>>2]=HEAP32[$20+12>>2]|0;
 __ZN9b2SimplexC2Ev($simplex);
 $21 = $1;
 $22 = $proxyA;
 $23 = $proxyB;
 __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex,$21,$22,$transformA,$23,$transformB);
 $vertices = $simplex;
 $k_maxIters = 20;
 $saveCount = 0;
 __ZNK9b2Simplex15GetClosestPointEv($closestPoint,$simplex);
 $24 = (+__ZNK6b2Vec213LengthSquaredEv($closestPoint));
 $distanceSqr1 = $24;
 $25 = $distanceSqr1;
 $distanceSqr2 = $25;
 $iter = 0;
 L1: while(1) {
  $26 = $iter;
  $27 = ($26|0)<(20);
  if (!($27)) {
   break;
  }
  $28 = ((($simplex)) + 108|0);
  $29 = HEAP32[$28>>2]|0;
  $saveCount = $29;
  $i = 0;
  while(1) {
   $30 = $i;
   $31 = $saveCount;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = $i;
   $34 = $vertices;
   $35 = (($34) + (($33*36)|0)|0);
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $i;
   $39 = (($saveA) + ($38<<2)|0);
   HEAP32[$39>>2] = $37;
   $40 = $i;
   $41 = $vertices;
   $42 = (($41) + (($40*36)|0)|0);
   $43 = ((($42)) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $i;
   $46 = (($saveB) + ($45<<2)|0);
   HEAP32[$46>>2] = $44;
   $47 = $i;
   $48 = (($47) + 1)|0;
   $i = $48;
  }
  $49 = ((($simplex)) + 108|0);
  $50 = HEAP32[$49>>2]|0;
  switch ($50|0) {
  case 1:  {
   break;
  }
  case 2:  {
   __ZN9b2Simplex6Solve2Ev($simplex);
   break;
  }
  case 3:  {
   __ZN9b2Simplex6Solve3Ev($simplex);
   break;
  }
  default: {
   label = 9;
   break L1;
  }
  }
  $51 = ((($simplex)) + 108|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(3);
  if ($53) {
   break;
  }
  __ZNK9b2Simplex15GetClosestPointEv($p,$simplex);
  $54 = (+__ZNK6b2Vec213LengthSquaredEv($p));
  $distanceSqr2 = $54;
  $55 = $distanceSqr2;
  $distanceSqr1 = $55;
  __ZNK9b2Simplex18GetSearchDirectionEv($d,$simplex);
  $56 = (+__ZNK6b2Vec213LengthSquaredEv($d));
  $57 = $56 < 1.4210854715202004E-14;
  if ($57) {
   break;
  }
  $58 = $vertices;
  $59 = ((($simplex)) + 108|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + (($60*36)|0)|0);
  $vertex = $61;
  $62 = $proxyA;
  $63 = ((($transformA)) + 8|0);
  __ZNK6b2Vec2ngEv($4,$d);
  __Z6b2MulTRK5b2RotRK6b2Vec2($3,$63,$4);
  $64 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($62,$3)|0);
  $65 = $vertex;
  $66 = ((($65)) + 28|0);
  HEAP32[$66>>2] = $64;
  $67 = $vertex;
  $68 = $proxyA;
  $69 = $vertex;
  $70 = ((($69)) + 28|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZNK15b2DistanceProxy9GetVertexEi($68,$71)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($5,$transformA,$72);
  ;HEAP32[$67>>2]=HEAP32[$5>>2]|0;HEAP32[$67+4>>2]=HEAP32[$5+4>>2]|0;
  __ZN6b2Vec2C2Ev($wBLocal);
  $73 = $proxyB;
  $74 = ((($transformB)) + 8|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($6,$74,$d);
  $75 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($73,$6)|0);
  $76 = $vertex;
  $77 = ((($76)) + 32|0);
  HEAP32[$77>>2] = $75;
  $78 = $vertex;
  $79 = ((($78)) + 8|0);
  $80 = $proxyB;
  $81 = $vertex;
  $82 = ((($81)) + 32|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (__ZNK15b2DistanceProxy9GetVertexEi($80,$83)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($7,$transformB,$84);
  ;HEAP32[$79>>2]=HEAP32[$7>>2]|0;HEAP32[$79+4>>2]=HEAP32[$7+4>>2]|0;
  $85 = $vertex;
  $86 = ((($85)) + 16|0);
  $87 = $vertex;
  $88 = ((($87)) + 8|0);
  $89 = $vertex;
  __ZmiRK6b2Vec2S1_($8,$88,$89);
  ;HEAP32[$86>>2]=HEAP32[$8>>2]|0;HEAP32[$86+4>>2]=HEAP32[$8+4>>2]|0;
  $90 = $iter;
  $91 = (($90) + 1)|0;
  $iter = $91;
  $92 = HEAP32[7787]|0;
  $93 = (($92) + 1)|0;
  HEAP32[7787] = $93;
  $duplicate = 0;
  $i1 = 0;
  while(1) {
   $94 = $i1;
   $95 = $saveCount;
   $96 = ($94|0)<($95|0);
   if (!($96)) {
    break;
   }
   $97 = $vertex;
   $98 = ((($97)) + 28|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $i1;
   $101 = (($saveA) + ($100<<2)|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($99|0)==($102|0);
   if ($103) {
    $104 = $vertex;
    $105 = ((($104)) + 32|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $i1;
    $108 = (($saveB) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($106|0)==($109|0);
    if ($110) {
     label = 16;
     break;
    }
   }
   $111 = $i1;
   $112 = (($111) + 1)|0;
   $i1 = $112;
  }
  if ((label|0) == 16) {
   label = 0;
   $duplicate = 1;
  }
  $113 = $duplicate;
  $114 = $113&1;
  if ($114) {
   break;
  }
  $115 = ((($simplex)) + 108|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$115>>2] = $117;
 }
 if ((label|0) == 9) {
  ___assert_fail((29532|0),(10191|0),498,(10447|0));
  // unreachable;
 }
 $118 = HEAP32[7788]|0;
 $119 = $iter;
 $120 = (__Z5b2MaxIiET_S0_S0_($118,$119)|0);
 HEAP32[7788] = $120;
 $121 = $0;
 $122 = $0;
 $123 = ((($122)) + 8|0);
 __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex,$121,$123);
 $124 = $0;
 $125 = $0;
 $126 = ((($125)) + 8|0);
 $127 = (+__Z10b2DistanceRK6b2Vec2S1_($124,$126));
 $128 = $0;
 $129 = ((($128)) + 16|0);
 HEAPF32[$129>>2] = $127;
 $130 = $iter;
 $131 = $0;
 $132 = ((($131)) + 20|0);
 HEAP32[$132>>2] = $130;
 $133 = $1;
 __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($simplex,$133);
 $134 = $2;
 $135 = ((($134)) + 88|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&1;
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = $proxyA;
 $139 = ((($138)) + 24|0);
 $140 = +HEAPF32[$139>>2];
 $rA = $140;
 $141 = $proxyB;
 $142 = ((($141)) + 24|0);
 $143 = +HEAPF32[$142>>2];
 $rB = $143;
 $144 = $0;
 $145 = ((($144)) + 16|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $rA;
 $148 = $rB;
 $149 = $147 + $148;
 $150 = $146 > $149;
 if ($150) {
  $151 = $0;
  $152 = ((($151)) + 16|0);
  $153 = +HEAPF32[$152>>2];
  $154 = $153 > 1.1920928955078125E-7;
  if ($154) {
   $155 = $rA;
   $156 = $rB;
   $157 = $155 + $156;
   $158 = $0;
   $159 = ((($158)) + 16|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $160 - $157;
   HEAPF32[$159>>2] = $161;
   $162 = $0;
   $163 = ((($162)) + 8|0);
   $164 = $0;
   __ZmiRK6b2Vec2S1_($normal,$163,$164);
   (+__ZN6b2Vec29NormalizeEv($normal));
   $165 = $0;
   $166 = $rA;
   __ZmlfRK6b2Vec2($9,$166,$normal);
   __ZN6b2Vec2pLERKS_($165,$9);
   $167 = $0;
   $168 = ((($167)) + 8|0);
   $169 = $rB;
   __ZmlfRK6b2Vec2($10,$169,$normal);
   __ZN6b2Vec2mIERKS_($168,$10);
   STACKTOP = sp;return;
  }
 }
 $170 = $0;
 $171 = $0;
 $172 = ((($171)) + 8|0);
 __ZplRK6b2Vec2S1_($11,$170,$172);
 __ZmlfRK6b2Vec2($p2,0.5,$11);
 $173 = $0;
 ;HEAP32[$173>>2]=HEAP32[$p2>>2]|0;HEAP32[$173+4>>2]=HEAP32[$p2+4>>2]|0;
 $174 = $0;
 $175 = ((($174)) + 8|0);
 ;HEAP32[$175>>2]=HEAP32[$p2>>2]|0;HEAP32[$175+4>>2]=HEAP32[$p2+4>>2]|0;
 $176 = $0;
 $177 = ((($176)) + 16|0);
 HEAPF32[$177>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN9b2SimplexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2SimplexVertexC2Ev($1);
 $2 = ((($1)) + 36|0);
 __ZN15b2SimplexVertexC2Ev($2);
 $3 = ((($1)) + 72|0);
 __ZN15b2SimplexVertexC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN15b2SimplexVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = ((($1)) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this,$cache,$proxyA,$transformA,$proxyB,$transformB) {
 $this = $this|0;
 $cache = $cache|0;
 $proxyA = $proxyA|0;
 $transformA = $transformA|0;
 $proxyB = $proxyB|0;
 $transformB = $transformB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $metric1 = 0.0, $metric2 = 0.0, $or$cond = 0, $v = 0, $v1 = 0, $vertices = 0, $wALocal = 0, $wALocal2 = 0, $wBLocal = 0;
 var $wBLocal3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wALocal = sp + 88|0;
 $wBLocal = sp + 80|0;
 $6 = sp + 72|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $wALocal2 = sp + 32|0;
 $wBLocal3 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $0 = $this;
 $1 = $cache;
 $2 = $proxyA;
 $3 = $transformA;
 $4 = $proxyB;
 $5 = $transformB;
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)<=(3);
 if (!($17)) {
  ___assert_fail((10275|0),(10191|0),102,(10293|0));
  // unreachable;
 }
 $18 = $1;
 $19 = ((($18)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ((($12)) + 108|0);
 HEAP32[$22>>2] = $21;
 $vertices = $12;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ((($12)) + 108|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $vertices;
  $28 = $i;
  $29 = (($27) + (($28*36)|0)|0);
  $v = $29;
  $30 = $i;
  $31 = $1;
  $32 = ((($31)) + 6|0);
  $33 = (($32) + ($30)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $v;
  $37 = ((($36)) + 28|0);
  HEAP32[$37>>2] = $35;
  $38 = $i;
  $39 = $1;
  $40 = ((($39)) + 9|0);
  $41 = (($40) + ($38)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $v;
  $45 = ((($44)) + 32|0);
  HEAP32[$45>>2] = $43;
  $46 = $2;
  $47 = $v;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (__ZNK15b2DistanceProxy9GetVertexEi($46,$49)|0);
  ;HEAP32[$wALocal>>2]=HEAP32[$50>>2]|0;HEAP32[$wALocal+4>>2]=HEAP32[$50+4>>2]|0;
  $51 = $4;
  $52 = $v;
  $53 = ((($52)) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$54)|0);
  ;HEAP32[$wBLocal>>2]=HEAP32[$55>>2]|0;HEAP32[$wBLocal+4>>2]=HEAP32[$55+4>>2]|0;
  $56 = $v;
  $57 = $3;
  __Z5b2MulRK11b2TransformRK6b2Vec2($6,$57,$wALocal);
  ;HEAP32[$56>>2]=HEAP32[$6>>2]|0;HEAP32[$56+4>>2]=HEAP32[$6+4>>2]|0;
  $58 = $v;
  $59 = ((($58)) + 8|0);
  $60 = $5;
  __Z5b2MulRK11b2TransformRK6b2Vec2($7,$60,$wBLocal);
  ;HEAP32[$59>>2]=HEAP32[$7>>2]|0;HEAP32[$59+4>>2]=HEAP32[$7+4>>2]|0;
  $61 = $v;
  $62 = ((($61)) + 16|0);
  $63 = $v;
  $64 = ((($63)) + 8|0);
  $65 = $v;
  __ZmiRK6b2Vec2S1_($8,$64,$65);
  ;HEAP32[$62>>2]=HEAP32[$8>>2]|0;HEAP32[$62+4>>2]=HEAP32[$8+4>>2]|0;
  $66 = $v;
  $67 = ((($66)) + 24|0);
  HEAPF32[$67>>2] = 0.0;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = ((($12)) + 108|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)>(1);
 do {
  if ($72) {
   $73 = $1;
   $74 = +HEAPF32[$73>>2];
   $metric1 = $74;
   $75 = (+__ZNK9b2Simplex9GetMetricEv($12));
   $metric2 = $75;
   $76 = $metric2;
   $77 = $metric1;
   $78 = 0.5 * $77;
   $79 = $76 < $78;
   if (!($79)) {
    $80 = $metric1;
    $81 = 2.0 * $80;
    $82 = $metric2;
    $83 = $81 < $82;
    $84 = $metric2;
    $85 = $84 < 1.1920928955078125E-7;
    $or$cond = $83 | $85;
    if (!($or$cond)) {
     break;
    }
   }
   $86 = ((($12)) + 108|0);
   HEAP32[$86>>2] = 0;
  }
 } while(0);
 $87 = ((($12)) + 108|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $vertices;
 $v1 = $90;
 $91 = $v1;
 $92 = ((($91)) + 28|0);
 HEAP32[$92>>2] = 0;
 $93 = $v1;
 $94 = ((($93)) + 32|0);
 HEAP32[$94>>2] = 0;
 $95 = $2;
 $96 = (__ZNK15b2DistanceProxy9GetVertexEi($95,0)|0);
 ;HEAP32[$wALocal2>>2]=HEAP32[$96>>2]|0;HEAP32[$wALocal2+4>>2]=HEAP32[$96+4>>2]|0;
 $97 = $4;
 $98 = (__ZNK15b2DistanceProxy9GetVertexEi($97,0)|0);
 ;HEAP32[$wBLocal3>>2]=HEAP32[$98>>2]|0;HEAP32[$wBLocal3+4>>2]=HEAP32[$98+4>>2]|0;
 $99 = $v1;
 $100 = $3;
 __Z5b2MulRK11b2TransformRK6b2Vec2($9,$100,$wALocal2);
 ;HEAP32[$99>>2]=HEAP32[$9>>2]|0;HEAP32[$99+4>>2]=HEAP32[$9+4>>2]|0;
 $101 = $v1;
 $102 = ((($101)) + 8|0);
 $103 = $5;
 __Z5b2MulRK11b2TransformRK6b2Vec2($10,$103,$wBLocal3);
 ;HEAP32[$102>>2]=HEAP32[$10>>2]|0;HEAP32[$102+4>>2]=HEAP32[$10+4>>2]|0;
 $104 = $v1;
 $105 = ((($104)) + 16|0);
 $106 = $v1;
 $107 = ((($106)) + 8|0);
 $108 = $v1;
 __ZmiRK6b2Vec2S1_($11,$107,$108);
 ;HEAP32[$105>>2]=HEAP32[$11>>2]|0;HEAP32[$105+4>>2]=HEAP32[$11+4>>2]|0;
 $109 = ((($12)) + 108|0);
 HEAP32[$109>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK15b2DistanceProxy9GetVertexEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if ($4) {
  $5 = $1;
  $6 = ((($2)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = ((($2)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9<<3)|0);
   STACKTOP = sp;return ($12|0);
  }
 }
 ___assert_fail((10303|0),(10333|0),103,(10411|0));
 // unreachable;
 return (0)|0;
}
function __ZNK9b2Simplex9GetMetricEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp;
 $1 = $this;
 $4 = $1;
 $5 = ((($4)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  ___assert_fail((29532|0),(10191|0),246,(10421|0));
  // unreachable;
  break;
 }
 case 1:  {
  $0 = 0.0;
  $18 = $0;
  STACKTOP = sp;return (+$18);
  break;
 }
 case 2:  {
  $7 = ((($4)) + 16|0);
  $8 = ((($4)) + 36|0);
  $9 = ((($8)) + 16|0);
  $10 = (+__Z10b2DistanceRK6b2Vec2S1_($7,$9));
  $0 = $10;
  $18 = $0;
  STACKTOP = sp;return (+$18);
  break;
 }
 case 3:  {
  $11 = ((($4)) + 36|0);
  $12 = ((($11)) + 16|0);
  $13 = ((($4)) + 16|0);
  __ZmiRK6b2Vec2S1_($2,$12,$13);
  $14 = ((($4)) + 72|0);
  $15 = ((($14)) + 16|0);
  $16 = ((($4)) + 16|0);
  __ZmiRK6b2Vec2S1_($3,$15,$16);
  $17 = (+__Z7b2CrossRK6b2Vec2S1_($2,$3));
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return (+$18);
  break;
 }
 default: {
  ___assert_fail((29532|0),(10191|0),259,(10421|0));
  // unreachable;
 }
 }
 return +(0.0);
}
function __Z10b2DistanceRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c,$2,$3);
 $4 = (+__ZNK6b2Vec26LengthEv($c));
 STACKTOP = sp;return (+$4);
}
function __ZNK9b2Simplex15GetClosestPointEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 0:  {
  ___assert_fail((29532|0),(10191|0),194,(10431|0));
  // unreachable;
  break;
 }
 case 1:  {
  $6 = ((($3)) + 16|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$6>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $7 = ((($3)) + 24|0);
  $8 = +HEAPF32[$7>>2];
  $9 = ((($3)) + 16|0);
  __ZmlfRK6b2Vec2($1,$8,$9);
  $10 = ((($3)) + 36|0);
  $11 = ((($10)) + 24|0);
  $12 = +HEAPF32[$11>>2];
  $13 = ((($3)) + 36|0);
  $14 = ((($13)) + 16|0);
  __ZmlfRK6b2Vec2($2,$12,$14);
  __ZplRK6b2Vec2S1_($agg$result,$1,$2);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  ;HEAP32[$agg$result>>2]=HEAP32[31176>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[31176+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((29532|0),(10191|0),207,(10431|0));
  // unreachable;
 }
 }
}
function __ZNK6b2Vec213LengthSquaredEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($1)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZNK9b2Simplex18GetSearchDirectionEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e12 = 0, $sgn = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e12 = sp + 16|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 1:  {
  $5 = ((($2)) + 16|0);
  __ZNK6b2Vec2ngEv($agg$result,$5);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $6 = ((($2)) + 36|0);
  $7 = ((($6)) + 16|0);
  $8 = ((($2)) + 16|0);
  __ZmiRK6b2Vec2S1_($e12,$7,$8);
  $9 = ((($2)) + 16|0);
  __ZNK6b2Vec2ngEv($1,$9);
  $10 = (+__Z7b2CrossRK6b2Vec2S1_($e12,$1));
  $sgn = $10;
  $11 = $sgn;
  $12 = $11 > 0.0;
  if ($12) {
   __Z7b2CrossfRK6b2Vec2($agg$result,1.0,$e12);
   STACKTOP = sp;return;
  } else {
   __Z7b2CrossRK6b2Vec2f($agg$result,$e12,1.0);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  ___assert_fail((29532|0),(10191|0),184,(10458|0));
  // unreachable;
 }
 }
}
function __Z7b2CrossfRK6b2Vec2($agg$result,$s,$a) {
 $agg$result = $agg$result|0;
 $s = +$s;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = -$2;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result,$7,$11);
 STACKTOP = sp;return;
}
function __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($this,$d) {
 $this = $this|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $bestIndex = 0, $bestValue = 0.0, $i = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $bestIndex = 0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (+__Z5b2DotRK6b2Vec2S1_($4,$5));
 $bestValue = $6;
 $i = 1;
 while(1) {
  $7 = $i;
  $8 = ((($2)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = ((($2)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<3)|0);
  $15 = $1;
  $16 = (+__Z5b2DotRK6b2Vec2S1_($14,$15));
  $value = $16;
  $17 = $value;
  $18 = $bestValue;
  $19 = $17 > $18;
  if ($19) {
   $20 = $i;
   $bestIndex = $20;
   $21 = $value;
   $bestValue = $21;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $bestIndex;
 STACKTOP = sp;return ($24|0);
}
function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this,$pA,$pB) {
 $this = $this|0;
 $pA = $pA|0;
 $pB = $pB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 40|0;
 $9 = sp + 32|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp;
 $0 = $this;
 $1 = $pA;
 $2 = $pB;
 $14 = $0;
 $15 = ((($14)) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 switch ($16|0) {
 case 0:  {
  ___assert_fail((29532|0),(10191|0),217,(10477|0));
  // unreachable;
  break;
 }
 case 1:  {
  $17 = $1;
  ;HEAP32[$17>>2]=HEAP32[$14>>2]|0;HEAP32[$17+4>>2]=HEAP32[$14+4>>2]|0;
  $18 = $2;
  $19 = ((($14)) + 8|0);
  ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $20 = $1;
  $21 = ((($14)) + 24|0);
  $22 = +HEAPF32[$21>>2];
  __ZmlfRK6b2Vec2($4,$22,$14);
  $23 = ((($14)) + 36|0);
  $24 = ((($23)) + 24|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($14)) + 36|0);
  __ZmlfRK6b2Vec2($5,$25,$26);
  __ZplRK6b2Vec2S1_($3,$4,$5);
  ;HEAP32[$20>>2]=HEAP32[$3>>2]|0;HEAP32[$20+4>>2]=HEAP32[$3+4>>2]|0;
  $27 = $2;
  $28 = ((($14)) + 24|0);
  $29 = +HEAPF32[$28>>2];
  $30 = ((($14)) + 8|0);
  __ZmlfRK6b2Vec2($7,$29,$30);
  $31 = ((($14)) + 36|0);
  $32 = ((($31)) + 24|0);
  $33 = +HEAPF32[$32>>2];
  $34 = ((($14)) + 36|0);
  $35 = ((($34)) + 8|0);
  __ZmlfRK6b2Vec2($8,$33,$35);
  __ZplRK6b2Vec2S1_($6,$7,$8);
  ;HEAP32[$27>>2]=HEAP32[$6>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $36 = $1;
  $37 = ((($14)) + 24|0);
  $38 = +HEAPF32[$37>>2];
  __ZmlfRK6b2Vec2($11,$38,$14);
  $39 = ((($14)) + 36|0);
  $40 = ((($39)) + 24|0);
  $41 = +HEAPF32[$40>>2];
  $42 = ((($14)) + 36|0);
  __ZmlfRK6b2Vec2($12,$41,$42);
  __ZplRK6b2Vec2S1_($10,$11,$12);
  $43 = ((($14)) + 72|0);
  $44 = ((($43)) + 24|0);
  $45 = +HEAPF32[$44>>2];
  $46 = ((($14)) + 72|0);
  __ZmlfRK6b2Vec2($13,$45,$46);
  __ZplRK6b2Vec2S1_($9,$10,$13);
  ;HEAP32[$36>>2]=HEAP32[$9>>2]|0;HEAP32[$36+4>>2]=HEAP32[$9+4>>2]|0;
  $47 = $2;
  $48 = $1;
  ;HEAP32[$47>>2]=HEAP32[$48>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((29532|0),(10191|0),236,(10477|0));
  // unreachable;
 }
 }
}
function __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($this,$cache) {
 $this = $this|0;
 $cache = $cache|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cache;
 $2 = $0;
 $3 = (+__ZNK9b2Simplex9GetMetricEv($2));
 $4 = $1;
 HEAPF32[$4>>2] = $3;
 $5 = ((($2)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP16[$9>>1] = $7;
 $vertices = $2;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ((($2)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $vertices;
  $16 = (($15) + (($14*36)|0)|0);
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18&255;
  $20 = $i;
  $21 = $1;
  $22 = ((($21)) + 6|0);
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = $i;
  $25 = $vertices;
  $26 = (($25) + (($24*36)|0)|0);
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&255;
  $30 = $i;
  $31 = $1;
  $32 = ((($31)) + 9|0);
  $33 = (($32) + ($30)|0);
  HEAP8[$33>>0] = $29;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 STACKTOP = sp;return;
}
function __ZN6b2Vec2pLERKS_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($2)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN6b2Vec2mIERKS_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 - $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($2)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTreeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 16;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5*36)|0;
 $7 = (__Z7b2Alloci($6)|0);
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12*36)|0;
 _memset(($10|0),0,($13|0))|0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ((($1)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 1)|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $21 = $i;
  $22 = ((($1)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($21*36)|0)|0);
  $25 = ((($24)) + 20|0);
  HEAP32[$25>>2] = $20;
  $26 = $i;
  $27 = ((($1)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($26*36)|0)|0);
  $30 = ((($29)) + 32|0);
  HEAP32[$30>>2] = -1;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = ((($1)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - 1)|0;
 $36 = ((($1)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + (($35*36)|0)|0);
 $39 = ((($38)) + 20|0);
 HEAP32[$39>>2] = -1;
 $40 = ((($1)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) - 1)|0;
 $43 = ((($1)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + (($42*36)|0)|0);
 $46 = ((($45)) + 32|0);
 HEAP32[$46>>2] = -1;
 $47 = ((($1)) + 16|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($1)) + 20|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($1)) + 24|0);
 HEAP32[$49>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTreeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __Z6b2FreePv($3);
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTree12AllocateNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $nodeId = 0, $oldNodes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 if ($4) {
  $5 = ((($1)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if (!($9)) {
   ___assert_fail((10494|0),(10524|0),61,(10607|0));
   // unreachable;
  }
  $10 = ((($1)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $oldNodes = $11;
  $12 = ((($1)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<1;
  HEAP32[$12>>2] = $14;
  $15 = ((($1)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16*36)|0;
  $18 = (__Z7b2Alloci($17)|0);
  $19 = ((($1)) + 4|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($1)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $oldNodes;
  $23 = ((($1)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24*36)|0;
  _memcpy(($21|0),($22|0),($25|0))|0;
  $26 = $oldNodes;
  __Z6b2FreePv($26);
  $27 = ((($1)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $i = $28;
  while(1) {
   $29 = $i;
   $30 = ((($1)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) - 1)|0;
   $33 = ($29|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = (($34) + 1)|0;
   $36 = $i;
   $37 = ((($1)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + (($36*36)|0)|0);
   $40 = ((($39)) + 20|0);
   HEAP32[$40>>2] = $35;
   $41 = $i;
   $42 = ((($1)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + (($41*36)|0)|0);
   $45 = ((($44)) + 32|0);
   HEAP32[$45>>2] = -1;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  $48 = ((($1)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) - 1)|0;
  $51 = ((($1)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($50*36)|0)|0);
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = -1;
  $55 = ((($1)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = ((($1)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($57*36)|0)|0);
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = -1;
  $62 = ((($1)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($1)) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = ((($1)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $nodeId = $66;
 $67 = $nodeId;
 $68 = ((($1)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + (($67*36)|0)|0);
 $71 = ((($70)) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($1)) + 16|0);
 HEAP32[$73>>2] = $72;
 $74 = $nodeId;
 $75 = ((($1)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + (($74*36)|0)|0);
 $78 = ((($77)) + 20|0);
 HEAP32[$78>>2] = -1;
 $79 = $nodeId;
 $80 = ((($1)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + (($79*36)|0)|0);
 $83 = ((($82)) + 24|0);
 HEAP32[$83>>2] = -1;
 $84 = $nodeId;
 $85 = ((($1)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + (($84*36)|0)|0);
 $88 = ((($87)) + 28|0);
 HEAP32[$88>>2] = -1;
 $89 = $nodeId;
 $90 = ((($1)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + (($89*36)|0)|0);
 $93 = ((($92)) + 32|0);
 HEAP32[$93>>2] = 0;
 $94 = $nodeId;
 $95 = ((($1)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + (($94*36)|0)|0);
 $98 = ((($97)) + 16|0);
 HEAP32[$98>>2] = 0;
 $99 = ((($1)) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[$99>>2] = $101;
 $102 = $nodeId;
 STACKTOP = sp;return ($102|0);
}
function __ZN13b2DynamicTree8FreeNodeEi($this,$nodeId) {
 $this = $this|0;
 $nodeId = $nodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nodeId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if (!($4)) {
  ___assert_fail((10620|0),(10524|0),97,(10659|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  ___assert_fail((10620|0),(10524|0),97,(10659|0));
  // unreachable;
 }
 $9 = ((($2)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0)<($10|0);
 if ($11) {
  $12 = ((($2)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($2)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($14*36)|0)|0);
  $18 = ((($17)) + 20|0);
  HEAP32[$18>>2] = $13;
  $19 = $1;
  $20 = ((($2)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($19*36)|0)|0);
  $23 = ((($22)) + 32|0);
  HEAP32[$23>>2] = -1;
  $24 = $1;
  $25 = ((($2)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = ((($2)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10668|0),(10524|0),98,(10659|0));
  // unreachable;
 }
}
function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this,$aabb,$userData) {
 $this = $this|0;
 $aabb = $aabb|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $5 = $0;
 $6 = (__ZN13b2DynamicTree12AllocateNodeEv($5)|0);
 $proxyId = $6;
 __ZN6b2Vec2C2Eff($r,0.10000000149011612,0.10000000149011612);
 $7 = $proxyId;
 $8 = ((($5)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($7*36)|0)|0);
 $11 = $1;
 __ZmiRK6b2Vec2S1_($3,$11,$r);
 ;HEAP32[$10>>2]=HEAP32[$3>>2]|0;HEAP32[$10+4>>2]=HEAP32[$3+4>>2]|0;
 $12 = $proxyId;
 $13 = ((($5)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($12*36)|0)|0);
 $16 = ((($15)) + 8|0);
 $17 = $1;
 $18 = ((($17)) + 8|0);
 __ZplRK6b2Vec2S1_($4,$18,$r);
 ;HEAP32[$16>>2]=HEAP32[$4>>2]|0;HEAP32[$16+4>>2]=HEAP32[$4+4>>2]|0;
 $19 = $2;
 $20 = $proxyId;
 $21 = ((($5)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + (($20*36)|0)|0);
 $24 = ((($23)) + 16|0);
 HEAP32[$24>>2] = $19;
 $25 = $proxyId;
 $26 = ((($5)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + (($25*36)|0)|0);
 $29 = ((($28)) + 32|0);
 HEAP32[$29>>2] = 0;
 $30 = $proxyId;
 __ZN13b2DynamicTree10InsertLeafEi($5,$30);
 $31 = $proxyId;
 STACKTOP = sp;return ($31|0);
}
function __ZN13b2DynamicTree10InsertLeafEi($this,$leaf) {
 $this = $this|0;
 $leaf = $leaf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aabb = 0, $aabb1 = 0, $aabb2 = 0, $aabb3 = 0, $area = 0.0, $child1 = 0, $child16 = 0, $child2 = 0, $child27 = 0, $combinedAABB = 0, $combinedArea = 0.0, $cost = 0.0, $cost1 = 0.0, $cost2 = 0.0;
 var $index = 0, $inheritanceCost = 0.0, $leafAABB = 0, $newArea = 0.0, $newArea5 = 0.0, $newParent = 0, $oldArea = 0.0, $oldArea4 = 0.0, $oldParent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $leafAABB = sp + 160|0;
 $combinedAABB = sp + 128|0;
 $aabb = sp + 96|0;
 $aabb1 = sp + 80|0;
 $aabb2 = sp + 48|0;
 $aabb3 = sp + 32|0;
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(-1);
 $8 = $1;
 if ($7) {
  HEAP32[$2>>2] = $8;
  $9 = HEAP32[$2>>2]|0;
  $10 = ((($2)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($9*36)|0)|0);
  $13 = ((($12)) + 20|0);
  HEAP32[$13>>2] = -1;
  STACKTOP = sp;return;
 }
 $14 = ((($2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + (($8*36)|0)|0);
 ;HEAP32[$leafAABB>>2]=HEAP32[$16>>2]|0;HEAP32[$leafAABB+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$leafAABB+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$leafAABB+12>>2]=HEAP32[$16+12>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $index = $17;
 while(1) {
  $18 = $index;
  $19 = ((($2)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + (($18*36)|0)|0);
  $22 = (__ZNK10b2TreeNode6IsLeafEv($21)|0);
  $23 = $22&1;
  $24 = ($23|0)==(0);
  if (!($24)) {
   break;
  }
  $25 = $index;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($25*36)|0)|0);
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $child1 = $30;
  $31 = $index;
  $32 = ((($2)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($31*36)|0)|0);
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $child2 = $36;
  $37 = $index;
  $38 = ((($2)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($37*36)|0)|0);
  $41 = (+__ZNK6b2AABB12GetPerimeterEv($40));
  $area = $41;
  __ZN6b2AABBC2Ev($combinedAABB);
  $42 = $index;
  $43 = ((($2)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + (($42*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($combinedAABB,$45,$leafAABB);
  $46 = (+__ZNK6b2AABB12GetPerimeterEv($combinedAABB));
  $combinedArea = $46;
  $47 = $combinedArea;
  $48 = 2.0 * $47;
  $cost = $48;
  $49 = $combinedArea;
  $50 = $area;
  $51 = $49 - $50;
  $52 = 2.0 * $51;
  $inheritanceCost = $52;
  $53 = $child1;
  $54 = ((($2)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + (($53*36)|0)|0);
  $57 = (__ZNK10b2TreeNode6IsLeafEv($56)|0);
  if ($57) {
   __ZN6b2AABBC2Ev($aabb);
   $58 = $child1;
   $59 = ((($2)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + (($58*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb,$leafAABB,$61);
   $62 = (+__ZNK6b2AABB12GetPerimeterEv($aabb));
   $63 = $inheritanceCost;
   $64 = $62 + $63;
   $cost1 = $64;
  } else {
   __ZN6b2AABBC2Ev($aabb1);
   $65 = $child1;
   $66 = ((($2)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + (($65*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb1,$leafAABB,$68);
   $69 = $child1;
   $70 = ((($2)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + (($69*36)|0)|0);
   $73 = (+__ZNK6b2AABB12GetPerimeterEv($72));
   $oldArea = $73;
   $74 = (+__ZNK6b2AABB12GetPerimeterEv($aabb1));
   $newArea = $74;
   $75 = $newArea;
   $76 = $oldArea;
   $77 = $75 - $76;
   $78 = $inheritanceCost;
   $79 = $77 + $78;
   $cost1 = $79;
  }
  $80 = $child2;
  $81 = ((($2)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + (($80*36)|0)|0);
  $84 = (__ZNK10b2TreeNode6IsLeafEv($83)|0);
  if ($84) {
   __ZN6b2AABBC2Ev($aabb2);
   $85 = $child2;
   $86 = ((($2)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) + (($85*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb2,$leafAABB,$88);
   $89 = (+__ZNK6b2AABB12GetPerimeterEv($aabb2));
   $90 = $inheritanceCost;
   $91 = $89 + $90;
   $cost2 = $91;
  } else {
   __ZN6b2AABBC2Ev($aabb3);
   $92 = $child2;
   $93 = ((($2)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + (($92*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb3,$leafAABB,$95);
   $96 = $child2;
   $97 = ((($2)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + (($96*36)|0)|0);
   $100 = (+__ZNK6b2AABB12GetPerimeterEv($99));
   $oldArea4 = $100;
   $101 = (+__ZNK6b2AABB12GetPerimeterEv($aabb3));
   $newArea5 = $101;
   $102 = $newArea5;
   $103 = $oldArea4;
   $104 = $102 - $103;
   $105 = $inheritanceCost;
   $106 = $104 + $105;
   $cost2 = $106;
  }
  $107 = $cost;
  $108 = $cost1;
  $109 = $107 < $108;
  if ($109) {
   $110 = $cost;
   $111 = $cost2;
   $112 = $110 < $111;
   if ($112) {
    break;
   }
  }
  $113 = $cost1;
  $114 = $cost2;
  $115 = $113 < $114;
  if ($115) {
   $116 = $child1;
   $index = $116;
   continue;
  } else {
   $117 = $child2;
   $index = $117;
   continue;
  }
 }
 $118 = $index;
 $sibling = $118;
 $119 = $sibling;
 $120 = ((($2)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + (($119*36)|0)|0);
 $123 = ((($122)) + 20|0);
 $124 = HEAP32[$123>>2]|0;
 $oldParent = $124;
 $125 = (__ZN13b2DynamicTree12AllocateNodeEv($2)|0);
 $newParent = $125;
 $126 = $oldParent;
 $127 = $newParent;
 $128 = ((($2)) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + (($127*36)|0)|0);
 $131 = ((($130)) + 20|0);
 HEAP32[$131>>2] = $126;
 $132 = $newParent;
 $133 = ((($2)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (($134) + (($132*36)|0)|0);
 $136 = ((($135)) + 16|0);
 HEAP32[$136>>2] = 0;
 $137 = $newParent;
 $138 = ((($2)) + 4|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + (($137*36)|0)|0);
 $141 = $sibling;
 $142 = ((($2)) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + (($141*36)|0)|0);
 __ZN6b2AABB7CombineERKS_S1_($140,$leafAABB,$144);
 $145 = $sibling;
 $146 = ((($2)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) + (($145*36)|0)|0);
 $149 = ((($148)) + 32|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (($150) + 1)|0;
 $152 = $newParent;
 $153 = ((($2)) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + (($152*36)|0)|0);
 $156 = ((($155)) + 32|0);
 HEAP32[$156>>2] = $151;
 $157 = $oldParent;
 $158 = ($157|0)!=(-1);
 if ($158) {
  $159 = $oldParent;
  $160 = ((($2)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + (($159*36)|0)|0);
  $163 = ((($162)) + 24|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $sibling;
  $166 = ($164|0)==($165|0);
  $167 = $newParent;
  $168 = $oldParent;
  $169 = ((($2)) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($168*36)|0)|0);
  if ($166) {
   $172 = ((($171)) + 24|0);
   HEAP32[$172>>2] = $167;
  } else {
   $173 = ((($171)) + 28|0);
   HEAP32[$173>>2] = $167;
  }
  $174 = $sibling;
  $175 = $newParent;
  $176 = ((($2)) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + (($175*36)|0)|0);
  $179 = ((($178)) + 24|0);
  HEAP32[$179>>2] = $174;
  $180 = $1;
  $181 = $newParent;
  $182 = ((($2)) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + (($181*36)|0)|0);
  $185 = ((($184)) + 28|0);
  HEAP32[$185>>2] = $180;
  $186 = $newParent;
  $187 = $sibling;
  $188 = ((($2)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($187*36)|0)|0);
  $191 = ((($190)) + 20|0);
  HEAP32[$191>>2] = $186;
  $192 = $newParent;
  $193 = $1;
  $194 = ((($2)) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($193*36)|0)|0);
  $197 = ((($196)) + 20|0);
  HEAP32[$197>>2] = $192;
 } else {
  $198 = $sibling;
  $199 = $newParent;
  $200 = ((($2)) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + (($199*36)|0)|0);
  $203 = ((($202)) + 24|0);
  HEAP32[$203>>2] = $198;
  $204 = $1;
  $205 = $newParent;
  $206 = ((($2)) + 4|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + (($205*36)|0)|0);
  $209 = ((($208)) + 28|0);
  HEAP32[$209>>2] = $204;
  $210 = $newParent;
  $211 = $sibling;
  $212 = ((($2)) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($211*36)|0)|0);
  $215 = ((($214)) + 20|0);
  HEAP32[$215>>2] = $210;
  $216 = $newParent;
  $217 = $1;
  $218 = ((($2)) + 4|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + (($217*36)|0)|0);
  $221 = ((($220)) + 20|0);
  HEAP32[$221>>2] = $216;
  $222 = $newParent;
  HEAP32[$2>>2] = $222;
 }
 $223 = $1;
 $224 = ((($2)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) + (($223*36)|0)|0);
 $227 = ((($226)) + 20|0);
 $228 = HEAP32[$227>>2]|0;
 $index = $228;
 while(1) {
  $229 = $index;
  $230 = ($229|0)!=(-1);
  if (!($230)) {
   label = 29;
   break;
  }
  $231 = $index;
  $232 = (__ZN13b2DynamicTree7BalanceEi($2,$231)|0);
  $index = $232;
  $233 = $index;
  $234 = ((($2)) + 4|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + (($233*36)|0)|0);
  $237 = ((($236)) + 24|0);
  $238 = HEAP32[$237>>2]|0;
  $child16 = $238;
  $239 = $index;
  $240 = ((($2)) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($241) + (($239*36)|0)|0);
  $243 = ((($242)) + 28|0);
  $244 = HEAP32[$243>>2]|0;
  $child27 = $244;
  $245 = $child16;
  $246 = ($245|0)!=(-1);
  if (!($246)) {
   label = 25;
   break;
  }
  $247 = $child27;
  $248 = ($247|0)!=(-1);
  if (!($248)) {
   label = 27;
   break;
  }
  $249 = $child16;
  $250 = ((($2)) + 4|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = (($251) + (($249*36)|0)|0);
  $253 = ((($252)) + 32|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $child27;
  $256 = ((($2)) + 4|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + (($255*36)|0)|0);
  $259 = ((($258)) + 32|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (__Z5b2MaxIiET_S0_S0_($254,$260)|0);
  $262 = (1 + ($261))|0;
  $263 = $index;
  $264 = ((($2)) + 4|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + (($263*36)|0)|0);
  $267 = ((($266)) + 32|0);
  HEAP32[$267>>2] = $262;
  $268 = $index;
  $269 = ((($2)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($270) + (($268*36)|0)|0);
  $272 = $child16;
  $273 = ((($2)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + (($272*36)|0)|0);
  $276 = $child27;
  $277 = ((($2)) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = (($278) + (($276*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($271,$275,$279);
  $280 = $index;
  $281 = ((($2)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = (($282) + (($280*36)|0)|0);
  $284 = ((($283)) + 20|0);
  $285 = HEAP32[$284>>2]|0;
  $index = $285;
 }
 if ((label|0) == 25) {
  ___assert_fail((10953|0),(10524|0),307,(10968|0));
  // unreachable;
 }
 else if ((label|0) == 27) {
  ___assert_fail((10979|0),(10524|0),308,(10968|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  STACKTOP = sp;return;
 }
}
function __ZNK10b2TreeNode6IsLeafEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 STACKTOP = sp;return ($4|0);
}
function __ZNK6b2AABB12GetPerimeterEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $wx = 0.0, $wy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[$1>>2];
 $5 = $3 - $4;
 $wx = $5;
 $6 = ((($1)) + 8|0);
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($1)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 - $10;
 $wy = $11;
 $12 = $wx;
 $13 = $wy;
 $14 = $12 + $13;
 $15 = 2.0 * $14;
 STACKTOP = sp;return (+$15);
}
function __ZN6b2AABBC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6b2AABB7CombineERKS_S1_($this,$aabb1,$aabb2) {
 $this = $this|0;
 $aabb1 = $aabb1|0;
 $aabb2 = $aabb2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb1;
 $2 = $aabb2;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __Z5b2MinRK6b2Vec2S1_($3,$6,$7);
 ;HEAP32[$5>>2]=HEAP32[$3>>2]|0;HEAP32[$5+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = $2;
 $12 = ((($11)) + 8|0);
 __Z5b2MaxRK6b2Vec2S1_($4,$10,$12);
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function __Z5b2MinRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = (+__Z5b2MinIfET_S0_S0_($3,$5));
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (+__Z5b2MinIfET_S0_S0_($9,$12));
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2MaxRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = (+__Z5b2MaxIfET_S0_S0_($3,$5));
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (+__Z5b2MaxIfET_S0_S0_($9,$12));
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2MaxIfET_S0_S0_($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return (+$7);
}
function __ZN13b2DynamicTree7BalanceEi($this,$iA) {
 $this = $this|0;
 $iA = $iA|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, $F = 0, $G = 0, $balance = 0, $iB = 0, $iC = 0, $iD = 0, $iE = 0;
 var $iF = 0, $iG = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $iA;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(-1);
 if (!($5)) {
  ___assert_fail((10684|0),(10524|0),382,(10695|0));
  // unreachable;
 }
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (($7) + (($8*36)|0)|0);
 $A = $9;
 $10 = $A;
 $11 = (__ZNK10b2TreeNode6IsLeafEv($10)|0);
 if (!($11)) {
  $12 = $A;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(2);
  if (!($15)) {
   $17 = $A;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $iB = $19;
   $20 = $A;
   $21 = ((($20)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $iC = $22;
   $23 = $iB;
   $24 = (0)<=($23|0);
   if (!($24)) {
    ___assert_fail((10703|0),(10524|0),392,(10695|0));
    // unreachable;
   }
   $25 = $iB;
   $26 = ((($3)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)<($27|0);
   if (!($28)) {
    ___assert_fail((10703|0),(10524|0),392,(10695|0));
    // unreachable;
   }
   $29 = $iC;
   $30 = (0)<=($29|0);
   if (!($30)) {
    ___assert_fail((10734|0),(10524|0),393,(10695|0));
    // unreachable;
   }
   $31 = $iC;
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)<($33|0);
   if (!($34)) {
    ___assert_fail((10734|0),(10524|0),393,(10695|0));
    // unreachable;
   }
   $35 = ((($3)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $iB;
   $38 = (($36) + (($37*36)|0)|0);
   $B = $38;
   $39 = ((($3)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $iC;
   $42 = (($40) + (($41*36)|0)|0);
   $C = $42;
   $43 = $C;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $B;
   $47 = ((($46)) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) - ($48))|0;
   $balance = $49;
   $50 = $balance;
   $51 = ($50|0)>(1);
   if ($51) {
    $52 = $C;
    $53 = ((($52)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $iF = $54;
    $55 = $C;
    $56 = ((($55)) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    $iG = $57;
    $58 = ((($3)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $iF;
    $61 = (($59) + (($60*36)|0)|0);
    $F = $61;
    $62 = ((($3)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $iG;
    $65 = (($63) + (($64*36)|0)|0);
    $G = $65;
    $66 = $iF;
    $67 = (0)<=($66|0);
    if (!($67)) {
     ___assert_fail((10765|0),(10524|0),407,(10695|0));
     // unreachable;
    }
    $68 = $iF;
    $69 = ((($3)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($68|0)<($70|0);
    if (!($71)) {
     ___assert_fail((10765|0),(10524|0),407,(10695|0));
     // unreachable;
    }
    $72 = $iG;
    $73 = (0)<=($72|0);
    if (!($73)) {
     ___assert_fail((10796|0),(10524|0),408,(10695|0));
     // unreachable;
    }
    $74 = $iG;
    $75 = ((($3)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($74|0)<($76|0);
    if (!($77)) {
     ___assert_fail((10796|0),(10524|0),408,(10695|0));
     // unreachable;
    }
    $78 = $2;
    $79 = $C;
    $80 = ((($79)) + 24|0);
    HEAP32[$80>>2] = $78;
    $81 = $A;
    $82 = ((($81)) + 20|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $C;
    $85 = ((($84)) + 20|0);
    HEAP32[$85>>2] = $83;
    $86 = $iC;
    $87 = $A;
    $88 = ((($87)) + 20|0);
    HEAP32[$88>>2] = $86;
    $89 = $C;
    $90 = ((($89)) + 20|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)!=(-1);
    do {
     if ($92) {
      $93 = $C;
      $94 = ((($93)) + 20|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($3)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (($97) + (($95*36)|0)|0);
      $99 = ((($98)) + 24|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $2;
      $102 = ($100|0)==($101|0);
      if ($102) {
       $103 = $iC;
       $104 = $C;
       $105 = ((($104)) + 20|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($3)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + (($106*36)|0)|0);
       $110 = ((($109)) + 24|0);
       HEAP32[$110>>2] = $103;
       break;
      }
      $111 = $C;
      $112 = ((($111)) + 20|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($3)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + (($113*36)|0)|0);
      $117 = ((($116)) + 28|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $2;
      $120 = ($118|0)==($119|0);
      if ($120) {
       $121 = $iC;
       $122 = $C;
       $123 = ((($122)) + 20|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ((($3)) + 4|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($126) + (($124*36)|0)|0);
       $128 = ((($127)) + 28|0);
       HEAP32[$128>>2] = $121;
       break;
      } else {
       ___assert_fail((10827|0),(10524|0),424,(10695|0));
       // unreachable;
      }
     } else {
      $129 = $iC;
      HEAP32[$3>>2] = $129;
     }
    } while(0);
    $130 = $F;
    $131 = ((($130)) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $G;
    $134 = ((($133)) + 32|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($132|0)>($135|0);
    if ($136) {
     $137 = $iF;
     $138 = $C;
     $139 = ((($138)) + 28|0);
     HEAP32[$139>>2] = $137;
     $140 = $iG;
     $141 = $A;
     $142 = ((($141)) + 28|0);
     HEAP32[$142>>2] = $140;
     $143 = $2;
     $144 = $G;
     $145 = ((($144)) + 20|0);
     HEAP32[$145>>2] = $143;
     $146 = $A;
     $147 = $B;
     $148 = $G;
     __ZN6b2AABB7CombineERKS_S1_($146,$147,$148);
     $149 = $C;
     $150 = $A;
     $151 = $F;
     __ZN6b2AABB7CombineERKS_S1_($149,$150,$151);
     $152 = $B;
     $153 = ((($152)) + 32|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $G;
     $156 = ((($155)) + 32|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (__Z5b2MaxIiET_S0_S0_($154,$157)|0);
     $159 = (1 + ($158))|0;
     $160 = $A;
     $161 = ((($160)) + 32|0);
     HEAP32[$161>>2] = $159;
     $162 = $A;
     $163 = ((($162)) + 32|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $F;
     $166 = ((($165)) + 32|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (__Z5b2MaxIiET_S0_S0_($164,$167)|0);
     $169 = (1 + ($168))|0;
     $170 = $C;
     $171 = ((($170)) + 32|0);
     HEAP32[$171>>2] = $169;
    } else {
     $172 = $iG;
     $173 = $C;
     $174 = ((($173)) + 28|0);
     HEAP32[$174>>2] = $172;
     $175 = $iF;
     $176 = $A;
     $177 = ((($176)) + 28|0);
     HEAP32[$177>>2] = $175;
     $178 = $2;
     $179 = $F;
     $180 = ((($179)) + 20|0);
     HEAP32[$180>>2] = $178;
     $181 = $A;
     $182 = $B;
     $183 = $F;
     __ZN6b2AABB7CombineERKS_S1_($181,$182,$183);
     $184 = $C;
     $185 = $A;
     $186 = $G;
     __ZN6b2AABB7CombineERKS_S1_($184,$185,$186);
     $187 = $B;
     $188 = ((($187)) + 32|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $F;
     $191 = ((($190)) + 32|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (__Z5b2MaxIiET_S0_S0_($189,$192)|0);
     $194 = (1 + ($193))|0;
     $195 = $A;
     $196 = ((($195)) + 32|0);
     HEAP32[$196>>2] = $194;
     $197 = $A;
     $198 = ((($197)) + 32|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $G;
     $201 = ((($200)) + 32|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = (__Z5b2MaxIiET_S0_S0_($199,$202)|0);
     $204 = (1 + ($203))|0;
     $205 = $C;
     $206 = ((($205)) + 32|0);
     HEAP32[$206>>2] = $204;
    }
    $207 = $iC;
    $0 = $207;
    $367 = $0;
    STACKTOP = sp;return ($367|0);
   }
   $208 = $balance;
   $209 = ($208|0)<(-1);
   if (!($209)) {
    $366 = $2;
    $0 = $366;
    $367 = $0;
    STACKTOP = sp;return ($367|0);
   }
   $210 = $B;
   $211 = ((($210)) + 24|0);
   $212 = HEAP32[$211>>2]|0;
   $iD = $212;
   $213 = $B;
   $214 = ((($213)) + 28|0);
   $215 = HEAP32[$214>>2]|0;
   $iE = $215;
   $216 = ((($3)) + 4|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $iD;
   $219 = (($217) + (($218*36)|0)|0);
   $D = $219;
   $220 = ((($3)) + 4|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $iE;
   $223 = (($221) + (($222*36)|0)|0);
   $E = $223;
   $224 = $iD;
   $225 = (0)<=($224|0);
   if (!($225)) {
    ___assert_fail((10859|0),(10524|0),467,(10695|0));
    // unreachable;
   }
   $226 = $iD;
   $227 = ((($3)) + 12|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ($226|0)<($228|0);
   if (!($229)) {
    ___assert_fail((10859|0),(10524|0),467,(10695|0));
    // unreachable;
   }
   $230 = $iE;
   $231 = (0)<=($230|0);
   if (!($231)) {
    ___assert_fail((10890|0),(10524|0),468,(10695|0));
    // unreachable;
   }
   $232 = $iE;
   $233 = ((($3)) + 12|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($232|0)<($234|0);
   if (!($235)) {
    ___assert_fail((10890|0),(10524|0),468,(10695|0));
    // unreachable;
   }
   $236 = $2;
   $237 = $B;
   $238 = ((($237)) + 24|0);
   HEAP32[$238>>2] = $236;
   $239 = $A;
   $240 = ((($239)) + 20|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $B;
   $243 = ((($242)) + 20|0);
   HEAP32[$243>>2] = $241;
   $244 = $iB;
   $245 = $A;
   $246 = ((($245)) + 20|0);
   HEAP32[$246>>2] = $244;
   $247 = $B;
   $248 = ((($247)) + 20|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ($249|0)!=(-1);
   do {
    if ($250) {
     $251 = $B;
     $252 = ((($251)) + 20|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ((($3)) + 4|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = (($255) + (($253*36)|0)|0);
     $257 = ((($256)) + 24|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $2;
     $260 = ($258|0)==($259|0);
     if ($260) {
      $261 = $iB;
      $262 = $B;
      $263 = ((($262)) + 20|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ((($3)) + 4|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = (($266) + (($264*36)|0)|0);
      $268 = ((($267)) + 24|0);
      HEAP32[$268>>2] = $261;
      break;
     }
     $269 = $B;
     $270 = ((($269)) + 20|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ((($3)) + 4|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (($273) + (($271*36)|0)|0);
     $275 = ((($274)) + 28|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $2;
     $278 = ($276|0)==($277|0);
     if ($278) {
      $279 = $iB;
      $280 = $B;
      $281 = ((($280)) + 20|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ((($3)) + 4|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = (($284) + (($282*36)|0)|0);
      $286 = ((($285)) + 28|0);
      HEAP32[$286>>2] = $279;
      break;
     } else {
      ___assert_fail((10921|0),(10524|0),484,(10695|0));
      // unreachable;
     }
    } else {
     $287 = $iB;
     HEAP32[$3>>2] = $287;
    }
   } while(0);
   $288 = $D;
   $289 = ((($288)) + 32|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $E;
   $292 = ((($291)) + 32|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ($290|0)>($293|0);
   if ($294) {
    $295 = $iD;
    $296 = $B;
    $297 = ((($296)) + 28|0);
    HEAP32[$297>>2] = $295;
    $298 = $iE;
    $299 = $A;
    $300 = ((($299)) + 24|0);
    HEAP32[$300>>2] = $298;
    $301 = $2;
    $302 = $E;
    $303 = ((($302)) + 20|0);
    HEAP32[$303>>2] = $301;
    $304 = $A;
    $305 = $C;
    $306 = $E;
    __ZN6b2AABB7CombineERKS_S1_($304,$305,$306);
    $307 = $B;
    $308 = $A;
    $309 = $D;
    __ZN6b2AABB7CombineERKS_S1_($307,$308,$309);
    $310 = $C;
    $311 = ((($310)) + 32|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $E;
    $314 = ((($313)) + 32|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (__Z5b2MaxIiET_S0_S0_($312,$315)|0);
    $317 = (1 + ($316))|0;
    $318 = $A;
    $319 = ((($318)) + 32|0);
    HEAP32[$319>>2] = $317;
    $320 = $A;
    $321 = ((($320)) + 32|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $D;
    $324 = ((($323)) + 32|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (__Z5b2MaxIiET_S0_S0_($322,$325)|0);
    $327 = (1 + ($326))|0;
    $328 = $B;
    $329 = ((($328)) + 32|0);
    HEAP32[$329>>2] = $327;
   } else {
    $330 = $iE;
    $331 = $B;
    $332 = ((($331)) + 28|0);
    HEAP32[$332>>2] = $330;
    $333 = $iD;
    $334 = $A;
    $335 = ((($334)) + 24|0);
    HEAP32[$335>>2] = $333;
    $336 = $2;
    $337 = $D;
    $338 = ((($337)) + 20|0);
    HEAP32[$338>>2] = $336;
    $339 = $A;
    $340 = $C;
    $341 = $D;
    __ZN6b2AABB7CombineERKS_S1_($339,$340,$341);
    $342 = $B;
    $343 = $A;
    $344 = $E;
    __ZN6b2AABB7CombineERKS_S1_($342,$343,$344);
    $345 = $C;
    $346 = ((($345)) + 32|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $D;
    $349 = ((($348)) + 32|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = (__Z5b2MaxIiET_S0_S0_($347,$350)|0);
    $352 = (1 + ($351))|0;
    $353 = $A;
    $354 = ((($353)) + 32|0);
    HEAP32[$354>>2] = $352;
    $355 = $A;
    $356 = ((($355)) + 32|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $E;
    $359 = ((($358)) + 32|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (__Z5b2MaxIiET_S0_S0_($357,$360)|0);
    $362 = (1 + ($361))|0;
    $363 = $B;
    $364 = ((($363)) + 32|0);
    HEAP32[$364>>2] = $362;
   }
   $365 = $iB;
   $0 = $365;
   $367 = $0;
   STACKTOP = sp;return ($367|0);
  }
 }
 $16 = $2;
 $0 = $16;
 $367 = $0;
 STACKTOP = sp;return ($367|0);
}
function __ZN13b2DynamicTree10RemoveLeafEi($this,$leaf) {
 $this = $this|0;
 $leaf = $leaf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $child1 = 0;
 var $child2 = 0, $grandParent = 0, $index = 0, $parent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  HEAP32[$2>>2] = -1;
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*36)|0)|0);
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $parent = $11;
 $12 = $parent;
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($12*36)|0)|0);
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $grandParent = $17;
 $18 = $parent;
 $19 = ((($2)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($18*36)|0)|0);
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ($23|0)==($24|0);
 $26 = $parent;
 $27 = ((($2)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + (($26*36)|0)|0);
 if ($25) {
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $sibling = $31;
 } else {
  $32 = ((($29)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $sibling = $33;
 }
 $34 = $grandParent;
 $35 = ($34|0)!=(-1);
 if (!($35)) {
  $112 = $sibling;
  HEAP32[$2>>2] = $112;
  $113 = $sibling;
  $114 = ((($2)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + (($113*36)|0)|0);
  $117 = ((($116)) + 20|0);
  HEAP32[$117>>2] = -1;
  $118 = $parent;
  __ZN13b2DynamicTree8FreeNodeEi($2,$118);
  STACKTOP = sp;return;
 }
 $36 = $grandParent;
 $37 = ((($2)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + (($36*36)|0)|0);
 $40 = ((($39)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $parent;
 $43 = ($41|0)==($42|0);
 $44 = $sibling;
 $45 = $grandParent;
 $46 = ((($2)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + (($45*36)|0)|0);
 if ($43) {
  $49 = ((($48)) + 24|0);
  HEAP32[$49>>2] = $44;
 } else {
  $50 = ((($48)) + 28|0);
  HEAP32[$50>>2] = $44;
 }
 $51 = $grandParent;
 $52 = $sibling;
 $53 = ((($2)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + (($52*36)|0)|0);
 $56 = ((($55)) + 20|0);
 HEAP32[$56>>2] = $51;
 $57 = $parent;
 __ZN13b2DynamicTree8FreeNodeEi($2,$57);
 $58 = $grandParent;
 $index = $58;
 while(1) {
  $59 = $index;
  $60 = ($59|0)!=(-1);
  if (!($60)) {
   break;
  }
  $61 = $index;
  $62 = (__ZN13b2DynamicTree7BalanceEi($2,$61)|0);
  $index = $62;
  $63 = $index;
  $64 = ((($2)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + (($63*36)|0)|0);
  $67 = ((($66)) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $child1 = $68;
  $69 = $index;
  $70 = ((($2)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($69*36)|0)|0);
  $73 = ((($72)) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $child2 = $74;
  $75 = $index;
  $76 = ((($2)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + (($75*36)|0)|0);
  $79 = $child1;
  $80 = ((($2)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($79*36)|0)|0);
  $83 = $child2;
  $84 = ((($2)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($83*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($78,$82,$86);
  $87 = $child1;
  $88 = ((($2)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + (($87*36)|0)|0);
  $91 = ((($90)) + 32|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $child2;
  $94 = ((($2)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + (($93*36)|0)|0);
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (__Z5b2MaxIiET_S0_S0_($92,$98)|0);
  $100 = (1 + ($99))|0;
  $101 = $index;
  $102 = ((($2)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($101*36)|0)|0);
  $105 = ((($104)) + 32|0);
  HEAP32[$105>>2] = $100;
  $106 = $index;
  $107 = ((($2)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + (($106*36)|0)|0);
  $110 = ((($109)) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  $index = $111;
 }
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this,$proxyId,$aabb,$displacement) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 $aabb = $aabb|0;
 $displacement = $displacement|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0;
 var $d = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 64|0;
 $b = sp + 32|0;
 $r = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $d = sp;
 $1 = $this;
 $2 = $proxyId;
 $3 = $aabb;
 $4 = $displacement;
 $7 = $1;
 $8 = $2;
 $9 = (0)<=($8|0);
 if (!($9)) {
  ___assert_fail((19924|0),(10524|0),135,(11020|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ((($7)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)<($12|0);
 if (!($13)) {
  ___assert_fail((19924|0),(10524|0),135,(11020|0));
  // unreachable;
 }
 $14 = $2;
 $15 = ((($7)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*36)|0)|0);
 $18 = (__ZNK10b2TreeNode6IsLeafEv($17)|0);
 if (!($18)) {
  ___assert_fail((10994|0),(10524|0),137,(11020|0));
  // unreachable;
 }
 $19 = $2;
 $20 = ((($7)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + (($19*36)|0)|0);
 $23 = $3;
 $24 = (__ZNK6b2AABB8ContainsERKS_($22,$23)|0);
 if ($24) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $55 = $$pre_trunc&1;
  STACKTOP = sp;return ($55|0);
 }
 $25 = $2;
 __ZN13b2DynamicTree10RemoveLeafEi($7,$25);
 $26 = $3;
 ;HEAP32[$b>>2]=HEAP32[$26>>2]|0;HEAP32[$b+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$26+12>>2]|0;
 __ZN6b2Vec2C2Eff($r,0.10000000149011612,0.10000000149011612);
 __ZmiRK6b2Vec2S1_($5,$b,$r);
 ;HEAP32[$b>>2]=HEAP32[$5>>2]|0;HEAP32[$b+4>>2]=HEAP32[$5+4>>2]|0;
 $27 = ((($b)) + 8|0);
 $28 = ((($b)) + 8|0);
 __ZplRK6b2Vec2S1_($6,$28,$r);
 ;HEAP32[$27>>2]=HEAP32[$6>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
 $29 = $4;
 __ZmlfRK6b2Vec2($d,2.0,$29);
 $30 = +HEAPF32[$d>>2];
 $31 = $30 < 0.0;
 $32 = +HEAPF32[$d>>2];
 if ($31) {
  $33 = +HEAPF32[$b>>2];
  $34 = $33 + $32;
  HEAPF32[$b>>2] = $34;
 } else {
  $35 = ((($b)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $36 + $32;
  HEAPF32[$35>>2] = $37;
 }
 $38 = ((($d)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $39 < 0.0;
 $41 = ((($d)) + 4|0);
 $42 = +HEAPF32[$41>>2];
 if ($40) {
  $43 = ((($b)) + 4|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 + $42;
  HEAPF32[$43>>2] = $45;
 } else {
  $46 = ((($b)) + 8|0);
  $47 = ((($46)) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $48 + $42;
  HEAPF32[$47>>2] = $49;
 }
 $50 = $2;
 $51 = ((($7)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + (($50*36)|0)|0);
 ;HEAP32[$53>>2]=HEAP32[$b>>2]|0;HEAP32[$53+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$53+12>>2]=HEAP32[$b+12>>2]|0;
 $54 = $2;
 __ZN13b2DynamicTree10InsertLeafEi($7,$54);
 $$expand_i1_val2 = 1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $55 = $$pre_trunc&1;
 STACKTOP = sp;return ($55|0);
}
function __ZNK6b2AABB8ContainsERKS_($this,$aabb) {
 $this = $this|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $0;
 $result = 1;
 $3 = $result;
 $4 = $3&1;
 if ($4) {
  $5 = +HEAPF32[$2>>2];
  $6 = $1;
  $7 = +HEAPF32[$6>>2];
  $8 = $5 <= $7;
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 $result = $9;
 $11 = $result;
 $12 = $11&1;
 if ($12) {
  $13 = ((($2)) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $1;
  $16 = ((($15)) + 4|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $14 <= $17;
  $20 = $18;
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 $result = $19;
 $21 = $result;
 $22 = $21&1;
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($2)) + 8|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $25 <= $27;
  $30 = $28;
 } else {
  $30 = 0;
 }
 $29 = $30&1;
 $result = $29;
 $31 = $result;
 $32 = $31&1;
 if (!($32)) {
  $42 = 0;
  $41 = $42&1;
  $result = $41;
  $43 = $result;
  $44 = $43&1;
  STACKTOP = sp;return ($44|0);
 }
 $33 = $1;
 $34 = ((($33)) + 8|0);
 $35 = ((($34)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = ((($2)) + 8|0);
 $38 = ((($37)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $36 <= $39;
 $42 = $40;
 $41 = $42&1;
 $result = $41;
 $43 = $result;
 $44 = $43&1;
 STACKTOP = sp;return ($44|0);
}
function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output,$input) {
 $output = $output|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0;
 var $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $a1 = 0.0, $a2 = 0.0, $cache = 0, $distanceInput = 0, $distanceOutput = 0, $done = 0, $fcn = 0, $indexA = 0, $indexB = 0, $iter = 0, $k_maxIterations = 0, $proxyA = 0;
 var $proxyB = 0, $pushBackIter = 0, $rootIterCount = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, $sweepA = 0, $sweepB = 0, $t = 0.0, $t1 = 0.0, $t2 = 0.0, $tMax = 0.0, $target = 0.0, $tolerance = 0.0, $totalRadius = 0.0, $xfA = 0, $xfB = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sweepA = sp + 368|0;
 $sweepB = sp + 332|0;
 $cache = sp + 292|0;
 $distanceInput = sp + 200|0;
 $xfA = sp + 184|0;
 $xfB = sp + 168|0;
 $distanceOutput = sp + 144|0;
 $fcn = sp + 44|0;
 $indexA = sp + 32|0;
 $indexB = sp + 28|0;
 $0 = $output;
 $1 = $input;
 $2 = HEAP32[7789]|0;
 $3 = (($2) + 1)|0;
 HEAP32[7789] = $3;
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 128|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAPF32[$9>>2] = $7;
 $10 = $1;
 $proxyA = $10;
 $11 = $1;
 $12 = ((($11)) + 28|0);
 $proxyB = $12;
 $13 = $1;
 $14 = ((($13)) + 56|0);
 dest=$sweepA; src=$14; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $15 = $1;
 $16 = ((($15)) + 92|0);
 dest=$sweepB; src=$16; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN7b2Sweep9NormalizeEv($sweepA);
 __ZN7b2Sweep9NormalizeEv($sweepB);
 $17 = $1;
 $18 = ((($17)) + 128|0);
 $19 = +HEAPF32[$18>>2];
 $tMax = $19;
 $20 = $proxyA;
 $21 = ((($20)) + 24|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $proxyB;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 + $25;
 $totalRadius = $26;
 $27 = $totalRadius;
 $28 = $27 - 0.014999999664723873;
 $29 = (+__Z5b2MaxIfET_S0_S0_(0.004999999888241291,$28));
 $target = $29;
 $tolerance = 0.0012499999720603228;
 $30 = $target;
 $31 = $tolerance;
 $32 = $30 > $31;
 if (!($32)) {
  ___assert_fail((11030|0),(11049|0),280,(11133|0));
  // unreachable;
 }
 $t1 = 0.0;
 $k_maxIterations = 20;
 $iter = 0;
 $33 = ((($cache)) + 4|0);
 HEAP16[$33>>1] = 0;
 __ZN15b2DistanceInputC2Ev($distanceInput);
 $34 = $1;
 ;HEAP32[$distanceInput>>2]=HEAP32[$34>>2]|0;HEAP32[$distanceInput+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$distanceInput+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$distanceInput+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$distanceInput+16>>2]=HEAP32[$34+16>>2]|0;HEAP32[$distanceInput+20>>2]=HEAP32[$34+20>>2]|0;HEAP32[$distanceInput+24>>2]=HEAP32[$34+24>>2]|0;
 $35 = ((($distanceInput)) + 28|0);
 $36 = $1;
 $37 = ((($36)) + 28|0);
 ;HEAP32[$35>>2]=HEAP32[$37>>2]|0;HEAP32[$35+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$37+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$37+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$37+20>>2]|0;HEAP32[$35+24>>2]=HEAP32[$37+24>>2]|0;
 $38 = ((($distanceInput)) + 88|0);
 HEAP8[$38>>0] = 0;
 while(1) {
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $39 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepA,$xfA,$39);
  $40 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepB,$xfB,$40);
  $41 = ((($distanceInput)) + 56|0);
  ;HEAP32[$41>>2]=HEAP32[$xfA>>2]|0;HEAP32[$41+4>>2]=HEAP32[$xfA+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$xfA+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$xfA+12>>2]|0;
  $42 = ((($distanceInput)) + 72|0);
  ;HEAP32[$42>>2]=HEAP32[$xfB>>2]|0;HEAP32[$42+4>>2]=HEAP32[$xfB+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$xfB+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$xfB+12>>2]|0;
  __ZN16b2DistanceOutputC2Ev($distanceOutput);
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput,$cache,$distanceInput);
  $43 = ((($distanceOutput)) + 16|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 <= 0.0;
  if ($45) {
   label = 5;
   break;
  }
  $49 = ((($distanceOutput)) + 16|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $target;
  $52 = $tolerance;
  $53 = $51 + $52;
  $54 = $50 < $53;
  if ($54) {
   label = 7;
   break;
  }
  __ZN20b2SeparationFunctionC2Ev($fcn);
  $59 = $proxyA;
  $60 = $proxyB;
  $61 = $t1;
  (+__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn,$cache,$59,$sweepA,$60,$sweepB,$61));
  $done = 0;
  $62 = $tMax;
  $t2 = $62;
  $pushBackIter = 0;
  while(1) {
   $63 = $t2;
   $64 = (+__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn,$indexA,$indexB,$63));
   $s2 = $64;
   $65 = $s2;
   $66 = $target;
   $67 = $tolerance;
   $68 = $66 + $67;
   $69 = $65 > $68;
   if ($69) {
    label = 10;
    break;
   }
   $74 = $s2;
   $75 = $target;
   $76 = $tolerance;
   $77 = $75 - $76;
   $78 = $74 > $77;
   if ($78) {
    label = 12;
    break;
   }
   $80 = HEAP32[$indexA>>2]|0;
   $81 = HEAP32[$indexB>>2]|0;
   $82 = $t1;
   $83 = (+__ZNK20b2SeparationFunction8EvaluateEiif($fcn,$80,$81,$82));
   $s1 = $83;
   $84 = $s1;
   $85 = $target;
   $86 = $tolerance;
   $87 = $85 - $86;
   $88 = $84 < $87;
   if ($88) {
    label = 14;
    break;
   }
   $93 = $s1;
   $94 = $target;
   $95 = $tolerance;
   $96 = $94 + $95;
   $97 = $93 <= $96;
   if ($97) {
    label = 16;
    break;
   }
   $rootIterCount = 0;
   $102 = $t1;
   $a1 = $102;
   $103 = $t2;
   $a2 = $103;
   while(1) {
    $104 = $rootIterCount;
    $105 = $104 & 1;
    $106 = ($105|0)!=(0);
    $107 = $a1;
    if ($106) {
     $108 = $target;
     $109 = $s1;
     $110 = $108 - $109;
     $111 = $a2;
     $112 = $a1;
     $113 = $111 - $112;
     $114 = $110 * $113;
     $115 = $s2;
     $116 = $s1;
     $117 = $115 - $116;
     $118 = $114 / $117;
     $119 = $107 + $118;
     $t = $119;
    } else {
     $120 = $a2;
     $121 = $107 + $120;
     $122 = 0.5 * $121;
     $t = $122;
    }
    $123 = HEAP32[$indexA>>2]|0;
    $124 = HEAP32[$indexB>>2]|0;
    $125 = $t;
    $126 = (+__ZNK20b2SeparationFunction8EvaluateEiif($fcn,$123,$124,$125));
    $s = $126;
    $127 = $s;
    $128 = $target;
    $129 = $127 - $128;
    $130 = (+__Z5b2AbsIfET_S0_($129));
    $131 = $tolerance;
    $132 = $130 < $131;
    if ($132) {
     label = 22;
     break;
    }
    $134 = $s;
    $135 = $target;
    $136 = $134 > $135;
    $137 = $t;
    if ($136) {
     $a1 = $137;
     $138 = $s;
     $s1 = $138;
    } else {
     $a2 = $137;
     $139 = $s;
     $s2 = $139;
    }
    $140 = $rootIterCount;
    $141 = (($140) + 1)|0;
    $rootIterCount = $141;
    $142 = HEAP32[7792]|0;
    $143 = (($142) + 1)|0;
    HEAP32[7792] = $143;
    $144 = $rootIterCount;
    $145 = ($144|0)==(50);
    if ($145) {
     break;
    }
   }
   if ((label|0) == 22) {
    label = 0;
    $133 = $t;
    $t2 = $133;
   }
   $146 = HEAP32[7793]|0;
   $147 = $rootIterCount;
   $148 = (__Z5b2MaxIiET_S0_S0_($146,$147)|0);
   HEAP32[7793] = $148;
   $149 = $pushBackIter;
   $150 = (($149) + 1)|0;
   $pushBackIter = $150;
   $151 = $pushBackIter;
   $152 = ($151|0)==(8);
   if ($152) {
    break;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $70 = $0;
   HEAP32[$70>>2] = 4;
   $71 = $tMax;
   $72 = $0;
   $73 = ((($72)) + 4|0);
   HEAPF32[$73>>2] = $71;
   $done = 1;
  }
  else if ((label|0) == 12) {
   label = 0;
   $79 = $t2;
   $t1 = $79;
  }
  else if ((label|0) == 14) {
   label = 0;
   $89 = $0;
   HEAP32[$89>>2] = 1;
   $90 = $t1;
   $91 = $0;
   $92 = ((($91)) + 4|0);
   HEAPF32[$92>>2] = $90;
   $done = 1;
  }
  else if ((label|0) == 16) {
   label = 0;
   $98 = $0;
   HEAP32[$98>>2] = 3;
   $99 = $t1;
   $100 = $0;
   $101 = ((($100)) + 4|0);
   HEAPF32[$101>>2] = $99;
   $done = 1;
  }
  $153 = $iter;
  $154 = (($153) + 1)|0;
  $iter = $154;
  $155 = HEAP32[7790]|0;
  $156 = (($155) + 1)|0;
  HEAP32[7790] = $156;
  $157 = $done;
  $158 = $157&1;
  if ($158) {
   label = 31;
   break;
  }
  $159 = $iter;
  $160 = ($159|0)==(20);
  if ($160) {
   label = 30;
   break;
  }
 }
 if ((label|0) == 5) {
  $46 = $0;
  HEAP32[$46>>2] = 2;
  $47 = $0;
  $48 = ((($47)) + 4|0);
  HEAPF32[$48>>2] = 0.0;
  $165 = HEAP32[7791]|0;
  $166 = $iter;
  $167 = (__Z5b2MaxIiET_S0_S0_($165,$166)|0);
  HEAP32[7791] = $167;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $55 = $0;
  HEAP32[$55>>2] = 3;
  $56 = $t1;
  $57 = $0;
  $58 = ((($57)) + 4|0);
  HEAPF32[$58>>2] = $56;
  $165 = HEAP32[7791]|0;
  $166 = $iter;
  $167 = (__Z5b2MaxIiET_S0_S0_($165,$166)|0);
  HEAP32[7791] = $167;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 30) {
  $161 = $0;
  HEAP32[$161>>2] = 1;
  $162 = $t1;
  $163 = $0;
  $164 = ((($163)) + 4|0);
  HEAPF32[$164>>2] = $162;
  $165 = HEAP32[7791]|0;
  $166 = $iter;
  $167 = (__Z5b2MaxIiET_S0_S0_($165,$166)|0);
  HEAP32[7791] = $167;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 31) {
  $165 = HEAP32[7791]|0;
  $166 = $iter;
  $167 = (__Z5b2MaxIiET_S0_S0_($165,$166)|0);
  HEAP32[7791] = $167;
  STACKTOP = sp;return;
 }
}
function __ZN7b2Sweep9NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $twoPi = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $twoPi = 6.2831854820251465;
 $2 = $twoPi;
 $3 = ((($1)) + 24|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $twoPi;
 $6 = $4 / $5;
 $7 = (+Math_floor((+$6)));
 $8 = $2 * $7;
 $d = $8;
 $9 = $d;
 $10 = ((($1)) + 24|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = $d;
 $14 = ((($1)) + 28|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 - $13;
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZNK7b2Sweep12GetTransformEP11b2Transformf($this,$xf,$beta) {
 $this = $this|0;
 $xf = $xf|0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $angle = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp;
 $0 = $this;
 $1 = $xf;
 $2 = $beta;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = 1.0 - $9;
 $11 = ((($7)) + 8|0);
 __ZmlfRK6b2Vec2($4,$10,$11);
 $12 = $2;
 $13 = ((($7)) + 16|0);
 __ZmlfRK6b2Vec2($5,$12,$13);
 __ZplRK6b2Vec2S1_($3,$4,$5);
 ;HEAP32[$8>>2]=HEAP32[$3>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;
 $14 = $2;
 $15 = 1.0 - $14;
 $16 = ((($7)) + 24|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 * $17;
 $19 = $2;
 $20 = ((($7)) + 28|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 $23 = $18 + $22;
 $angle = $23;
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = $angle;
 __ZN5b2Rot3SetEf($25,$26);
 $27 = $1;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($6,$29,$7);
 __ZN6b2Vec2mIERKS_($27,$6);
 STACKTOP = sp;return;
}
function __ZN5b2Rot3SetEf($this,$angle) {
 $this = $this|0;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $angle;
 $2 = $0;
 $3 = $1;
 $4 = (+Math_sin((+$3)));
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (+Math_cos((+$5)));
 $7 = ((($2)) + 4|0);
 HEAPF32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN20b2SeparationFunctionC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZN7b2SweepC2Ev($2);
 $3 = ((($1)) + 44|0);
 __ZN7b2SweepC2Ev($3);
 $4 = ((($1)) + 84|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = ((($1)) + 92|0);
 __ZN6b2Vec2C2Ev($5);
 STACKTOP = sp;return;
}
function __ZN7b2SweepC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = ((($1)) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this,$cache,$proxyA,$sweepA,$proxyB,$sweepB,$t1) {
 $this = $this|0;
 $cache = $cache|0;
 $proxyA = $proxyA|0;
 $sweepA = $sweepA|0;
 $proxyB = $proxyB|0;
 $sweepB = $sweepB|0;
 $t1 = +$t1;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $count = 0, $localPointA = 0, $localPointA1 = 0, $localPointA2 = 0, $localPointA25 = 0, $localPointB = 0, $localPointB1 = 0, $localPointB2 = 0, $localPointB8 = 0, $normal = 0, $normal6 = 0, $or$cond = 0, $pointA = 0, $pointA3 = 0, $pointA7 = 0, $pointB = 0, $pointB1 = 0, $pointB9 = 0, $s = 0.0, $s10 = 0.0;
 var $s4 = 0.0, $xfA = 0, $xfB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 272|0;
 $xfB = sp + 256|0;
 $localPointA = sp + 248|0;
 $localPointB = sp + 240|0;
 $pointA = sp + 232|0;
 $pointB = sp + 224|0;
 $8 = sp + 216|0;
 $localPointB1 = sp + 200|0;
 $localPointB2 = sp + 192|0;
 $9 = sp + 184|0;
 $10 = sp + 176|0;
 $normal = sp + 168|0;
 $11 = sp + 160|0;
 $12 = sp + 152|0;
 $pointB1 = sp + 144|0;
 $localPointA2 = sp + 136|0;
 $pointA3 = sp + 128|0;
 $13 = sp + 112|0;
 $14 = sp + 104|0;
 $localPointA1 = sp + 96|0;
 $localPointA25 = sp + 88|0;
 $15 = sp + 80|0;
 $16 = sp + 72|0;
 $normal6 = sp + 64|0;
 $17 = sp + 56|0;
 $18 = sp + 48|0;
 $pointA7 = sp + 40|0;
 $localPointB8 = sp + 32|0;
 $pointB9 = sp + 24|0;
 $19 = sp + 8|0;
 $20 = sp;
 $1 = $this;
 $2 = $cache;
 $3 = $proxyA;
 $4 = $sweepA;
 $5 = $proxyB;
 $6 = $sweepB;
 $7 = $t1;
 $21 = $1;
 $22 = $3;
 HEAP32[$21>>2] = $22;
 $23 = $5;
 $24 = ((($21)) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = $2;
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $count = $28;
 $29 = $count;
 $30 = (0)<($29|0);
 $31 = $count;
 $32 = ($31|0)<(3);
 $or$cond = $30 & $32;
 if (!($or$cond)) {
  ___assert_fail((11148|0),(11049|0),50,(23531|0));
  // unreachable;
 }
 $33 = ((($21)) + 8|0);
 $34 = $4;
 dest=$33; src=$34; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $35 = ((($21)) + 44|0);
 $36 = $6;
 dest=$35; src=$36; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $37 = ((($21)) + 8|0);
 $38 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($37,$xfA,$38);
 $39 = ((($21)) + 44|0);
 $40 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($39,$xfB,$40);
 $41 = $count;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = ((($21)) + 80|0);
  HEAP32[$43>>2] = 0;
  $44 = HEAP32[$21>>2]|0;
  $45 = $2;
  $46 = ((($45)) + 6|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (__ZNK15b2DistanceProxy9GetVertexEi($44,$48)|0);
  ;HEAP32[$localPointA>>2]=HEAP32[$49>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$49+4>>2]|0;
  $50 = ((($21)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $2;
  $53 = ((($52)) + 9|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$55)|0);
  ;HEAP32[$localPointB>>2]=HEAP32[$56>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$56+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  $57 = ((($21)) + 92|0);
  __ZmiRK6b2Vec2S1_($8,$pointB,$pointA);
  ;HEAP32[$57>>2]=HEAP32[$8>>2]|0;HEAP32[$57+4>>2]=HEAP32[$8+4>>2]|0;
  $58 = ((($21)) + 92|0);
  $59 = (+__ZN6b2Vec29NormalizeEv($58));
  $s = $59;
  $60 = $s;
  $0 = $60;
  $139 = $0;
  STACKTOP = sp;return (+$139);
 }
 $61 = $2;
 $62 = ((($61)) + 6|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $2;
 $66 = ((($65)) + 6|0);
 $67 = ((($66)) + 1|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = ($64|0)==($69|0);
 $71 = ((($21)) + 80|0);
 if ($70) {
  HEAP32[$71>>2] = 2;
  $72 = $5;
  $73 = $2;
  $74 = ((($73)) + 9|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (__ZNK15b2DistanceProxy9GetVertexEi($72,$76)|0);
  ;HEAP32[$localPointB1>>2]=HEAP32[$77>>2]|0;HEAP32[$localPointB1+4>>2]=HEAP32[$77+4>>2]|0;
  $78 = $5;
  $79 = $2;
  $80 = ((($79)) + 9|0);
  $81 = ((($80)) + 1|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = (__ZNK15b2DistanceProxy9GetVertexEi($78,$83)|0);
  ;HEAP32[$localPointB2>>2]=HEAP32[$84>>2]|0;HEAP32[$localPointB2+4>>2]=HEAP32[$84+4>>2]|0;
  $85 = ((($21)) + 92|0);
  __ZmiRK6b2Vec2S1_($10,$localPointB2,$localPointB1);
  __Z7b2CrossRK6b2Vec2f($9,$10,1.0);
  ;HEAP32[$85>>2]=HEAP32[$9>>2]|0;HEAP32[$85+4>>2]=HEAP32[$9+4>>2]|0;
  $86 = ((($21)) + 92|0);
  (+__ZN6b2Vec29NormalizeEv($86));
  $87 = ((($xfB)) + 8|0);
  $88 = ((($21)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$87,$88);
  $89 = ((($21)) + 84|0);
  __ZplRK6b2Vec2S1_($12,$localPointB1,$localPointB2);
  __ZmlfRK6b2Vec2($11,0.5,$12);
  ;HEAP32[$89>>2]=HEAP32[$11>>2]|0;HEAP32[$89+4>>2]=HEAP32[$11+4>>2]|0;
  $90 = ((($21)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB1,$xfB,$90);
  $91 = $3;
  $92 = $2;
  $93 = ((($92)) + 6|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (__ZNK15b2DistanceProxy9GetVertexEi($91,$95)|0);
  ;HEAP32[$localPointA2>>2]=HEAP32[$96>>2]|0;HEAP32[$localPointA2+4>>2]=HEAP32[$96+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA3,$xfA,$localPointA2);
  __ZmiRK6b2Vec2S1_($13,$pointA3,$pointB1);
  $97 = (+__Z5b2DotRK6b2Vec2S1_($13,$normal));
  $s4 = $97;
  $98 = $s4;
  $99 = $98 < 0.0;
  if ($99) {
   $100 = ((($21)) + 92|0);
   $101 = ((($21)) + 92|0);
   __ZNK6b2Vec2ngEv($14,$101);
   ;HEAP32[$100>>2]=HEAP32[$14>>2]|0;HEAP32[$100+4>>2]=HEAP32[$14+4>>2]|0;
   $102 = $s4;
   $103 = -$102;
   $s4 = $103;
  }
  $104 = $s4;
  $0 = $104;
  $139 = $0;
  STACKTOP = sp;return (+$139);
 } else {
  HEAP32[$71>>2] = 1;
  $105 = HEAP32[$21>>2]|0;
  $106 = $2;
  $107 = ((($106)) + 6|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (__ZNK15b2DistanceProxy9GetVertexEi($105,$109)|0);
  ;HEAP32[$localPointA1>>2]=HEAP32[$110>>2]|0;HEAP32[$localPointA1+4>>2]=HEAP32[$110+4>>2]|0;
  $111 = HEAP32[$21>>2]|0;
  $112 = $2;
  $113 = ((($112)) + 6|0);
  $114 = ((($113)) + 1|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = (__ZNK15b2DistanceProxy9GetVertexEi($111,$116)|0);
  ;HEAP32[$localPointA25>>2]=HEAP32[$117>>2]|0;HEAP32[$localPointA25+4>>2]=HEAP32[$117+4>>2]|0;
  $118 = ((($21)) + 92|0);
  __ZmiRK6b2Vec2S1_($16,$localPointA25,$localPointA1);
  __Z7b2CrossRK6b2Vec2f($15,$16,1.0);
  ;HEAP32[$118>>2]=HEAP32[$15>>2]|0;HEAP32[$118+4>>2]=HEAP32[$15+4>>2]|0;
  $119 = ((($21)) + 92|0);
  (+__ZN6b2Vec29NormalizeEv($119));
  $120 = ((($xfA)) + 8|0);
  $121 = ((($21)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$120,$121);
  $122 = ((($21)) + 84|0);
  __ZplRK6b2Vec2S1_($18,$localPointA1,$localPointA25);
  __ZmlfRK6b2Vec2($17,0.5,$18);
  ;HEAP32[$122>>2]=HEAP32[$17>>2]|0;HEAP32[$122+4>>2]=HEAP32[$17+4>>2]|0;
  $123 = ((($21)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA7,$xfA,$123);
  $124 = ((($21)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $2;
  $127 = ((($126)) + 9|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (__ZNK15b2DistanceProxy9GetVertexEi($125,$129)|0);
  ;HEAP32[$localPointB8>>2]=HEAP32[$130>>2]|0;HEAP32[$localPointB8+4>>2]=HEAP32[$130+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB9,$xfB,$localPointB8);
  __ZmiRK6b2Vec2S1_($19,$pointB9,$pointA7);
  $131 = (+__Z5b2DotRK6b2Vec2S1_($19,$normal6));
  $s10 = $131;
  $132 = $s10;
  $133 = $132 < 0.0;
  if ($133) {
   $134 = ((($21)) + 92|0);
   $135 = ((($21)) + 92|0);
   __ZNK6b2Vec2ngEv($20,$135);
   ;HEAP32[$134>>2]=HEAP32[$20>>2]|0;HEAP32[$134+4>>2]=HEAP32[$20+4>>2]|0;
   $136 = $s10;
   $137 = -$136;
   $s10 = $137;
  }
  $138 = $s10;
  $0 = $138;
  $139 = $0;
  STACKTOP = sp;return (+$139);
 }
 return +(0.0);
}
function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this,$indexA,$indexB,$t) {
 $this = $this|0;
 $indexA = $indexA|0;
 $indexB = $indexB|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, $axisA = 0, $axisA8 = 0, $axisB = 0, $axisB2 = 0, $localPointA = 0, $localPointA9 = 0, $localPointB = 0, $localPointB3 = 0;
 var $normal = 0, $normal6 = 0, $pointA = 0, $pointA1 = 0, $pointA10 = 0, $pointB = 0, $pointB4 = 0, $pointB7 = 0, $separation = 0.0, $separation11 = 0.0, $separation5 = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 216|0;
 $xfB = sp + 200|0;
 $axisA = sp + 192|0;
 $axisB = sp + 184|0;
 $5 = sp + 176|0;
 $localPointA = sp + 168|0;
 $localPointB = sp + 160|0;
 $pointA = sp + 152|0;
 $pointB = sp + 144|0;
 $6 = sp + 128|0;
 $normal = sp + 120|0;
 $pointA1 = sp + 112|0;
 $axisB2 = sp + 104|0;
 $7 = sp + 96|0;
 $localPointB3 = sp + 88|0;
 $pointB4 = sp + 80|0;
 $8 = sp + 64|0;
 $normal6 = sp + 56|0;
 $pointB7 = sp + 48|0;
 $axisA8 = sp + 40|0;
 $9 = sp + 32|0;
 $localPointA9 = sp + 24|0;
 $pointA10 = sp + 16|0;
 $10 = sp;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $11 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $12 = ((($11)) + 8|0);
 $13 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($12,$xfA,$13);
 $14 = ((($11)) + 44|0);
 $15 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($14,$xfB,$15);
 $16 = ((($11)) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 switch ($17|0) {
 case 0:  {
  $18 = ((($xfA)) + 8|0);
  $19 = ((($11)) + 92|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA,$18,$19);
  $20 = ((($xfB)) + 8|0);
  $21 = ((($11)) + 92|0);
  __ZNK6b2Vec2ngEv($5,$21);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB,$20,$5);
  $22 = HEAP32[$11>>2]|0;
  $23 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($22,$axisA)|0);
  $24 = $2;
  HEAP32[$24>>2] = $23;
  $25 = ((($11)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($26,$axisB)|0);
  $28 = $3;
  HEAP32[$28>>2] = $27;
  $29 = HEAP32[$11>>2]|0;
  $30 = $2;
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZNK15b2DistanceProxy9GetVertexEi($29,$31)|0);
  ;HEAP32[$localPointA>>2]=HEAP32[$32>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$32+4>>2]|0;
  $33 = ((($11)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  $37 = (__ZNK15b2DistanceProxy9GetVertexEi($34,$36)|0);
  ;HEAP32[$localPointB>>2]=HEAP32[$37>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$37+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
  $38 = ((($11)) + 92|0);
  $39 = (+__Z5b2DotRK6b2Vec2S1_($6,$38));
  $separation = $39;
  $40 = $separation;
  $0 = $40;
  $71 = $0;
  STACKTOP = sp;return (+$71);
  break;
 }
 case 1:  {
  $41 = ((($xfA)) + 8|0);
  $42 = ((($11)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$41,$42);
  $43 = ((($11)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1,$xfA,$43);
  $44 = ((($xfB)) + 8|0);
  __ZNK6b2Vec2ngEv($7,$normal);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2,$44,$7);
  $45 = $2;
  HEAP32[$45>>2] = -1;
  $46 = ((($11)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($47,$axisB2)|0);
  $49 = $3;
  HEAP32[$49>>2] = $48;
  $50 = ((($11)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $3;
  $53 = HEAP32[$52>>2]|0;
  $54 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$53)|0);
  ;HEAP32[$localPointB3>>2]=HEAP32[$54>>2]|0;HEAP32[$localPointB3+4>>2]=HEAP32[$54+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4,$xfB,$localPointB3);
  __ZmiRK6b2Vec2S1_($8,$pointB4,$pointA1);
  $55 = (+__Z5b2DotRK6b2Vec2S1_($8,$normal));
  $separation5 = $55;
  $56 = $separation5;
  $0 = $56;
  $71 = $0;
  STACKTOP = sp;return (+$71);
  break;
 }
 case 2:  {
  $57 = ((($xfB)) + 8|0);
  $58 = ((($11)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$57,$58);
  $59 = ((($11)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7,$xfB,$59);
  $60 = ((($xfA)) + 8|0);
  __ZNK6b2Vec2ngEv($9,$normal6);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8,$60,$9);
  $61 = $3;
  HEAP32[$61>>2] = -1;
  $62 = HEAP32[$11>>2]|0;
  $63 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($62,$axisA8)|0);
  $64 = $2;
  HEAP32[$64>>2] = $63;
  $65 = HEAP32[$11>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = (__ZNK15b2DistanceProxy9GetVertexEi($65,$67)|0);
  ;HEAP32[$localPointA9>>2]=HEAP32[$68>>2]|0;HEAP32[$localPointA9+4>>2]=HEAP32[$68+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10,$xfA,$localPointA9);
  __ZmiRK6b2Vec2S1_($10,$pointA10,$pointB7);
  $69 = (+__Z5b2DotRK6b2Vec2S1_($10,$normal6));
  $separation11 = $69;
  $70 = $separation11;
  $0 = $70;
  $71 = $0;
  STACKTOP = sp;return (+$71);
  break;
 }
 default: {
  ___assert_fail((29532|0),(11049|0),183,(11171|0));
  // unreachable;
 }
 }
 return +(0.0);
}
function __ZNK20b2SeparationFunction8EvaluateEiif($this,$indexA,$indexB,$t) {
 $this = $this|0;
 $indexA = $indexA|0;
 $indexB = $indexB|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axisA = 0, $axisA8 = 0, $axisB = 0, $axisB2 = 0, $localPointA = 0, $localPointA9 = 0, $localPointB = 0, $localPointB3 = 0;
 var $normal = 0, $normal6 = 0, $pointA = 0, $pointA1 = 0, $pointA10 = 0, $pointB = 0, $pointB4 = 0, $pointB7 = 0, $separation = 0.0, $separation11 = 0.0, $separation5 = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 216|0;
 $xfB = sp + 200|0;
 $axisA = sp + 192|0;
 $axisB = sp + 184|0;
 $5 = sp + 176|0;
 $localPointA = sp + 168|0;
 $localPointB = sp + 160|0;
 $pointA = sp + 152|0;
 $pointB = sp + 144|0;
 $6 = sp + 128|0;
 $normal = sp + 120|0;
 $pointA1 = sp + 112|0;
 $axisB2 = sp + 104|0;
 $7 = sp + 96|0;
 $localPointB3 = sp + 88|0;
 $pointB4 = sp + 80|0;
 $8 = sp + 64|0;
 $normal6 = sp + 56|0;
 $pointB7 = sp + 48|0;
 $axisA8 = sp + 40|0;
 $9 = sp + 32|0;
 $localPointA9 = sp + 24|0;
 $pointA10 = sp + 16|0;
 $10 = sp;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $11 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $12 = ((($11)) + 8|0);
 $13 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($12,$xfA,$13);
 $14 = ((($11)) + 44|0);
 $15 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($14,$xfB,$15);
 $16 = ((($11)) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 switch ($17|0) {
 case 0:  {
  $18 = ((($xfA)) + 8|0);
  $19 = ((($11)) + 92|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA,$18,$19);
  $20 = ((($xfB)) + 8|0);
  $21 = ((($11)) + 92|0);
  __ZNK6b2Vec2ngEv($5,$21);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB,$20,$5);
  $22 = HEAP32[$11>>2]|0;
  $23 = $2;
  $24 = (__ZNK15b2DistanceProxy9GetVertexEi($22,$23)|0);
  ;HEAP32[$localPointA>>2]=HEAP32[$24>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$24+4>>2]|0;
  $25 = ((($11)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = (__ZNK15b2DistanceProxy9GetVertexEi($26,$27)|0);
  ;HEAP32[$localPointB>>2]=HEAP32[$28>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$28+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
  $29 = ((($11)) + 92|0);
  $30 = (+__Z5b2DotRK6b2Vec2S1_($6,$29));
  $separation = $30;
  $31 = $separation;
  $0 = $31;
  $51 = $0;
  STACKTOP = sp;return (+$51);
  break;
 }
 case 1:  {
  $32 = ((($xfA)) + 8|0);
  $33 = ((($11)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$32,$33);
  $34 = ((($11)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1,$xfA,$34);
  $35 = ((($xfB)) + 8|0);
  __ZNK6b2Vec2ngEv($7,$normal);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2,$35,$7);
  $36 = ((($11)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = (__ZNK15b2DistanceProxy9GetVertexEi($37,$38)|0);
  ;HEAP32[$localPointB3>>2]=HEAP32[$39>>2]|0;HEAP32[$localPointB3+4>>2]=HEAP32[$39+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4,$xfB,$localPointB3);
  __ZmiRK6b2Vec2S1_($8,$pointB4,$pointA1);
  $40 = (+__Z5b2DotRK6b2Vec2S1_($8,$normal));
  $separation5 = $40;
  $41 = $separation5;
  $0 = $41;
  $51 = $0;
  STACKTOP = sp;return (+$51);
  break;
 }
 case 2:  {
  $42 = ((($xfB)) + 8|0);
  $43 = ((($11)) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$42,$43);
  $44 = ((($11)) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7,$xfB,$44);
  $45 = ((($xfA)) + 8|0);
  __ZNK6b2Vec2ngEv($9,$normal6);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8,$45,$9);
  $46 = HEAP32[$11>>2]|0;
  $47 = $2;
  $48 = (__ZNK15b2DistanceProxy9GetVertexEi($46,$47)|0);
  ;HEAP32[$localPointA9>>2]=HEAP32[$48>>2]|0;HEAP32[$localPointA9+4>>2]=HEAP32[$48+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10,$xfA,$localPointA9);
  __ZmiRK6b2Vec2S1_($10,$pointA10,$pointB7);
  $49 = (+__Z5b2DotRK6b2Vec2S1_($10,$normal6));
  $separation11 = $49;
  $50 = $separation11;
  $0 = $50;
  $51 = $0;
  STACKTOP = sp;return (+$51);
  break;
 }
 default: {
  ___assert_fail((29532|0),(11049|0),242,(11189|0));
  // unreachable;
 }
 }
 return +(0.0);
}
function __ZN7b2ShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN7b2ShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1672;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN7b2ShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN11b2EdgeShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = 1712;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 12|0);
 __THREW__ = 0;
 invoke_vi(380,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 20|0);
  __THREW__ = 0;
  invoke_vi(380,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = ((($3)) + 28|0);
   __THREW__ = 0;
   invoke_vi(380,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = ((($3)) + 36|0);
    __THREW__ = 0;
    invoke_vi(380,($14|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     $17 = ((($3)) + 4|0);
     HEAP32[$17>>2] = 1;
     $18 = ((($3)) + 8|0);
     HEAPF32[$18>>2] = 0.0099999997764825821;
     $19 = ((($3)) + 28|0);
     HEAPF32[$19>>2] = 0.0;
     $20 = ((($3)) + 28|0);
     $21 = ((($20)) + 4|0);
     HEAPF32[$21>>2] = 0.0;
     $22 = ((($3)) + 36|0);
     HEAPF32[$22>>2] = 0.0;
     $23 = ((($3)) + 36|0);
     $24 = ((($23)) + 4|0);
     HEAPF32[$24>>2] = 0.0;
     $25 = ((($3)) + 44|0);
     HEAP8[$25>>0] = 0;
     $26 = ((($3)) + 45|0);
     HEAP8[$26>>0] = 0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch_3(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  $31 = $1;
  $32 = $2;
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN11b2EdgeShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this,$edge,$index) {
 $this = $this|0;
 $edge = $edge|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $edge;
 $2 = $index;
 $3 = $0;
 $4 = $2;
 $5 = (0)<=($4|0);
 if (!($5)) {
  ___assert_fail((11296|0),(11207|0),89,(11330|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ((($3)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $10 = ($6|0)<($9|0);
 if (!($10)) {
  ___assert_fail((11296|0),(11207|0),89,(11330|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($3)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = $14;
 $17 = $1;
 $18 = ((($17)) + 12|0);
 $19 = $2;
 $20 = (($19) + 0)|0;
 $21 = ((($3)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($20<<3)|0);
 ;HEAP32[$18>>2]=HEAP32[$23>>2]|0;HEAP32[$18+4>>2]=HEAP32[$23+4>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 20|0);
 $26 = $2;
 $27 = (($26) + 1)|0;
 $28 = ((($3)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27<<3)|0);
 ;HEAP32[$25>>2]=HEAP32[$30>>2]|0;HEAP32[$25+4>>2]=HEAP32[$30+4>>2]|0;
 $31 = $2;
 $32 = ($31|0)>(0);
 $33 = $1;
 $34 = ((($33)) + 28|0);
 if ($32) {
  $35 = $2;
  $36 = (($35) - 1)|0;
  $37 = ((($3)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($36<<3)|0);
  ;HEAP32[$34>>2]=HEAP32[$39>>2]|0;HEAP32[$34+4>>2]=HEAP32[$39+4>>2]|0;
  $40 = $1;
  $41 = ((($40)) + 44|0);
  HEAP8[$41>>0] = 1;
 } else {
  $42 = ((($3)) + 20|0);
  ;HEAP32[$34>>2]=HEAP32[$42>>2]|0;HEAP32[$34+4>>2]=HEAP32[$42+4>>2]|0;
  $43 = ((($3)) + 36|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&1;
  $46 = $1;
  $47 = ((($46)) + 44|0);
  $48 = $45&1;
  HEAP8[$47>>0] = $48;
 }
 $49 = $2;
 $50 = ((($3)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) - 2)|0;
 $53 = ($49|0)<($52|0);
 $54 = $1;
 $55 = ((($54)) + 36|0);
 if ($53) {
  $56 = $2;
  $57 = (($56) + 2)|0;
  $58 = ((($3)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($57<<3)|0);
  ;HEAP32[$55>>2]=HEAP32[$60>>2]|0;HEAP32[$55+4>>2]=HEAP32[$60+4>>2]|0;
  $61 = $1;
  $62 = ((($61)) + 45|0);
  HEAP8[$62>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $63 = ((($3)) + 28|0);
  ;HEAP32[$55>>2]=HEAP32[$63>>2]|0;HEAP32[$55+4>>2]=HEAP32[$63+4>>2]|0;
  $64 = ((($3)) + 37|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&1;
  $67 = $1;
  $68 = ((($67)) + 45|0);
  $69 = $66&1;
  HEAP8[$68>>0] = $69;
  STACKTOP = sp;return;
 }
}
function __ZN7b2ShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 $6 = ((($5)) + 4|0);
 ;HEAP32[$4>>2]=HEAP32[$6>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN11b2EdgeShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(4,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN16b2BlockAllocator8AllocateEi($3,48)|0);
 $mem = $4;
 $5 = $mem;
 __ZN11b2EdgeShapeC2Ev($5);
 $clone = $5;
 $6 = $clone;
 (__ZN11b2EdgeShapeaSERKS_($6,$2)|0);
 $7 = $clone;
 STACKTOP = sp;return ($7|0);
}
function __ZN11b2EdgeShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (__ZN7b2ShapeaSERKS_($3,$4)|0);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[$7+28>>2]|0;HEAP16[$5+32>>1]=HEAP16[$7+32>>1]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK11b2EdgeShape13GetChildCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this,$xf,$p) {
 $this = $this|0;
 $xf = $xf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $xf;
 $2 = $p;
 STACKTOP = sp;return 0;
}
function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this,$output,$input,$xf,$childIndex) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $denominator = 0.0, $e = 0, $normal = 0, $numerator = 0.0, $or$cond = 0, $p1 = 0, $p2 = 0, $q = 0, $r = 0, $rr = 0.0, $s = 0.0, $t = 0.0, $v1 = 0;
 var $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 164|0;
 $p1 = sp + 136|0;
 $6 = sp + 128|0;
 $p2 = sp + 120|0;
 $7 = sp + 112|0;
 $d = sp + 104|0;
 $v1 = sp + 96|0;
 $v2 = sp + 88|0;
 $e = sp + 80|0;
 $normal = sp + 72|0;
 $8 = sp + 56|0;
 $q = sp + 40|0;
 $9 = sp + 32|0;
 $r = sp + 24|0;
 $10 = sp + 8|0;
 $11 = sp;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $12 = $1;
 $13 = $4;
 $14 = ((($13)) + 8|0);
 $15 = $3;
 $16 = $4;
 __ZmiRK6b2Vec2S1_($6,$15,$16);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1,$14,$6);
 $17 = $4;
 $18 = ((($17)) + 8|0);
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = $4;
 __ZmiRK6b2Vec2S1_($7,$20,$21);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2,$18,$7);
 __ZmiRK6b2Vec2S1_($d,$p2,$p1);
 $22 = ((($12)) + 12|0);
 ;HEAP32[$v1>>2]=HEAP32[$22>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$22+4>>2]|0;
 $23 = ((($12)) + 20|0);
 ;HEAP32[$v2>>2]=HEAP32[$23>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$23+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e,$v2,$v1);
 $24 = ((($e)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = +HEAPF32[$e>>2];
 $27 = -$26;
 __ZN6b2Vec2C2Eff($normal,$25,$27);
 (+__ZN6b2Vec29NormalizeEv($normal));
 __ZmiRK6b2Vec2S1_($8,$v1,$p1);
 $28 = (+__Z5b2DotRK6b2Vec2S1_($normal,$8));
 $numerator = $28;
 $29 = (+__Z5b2DotRK6b2Vec2S1_($normal,$d));
 $denominator = $29;
 $30 = $denominator;
 $31 = $30 == 0.0;
 if ($31) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $59 = $$pre_trunc&1;
  STACKTOP = sp;return ($59|0);
 }
 $32 = $numerator;
 $33 = $denominator;
 $34 = $32 / $33;
 $t = $34;
 $35 = $t;
 $36 = $35 < 0.0;
 if (!($36)) {
  $37 = $3;
  $38 = ((($37)) + 16|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $t;
  $41 = $39 < $40;
  if (!($41)) {
   $42 = $t;
   __ZmlfRK6b2Vec2($9,$42,$d);
   __ZplRK6b2Vec2S1_($q,$p1,$9);
   __ZmiRK6b2Vec2S1_($r,$v2,$v1);
   $43 = (+__Z5b2DotRK6b2Vec2S1_($r,$r));
   $rr = $43;
   $44 = $rr;
   $45 = $44 == 0.0;
   if ($45) {
    $$expand_i1_val5 = 0;
    HEAP8[$0>>0] = $$expand_i1_val5;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $59 = $$pre_trunc&1;
    STACKTOP = sp;return ($59|0);
   }
   __ZmiRK6b2Vec2S1_($10,$q,$v1);
   $46 = (+__Z5b2DotRK6b2Vec2S1_($10,$r));
   $47 = $rr;
   $48 = $46 / $47;
   $s = $48;
   $49 = $s;
   $50 = $49 < 0.0;
   $51 = $s;
   $52 = 1.0 < $51;
   $or$cond = $50 | $52;
   if ($or$cond) {
    $$expand_i1_val7 = 0;
    HEAP8[$0>>0] = $$expand_i1_val7;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $59 = $$pre_trunc&1;
    STACKTOP = sp;return ($59|0);
   }
   $53 = $t;
   $54 = $2;
   $55 = ((($54)) + 8|0);
   HEAPF32[$55>>2] = $53;
   $56 = $numerator;
   $57 = $56 > 0.0;
   $58 = $2;
   if ($57) {
    __ZNK6b2Vec2ngEv($11,$normal);
    ;HEAP32[$58>>2]=HEAP32[$11>>2]|0;HEAP32[$58+4>>2]=HEAP32[$11+4>>2]|0;
   } else {
    ;HEAP32[$58>>2]=HEAP32[$normal>>2]|0;HEAP32[$58+4>>2]=HEAP32[$normal+4>>2]|0;
   }
   $$expand_i1_val9 = 1;
   HEAP8[$0>>0] = $$expand_i1_val9;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $59 = $$pre_trunc&1;
   STACKTOP = sp;return ($59|0);
  }
 }
 $$expand_i1_val3 = 0;
 HEAP8[$0>>0] = $$expand_i1_val3;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $59 = $$pre_trunc&1;
 STACKTOP = sp;return ($59|0);
}
function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this,$aabb,$xf,$childIndex) {
 $this = $this|0;
 $aabb = $aabb|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lower = 0, $r = 0;
 var $upper = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v1 = sp + 48|0;
 $v2 = sp + 40|0;
 $lower = sp + 32|0;
 $upper = sp + 24|0;
 $r = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $6 = $0;
 $7 = $2;
 $8 = ((($6)) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v1,$7,$8);
 $9 = $2;
 $10 = ((($6)) + 20|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v2,$9,$10);
 __Z5b2MinRK6b2Vec2S1_($lower,$v1,$v2);
 __Z5b2MaxRK6b2Vec2S1_($upper,$v1,$v2);
 $11 = ((($6)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($6)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 __ZN6b2Vec2C2Eff($r,$12,$14);
 $15 = $1;
 __ZmiRK6b2Vec2S1_($4,$lower,$r);
 ;HEAP32[$15>>2]=HEAP32[$4>>2]|0;HEAP32[$15+4>>2]=HEAP32[$4+4>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 __ZplRK6b2Vec2S1_($5,$upper,$r);
 ;HEAP32[$17>>2]=HEAP32[$5>>2]|0;HEAP32[$17+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this,$massData,$density) {
 $this = $this|0;
 $massData = $massData|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $5 = $0;
 $6 = $1;
 HEAPF32[$6>>2] = 0.0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = ((($5)) + 12|0);
 $10 = ((($5)) + 20|0);
 __ZplRK6b2Vec2S1_($4,$9,$10);
 __ZmlfRK6b2Vec2($3,0.5,$4);
 ;HEAP32[$8>>2]=HEAP32[$3>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 12|0);
 HEAPF32[$12>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN14b2PolygonShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14b2PolygonShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(12,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN16b2BlockAllocator8AllocateEi($3,152)|0);
 $mem = $4;
 $5 = $mem;
 __ZN14b2PolygonShapeC2Ev($5);
 $clone = $5;
 $6 = $clone;
 (__ZN14b2PolygonShapeaSERKS_($6,$2)|0);
 $7 = $clone;
 STACKTOP = sp;return ($7|0);
}
function __ZN14b2PolygonShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = 1752;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 12|0);
 __THREW__ = 0;
 invoke_vi(380,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $8 = ((($3)) + 20|0);
   $9 = ((($8)) + 64|0);
   $10 = $8;
   while(1) {
    __THREW__ = 0;
    invoke_vi(380,($10|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break L1;
    }
    $13 = ((($10)) + 8|0);
    $14 = ($13|0)==($9|0);
    if ($14) {
     break;
    } else {
     $10 = $13;
    }
   }
   $15 = ((($3)) + 84|0);
   $16 = ((($15)) + 64|0);
   $17 = $15;
   while(1) {
    __THREW__ = 0;
    invoke_vi(380,($17|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     break L1;
    }
    $20 = ((($17)) + 8|0);
    $21 = ($20|0)==($16|0);
    if ($21) {
     break;
    } else {
     $17 = $20;
    }
   }
   $22 = ((($3)) + 4|0);
   HEAP32[$22>>2] = 2;
   $23 = ((($3)) + 8|0);
   HEAPF32[$23>>2] = 0.0099999997764825821;
   $24 = ((($3)) + 148|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($3)) + 12|0);
   __THREW__ = 0;
   invoke_vi(381,($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch_2()|0;
 $29 = tempRet0;
 $1 = $28;
 $2 = $29;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $34 = ___cxa_find_matching_catch_3(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  $32 = $1;
  $33 = $2;
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN14b2PolygonShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (__ZN7b2ShapeaSERKS_($3,$4)|0);
 $5 = ((($3)) + 12|0);
 $6 = $2;
 $7 = ((($6)) + 12|0);
 _memcpy(($5|0),($7|0),140)|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK14b2PolygonShape13GetChildCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this,$xf,$p) {
 $this = $this|0;
 $xf = $xf|0;
 $p = $p|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dot = 0.0, $i = 0, $pLocal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $pLocal = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp;
 $1 = $this;
 $2 = $xf;
 $3 = $p;
 $6 = $1;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = $3;
 $10 = $2;
 __ZmiRK6b2Vec2S1_($4,$9,$10);
 __Z6b2MulTRK5b2RotRK6b2Vec2($pLocal,$8,$4);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($6)) + 148|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   label = 6;
   break;
  }
  $15 = $i;
  $16 = ((($6)) + 84|0);
  $17 = (($16) + ($15<<3)|0);
  $18 = $i;
  $19 = ((($6)) + 20|0);
  $20 = (($19) + ($18<<3)|0);
  __ZmiRK6b2Vec2S1_($5,$pLocal,$20);
  $21 = (+__Z5b2DotRK6b2Vec2S1_($17,$5));
  $dot = $21;
  $22 = $dot;
  $23 = $22 > 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $26 = $$pre_trunc&1;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $26 = $$pre_trunc&1;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this,$output,$input,$xf,$childIndex) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $d = 0, $denominator = 0.0, $i = 0, $index = 0, $lower = 0.0, $numerator = 0.0, $p1 = 0, $p2 = 0;
 var $upper = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $p1 = sp + 80|0;
 $6 = sp + 72|0;
 $p2 = sp + 64|0;
 $7 = sp + 56|0;
 $d = sp + 48|0;
 $8 = sp + 16|0;
 $9 = sp;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $10 = $1;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = $3;
 $14 = $4;
 __ZmiRK6b2Vec2S1_($6,$13,$14);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1,$12,$6);
 $15 = $4;
 $16 = ((($15)) + 8|0);
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = $4;
 __ZmiRK6b2Vec2S1_($7,$18,$19);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2,$16,$7);
 __ZmiRK6b2Vec2S1_($d,$p2,$p1);
 $lower = 0.0;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF32[$21>>2];
 $upper = $22;
 $index = -1;
 $i = 0;
 L1: while(1) {
  $23 = $i;
  $24 = ((($10)) + 148|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   label = 15;
   break;
  }
  $27 = $i;
  $28 = ((($10)) + 84|0);
  $29 = (($28) + ($27<<3)|0);
  $30 = $i;
  $31 = ((($10)) + 20|0);
  $32 = (($31) + ($30<<3)|0);
  __ZmiRK6b2Vec2S1_($8,$32,$p1);
  $33 = (+__Z5b2DotRK6b2Vec2S1_($29,$8));
  $numerator = $33;
  $34 = $i;
  $35 = ((($10)) + 84|0);
  $36 = (($35) + ($34<<3)|0);
  $37 = (+__Z5b2DotRK6b2Vec2S1_($36,$d));
  $denominator = $37;
  $38 = $denominator;
  $39 = $38 == 0.0;
  do {
   if ($39) {
    $40 = $numerator;
    $41 = $40 < 0.0;
    if ($41) {
     label = 5;
     break L1;
    }
   } else {
    $42 = $denominator;
    $43 = $42 < 0.0;
    if ($43) {
     $44 = $numerator;
     $45 = $lower;
     $46 = $denominator;
     $47 = $45 * $46;
     $48 = $44 < $47;
     if ($48) {
      $49 = $numerator;
      $50 = $denominator;
      $51 = $49 / $50;
      $lower = $51;
      $52 = $i;
      $index = $52;
      break;
     }
    }
    $53 = $denominator;
    $54 = $53 > 0.0;
    if ($54) {
     $55 = $numerator;
     $56 = $upper;
     $57 = $denominator;
     $58 = $56 * $57;
     $59 = $55 < $58;
     if ($59) {
      $60 = $numerator;
      $61 = $denominator;
      $62 = $60 / $61;
      $upper = $62;
     }
    }
   }
  } while(0);
  $63 = $upper;
  $64 = $lower;
  $65 = $63 < $64;
  if ($65) {
   label = 13;
   break;
  }
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 13) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 15) {
  $68 = $lower;
  $69 = 0.0 <= $68;
  if (!($69)) {
   ___assert_fail((11374|0),(11418|0),249,(11509|0));
   // unreachable;
  }
  $70 = $lower;
  $71 = $3;
  $72 = ((($71)) + 16|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 <= $73;
  if (!($74)) {
   ___assert_fail((11374|0),(11418|0),249,(11509|0));
   // unreachable;
  }
  $75 = $index;
  $76 = ($75|0)>=(0);
  if ($76) {
   $77 = $lower;
   $78 = $2;
   $79 = ((($78)) + 8|0);
   HEAPF32[$79>>2] = $77;
   $80 = $2;
   $81 = $4;
   $82 = ((($81)) + 8|0);
   $83 = $index;
   $84 = ((($10)) + 84|0);
   $85 = (($84) + ($83<<3)|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($9,$82,$85);
   ;HEAP32[$80>>2]=HEAP32[$9>>2]|0;HEAP32[$80+4>>2]=HEAP32[$9+4>>2]|0;
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  } else {
   $$expand_i1_val6 = 0;
   HEAP8[$0>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
 }
 return (0)|0;
}
function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this,$aabb,$xf,$childIndex) {
 $this = $this|0;
 $aabb = $aabb|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lower = 0, $r = 0, $upper = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lower = sp + 64|0;
 $upper = sp + 56|0;
 $v = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $r = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $8 = $0;
 $9 = $2;
 $10 = ((($8)) + 20|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($lower,$9,$10);
 ;HEAP32[$upper>>2]=HEAP32[$lower>>2]|0;HEAP32[$upper+4>>2]=HEAP32[$lower+4>>2]|0;
 $i = 1;
 while(1) {
  $11 = $i;
  $12 = ((($8)) + 148|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $i;
  $17 = ((($8)) + 20|0);
  $18 = (($17) + ($16<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v,$15,$18);
  __Z5b2MinRK6b2Vec2S1_($4,$lower,$v);
  ;HEAP32[$lower>>2]=HEAP32[$4>>2]|0;HEAP32[$lower+4>>2]=HEAP32[$4+4>>2]|0;
  __Z5b2MaxRK6b2Vec2S1_($5,$upper,$v);
  ;HEAP32[$upper>>2]=HEAP32[$5>>2]|0;HEAP32[$upper+4>>2]=HEAP32[$5+4>>2]|0;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $21 = ((($8)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($8)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 __ZN6b2Vec2C2Eff($r,$22,$24);
 $25 = $1;
 __ZmiRK6b2Vec2S1_($6,$lower,$r);
 ;HEAP32[$25>>2]=HEAP32[$6>>2]|0;HEAP32[$25+4>>2]=HEAP32[$6+4>>2]|0;
 $26 = $1;
 $27 = ((($26)) + 8|0);
 __ZplRK6b2Vec2S1_($7,$upper,$r);
 ;HEAP32[$27>>2]=HEAP32[$7>>2]|0;HEAP32[$27+4>>2]=HEAP32[$7+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this,$massData,$density) {
 $this = $this|0;
 $massData = $massData|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $D = 0.0, $I = 0.0, $area = 0.0, $center = 0, $e1 = 0;
 var $e2 = 0, $ex1 = 0.0, $ex2 = 0.0, $ey1 = 0.0, $ey2 = 0.0, $i = 0, $i1 = 0, $intx2 = 0.0, $inty2 = 0.0, $k_inv3 = 0.0, $s = 0, $triangleArea = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $center = sp + 104|0;
 $s = sp + 88|0;
 $e1 = sp + 64|0;
 $e2 = sp + 56|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $6 = $0;
 $7 = ((($6)) + 148|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(3);
 if (!($9)) {
  ___assert_fail((11517|0),(11418|0),306,(11536|0));
  // unreachable;
 }
 __ZN6b2Vec2C2Ev($center);
 __ZN6b2Vec23SetEff($center,0.0,0.0);
 $area = 0.0;
 $I = 0.0;
 __ZN6b2Vec2C2Eff($s,0.0,0.0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ((($6)) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = ((($6)) + 20|0);
  $16 = (($15) + ($14<<3)|0);
  __ZN6b2Vec2pLERKS_($s,$16);
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = ((($6)) + 148|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = 1.0 / $21;
 __ZN6b2Vec2mLEf($s,$22);
 $k_inv3 = 0.3333333432674408;
 $i1 = 0;
 while(1) {
  $23 = $i1;
  $24 = ((($6)) + 148|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i1;
  $28 = ((($6)) + 20|0);
  $29 = (($28) + ($27<<3)|0);
  __ZmiRK6b2Vec2S1_($e1,$29,$s);
  $30 = $i1;
  $31 = (($30) + 1)|0;
  $32 = ((($6)) + 148|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)<($33|0);
  if ($34) {
   $35 = $i1;
   $36 = (($35) + 1)|0;
   $37 = ((($6)) + 20|0);
   $38 = (($37) + ($36<<3)|0);
   __ZmiRK6b2Vec2S1_($e2,$38,$s);
  } else {
   $39 = ((($6)) + 20|0);
   __ZmiRK6b2Vec2S1_($e2,$39,$s);
  }
  $40 = (+__Z7b2CrossRK6b2Vec2S1_($e1,$e2));
  $D = $40;
  $41 = $D;
  $42 = 0.5 * $41;
  $triangleArea = $42;
  $43 = $triangleArea;
  $44 = $area;
  $45 = $44 + $43;
  $area = $45;
  $46 = $triangleArea;
  $47 = $46 * 0.3333333432674408;
  __ZplRK6b2Vec2S1_($4,$e1,$e2);
  __ZmlfRK6b2Vec2($3,$47,$4);
  __ZN6b2Vec2pLERKS_($center,$3);
  $48 = +HEAPF32[$e1>>2];
  $ex1 = $48;
  $49 = ((($e1)) + 4|0);
  $50 = +HEAPF32[$49>>2];
  $ey1 = $50;
  $51 = +HEAPF32[$e2>>2];
  $ex2 = $51;
  $52 = ((($e2)) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $ey2 = $53;
  $54 = $ex1;
  $55 = $ex1;
  $56 = $54 * $55;
  $57 = $ex2;
  $58 = $ex1;
  $59 = $57 * $58;
  $60 = $56 + $59;
  $61 = $ex2;
  $62 = $ex2;
  $63 = $61 * $62;
  $64 = $60 + $63;
  $intx2 = $64;
  $65 = $ey1;
  $66 = $ey1;
  $67 = $65 * $66;
  $68 = $ey2;
  $69 = $ey1;
  $70 = $68 * $69;
  $71 = $67 + $70;
  $72 = $ey2;
  $73 = $ey2;
  $74 = $72 * $73;
  $75 = $71 + $74;
  $inty2 = $75;
  $76 = $D;
  $77 = 0.083333335816860198 * $76;
  $78 = $intx2;
  $79 = $inty2;
  $80 = $78 + $79;
  $81 = $77 * $80;
  $82 = $I;
  $83 = $82 + $81;
  $I = $83;
  $84 = $i1;
  $85 = (($84) + 1)|0;
  $i1 = $85;
 }
 $86 = $2;
 $87 = $area;
 $88 = $86 * $87;
 $89 = $1;
 HEAPF32[$89>>2] = $88;
 $90 = $area;
 $91 = $90 > 1.1920928955078125E-7;
 if ($91) {
  $92 = $area;
  $93 = 1.0 / $92;
  __ZN6b2Vec2mLEf($center,$93);
  $94 = $1;
  $95 = ((($94)) + 4|0);
  __ZplRK6b2Vec2S1_($5,$center,$s);
  ;HEAP32[$95>>2]=HEAP32[$5>>2]|0;HEAP32[$95+4>>2]=HEAP32[$5+4>>2]|0;
  $96 = $2;
  $97 = $I;
  $98 = $96 * $97;
  $99 = $1;
  $100 = ((($99)) + 12|0);
  HEAPF32[$100>>2] = $98;
  $101 = $1;
  $102 = +HEAPF32[$101>>2];
  $103 = $1;
  $104 = ((($103)) + 4|0);
  $105 = $1;
  $106 = ((($105)) + 4|0);
  $107 = (+__Z5b2DotRK6b2Vec2S1_($104,$106));
  $108 = (+__Z5b2DotRK6b2Vec2S1_($center,$center));
  $109 = $107 - $108;
  $110 = $102 * $109;
  $111 = $1;
  $112 = ((($111)) + 12|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $113 + $110;
  HEAPF32[$112>>2] = $114;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11548|0),(11418|0),352,(11536|0));
  // unreachable;
 }
}
function __ZN6b2Vec2mLEf($this,$a) {
 $this = $this|0;
 $a = +$a;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = $4 * $3;
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $6;
 HEAPF32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN14b2PolygonShape8SetAsBoxEff($this,$hx,$hy) {
 $this = $this|0;
 $hx = +$hx;
 $hy = +$hy;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $hx;
 $2 = $hy;
 $3 = $0;
 $4 = ((($3)) + 148|0);
 HEAP32[$4>>2] = 4;
 $5 = ((($3)) + 20|0);
 $6 = $1;
 $7 = -$6;
 $8 = $2;
 $9 = -$8;
 __ZN6b2Vec23SetEff($5,$7,$9);
 $10 = ((($3)) + 20|0);
 $11 = ((($10)) + 8|0);
 $12 = $1;
 $13 = $2;
 $14 = -$13;
 __ZN6b2Vec23SetEff($11,$12,$14);
 $15 = ((($3)) + 20|0);
 $16 = ((($15)) + 16|0);
 $17 = $1;
 $18 = $2;
 __ZN6b2Vec23SetEff($16,$17,$18);
 $19 = ((($3)) + 20|0);
 $20 = ((($19)) + 24|0);
 $21 = $1;
 $22 = -$21;
 $23 = $2;
 __ZN6b2Vec23SetEff($20,$22,$23);
 $24 = ((($3)) + 84|0);
 __ZN6b2Vec23SetEff($24,0.0,-1.0);
 $25 = ((($3)) + 84|0);
 $26 = ((($25)) + 8|0);
 __ZN6b2Vec23SetEff($26,1.0,0.0);
 $27 = ((($3)) + 84|0);
 $28 = ((($27)) + 16|0);
 __ZN6b2Vec23SetEff($28,0.0,1.0);
 $29 = ((($3)) + 84|0);
 $30 = ((($29)) + 24|0);
 __ZN6b2Vec23SetEff($30,-1.0,0.0);
 $31 = ((($3)) + 12|0);
 __ZN6b2Vec27SetZeroEv($31);
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 128;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<3;
 $7 = (__Z7b2Alloci($6)|0);
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<3;
 _memset(($8|0),0,($11|0))|0;
 $12 = ((($1)) + 12|0);
 dest=$12; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = HEAP8[36029]|0;
 $14 = $13&1;
 $15 = $14&1;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $j = 0;
 $i = 1;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<=(640);
  if (!($18)) {
   break;
  }
  $19 = $j;
  $20 = ($19|0)<(14);
  if (!($20)) {
   label = 5;
   break;
  }
  $21 = $i;
  $22 = $j;
  $23 = (1784 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<=($24|0);
  $26 = $j;
  if ($25) {
   $27 = $26&255;
   $28 = $i;
   $29 = (35388 + ($28)|0);
   HEAP8[$29>>0] = $27;
  } else {
   $30 = (($26) + 1)|0;
   $j = $30;
   $31 = $j;
   $32 = $31&255;
   $33 = $i;
   $34 = (35388 + ($33)|0);
   HEAP8[$34>>0] = $32;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 5) {
  ___assert_fail((11579|0),(11597|0),73,(11680|0));
  // unreachable;
 }
 HEAP8[36029] = 1;
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6<<3)|0);
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  __Z6b2FreePv($10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = HEAP32[$1>>2]|0;
 __Z6b2FreePv($13);
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocator8AllocateEi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $block1 = 0, $blockCount = 0;
 var $blockSize = 0, $chunk = 0, $i = 0, $index = 0, $last = 0, $next = 0, $oldChunks = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 $6 = $2;
 $7 = (0)<($6|0);
 if (!($7)) {
  ___assert_fail((11697|0),(11597|0),104,(11948|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>(640);
 $10 = $2;
 if ($9) {
  $11 = (__Z7b2Alloci($10)|0);
  $0 = $11;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 $12 = (35388 + ($10)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $index = $14;
 $15 = $index;
 $16 = (0)<=($15|0);
 $17 = $index;
 $18 = ($17|0)<(14);
 $or$cond = $16 & $18;
 if (!($or$cond)) {
  ___assert_fail((11706|0),(11597|0),112,(11948|0));
  // unreachable;
 }
 $19 = $index;
 $20 = ((($3)) + 12|0);
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $index;
  $25 = ((($3)) + 12|0);
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $block = $27;
  $28 = $block;
  $29 = HEAP32[$28>>2]|0;
  $30 = $index;
  $31 = ((($3)) + 12|0);
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $block;
  $0 = $33;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 $34 = ((($3)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($3)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==($37|0);
 if ($38) {
  $39 = HEAP32[$3>>2]|0;
  $oldChunks = $39;
  $40 = ((($3)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 128)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($3)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44<<3;
  $46 = (__Z7b2Alloci($45)|0);
  HEAP32[$3>>2] = $46;
  $47 = HEAP32[$3>>2]|0;
  $48 = $oldChunks;
  $49 = ((($3)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50<<3;
  _memcpy(($47|0),($48|0),($51|0))|0;
  $52 = HEAP32[$3>>2]|0;
  $53 = ((($3)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + ($54<<3)|0);
  _memset(($55|0),0,1024)|0;
  $56 = $oldChunks;
  __Z6b2FreePv($56);
 }
 $57 = HEAP32[$3>>2]|0;
 $58 = ((($3)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + ($59<<3)|0);
 $chunk = $60;
 $61 = (__Z7b2Alloci(16384)|0);
 $62 = $chunk;
 $63 = ((($62)) + 4|0);
 HEAP32[$63>>2] = $61;
 $64 = $index;
 $65 = (1784 + ($64<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $blockSize = $66;
 $67 = $blockSize;
 $68 = $chunk;
 HEAP32[$68>>2] = $67;
 $69 = $blockSize;
 $70 = (16384 / ($69|0))&-1;
 $blockCount = $70;
 $71 = $blockCount;
 $72 = $blockSize;
 $73 = Math_imul($71, $72)|0;
 $74 = ($73|0)<=(16384);
 if (!($74)) {
  ___assert_fail((11742|0),(11597|0),140,(11948|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = $blockCount;
  $77 = (($76) - 1)|0;
  $78 = ($75|0)<($77|0);
  $79 = $chunk;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $blockSize;
  if (!($78)) {
   break;
  }
  $83 = $i;
  $84 = Math_imul($82, $83)|0;
  $85 = (($81) + ($84)|0);
  $block1 = $85;
  $86 = $chunk;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $blockSize;
  $90 = $i;
  $91 = (($90) + 1)|0;
  $92 = Math_imul($89, $91)|0;
  $93 = (($88) + ($92)|0);
  $next = $93;
  $94 = $next;
  $95 = $block1;
  HEAP32[$95>>2] = $94;
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $98 = $blockCount;
 $99 = (($98) - 1)|0;
 $100 = Math_imul($82, $99)|0;
 $101 = (($81) + ($100)|0);
 $last = $101;
 $102 = $last;
 HEAP32[$102>>2] = 0;
 $103 = $chunk;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$105>>2]|0;
 $107 = $index;
 $108 = ((($3)) + 12|0);
 $109 = (($108) + ($107<<2)|0);
 HEAP32[$109>>2] = $106;
 $110 = ((($3)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + 1)|0;
 HEAP32[$110>>2] = $112;
 $113 = $chunk;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $0 = $115;
 $116 = $0;
 STACKTOP = sp;return ($116|0);
}
function __ZN16b2BlockAllocator4FreeEPvi($this,$p,$size) {
 $this = $this|0;
 $p = $p|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $index = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $size;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = (0)<($6|0);
 if (!($7)) {
  ___assert_fail((11697|0),(11597|0),164,(11974|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>(640);
 if ($9) {
  $10 = $1;
  __Z6b2FreePv($10);
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = (35388 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $index = $14;
 $15 = $index;
 $16 = (0)<=($15|0);
 $17 = $index;
 $18 = ($17|0)<(14);
 $or$cond = $16 & $18;
 if (!($or$cond)) {
  ___assert_fail((11706|0),(11597|0),173,(11974|0));
  // unreachable;
 }
 $19 = $1;
 $block = $19;
 $20 = $index;
 $21 = ((($3)) + 12|0);
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $block;
 HEAP32[$24>>2] = $23;
 $25 = $block;
 $26 = $index;
 $27 = ((($3)) + 12|0);
 $28 = (($27) + ($26<<2)|0);
 HEAP32[$28>>2] = $25;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_b2Math_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6b2Vec2C2Eff(31176,0.0,0.0);
 return;
}
function __Z7b2Alloci($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __Z6b2FreePv($mem) {
 $mem = $mem|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function __Z5b2LogPKcz($string,$varargs) {
 $string = $string|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $string;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZN16b2StackAllocatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 102400|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 102404|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 102408|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 102796|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN16b2StackAllocatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 102400|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  ___assert_fail((11782|0),(11795|0),33,(11878|0));
  // unreachable;
 }
 $5 = ((($1)) + 102796|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11896|0),(11795|0),34,(11878|0));
  // unreachable;
 }
}
function __ZN16b2StackAllocator8AllocateEi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 102796|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(32);
 if (!($5)) {
  ___assert_fail((11914|0),(11795|0),45,(11948|0));
  // unreachable;
 }
 $6 = ((($2)) + 102412|0);
 $7 = ((($2)) + 102796|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + (($8*12)|0)|0);
 $entry = $9;
 $10 = $1;
 $11 = $entry;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($2)) + 102400|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($14) + ($15))|0;
 $17 = ($16|0)>(102400);
 if ($17) {
  $18 = $1;
  $19 = (__Z7b2Alloci($18)|0);
  $20 = $entry;
  HEAP32[$20>>2] = $19;
  $21 = $entry;
  $22 = ((($21)) + 8|0);
  HEAP8[$22>>0] = 1;
 } else {
  $23 = ((($2)) + 102400|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($2) + ($24)|0);
  $26 = $entry;
  HEAP32[$26>>2] = $25;
  $27 = $entry;
  $28 = ((($27)) + 8|0);
  HEAP8[$28>>0] = 0;
  $29 = $1;
  $30 = ((($2)) + 102400|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($29))|0;
  HEAP32[$30>>2] = $32;
 }
 $33 = $1;
 $34 = ((($2)) + 102404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($33))|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($2)) + 102408|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 102404|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__Z5b2MaxIiET_S0_S0_($38,$40)|0);
 $42 = ((($2)) + 102408|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($2)) + 102796|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $entry;
 $47 = HEAP32[$46>>2]|0;
 STACKTOP = sp;return ($47|0);
}
function __ZN16b2StackAllocator4FreeEPv($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = ((($2)) + 102796|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  ___assert_fail((11957|0),(11795|0),74,(11974|0));
  // unreachable;
 }
 $6 = ((($2)) + 102412|0);
 $7 = ((($2)) + 102796|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + (($8*12)|0)|0);
 $10 = ((($9)) + -12|0);
 $entry = $10;
 $11 = $1;
 $12 = $entry;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if (!($14)) {
  ___assert_fail((11979|0),(11795|0),82,(11974|0));
  // unreachable;
 }
 $15 = $entry;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  $19 = $1;
  __Z6b2FreePv($19);
 } else {
  $20 = $entry;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($2)) + 102400|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($22))|0;
  HEAP32[$23>>2] = $25;
 }
 $26 = $entry;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 102404|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - ($28))|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($2)) + 102796|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -1)|0;
 HEAP32[$32>>2] = $34;
 $1 = 0;
 STACKTOP = sp;return;
}
function __ZN7b2TimerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN7b2Timer5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK7b2Timer15GetMillisecondsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return +0;
}
function __ZN14b2CLBroadPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $broadPhaseSource = 0, $broadPhaseSourceLen = 0, $buffer = 0, $err = 0, $i = 0, $len = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $rayShapeIntersectionKernelNames = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 104|0;
 $vararg_buffer38 = sp + 96|0;
 $vararg_buffer36 = sp + 88|0;
 $vararg_buffer34 = sp + 80|0;
 $vararg_buffer32 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer28 = sp + 56|0;
 $vararg_buffer26 = sp + 48|0;
 $vararg_buffer24 = sp + 40|0;
 $vararg_buffer22 = sp + 32|0;
 $vararg_buffer20 = sp + 24|0;
 $vararg_buffer18 = sp + 16|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 140|0;
 $broadPhaseSource = sp + 136|0;
 $broadPhaseSourceLen = sp + 132|0;
 $len = sp + 128|0;
 $buffer = sp + 152|0;
 $rayShapeIntersectionKernelNames = sp + 112|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[11781]|0;
 $3 = $2&1;
 if (!($3)) {
  $123 = ((($1)) + 96|0);
  HEAP32[$123>>2] = 0;
  $124 = ((($1)) + 100|0);
  HEAP32[$124>>2] = 0;
  $125 = ((($1)) + 104|0);
  HEAP32[$125>>2] = 0;
  $126 = ((($1)) + 120|0);
  HEAP32[$126>>2] = 0;
  $127 = ((($1)) + 116|0);
  HEAP32[$127>>2] = 0;
  $128 = ((($1)) + 108|0);
  HEAP32[$128>>2] = 0;
  $129 = ((($1)) + 112|0);
  HEAP32[$129>>2] = 0;
  STACKTOP = sp;return;
 }
 (_printf(11996,$vararg_buffer)|0);
 HEAP32[$broadPhaseSource>>2] = 0;
 HEAP32[$broadPhaseSourceLen>>2] = 0;
 __ZL6shrLogPKcz(12028,$vararg_buffer16);
 $4 = (__ZL15shrFindFilePathPKcPv(12058,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj($4,19137,$broadPhaseSourceLen)|0);
 HEAP32[$broadPhaseSource>>2] = $5;
 $6 = HEAP32[$broadPhaseSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(12221,$vararg_buffer18);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($broadPhaseSource|0),(0|0),($err|0))|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf(19218,$vararg_buffer20)|0);
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_clBuildProgram(($13|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $14;
 $15 = HEAP32[$err>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  (_printf(19260,$vararg_buffer22)|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (__ZN10b2CLDevice8instanceEv()|0);
  $19 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($18)|0);
  (_clGetProgramBuildInfo(($17|0),($19|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer24>>2] = $buffer;
  (_printf(19304,$vararg_buffer24)|0);
  _exit(1);
  // unreachable;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (_clCreateKernel(($20|0),(12289|0),($err|0))|0);
 $22 = ((($1)) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 $26 = HEAP32[$err>>2]|0;
 $27 = ($26|0)!=(0);
 $or$cond = $25 | $27;
 if ($or$cond) {
  (_printf(16762,$vararg_buffer26)|0);
  _exit(1);
  // unreachable;
 }
 $28 = (__ZN10b2CLDevice8instanceEv()|0);
 $29 = ((($1)) + 4|0);
 $30 = ((($1)) + 48|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($28,$29,$30);
 $31 = HEAP32[$1>>2]|0;
 $32 = (_clCreateKernel(($31|0),(12302|0),($err|0))|0);
 $33 = ((($1)) + 8|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($1)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 $37 = HEAP32[$err>>2]|0;
 $38 = ($37|0)!=(0);
 $or$cond3 = $36 | $38;
 if ($or$cond3) {
  (_printf(16762,$vararg_buffer28)|0);
  _exit(1);
  // unreachable;
 }
 $39 = (__ZN10b2CLDevice8instanceEv()|0);
 $40 = ((($1)) + 8|0);
 $41 = ((($1)) + 52|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($39,$40,$41);
 $42 = HEAP32[$1>>2]|0;
 $43 = (_clCreateKernel(($42|0),(12318|0),($err|0))|0);
 $44 = ((($1)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($1)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 $48 = HEAP32[$err>>2]|0;
 $49 = ($48|0)!=(0);
 $or$cond5 = $47 | $49;
 if ($or$cond5) {
  (_printf(16762,$vararg_buffer30)|0);
  _exit(1);
  // unreachable;
 }
 $50 = (__ZN10b2CLDevice8instanceEv()|0);
 $51 = ((($1)) + 12|0);
 $52 = ((($1)) + 56|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($50,$51,$52);
 $53 = HEAP32[$1>>2]|0;
 $54 = (_clCreateKernel(($53|0),(12337|0),($err|0))|0);
 $55 = ((($1)) + 16|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($1)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 $59 = HEAP32[$err>>2]|0;
 $60 = ($59|0)!=(0);
 $or$cond7 = $58 | $60;
 if ($or$cond7) {
  (_printf(16762,$vararg_buffer32)|0);
  _exit(1);
  // unreachable;
 }
 $61 = (__ZN10b2CLDevice8instanceEv()|0);
 $62 = ((($1)) + 16|0);
 $63 = ((($1)) + 60|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($61,$62,$63);
 $64 = HEAP32[$1>>2]|0;
 $65 = (_clCreateKernel(($64|0),(12353|0),($err|0))|0);
 $66 = ((($1)) + 20|0);
 HEAP32[$66>>2] = $65;
 $67 = ((($1)) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0|0);
 $70 = HEAP32[$err>>2]|0;
 $71 = ($70|0)!=(0);
 $or$cond9 = $69 | $71;
 if ($or$cond9) {
  (_printf(16762,$vararg_buffer34)|0);
  _exit(1);
  // unreachable;
 }
 $72 = (__ZN10b2CLDevice8instanceEv()|0);
 $73 = ((($1)) + 20|0);
 $74 = ((($1)) + 64|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($72,$73,$74);
 $75 = HEAP32[$1>>2]|0;
 $76 = (_clCreateKernel(($75|0),(12366|0),($err|0))|0);
 $77 = ((($1)) + 24|0);
 HEAP32[$77>>2] = $76;
 $78 = ((($1)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 $81 = HEAP32[$err>>2]|0;
 $82 = ($81|0)!=(0);
 $or$cond11 = $80 | $82;
 if ($or$cond11) {
  (_printf(16762,$vararg_buffer36)|0);
  _exit(1);
  // unreachable;
 }
 $83 = (__ZN10b2CLDevice8instanceEv()|0);
 $84 = ((($1)) + 24|0);
 $85 = ((($1)) + 68|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($83,$84,$85);
 $86 = HEAP32[$1>>2]|0;
 $87 = (_clCreateKernel(($86|0),(12387|0),($err|0))|0);
 $88 = ((($1)) + 28|0);
 HEAP32[$88>>2] = $87;
 $89 = ((($1)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 $92 = HEAP32[$err>>2]|0;
 $93 = ($92|0)!=(0);
 $or$cond13 = $91 | $93;
 if ($or$cond13) {
  (_printf(12411,$vararg_buffer38)|0);
  _exit(1);
  // unreachable;
 }
 $94 = (__ZN10b2CLDevice8instanceEv()|0);
 $95 = ((($1)) + 28|0);
 $96 = ((($1)) + 72|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($94,$95,$96);
 ;HEAP32[$rayShapeIntersectionKernelNames>>2]=HEAP32[2000>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+4>>2]=HEAP32[2000+4>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+8>>2]=HEAP32[2000+8>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+12>>2]=HEAP32[2000+12>>2]|0;
 $i = 0;
 while(1) {
  $97 = $i;
  $98 = ($97|0)<(4);
  if (!($98)) {
   label = 27;
   break;
  }
  $99 = HEAP32[$1>>2]|0;
  $100 = $i;
  $101 = (($rayShapeIntersectionKernelNames) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (_clCreateKernel(($99|0),($102|0),($err|0))|0);
  $104 = $i;
  $105 = ((($1)) + 32|0);
  $106 = (($105) + ($104<<2)|0);
  HEAP32[$106>>2] = $103;
  $107 = $i;
  $108 = ((($1)) + 32|0);
  $109 = (($108) + ($107<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(0|0);
  $112 = HEAP32[$err>>2]|0;
  $113 = ($112|0)!=(0);
  $or$cond15 = $111 | $113;
  if ($or$cond15) {
   label = 25;
   break;
  }
  $114 = (__ZN10b2CLDevice8instanceEv()|0);
  $115 = $i;
  $116 = ((($1)) + 32|0);
  $117 = (($116) + ($115<<2)|0);
  $118 = $i;
  $119 = ((($1)) + 76|0);
  $120 = (($119) + ($118<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($114,$117,$120);
  $121 = $i;
  $122 = (($121) + 1)|0;
  $i = $122;
 }
 if ((label|0) == 25) {
  (_printf(12556,$vararg_buffer40)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $123 = ((($1)) + 96|0);
  HEAP32[$123>>2] = 0;
  $124 = ((($1)) + 100|0);
  HEAP32[$124>>2] = 0;
  $125 = ((($1)) + 104|0);
  HEAP32[$125>>2] = 0;
  $126 = ((($1)) + 120|0);
  HEAP32[$126>>2] = 0;
  $127 = ((($1)) + 116|0);
  HEAP32[$127>>2] = 0;
  $128 = ((($1)) + 108|0);
  HEAP32[$128>>2] = 0;
  $129 = ((($1)) + 112|0);
  HEAP32[$129>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30400]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30400)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 31184;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(31184|0),(___dso_handle|0))|0);
  }
 }
 $76 = 31184;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 36030;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(31184|0),(36030|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(31184|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 31184;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 31184;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(392,($3|0),(1880|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($3)) + 108|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = ((($3)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_vi(28,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1944;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(393,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  $9 = $1;
  (___cxa_begin_catch(($9|0))|0);
  __THREW__ = 0;
  invoke_v(394);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __THREW__ = 0;
   invoke_vi(83,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    $28 = $1;
    $29 = $2;
    ___resumeException($28|0);
    // unreachable;
   }
  }
 }
 $12 = ((($3)) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = ((($3)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $22 = ((($3)) + 97|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $25 = ((($3)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 __ZdaPv($26);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(28,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,35252)|0);
 $18 = ((($11)) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($11)) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = ((($11)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = ((($11)) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = ((($11)) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = ((($40)) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = ((($40)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = ((($40)) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = ((($47)) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($47)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = ((($47)) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($11)) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 $56 = ((($11)) + 96|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&1;
 if ($55) {
  if ($58) {
   $59 = ((($11)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = ((($11)) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = ((($11)) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = ((($11)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($11)) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = ((($11)) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($11)) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($11)) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = ((($11)) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = ((($11)) + 97|0);
  HEAP8[$75>>0] = 0;
  STACKTOP = sp;return;
 }
 if (!($58)) {
  $76 = ((($11)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($11)) + 44|0);
  $79 = ($77|0)!=($78|0);
  if ($79) {
   $80 = ((($11)) + 52|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($11)) + 60|0);
   HEAP32[$82>>2] = $81;
   $83 = ((($11)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($11)) + 56|0);
   HEAP32[$85>>2] = $84;
   $86 = ((($11)) + 97|0);
   HEAP8[$86>>0] = 0;
   $87 = ((($11)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (__Znaj($88)|0);
   $90 = ((($11)) + 32|0);
   HEAP32[$90>>2] = $89;
   $91 = ((($11)) + 96|0);
   HEAP8[$91>>0] = 1;
   STACKTOP = sp;return;
  }
 }
 $92 = ((($11)) + 52|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($11)) + 60|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($11)) + 60|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (__Znaj($96)|0);
 $98 = ((($11)) + 56|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($11)) + 97|0);
 HEAP8[$99>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = ((($21)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = ((($21)) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = ((($28)) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($28)) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = ((($28)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($20)) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = ((($20)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = ((($20)) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = ((($20)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = ((($20)) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($20)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 do {
  if ($50) {
   $51 = ((($20)) + 98|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&1;
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   $or$cond = $53 & $55;
   if ($or$cond) {
    $56 = $17;
    $57 = ((($20)) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($20)) + 96|0);
    HEAP8[$58>>0] = 0;
    break;
   } else {
    $59 = ((($20)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (__Znaj($60)|0);
    $62 = ((($20)) + 32|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($20)) + 96|0);
    HEAP8[$63>>0] = 1;
    break;
   }
  } else {
   $64 = ((($20)) + 44|0);
   $65 = ((($20)) + 32|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($20)) + 52|0);
   HEAP32[$66>>2] = 8;
   $67 = ((($20)) + 96|0);
   HEAP8[$67>>0] = 0;
  }
 } while(0);
 $68 = ((($20)) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = ((($20)) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = ((($20)) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = ((($20)) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 $80 = $7;
 $81 = $6;
 $82 = $79 ? $80 : $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($20)) + 60|0);
 HEAP32[$84>>2] = $83;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($20)) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = ((($20)) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = ((($20)) + 97|0);
   HEAP8[$92>>0] = 0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $93 = ((($20)) + 60|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (__Znaj($94)|0);
 $96 = ((($20)) + 56|0);
 HEAP32[$96>>2] = $95;
 $97 = ((($20)) + 97|0);
 HEAP8[$97>>0] = 1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $6 = sp + 48|0;
 $8 = sp + 40|0;
 $10 = sp + 32|0;
 $12 = sp + 24|0;
 $15 = sp + 16|0;
 $__r = sp;
 $18 = sp + 64|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(1600|0),(368|0));
  // unreachable;
 }
 $28 = ((($23)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = ((($23)) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = $__width;
  $39 = ($38|0)<=(0);
  $40 = $15;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)!=(0);
  $47 = ($45|0)!=(0);
  $48 = $46 | $47;
  $or$cond = $39 & $48;
  if (!($or$cond)) {
   $49 = HEAP32[$23>>2]|0;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    switch ($70|0) {
    case 0:  {
     $__whence = 0;
     break;
    }
    case 1:  {
     $__whence = 1;
     break;
    }
    case 2:  {
     $__whence = 2;
     break;
    }
    default: {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = ((($75)) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    }
    $87 = ((($23)) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (___fseeko($88,$103,$102)|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = ((($110)) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = ((($23)) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (___ftello($123)|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = ((($131)) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = ((($23)) + 72|0);
     ;HEAP32[$18>>2]=HEAP32[$143>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144>>2]=HEAP32[$10>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result>>2]=HEAP32[$__r>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = ((($58)) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 16|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = ((($10)) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = ((($37)) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (___fseeko($36,$41,0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = ((($51)) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = ((($10)) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9>>2]=HEAP32[$64>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63>>2]=HEAP32[$9>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result>>2]=HEAP32[$__sp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($23)) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 28|0;
 $__c = sp;
 $__state = sp + 16|0;
 $26 = $this;
 $27 = $26;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = ((($27)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(1600|0),(368|0));
  // unreachable;
 }
 $35 = ((($27)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 if ($38) {
  $24 = $27;
  $39 = $24;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $27;
  $42 = $14;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)!=($44|0);
  if ($45) {
   $46 = HEAP32[$27>>2]|0;
   $47 = ((($46)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $50 = (FUNCTION_TABLE_iii[$48 & 1023]($27,$49)|0);
   $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $52 = ($50|0)==($51|0);
   if ($52) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
  }
  while(1) {
   $53 = ((($27)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($27)) + 72|0);
   $56 = ((($27)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($27)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($27)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + ($61)|0);
   $2 = $54;
   $3 = $55;
   $4 = $57;
   $5 = $62;
   $6 = $__extbe;
   $63 = $2;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = $4;
   $69 = $5;
   $70 = $6;
   $71 = (FUNCTION_TABLE_iiiiii[$66 & 1023]($63,$67,$68,$69,$70)|0);
   $__r = $71;
   $72 = HEAP32[$__extbe>>2]|0;
   $73 = ((($27)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $72;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $__nmemb = $77;
   $78 = ((($27)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $__nmemb;
   $81 = ((($27)) + 64|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_fwrite($79,1,$80,$82)|0);
   $84 = $__nmemb;
   $85 = ($83|0)!=($84|0);
   if ($85) {
    label = 10;
    break;
   }
   $86 = $__r;
   $87 = ($86|0)==(1);
   if (!($87)) {
    break;
   }
  }
  if ((label|0) == 10) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $88 = $__r;
  $89 = ($88|0)==(2);
  if ($89) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $90 = ((($27)) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_fflush($91)|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
 } else {
  $94 = ((($27)) + 92|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 8;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = ((($27)) + 80|0);
   ;HEAP32[$__state>>2]=HEAP32[$98>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
   $__update_st = 0;
   $99 = ((($27)) + 98|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   do {
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = ((($102)) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = ((($27)) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = ((($27)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($27)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = ((($140)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = ((($143)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
      break;
     }
     $10 = $27;
     $164 = $10;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $11 = $27;
     $167 = $11;
     $168 = ((($167)) + 16|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($166|0)!=($169|0);
     if ($170) {
      $171 = ((($27)) + 68|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ((($27)) + 32|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($27)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $12 = $27;
      $177 = $12;
      $178 = ((($177)) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $13 = $27;
      $180 = $13;
      $181 = ((($180)) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $179;
      $184 = $182;
      $185 = (($183) - ($184))|0;
      $15 = $172;
      $16 = $__state;
      $17 = $174;
      $18 = $176;
      $19 = $185;
      $186 = $15;
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($187)) + 32|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $16;
      $191 = $17;
      $192 = $18;
      $193 = $19;
      $194 = (FUNCTION_TABLE_iiiiii[$189 & 1023]($186,$190,$191,$192,$193)|0);
      $__off = $194;
      $195 = ((($27)) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ((($27)) + 32|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $196;
      $200 = $198;
      $201 = (($199) - ($200))|0;
      $202 = $__off;
      $203 = (($201) - ($202))|0;
      $204 = ($203|0)<(0);
      $205 = $204 << 31 >> 31;
      $206 = $__c;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
      $213 = tempRet0;
      $214 = $__c;
      $215 = $214;
      HEAP32[$215>>2] = $212;
      $216 = (($214) + 4)|0;
      $217 = $216;
      HEAP32[$217>>2] = $213;
      $__update_st = 1;
     }
    }
   } while(0);
   $218 = ((($27)) + 64|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $__c;
   $221 = $220;
   $222 = HEAP32[$221>>2]|0;
   $223 = (($220) + 4)|0;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
   $227 = tempRet0;
   $228 = (___fseeko($219,$226,1)|0);
   $229 = ($228|0)!=(0);
   if ($229) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $230 = $__update_st;
   $231 = $230&1;
   if ($231) {
    $232 = ((($27)) + 72|0);
    ;HEAP32[$232>>2]=HEAP32[$__state>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
   }
   $233 = ((($27)) + 32|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($27)) + 40|0);
   HEAP32[$235>>2] = $234;
   $236 = ((($27)) + 36|0);
   HEAP32[$236>>2] = $234;
   $20 = $27;
   $21 = 0;
   $22 = 0;
   $23 = 0;
   $237 = $20;
   $238 = $21;
   $239 = ((($237)) + 8|0);
   HEAP32[$239>>2] = $238;
   $240 = $22;
   $241 = ((($237)) + 12|0);
   HEAP32[$241>>2] = $240;
   $242 = $23;
   $243 = ((($237)) + 16|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($27)) + 92|0);
   HEAP32[$244>>2] = 0;
  }
 }
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $23 = sp + 327|0;
 $31 = sp;
 $34 = sp + 326|0;
 $__1buf = sp + 324|0;
 $71 = sp + 48|0;
 $72 = sp + 44|0;
 $73 = sp + 28|0;
 $74 = sp + 24|0;
 $__inext = sp + 12|0;
 $70 = $this;
 $75 = $70;
 $76 = ((($75)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = ((($82)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = ((($__1buf)) + 1|0);
  $87 = ((($__1buf)) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = ((($88)) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = ((($88)) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = ((($88)) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31>>0]=HEAP8[$34>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  $116 = $30;
  $117 = $29;
  $118 = $115 ? $116 : $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = ((($125)) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 do {
  if ($128) {
   $1 = $75;
   $129 = $1;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $2 = $75;
   $132 = $2;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $__unget_sz;
   $136 = (0 - ($135))|0;
   $137 = (($134) + ($136)|0);
   $138 = $__unget_sz;
   $139 = $138;
   _memmove(($131|0),($137|0),($139|0))|0;
   $140 = ((($75)) + 98|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&1;
   if ($142) {
    $3 = $75;
    $143 = $3;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $4 = $75;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $145;
    $150 = $148;
    $151 = (($149) - ($150))|0;
    $152 = $__unget_sz;
    $153 = (($151) - ($152))|0;
    $__nmemb = $153;
    $5 = $75;
    $154 = $5;
    $155 = ((($154)) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $__unget_sz;
    $158 = (($156) + ($157)|0);
    $159 = $__nmemb;
    $160 = ((($75)) + 64|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (_fread($158,1,$159,$161)|0);
    $__nmemb = $162;
    $163 = $__nmemb;
    $164 = ($163|0)!=(0);
    if (!($164)) {
     break;
    }
    $6 = $75;
    $165 = $6;
    $166 = ((($165)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = ((($173)) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = ((($180)) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = ((($180)) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = ((($180)) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = ((($187)) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
    break;
   }
   $192 = ((($75)) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($75)) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ((($75)) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ((($75)) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = ((($75)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($75)) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($75)) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = ((($75)) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = ((($75)) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($75)) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($75)) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = ((($75)) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = ((($75)) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = ((($75)) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = ((($75)) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($75)) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   $245 = $19;
   $246 = $18;
   $247 = $244 ? $245 : $246;
   $248 = HEAP32[$247>>2]|0;
   $__nmemb1 = $248;
   $249 = ((($75)) + 80|0);
   $250 = ((($75)) + 72|0);
   ;HEAP32[$249>>2]=HEAP32[$250>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = ((($75)) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = ((($75)) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread($252,1,$253,$255)|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = ((($75)) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(1600|0),(368|0));
     // unreachable;
    }
    $263 = ((($75)) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = ((($75)) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = ((($75)) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($75)) + 72|0);
    $271 = ((($75)) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($75)) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ((($75)) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = ((($276)) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = ((($281)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($75)) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = ((($75)) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($75)) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($75)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = ((($307)) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = ((($307)) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = ((($314)) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
     break;
    }
    $319 = HEAP32[$__inext>>2]|0;
    $49 = $75;
    $320 = $49;
    $321 = ((($320)) + 8|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $__unget_sz;
    $324 = (($322) + ($323)|0);
    $325 = ($319|0)!=($324|0);
    if ($325) {
     $50 = $75;
     $326 = $50;
     $327 = ((($326)) + 8|0);
     $328 = HEAP32[$327>>2]|0;
     $51 = $75;
     $329 = $51;
     $330 = ((($329)) + 8|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $__unget_sz;
     $333 = (($331) + ($332)|0);
     $334 = HEAP32[$__inext>>2]|0;
     $52 = $75;
     $53 = $328;
     $54 = $333;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = ((($335)) + 8|0);
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $339 = ((($335)) + 12|0);
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $341 = ((($335)) + 16|0);
     HEAP32[$341>>2] = $340;
     $56 = $75;
     $342 = $56;
     $343 = ((($342)) + 12|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = HEAP8[$344>>0]|0;
     $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
     $__c = $346;
    }
   }
  } else {
   $58 = $75;
   $347 = $58;
   $348 = ((($347)) + 12|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = HEAP8[$349>>0]|0;
   $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
   $__c = $351;
  }
 } while(0);
 $63 = $75;
 $352 = $63;
 $353 = ((($352)) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = ((($356)) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = ((($356)) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = ((($356)) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 48|0;
 $12 = $this;
 $13 = $12;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$11>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$11>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = ((($18)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($18)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = ((($18)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($13)) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = ((($13)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($13)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($13)) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = ((($13)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($13)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = ((($39)) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = ((($39)) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = ((($39)) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = ((($13)) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($13)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($13)) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = ((($13)) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($13)) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = ((($58)) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = ((($58)) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = ((($13)) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 HEAP8[$11>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$11>>0]|0;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = ((($25)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = ((($11)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = ((($44)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 16|0;
 $__e = sp + 8|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = ((($__1buf)) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = ((($61)) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($61)) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = ((($61)) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = ((($72)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = ((($42)) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  L13: do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = ((($87)) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = ((($90)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = ((($42)) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite($98,1,$99,$101)|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if ($104) {
     $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $105;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   } else {
    $106 = ((($42)) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = ((($42)) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 13;
      break;
     }
     $112 = ((($42)) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($42)) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = ((($115)) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = ((($118)) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($42)) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($42)) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($42)) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($129)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = ((($141)) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 15;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = ((($148)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = ((($151)) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = ((($157)) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = ((($42)) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite($159,1,$160,$162)|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 18;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      $169 = $__r;
      $170 = ($169|0)==(1);
      $or$cond = $168 | $170;
      if (!($or$cond)) {
       label = 24;
       break;
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = ((($42)) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = ((($42)) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = ((($42)) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite($178,1,$179,$181)|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 21;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = ((($189)) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = ((($192)) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = ((($192)) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = ((($192)) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = ((($198)) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = ((($201)) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = ((($207)) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      break L13;
     }
    }
    if ((label|0) == 13) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(1600|0),(368|0));
     // unreachable;
    }
    else if ((label|0) == 15) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 18) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 21) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = ((($217)) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = ((($217)) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = ((($217)) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = ((($19)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = ((($19)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($14)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 do {
  if ($28) {
   $29 = ((($14)) + 98|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = ((($14)) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($14)) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($14)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - 1)|0;
    $39 = (($35) + ($38)|0);
    $0 = $14;
    $1 = $33;
    $2 = $39;
    $40 = $0;
    $41 = $1;
    $42 = ((($40)) + 24|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($40)) + 20|0);
    HEAP32[$43>>2] = $41;
    $44 = $2;
    $45 = ((($40)) + 28|0);
    HEAP32[$45>>2] = $44;
    break;
   } else {
    $46 = ((($14)) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($14)) + 56|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($14)) + 60|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - 1)|0;
    $53 = (($49) + ($52)|0);
    $3 = $14;
    $4 = $47;
    $5 = $53;
    $54 = $3;
    $55 = $4;
    $56 = ((($54)) + 24|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($54)) + 20|0);
    HEAP32[$57>>2] = $55;
    $58 = $5;
    $59 = ((($54)) + 28|0);
    HEAP32[$59>>2] = $58;
    break;
   }
  } else {
   $6 = $14;
   $7 = 0;
   $8 = 0;
   $60 = $6;
   $61 = $7;
   $62 = ((($60)) + 24|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($60)) + 20|0);
   HEAP32[$63>>2] = $61;
   $64 = $8;
   $65 = ((($60)) + 28|0);
   HEAP32[$65>>2] = $64;
  }
 } while(0);
 $66 = ((($14)) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $32 = sp + 60|0;
 $33 = sp + 56|0;
 $36 = sp + 44|0;
 $37 = sp + 40|0;
 $40 = sp + 28|0;
 $41 = sp + 24|0;
 $__h = sp + 8|0;
 $42 = $this;
 $45 = $42;
 $__rt = 0;
 $46 = ((($45)) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $128 = $__rt;
  STACKTOP = sp;return ($128|0);
 }
 $__rt = $45;
 $49 = ((($45)) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $39 = $__h;
 HEAP32[$40>>2] = $50;
 HEAP32[$41>>2] = 395;
 $51 = $39;
 $38 = $40;
 $52 = $38;
 $53 = HEAP32[$52>>2]|0;
 $27 = $41;
 $54 = $27;
 $55 = HEAP32[$54>>2]|0;
 $35 = $51;
 HEAP32[$36>>2] = $53;
 HEAP32[$37>>2] = $55;
 $56 = $35;
 $34 = $36;
 $57 = $34;
 $58 = HEAP32[$57>>2]|0;
 $28 = $37;
 $59 = $28;
 $60 = HEAP32[$59>>2]|0;
 $31 = $56;
 HEAP32[$32>>2] = $58;
 HEAP32[$33>>2] = $60;
 $61 = $31;
 $30 = $32;
 $62 = $30;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = ((($61)) + 4|0);
 $29 = $33;
 $65 = $29;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 $67 = HEAP32[$45>>2]|0;
 $68 = ((($67)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 __THREW__ = 0;
 $70 = (invoke_ii($69|0,($45|0))|0);
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if (!($72)) {
  $73 = ($70|0)!=(0);
  if ($73) {
   $__rt = 0;
  }
  $15 = $__h;
  $96 = $15;
  $14 = $96;
  $97 = $14;
  $13 = $97;
  $98 = $13;
  $99 = HEAP32[$98>>2]|0;
  $__t$i = $99;
  $12 = $96;
  $100 = $12;
  $11 = $100;
  $101 = $11;
  HEAP32[$101>>2] = 0;
  $102 = $__t$i;
  __THREW__ = 0;
  $103 = (invoke_ii(395,($102|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if (!($105)) {
   $106 = ($103|0)==(0);
   if ($106) {
    $107 = ((($45)) + 64|0);
    HEAP32[$107>>2] = 0;
   } else {
    $__rt = 0;
   }
   $10 = $__h;
   $108 = $10;
   $6 = $108;
   $7 = 0;
   $109 = $6;
   $5 = $109;
   $110 = $5;
   $4 = $110;
   $111 = $4;
   $112 = HEAP32[$111>>2]|0;
   $__tmp$i$i1 = $112;
   $113 = $7;
   $3 = $109;
   $114 = $3;
   $2 = $114;
   $115 = $2;
   HEAP32[$115>>2] = $113;
   $116 = $__tmp$i$i1;
   $117 = ($116|0)!=(0|0);
   if (!($117)) {
    $128 = $__rt;
    STACKTOP = sp;return ($128|0);
   }
   $1 = $109;
   $118 = $1;
   $0 = $118;
   $119 = $0;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $__tmp$i$i1;
   __THREW__ = 0;
   (invoke_ii($121|0,($122|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    $125 = ___cxa_find_matching_catch_2()|0;
    $126 = tempRet0;
    $8 = $125;
    $9 = $126;
    $127 = $8;
    ___cxa_call_unexpected(($127|0));
    // unreachable;
   } else {
    $128 = $__rt;
    STACKTOP = sp;return ($128|0);
   }
  }
 }
 $74 = ___cxa_find_matching_catch_2()|0;
 $75 = tempRet0;
 $43 = $74;
 $44 = $75;
 $26 = $__h;
 $76 = $26;
 $22 = $76;
 $23 = 0;
 $77 = $22;
 $21 = $77;
 $78 = $21;
 $20 = $78;
 $79 = $20;
 $80 = HEAP32[$79>>2]|0;
 $__tmp$i$i = $80;
 $81 = $23;
 $19 = $77;
 $82 = $19;
 $18 = $82;
 $83 = $18;
 HEAP32[$83>>2] = $81;
 $84 = $__tmp$i$i;
 $85 = ($84|0)!=(0|0);
 if (!($85)) {
  $129 = $43;
  $130 = $44;
  ___resumeException($129|0);
  // unreachable;
 }
 $17 = $77;
 $86 = $17;
 $16 = $86;
 $87 = $16;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $__tmp$i$i;
 __THREW__ = 0;
 (invoke_ii($89|0,($90|0))|0);
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $93 = ___cxa_find_matching_catch_3(0|0)|0;
  $94 = tempRet0;
  $24 = $93;
  $25 = $94;
  $95 = $24;
  ___cxa_call_unexpected(($95|0));
  // unreachable;
 } else {
  $129 = $43;
  $130 = $44;
  ___resumeException($129|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(20,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 64|0;
 $7 = sp + 44|0;
 $12 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 $13 = $this;
 $19 = $13;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($19);
 $20 = 1944;
 HEAP32[$19>>2] = $20;
 $21 = ((($19)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($19)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($19)) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($19)) + 52|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($19)) + 56|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($19)) + 60|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($19)) + 64|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($19)) + 68|0);
 $10 = $12;
 $11 = -1;
 $29 = $10;
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$12>>2]|0;
 HEAP32[$16>>2] = $30;
 $9 = $16;
 HEAP32[$28>>2] = 0;
 $31 = ((($19)) + 72|0);
 ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;
 $32 = ((($19)) + 80|0);
 ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;
 $33 = ((($19)) + 88|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($19)) + 92|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($19)) + 96|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($19)) + 97|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($19)) + 98|0);
 HEAP8[$37>>0] = 0;
 $8 = $19;
 $38 = $8;
 $39 = ((($38)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($7,$39);
 $40 = HEAP32[$7>>2]|0;
 HEAP32[$17>>2] = $40;
 $4 = $17;
 $41 = $4;
 __THREW__ = 0;
 $42 = (invoke_iii(396,($41|0),(35252|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  $5 = $45;
  $6 = $46;
  $47 = $5;
  ___cxa_call_unexpected(($47|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(389,($17|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 L4: do {
  if ($49) {
   label = 8;
  } else {
   do {
    if ($42) {
     $3 = $19;
     $50 = $3;
     $51 = ((($50)) + 4|0);
     __ZNSt3__16localeC2ERKS0_($2,$51);
     $52 = HEAP32[$2>>2]|0;
     HEAP32[$18>>2] = $52;
     $1 = $18;
     $53 = $1;
     __THREW__ = 0;
     $54 = (invoke_iii(388,($53|0),(35252|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = tempRet0;
      $14 = $71;
      $15 = $72;
      __THREW__ = 0;
      invoke_vi(389,($18|0));
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if (!($74)) {
       break L4;
      }
      $84 = ___cxa_find_matching_catch_3(0|0)|0;
      $85 = tempRet0;
      ___clang_call_terminate($84);
      // unreachable;
     } else {
      $57 = ((($19)) + 68|0);
      HEAP32[$57>>2] = $54;
      __THREW__ = 0;
      invoke_vi(389,($18|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break L4;
      }
      $60 = ((($19)) + 68|0);
      $61 = HEAP32[$60>>2]|0;
      $0 = $61;
      $62 = $0;
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($63)) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($62)|0);
      $67 = ((($19)) + 98|0);
      $68 = $66&1;
      HEAP8[$67>>0] = $68;
      break;
     }
    }
   } while(0);
   $75 = HEAP32[$19>>2]|0;
   $76 = ((($75)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($77|0,($19|0),(0|0),4096)|0);
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    label = 8;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $14 = $69;
  $15 = $70;
 }
 __THREW__ = 0;
 invoke_vi(83,($19|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $84 = ___cxa_find_matching_catch_3(0|0)|0;
  $85 = tempRet0;
  ___clang_call_terminate($84);
  // unreachable;
 } else {
  $82 = $14;
  $83 = $15;
  ___resumeException($82|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $__rt = $3;
   $7 = $2;
   $8 = $7 & -3;
   do {
    switch ($8|0) {
    case 48: case 16:  {
     $__mdstr = 20861;
     break;
    }
    case 1: case 17:  {
     $__mdstr = 12187;
     break;
    }
    case 8:  {
     $__mdstr = 12189;
     break;
    }
    case 24:  {
     $__mdstr = 12191;
     break;
    }
    case 56:  {
     $__mdstr = 12194;
     break;
    }
    case 9: case 25:  {
     $__mdstr = 12197;
     break;
    }
    case 52: case 20:  {
     $__mdstr = 12200;
     break;
    }
    case 5: case 21:  {
     $__mdstr = 12203;
     break;
    }
    case 12:  {
     $__mdstr = 12206;
     break;
    }
    case 28:  {
     $__mdstr = 12209;
     break;
    }
    case 60:  {
     $__mdstr = 12213;
     break;
    }
    case 13: case 29:  {
     $__mdstr = 12217;
     break;
    }
    default: {
     $__rt = 0;
    }
    }
   } while(0);
   $9 = $__rt;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $1;
    $12 = $__mdstr;
    $13 = (_fopen($11,$12)|0);
    $14 = ((($3)) + 64|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($3)) + 64|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     $__rt = 0;
     break;
    }
    $18 = $2;
    $19 = ((($3)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = $2;
    $21 = $20 & 2;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = ((($3)) + 64|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_fseek($24,0,2)|0);
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($3)) + 64|0);
      $28 = HEAP32[$27>>2]|0;
      (_fclose($28)|0);
      $29 = ((($3)) + 64|0);
      HEAP32[$29>>2] = 0;
      $__rt = 0;
     }
    }
   }
  }
 } while(0);
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNK10b2CLDevice10GetContextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK10b2CLDevice16GetCurrentDeviceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14b2CLBroadPhase16CreateGPUBuffersEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $exp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exp = sp;
 $0 = $this;
 $1 = $shape_num;
 $2 = $0;
 $3 = ((($2)) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = ((($2)) + 108|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = (__ZN10b2CLDevice8instanceEv()|0);
   $11 = ((($2)) + 108|0);
   $12 = HEAP32[$11>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
  }
  $13 = (__ZN10b2CLDevice8instanceEv()|0);
  $14 = $1;
  $15 = ($14*20)|0;
  $16 = (__ZN10b2CLDevice13allocateArrayEjb($13,$15,0)|0);
  $17 = ((($2)) + 108|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($2)) + 112|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = (__ZN10b2CLDevice8instanceEv()|0);
   $22 = ((($2)) + 112|0);
   $23 = HEAP32[$22>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($21,$23);
  }
  $24 = (__ZN10b2CLDevice8instanceEv()|0);
  $25 = $1;
  $26 = (($25) + 1)|0;
  $27 = $26<<4;
  $28 = (__ZN10b2CLDevice13allocateArrayEjb($24,$27,0)|0);
  $29 = ((($2)) + 112|0);
  HEAP32[$29>>2] = $28;
  $30 = $1;
  $31 = ((($2)) + 100|0);
  HEAP32[$31>>2] = $30;
 }
 $32 = $1;
 $33 = ($32|0)<(512);
 if ($33) {
  $34 = ((($2)) + 92|0);
  HEAP32[$34>>2] = 512;
 } else {
  $35 = $1;
  $36 = (+($35|0));
  $37 = $36;
  (+_frexp($37,$exp));
  $38 = HEAP32[$exp>>2]|0;
  $39 = (($38) - 1)|0;
  $40 = 1 << $39;
  $41 = ((($2)) + 92|0);
  HEAP32[$41>>2] = $40;
  $42 = ((($2)) + 92|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = ($43|0)<($44|0);
  if ($45) {
   $46 = ((($2)) + 92|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 << 1;
   HEAP32[$46>>2] = $48;
  }
 }
 $49 = ((($2)) + 96|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($2)) + 92|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)<($52|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = ((($2)) + 116|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = (__ZN10b2CLDevice8instanceEv()|0);
  $58 = ((($2)) + 116|0);
  $59 = HEAP32[$58>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($57,$59);
 }
 $60 = (__ZN10b2CLDevice8instanceEv()|0);
 $61 = ((($2)) + 92|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62<<2;
 $64 = (__ZN10b2CLDevice13allocateArrayEjb($60,$63,0)|0);
 $65 = ((($2)) + 116|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($2)) + 120|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = (__ZN10b2CLDevice8instanceEv()|0);
  $70 = ((($2)) + 120|0);
  $71 = HEAP32[$70>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($69,$71);
 }
 $72 = (__ZN10b2CLDevice8instanceEv()|0);
 $73 = ((($2)) + 92|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74<<2;
 $76 = (__ZN10b2CLDevice13allocateArrayEjb($72,$75,0)|0);
 $77 = ((($2)) + 120|0);
 HEAP32[$77>>2] = $76;
 $78 = ((($2)) + 92|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($2)) + 96|0);
 HEAP32[$80>>2] = $79;
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase12ComputeAABBsEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $global = sp + 12|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (__ZN14b2CLCommonData8instanceEv()|0);
 $10 = ((($9)) + 56|0);
 $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
 $12 = $err;
 $13 = $12 | $11;
 $err = $13;
 $14 = ((($2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $a;
 $17 = (($16) + 1)|0;
 $a = $17;
 $18 = (__ZN14b2CLCommonData8instanceEv()|0);
 $19 = ((($18)) + 72|0);
 $20 = (_clSetKernelArg(($15|0),($16|0),4,($19|0))|0);
 $21 = $err;
 $22 = $21 | $20;
 $err = $22;
 $23 = ((($2)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $a;
 $26 = (($25) + 1)|0;
 $a = $26;
 $27 = (__ZN14b2CLCommonData8instanceEv()|0);
 $28 = ((($27)) + 64|0);
 $29 = (_clSetKernelArg(($24|0),($25|0),4,($28|0))|0);
 $30 = $err;
 $31 = $30 | $29;
 $err = $31;
 $32 = ((($2)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $a;
 $35 = (($34) + 1)|0;
 $a = $35;
 $36 = ((($2)) + 108|0);
 $37 = (_clSetKernelArg(($33|0),($34|0),4,($36|0))|0);
 $38 = $err;
 $39 = $38 | $37;
 $err = $39;
 $40 = ((($2)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $a;
 $43 = (($42) + 1)|0;
 $a = $43;
 $44 = (__ZN14b2CLCommonData8instanceEv()|0);
 $45 = ((($44)) + 60|0);
 $46 = (_clSetKernelArg(($41|0),($42|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = ((($2)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = (_clSetKernelArg(($50|0),($51|0),4,($1|0))|0);
 $54 = $err;
 $55 = $54 | $53;
 $err = $55;
 $56 = $err;
 $57 = ($56|0)!=(0);
 if ($57) {
  HEAP32[$vararg_buffer>>2] = 12620;
  (_printf(19385,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $58 = ((($2)) + 92|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($2)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + ($61))|0;
 $63 = (($62) - 1)|0;
 $64 = ((($2)) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63>>>0) / ($65>>>0))&-1;
 $group_num = $66;
 $67 = $group_num;
 $68 = ((($2)) + 48|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = Math_imul($67, $69)|0;
 HEAP32[$global>>2] = $70;
 $err = 0;
 $71 = (__ZN10b2CLDevice8instanceEv()|0);
 $72 = (__ZNK10b2CLDevice15GetCommandQueueEv($71)|0);
 $73 = ((($2)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($2)) + 48|0);
 $76 = (_clEnqueueNDRangeKernel(($72|0),($74|0),1,(0|0),($global|0),($75|0),0,(0|0),(0|0))|0);
 $77 = $err;
 $78 = $77 | $76;
 $err = $78;
 $79 = $err;
 $80 = ($79|0)!=(0);
 if (!($80)) {
  STACKTOP = sp;return;
 }
 (_printf(12639,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __ZNK10b2CLDevice15GetCommandQueueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14b2CLBroadPhase18PrepareSumVarianceEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $$arith = 0, $$arith4 = 0, $$overflow = 0, $$overflow5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0;
 var $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $i = 0, $s = 0, $s2 = 0;
 var $scanResult = 0, $sumList = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 96|0;
 $global = sp + 80|0;
 $s = sp + 72|0;
 $s2 = sp + 64|0;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $v = sp + 24|0;
 $4 = sp + 16|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $5 = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $8 = ((($5)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $a;
 $11 = (($10) + 1)|0;
 $a = $11;
 $12 = ((($5)) + 108|0);
 $13 = (_clSetKernelArg(($9|0),($10|0),4,($12|0))|0);
 $14 = $err;
 $15 = $14 | $13;
 $err = $15;
 $16 = ((($5)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $a = $19;
 $20 = ((($5)) + 112|0);
 $21 = (_clSetKernelArg(($17|0),($18|0),4,($20|0))|0);
 $22 = $err;
 $23 = $22 | $21;
 $err = $23;
 $24 = ((($5)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $a;
 $27 = (($26) + 1)|0;
 $a = $27;
 $28 = (_clSetKernelArg(($25|0),($26|0),4,($1|0))|0);
 $29 = $err;
 $30 = $29 | $28;
 $err = $30;
 $31 = $err;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[$vararg_buffer>>2] = 12688;
  (_printf(19385,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $33 = ((($5)) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($5)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + ($36))|0;
 $38 = (($37) - 1)|0;
 $39 = ((($5)) + 56|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38>>>0) / ($40>>>0))&-1;
 $group_num = $41;
 $42 = $group_num;
 $43 = ((($5)) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = Math_imul($42, $44)|0;
 HEAP32[$global>>2] = $45;
 $err = 0;
 $46 = (__ZN10b2CLDevice8instanceEv()|0);
 $47 = (__ZNK10b2CLDevice15GetCommandQueueEv($46)|0);
 $48 = ((($5)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($5)) + 56|0);
 $51 = (_clEnqueueNDRangeKernel(($47|0),($49|0),1,(0|0),($global|0),($50|0),0,(0|0),(0|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = $err;
 $55 = ($54|0)!=(0);
 if ($55) {
  (_printf(12639,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $56 = ((($5)) + 104|0);
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$1>>2]|0;
 $58 = ($57|0)>(1);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 __ZN6b2Vec2C2Ev($s);
 __ZN6b2Vec2C2Ev($s2);
 $59 = HEAP32[$1>>2]|0;
 $60 = $59<<2;
 $$arith4 = $60<<2;
 $$overflow5 = ($60>>>0)>(1073741823);
 $61 = $$overflow5 ? -1 : $$arith4;
 $62 = (__Znaj($61)|0);
 $sumList = $62;
 $63 = HEAP32[$1>>2]|0;
 $64 = (($63) + 1)|0;
 $65 = $64<<2;
 $$arith = $65<<2;
 $$overflow = ($65>>>0)>(1073741823);
 $66 = $$overflow ? -1 : $$arith;
 $67 = (__Znaj($66)|0);
 $scanResult = $67;
 $68 = (__ZN10b2CLDevice8instanceEv()|0);
 $69 = $sumList;
 $70 = ((($5)) + 112|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$1>>2]|0;
 $73 = $72<<4;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($68,$69,$71,0,$73,1);
 $74 = $scanResult;
 $75 = ((($74)) + 12|0);
 HEAPF32[$75>>2] = 0.0;
 $76 = $scanResult;
 $77 = ((($76)) + 8|0);
 HEAPF32[$77>>2] = 0.0;
 $78 = $scanResult;
 $79 = ((($78)) + 4|0);
 HEAPF32[$79>>2] = 0.0;
 $80 = $scanResult;
 HEAPF32[$80>>2] = 0.0;
 $i = 1;
 while(1) {
  $81 = $i;
  $82 = HEAP32[$1>>2]|0;
  $83 = (($82) + 1)|0;
  $84 = ($81|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = $i;
  $86 = (($85) - 1)|0;
  $87 = $86<<2;
  $88 = $scanResult;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $i;
  $92 = (($91) - 1)|0;
  $93 = $92<<2;
  $94 = $sumList;
  $95 = (($94) + ($93<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $90 + $96;
  $98 = $i;
  $99 = $98<<2;
  $100 = $scanResult;
  $101 = (($100) + ($99<<2)|0);
  HEAPF32[$101>>2] = $97;
  $102 = $i;
  $103 = (($102) - 1)|0;
  $104 = $103<<2;
  $105 = (($104) + 1)|0;
  $106 = $scanResult;
  $107 = (($106) + ($105<<2)|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $i;
  $110 = (($109) - 1)|0;
  $111 = $110<<2;
  $112 = (($111) + 1)|0;
  $113 = $sumList;
  $114 = (($113) + ($112<<2)|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $108 + $115;
  $117 = $i;
  $118 = $117<<2;
  $119 = (($118) + 1)|0;
  $120 = $scanResult;
  $121 = (($120) + ($119<<2)|0);
  HEAPF32[$121>>2] = $116;
  $122 = $i;
  $123 = (($122) - 1)|0;
  $124 = $123<<2;
  $125 = (($124) + 2)|0;
  $126 = $scanResult;
  $127 = (($126) + ($125<<2)|0);
  $128 = +HEAPF32[$127>>2];
  $129 = $i;
  $130 = (($129) - 1)|0;
  $131 = $130<<2;
  $132 = (($131) + 2)|0;
  $133 = $sumList;
  $134 = (($133) + ($132<<2)|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $128 + $135;
  $137 = $i;
  $138 = $137<<2;
  $139 = (($138) + 2)|0;
  $140 = $scanResult;
  $141 = (($140) + ($139<<2)|0);
  HEAPF32[$141>>2] = $136;
  $142 = $i;
  $143 = (($142) - 1)|0;
  $144 = $143<<2;
  $145 = (($144) + 3)|0;
  $146 = $scanResult;
  $147 = (($146) + ($145<<2)|0);
  $148 = +HEAPF32[$147>>2];
  $149 = $i;
  $150 = (($149) - 1)|0;
  $151 = $150<<2;
  $152 = (($151) + 3)|0;
  $153 = $sumList;
  $154 = (($153) + ($152<<2)|0);
  $155 = +HEAPF32[$154>>2];
  $156 = $148 + $155;
  $157 = $i;
  $158 = $157<<2;
  $159 = (($158) + 3)|0;
  $160 = $scanResult;
  $161 = (($160) + ($159<<2)|0);
  HEAPF32[$161>>2] = $156;
  $162 = $i;
  $163 = (($162) + 1)|0;
  $i = $163;
 }
 $164 = HEAP32[$1>>2]|0;
 $165 = $164<<2;
 $166 = $scanResult;
 $167 = (($166) + ($165<<2)|0);
 $168 = +HEAPF32[$167>>2];
 $169 = HEAP32[$1>>2]|0;
 $170 = $169<<2;
 $171 = (($170) + 1)|0;
 $172 = $scanResult;
 $173 = (($172) + ($171<<2)|0);
 $174 = +HEAPF32[$173>>2];
 __ZN6b2Vec2C2Eff($2,$168,$174);
 ;HEAP32[$s>>2]=HEAP32[$2>>2]|0;HEAP32[$s+4>>2]=HEAP32[$2+4>>2]|0;
 $175 = HEAP32[$1>>2]|0;
 $176 = $175<<2;
 $177 = (($176) + 2)|0;
 $178 = $scanResult;
 $179 = (($178) + ($177<<2)|0);
 $180 = +HEAPF32[$179>>2];
 $181 = HEAP32[$1>>2]|0;
 $182 = $181<<2;
 $183 = (($182) + 3)|0;
 $184 = $scanResult;
 $185 = (($184) + ($183<<2)|0);
 $186 = +HEAPF32[$185>>2];
 __ZN6b2Vec2C2Eff($3,$180,$186);
 ;HEAP32[$s2>>2]=HEAP32[$3>>2]|0;HEAP32[$s2+4>>2]=HEAP32[$3+4>>2]|0;
 $187 = $sumList;
 $188 = ($187|0)==(0|0);
 if (!($188)) {
  __ZdaPv($187);
 }
 $189 = $scanResult;
 $190 = ($189|0)==(0|0);
 if (!($190)) {
  __ZdaPv($189);
 }
 __ZN6b2Vec2C2Ev($v);
 $191 = +HEAPF32[$s>>2];
 $192 = +HEAPF32[$s>>2];
 $193 = $191 * $192;
 HEAPF32[$v>>2] = $193;
 $194 = ((($s)) + 4|0);
 $195 = +HEAPF32[$194>>2];
 $196 = ((($s)) + 4|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $195 * $197;
 $199 = ((($v)) + 4|0);
 HEAPF32[$199>>2] = $198;
 $200 = HEAP32[$1>>2]|0;
 $201 = (+($200|0));
 $202 = 1.0 / $201;
 __ZN6b2Vec2mLEf($v,$202);
 __ZmiRK6b2Vec2S1_($4,$s2,$v);
 ;HEAP32[$v>>2]=HEAP32[$4>>2]|0;HEAP32[$v+4>>2]=HEAP32[$4+4>>2]|0;
 $203 = (__ZN6b2Vec2clEi($v,1)|0);
 $204 = +HEAPF32[$203>>2];
 $205 = (__ZN6b2Vec2clEi($v,0)|0);
 $206 = +HEAPF32[$205>>2];
 $207 = $204 > $206;
 if (!($207)) {
  STACKTOP = sp;return;
 }
 $208 = ((($5)) + 104|0);
 HEAP32[$208>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase15InitSortingKeysEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a = 0;
 var $axis = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zeroBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 36|0;
 $axis = sp + 28|0;
 $global = sp + 12|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $$arith = $6<<2;
 $$overflow = ($6>>>0)>(1073741823);
 $7 = $$overflow ? -1 : $$arith;
 $8 = (__Znaj($7)|0);
 $zeroBuffer = $8;
 $9 = $zeroBuffer;
 $10 = ((($2)) + 92|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 _memset(($9|0),0,($12|0))|0;
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = ((($2)) + 116|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $zeroBuffer;
 $17 = ((($2)) + 92|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($13,$15,$16,0,$19,1);
 $20 = $zeroBuffer;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  __ZdaPv($20);
 }
 $22 = ((($2)) + 104|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$axis>>2] = $23;
 $a = 0;
 $err = 0;
 $24 = ((($2)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $a;
 $27 = (($26) + 1)|0;
 $a = $27;
 $28 = ((($2)) + 108|0);
 $29 = (_clSetKernelArg(($25|0),($26|0),4,($28|0))|0);
 $30 = $err;
 $31 = $30 | $29;
 $err = $31;
 $32 = ((($2)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $a;
 $35 = (($34) + 1)|0;
 $a = $35;
 $36 = ((($2)) + 116|0);
 $37 = (_clSetKernelArg(($33|0),($34|0),4,($36|0))|0);
 $38 = $err;
 $39 = $38 | $37;
 $err = $39;
 $40 = ((($2)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $a;
 $43 = (($42) + 1)|0;
 $a = $43;
 $44 = ((($2)) + 120|0);
 $45 = (_clSetKernelArg(($41|0),($42|0),4,($44|0))|0);
 $46 = $err;
 $47 = $46 | $45;
 $err = $47;
 $48 = ((($2)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $a;
 $51 = (($50) + 1)|0;
 $a = $51;
 $52 = (_clSetKernelArg(($49|0),($50|0),4,($1|0))|0);
 $53 = $err;
 $54 = $53 | $52;
 $err = $54;
 $55 = ((($2)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $a;
 $58 = (($57) + 1)|0;
 $a = $58;
 $59 = (_clSetKernelArg(($56|0),($57|0),4,($axis|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = ((($2)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = ((($2)) + 92|0);
 $67 = (_clSetKernelArg(($63|0),($64|0),4,($66|0))|0);
 $68 = $err;
 $69 = $68 | $67;
 $err = $69;
 $70 = $err;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = ((($2)) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$vararg_buffer>>2] = $73;
  (_printf(19385,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $74 = ((($2)) + 92|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($2)) + 60|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $79 = (($78) - 1)|0;
 $80 = ((($2)) + 60|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79>>>0) / ($81>>>0))&-1;
 $group_num = $82;
 $83 = $group_num;
 $84 = ((($2)) + 60|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = Math_imul($83, $85)|0;
 HEAP32[$global>>2] = $86;
 $err = 0;
 $87 = (__ZN10b2CLDevice8instanceEv()|0);
 $88 = (__ZNK10b2CLDevice15GetCommandQueueEv($87)|0);
 $89 = ((($2)) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($2)) + 60|0);
 $92 = (_clEnqueueNDRangeKernel(($88|0),($90|0),1,(0|0),($global|0),($91|0),0,(0|0),(0|0))|0);
 $93 = $err;
 $94 = $93 | $92;
 $err = $94;
 $95 = $err;
 $96 = ($95|0)!=(0);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 (_printf(12639,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase9SortAABBsEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shape_num;
 $2 = $0;
 $3 = (__ZN8b2CLSort8instanceEv()|0);
 $4 = ((($2)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($3,$5,$7,$9,0,0);
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase12ComputePairsEiPiS0_PK7b2World($this,$shape_num,$pTotalContactCount,$pContactCounts,$pWorld) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 $pTotalContactCount = $pTotalContactCount|0;
 $pContactCounts = $pContactCounts|0;
 $pWorld = $pWorld|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $axis = 0, $err = 0, $fill_num = 0, $fill_nums = 0, $global = 0, $group_num = 0, $maxPairs = 0, $pairTotalCount = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 60|0;
 $axis = sp + 44|0;
 $maxPairs = sp + 40|0;
 $fill_num = sp + 36|0;
 $global = sp + 16|0;
 $pairTotalCount = sp + 12|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $pTotalContactCount;
 $3 = $pContactCounts;
 $4 = $pWorld;
 $5 = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($5)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$axis>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10*10)|0;
 HEAP32[$maxPairs>>2] = $11;
 HEAP32[$fill_num>>2] = 0;
 $12 = (__ZN10b2CLDevice8instanceEv()|0);
 $13 = (__ZN14b2CLCommonData8instanceEv()|0);
 $14 = ((($13)) + 96|0);
 $15 = HEAP32[$14>>2]|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($12,$15,$fill_num,0,4,1);
 $16 = (__Znaj(20)|0);
 $fill_nums = $16;
 $17 = $fill_nums;
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;
 $18 = (__ZN10b2CLDevice8instanceEv()|0);
 $19 = (__ZN14b2CLCommonData8instanceEv()|0);
 $20 = ((($19)) + 92|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $fill_nums;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($18,$21,$22,0,20,1);
 $23 = $fill_nums;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  __ZdaPv($23);
 }
 $a = 0;
 $err = 0;
 $25 = ((($5)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $a;
 $28 = (($27) + 1)|0;
 $a = $28;
 $29 = ((($5)) + 108|0);
 $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
 $31 = $err;
 $32 = $31 | $30;
 $err = $32;
 $33 = ((($5)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = (__ZN14b2CLCommonData8instanceEv()|0);
 $38 = ((($37)) + 72|0);
 $39 = (_clSetKernelArg(($34|0),($35|0),4,($38|0))|0);
 $40 = $err;
 $41 = $40 | $39;
 $err = $41;
 $42 = ((($5)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $a;
 $45 = (($44) + 1)|0;
 $a = $45;
 $46 = (__ZN14b2CLCommonData8instanceEv()|0);
 $47 = ((($46)) + 56|0);
 $48 = (_clSetKernelArg(($43|0),($44|0),4,($47|0))|0);
 $49 = $err;
 $50 = $49 | $48;
 $err = $50;
 $51 = ((($5)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $a;
 $54 = (($53) + 1)|0;
 $a = $54;
 $55 = (__ZN14b2CLCommonData8instanceEv()|0);
 $56 = ((($55)) + 80|0);
 $57 = (_clSetKernelArg(($52|0),($53|0),4,($56|0))|0);
 $58 = $err;
 $59 = $58 | $57;
 $err = $59;
 $60 = ((($5)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $a;
 $63 = (($62) + 1)|0;
 $a = $63;
 $64 = (__ZN14b2CLCommonData8instanceEv()|0);
 $65 = ((($64)) + 84|0);
 $66 = (_clSetKernelArg(($61|0),($62|0),4,($65|0))|0);
 $67 = $err;
 $68 = $67 | $66;
 $err = $68;
 $69 = ((($5)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $a;
 $72 = (($71) + 1)|0;
 $a = $72;
 $73 = ((($5)) + 120|0);
 $74 = (_clSetKernelArg(($70|0),($71|0),4,($73|0))|0);
 $75 = $err;
 $76 = $75 | $74;
 $err = $76;
 $77 = ((($5)) + 20|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $a;
 $80 = (($79) + 1)|0;
 $a = $80;
 $81 = (__ZN14b2CLCommonData8instanceEv()|0);
 $82 = ((($81)) + 60|0);
 $83 = (_clSetKernelArg(($78|0),($79|0),4,($82|0))|0);
 $84 = $err;
 $85 = $84 | $83;
 $err = $85;
 $86 = ((($5)) + 20|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $a;
 $89 = (($88) + 1)|0;
 $a = $89;
 $90 = (__ZN14b2CLCommonData8instanceEv()|0);
 $91 = ((($90)) + 92|0);
 $92 = (_clSetKernelArg(($87|0),($88|0),4,($91|0))|0);
 $93 = $err;
 $94 = $93 | $92;
 $err = $94;
 $95 = ((($5)) + 20|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $a;
 $98 = (($97) + 1)|0;
 $a = $98;
 $99 = (__ZN14b2CLCommonData8instanceEv()|0);
 $100 = ((($99)) + 96|0);
 $101 = (_clSetKernelArg(($96|0),($97|0),4,($100|0))|0);
 $102 = $err;
 $103 = $102 | $101;
 $err = $103;
 $104 = ((($5)) + 20|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $a;
 $107 = (($106) + 1)|0;
 $a = $107;
 $108 = (_clSetKernelArg(($105|0),($106|0),4,($1|0))|0);
 $109 = $err;
 $110 = $109 | $108;
 $err = $110;
 $111 = ((($5)) + 20|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $a;
 $114 = (($113) + 1)|0;
 $a = $114;
 $115 = (_clSetKernelArg(($112|0),($113|0),4,($axis|0))|0);
 $116 = $err;
 $117 = $116 | $115;
 $err = $117;
 $118 = ((($5)) + 20|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $a;
 $121 = (($120) + 1)|0;
 $a = $121;
 $122 = (_clSetKernelArg(($119|0),($120|0),4,($maxPairs|0))|0);
 $123 = $err;
 $124 = $123 | $122;
 $err = $124;
 $125 = $err;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = ((($5)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  HEAP32[$vararg_buffer>>2] = $128;
  (_printf(19385,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $129 = HEAP32[$1>>2]|0;
 $130 = ((($5)) + 64|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + ($131))|0;
 $133 = (($132) - 1)|0;
 $134 = ((($5)) + 64|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133>>>0) / ($135>>>0))&-1;
 $group_num = $136;
 $137 = $group_num;
 $138 = ((($5)) + 64|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = Math_imul($137, $139)|0;
 HEAP32[$global>>2] = $140;
 $err = 0;
 $141 = (__ZN10b2CLDevice8instanceEv()|0);
 $142 = (__ZNK10b2CLDevice15GetCommandQueueEv($141)|0);
 $143 = ((($5)) + 20|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($5)) + 64|0);
 $146 = (_clEnqueueNDRangeKernel(($142|0),($144|0),1,(0|0),($global|0),($145|0),0,(0|0),(0|0))|0);
 $147 = $err;
 $148 = $147 | $146;
 $err = $148;
 $149 = $err;
 $150 = ($149|0)!=(0);
 if ($150) {
  (_printf(12713,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  $151 = (__ZN10b2CLDevice8instanceEv()|0);
  $152 = (__ZN14b2CLCommonData8instanceEv()|0);
  $153 = ((($152)) + 96|0);
  $154 = HEAP32[$153>>2]|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($151,$pairTotalCount,$154,0,4,1);
  $155 = HEAP32[$pairTotalCount>>2]|0;
  $156 = $2;
  HEAP32[$156>>2] = $155;
  $157 = (__ZN10b2CLDevice8instanceEv()|0);
  $158 = $3;
  $159 = (__ZN14b2CLCommonData8instanceEv()|0);
  $160 = ((($159)) + 92|0);
  $161 = HEAP32[$160>>2]|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($157,$158,$161,0,20,1);
  STACKTOP = sp;return;
 }
}
function __ZN14b2CLCommonDataC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $3 = sp + 29|0;
 $4 = sp + 28|0;
 $5 = $this;
 $8 = $5;
 $9 = ((($8)) + 1132|0);
 $2 = $9;
 $10 = $2;
 ;HEAP8[$1>>0]=HEAP8[$4>>0]|0;
 $0 = $3;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEEC2ERKS9_($10,$3);
 $11 = ((($8)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($8)) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$8>>2] = 0;
 $13 = ((($8)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($8)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($8)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($8)) + 24|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($8)) + 28|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($8)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($8)) + 144|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($8)) + 148|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($8)) + 1076|0);
 HEAP32[$21>>2] = 0;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(11);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = ((($8)) + 100|0);
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = $i;
  $28 = ((($8)) + 1032|0);
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = $i;
  $31 = ((($8)) + 1080|0);
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = ((($8)) + 1080|0);
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 397;
 $37 = ((($8)) + 1080|0);
 $38 = ((($37)) + 8|0);
 HEAP32[$38>>2] = 398;
 $39 = ((($8)) + 1080|0);
 $40 = ((($39)) + 12|0);
 HEAP32[$40>>2] = 399;
 $41 = ((($8)) + 1080|0);
 $42 = ((($41)) + 16|0);
 HEAP32[$42>>2] = 400;
 $43 = ((($8)) + 1080|0);
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = 401;
 $45 = ((($8)) + 1080|0);
 $46 = ((($45)) + 24|0);
 HEAP32[$46>>2] = 402;
 $47 = ((($8)) + 1080|0);
 $48 = ((($47)) + 28|0);
 HEAP32[$48>>2] = 403;
 $49 = ((($8)) + 1080|0);
 $50 = ((($49)) + 32|0);
 HEAP32[$50>>2] = 404;
 $51 = ((($8)) + 1080|0);
 $52 = ((($51)) + 36|0);
 HEAP32[$52>>2] = 405;
 $53 = ((($8)) + 1080|0);
 $54 = ((($53)) + 40|0);
 HEAP32[$54>>2] = 406;
 $55 = ((($8)) + 1124|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($8)) + 1128|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($8)) + 1148|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($8)) + 1152|0);
 HEAP32[$58>>2] = 0;
 $59 = ((($8)) + 1144|0);
 HEAP32[$59>>2] = 0;
 $60 = ((($8)) + 1204|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($8)) + 1220|0);
 HEAP32[$61>>2] = 0;
 $62 = ((($8)) + 76|0);
 HEAP32[$62>>2] = 0;
 $63 = ((($8)) + 72|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($8)) + 68|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($8)) + 64|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($8)) + 60|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($8)) + 56|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($8)) + 52|0);
 HEAP32[$68>>2] = 0;
 $69 = ((($8)) + 48|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($8)) + 36|0);
 $71 = ((($70)) + 4|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($8)) + 36|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($8)) + 1188|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($8)) + 1192|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($8)) + 1196|0);
 HEAP32[$75>>2] = 0;
 $76 = ((($8)) + 1200|0);
 HEAP32[$76>>2] = 0;
 $77 = ((($8)) + 1208|0);
 HEAP32[$77>>2] = 0;
 $78 = ((($8)) + 1212|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($8)) + 1216|0);
 HEAP32[$79>>2] = 0;
 $80 = ((($8)) + 1160|0);
 HEAP32[$80>>2] = 0;
 $81 = ((($8)) + 1164|0);
 HEAP32[$81>>2] = 0;
 $82 = ((($8)) + 1168|0);
 HEAP32[$82>>2] = 0;
 $83 = ((($8)) + 1172|0);
 HEAP32[$83>>2] = 0;
 $84 = HEAP8[11781]|0;
 $85 = $84&1;
 if ($85) {
  $86 = ((($8)) + 88|0);
  HEAP32[$86>>2] = 0;
  $87 = ((($8)) + 84|0);
  HEAP32[$87>>2] = 0;
  $88 = ((($8)) + 80|0);
  HEAP32[$88>>2] = 0;
  __THREW__ = 0;
  $89 = (invoke_i(407)|0);
  $90 = __THREW__; __THREW__ = 0;
  $91 = $90&1;
  if (!($91)) {
   __THREW__ = 0;
   $92 = (invoke_iiii(408,($89|0),20,0)|0);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if (!($94)) {
    $95 = ((($8)) + 92|0);
    HEAP32[$95>>2] = $92;
    __THREW__ = 0;
    $96 = (invoke_i(407)|0);
    $97 = __THREW__; __THREW__ = 0;
    $98 = $97&1;
    if (!($98)) {
     __THREW__ = 0;
     $99 = (invoke_iiii(408,($96|0),4,0)|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if (!($101)) {
      $102 = ((($8)) + 96|0);
      HEAP32[$102>>2] = $99;
      __THREW__ = 0;
      $103 = (invoke_i(407)|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if (!($105)) {
       __THREW__ = 0;
       $106 = (invoke_iiii(408,($103|0),16,0)|0);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if (!($108)) {
        $109 = ((($8)) + 1188|0);
        HEAP32[$109>>2] = $106;
        __THREW__ = 0;
        $110 = (invoke_i(407)|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if (!($112)) {
         __THREW__ = 0;
         $113 = (invoke_iiii(408,($110|0),4,0)|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if (!($115)) {
          $116 = ((($8)) + 1192|0);
          HEAP32[$116>>2] = $113;
          label = 15;
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vi(410,($8|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if (!($122)) {
   STACKTOP = sp;return;
  }
 }
 $117 = ___cxa_find_matching_catch_2()|0;
 $118 = tempRet0;
 $6 = $117;
 $7 = $118;
 __THREW__ = 0;
 invoke_vi(409,($9|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $125 = ___cxa_find_matching_catch_3(0|0)|0;
  $126 = tempRet0;
  ___clang_call_terminate($125);
  // unreachable;
 } else {
  $123 = $6;
  $124 = $7;
  ___resumeException($123|0);
  // unreachable;
 }
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 60|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$10>>0]=HEAP8[$23>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = ((($36)) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData17CopyRevoluteJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $pRevoluteJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pRevoluteJoint = $4;
 $5 = $pRevoluteJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pRevoluteJoint;
 $11 = ((($10)) + 68|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pRevoluteJoint;
 $18 = ((($17)) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pRevoluteJoint;
 $24 = ((($23)) + 76|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 8|0);
 $30 = ((($29)) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pRevoluteJoint;
 $32 = ((($31)) + 100|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&1;
 $35 = $34 ? 1 : 0;
 $36 = $1;
 $37 = ((($36)) + 48|0);
 $38 = ((($37)) + 16|0);
 HEAP32[$38>>2] = $35;
 $39 = $pRevoluteJoint;
 $40 = ((($39)) + 104|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $1;
 $43 = ((($42)) + 48|0);
 $44 = ((($43)) + 20|0);
 HEAPF32[$44>>2] = $41;
 $45 = $pRevoluteJoint;
 $46 = ((($45)) + 108|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $1;
 $49 = ((($48)) + 48|0);
 $50 = ((($49)) + 24|0);
 HEAPF32[$50>>2] = $47;
 $51 = $pRevoluteJoint;
 $52 = ((($51)) + 112|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&1;
 $55 = $54 ? 1 : 0;
 $56 = $1;
 $57 = ((($56)) + 48|0);
 $58 = ((($57)) + 28|0);
 HEAP32[$58>>2] = $55;
 $59 = $pRevoluteJoint;
 $60 = ((($59)) + 116|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = ((($62)) + 48|0);
 $64 = ((($63)) + 32|0);
 HEAPF32[$64>>2] = $61;
 $65 = $pRevoluteJoint;
 $66 = ((($65)) + 120|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = ((($68)) + 48|0);
 $70 = ((($69)) + 36|0);
 HEAPF32[$70>>2] = $67;
 $71 = $pRevoluteJoint;
 $72 = ((($71)) + 124|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = ((($74)) + 48|0);
 $76 = ((($75)) + 40|0);
 HEAPF32[$76>>2] = $73;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $pSrc;
 $1 = $pDest;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZNK7b2Joint7GetTypeEv($4)|0);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 HEAP32[$7>>2] = $5;
 $8 = (__ZN14b2CLCommonData8instanceEv()|0);
 $9 = ((($8)) + 1132|0);
 $10 = (__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEEixERS8_($9,$0)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$0>>2]|0;
 $14 = (__ZNK7b2Joint19GetCollideConnectedEv($13)|0);
 $15 = $14 ? 1 : 0;
 $16 = $1;
 $17 = ((($16)) + 28|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 100|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = ((($23)) + 32|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[$0>>2]|0;
 $26 = ((($25)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 100|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = ((($30)) + 36|0);
 HEAP32[$31>>2] = $29;
 $32 = $1;
 $33 = ((($32)) + 40|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = ((($34)) + 44|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = ((($36)) + 4|0);
 ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNK7b2Joint7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14b2CLCommonData8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[30408]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (31196|0);
 }
 $4 = (___cxa_guard_acquire(30408)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (31196|0);
 }
 __THREW__ = 0;
 invoke_vi(411,(31196|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((412|0),(31196|0),(___dso_handle|0))|0);
 STACKTOP = sp;return (31196|0);
}
function __ZN14b2CLCommonDataD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(413,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = ((($3)) + 1124|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    __THREW__ = 0;
    $9 = (invoke_i(407)|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = ((($3)) + 1124|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($9|0),($13|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
   }
   $21 = ((($3)) + 1148|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    __THREW__ = 0;
    $24 = (invoke_i(407)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    $27 = ((($3)) + 1148|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($24|0),($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     break;
    }
   }
   $31 = ((($3)) + 1152|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    __THREW__ = 0;
    $34 = (invoke_i(407)|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    }
    $37 = ((($3)) + 1152|0);
    $38 = HEAP32[$37>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($34|0),($38|0));
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     break;
    }
   }
   $41 = ((($3)) + 1188|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    __THREW__ = 0;
    $44 = (invoke_i(407)|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    }
    $47 = ((($3)) + 1188|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($44|0),($48|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     break;
    }
   }
   $51 = ((($3)) + 1192|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    __THREW__ = 0;
    $54 = (invoke_i(407)|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     break;
    }
    $57 = ((($3)) + 1192|0);
    $58 = HEAP32[$57>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($54|0),($58|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
   }
   $61 = ((($3)) + 1196|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    __THREW__ = 0;
    $64 = (invoke_i(407)|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     break;
    }
    $67 = ((($3)) + 1196|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($64|0),($68|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     break;
    }
   }
   $71 = ((($3)) + 1200|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    __THREW__ = 0;
    $74 = (invoke_i(407)|0);
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    if ($76) {
     break;
    }
    $77 = ((($3)) + 1200|0);
    $78 = HEAP32[$77>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($74|0),($78|0));
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     break;
    }
   }
   $81 = ((($3)) + 1212|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    __THREW__ = 0;
    $84 = (invoke_i(407)|0);
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if ($86) {
     break;
    }
    $87 = ((($3)) + 1212|0);
    $88 = HEAP32[$87>>2]|0;
    __THREW__ = 0;
    invoke_vii(414,($84|0),($88|0));
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     break;
    }
   }
   $91 = ((($3)) + 1208|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    __ZdaPv($92);
   }
   $94 = ((($3)) + 1216|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(0|0);
   if ($96) {
    $97 = ((($3)) + 1132|0);
    __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($97);
    STACKTOP = sp;return;
   }
   __ZdaPv($95);
   $97 = ((($3)) + 1132|0);
   __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($97);
   STACKTOP = sp;return;
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $1 = $16;
 $2 = $17;
 $18 = ((($3)) + 1132|0);
 __THREW__ = 0;
 invoke_vi(409,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $100 = ___cxa_find_matching_catch_3(0|0)|0;
  $101 = tempRet0;
  ___clang_call_terminate($100);
  // unreachable;
 } else {
  $98 = $1;
  $99 = $2;
  ___resumeException($98|0);
  // unreachable;
 }
}
function __ZN14b2CLCommonData12DeleteJointsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 144|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdaPv($4);
 }
 $6 = ((($1)) + 148|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 1076|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (__ZN10b2CLDevice8instanceEv()|0);
  $11 = ((($1)) + 1076|0);
  $12 = HEAP32[$11>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
  $13 = ((($1)) + 1076|0);
  HEAP32[$13>>2] = 0;
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ($14|0)<(11);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = ((($1)) + 100|0);
  $18 = (($17) + ($16<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = $i;
  $20 = ((($1)) + 1032|0);
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 96|0;
 $20 = sp + 20|0;
 $23 = sp + 8|0;
 $21 = $this;
 $22 = $__nd;
 $24 = $21;
 $25 = $22;
 $18 = $20;
 $19 = -1;
 $26 = $18;
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$20>>2]|0;
 HEAP32[$23>>2] = $27;
 $17 = $23;
 $28 = ($25|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $22;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($24,$30);
 $31 = $22;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($24,$33);
 $2 = $24;
 $34 = $2;
 $35 = ((($34)) + 4|0);
 $1 = $35;
 $36 = $1;
 $0 = $36;
 $37 = $0;
 $__na = $37;
 $38 = $__na;
 $39 = $22;
 $40 = ((($39)) + 16|0);
 $3 = $40;
 $41 = $3;
 $7 = $38;
 $8 = $41;
 $42 = $7;
 $43 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $42;
 $5 = $43;
 $44 = $__na;
 $45 = $22;
 $14 = $44;
 $15 = $45;
 $16 = 1;
 $46 = $14;
 $47 = $15;
 $48 = $16;
 $11 = $46;
 $12 = $47;
 $13 = $48;
 $49 = $12;
 $10 = $49;
 $50 = $10;
 __ZdlPv($50);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEEixERS8_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0;
 var $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 64|0;
 $18 = sp + 653|0;
 $21 = sp + 56|0;
 $24 = sp + 652|0;
 $47 = sp + 48|0;
 $50 = sp + 651|0;
 $53 = sp + 40|0;
 $56 = sp + 650|0;
 $86 = sp + 316|0;
 $87 = sp + 32|0;
 $90 = sp + 304|0;
 $91 = sp + 296|0;
 $92 = sp + 24|0;
 $95 = sp + 280|0;
 $96 = sp + 16|0;
 $99 = sp + 264|0;
 $108 = sp + 8|0;
 $111 = sp + 649|0;
 $114 = sp;
 $117 = sp + 648|0;
 $136 = sp + 128|0;
 $__parent = sp + 116|0;
 $139 = sp + 104|0;
 $__h = sp + 92|0;
 $140 = sp + 88|0;
 $141 = sp + 76|0;
 $137 = $this;
 $138 = $__k;
 $144 = $137;
 $145 = $138;
 $146 = (__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS8_($144,$__parent,$145)|0);
 $__child = $146;
 $147 = $__child;
 $148 = HEAP32[$147>>2]|0;
 $__r = $148;
 $149 = $__child;
 $150 = HEAP32[$149>>2]|0;
 $134 = $136;
 $135 = -1;
 $151 = $134;
 HEAP32[$151>>2] = 0;
 $152 = HEAP32[$136>>2]|0;
 HEAP32[$139>>2] = $152;
 $133 = $139;
 $153 = ($150|0)==(0|0);
 if (!($153)) {
  $331 = $__r;
  $332 = ((($331)) + 16|0);
  $333 = ((($332)) + 4|0);
  STACKTOP = sp;return ($333|0);
 }
 $154 = $138;
 __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE25__construct_node_with_keyERS8_($141,$144,$154);
 $100 = $141;
 $155 = $100;
 $97 = $99;
 $98 = $155;
 $156 = $97;
 $157 = $98;
 HEAP32[$156>>2] = $157;
 $158 = HEAP32[$99>>2]|0;
 HEAP32[$140>>2] = $158;
 ;HEAP8[$96>>0]=HEAP8[$140>>0]|0;HEAP8[$96+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$140+3>>0]|0;
 $94 = $__h;
 $159 = $94;
 $93 = $96;
 $160 = $93;
 $161 = HEAP32[$160>>2]|0;
 $76 = $161;
 $162 = $76;
 $75 = $162;
 $163 = $75;
 $74 = $163;
 $164 = $74;
 $165 = HEAP32[$164>>2]|0;
 $__t$i$i = $165;
 $73 = $162;
 $166 = $73;
 $72 = $166;
 $167 = $72;
 HEAP32[$167>>2] = 0;
 $168 = $__t$i$i;
 $77 = $96;
 $169 = $77;
 $170 = HEAP32[$169>>2]|0;
 $80 = $170;
 $171 = $80;
 $79 = $171;
 $172 = $79;
 $78 = $172;
 $173 = $78;
 $174 = ((($173)) + 4|0);
 $81 = $174;
 $175 = $81;
 ;HEAP32[$95>>2]=HEAP32[$175>>2]|0;HEAP32[$95+4>>2]=HEAP32[$175+4>>2]|0;
 ;HEAP8[$92>>0]=HEAP8[$95>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $159;
 HEAP32[$90>>2] = $168;
 $176 = $89;
 $88 = $90;
 $177 = $88;
 $178 = HEAP32[$177>>2]|0;
 $82 = $92;
 $179 = $82;
 ;HEAP32[$91>>2]=HEAP32[$179>>2]|0;HEAP32[$91+4>>2]=HEAP32[$179+4>>2]|0;
 ;HEAP8[$87>>0]=HEAP8[$91>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $176;
 HEAP32[$86>>2] = $178;
 $180 = $85;
 $84 = $86;
 $181 = $84;
 $182 = HEAP32[$181>>2]|0;
 HEAP32[$180>>2] = $182;
 $183 = ((($180)) + 4|0);
 $83 = $87;
 $184 = $83;
 ;HEAP32[$183>>2]=HEAP32[$184>>2]|0;HEAP32[$183+4>>2]=HEAP32[$184+4>>2]|0;
 $39 = $141;
 $185 = $39;
 $37 = $185;
 $38 = 0;
 $186 = $37;
 $36 = $186;
 $187 = $36;
 $35 = $187;
 $188 = $35;
 $189 = HEAP32[$188>>2]|0;
 $__tmp$i$i7 = $189;
 $190 = $38;
 $11 = $186;
 $191 = $11;
 $10 = $191;
 $192 = $10;
 HEAP32[$192>>2] = $190;
 $193 = $__tmp$i$i7;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $9 = $186;
  $195 = $9;
  $8 = $195;
  $196 = $8;
  $197 = ((($196)) + 4|0);
  $198 = $__tmp$i$i7;
  $33 = $197;
  $34 = $198;
  $199 = $33;
  $200 = ((($199)) + 5|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&1;
  if ($202) {
   $203 = HEAP32[$199>>2]|0;
   $204 = $34;
   $205 = ((($204)) + 16|0);
   $206 = ((($205)) + 4|0);
   $32 = $206;
   $207 = $32;
   $22 = $203;
   $23 = $207;
   $208 = $22;
   $209 = $23;
   ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
   $19 = $208;
   $20 = $209;
  }
  $210 = ((($199)) + 4|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&1;
  if ($212) {
   $213 = HEAP32[$199>>2]|0;
   $214 = $34;
   $215 = ((($214)) + 16|0);
   $12 = $215;
   $216 = $12;
   $16 = $213;
   $17 = $216;
   $217 = $16;
   $218 = $17;
   ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
   $13 = $217;
   $14 = $218;
  }
  $219 = $34;
  $220 = ($219|0)!=(0|0);
  if ($220) {
   $221 = HEAP32[$199>>2]|0;
   $222 = $34;
   $29 = $221;
   $30 = $222;
   $31 = 1;
   $223 = $29;
   $224 = $30;
   $225 = $31;
   $26 = $223;
   $27 = $224;
   $28 = $225;
   $226 = $27;
   $25 = $226;
   $227 = $25;
   __ZdlPv($227);
  }
 }
 $228 = HEAP32[$__parent>>2]|0;
 $229 = $__child;
 $7 = $__h;
 $230 = $7;
 $6 = $230;
 $231 = $6;
 $5 = $231;
 $232 = $5;
 $233 = HEAP32[$232>>2]|0;
 __THREW__ = 0;
 invoke_viiii(415,($144|0),($228|0),($229|0),($233|0));
 $234 = __THREW__; __THREW__ = 0;
 $235 = $234&1;
 if ($235) {
  $286 = ___cxa_find_matching_catch_2()|0;
  $287 = tempRet0;
  $142 = $286;
  $143 = $287;
  $132 = $__h;
  $288 = $132;
  $130 = $288;
  $131 = 0;
  $289 = $130;
  $129 = $289;
  $290 = $129;
  $128 = $290;
  $291 = $128;
  $292 = HEAP32[$291>>2]|0;
  $__tmp$i$i = $292;
  $293 = $131;
  $104 = $289;
  $294 = $104;
  $103 = $294;
  $295 = $103;
  HEAP32[$295>>2] = $293;
  $296 = $__tmp$i$i;
  $297 = ($296|0)!=(0|0);
  if (!($297)) {
   $334 = $142;
   $335 = $143;
   ___resumeException($334|0);
   // unreachable;
  }
  $102 = $289;
  $298 = $102;
  $101 = $298;
  $299 = $101;
  $300 = ((($299)) + 4|0);
  $301 = $__tmp$i$i;
  $126 = $300;
  $127 = $301;
  $302 = $126;
  $303 = ((($302)) + 5|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $304&1;
  if ($305) {
   $306 = HEAP32[$302>>2]|0;
   $307 = $127;
   $308 = ((($307)) + 16|0);
   $309 = ((($308)) + 4|0);
   $125 = $309;
   $310 = $125;
   $115 = $306;
   $116 = $310;
   $311 = $115;
   $312 = $116;
   ;HEAP8[$114>>0]=HEAP8[$117>>0]|0;
   $112 = $311;
   $113 = $312;
  }
  $313 = ((($302)) + 4|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = $314&1;
  if ($315) {
   $316 = HEAP32[$302>>2]|0;
   $317 = $127;
   $318 = ((($317)) + 16|0);
   $105 = $318;
   $319 = $105;
   $109 = $316;
   $110 = $319;
   $320 = $109;
   $321 = $110;
   ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
   $106 = $320;
   $107 = $321;
  }
  $322 = $127;
  $323 = ($322|0)!=(0|0);
  if (!($323)) {
   $334 = $142;
   $335 = $143;
   ___resumeException($334|0);
   // unreachable;
  }
  $324 = HEAP32[$302>>2]|0;
  $325 = $127;
  $122 = $324;
  $123 = $325;
  $124 = 1;
  $326 = $122;
  $327 = $123;
  $328 = $124;
  $119 = $326;
  $120 = $327;
  $121 = $328;
  $329 = $120;
  $118 = $329;
  $330 = $118;
  __ZdlPv($330);
  $334 = $142;
  $335 = $143;
  ___resumeException($334|0);
  // unreachable;
 } else {
  $4 = $__h;
  $236 = $4;
  $3 = $236;
  $237 = $3;
  $2 = $237;
  $238 = $2;
  $239 = HEAP32[$238>>2]|0;
  $__t$i = $239;
  $1 = $236;
  $240 = $1;
  $0 = $240;
  $241 = $0;
  HEAP32[$241>>2] = 0;
  $242 = $__t$i;
  $__r = $242;
  $71 = $__h;
  $243 = $71;
  $69 = $243;
  $70 = 0;
  $244 = $69;
  $68 = $244;
  $245 = $68;
  $67 = $245;
  $246 = $67;
  $247 = HEAP32[$246>>2]|0;
  $__tmp$i$i4 = $247;
  $248 = $70;
  $43 = $244;
  $249 = $43;
  $42 = $249;
  $250 = $42;
  HEAP32[$250>>2] = $248;
  $251 = $__tmp$i$i4;
  $252 = ($251|0)!=(0|0);
  if (!($252)) {
   $331 = $__r;
   $332 = ((($331)) + 16|0);
   $333 = ((($332)) + 4|0);
   STACKTOP = sp;return ($333|0);
  }
  $41 = $244;
  $253 = $41;
  $40 = $253;
  $254 = $40;
  $255 = ((($254)) + 4|0);
  $256 = $__tmp$i$i4;
  $65 = $255;
  $66 = $256;
  $257 = $65;
  $258 = ((($257)) + 5|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&1;
  if ($260) {
   $261 = HEAP32[$257>>2]|0;
   $262 = $66;
   $263 = ((($262)) + 16|0);
   $264 = ((($263)) + 4|0);
   $64 = $264;
   $265 = $64;
   $54 = $261;
   $55 = $265;
   $266 = $54;
   $267 = $55;
   ;HEAP8[$53>>0]=HEAP8[$56>>0]|0;
   $51 = $266;
   $52 = $267;
  }
  $268 = ((($257)) + 4|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = $269&1;
  if ($270) {
   $271 = HEAP32[$257>>2]|0;
   $272 = $66;
   $273 = ((($272)) + 16|0);
   $44 = $273;
   $274 = $44;
   $48 = $271;
   $49 = $274;
   $275 = $48;
   $276 = $49;
   ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
   $45 = $275;
   $46 = $276;
  }
  $277 = $66;
  $278 = ($277|0)!=(0|0);
  if (!($278)) {
   $331 = $__r;
   $332 = ((($331)) + 16|0);
   $333 = ((($332)) + 4|0);
   STACKTOP = sp;return ($333|0);
  }
  $279 = HEAP32[$257>>2]|0;
  $280 = $66;
  $61 = $279;
  $62 = $280;
  $63 = 1;
  $281 = $61;
  $282 = $62;
  $283 = $63;
  $58 = $281;
  $59 = $282;
  $60 = $283;
  $284 = $59;
  $57 = $284;
  $285 = $57;
  __ZdlPv($285);
  $331 = $__r;
  $332 = ((($331)) + 16|0);
  $333 = ((($332)) + 4|0);
  STACKTOP = sp;return ($333|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS8_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 168|0;
 $13 = sp + 124|0;
 $24 = sp + 80|0;
 $41 = sp + 8|0;
 $42 = sp + 4|0;
 $43 = sp;
 $38 = $this;
 $39 = $__parent;
 $40 = $__k;
 $44 = $38;
 $36 = $44;
 $45 = $36;
 $35 = $45;
 $46 = $35;
 $47 = ((($46)) + 4|0);
 $34 = $47;
 $48 = $34;
 $33 = $48;
 $49 = $33;
 $32 = $49;
 $50 = $32;
 $31 = $50;
 $51 = $31;
 $52 = HEAP32[$51>>2]|0;
 $__nd = $52;
 $53 = $__nd;
 $0 = $2;
 $1 = -1;
 $54 = $0;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$2>>2]|0;
 HEAP32[$41>>2] = $55;
 $3 = $41;
 $56 = ($53|0)!=(0|0);
 if (!($56)) {
  $30 = $44;
  $108 = $30;
  $109 = ((($108)) + 4|0);
  $29 = $109;
  $110 = $29;
  $28 = $110;
  $111 = $28;
  $27 = $111;
  $112 = $27;
  $26 = $112;
  $113 = $26;
  $114 = $39;
  HEAP32[$114>>2] = $113;
  $115 = $39;
  $116 = HEAP32[$115>>2]|0;
  $37 = $116;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 while(1) {
  $6 = $44;
  $57 = $6;
  $58 = ((($57)) + 8|0);
  $5 = $58;
  $59 = $5;
  $4 = $59;
  $60 = $4;
  $7 = $60;
  $61 = $7;
  $62 = $40;
  $63 = $__nd;
  $64 = ((($63)) + 16|0);
  $8 = $61;
  $9 = $62;
  $10 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = $10;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66>>>0)<($68>>>0);
  if ($69) {
   $70 = $__nd;
   $71 = HEAP32[$70>>2]|0;
   $11 = $13;
   $12 = -1;
   $72 = $11;
   HEAP32[$72>>2] = 0;
   $73 = HEAP32[$13>>2]|0;
   HEAP32[$42>>2] = $73;
   $14 = $42;
   $74 = ($71|0)!=(0|0);
   $75 = $__nd;
   if (!($74)) {
    label = 5;
    break;
   }
   $76 = HEAP32[$75>>2]|0;
   $__nd = $76;
   continue;
  }
  $17 = $44;
  $80 = $17;
  $81 = ((($80)) + 8|0);
  $16 = $81;
  $82 = $16;
  $15 = $82;
  $83 = $15;
  $18 = $83;
  $84 = $18;
  $85 = $__nd;
  $86 = ((($85)) + 16|0);
  $87 = $40;
  $19 = $84;
  $20 = $86;
  $21 = $87;
  $88 = $20;
  $89 = HEAP32[$88>>2]|0;
  $90 = $21;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($89>>>0)<($91>>>0);
  $93 = $__nd;
  if (!($92)) {
   label = 10;
   break;
  }
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $22 = $24;
  $23 = -1;
  $96 = $22;
  HEAP32[$96>>2] = 0;
  $97 = HEAP32[$24>>2]|0;
  HEAP32[$43>>2] = $97;
  $25 = $43;
  $98 = ($95|0)!=(0|0);
  $99 = $__nd;
  if (!($98)) {
   label = 9;
   break;
  }
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $__nd = $101;
 }
 if ((label|0) == 5) {
  $77 = $39;
  HEAP32[$77>>2] = $75;
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $37 = $79;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 9) {
  $102 = $39;
  HEAP32[$102>>2] = $99;
  $103 = $39;
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 4|0);
  $37 = $105;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 10) {
  $106 = $39;
  HEAP32[$106>>2] = $93;
  $107 = $39;
  $37 = $107;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE25__construct_node_with_keyERS8_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0;
 var $__tmp$i$i1$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 988|0;
 $27 = sp + 136|0;
 $30 = sp + 976|0;
 $31 = sp + 968|0;
 $32 = sp + 128|0;
 $35 = sp + 952|0;
 $36 = sp + 120|0;
 $44 = sp + 112|0;
 $47 = sp + 1105|0;
 $50 = sp + 104|0;
 $53 = sp + 1104|0;
 $71 = sp + 824|0;
 $87 = sp + 756|0;
 $88 = sp + 96|0;
 $91 = sp + 744|0;
 $92 = sp + 736|0;
 $93 = sp + 88|0;
 $96 = sp + 720|0;
 $97 = sp + 80|0;
 $101 = sp + 700|0;
 $102 = sp + 688|0;
 $103 = sp + 684|0;
 $106 = sp + 672|0;
 $122 = sp + 604|0;
 $123 = sp + 72|0;
 $126 = sp + 592|0;
 $127 = sp + 584|0;
 $128 = sp + 64|0;
 $131 = sp + 568|0;
 $132 = sp + 56|0;
 $143 = sp + 48|0;
 $146 = sp + 1103|0;
 $149 = sp + 40|0;
 $152 = sp + 1102|0;
 $176 = sp + 32|0;
 $179 = sp + 1101|0;
 $182 = sp + 24|0;
 $185 = sp + 1100|0;
 $209 = sp + 284|0;
 $210 = sp + 16|0;
 $213 = sp + 272|0;
 $214 = sp + 264|0;
 $215 = sp + 8|0;
 $218 = sp + 248|0;
 $219 = sp + 240|0;
 $220 = sp;
 $__h = sp + 168|0;
 $234 = sp + 160|0;
 $235 = sp + 156|0;
 $236 = sp + 144|0;
 $232 = $this;
 $233 = $__k;
 $237 = $232;
 $231 = $237;
 $238 = $231;
 $239 = ((($238)) + 4|0);
 $230 = $239;
 $240 = $230;
 $229 = $240;
 $241 = $229;
 $__na = $241;
 $242 = $__na;
 $227 = $242;
 $228 = 1;
 $243 = $227;
 $244 = $228;
 $224 = $243;
 $225 = $244;
 $226 = 0;
 $245 = $225;
 $246 = ($245*24)|0;
 $223 = $246;
 $247 = $223;
 $248 = (__Znwj($247)|0);
 $249 = $__na;
 $221 = $234;
 $222 = $249;
 $250 = $221;
 $251 = $222;
 HEAP32[$250>>2] = $251;
 $252 = ((($250)) + 4|0);
 HEAP8[$252>>0] = 0;
 $253 = ((($250)) + 5|0);
 HEAP8[$253>>0] = 0;
 ;HEAP8[$220>>0]=HEAP8[$234>>0]|0;HEAP8[$220+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$220+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$220+3>>0]=HEAP8[$234+3>>0]|0;HEAP8[$220+4>>0]=HEAP8[$234+4>>0]|0;HEAP8[$220+5>>0]=HEAP8[$234+5>>0]|0;HEAP8[$220+6>>0]=HEAP8[$234+6>>0]|0;HEAP8[$220+7>>0]=HEAP8[$234+7>>0]|0;
 $217 = $__h;
 HEAP32[$218>>2] = $248;
 $254 = $217;
 $216 = $218;
 $255 = $216;
 $256 = HEAP32[$255>>2]|0;
 $204 = $220;
 $257 = $204;
 ;HEAP32[$219>>2]=HEAP32[$257>>2]|0;HEAP32[$219+4>>2]=HEAP32[$257+4>>2]|0;
 ;HEAP8[$215>>0]=HEAP8[$219>>0]|0;HEAP8[$215+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$215+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$215+3>>0]=HEAP8[$219+3>>0]|0;HEAP8[$215+4>>0]=HEAP8[$219+4>>0]|0;HEAP8[$215+5>>0]=HEAP8[$219+5>>0]|0;HEAP8[$215+6>>0]=HEAP8[$219+6>>0]|0;HEAP8[$215+7>>0]=HEAP8[$219+7>>0]|0;
 $212 = $254;
 HEAP32[$213>>2] = $256;
 $258 = $212;
 $211 = $213;
 $259 = $211;
 $260 = HEAP32[$259>>2]|0;
 $205 = $215;
 $261 = $205;
 ;HEAP32[$214>>2]=HEAP32[$261>>2]|0;HEAP32[$214+4>>2]=HEAP32[$261+4>>2]|0;
 ;HEAP8[$210>>0]=HEAP8[$214>>0]|0;HEAP8[$210+1>>0]=HEAP8[$214+1>>0]|0;HEAP8[$210+2>>0]=HEAP8[$214+2>>0]|0;HEAP8[$210+3>>0]=HEAP8[$214+3>>0]|0;HEAP8[$210+4>>0]=HEAP8[$214+4>>0]|0;HEAP8[$210+5>>0]=HEAP8[$214+5>>0]|0;HEAP8[$210+6>>0]=HEAP8[$214+6>>0]|0;HEAP8[$210+7>>0]=HEAP8[$214+7>>0]|0;
 $208 = $258;
 HEAP32[$209>>2] = $260;
 $262 = $208;
 $207 = $209;
 $263 = $207;
 $264 = HEAP32[$263>>2]|0;
 HEAP32[$262>>2] = $264;
 $265 = ((($262)) + 4|0);
 $206 = $210;
 $266 = $206;
 ;HEAP32[$265>>2]=HEAP32[$266>>2]|0;HEAP32[$265+4>>2]=HEAP32[$266+4>>2]|0;
 $267 = $__na;
 $203 = $__h;
 $268 = $203;
 $202 = $268;
 $269 = $202;
 $201 = $269;
 $270 = $201;
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + 16|0);
 $168 = $272;
 $273 = $168;
 $274 = $233;
 $133 = $267;
 $134 = $273;
 $135 = $274;
 $275 = $134;
 $276 = $135;
 $277 = HEAP32[$276>>2]|0;
 HEAP32[$275>>2] = $277;
 $11 = $__h;
 $278 = $11;
 $10 = $278;
 $279 = $10;
 $9 = $279;
 $280 = $9;
 $281 = ((($280)) + 4|0);
 $282 = ((($281)) + 4|0);
 HEAP8[$282>>0] = 1;
 $283 = $__na;
 $2 = $__h;
 $284 = $2;
 $1 = $284;
 $285 = $1;
 $0 = $285;
 $286 = $0;
 $287 = HEAP32[$286>>2]|0;
 $288 = ((($287)) + 16|0);
 $289 = ((($288)) + 4|0);
 $3 = $289;
 $290 = $3;
 $4 = $283;
 $5 = $290;
 $291 = $5;
 HEAP32[$291>>2] = 0;
 $8 = $__h;
 $292 = $8;
 $7 = $292;
 $293 = $7;
 $6 = $293;
 $294 = $6;
 $295 = ((($294)) + 4|0);
 $296 = ((($295)) + 5|0);
 HEAP8[$296>>0] = 1;
 $100 = $__h;
 $297 = $100;
 $98 = $103;
 $99 = $297;
 $298 = $98;
 $299 = $99;
 HEAP32[$298>>2] = $299;
 ;HEAP8[$97>>0]=HEAP8[$103>>0]|0;HEAP8[$97+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$103+3>>0]|0;
 $95 = $102;
 $300 = $95;
 $94 = $97;
 $301 = $94;
 $302 = HEAP32[$301>>2]|0;
 $77 = $302;
 $303 = $77;
 $76 = $303;
 $304 = $76;
 $75 = $304;
 $305 = $75;
 $306 = HEAP32[$305>>2]|0;
 $__t$i$i$i = $306;
 $74 = $303;
 $307 = $74;
 $73 = $307;
 $308 = $73;
 HEAP32[$308>>2] = 0;
 $309 = $__t$i$i$i;
 $78 = $97;
 $310 = $78;
 $311 = HEAP32[$310>>2]|0;
 $81 = $311;
 $312 = $81;
 $80 = $312;
 $313 = $80;
 $79 = $313;
 $314 = $79;
 $315 = ((($314)) + 4|0);
 $82 = $315;
 $316 = $82;
 ;HEAP32[$96>>2]=HEAP32[$316>>2]|0;HEAP32[$96+4>>2]=HEAP32[$316+4>>2]|0;
 ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;HEAP8[$93+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$96+3>>0]|0;HEAP8[$93+4>>0]=HEAP8[$96+4>>0]|0;HEAP8[$93+5>>0]=HEAP8[$96+5>>0]|0;HEAP8[$93+6>>0]=HEAP8[$96+6>>0]|0;HEAP8[$93+7>>0]=HEAP8[$96+7>>0]|0;
 $90 = $300;
 HEAP32[$91>>2] = $309;
 $317 = $90;
 $89 = $91;
 $318 = $89;
 $319 = HEAP32[$318>>2]|0;
 $83 = $93;
 $320 = $83;
 ;HEAP32[$92>>2]=HEAP32[$320>>2]|0;HEAP32[$92+4>>2]=HEAP32[$320+4>>2]|0;
 ;HEAP8[$88>>0]=HEAP8[$92>>0]|0;HEAP8[$88+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$92+3>>0]|0;HEAP8[$88+4>>0]=HEAP8[$92+4>>0]|0;HEAP8[$88+5>>0]=HEAP8[$92+5>>0]|0;HEAP8[$88+6>>0]=HEAP8[$92+6>>0]|0;HEAP8[$88+7>>0]=HEAP8[$92+7>>0]|0;
 $86 = $317;
 HEAP32[$87>>2] = $319;
 $321 = $86;
 $85 = $87;
 $322 = $85;
 $323 = HEAP32[$322>>2]|0;
 HEAP32[$321>>2] = $323;
 $324 = ((($321)) + 4|0);
 $84 = $88;
 $325 = $84;
 ;HEAP32[$324>>2]=HEAP32[$325>>2]|0;HEAP32[$324+4>>2]=HEAP32[$325+4>>2]|0;
 $72 = $102;
 $326 = $72;
 $69 = $71;
 $70 = $326;
 $327 = $69;
 $328 = $70;
 HEAP32[$327>>2] = $328;
 $329 = HEAP32[$71>>2]|0;
 HEAP32[$101>>2] = $329;
 ;HEAP8[$36>>0]=HEAP8[$101>>0]|0;HEAP8[$36+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$101+3>>0]|0;
 $34 = $236;
 $330 = $34;
 $33 = $36;
 $331 = $33;
 $332 = HEAP32[$331>>2]|0;
 $16 = $332;
 $333 = $16;
 $15 = $333;
 $334 = $15;
 $14 = $334;
 $335 = $14;
 $336 = HEAP32[$335>>2]|0;
 $__t$i$i4$i = $336;
 $13 = $333;
 $337 = $13;
 $12 = $337;
 $338 = $12;
 HEAP32[$338>>2] = 0;
 $339 = $__t$i$i4$i;
 $17 = $36;
 $340 = $17;
 $341 = HEAP32[$340>>2]|0;
 $20 = $341;
 $342 = $20;
 $19 = $342;
 $343 = $19;
 $18 = $343;
 $344 = $18;
 $345 = ((($344)) + 4|0);
 $21 = $345;
 $346 = $21;
 ;HEAP32[$35>>2]=HEAP32[$346>>2]|0;HEAP32[$35+4>>2]=HEAP32[$346+4>>2]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;HEAP8[$32+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$32+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$32+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$32+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$32+7>>0]=HEAP8[$35+7>>0]|0;
 $29 = $330;
 HEAP32[$30>>2] = $339;
 $347 = $29;
 $28 = $30;
 $348 = $28;
 $349 = HEAP32[$348>>2]|0;
 $22 = $32;
 $350 = $22;
 ;HEAP32[$31>>2]=HEAP32[$350>>2]|0;HEAP32[$31+4>>2]=HEAP32[$350+4>>2]|0;
 ;HEAP8[$27>>0]=HEAP8[$31>>0]|0;HEAP8[$27+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$31+7>>0]|0;
 $25 = $347;
 HEAP32[$26>>2] = $349;
 $351 = $25;
 $24 = $26;
 $352 = $24;
 $353 = HEAP32[$352>>2]|0;
 HEAP32[$351>>2] = $353;
 $354 = ((($351)) + 4|0);
 $23 = $27;
 $355 = $23;
 ;HEAP32[$354>>2]=HEAP32[$355>>2]|0;HEAP32[$354+4>>2]=HEAP32[$355+4>>2]|0;
 $68 = $102;
 $356 = $68;
 $66 = $356;
 $67 = 0;
 $357 = $66;
 $65 = $357;
 $358 = $65;
 $64 = $358;
 $359 = $64;
 $360 = HEAP32[$359>>2]|0;
 $__tmp$i$i1$i = $360;
 $361 = $67;
 $40 = $357;
 $362 = $40;
 $39 = $362;
 $363 = $39;
 HEAP32[$363>>2] = $361;
 $364 = $__tmp$i$i1$i;
 $365 = ($364|0)!=(0|0);
 if ($365) {
  $38 = $357;
  $366 = $38;
  $37 = $366;
  $367 = $37;
  $368 = ((($367)) + 4|0);
  $369 = $__tmp$i$i1$i;
  $62 = $368;
  $63 = $369;
  $370 = $62;
  $371 = ((($370)) + 5|0);
  $372 = HEAP8[$371>>0]|0;
  $373 = $372&1;
  if ($373) {
   $374 = HEAP32[$370>>2]|0;
   $375 = $63;
   $376 = ((($375)) + 16|0);
   $377 = ((($376)) + 4|0);
   $61 = $377;
   $378 = $61;
   $51 = $374;
   $52 = $378;
   $379 = $51;
   $380 = $52;
   ;HEAP8[$50>>0]=HEAP8[$53>>0]|0;
   $48 = $379;
   $49 = $380;
  }
  $381 = ((($370)) + 4|0);
  $382 = HEAP8[$381>>0]|0;
  $383 = $382&1;
  if ($383) {
   $384 = HEAP32[$370>>2]|0;
   $385 = $63;
   $386 = ((($385)) + 16|0);
   $41 = $386;
   $387 = $41;
   $45 = $384;
   $46 = $387;
   $388 = $45;
   $389 = $46;
   ;HEAP8[$44>>0]=HEAP8[$47>>0]|0;
   $42 = $388;
   $43 = $389;
  }
  $390 = $63;
  $391 = ($390|0)!=(0|0);
  if ($391) {
   $392 = HEAP32[$370>>2]|0;
   $393 = $63;
   $58 = $392;
   $59 = $393;
   $60 = 1;
   $394 = $58;
   $395 = $59;
   $396 = $60;
   $55 = $394;
   $56 = $395;
   $57 = $396;
   $397 = $56;
   $54 = $397;
   $398 = $54;
   __ZdlPv($398);
  }
 }
 $107 = $236;
 $399 = $107;
 $104 = $106;
 $105 = $399;
 $400 = $104;
 $401 = $105;
 HEAP32[$400>>2] = $401;
 $402 = HEAP32[$106>>2]|0;
 HEAP32[$235>>2] = $402;
 ;HEAP8[$132>>0]=HEAP8[$235>>0]|0;HEAP8[$132+1>>0]=HEAP8[$235+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$235+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$235+3>>0]|0;
 $130 = $agg$result;
 $403 = $130;
 $129 = $132;
 $404 = $129;
 $405 = HEAP32[$404>>2]|0;
 $112 = $405;
 $406 = $112;
 $111 = $406;
 $407 = $111;
 $110 = $407;
 $408 = $110;
 $409 = HEAP32[$408>>2]|0;
 $__t$i$i = $409;
 $109 = $406;
 $410 = $109;
 $108 = $410;
 $411 = $108;
 HEAP32[$411>>2] = 0;
 $412 = $__t$i$i;
 $113 = $132;
 $413 = $113;
 $414 = HEAP32[$413>>2]|0;
 $116 = $414;
 $415 = $116;
 $115 = $415;
 $416 = $115;
 $114 = $416;
 $417 = $114;
 $418 = ((($417)) + 4|0);
 $117 = $418;
 $419 = $117;
 ;HEAP32[$131>>2]=HEAP32[$419>>2]|0;HEAP32[$131+4>>2]=HEAP32[$419+4>>2]|0;
 ;HEAP8[$128>>0]=HEAP8[$131>>0]|0;HEAP8[$128+1>>0]=HEAP8[$131+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$131+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$131+3>>0]|0;HEAP8[$128+4>>0]=HEAP8[$131+4>>0]|0;HEAP8[$128+5>>0]=HEAP8[$131+5>>0]|0;HEAP8[$128+6>>0]=HEAP8[$131+6>>0]|0;HEAP8[$128+7>>0]=HEAP8[$131+7>>0]|0;
 $125 = $403;
 HEAP32[$126>>2] = $412;
 $420 = $125;
 $124 = $126;
 $421 = $124;
 $422 = HEAP32[$421>>2]|0;
 $118 = $128;
 $423 = $118;
 ;HEAP32[$127>>2]=HEAP32[$423>>2]|0;HEAP32[$127+4>>2]=HEAP32[$423+4>>2]|0;
 ;HEAP8[$123>>0]=HEAP8[$127>>0]|0;HEAP8[$123+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$127+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$127+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$127+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$127+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$127+7>>0]|0;
 $121 = $420;
 HEAP32[$122>>2] = $422;
 $424 = $121;
 $120 = $122;
 $425 = $120;
 $426 = HEAP32[$425>>2]|0;
 HEAP32[$424>>2] = $426;
 $427 = ((($424)) + 4|0);
 $119 = $123;
 $428 = $119;
 ;HEAP32[$427>>2]=HEAP32[$428>>2]|0;HEAP32[$427+4>>2]=HEAP32[$428+4>>2]|0;
 $167 = $236;
 $429 = $167;
 $165 = $429;
 $166 = 0;
 $430 = $165;
 $164 = $430;
 $431 = $164;
 $163 = $431;
 $432 = $163;
 $433 = HEAP32[$432>>2]|0;
 $__tmp$i$i7 = $433;
 $434 = $166;
 $139 = $430;
 $435 = $139;
 $138 = $435;
 $436 = $138;
 HEAP32[$436>>2] = $434;
 $437 = $__tmp$i$i7;
 $438 = ($437|0)!=(0|0);
 if ($438) {
  $137 = $430;
  $439 = $137;
  $136 = $439;
  $440 = $136;
  $441 = ((($440)) + 4|0);
  $442 = $__tmp$i$i7;
  $161 = $441;
  $162 = $442;
  $443 = $161;
  $444 = ((($443)) + 5|0);
  $445 = HEAP8[$444>>0]|0;
  $446 = $445&1;
  if ($446) {
   $447 = HEAP32[$443>>2]|0;
   $448 = $162;
   $449 = ((($448)) + 16|0);
   $450 = ((($449)) + 4|0);
   $160 = $450;
   $451 = $160;
   $150 = $447;
   $151 = $451;
   $452 = $150;
   $453 = $151;
   ;HEAP8[$149>>0]=HEAP8[$152>>0]|0;
   $147 = $452;
   $148 = $453;
  }
  $454 = ((($443)) + 4|0);
  $455 = HEAP8[$454>>0]|0;
  $456 = $455&1;
  if ($456) {
   $457 = HEAP32[$443>>2]|0;
   $458 = $162;
   $459 = ((($458)) + 16|0);
   $140 = $459;
   $460 = $140;
   $144 = $457;
   $145 = $460;
   $461 = $144;
   $462 = $145;
   ;HEAP8[$143>>0]=HEAP8[$146>>0]|0;
   $141 = $461;
   $142 = $462;
  }
  $463 = $162;
  $464 = ($463|0)!=(0|0);
  if ($464) {
   $465 = HEAP32[$443>>2]|0;
   $466 = $162;
   $157 = $465;
   $158 = $466;
   $159 = 1;
   $467 = $157;
   $468 = $158;
   $469 = $159;
   $154 = $467;
   $155 = $468;
   $156 = $469;
   $470 = $155;
   $153 = $470;
   $471 = $153;
   __ZdlPv($471);
  }
 }
 $200 = $__h;
 $472 = $200;
 $198 = $472;
 $199 = 0;
 $473 = $198;
 $197 = $473;
 $474 = $197;
 $196 = $474;
 $475 = $196;
 $476 = HEAP32[$475>>2]|0;
 $__tmp$i$i4 = $476;
 $477 = $199;
 $172 = $473;
 $478 = $172;
 $171 = $478;
 $479 = $171;
 HEAP32[$479>>2] = $477;
 $480 = $__tmp$i$i4;
 $481 = ($480|0)!=(0|0);
 if (!($481)) {
  STACKTOP = sp;return;
 }
 $170 = $473;
 $482 = $170;
 $169 = $482;
 $483 = $169;
 $484 = ((($483)) + 4|0);
 $485 = $__tmp$i$i4;
 $194 = $484;
 $195 = $485;
 $486 = $194;
 $487 = ((($486)) + 5|0);
 $488 = HEAP8[$487>>0]|0;
 $489 = $488&1;
 if ($489) {
  $490 = HEAP32[$486>>2]|0;
  $491 = $195;
  $492 = ((($491)) + 16|0);
  $493 = ((($492)) + 4|0);
  $193 = $493;
  $494 = $193;
  $183 = $490;
  $184 = $494;
  $495 = $183;
  $496 = $184;
  ;HEAP8[$182>>0]=HEAP8[$185>>0]|0;
  $180 = $495;
  $181 = $496;
 }
 $497 = ((($486)) + 4|0);
 $498 = HEAP8[$497>>0]|0;
 $499 = $498&1;
 if ($499) {
  $500 = HEAP32[$486>>2]|0;
  $501 = $195;
  $502 = ((($501)) + 16|0);
  $173 = $502;
  $503 = $173;
  $177 = $500;
  $178 = $503;
  $504 = $177;
  $505 = $178;
  ;HEAP8[$176>>0]=HEAP8[$179>>0]|0;
  $174 = $504;
  $175 = $505;
 }
 $506 = $195;
 $507 = ($506|0)!=(0|0);
 if (!($507)) {
  STACKTOP = sp;return;
 }
 $508 = HEAP32[$486>>2]|0;
 $509 = $195;
 $190 = $508;
 $191 = $509;
 $192 = 1;
 $510 = $190;
 $511 = $191;
 $512 = $192;
 $187 = $510;
 $188 = $511;
 $189 = $512;
 $513 = $188;
 $186 = $513;
 $514 = $186;
 __ZdlPv($514);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSG_SG_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 108|0;
 $7 = sp + 88|0;
 $22 = sp + 28|0;
 $27 = sp + 8|0;
 $28 = sp + 4|0;
 $29 = sp;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = ((($53)) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = ((($62)) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 52|0;
 $9 = sp + 28|0;
 $13 = sp + 8|0;
 $14 = sp;
 $11 = $__root;
 $12 = $__x;
 $15 = $12;
 $16 = $11;
 $17 = ($15|0)==($16|0);
 $18 = $12;
 $19 = ((($18)) + 12|0);
 $20 = $17&1;
 HEAP8[$19>>0] = $20;
 while(1) {
  $21 = $12;
  $22 = $11;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   label = 17;
   break;
  }
  $24 = $12;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&1;
  $30 = $29 ^ 1;
  if (!($30)) {
   label = 17;
   break;
  }
  $31 = $12;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $10 = $33;
  $34 = $10;
  $35 = $10;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($34|0)==($38|0);
  $40 = $12;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  if ($39) {
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $__y = $46;
   $47 = $__y;
   $7 = $9;
   $8 = -1;
   $48 = $7;
   HEAP32[$48>>2] = 0;
   $49 = HEAP32[$9>>2]|0;
   HEAP32[$13>>2] = $49;
   $6 = $13;
   $50 = ($47|0)!=(0|0);
   if (!($50)) {
    label = 8;
    break;
   }
   $51 = $__y;
   $52 = ((($51)) + 12|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&1;
   if ($54) {
    label = 8;
    break;
   }
   $55 = $12;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $12 = $57;
   $58 = $12;
   $59 = ((($58)) + 12|0);
   HEAP8[$59>>0] = 1;
   $60 = $12;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $12 = $62;
   $63 = $12;
   $64 = $11;
   $65 = ($63|0)==($64|0);
   $66 = $12;
   $67 = ((($66)) + 12|0);
   $68 = $65&1;
   HEAP8[$67>>0] = $68;
   $69 = $__y;
   $70 = ((($69)) + 12|0);
   HEAP8[$70>>0] = 1;
   continue;
  } else {
   $93 = HEAP32[$44>>2]|0;
   $__y1 = $93;
   $94 = $__y1;
   $1 = $3;
   $2 = -1;
   $95 = $1;
   HEAP32[$95>>2] = 0;
   $96 = HEAP32[$3>>2]|0;
   HEAP32[$14>>2] = $96;
   $4 = $14;
   $97 = ($94|0)!=(0|0);
   if (!($97)) {
    label = 14;
    break;
   }
   $98 = $__y1;
   $99 = ((($98)) + 12|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   if ($101) {
    label = 14;
    break;
   }
   $102 = $12;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $12 = $104;
   $105 = $12;
   $106 = ((($105)) + 12|0);
   HEAP8[$106>>0] = 1;
   $107 = $12;
   $108 = ((($107)) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $12 = $109;
   $110 = $12;
   $111 = $11;
   $112 = ($110|0)==($111|0);
   $113 = $12;
   $114 = ((($113)) + 12|0);
   $115 = $112&1;
   HEAP8[$114>>0] = $115;
   $116 = $__y1;
   $117 = ((($116)) + 12|0);
   HEAP8[$117>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $71 = $12;
  $0 = $71;
  $72 = $0;
  $73 = $0;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($72|0)==($76|0);
  if (!($77)) {
   $78 = $12;
   $79 = ((($78)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $12 = $80;
   $81 = $12;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($81);
  }
  $82 = $12;
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $12 = $84;
  $85 = $12;
  $86 = ((($85)) + 12|0);
  HEAP8[$86>>0] = 1;
  $87 = $12;
  $88 = ((($87)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $12 = $89;
  $90 = $12;
  $91 = ((($90)) + 12|0);
  HEAP8[$91>>0] = 0;
  $92 = $12;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($92);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $118 = $12;
  $5 = $118;
  $119 = $5;
  $120 = $5;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = HEAP32[$122>>2]|0;
  $124 = ($119|0)==($123|0);
  if ($124) {
   $125 = $12;
   $126 = ((($125)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $12 = $127;
   $128 = $12;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($128);
  }
  $129 = $12;
  $130 = ((($129)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $12 = $131;
  $132 = $12;
  $133 = ((($132)) + 12|0);
  HEAP8[$133>>0] = 1;
  $134 = $12;
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $12 = $136;
  $137 = $12;
  $138 = ((($137)) + 12|0);
  HEAP8[$138>>0] = 0;
  $139 = $12;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($139);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 12|0;
 $6 = sp;
 $5 = $__x;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $__y = $9;
 $10 = $__y;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $2 = $4;
 $3 = -1;
 $17 = $2;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$4>>2]|0;
 HEAP32[$6>>2] = $18;
 $0 = $6;
 $19 = ($16|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = $20;
 }
 $25 = $5;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $__y;
 $29 = ((($28)) + 8|0);
 HEAP32[$29>>2] = $27;
 $30 = $5;
 $1 = $30;
 $31 = $1;
 $32 = $1;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($31|0)==($35|0);
 $37 = $__y;
 $38 = $5;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 if ($36) {
  HEAP32[$40>>2] = $37;
  $42 = $5;
  $43 = $__y;
  HEAP32[$43>>2] = $42;
  $44 = $__y;
  $45 = $5;
  $46 = ((($45)) + 8|0);
  HEAP32[$46>>2] = $44;
  STACKTOP = sp;return;
 } else {
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $37;
  $42 = $5;
  $43 = $__y;
  HEAP32[$43>>2] = $42;
  $44 = $__y;
  $45 = $5;
  $46 = ((($45)) + 8|0);
  HEAP32[$46>>2] = $44;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 12|0;
 $6 = sp;
 $5 = $__x;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $__y = $8;
 $9 = $__y;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 HEAP32[$12>>2] = $11;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $2 = $4;
 $3 = -1;
 $15 = $2;
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$4>>2]|0;
 HEAP32[$6>>2] = $16;
 $0 = $6;
 $17 = ($14|0)!=(0|0);
 if ($17) {
  $18 = $5;
  $19 = $5;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  HEAP32[$21>>2] = $18;
 }
 $22 = $5;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $__y;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $24;
 $27 = $5;
 $1 = $27;
 $28 = $1;
 $29 = $1;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($28|0)==($32|0);
 $34 = $__y;
 $35 = $5;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 if ($33) {
  HEAP32[$37>>2] = $34;
  $39 = $5;
  $40 = $__y;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $__y;
  $43 = $5;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = $42;
  STACKTOP = sp;return;
 } else {
  $38 = ((($37)) + 4|0);
  HEAP32[$38>>2] = $34;
  $39 = $5;
  $40 = $__y;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $__y;
  $43 = $5;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = $42;
  STACKTOP = sp;return;
 }
}
function __ZNK7b2Joint19GetCollideConnectedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN14b2CLCommonData18CopyPrismaticJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pPrismaticJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pPrismaticJoint = $4;
 $5 = $pPrismaticJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pPrismaticJoint;
 $11 = ((($10)) + 68|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pPrismaticJoint;
 $18 = ((($17)) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pPrismaticJoint;
 $24 = ((($23)) + 76|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 8|0);
 $30 = ((($29)) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pPrismaticJoint;
 $32 = ((($31)) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pPrismaticJoint;
 $38 = ((($37)) + 84|0);
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $1;
 $42 = ((($41)) + 48|0);
 $43 = ((($42)) + 16|0);
 $44 = ((($43)) + 4|0);
 HEAPF32[$44>>2] = $40;
 $45 = $pPrismaticJoint;
 $46 = ((($45)) + 92|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $1;
 $49 = ((($48)) + 48|0);
 $50 = ((($49)) + 24|0);
 HEAPF32[$50>>2] = $47;
 $51 = $pPrismaticJoint;
 $52 = ((($51)) + 92|0);
 $53 = ((($52)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $1;
 $56 = ((($55)) + 48|0);
 $57 = ((($56)) + 24|0);
 $58 = ((($57)) + 4|0);
 HEAPF32[$58>>2] = $54;
 $59 = $pPrismaticJoint;
 $60 = ((($59)) + 100|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = ((($62)) + 48|0);
 $64 = ((($63)) + 32|0);
 HEAPF32[$64>>2] = $61;
 $65 = $pPrismaticJoint;
 $66 = ((($65)) + 120|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = ((($68)) + 48|0);
 $70 = ((($69)) + 36|0);
 HEAPF32[$70>>2] = $67;
 $71 = $pPrismaticJoint;
 $72 = ((($71)) + 124|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = ((($74)) + 48|0);
 $76 = ((($75)) + 40|0);
 HEAPF32[$76>>2] = $73;
 $77 = $pPrismaticJoint;
 $78 = ((($77)) + 128|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $1;
 $81 = ((($80)) + 48|0);
 $82 = ((($81)) + 44|0);
 HEAPF32[$82>>2] = $79;
 $83 = $pPrismaticJoint;
 $84 = ((($83)) + 132|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $1;
 $87 = ((($86)) + 48|0);
 $88 = ((($87)) + 48|0);
 HEAPF32[$88>>2] = $85;
 $89 = $pPrismaticJoint;
 $90 = ((($89)) + 136|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&1;
 $93 = $92 ? 1 : 0;
 $94 = $1;
 $95 = ((($94)) + 48|0);
 $96 = ((($95)) + 52|0);
 HEAP32[$96>>2] = $93;
 $97 = $pPrismaticJoint;
 $98 = ((($97)) + 137|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&1;
 $101 = $100 ? 1 : 0;
 $102 = $1;
 $103 = ((($102)) + 48|0);
 $104 = ((($103)) + 56|0);
 HEAP32[$104>>2] = $101;
 $105 = $pPrismaticJoint;
 $106 = ((($105)) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $1;
 $109 = ((($108)) + 48|0);
 $110 = ((($109)) + 60|0);
 HEAP32[$110>>2] = $107;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData17CopyDistanceJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $pDistanceJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pDistanceJoint = $4;
 $5 = $pDistanceJoint;
 $6 = (+__ZNK15b2DistanceJoint12GetFrequencyEv($5));
 $7 = $1;
 $8 = ((($7)) + 48|0);
 HEAPF32[$8>>2] = $6;
 $9 = $pDistanceJoint;
 $10 = (+__ZNK15b2DistanceJoint15GetDampingRatioEv($9));
 $11 = $1;
 $12 = ((($11)) + 48|0);
 $13 = ((($12)) + 4|0);
 HEAPF32[$13>>2] = $10;
 $14 = $pDistanceJoint;
 $15 = ((($14)) + 76|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = ((($17)) + 48|0);
 $19 = ((($18)) + 8|0);
 HEAPF32[$19>>2] = $16;
 $20 = $pDistanceJoint;
 $21 = ((($20)) + 104|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = ((($23)) + 48|0);
 $25 = ((($24)) + 32|0);
 HEAPF32[$25>>2] = $22;
 $26 = $pDistanceJoint;
 $27 = ((($26)) + 80|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $1;
 $30 = ((($29)) + 48|0);
 $31 = ((($30)) + 12|0);
 HEAPF32[$31>>2] = $28;
 $32 = $pDistanceJoint;
 $33 = ((($32)) + 80|0);
 $34 = ((($33)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $1;
 $37 = ((($36)) + 48|0);
 $38 = ((($37)) + 12|0);
 $39 = ((($38)) + 4|0);
 HEAPF32[$39>>2] = $35;
 $40 = $pDistanceJoint;
 $41 = ((($40)) + 88|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $1;
 $44 = ((($43)) + 48|0);
 $45 = ((($44)) + 20|0);
 HEAPF32[$45>>2] = $42;
 $46 = $pDistanceJoint;
 $47 = ((($46)) + 88|0);
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $1;
 $51 = ((($50)) + 48|0);
 $52 = ((($51)) + 20|0);
 $53 = ((($52)) + 4|0);
 HEAPF32[$53>>2] = $49;
 STACKTOP = sp;return;
}
function __ZNK15b2DistanceJoint12GetFrequencyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 68|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZNK15b2DistanceJoint15GetDampingRatioEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZN14b2CLCommonData15CopyPulleyJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $pPulleyJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pPulleyJoint = $4;
 $5 = $pPulleyJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pPulleyJoint;
 $11 = ((($10)) + 68|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pPulleyJoint;
 $18 = ((($17)) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pPulleyJoint;
 $24 = ((($23)) + 76|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 8|0);
 $30 = ((($29)) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pPulleyJoint;
 $32 = ((($31)) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pPulleyJoint;
 $38 = ((($37)) + 88|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = ((($40)) + 48|0);
 $42 = ((($41)) + 20|0);
 HEAPF32[$42>>2] = $39;
 $43 = $pPulleyJoint;
 $44 = ((($43)) + 92|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 24|0);
 HEAPF32[$48>>2] = $45;
 $49 = $pPulleyJoint;
 $50 = ((($49)) + 92|0);
 $51 = ((($50)) + 4|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = ((($53)) + 48|0);
 $55 = ((($54)) + 24|0);
 $56 = ((($55)) + 4|0);
 HEAPF32[$56>>2] = $52;
 $57 = $pPulleyJoint;
 $58 = ((($57)) + 100|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $1;
 $61 = ((($60)) + 48|0);
 $62 = ((($61)) + 32|0);
 HEAPF32[$62>>2] = $59;
 $63 = $pPulleyJoint;
 $64 = ((($63)) + 100|0);
 $65 = ((($64)) + 4|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $1;
 $68 = ((($67)) + 48|0);
 $69 = ((($68)) + 32|0);
 $70 = ((($69)) + 4|0);
 HEAPF32[$70>>2] = $66;
 $71 = $pPulleyJoint;
 $72 = ((($71)) + 108|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = ((($74)) + 48|0);
 $76 = ((($75)) + 40|0);
 HEAPF32[$76>>2] = $73;
 $77 = $pPulleyJoint;
 $78 = ((($77)) + 112|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $1;
 $81 = ((($80)) + 48|0);
 $82 = ((($81)) + 44|0);
 HEAPF32[$82>>2] = $79;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData14CopyMouseJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, $pMouseJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pMouseJoint = $4;
 $5 = $pMouseJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pMouseJoint;
 $11 = ((($10)) + 68|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pMouseJoint;
 $18 = ((($17)) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pMouseJoint;
 $24 = ((($23)) + 76|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 8|0);
 $30 = ((($29)) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pMouseJoint;
 $32 = ((($31)) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pMouseJoint;
 $38 = ((($37)) + 88|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = ((($40)) + 48|0);
 $42 = ((($41)) + 20|0);
 HEAPF32[$42>>2] = $39;
 $43 = $pMouseJoint;
 $44 = ((($43)) + 92|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 24|0);
 HEAPF32[$48>>2] = $45;
 $49 = $pMouseJoint;
 $50 = ((($49)) + 104|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $1;
 $53 = ((($52)) + 48|0);
 $54 = ((($53)) + 28|0);
 HEAPF32[$54>>2] = $51;
 $55 = $pMouseJoint;
 $56 = ((($55)) + 108|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $1;
 $59 = ((($58)) + 48|0);
 $60 = ((($59)) + 32|0);
 HEAPF32[$60>>2] = $57;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyGearJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $pGearJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pGearJoint = $4;
 $5 = $pGearJoint;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $pGearJoint;
 $13 = ((($12)) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 48|0);
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $16;
 $20 = $pGearJoint;
 $21 = ((($20)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNK7b2Joint7GetTypeEv($22)|0);
 $24 = $1;
 $25 = ((($24)) + 48|0);
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $23;
 $27 = $pGearJoint;
 $28 = ((($27)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (__ZNK7b2Joint7GetTypeEv($29)|0);
 $31 = $1;
 $32 = ((($31)) + 48|0);
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $30;
 $34 = $pGearJoint;
 $35 = ((($34)) + 92|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $1;
 $38 = ((($37)) + 48|0);
 $39 = ((($38)) + 16|0);
 HEAPF32[$39>>2] = $36;
 $40 = $pGearJoint;
 $41 = ((($40)) + 92|0);
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $1;
 $45 = ((($44)) + 48|0);
 $46 = ((($45)) + 16|0);
 $47 = ((($46)) + 4|0);
 HEAPF32[$47>>2] = $43;
 $48 = $pGearJoint;
 $49 = ((($48)) + 100|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $1;
 $52 = ((($51)) + 48|0);
 $53 = ((($52)) + 24|0);
 HEAPF32[$53>>2] = $50;
 $54 = $pGearJoint;
 $55 = ((($54)) + 100|0);
 $56 = ((($55)) + 4|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $1;
 $59 = ((($58)) + 48|0);
 $60 = ((($59)) + 24|0);
 $61 = ((($60)) + 4|0);
 HEAPF32[$61>>2] = $57;
 $62 = $pGearJoint;
 $63 = ((($62)) + 108|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $1;
 $66 = ((($65)) + 48|0);
 $67 = ((($66)) + 32|0);
 HEAPF32[$67>>2] = $64;
 $68 = $pGearJoint;
 $69 = ((($68)) + 108|0);
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $1;
 $73 = ((($72)) + 48|0);
 $74 = ((($73)) + 32|0);
 $75 = ((($74)) + 4|0);
 HEAPF32[$75>>2] = $71;
 $76 = $pGearJoint;
 $77 = ((($76)) + 116|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $1;
 $80 = ((($79)) + 48|0);
 $81 = ((($80)) + 40|0);
 HEAPF32[$81>>2] = $78;
 $82 = $pGearJoint;
 $83 = ((($82)) + 116|0);
 $84 = ((($83)) + 4|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $1;
 $87 = ((($86)) + 48|0);
 $88 = ((($87)) + 40|0);
 $89 = ((($88)) + 4|0);
 HEAPF32[$89>>2] = $85;
 $90 = $pGearJoint;
 $91 = ((($90)) + 124|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $1;
 $94 = ((($93)) + 48|0);
 $95 = ((($94)) + 48|0);
 HEAPF32[$95>>2] = $92;
 $96 = $pGearJoint;
 $97 = ((($96)) + 124|0);
 $98 = ((($97)) + 4|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $1;
 $101 = ((($100)) + 48|0);
 $102 = ((($101)) + 48|0);
 $103 = ((($102)) + 4|0);
 HEAPF32[$103>>2] = $99;
 $104 = $pGearJoint;
 $105 = ((($104)) + 132|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $1;
 $108 = ((($107)) + 48|0);
 $109 = ((($108)) + 56|0);
 HEAPF32[$109>>2] = $106;
 $110 = $pGearJoint;
 $111 = ((($110)) + 132|0);
 $112 = ((($111)) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $1;
 $115 = ((($114)) + 48|0);
 $116 = ((($115)) + 56|0);
 $117 = ((($116)) + 4|0);
 HEAPF32[$117>>2] = $113;
 $118 = $pGearJoint;
 $119 = ((($118)) + 140|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $1;
 $122 = ((($121)) + 48|0);
 $123 = ((($122)) + 64|0);
 HEAPF32[$123>>2] = $120;
 $124 = $pGearJoint;
 $125 = ((($124)) + 144|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $1;
 $128 = ((($127)) + 48|0);
 $129 = ((($128)) + 68|0);
 HEAPF32[$129>>2] = $126;
 $130 = $pGearJoint;
 $131 = ((($130)) + 148|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $1;
 $134 = ((($133)) + 48|0);
 $135 = ((($134)) + 72|0);
 HEAPF32[$135>>2] = $132;
 $136 = $pGearJoint;
 $137 = ((($136)) + 152|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $1;
 $140 = ((($139)) + 48|0);
 $141 = ((($140)) + 76|0);
 HEAPF32[$141>>2] = $138;
 $142 = $pGearJoint;
 $143 = ((($142)) + 84|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 100|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $1;
 $148 = ((($147)) + 40|0);
 HEAP32[$148>>2] = $146;
 $149 = $pGearJoint;
 $150 = ((($149)) + 88|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ((($151)) + 100|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $1;
 $155 = ((($154)) + 44|0);
 HEAP32[$155>>2] = $153;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData14CopyWheelJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $pWheelJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pWheelJoint = $4;
 $5 = $pWheelJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pWheelJoint;
 $11 = ((($10)) + 72|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 48|0);
 $15 = ((($14)) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = $pWheelJoint;
 $17 = ((($16)) + 76|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 48|0);
 $21 = ((($20)) + 8|0);
 HEAPF32[$21>>2] = $18;
 $22 = $pWheelJoint;
 $23 = ((($22)) + 76|0);
 $24 = ((($23)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = ((($26)) + 48|0);
 $28 = ((($27)) + 8|0);
 $29 = ((($28)) + 4|0);
 HEAPF32[$29>>2] = $25;
 $30 = $pWheelJoint;
 $31 = ((($30)) + 84|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $1;
 $34 = ((($33)) + 48|0);
 $35 = ((($34)) + 16|0);
 HEAPF32[$35>>2] = $32;
 $36 = $pWheelJoint;
 $37 = ((($36)) + 84|0);
 $38 = ((($37)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = ((($40)) + 48|0);
 $42 = ((($41)) + 16|0);
 $43 = ((($42)) + 4|0);
 HEAPF32[$43>>2] = $39;
 $44 = $pWheelJoint;
 $45 = ((($44)) + 92|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $1;
 $48 = ((($47)) + 48|0);
 $49 = ((($48)) + 24|0);
 HEAPF32[$49>>2] = $46;
 $50 = $pWheelJoint;
 $51 = ((($50)) + 92|0);
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $1;
 $55 = ((($54)) + 48|0);
 $56 = ((($55)) + 24|0);
 $57 = ((($56)) + 4|0);
 HEAPF32[$57>>2] = $53;
 $58 = $pWheelJoint;
 $59 = ((($58)) + 100|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $1;
 $62 = ((($61)) + 48|0);
 $63 = ((($62)) + 32|0);
 HEAPF32[$63>>2] = $60;
 $64 = $pWheelJoint;
 $65 = ((($64)) + 100|0);
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = ((($68)) + 48|0);
 $70 = ((($69)) + 32|0);
 $71 = ((($70)) + 4|0);
 HEAPF32[$71>>2] = $67;
 $72 = $pWheelJoint;
 $73 = ((($72)) + 120|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $1;
 $76 = ((($75)) + 48|0);
 $77 = ((($76)) + 40|0);
 HEAPF32[$77>>2] = $74;
 $78 = $pWheelJoint;
 $79 = ((($78)) + 124|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $1;
 $82 = ((($81)) + 48|0);
 $83 = ((($82)) + 44|0);
 HEAPF32[$83>>2] = $80;
 $84 = $pWheelJoint;
 $85 = ((($84)) + 128|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&1;
 $88 = $87 ? 1 : 0;
 $89 = $1;
 $90 = ((($89)) + 48|0);
 $91 = ((($90)) + 48|0);
 HEAP32[$91>>2] = $88;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyWeldJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, $pWeldJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pWeldJoint = $4;
 $5 = $pWeldJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pWeldJoint;
 $11 = ((($10)) + 72|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = ((($13)) + 48|0);
 $15 = ((($14)) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = $pWeldJoint;
 $17 = ((($16)) + 76|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 48|0);
 $21 = ((($20)) + 8|0);
 HEAPF32[$21>>2] = $18;
 $22 = $pWeldJoint;
 $23 = ((($22)) + 80|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $1;
 $26 = ((($25)) + 48|0);
 $27 = ((($26)) + 12|0);
 HEAPF32[$27>>2] = $24;
 $28 = $pWeldJoint;
 $29 = ((($28)) + 80|0);
 $30 = ((($29)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = ((($32)) + 48|0);
 $34 = ((($33)) + 12|0);
 $35 = ((($34)) + 4|0);
 HEAPF32[$35>>2] = $31;
 $36 = $pWeldJoint;
 $37 = ((($36)) + 88|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = ((($39)) + 48|0);
 $41 = ((($40)) + 20|0);
 HEAPF32[$41>>2] = $38;
 $42 = $pWeldJoint;
 $43 = ((($42)) + 88|0);
 $44 = ((($43)) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 20|0);
 $49 = ((($48)) + 4|0);
 HEAPF32[$49>>2] = $45;
 $50 = $pWeldJoint;
 $51 = ((($50)) + 96|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = ((($53)) + 48|0);
 $55 = ((($54)) + 28|0);
 HEAPF32[$55>>2] = $52;
 $56 = $pWeldJoint;
 $57 = ((($56)) + 100|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $1;
 $60 = ((($59)) + 48|0);
 $61 = ((($60)) + 32|0);
 HEAPF32[$61>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData17CopyFrictionJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, $pFrictionJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pFrictionJoint = $4;
 $5 = $pFrictionJoint;
 $6 = ((($5)) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pFrictionJoint;
 $11 = ((($10)) + 68|0);
 $12 = ((($11)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pFrictionJoint;
 $18 = ((($17)) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pFrictionJoint;
 $24 = ((($23)) + 76|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 8|0);
 $30 = ((($29)) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pFrictionJoint;
 $32 = ((($31)) + 96|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pFrictionJoint;
 $38 = ((($37)) + 100|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = ((($40)) + 48|0);
 $42 = ((($41)) + 20|0);
 HEAPF32[$42>>2] = $39;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyRopeJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $pRopeJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pRopeJoint = $4;
 $5 = $pRopeJoint;
 $6 = ((($5)) + 84|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = ((($8)) + 48|0);
 $10 = ((($9)) + 16|0);
 HEAPF32[$10>>2] = $7;
 $11 = $pRopeJoint;
 $12 = ((($11)) + 88|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = ((($14)) + 48|0);
 $16 = ((($15)) + 20|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pRopeJoint;
 $18 = ((($17)) + 164|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 84|0);
 HEAP32[$22>>2] = $19;
 $23 = $pRopeJoint;
 $24 = ((($23)) + 68|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = ((($26)) + 48|0);
 HEAPF32[$27>>2] = $25;
 $28 = $pRopeJoint;
 $29 = ((($28)) + 68|0);
 $30 = ((($29)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = ((($32)) + 48|0);
 $34 = ((($33)) + 4|0);
 HEAPF32[$34>>2] = $31;
 $35 = $pRopeJoint;
 $36 = ((($35)) + 76|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $1;
 $39 = ((($38)) + 48|0);
 $40 = ((($39)) + 8|0);
 HEAPF32[$40>>2] = $37;
 $41 = $pRopeJoint;
 $42 = ((($41)) + 76|0);
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $1;
 $46 = ((($45)) + 48|0);
 $47 = ((($46)) + 8|0);
 $48 = ((($47)) + 4|0);
 HEAPF32[$48>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData25initReadLastJointImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $commonDataSource = 0, $commonDataSourceLen = 0, $err = 0;
 var $len = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 64|0;
 $commonDataSource = sp + 60|0;
 $commonDataSourceLen = sp + 56|0;
 $len = sp + 52|0;
 $buffer = sp + 72|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[11781]|0;
 $3 = $2&1;
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (_printf(12762,$vararg_buffer)|0);
 HEAP32[$commonDataSource>>2] = 0;
 HEAP32[$commonDataSourceLen>>2] = 0;
 __ZL6shrLogPKcz_112(12794,$vararg_buffer2);
 $4 = (__ZL15shrFindFilePathPKcPv_114(12824,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj_116($4,19137,$commonDataSourceLen)|0);
 HEAP32[$commonDataSource>>2] = $5;
 $6 = HEAP32[$commonDataSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(12858,$vararg_buffer4);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($commonDataSource|0),(0|0),($err|0))|0);
 $11 = ((($1)) + 1176|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($1)) + 1176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  (_printf(19218,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $15 = ((($1)) + 1176|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_clBuildProgram(($16|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $17;
 $18 = HEAP32[$err>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  (_printf(19260,$vararg_buffer8)|0);
  $20 = ((($1)) + 1176|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($22)|0);
  (_clGetProgramBuildInfo(($21|0),($23|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer10>>2] = $buffer;
  (_printf(19304,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 }
 $24 = ((($1)) + 1176|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_clCreateKernel(($25|0),(12926|0),($err|0))|0);
 $27 = ((($1)) + 1180|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($1)) + 1180|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 $31 = HEAP32[$err>>2]|0;
 $32 = ($31|0)!=(0);
 $or$cond = $30 | $32;
 if ($or$cond) {
  (_printf(16762,$vararg_buffer12)|0);
  _exit(1);
  // unreachable;
 }
 $33 = (__ZN10b2CLDevice8instanceEv()|0);
 $34 = ((($1)) + 1180|0);
 $35 = ((($1)) + 1184|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($33,$34,$35);
 STACKTOP = sp;return;
}
function __ZL6shrLogPKcz_112($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv_114($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj_116($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30416]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30416)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 32420;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(32420|0),(___dso_handle|0))|0);
  }
 }
 $76 = 32420;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 37054;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32420|0),(37054|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32420|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 32420;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 32420;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN14b2CLCommonData10CopyShapesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $b = 0, $body_index = 0, $f = 0, $i = 0, $i3 = 0, $maxContactCount = 0, $s = 0, $sc = 0, $sc1 = 0, $se = 0, $se2 = 0, $shape_index = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 103084|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)<($8|0);
 if ($9) {
  $10 = ((($4)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    __ZdaPv($14);
   }
  }
  $16 = $1;
  $17 = ((($16)) + 103084|0);
  $18 = HEAP32[$17>>2]|0;
  $$arith2 = ($18*160)|0;
  $$overflow3 = ($18>>>0)>(26843545);
  $19 = $$overflow3 ? -1 : $$arith2;
  $20 = (__Znaj($19)|0);
  $21 = ((($4)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = ((($4)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = (__ZN10b2CLDevice8instanceEv()|0);
   $26 = ((($4)) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($25,$27);
  }
  $28 = (__ZN10b2CLDevice8instanceEv()|0);
  $29 = $1;
  $30 = ((($29)) + 103084|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31*160)|0;
  $33 = (__ZN10b2CLDevice13allocateArrayEjb($28,$32,0)|0);
  $34 = ((($4)) + 56|0);
  HEAP32[$34>>2] = $33;
  $35 = ((($4)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = ((($4)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    __ZdaPv($39);
   }
  }
  $41 = $1;
  $42 = ((($41)) + 103084|0);
  $43 = HEAP32[$42>>2]|0;
  $$arith = $43<<2;
  $$overflow = ($43>>>0)>(1073741823);
  $44 = $$overflow ? -1 : $$arith;
  $45 = (__Znaj($44)|0);
  $46 = ((($4)) + 16|0);
  HEAP32[$46>>2] = $45;
  $47 = ((($4)) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = (__ZN10b2CLDevice8instanceEv()|0);
   $51 = ((($4)) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($50,$52);
  }
  $53 = (__ZN10b2CLDevice8instanceEv()|0);
  $54 = $1;
  $55 = ((($54)) + 103084|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56<<2;
  $58 = (__ZN10b2CLDevice13allocateArrayEjb($53,$57,0)|0);
  $59 = ((($4)) + 60|0);
  HEAP32[$59>>2] = $58;
  $60 = HEAP8[11781]|0;
  $61 = $60&1;
  if ($61) {
   $62 = $1;
   $63 = ((($62)) + 103084|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64*10)|0;
   $maxContactCount = $65;
   $66 = ((($4)) + 80|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)!=(0|0);
   if ($68) {
    $69 = (__ZN10b2CLDevice8instanceEv()|0);
    $70 = ((($4)) + 80|0);
    $71 = HEAP32[$70>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($69,$71);
   }
   $72 = (__ZN10b2CLDevice8instanceEv()|0);
   $73 = $maxContactCount;
   $74 = $73<<4;
   $75 = (__ZN10b2CLDevice13allocateArrayEjb($72,$74,0)|0);
   $76 = ((($4)) + 80|0);
   HEAP32[$76>>2] = $75;
   $77 = ((($4)) + 84|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = (__ZN10b2CLDevice8instanceEv()|0);
    $81 = ((($4)) + 84|0);
    $82 = HEAP32[$81>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($80,$82);
   }
   $83 = (__ZN10b2CLDevice8instanceEv()|0);
   $84 = $maxContactCount;
   $85 = $84<<2;
   $86 = ($85*5)|0;
   $87 = (__ZN10b2CLDevice13allocateArrayEjb($83,$86,0)|0);
   $88 = ((($4)) + 84|0);
   HEAP32[$88>>2] = $87;
   $89 = ((($4)) + 88|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)!=(0|0);
   if ($91) {
    $92 = (__ZN10b2CLDevice8instanceEv()|0);
    $93 = ((($4)) + 88|0);
    $94 = HEAP32[$93>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($92,$94);
   }
   $95 = (__ZN10b2CLDevice8instanceEv()|0);
   $96 = $maxContactCount;
   $97 = $96<<2;
   $98 = ($97*5)|0;
   $99 = (__ZN10b2CLDevice13allocateArrayEjb($95,$98,0)|0);
   $100 = ((($4)) + 88|0);
   HEAP32[$100>>2] = $99;
  }
  $101 = $1;
  $102 = ((($101)) + 103084|0);
  $103 = HEAP32[$102>>2]|0;
  HEAP32[$4>>2] = $103;
 }
 $shape_index = 0;
 $body_index = 0;
 $104 = $1;
 $105 = ((($104)) + 103068|0);
 $106 = HEAP32[$105>>2]|0;
 $b = $106;
 L30: while(1) {
  $107 = $b;
  $108 = ($107|0)!=(0|0);
  if (!($108)) {
   label = 47;
   break;
  }
  $109 = $b;
  $110 = ((($109)) + 108|0);
  $111 = HEAP32[$110>>2]|0;
  $f = $111;
  while(1) {
   $112 = $f;
   $113 = ($112|0)!=(0|0);
   if (!($113)) {
    break;
   }
   $114 = $f;
   $115 = ((($114)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $s = $116;
   $117 = $f;
   $118 = ((($117)) + 40|0);
   $119 = HEAP16[$118>>1]|0;
   $120 = $shape_index;
   $121 = ((($4)) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + (($120*160)|0)|0);
   $124 = ((($123)) + 152|0);
   HEAP16[$124>>1] = $119;
   $125 = $f;
   $126 = ((($125)) + 40|0);
   $127 = ((($126)) + 4|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $shape_index;
   $130 = ((($4)) + 12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + (($129*160)|0)|0);
   $133 = ((($132)) + 152|0);
   $134 = ((($133)) + 4|0);
   HEAP16[$134>>1] = $128;
   $135 = $f;
   $136 = ((($135)) + 40|0);
   $137 = ((($136)) + 2|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $shape_index;
   $140 = ((($4)) + 12|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + (($139*160)|0)|0);
   $143 = ((($142)) + 152|0);
   $144 = ((($143)) + 2|0);
   HEAP16[$144>>1] = $138;
   $145 = $s;
   $146 = ((($145)) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   L36: do {
    switch ($147|0) {
    case 0:  {
     $148 = $s;
     $sc = $148;
     $149 = $sc;
     $150 = ((($149)) + 12|0);
     $151 = +HEAPF32[$150>>2];
     $152 = $shape_index;
     $153 = ((($4)) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + (($152*160)|0)|0);
     HEAPF32[$155>>2] = $151;
     $156 = $sc;
     $157 = ((($156)) + 12|0);
     $158 = ((($157)) + 4|0);
     $159 = +HEAPF32[$158>>2];
     $160 = $shape_index;
     $161 = ((($4)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + (($160*160)|0)|0);
     $164 = ((($163)) + 4|0);
     HEAPF32[$164>>2] = $159;
     $165 = $sc;
     $166 = ((($165)) + 12|0);
     $167 = +HEAPF32[$166>>2];
     $168 = $shape_index;
     $169 = ((($4)) + 12|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($170) + (($168*160)|0)|0);
     $172 = ((($171)) + 8|0);
     HEAPF32[$172>>2] = $167;
     $173 = $sc;
     $174 = ((($173)) + 12|0);
     $175 = ((($174)) + 4|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $shape_index;
     $178 = ((($4)) + 12|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) + (($177*160)|0)|0);
     $181 = ((($180)) + 8|0);
     $182 = ((($181)) + 4|0);
     HEAPF32[$182>>2] = $176;
     $183 = $shape_index;
     $184 = ((($4)) + 12|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (($185) + (($183*160)|0)|0);
     $187 = ((($186)) + 144|0);
     HEAP32[$187>>2] = 1;
     $188 = $s;
     $189 = ((($188)) + 4|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $shape_index;
     $192 = ((($4)) + 12|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + (($191*160)|0)|0);
     $195 = ((($194)) + 136|0);
     HEAP32[$195>>2] = $190;
     $196 = $s;
     $197 = ((($196)) + 8|0);
     $198 = +HEAPF32[$197>>2];
     $199 = $shape_index;
     $200 = ((($4)) + 12|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) + (($199*160)|0)|0);
     $203 = ((($202)) + 140|0);
     HEAPF32[$203>>2] = $198;
     $204 = $f;
     $205 = (__ZNK9b2Fixture8IsSensorEv($204)|0);
     $206 = $205&1;
     $207 = $shape_index;
     $208 = ((($4)) + 12|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = (($209) + (($207*160)|0)|0);
     $211 = ((($210)) + 148|0);
     HEAP32[$211>>2] = $206;
     $212 = $body_index;
     $213 = $shape_index;
     $214 = ((($4)) + 16|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = (($215) + ($213<<2)|0);
     HEAP32[$216>>2] = $212;
     $217 = $shape_index;
     $218 = (($217) + 1)|0;
     $shape_index = $218;
     break;
    }
    case 1:  {
     $219 = $s;
     $se = $219;
     $220 = $se;
     $221 = ((($220)) + 44|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = $222&1;
     $224 = (+($223&1));
     $225 = $shape_index;
     $226 = ((($4)) + 12|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (($227) + (($225*160)|0)|0);
     HEAPF32[$228>>2] = $224;
     $229 = $se;
     $230 = ((($229)) + 45|0);
     $231 = HEAP8[$230>>0]|0;
     $232 = $231&1;
     $233 = (+($232&1));
     $234 = $shape_index;
     $235 = ((($4)) + 12|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = (($236) + (($234*160)|0)|0);
     $238 = ((($237)) + 4|0);
     HEAPF32[$238>>2] = $233;
     $239 = $se;
     $240 = ((($239)) + 12|0);
     $241 = +HEAPF32[$240>>2];
     $242 = $shape_index;
     $243 = ((($4)) + 12|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = (($244) + (($242*160)|0)|0);
     $246 = ((($245)) + 8|0);
     HEAPF32[$246>>2] = $241;
     $247 = $se;
     $248 = ((($247)) + 12|0);
     $249 = ((($248)) + 4|0);
     $250 = +HEAPF32[$249>>2];
     $251 = $shape_index;
     $252 = ((($4)) + 12|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = (($253) + (($251*160)|0)|0);
     $255 = ((($254)) + 8|0);
     $256 = ((($255)) + 4|0);
     HEAPF32[$256>>2] = $250;
     $257 = $se;
     $258 = ((($257)) + 20|0);
     $259 = +HEAPF32[$258>>2];
     $260 = $shape_index;
     $261 = ((($4)) + 12|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($262) + (($260*160)|0)|0);
     $264 = ((($263)) + 8|0);
     $265 = ((($264)) + 8|0);
     HEAPF32[$265>>2] = $259;
     $266 = $se;
     $267 = ((($266)) + 20|0);
     $268 = ((($267)) + 4|0);
     $269 = +HEAPF32[$268>>2];
     $270 = $shape_index;
     $271 = ((($4)) + 12|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = (($272) + (($270*160)|0)|0);
     $274 = ((($273)) + 8|0);
     $275 = ((($274)) + 8|0);
     $276 = ((($275)) + 4|0);
     HEAPF32[$276>>2] = $269;
     $277 = $se;
     $278 = ((($277)) + 44|0);
     $279 = HEAP8[$278>>0]|0;
     $280 = $279&1;
     if ($280) {
      $281 = $se;
      $282 = ((($281)) + 28|0);
      $283 = +HEAPF32[$282>>2];
      $284 = $shape_index;
      $285 = ((($4)) + 12|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) + (($284*160)|0)|0);
      $288 = ((($287)) + 8|0);
      $289 = ((($288)) + 16|0);
      HEAPF32[$289>>2] = $283;
      $290 = $se;
      $291 = ((($290)) + 28|0);
      $292 = ((($291)) + 4|0);
      $293 = +HEAPF32[$292>>2];
      $294 = $shape_index;
      $295 = ((($4)) + 12|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (($296) + (($294*160)|0)|0);
      $298 = ((($297)) + 8|0);
      $299 = ((($298)) + 16|0);
      $300 = ((($299)) + 4|0);
      HEAPF32[$300>>2] = $293;
     }
     $301 = $se;
     $302 = ((($301)) + 45|0);
     $303 = HEAP8[$302>>0]|0;
     $304 = $303&1;
     if ($304) {
      $305 = $se;
      $306 = ((($305)) + 36|0);
      $307 = +HEAPF32[$306>>2];
      $308 = $shape_index;
      $309 = ((($4)) + 12|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = (($310) + (($308*160)|0)|0);
      $312 = ((($311)) + 8|0);
      $313 = ((($312)) + 24|0);
      HEAPF32[$313>>2] = $307;
      $314 = $se;
      $315 = ((($314)) + 36|0);
      $316 = ((($315)) + 4|0);
      $317 = +HEAPF32[$316>>2];
      $318 = $shape_index;
      $319 = ((($4)) + 12|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = (($320) + (($318*160)|0)|0);
      $322 = ((($321)) + 8|0);
      $323 = ((($322)) + 24|0);
      $324 = ((($323)) + 4|0);
      HEAPF32[$324>>2] = $317;
     }
     $325 = $s;
     $326 = ((($325)) + 4|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $shape_index;
     $329 = ((($4)) + 12|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = (($330) + (($328*160)|0)|0);
     $332 = ((($331)) + 136|0);
     HEAP32[$332>>2] = $327;
     $333 = $s;
     $334 = ((($333)) + 8|0);
     $335 = +HEAPF32[$334>>2];
     $336 = $shape_index;
     $337 = ((($4)) + 12|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (($338) + (($336*160)|0)|0);
     $340 = ((($339)) + 140|0);
     HEAPF32[$340>>2] = $335;
     $341 = $f;
     $342 = (__ZNK9b2Fixture8IsSensorEv($341)|0);
     $343 = $342&1;
     $344 = $shape_index;
     $345 = ((($4)) + 12|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = (($346) + (($344*160)|0)|0);
     $348 = ((($347)) + 148|0);
     HEAP32[$348>>2] = $343;
     $349 = $body_index;
     $350 = $shape_index;
     $351 = ((($4)) + 16|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = (($352) + ($350<<2)|0);
     HEAP32[$353>>2] = $349;
     $354 = $shape_index;
     $355 = (($354) + 1)|0;
     $shape_index = $355;
     break;
    }
    case 2:  {
     $356 = $s;
     $sp = $356;
     $357 = $sp;
     $358 = ((($357)) + 12|0);
     $359 = +HEAPF32[$358>>2];
     $360 = $shape_index;
     $361 = ((($4)) + 12|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = (($362) + (($360*160)|0)|0);
     HEAPF32[$363>>2] = $359;
     $364 = $sp;
     $365 = ((($364)) + 12|0);
     $366 = ((($365)) + 4|0);
     $367 = +HEAPF32[$366>>2];
     $368 = $shape_index;
     $369 = ((($4)) + 12|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = (($370) + (($368*160)|0)|0);
     $372 = ((($371)) + 4|0);
     HEAPF32[$372>>2] = $367;
     $i = 0;
     while(1) {
      $373 = $i;
      $374 = $sp;
      $375 = ((($374)) + 148|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = ($373|0)<($376|0);
      if (!($377)) {
       break;
      }
      $378 = $i;
      $379 = $sp;
      $380 = ((($379)) + 20|0);
      $381 = (($380) + ($378<<3)|0);
      $382 = +HEAPF32[$381>>2];
      $383 = $i;
      $384 = $shape_index;
      $385 = ((($4)) + 12|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = (($386) + (($384*160)|0)|0);
      $388 = ((($387)) + 8|0);
      $389 = (($388) + ($383<<3)|0);
      HEAPF32[$389>>2] = $382;
      $390 = $i;
      $391 = $sp;
      $392 = ((($391)) + 20|0);
      $393 = (($392) + ($390<<3)|0);
      $394 = ((($393)) + 4|0);
      $395 = +HEAPF32[$394>>2];
      $396 = $i;
      $397 = $shape_index;
      $398 = ((($4)) + 12|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = (($399) + (($397*160)|0)|0);
      $401 = ((($400)) + 8|0);
      $402 = (($401) + ($396<<3)|0);
      $403 = ((($402)) + 4|0);
      HEAPF32[$403>>2] = $395;
      $404 = $i;
      $405 = $sp;
      $406 = ((($405)) + 84|0);
      $407 = (($406) + ($404<<3)|0);
      $408 = +HEAPF32[$407>>2];
      $409 = $i;
      $410 = $shape_index;
      $411 = ((($4)) + 12|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = (($412) + (($410*160)|0)|0);
      $414 = ((($413)) + 72|0);
      $415 = (($414) + ($409<<3)|0);
      HEAPF32[$415>>2] = $408;
      $416 = $i;
      $417 = $sp;
      $418 = ((($417)) + 84|0);
      $419 = (($418) + ($416<<3)|0);
      $420 = ((($419)) + 4|0);
      $421 = +HEAPF32[$420>>2];
      $422 = $i;
      $423 = $shape_index;
      $424 = ((($4)) + 12|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = (($425) + (($423*160)|0)|0);
      $427 = ((($426)) + 72|0);
      $428 = (($427) + ($422<<3)|0);
      $429 = ((($428)) + 4|0);
      HEAPF32[$429>>2] = $421;
      $430 = $i;
      $431 = (($430) + 1)|0;
      $i = $431;
     }
     $432 = $sp;
     $433 = ((($432)) + 148|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = $shape_index;
     $436 = ((($4)) + 12|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = (($437) + (($435*160)|0)|0);
     $439 = ((($438)) + 144|0);
     HEAP32[$439>>2] = $434;
     $440 = $s;
     $441 = ((($440)) + 4|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = $shape_index;
     $444 = ((($4)) + 12|0);
     $445 = HEAP32[$444>>2]|0;
     $446 = (($445) + (($443*160)|0)|0);
     $447 = ((($446)) + 136|0);
     HEAP32[$447>>2] = $442;
     $448 = $s;
     $449 = ((($448)) + 8|0);
     $450 = +HEAPF32[$449>>2];
     $451 = $shape_index;
     $452 = ((($4)) + 12|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = (($453) + (($451*160)|0)|0);
     $455 = ((($454)) + 140|0);
     HEAPF32[$455>>2] = $450;
     $456 = $f;
     $457 = (__ZNK9b2Fixture8IsSensorEv($456)|0);
     $458 = $457&1;
     $459 = $shape_index;
     $460 = ((($4)) + 12|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = (($461) + (($459*160)|0)|0);
     $463 = ((($462)) + 148|0);
     HEAP32[$463>>2] = $458;
     $464 = $body_index;
     $465 = $shape_index;
     $466 = ((($4)) + 16|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = (($467) + ($465<<2)|0);
     HEAP32[$468>>2] = $464;
     $469 = $shape_index;
     $470 = (($469) + 1)|0;
     $shape_index = $470;
     break;
    }
    case 3:  {
     $471 = $s;
     $sc1 = $471;
     $472 = (__Znwj(48)|0);
     __THREW__ = 0;
     invoke_vi(416,($472|0));
     $473 = __THREW__; __THREW__ = 0;
     $474 = $473&1;
     if ($474) {
      label = 41;
      break L30;
     }
     $se2 = $472;
     $i3 = 0;
     while(1) {
      $475 = $i3;
      $476 = $sc1;
      $477 = HEAP32[$476>>2]|0;
      $478 = ((($477)) + 12|0);
      $479 = HEAP32[$478>>2]|0;
      $480 = (FUNCTION_TABLE_ii[$479 & 1023]($476)|0);
      $481 = ($475|0)<($480|0);
      if (!($481)) {
       break L36;
      }
      $482 = $sc1;
      $483 = $se2;
      $484 = $i3;
      __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($482,$483,$484);
      $485 = $se2;
      $486 = ((($485)) + 44|0);
      $487 = HEAP8[$486>>0]|0;
      $488 = $487&1;
      $489 = (+($488&1));
      $490 = $shape_index;
      $491 = ((($4)) + 12|0);
      $492 = HEAP32[$491>>2]|0;
      $493 = (($492) + (($490*160)|0)|0);
      HEAPF32[$493>>2] = $489;
      $494 = $se2;
      $495 = ((($494)) + 45|0);
      $496 = HEAP8[$495>>0]|0;
      $497 = $496&1;
      $498 = (+($497&1));
      $499 = $shape_index;
      $500 = ((($4)) + 12|0);
      $501 = HEAP32[$500>>2]|0;
      $502 = (($501) + (($499*160)|0)|0);
      $503 = ((($502)) + 4|0);
      HEAPF32[$503>>2] = $498;
      $504 = $se2;
      $505 = ((($504)) + 12|0);
      $506 = +HEAPF32[$505>>2];
      $507 = $shape_index;
      $508 = ((($4)) + 12|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = (($509) + (($507*160)|0)|0);
      $511 = ((($510)) + 8|0);
      HEAPF32[$511>>2] = $506;
      $512 = $se2;
      $513 = ((($512)) + 12|0);
      $514 = ((($513)) + 4|0);
      $515 = +HEAPF32[$514>>2];
      $516 = $shape_index;
      $517 = ((($4)) + 12|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = (($518) + (($516*160)|0)|0);
      $520 = ((($519)) + 8|0);
      $521 = ((($520)) + 4|0);
      HEAPF32[$521>>2] = $515;
      $522 = $se2;
      $523 = ((($522)) + 20|0);
      $524 = +HEAPF32[$523>>2];
      $525 = $shape_index;
      $526 = ((($4)) + 12|0);
      $527 = HEAP32[$526>>2]|0;
      $528 = (($527) + (($525*160)|0)|0);
      $529 = ((($528)) + 8|0);
      $530 = ((($529)) + 8|0);
      HEAPF32[$530>>2] = $524;
      $531 = $se2;
      $532 = ((($531)) + 20|0);
      $533 = ((($532)) + 4|0);
      $534 = +HEAPF32[$533>>2];
      $535 = $shape_index;
      $536 = ((($4)) + 12|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = (($537) + (($535*160)|0)|0);
      $539 = ((($538)) + 8|0);
      $540 = ((($539)) + 8|0);
      $541 = ((($540)) + 4|0);
      HEAPF32[$541>>2] = $534;
      $542 = $se2;
      $543 = ((($542)) + 44|0);
      $544 = HEAP8[$543>>0]|0;
      $545 = $544&1;
      if ($545) {
       $546 = $se2;
       $547 = ((($546)) + 28|0);
       $548 = +HEAPF32[$547>>2];
       $549 = $shape_index;
       $550 = ((($4)) + 12|0);
       $551 = HEAP32[$550>>2]|0;
       $552 = (($551) + (($549*160)|0)|0);
       $553 = ((($552)) + 8|0);
       $554 = ((($553)) + 16|0);
       HEAPF32[$554>>2] = $548;
       $555 = $se2;
       $556 = ((($555)) + 28|0);
       $557 = ((($556)) + 4|0);
       $558 = +HEAPF32[$557>>2];
       $559 = $shape_index;
       $560 = ((($4)) + 12|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = (($561) + (($559*160)|0)|0);
       $563 = ((($562)) + 8|0);
       $564 = ((($563)) + 16|0);
       $565 = ((($564)) + 4|0);
       HEAPF32[$565>>2] = $558;
      }
      $570 = $se2;
      $571 = ((($570)) + 45|0);
      $572 = HEAP8[$571>>0]|0;
      $573 = $572&1;
      if ($573) {
       $574 = $se2;
       $575 = ((($574)) + 36|0);
       $576 = +HEAPF32[$575>>2];
       $577 = $shape_index;
       $578 = ((($4)) + 12|0);
       $579 = HEAP32[$578>>2]|0;
       $580 = (($579) + (($577*160)|0)|0);
       $581 = ((($580)) + 8|0);
       $582 = ((($581)) + 24|0);
       HEAPF32[$582>>2] = $576;
       $583 = $se2;
       $584 = ((($583)) + 36|0);
       $585 = ((($584)) + 4|0);
       $586 = +HEAPF32[$585>>2];
       $587 = $shape_index;
       $588 = ((($4)) + 12|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = (($589) + (($587*160)|0)|0);
       $591 = ((($590)) + 8|0);
       $592 = ((($591)) + 24|0);
       $593 = ((($592)) + 4|0);
       HEAPF32[$593>>2] = $586;
      }
      $594 = $shape_index;
      $595 = ((($4)) + 12|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = (($596) + (($594*160)|0)|0);
      $598 = ((($597)) + 136|0);
      HEAP32[$598>>2] = 1;
      $599 = $s;
      $600 = ((($599)) + 8|0);
      $601 = +HEAPF32[$600>>2];
      $602 = $shape_index;
      $603 = ((($4)) + 12|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = (($604) + (($602*160)|0)|0);
      $606 = ((($605)) + 140|0);
      HEAPF32[$606>>2] = $601;
      $607 = $f;
      $608 = (__ZNK9b2Fixture8IsSensorEv($607)|0);
      $609 = $608&1;
      $610 = $shape_index;
      $611 = ((($4)) + 12|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = (($612) + (($610*160)|0)|0);
      $614 = ((($613)) + 148|0);
      HEAP32[$614>>2] = $609;
      $615 = $f;
      $616 = ((($615)) + 40|0);
      $617 = HEAP16[$616>>1]|0;
      $618 = $shape_index;
      $619 = ((($4)) + 12|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = (($620) + (($618*160)|0)|0);
      $622 = ((($621)) + 152|0);
      HEAP16[$622>>1] = $617;
      $623 = $f;
      $624 = ((($623)) + 40|0);
      $625 = ((($624)) + 4|0);
      $626 = HEAP16[$625>>1]|0;
      $627 = $shape_index;
      $628 = ((($4)) + 12|0);
      $629 = HEAP32[$628>>2]|0;
      $630 = (($629) + (($627*160)|0)|0);
      $631 = ((($630)) + 152|0);
      $632 = ((($631)) + 4|0);
      HEAP16[$632>>1] = $626;
      $633 = $f;
      $634 = ((($633)) + 40|0);
      $635 = ((($634)) + 2|0);
      $636 = HEAP16[$635>>1]|0;
      $637 = $shape_index;
      $638 = ((($4)) + 12|0);
      $639 = HEAP32[$638>>2]|0;
      $640 = (($639) + (($637*160)|0)|0);
      $641 = ((($640)) + 152|0);
      $642 = ((($641)) + 2|0);
      HEAP16[$642>>1] = $636;
      $643 = $body_index;
      $644 = $shape_index;
      $645 = ((($4)) + 16|0);
      $646 = HEAP32[$645>>2]|0;
      $647 = (($646) + ($644<<2)|0);
      HEAP32[$647>>2] = $643;
      $648 = $shape_index;
      $649 = (($648) + 1)|0;
      $shape_index = $649;
      $650 = $i3;
      $651 = (($650) + 1)|0;
      $i3 = $651;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $652 = $f;
   $653 = ((($652)) + 4|0);
   $654 = HEAP32[$653>>2]|0;
   $f = $654;
  }
  $655 = $body_index;
  $656 = (($655) + 1)|0;
  $body_index = $656;
  $657 = $b;
  $658 = ((($657)) + 96|0);
  $659 = HEAP32[$658>>2]|0;
  $b = $659;
 }
 if ((label|0) == 41) {
  $566 = ___cxa_find_matching_catch_2()|0;
  $567 = tempRet0;
  $2 = $566;
  $3 = $567;
  __ZdlPv($472);
  $568 = $2;
  $569 = $3;
  ___resumeException($568|0);
  // unreachable;
 }
 else if ((label|0) == 47) {
  $660 = (__ZN10b2CLDevice8instanceEv()|0);
  $661 = ((($4)) + 56|0);
  $662 = HEAP32[$661>>2]|0;
  $663 = ((($4)) + 12|0);
  $664 = HEAP32[$663>>2]|0;
  $665 = $1;
  $666 = ((($665)) + 103084|0);
  $667 = HEAP32[$666>>2]|0;
  $668 = ($667*160)|0;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($660,$662,$664,0,$668);
  $669 = (__ZN10b2CLDevice8instanceEv()|0);
  $670 = ((($4)) + 60|0);
  $671 = HEAP32[$670>>2]|0;
  $672 = ((($4)) + 16|0);
  $673 = HEAP32[$672>>2]|0;
  $674 = $1;
  $675 = ((($674)) + 103084|0);
  $676 = HEAP32[$675>>2]|0;
  $677 = $676<<2;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($669,$671,$673,0,$677);
  STACKTOP = sp;return;
 }
}
function __ZNK9b2Fixture8IsSensorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 46|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN14b2CLCommonData27CopyStaticFixtureAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $f = 0, $fixture_index = 0, $i = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 103084|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 if ($8) {
  $9 = ((($2)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = ((($2)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __ZdaPv($13);
   }
  }
  $15 = $1;
  $16 = ((($15)) + 103084|0);
  $17 = HEAP32[$16>>2]|0;
  $$arith = $17<<4;
  $$overflow = ($17>>>0)>(268435455);
  $18 = $$overflow ? -1 : $$arith;
  $19 = (__Znaj($18)|0);
  $20 = ((($2)) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($2)) + 68|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = (__ZN10b2CLDevice8instanceEv()|0);
   $25 = ((($2)) + 68|0);
   $26 = HEAP32[$25>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($24,$26);
  }
  $27 = (__ZN10b2CLDevice8instanceEv()|0);
  $28 = $1;
  $29 = ((($28)) + 103084|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<4;
  $32 = (__ZN10b2CLDevice13allocateArrayEjb($27,$31,0)|0);
  $33 = ((($2)) + 68|0);
  HEAP32[$33>>2] = $32;
  $34 = $1;
  $35 = ((($34)) + 103084|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($2)) + 4|0);
  HEAP32[$37>>2] = $36;
 }
 $fixture_index = 0;
 $38 = $1;
 $39 = ((($38)) + 103068|0);
 $40 = HEAP32[$39>>2]|0;
 $b = $40;
 while(1) {
  $41 = $b;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   break;
  }
  $43 = $b;
  $44 = ((($43)) + 108|0);
  $45 = HEAP32[$44>>2]|0;
  $f = $45;
  while(1) {
   $46 = $f;
   $47 = ($46|0)!=(0|0);
   if (!($47)) {
    break;
   }
   $48 = $f;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $s = $50;
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = $s;
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
    $57 = ($51|0)<($56|0);
    $58 = $f;
    if (!($57)) {
     break;
    }
    $59 = ((($58)) + 32|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $i;
    $62 = (($60) + (($61*36)|0)|0);
    $p = $62;
    $63 = $p;
    $64 = ((($63)) + 28|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $p;
    $67 = ((($66)) + 32|0);
    HEAP32[$67>>2] = $65;
    $68 = $f;
    $69 = ((($68)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $f;
    $72 = ((($71)) + 20|0);
    HEAP32[$72>>2] = $70;
    $73 = $f;
    $74 = ((($73)) + 24|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $fixture_index;
    $77 = ((($2)) + 20|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($76<<4)|0);
    HEAPF32[$79>>2] = $75;
    $80 = $f;
    $81 = ((($80)) + 28|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $fixture_index;
    $84 = ((($2)) + 20|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + ($83<<4)|0);
    $87 = ((($86)) + 4|0);
    HEAPF32[$87>>2] = $82;
    $88 = $p;
    $89 = ((($88)) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $fixture_index;
    $92 = ((($2)) + 20|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($91<<4)|0);
    $95 = ((($94)) + 8|0);
    HEAP32[$95>>2] = $90;
    $96 = $fixture_index;
    $97 = $p;
    $98 = ((($97)) + 28|0);
    HEAP32[$98>>2] = $96;
    $99 = $fixture_index;
    $100 = $f;
    $101 = ((($100)) + 16|0);
    HEAP32[$101>>2] = $99;
    $102 = $fixture_index;
    $103 = (($102) + 1)|0;
    $fixture_index = $103;
    $104 = $i;
    $105 = (($104) + 1)|0;
    $i = $105;
   }
   $106 = ((($58)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $f = $107;
  }
  $108 = $b;
  $109 = ((($108)) + 96|0);
  $110 = HEAP32[$109>>2]|0;
  $b = $110;
 }
 $111 = $fixture_index;
 $112 = $1;
 $113 = ((($112)) + 103084|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($111|0)<=($114|0);
 if ($115) {
  $116 = (__ZN10b2CLDevice8instanceEv()|0);
  $117 = ((($2)) + 68|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($2)) + 20|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $1;
  $122 = ((($121)) + 103084|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $123<<4;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($116,$118,$120,0,$124);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((12948|0),(12986|0),392,(13074|0));
  // unreachable;
 }
}
function __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $b2 = 0, $body_index = 0, $connectedArrayPos = 0, $i = 0, $i5 = 0, $indices = 0, $indices1 = 0, $indices4 = 0, $jn = 0, $jn3 = 0, $jointToBodyMap = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 48|0;
 $1 = sp + 40|0;
 $4 = sp + 384|0;
 $9 = sp + 360|0;
 $10 = sp + 340|0;
 $16 = sp + 316|0;
 $17 = sp + 24|0;
 $23 = sp + 16|0;
 $31 = sp + 264|0;
 $33 = sp + 256|0;
 $35 = sp + 248|0;
 $37 = sp + 8|0;
 $38 = sp + 240|0;
 $41 = sp + 228|0;
 $43 = sp;
 $45 = sp + 401|0;
 $46 = sp + 400|0;
 $jointToBodyMap = sp + 196|0;
 $51 = sp + 176|0;
 $52 = sp + 172|0;
 $53 = sp + 168|0;
 $indices = sp + 152|0;
 $54 = sp + 132|0;
 $55 = sp + 112|0;
 $56 = sp + 96|0;
 $57 = sp + 88|0;
 $58 = sp + 80|0;
 $59 = sp + 56|0;
 $47 = $this;
 $48 = $m_pWorld;
 $60 = $47;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $48;
 $64 = ((($63)) + 103076|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62|0)<($65|0);
 if ($66) {
  $67 = ((($60)) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)!=(0|0);
  if ($69) {
   $70 = ((($60)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    __ZdaPv($71);
   }
  }
  $73 = $48;
  $74 = ((($73)) + 103076|0);
  $75 = HEAP32[$74>>2]|0;
  $$arith6 = ($75*72)|0;
  $$overflow7 = ($75>>>0)>(59652323);
  $76 = $$overflow7 ? -1 : $$arith6;
  $77 = (__Znaj($76)|0);
  $78 = ((($60)) + 24|0);
  HEAP32[$78>>2] = $77;
  $79 = ((($60)) + 72|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0|0);
  if ($81) {
   $82 = (__ZN10b2CLDevice8instanceEv()|0);
   $83 = ((($60)) + 72|0);
   $84 = HEAP32[$83>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($82,$84);
  }
  $85 = (__ZN10b2CLDevice8instanceEv()|0);
  $86 = $48;
  $87 = ((($86)) + 103076|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88*72)|0;
  $90 = (__ZN10b2CLDevice13allocateArrayEjb($85,$89,0)|0);
  $91 = ((($60)) + 72|0);
  HEAP32[$91>>2] = $90;
  $92 = ((($60)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)!=(0|0);
  if ($94) {
   $95 = ((($60)) + 28|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0|0);
   if (!($97)) {
    __ZdaPv($96);
   }
  }
  $98 = $48;
  $99 = ((($98)) + 103076|0);
  $100 = HEAP32[$99>>2]|0;
  $$arith2 = $100<<4;
  $$overflow3 = ($100>>>0)>(268435455);
  $101 = $$overflow3 ? -1 : $$arith2;
  $102 = (__Znaj($101)|0);
  $103 = ((($60)) + 28|0);
  HEAP32[$103>>2] = $102;
  $104 = ((($60)) + 64|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0|0);
  if ($106) {
   $107 = (__ZN10b2CLDevice8instanceEv()|0);
   $108 = ((($60)) + 64|0);
   $109 = HEAP32[$108>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($107,$109);
  }
  $110 = (__ZN10b2CLDevice8instanceEv()|0);
  $111 = $48;
  $112 = ((($111)) + 103076|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113<<4;
  $115 = (__ZN10b2CLDevice13allocateArrayEjb($110,$114,0)|0);
  $116 = ((($60)) + 64|0);
  HEAP32[$116>>2] = $115;
  $117 = ((($60)) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)!=(0|0);
  if ($119) {
   $120 = ((($60)) + 32|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(0|0);
   if (!($122)) {
    __ZdaPv($121);
   }
  }
  $123 = $48;
  $124 = ((($123)) + 103076|0);
  $125 = HEAP32[$124>>2]|0;
  $$arith = ($125*72)|0;
  $$overflow = ($125>>>0)>(59652323);
  $126 = $$overflow ? -1 : $$arith;
  $127 = (__Znaj($126)|0);
  $128 = ((($60)) + 32|0);
  HEAP32[$128>>2] = $127;
  $129 = ((($60)) + 76|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)!=(0|0);
  if ($131) {
   $132 = (__ZN10b2CLDevice8instanceEv()|0);
   $133 = ((($60)) + 76|0);
   $134 = HEAP32[$133>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($132,$134);
  }
  $135 = (__ZN10b2CLDevice8instanceEv()|0);
  $136 = $48;
  $137 = ((($136)) + 103076|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138*72)|0;
  $140 = (__ZN10b2CLDevice13allocateArrayEjb($135,$139,0)|0);
  $141 = ((($60)) + 76|0);
  HEAP32[$141>>2] = $140;
  $142 = $48;
  $143 = ((($142)) + 103076|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ((($60)) + 8|0);
  HEAP32[$145>>2] = $144;
 }
 $44 = $jointToBodyMap;
 $146 = $44;
 ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
 $42 = $45;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEEC2ERKSA_($146,$45);
 $body_index = 0;
 $147 = $48;
 $148 = ((($147)) + 103068|0);
 $149 = HEAP32[$148>>2]|0;
 $b = $149;
 L25: while(1) {
  $150 = $b;
  $151 = ($150|0)!=(0|0);
  if (!($151)) {
   label = 37;
   break;
  }
  $152 = $b;
  $153 = ((($152)) + 28|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $body_index;
  $156 = ((($60)) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($155*72)|0)|0);
  HEAPF32[$158>>2] = $154;
  $159 = $b;
  $160 = ((($159)) + 28|0);
  $161 = ((($160)) + 4|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $body_index;
  $164 = ((($60)) + 24|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + (($163*72)|0)|0);
  $167 = ((($166)) + 4|0);
  HEAPF32[$167>>2] = $162;
  $168 = $b;
  $169 = ((($168)) + 128|0);
  $170 = +HEAPF32[$169>>2];
  $171 = $body_index;
  $172 = ((($60)) + 24|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + (($171*72)|0)|0);
  $175 = ((($174)) + 8|0);
  HEAPF32[$175>>2] = $170;
  $176 = $b;
  $177 = ((($176)) + 136|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $body_index;
  $180 = ((($60)) + 24|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + (($179*72)|0)|0);
  $183 = ((($182)) + 12|0);
  HEAPF32[$183>>2] = $178;
  $184 = $b;
  $185 = ((($184)) + 140|0);
  $186 = +HEAPF32[$185>>2];
  $187 = $body_index;
  $188 = ((($60)) + 24|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($187*72)|0)|0);
  $191 = ((($190)) + 16|0);
  HEAPF32[$191>>2] = $186;
  $192 = $b;
  $193 = ((($192)) + 144|0);
  $194 = +HEAPF32[$193>>2];
  $195 = $body_index;
  $196 = ((($60)) + 24|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = (($197) + (($195*72)|0)|0);
  $199 = ((($198)) + 20|0);
  HEAPF32[$199>>2] = $194;
  $200 = $b;
  $201 = ((($200)) + 148|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $body_index;
  $204 = ((($60)) + 24|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205) + (($203*72)|0)|0);
  $207 = ((($206)) + 24|0);
  HEAPF32[$207>>2] = $202;
  $208 = $b;
  $209 = HEAP32[$208>>2]|0;
  $210 = (+($209>>>0));
  $211 = $body_index;
  $212 = ((($60)) + 24|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($211*72)|0)|0);
  $215 = ((($214)) + 28|0);
  HEAPF32[$215>>2] = $210;
  $216 = $b;
  __THREW__ = 0;
  $217 = (invoke_ii(417,($216|0))|0);
  $218 = __THREW__; __THREW__ = 0;
  $219 = $218&1;
  if ($219) {
   break;
  }
  $220 = $217 ? 1 : 0;
  $221 = $body_index;
  $222 = ((($60)) + 24|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + (($221*72)|0)|0);
  $225 = ((($224)) + 64|0);
  HEAP32[$225>>2] = $220;
  $226 = $b;
  $227 = ((($226)) + 116|0);
  $228 = HEAP32[$227>>2]|0;
  $jn = $228;
  while(1) {
   $229 = $jn;
   $230 = ($229|0)!=(0|0);
   if (!($230)) {
    break;
   }
   $231 = $jn;
   $232 = ((($231)) + 4|0);
   $233 = HEAP32[$232>>2]|0;
   HEAP32[$52>>2] = $233;
   $39 = $jointToBodyMap;
   $40 = $52;
   $234 = $39;
   $235 = $40;
   __THREW__ = 0;
   $236 = (invoke_iii(418,($234|0),($235|0))|0);
   $237 = __THREW__; __THREW__ = 0;
   $238 = $237&1;
   if ($238) {
    break L25;
   }
   HEAP32[$41>>2] = $236;
   ;HEAP8[$37>>0]=HEAP8[$41>>0]|0;HEAP8[$37+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$37+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$37+3>>0]=HEAP8[$41+3>>0]|0;
   $36 = $38;
   $239 = $36;
   ;HEAP32[$239>>2]=HEAP32[$37>>2]|0;
   $240 = HEAP32[$38>>2]|0;
   HEAP32[$51>>2] = $240;
   $34 = $jointToBodyMap;
   $241 = $34;
   $32 = $241;
   $242 = $32;
   $30 = $242;
   $243 = $30;
   $244 = ((($243)) + 4|0);
   $29 = $244;
   $245 = $29;
   $28 = $245;
   $246 = $28;
   $27 = $246;
   $247 = $27;
   $26 = $247;
   $248 = $26;
   $24 = $31;
   $25 = $248;
   $249 = $24;
   $250 = $25;
   HEAP32[$249>>2] = $250;
   $251 = HEAP32[$31>>2]|0;
   HEAP32[$35>>2] = $251;
   ;HEAP8[$23>>0]=HEAP8[$35>>0]|0;HEAP8[$23+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$35+3>>0]|0;
   $22 = $33;
   $252 = $22;
   ;HEAP32[$252>>2]=HEAP32[$23>>2]|0;
   $253 = HEAP32[$33>>2]|0;
   HEAP32[$53>>2] = $253;
   $20 = $51;
   $21 = $53;
   $254 = $20;
   $255 = $21;
   $18 = $254;
   $19 = $255;
   $256 = $18;
   $257 = HEAP32[$256>>2]|0;
   $258 = $19;
   $259 = HEAP32[$258>>2]|0;
   $260 = ($257|0)==($259|0);
   L33: do {
    if ($260) {
     __THREW__ = 0;
     invoke_vi(419,($indices|0));
     $261 = __THREW__; __THREW__ = 0;
     $262 = $261&1;
     if ($262) {
      break L25;
     }
     $263 = $body_index;
     HEAP32[$indices>>2] = $263;
     $264 = $jn;
     $265 = ((($264)) + 4|0);
     $266 = HEAP32[$265>>2]|0;
     ;HEAP32[$56>>2]=HEAP32[$indices>>2]|0;HEAP32[$56+4>>2]=HEAP32[$indices+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$indices+8>>2]|0;HEAP32[$56+12>>2]=HEAP32[$indices+12>>2]|0;
     dest=$17; src=$56; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     HEAP32[$16>>2] = $266;
     $13 = $55;
     $14 = $16;
     $15 = $17;
     $267 = $13;
     $268 = $14;
     $269 = HEAP32[$268>>2]|0;
     HEAP32[$267>>2] = $269;
     $270 = ((($267)) + 4|0);
     $271 = $15;
     ;HEAP32[$270>>2]=HEAP32[$271>>2]|0;HEAP32[$270+4>>2]=HEAP32[$271+4>>2]|0;HEAP32[$270+8>>2]=HEAP32[$271+8>>2]|0;HEAP32[$270+12>>2]=HEAP32[$271+12>>2]|0;
     $11 = $54;
     $12 = $55;
     $272 = $11;
     $273 = $12;
     $274 = HEAP32[$273>>2]|0;
     HEAP32[$272>>2] = $274;
     $275 = ((($272)) + 4|0);
     $276 = $12;
     $277 = ((($276)) + 4|0);
     ;HEAP32[$275>>2]=HEAP32[$277>>2]|0;HEAP32[$275+4>>2]=HEAP32[$277+4>>2]|0;HEAP32[$275+8>>2]=HEAP32[$277+8>>2]|0;HEAP32[$275+12>>2]=HEAP32[$277+12>>2]|0;
     $7 = $jointToBodyMap;
     $8 = $54;
     $278 = $7;
     $279 = $8;
     $5 = $10;
     $6 = $279;
     $280 = $5;
     $281 = $6;
     ;HEAP32[$280>>2]=HEAP32[$281>>2]|0;HEAP32[$280+4>>2]=HEAP32[$281+4>>2]|0;HEAP32[$280+8>>2]=HEAP32[$281+8>>2]|0;HEAP32[$280+12>>2]=HEAP32[$281+12>>2]|0;HEAP32[$280+16>>2]=HEAP32[$281+16>>2]|0;
     __THREW__ = 0;
     invoke_viii(420,($9|0),($278|0),($10|0));
     $282 = __THREW__; __THREW__ = 0;
     $283 = $282&1;
     if ($283) {
      break L25;
     }
     $2 = $57;
     $3 = $9;
     $284 = $2;
     $285 = $3;
     ;HEAP32[$4>>2]=HEAP32[$285>>2]|0;
     ;HEAP8[$1>>0]=HEAP8[$4>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
     $0 = $284;
     $286 = $0;
     ;HEAP32[$286>>2]=HEAP32[$1>>2]|0;
     $287 = ((($284)) + 4|0);
     $288 = $3;
     $289 = ((($288)) + 4|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $290&1;
     $292 = $291&1;
     HEAP8[$287>>0] = $292;
    } else {
     $297 = $jn;
     $298 = ((($297)) + 4|0);
     $299 = HEAP32[$298>>2]|0;
     HEAP32[$58>>2] = $299;
     __THREW__ = 0;
     $300 = (invoke_iii(422,($jointToBodyMap|0),($58|0))|0);
     $301 = __THREW__; __THREW__ = 0;
     $302 = $301&1;
     if ($302) {
      break L25;
     }
     $indices1 = $300;
     $i = 1;
     while(1) {
      $303 = $i;
      $304 = ($303|0)<(4);
      if (!($304)) {
       break L33;
      }
      $305 = $i;
      $306 = $indices1;
      $307 = (($306) + ($305<<2)|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ($308|0)==(-1);
      if ($309) {
       break;
      }
      $314 = $i;
      $315 = (($314) + 1)|0;
      $i = $315;
     }
     $310 = $body_index;
     $311 = $i;
     $312 = $indices1;
     $313 = (($312) + ($311<<2)|0);
     HEAP32[$313>>2] = $310;
    }
   } while(0);
   $316 = $jn;
   $317 = ((($316)) + 12|0);
   $318 = HEAP32[$317>>2]|0;
   $jn = $318;
  }
  $319 = $body_index;
  $320 = (($319) + 1)|0;
  $body_index = $320;
  $321 = $b;
  $322 = ((($321)) + 96|0);
  $323 = HEAP32[$322>>2]|0;
  $b = $323;
 }
 L46: do {
  if ((label|0) == 37) {
   $body_index = 0;
   $324 = $48;
   $325 = ((($324)) + 103068|0);
   $326 = HEAP32[$325>>2]|0;
   $b2 = $326;
   L48: while(1) {
    $327 = $b2;
    $328 = ($327|0)!=(0|0);
    if (!($328)) {
     break;
    }
    $connectedArrayPos = 0;
    $329 = $b2;
    $330 = ((($329)) + 116|0);
    $331 = HEAP32[$330>>2]|0;
    $jn3 = $331;
    while(1) {
     $332 = $jn3;
     $333 = ($332|0)!=(0|0);
     if (!($333)) {
      break;
     }
     $334 = $jn3;
     $335 = ((($334)) + 4|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = ((($336)) + 61|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = $338&1;
     L54: do {
      if (!($339)) {
       $340 = $jn3;
       $341 = ((($340)) + 4|0);
       $342 = HEAP32[$341>>2]|0;
       HEAP32[$59>>2] = $342;
       __THREW__ = 0;
       $343 = (invoke_iii(422,($jointToBodyMap|0),($59|0))|0);
       $344 = __THREW__; __THREW__ = 0;
       $345 = $344&1;
       if ($345) {
        break L46;
       }
       $indices4 = $343;
       $i5 = 0;
       while(1) {
        $346 = $i5;
        $347 = ($346|0)<(4);
        if (!($347)) {
         break L54;
        }
        $348 = $i5;
        $349 = $indices4;
        $350 = (($349) + ($348<<2)|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = ($351|0)==(-1);
        if ($352) {
         break L54;
        }
        $353 = $i5;
        $354 = $indices4;
        $355 = (($354) + ($353<<2)|0);
        $356 = HEAP32[$355>>2]|0;
        $357 = $body_index;
        $358 = ($356|0)>($357|0);
        if ($358) {
         $359 = $connectedArrayPos;
         $360 = ($359|0)==(8);
         if ($360) {
          label = 48;
          break L48;
         }
         $365 = $i5;
         $366 = $indices4;
         $367 = (($366) + ($365<<2)|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = $connectedArrayPos;
         $370 = (($369) + 1)|0;
         $connectedArrayPos = $370;
         $371 = $body_index;
         $372 = ((($60)) + 24|0);
         $373 = HEAP32[$372>>2]|0;
         $374 = (($373) + (($371*72)|0)|0);
         $375 = ((($374)) + 32|0);
         $376 = (($375) + ($369<<2)|0);
         HEAP32[$376>>2] = $368;
        }
        $377 = $i5;
        $378 = (($377) + 1)|0;
        $i5 = $378;
       }
      }
     } while(0);
     $379 = $jn3;
     $380 = ((($379)) + 12|0);
     $381 = HEAP32[$380>>2]|0;
     $jn3 = $381;
    }
    $382 = $connectedArrayPos;
    $383 = ($382|0)<(8);
    if ($383) {
     $384 = $connectedArrayPos;
     $385 = $body_index;
     $386 = ((($60)) + 24|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = (($387) + (($385*72)|0)|0);
     $389 = ((($388)) + 32|0);
     $390 = (($389) + ($384<<2)|0);
     HEAP32[$390>>2] = -1;
    }
    $391 = $body_index;
    $392 = (($391) + 1)|0;
    $body_index = $392;
    $393 = $b2;
    $394 = ((($393)) + 96|0);
    $395 = HEAP32[$394>>2]|0;
    $b2 = $395;
   }
   if ((label|0) == 48) {
    $361 = $connectedArrayPos;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $361;
    (invoke_iii(423,(13102|0),($vararg_buffer|0))|0);
    $362 = __THREW__; __THREW__ = 0;
    $363 = $362&1;
    if ($363) {
     break;
    }
    __THREW__ = 0;
    invoke_viiii(424,(29532|0),(12986|0),505,(13125|0));
    $364 = __THREW__; __THREW__ = 0;
    break;
   }
   __THREW__ = 0;
   $396 = (invoke_i(407)|0);
   $397 = __THREW__; __THREW__ = 0;
   $398 = $397&1;
   if (!($398)) {
    $399 = ((($60)) + 72|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = ((($60)) + 24|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $48;
    $404 = ((($403)) + 103076|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = ($405*72)|0;
    __THREW__ = 0;
    invoke_viiiii(425,($396|0),($400|0),($402|0),0,($406|0));
    $407 = __THREW__; __THREW__ = 0;
    $408 = $407&1;
    if (!($408)) {
     __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev($jointToBodyMap);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $293 = ___cxa_find_matching_catch_2()|0;
 $294 = tempRet0;
 $49 = $293;
 $50 = $294;
 __THREW__ = 0;
 invoke_vi(421,($jointToBodyMap|0));
 $295 = __THREW__; __THREW__ = 0;
 $296 = $295&1;
 if ($296) {
  $411 = ___cxa_find_matching_catch_3(0|0)|0;
  $412 = tempRet0;
  ___clang_call_terminate($411);
  // unreachable;
 } else {
  $409 = $49;
  $410 = $50;
  ___resumeException($409|0);
  // unreachable;
 }
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEEC2ERKSA_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 60|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$10>>0]=HEAP8[$23>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = ((($36)) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNK6b2Body8IsBulletEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 8;
 $6 = ($5|0)==(8);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE4findIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 140|0;
 $35 = sp + 48|0;
 $43 = sp + 16|0;
 $__p = sp + 4|0;
 $46 = sp;
 $44 = $this;
 $45 = $__v;
 $47 = $44;
 $48 = $45;
 $42 = $47;
 $49 = $42;
 $41 = $49;
 $50 = $41;
 $51 = ((($50)) + 4|0);
 $40 = $51;
 $52 = $40;
 $39 = $52;
 $53 = $39;
 $38 = $53;
 $54 = $38;
 $37 = $54;
 $55 = $37;
 $56 = HEAP32[$55>>2]|0;
 $4 = $47;
 $57 = $4;
 $58 = ((($57)) + 4|0);
 $3 = $58;
 $59 = $3;
 $2 = $59;
 $60 = $2;
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = (__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE13__lower_boundIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SJ_SJ_($47,$48,$56,$62)|0);
 HEAP32[$__p>>2] = $63;
 $13 = $47;
 $64 = $13;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $10 = $66;
 $67 = $10;
 $9 = $67;
 $68 = $9;
 $8 = $68;
 $69 = $8;
 $7 = $69;
 $70 = $7;
 $5 = $12;
 $6 = $70;
 $71 = $5;
 $72 = $6;
 HEAP32[$71>>2] = $72;
 $73 = HEAP32[$12>>2]|0;
 HEAP32[$46>>2] = $73;
 $16 = $__p;
 $17 = $46;
 $74 = $16;
 $75 = $17;
 $14 = $74;
 $15 = $75;
 $76 = $14;
 $77 = HEAP32[$76>>2]|0;
 $78 = $15;
 $79 = HEAP32[$78>>2]|0;
 $80 = ($77|0)==($79|0);
 $81 = $80 ^ 1;
 if ($81) {
  $20 = $47;
  $82 = $20;
  $83 = ((($82)) + 8|0);
  $19 = $83;
  $84 = $19;
  $18 = $84;
  $85 = $18;
  $86 = $45;
  $21 = $__p;
  $87 = $21;
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 16|0);
  $25 = $85;
  $26 = $86;
  $27 = $89;
  $90 = $25;
  $91 = $26;
  $92 = $27;
  $22 = $90;
  $23 = $91;
  $24 = $92;
  $93 = $23;
  $94 = HEAP32[$93>>2]|0;
  $95 = $24;
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94>>>0)<($96>>>0);
  if (!($97)) {
   ;HEAP32[$43>>2]=HEAP32[$__p>>2]|0;
   $108 = HEAP32[$43>>2]|0;
   STACKTOP = sp;return ($108|0);
  }
 }
 $36 = $47;
 $98 = $36;
 $34 = $98;
 $99 = $34;
 $100 = ((($99)) + 4|0);
 $33 = $100;
 $101 = $33;
 $32 = $101;
 $102 = $32;
 $31 = $102;
 $103 = $31;
 $30 = $103;
 $104 = $30;
 $28 = $35;
 $29 = $104;
 $105 = $28;
 $106 = $29;
 HEAP32[$105>>2] = $106;
 $107 = HEAP32[$35>>2]|0;
 HEAP32[$43>>2] = $107;
 $108 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($108|0);
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE13__lower_boundIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SJ_SJ_($this,$__v,$__root,$__result) {
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 24|0;
 $15 = sp + 20|0;
 $20 = sp;
 $16 = $this;
 $17 = $__v;
 $18 = $__root;
 $19 = $__result;
 $21 = $16;
 while(1) {
  $22 = $18;
  $12 = $14;
  $13 = -1;
  $23 = $12;
  HEAP32[$23>>2] = 0;
  $24 = HEAP32[$14>>2]|0;
  HEAP32[$20>>2] = $24;
  $0 = $20;
  $25 = ($22|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $3 = $21;
  $26 = $3;
  $27 = ((($26)) + 8|0);
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = $18;
  $31 = ((($30)) + 16|0);
  $32 = $17;
  $7 = $29;
  $8 = $31;
  $9 = $32;
  $33 = $7;
  $34 = $8;
  $35 = $9;
  $4 = $33;
  $5 = $34;
  $6 = $35;
  $36 = $5;
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37>>>0)<($39>>>0);
  $41 = $18;
  if ($40) {
   $44 = ((($41)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $18 = $45;
   continue;
  } else {
   $19 = $41;
   $42 = $18;
   $43 = HEAP32[$42>>2]|0;
   $18 = $43;
   continue;
  }
 }
 $46 = $19;
 $10 = $15;
 $11 = $46;
 $47 = $10;
 $48 = $11;
 HEAP32[$47>>2] = $48;
 $49 = HEAP32[$15>>2]|0;
 STACKTOP = sp;return ($49|0);
}
function __ZN9QuadrupleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = -1;
 HEAP32[$1>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE15__insert_uniqueERKS6_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0;
 var $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 40|0;
 $17 = sp + 587|0;
 $39 = sp + 32|0;
 $42 = sp + 586|0;
 $72 = sp + 292|0;
 $73 = sp + 24|0;
 $76 = sp + 280|0;
 $77 = sp + 272|0;
 $78 = sp + 16|0;
 $81 = sp + 256|0;
 $82 = sp + 8|0;
 $85 = sp + 244|0;
 $93 = sp;
 $96 = sp + 585|0;
 $120 = sp + 108|0;
 $__parent = sp + 96|0;
 $__inserted = sp + 584|0;
 $123 = sp + 84|0;
 $__h = sp + 72|0;
 $124 = sp + 68|0;
 $125 = sp + 56|0;
 $128 = sp + 44|0;
 $121 = $this;
 $122 = $__v;
 $129 = $121;
 $130 = $122;
 $131 = (__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESJ_RKT_($129,$__parent,$130)|0);
 $__child = $131;
 $132 = $__child;
 $133 = HEAP32[$132>>2]|0;
 $__r = $133;
 HEAP8[$__inserted>>0] = 0;
 $134 = $__child;
 $135 = HEAP32[$134>>2]|0;
 $118 = $120;
 $119 = -1;
 $136 = $118;
 HEAP32[$136>>2] = 0;
 $137 = HEAP32[$120>>2]|0;
 HEAP32[$123>>2] = $137;
 $117 = $123;
 $138 = ($135|0)==(0|0);
 if (!($138)) {
  $286 = $__r;
  $112 = $128;
  $113 = $286;
  $287 = $112;
  $288 = $113;
  HEAP32[$287>>2] = $288;
  $114 = $agg$result;
  $115 = $128;
  $116 = $__inserted;
  $289 = $114;
  $290 = $115;
  ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
  $291 = ((($289)) + 4|0);
  $292 = $116;
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&1;
  $295 = $294&1;
  HEAP8[$291>>0] = $295;
  STACKTOP = sp;return;
 }
 $139 = $122;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__construct_nodeERKS6_($125,$129,$139);
 $86 = $125;
 $140 = $86;
 $83 = $85;
 $84 = $140;
 $141 = $83;
 $142 = $84;
 HEAP32[$141>>2] = $142;
 $143 = HEAP32[$85>>2]|0;
 HEAP32[$124>>2] = $143;
 ;HEAP8[$82>>0]=HEAP8[$124>>0]|0;HEAP8[$82+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$124+3>>0]|0;
 $80 = $__h;
 $144 = $80;
 $79 = $82;
 $145 = $79;
 $146 = HEAP32[$145>>2]|0;
 $62 = $146;
 $147 = $62;
 $61 = $147;
 $148 = $61;
 $60 = $148;
 $149 = $60;
 $150 = HEAP32[$149>>2]|0;
 $__t$i$i = $150;
 $59 = $147;
 $151 = $59;
 $58 = $151;
 $152 = $58;
 HEAP32[$152>>2] = 0;
 $153 = $__t$i$i;
 $63 = $82;
 $154 = $63;
 $155 = HEAP32[$154>>2]|0;
 $66 = $155;
 $156 = $66;
 $65 = $156;
 $157 = $65;
 $64 = $157;
 $158 = $64;
 $159 = ((($158)) + 4|0);
 $67 = $159;
 $160 = $67;
 ;HEAP32[$81>>2]=HEAP32[$160>>2]|0;HEAP32[$81+4>>2]=HEAP32[$160+4>>2]|0;
 ;HEAP8[$78>>0]=HEAP8[$81>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $144;
 HEAP32[$76>>2] = $153;
 $161 = $75;
 $74 = $76;
 $162 = $74;
 $163 = HEAP32[$162>>2]|0;
 $68 = $78;
 $164 = $68;
 ;HEAP32[$77>>2]=HEAP32[$164>>2]|0;HEAP32[$77+4>>2]=HEAP32[$164+4>>2]|0;
 ;HEAP8[$73>>0]=HEAP8[$77>>0]|0;HEAP8[$73+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$73+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$73+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$73+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$73+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $161;
 HEAP32[$72>>2] = $163;
 $165 = $71;
 $70 = $72;
 $166 = $70;
 $167 = HEAP32[$166>>2]|0;
 HEAP32[$165>>2] = $167;
 $168 = ((($165)) + 4|0);
 $69 = $73;
 $169 = $69;
 ;HEAP32[$168>>2]=HEAP32[$169>>2]|0;HEAP32[$168+4>>2]=HEAP32[$169+4>>2]|0;
 $32 = $125;
 $170 = $32;
 $30 = $170;
 $31 = 0;
 $171 = $30;
 $29 = $171;
 $172 = $29;
 $28 = $172;
 $173 = $28;
 $174 = HEAP32[$173>>2]|0;
 $__tmp$i$i7 = $174;
 $175 = $31;
 $11 = $171;
 $176 = $11;
 $10 = $176;
 $177 = $10;
 HEAP32[$177>>2] = $175;
 $178 = $__tmp$i$i7;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $9 = $171;
  $180 = $9;
  $8 = $180;
  $181 = $8;
  $182 = ((($181)) + 4|0);
  $183 = $__tmp$i$i7;
  $26 = $182;
  $27 = $183;
  $184 = $26;
  $185 = ((($184)) + 4|0);
  $186 = HEAP8[$185>>0]|0;
  $187 = $186&1;
  if ($187) {
   $188 = HEAP32[$184>>2]|0;
   $189 = $27;
   $190 = ((($189)) + 16|0);
   $25 = $190;
   $191 = $25;
   $15 = $188;
   $16 = $191;
   $192 = $15;
   $193 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $192;
   $13 = $193;
  }
  $194 = $27;
  $195 = ($194|0)!=(0|0);
  if ($195) {
   $196 = HEAP32[$184>>2]|0;
   $197 = $27;
   $22 = $196;
   $23 = $197;
   $24 = 1;
   $198 = $22;
   $199 = $23;
   $200 = $24;
   $19 = $198;
   $20 = $199;
   $21 = $200;
   $201 = $20;
   $18 = $201;
   $202 = $18;
   __ZdlPv($202);
  }
 }
 $203 = HEAP32[$__parent>>2]|0;
 $204 = $__child;
 $7 = $__h;
 $205 = $7;
 $6 = $205;
 $206 = $6;
 $5 = $206;
 $207 = $5;
 $208 = HEAP32[$207>>2]|0;
 __THREW__ = 0;
 invoke_viiii(426,($129|0),($203|0),($204|0),($208|0));
 $209 = __THREW__; __THREW__ = 0;
 $210 = $209&1;
 if ($210) {
  $251 = ___cxa_find_matching_catch_2()|0;
  $252 = tempRet0;
  $126 = $251;
  $127 = $252;
  $111 = $__h;
  $253 = $111;
  $109 = $253;
  $110 = 0;
  $254 = $109;
  $108 = $254;
  $255 = $108;
  $107 = $255;
  $256 = $107;
  $257 = HEAP32[$256>>2]|0;
  $__tmp$i$i = $257;
  $258 = $110;
  $90 = $254;
  $259 = $90;
  $89 = $259;
  $260 = $89;
  HEAP32[$260>>2] = $258;
  $261 = $__tmp$i$i;
  $262 = ($261|0)!=(0|0);
  if (!($262)) {
   $296 = $126;
   $297 = $127;
   ___resumeException($296|0);
   // unreachable;
  }
  $88 = $254;
  $263 = $88;
  $87 = $263;
  $264 = $87;
  $265 = ((($264)) + 4|0);
  $266 = $__tmp$i$i;
  $105 = $265;
  $106 = $266;
  $267 = $105;
  $268 = ((($267)) + 4|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = $269&1;
  if ($270) {
   $271 = HEAP32[$267>>2]|0;
   $272 = $106;
   $273 = ((($272)) + 16|0);
   $104 = $273;
   $274 = $104;
   $94 = $271;
   $95 = $274;
   $275 = $94;
   $276 = $95;
   ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;
   $91 = $275;
   $92 = $276;
  }
  $277 = $106;
  $278 = ($277|0)!=(0|0);
  if (!($278)) {
   $296 = $126;
   $297 = $127;
   ___resumeException($296|0);
   // unreachable;
  }
  $279 = HEAP32[$267>>2]|0;
  $280 = $106;
  $101 = $279;
  $102 = $280;
  $103 = 1;
  $281 = $101;
  $282 = $102;
  $283 = $103;
  $98 = $281;
  $99 = $282;
  $100 = $283;
  $284 = $99;
  $97 = $284;
  $285 = $97;
  __ZdlPv($285);
  $296 = $126;
  $297 = $127;
  ___resumeException($296|0);
  // unreachable;
 } else {
  $4 = $__h;
  $211 = $4;
  $3 = $211;
  $212 = $3;
  $2 = $212;
  $213 = $2;
  $214 = HEAP32[$213>>2]|0;
  $__t$i = $214;
  $1 = $211;
  $215 = $1;
  $0 = $215;
  $216 = $0;
  HEAP32[$216>>2] = 0;
  $217 = $__t$i;
  $__r = $217;
  HEAP8[$__inserted>>0] = 1;
  $57 = $__h;
  $218 = $57;
  $55 = $218;
  $56 = 0;
  $219 = $55;
  $54 = $219;
  $220 = $54;
  $53 = $220;
  $221 = $53;
  $222 = HEAP32[$221>>2]|0;
  $__tmp$i$i4 = $222;
  $223 = $56;
  $36 = $219;
  $224 = $36;
  $35 = $224;
  $225 = $35;
  HEAP32[$225>>2] = $223;
  $226 = $__tmp$i$i4;
  $227 = ($226|0)!=(0|0);
  if (!($227)) {
   $286 = $__r;
   $112 = $128;
   $113 = $286;
   $287 = $112;
   $288 = $113;
   HEAP32[$287>>2] = $288;
   $114 = $agg$result;
   $115 = $128;
   $116 = $__inserted;
   $289 = $114;
   $290 = $115;
   ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
   $291 = ((($289)) + 4|0);
   $292 = $116;
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&1;
   $295 = $294&1;
   HEAP8[$291>>0] = $295;
   STACKTOP = sp;return;
  }
  $34 = $219;
  $228 = $34;
  $33 = $228;
  $229 = $33;
  $230 = ((($229)) + 4|0);
  $231 = $__tmp$i$i4;
  $51 = $230;
  $52 = $231;
  $232 = $51;
  $233 = ((($232)) + 4|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = $234&1;
  if ($235) {
   $236 = HEAP32[$232>>2]|0;
   $237 = $52;
   $238 = ((($237)) + 16|0);
   $50 = $238;
   $239 = $50;
   $40 = $236;
   $41 = $239;
   $240 = $40;
   $241 = $41;
   ;HEAP8[$39>>0]=HEAP8[$42>>0]|0;
   $37 = $240;
   $38 = $241;
  }
  $242 = $52;
  $243 = ($242|0)!=(0|0);
  if (!($243)) {
   $286 = $__r;
   $112 = $128;
   $113 = $286;
   $287 = $112;
   $288 = $113;
   HEAP32[$287>>2] = $288;
   $114 = $agg$result;
   $115 = $128;
   $116 = $__inserted;
   $289 = $114;
   $290 = $115;
   ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
   $291 = ((($289)) + 4|0);
   $292 = $116;
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&1;
   $295 = $294&1;
   HEAP8[$291>>0] = $295;
   STACKTOP = sp;return;
  }
  $244 = HEAP32[$232>>2]|0;
  $245 = $52;
  $47 = $244;
  $48 = $245;
  $49 = 1;
  $246 = $47;
  $247 = $48;
  $248 = $49;
  $44 = $246;
  $45 = $247;
  $46 = $248;
  $249 = $45;
  $43 = $249;
  $250 = $43;
  __ZdlPv($250);
  $286 = $__r;
  $112 = $128;
  $113 = $286;
  $287 = $112;
  $288 = $113;
  HEAP32[$287>>2] = $288;
  $114 = $agg$result;
  $115 = $128;
  $116 = $__inserted;
  $289 = $114;
  $290 = $115;
  ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
  $291 = ((($289)) + 4|0);
  $292 = $116;
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&1;
  $295 = $294&1;
  HEAP8[$291>>0] = $295;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESJ_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 184|0;
 $15 = sp + 132|0;
 $28 = sp + 80|0;
 $45 = sp + 8|0;
 $46 = sp + 4|0;
 $47 = sp;
 $42 = $this;
 $43 = $__parent;
 $44 = $__v;
 $48 = $42;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = ((($50)) + 4|0);
 $38 = $51;
 $52 = $38;
 $37 = $52;
 $53 = $37;
 $36 = $53;
 $54 = $36;
 $35 = $54;
 $55 = $35;
 $56 = HEAP32[$55>>2]|0;
 $__nd = $56;
 $57 = $__nd;
 $0 = $2;
 $1 = -1;
 $58 = $0;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$2>>2]|0;
 HEAP32[$45>>2] = $59;
 $3 = $45;
 $60 = ($57|0)!=(0|0);
 if (!($60)) {
  $34 = $48;
  $116 = $34;
  $117 = ((($116)) + 4|0);
  $33 = $117;
  $118 = $33;
  $32 = $118;
  $119 = $32;
  $31 = $119;
  $120 = $31;
  $30 = $120;
  $121 = $30;
  $122 = $43;
  HEAP32[$122>>2] = $121;
  $123 = $43;
  $124 = HEAP32[$123>>2]|0;
  $41 = $124;
  $125 = $41;
  STACKTOP = sp;return ($125|0);
 }
 while(1) {
  $6 = $48;
  $61 = $6;
  $62 = ((($61)) + 8|0);
  $5 = $62;
  $63 = $5;
  $4 = $63;
  $64 = $4;
  $65 = $44;
  $66 = $__nd;
  $67 = ((($66)) + 16|0);
  $10 = $64;
  $11 = $65;
  $12 = $67;
  $68 = $10;
  $69 = $11;
  $70 = $12;
  $7 = $68;
  $8 = $69;
  $9 = $70;
  $71 = $8;
  $72 = HEAP32[$71>>2]|0;
  $73 = $9;
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72>>>0)<($74>>>0);
  if ($75) {
   $76 = $__nd;
   $77 = HEAP32[$76>>2]|0;
   $13 = $15;
   $14 = -1;
   $78 = $13;
   HEAP32[$78>>2] = 0;
   $79 = HEAP32[$15>>2]|0;
   HEAP32[$46>>2] = $79;
   $16 = $46;
   $80 = ($77|0)!=(0|0);
   $81 = $__nd;
   if (!($80)) {
    label = 5;
    break;
   }
   $82 = HEAP32[$81>>2]|0;
   $__nd = $82;
   continue;
  }
  $19 = $48;
  $86 = $19;
  $87 = ((($86)) + 8|0);
  $18 = $87;
  $88 = $18;
  $17 = $88;
  $89 = $17;
  $90 = $__nd;
  $91 = ((($90)) + 16|0);
  $92 = $44;
  $23 = $89;
  $24 = $91;
  $25 = $92;
  $93 = $23;
  $94 = $24;
  $95 = $25;
  $20 = $93;
  $21 = $94;
  $22 = $95;
  $96 = $21;
  $97 = HEAP32[$96>>2]|0;
  $98 = $22;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97>>>0)<($99>>>0);
  $101 = $__nd;
  if (!($100)) {
   label = 10;
   break;
  }
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $26 = $28;
  $27 = -1;
  $104 = $26;
  HEAP32[$104>>2] = 0;
  $105 = HEAP32[$28>>2]|0;
  HEAP32[$47>>2] = $105;
  $29 = $47;
  $106 = ($103|0)!=(0|0);
  $107 = $__nd;
  if (!($106)) {
   label = 9;
   break;
  }
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $__nd = $109;
 }
 if ((label|0) == 5) {
  $83 = $43;
  HEAP32[$83>>2] = $81;
  $84 = $43;
  $85 = HEAP32[$84>>2]|0;
  $41 = $85;
  $125 = $41;
  STACKTOP = sp;return ($125|0);
 }
 else if ((label|0) == 9) {
  $110 = $43;
  HEAP32[$110>>2] = $107;
  $111 = $43;
  $112 = HEAP32[$111>>2]|0;
  $113 = ((($112)) + 4|0);
  $41 = $113;
  $125 = $41;
  STACKTOP = sp;return ($125|0);
 }
 else if ((label|0) == 10) {
  $114 = $43;
  HEAP32[$114>>2] = $101;
  $115 = $43;
  $41 = $115;
  $125 = $41;
  STACKTOP = sp;return ($125|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__construct_nodeERKS6_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0;
 var $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0, $__tmp$i$i1$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 908|0;
 $18 = sp + 112|0;
 $21 = sp + 896|0;
 $22 = sp + 888|0;
 $23 = sp + 104|0;
 $26 = sp + 872|0;
 $27 = sp + 96|0;
 $34 = sp + 88|0;
 $37 = sp + 986|0;
 $55 = sp + 760|0;
 $71 = sp + 692|0;
 $72 = sp + 80|0;
 $75 = sp + 680|0;
 $76 = sp + 672|0;
 $77 = sp + 72|0;
 $80 = sp + 656|0;
 $81 = sp + 64|0;
 $85 = sp + 636|0;
 $86 = sp + 624|0;
 $87 = sp + 620|0;
 $90 = sp + 608|0;
 $106 = sp + 540|0;
 $107 = sp + 56|0;
 $110 = sp + 528|0;
 $111 = sp + 520|0;
 $112 = sp + 48|0;
 $115 = sp + 504|0;
 $116 = sp + 40|0;
 $126 = sp + 32|0;
 $129 = sp + 985|0;
 $152 = sp + 24|0;
 $155 = sp + 984|0;
 $179 = sp + 260|0;
 $180 = sp + 16|0;
 $183 = sp + 248|0;
 $184 = sp + 240|0;
 $185 = sp + 8|0;
 $188 = sp + 224|0;
 $189 = sp + 216|0;
 $190 = sp;
 $__h = sp + 144|0;
 $204 = sp + 136|0;
 $205 = sp + 132|0;
 $206 = sp + 120|0;
 $202 = $this;
 $203 = $__v;
 $207 = $202;
 $201 = $207;
 $208 = $201;
 $209 = ((($208)) + 4|0);
 $200 = $209;
 $210 = $200;
 $199 = $210;
 $211 = $199;
 $__na = $211;
 $212 = $__na;
 $197 = $212;
 $198 = 1;
 $213 = $197;
 $214 = $198;
 $194 = $213;
 $195 = $214;
 $196 = 0;
 $215 = $195;
 $216 = ($215*36)|0;
 $193 = $216;
 $217 = $193;
 $218 = (__Znwj($217)|0);
 $219 = $__na;
 $191 = $204;
 $192 = $219;
 $220 = $191;
 $221 = $192;
 HEAP32[$220>>2] = $221;
 $222 = ((($220)) + 4|0);
 HEAP8[$222>>0] = 0;
 ;HEAP8[$190>>0]=HEAP8[$204>>0]|0;HEAP8[$190+1>>0]=HEAP8[$204+1>>0]|0;HEAP8[$190+2>>0]=HEAP8[$204+2>>0]|0;HEAP8[$190+3>>0]=HEAP8[$204+3>>0]|0;HEAP8[$190+4>>0]=HEAP8[$204+4>>0]|0;HEAP8[$190+5>>0]=HEAP8[$204+5>>0]|0;HEAP8[$190+6>>0]=HEAP8[$204+6>>0]|0;HEAP8[$190+7>>0]=HEAP8[$204+7>>0]|0;
 $187 = $__h;
 HEAP32[$188>>2] = $218;
 $223 = $187;
 $186 = $188;
 $224 = $186;
 $225 = HEAP32[$224>>2]|0;
 $174 = $190;
 $226 = $174;
 ;HEAP32[$189>>2]=HEAP32[$226>>2]|0;HEAP32[$189+4>>2]=HEAP32[$226+4>>2]|0;
 ;HEAP8[$185>>0]=HEAP8[$189>>0]|0;HEAP8[$185+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$185+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$185+3>>0]=HEAP8[$189+3>>0]|0;HEAP8[$185+4>>0]=HEAP8[$189+4>>0]|0;HEAP8[$185+5>>0]=HEAP8[$189+5>>0]|0;HEAP8[$185+6>>0]=HEAP8[$189+6>>0]|0;HEAP8[$185+7>>0]=HEAP8[$189+7>>0]|0;
 $182 = $223;
 HEAP32[$183>>2] = $225;
 $227 = $182;
 $181 = $183;
 $228 = $181;
 $229 = HEAP32[$228>>2]|0;
 $175 = $185;
 $230 = $175;
 ;HEAP32[$184>>2]=HEAP32[$230>>2]|0;HEAP32[$184+4>>2]=HEAP32[$230+4>>2]|0;
 ;HEAP8[$180>>0]=HEAP8[$184>>0]|0;HEAP8[$180+1>>0]=HEAP8[$184+1>>0]|0;HEAP8[$180+2>>0]=HEAP8[$184+2>>0]|0;HEAP8[$180+3>>0]=HEAP8[$184+3>>0]|0;HEAP8[$180+4>>0]=HEAP8[$184+4>>0]|0;HEAP8[$180+5>>0]=HEAP8[$184+5>>0]|0;HEAP8[$180+6>>0]=HEAP8[$184+6>>0]|0;HEAP8[$180+7>>0]=HEAP8[$184+7>>0]|0;
 $178 = $227;
 HEAP32[$179>>2] = $229;
 $231 = $178;
 $177 = $179;
 $232 = $177;
 $233 = HEAP32[$232>>2]|0;
 HEAP32[$231>>2] = $233;
 $234 = ((($231)) + 4|0);
 $176 = $180;
 $235 = $176;
 ;HEAP32[$234>>2]=HEAP32[$235>>2]|0;HEAP32[$234+4>>2]=HEAP32[$235+4>>2]|0;
 $236 = $__na;
 $173 = $__h;
 $237 = $173;
 $172 = $237;
 $238 = $172;
 $171 = $238;
 $239 = $171;
 $240 = HEAP32[$239>>2]|0;
 $241 = ((($240)) + 16|0);
 $145 = $241;
 $242 = $145;
 $243 = $203;
 $117 = $236;
 $118 = $242;
 $119 = $243;
 $244 = $118;
 $245 = $119;
 ;HEAP32[$244>>2]=HEAP32[$245>>2]|0;HEAP32[$244+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$244+8>>2]=HEAP32[$245+8>>2]|0;HEAP32[$244+12>>2]=HEAP32[$245+12>>2]|0;HEAP32[$244+16>>2]=HEAP32[$245+16>>2]|0;
 $2 = $__h;
 $246 = $2;
 $1 = $246;
 $247 = $1;
 $0 = $247;
 $248 = $0;
 $249 = ((($248)) + 4|0);
 $250 = ((($249)) + 4|0);
 HEAP8[$250>>0] = 1;
 $84 = $__h;
 $251 = $84;
 $82 = $87;
 $83 = $251;
 $252 = $82;
 $253 = $83;
 HEAP32[$252>>2] = $253;
 ;HEAP8[$81>>0]=HEAP8[$87>>0]|0;HEAP8[$81+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$87+3>>0]|0;
 $79 = $86;
 $254 = $79;
 $78 = $81;
 $255 = $78;
 $256 = HEAP32[$255>>2]|0;
 $61 = $256;
 $257 = $61;
 $60 = $257;
 $258 = $60;
 $59 = $258;
 $259 = $59;
 $260 = HEAP32[$259>>2]|0;
 $__t$i$i$i = $260;
 $58 = $257;
 $261 = $58;
 $57 = $261;
 $262 = $57;
 HEAP32[$262>>2] = 0;
 $263 = $__t$i$i$i;
 $62 = $81;
 $264 = $62;
 $265 = HEAP32[$264>>2]|0;
 $65 = $265;
 $266 = $65;
 $64 = $266;
 $267 = $64;
 $63 = $267;
 $268 = $63;
 $269 = ((($268)) + 4|0);
 $66 = $269;
 $270 = $66;
 ;HEAP32[$80>>2]=HEAP32[$270>>2]|0;HEAP32[$80+4>>2]=HEAP32[$270+4>>2]|0;
 ;HEAP8[$77>>0]=HEAP8[$80>>0]|0;HEAP8[$77+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$77+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$77+3>>0]=HEAP8[$80+3>>0]|0;HEAP8[$77+4>>0]=HEAP8[$80+4>>0]|0;HEAP8[$77+5>>0]=HEAP8[$80+5>>0]|0;HEAP8[$77+6>>0]=HEAP8[$80+6>>0]|0;HEAP8[$77+7>>0]=HEAP8[$80+7>>0]|0;
 $74 = $254;
 HEAP32[$75>>2] = $263;
 $271 = $74;
 $73 = $75;
 $272 = $73;
 $273 = HEAP32[$272>>2]|0;
 $67 = $77;
 $274 = $67;
 ;HEAP32[$76>>2]=HEAP32[$274>>2]|0;HEAP32[$76+4>>2]=HEAP32[$274+4>>2]|0;
 ;HEAP8[$72>>0]=HEAP8[$76>>0]|0;HEAP8[$72+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$76+3>>0]|0;HEAP8[$72+4>>0]=HEAP8[$76+4>>0]|0;HEAP8[$72+5>>0]=HEAP8[$76+5>>0]|0;HEAP8[$72+6>>0]=HEAP8[$76+6>>0]|0;HEAP8[$72+7>>0]=HEAP8[$76+7>>0]|0;
 $70 = $271;
 HEAP32[$71>>2] = $273;
 $275 = $70;
 $69 = $71;
 $276 = $69;
 $277 = HEAP32[$276>>2]|0;
 HEAP32[$275>>2] = $277;
 $278 = ((($275)) + 4|0);
 $68 = $72;
 $279 = $68;
 ;HEAP32[$278>>2]=HEAP32[$279>>2]|0;HEAP32[$278+4>>2]=HEAP32[$279+4>>2]|0;
 $56 = $86;
 $280 = $56;
 $53 = $55;
 $54 = $280;
 $281 = $53;
 $282 = $54;
 HEAP32[$281>>2] = $282;
 $283 = HEAP32[$55>>2]|0;
 HEAP32[$85>>2] = $283;
 ;HEAP8[$27>>0]=HEAP8[$85>>0]|0;HEAP8[$27+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$85+3>>0]|0;
 $25 = $206;
 $284 = $25;
 $24 = $27;
 $285 = $24;
 $286 = HEAP32[$285>>2]|0;
 $7 = $286;
 $287 = $7;
 $6 = $287;
 $288 = $6;
 $5 = $288;
 $289 = $5;
 $290 = HEAP32[$289>>2]|0;
 $__t$i$i4$i = $290;
 $4 = $287;
 $291 = $4;
 $3 = $291;
 $292 = $3;
 HEAP32[$292>>2] = 0;
 $293 = $__t$i$i4$i;
 $8 = $27;
 $294 = $8;
 $295 = HEAP32[$294>>2]|0;
 $11 = $295;
 $296 = $11;
 $10 = $296;
 $297 = $10;
 $9 = $297;
 $298 = $9;
 $299 = ((($298)) + 4|0);
 $12 = $299;
 $300 = $12;
 ;HEAP32[$26>>2]=HEAP32[$300>>2]|0;HEAP32[$26+4>>2]=HEAP32[$300+4>>2]|0;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;HEAP8[$23+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $284;
 HEAP32[$21>>2] = $293;
 $301 = $20;
 $19 = $21;
 $302 = $19;
 $303 = HEAP32[$302>>2]|0;
 $13 = $23;
 $304 = $13;
 ;HEAP32[$22>>2]=HEAP32[$304>>2]|0;HEAP32[$22+4>>2]=HEAP32[$304+4>>2]|0;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $301;
 HEAP32[$17>>2] = $303;
 $305 = $16;
 $15 = $17;
 $306 = $15;
 $307 = HEAP32[$306>>2]|0;
 HEAP32[$305>>2] = $307;
 $308 = ((($305)) + 4|0);
 $14 = $18;
 $309 = $14;
 ;HEAP32[$308>>2]=HEAP32[$309>>2]|0;HEAP32[$308+4>>2]=HEAP32[$309+4>>2]|0;
 $52 = $86;
 $310 = $52;
 $50 = $310;
 $51 = 0;
 $311 = $50;
 $49 = $311;
 $312 = $49;
 $48 = $312;
 $313 = $48;
 $314 = HEAP32[$313>>2]|0;
 $__tmp$i$i1$i = $314;
 $315 = $51;
 $31 = $311;
 $316 = $31;
 $30 = $316;
 $317 = $30;
 HEAP32[$317>>2] = $315;
 $318 = $__tmp$i$i1$i;
 $319 = ($318|0)!=(0|0);
 if ($319) {
  $29 = $311;
  $320 = $29;
  $28 = $320;
  $321 = $28;
  $322 = ((($321)) + 4|0);
  $323 = $__tmp$i$i1$i;
  $46 = $322;
  $47 = $323;
  $324 = $46;
  $325 = ((($324)) + 4|0);
  $326 = HEAP8[$325>>0]|0;
  $327 = $326&1;
  if ($327) {
   $328 = HEAP32[$324>>2]|0;
   $329 = $47;
   $330 = ((($329)) + 16|0);
   $45 = $330;
   $331 = $45;
   $35 = $328;
   $36 = $331;
   $332 = $35;
   $333 = $36;
   ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
   $32 = $332;
   $33 = $333;
  }
  $334 = $47;
  $335 = ($334|0)!=(0|0);
  if ($335) {
   $336 = HEAP32[$324>>2]|0;
   $337 = $47;
   $42 = $336;
   $43 = $337;
   $44 = 1;
   $338 = $42;
   $339 = $43;
   $340 = $44;
   $39 = $338;
   $40 = $339;
   $41 = $340;
   $341 = $40;
   $38 = $341;
   $342 = $38;
   __ZdlPv($342);
  }
 }
 $91 = $206;
 $343 = $91;
 $88 = $90;
 $89 = $343;
 $344 = $88;
 $345 = $89;
 HEAP32[$344>>2] = $345;
 $346 = HEAP32[$90>>2]|0;
 HEAP32[$205>>2] = $346;
 ;HEAP8[$116>>0]=HEAP8[$205>>0]|0;HEAP8[$116+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$205+3>>0]|0;
 $114 = $agg$result;
 $347 = $114;
 $113 = $116;
 $348 = $113;
 $349 = HEAP32[$348>>2]|0;
 $96 = $349;
 $350 = $96;
 $95 = $350;
 $351 = $95;
 $94 = $351;
 $352 = $94;
 $353 = HEAP32[$352>>2]|0;
 $__t$i$i = $353;
 $93 = $350;
 $354 = $93;
 $92 = $354;
 $355 = $92;
 HEAP32[$355>>2] = 0;
 $356 = $__t$i$i;
 $97 = $116;
 $357 = $97;
 $358 = HEAP32[$357>>2]|0;
 $100 = $358;
 $359 = $100;
 $99 = $359;
 $360 = $99;
 $98 = $360;
 $361 = $98;
 $362 = ((($361)) + 4|0);
 $101 = $362;
 $363 = $101;
 ;HEAP32[$115>>2]=HEAP32[$363>>2]|0;HEAP32[$115+4>>2]=HEAP32[$363+4>>2]|0;
 ;HEAP8[$112>>0]=HEAP8[$115>>0]|0;HEAP8[$112+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$112+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$112+3>>0]=HEAP8[$115+3>>0]|0;HEAP8[$112+4>>0]=HEAP8[$115+4>>0]|0;HEAP8[$112+5>>0]=HEAP8[$115+5>>0]|0;HEAP8[$112+6>>0]=HEAP8[$115+6>>0]|0;HEAP8[$112+7>>0]=HEAP8[$115+7>>0]|0;
 $109 = $347;
 HEAP32[$110>>2] = $356;
 $364 = $109;
 $108 = $110;
 $365 = $108;
 $366 = HEAP32[$365>>2]|0;
 $102 = $112;
 $367 = $102;
 ;HEAP32[$111>>2]=HEAP32[$367>>2]|0;HEAP32[$111+4>>2]=HEAP32[$367+4>>2]|0;
 ;HEAP8[$107>>0]=HEAP8[$111>>0]|0;HEAP8[$107+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$111+3>>0]|0;HEAP8[$107+4>>0]=HEAP8[$111+4>>0]|0;HEAP8[$107+5>>0]=HEAP8[$111+5>>0]|0;HEAP8[$107+6>>0]=HEAP8[$111+6>>0]|0;HEAP8[$107+7>>0]=HEAP8[$111+7>>0]|0;
 $105 = $364;
 HEAP32[$106>>2] = $366;
 $368 = $105;
 $104 = $106;
 $369 = $104;
 $370 = HEAP32[$369>>2]|0;
 HEAP32[$368>>2] = $370;
 $371 = ((($368)) + 4|0);
 $103 = $107;
 $372 = $103;
 ;HEAP32[$371>>2]=HEAP32[$372>>2]|0;HEAP32[$371+4>>2]=HEAP32[$372+4>>2]|0;
 $144 = $206;
 $373 = $144;
 $142 = $373;
 $143 = 0;
 $374 = $142;
 $141 = $374;
 $375 = $141;
 $140 = $375;
 $376 = $140;
 $377 = HEAP32[$376>>2]|0;
 $__tmp$i$i7 = $377;
 $378 = $143;
 $123 = $374;
 $379 = $123;
 $122 = $379;
 $380 = $122;
 HEAP32[$380>>2] = $378;
 $381 = $__tmp$i$i7;
 $382 = ($381|0)!=(0|0);
 if ($382) {
  $121 = $374;
  $383 = $121;
  $120 = $383;
  $384 = $120;
  $385 = ((($384)) + 4|0);
  $386 = $__tmp$i$i7;
  $138 = $385;
  $139 = $386;
  $387 = $138;
  $388 = ((($387)) + 4|0);
  $389 = HEAP8[$388>>0]|0;
  $390 = $389&1;
  if ($390) {
   $391 = HEAP32[$387>>2]|0;
   $392 = $139;
   $393 = ((($392)) + 16|0);
   $137 = $393;
   $394 = $137;
   $127 = $391;
   $128 = $394;
   $395 = $127;
   $396 = $128;
   ;HEAP8[$126>>0]=HEAP8[$129>>0]|0;
   $124 = $395;
   $125 = $396;
  }
  $397 = $139;
  $398 = ($397|0)!=(0|0);
  if ($398) {
   $399 = HEAP32[$387>>2]|0;
   $400 = $139;
   $134 = $399;
   $135 = $400;
   $136 = 1;
   $401 = $134;
   $402 = $135;
   $403 = $136;
   $131 = $401;
   $132 = $402;
   $133 = $403;
   $404 = $132;
   $130 = $404;
   $405 = $130;
   __ZdlPv($405);
  }
 }
 $170 = $__h;
 $406 = $170;
 $168 = $406;
 $169 = 0;
 $407 = $168;
 $167 = $407;
 $408 = $167;
 $166 = $408;
 $409 = $166;
 $410 = HEAP32[$409>>2]|0;
 $__tmp$i$i4 = $410;
 $411 = $169;
 $149 = $407;
 $412 = $149;
 $148 = $412;
 $413 = $148;
 HEAP32[$413>>2] = $411;
 $414 = $__tmp$i$i4;
 $415 = ($414|0)!=(0|0);
 if (!($415)) {
  STACKTOP = sp;return;
 }
 $147 = $407;
 $416 = $147;
 $146 = $416;
 $417 = $146;
 $418 = ((($417)) + 4|0);
 $419 = $__tmp$i$i4;
 $164 = $418;
 $165 = $419;
 $420 = $164;
 $421 = ((($420)) + 4|0);
 $422 = HEAP8[$421>>0]|0;
 $423 = $422&1;
 if ($423) {
  $424 = HEAP32[$420>>2]|0;
  $425 = $165;
  $426 = ((($425)) + 16|0);
  $163 = $426;
  $427 = $163;
  $153 = $424;
  $154 = $427;
  $428 = $153;
  $429 = $154;
  ;HEAP8[$152>>0]=HEAP8[$155>>0]|0;
  $150 = $428;
  $151 = $429;
 }
 $430 = $165;
 $431 = ($430|0)!=(0|0);
 if (!($431)) {
  STACKTOP = sp;return;
 }
 $432 = HEAP32[$420>>2]|0;
 $433 = $165;
 $160 = $432;
 $161 = $433;
 $162 = 1;
 $434 = $160;
 $435 = $161;
 $436 = $162;
 $157 = $434;
 $158 = $435;
 $159 = $436;
 $437 = $158;
 $156 = $437;
 $438 = $156;
 __ZdlPv($438);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSH_SH_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 108|0;
 $7 = sp + 88|0;
 $22 = sp + 28|0;
 $27 = sp + 8|0;
 $28 = sp + 4|0;
 $29 = sp;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = ((($53)) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = ((($62)) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 96|0;
 $20 = sp + 20|0;
 $23 = sp + 8|0;
 $21 = $this;
 $22 = $__nd;
 $24 = $21;
 $25 = $22;
 $18 = $20;
 $19 = -1;
 $26 = $18;
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$20>>2]|0;
 HEAP32[$23>>2] = $27;
 $17 = $23;
 $28 = ($25|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $22;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($24,$30);
 $31 = $22;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($24,$33);
 $2 = $24;
 $34 = $2;
 $35 = ((($34)) + 4|0);
 $1 = $35;
 $36 = $1;
 $0 = $36;
 $37 = $0;
 $__na = $37;
 $38 = $__na;
 $39 = $22;
 $40 = ((($39)) + 16|0);
 $3 = $40;
 $41 = $3;
 $7 = $38;
 $8 = $41;
 $42 = $7;
 $43 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $42;
 $5 = $43;
 $44 = $__na;
 $45 = $22;
 $14 = $44;
 $15 = $45;
 $16 = 1;
 $46 = $14;
 $47 = $15;
 $48 = $16;
 $11 = $46;
 $12 = $47;
 $13 = $48;
 $49 = $12;
 $10 = $49;
 $50 = $10;
 __ZdlPv($50);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEEixERS9_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0;
 var $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 64|0;
 $18 = sp + 653|0;
 $21 = sp + 56|0;
 $24 = sp + 652|0;
 $47 = sp + 48|0;
 $50 = sp + 651|0;
 $53 = sp + 40|0;
 $56 = sp + 650|0;
 $86 = sp + 316|0;
 $87 = sp + 32|0;
 $90 = sp + 304|0;
 $91 = sp + 296|0;
 $92 = sp + 24|0;
 $95 = sp + 280|0;
 $96 = sp + 16|0;
 $99 = sp + 264|0;
 $108 = sp + 8|0;
 $111 = sp + 649|0;
 $114 = sp;
 $117 = sp + 648|0;
 $136 = sp + 128|0;
 $__parent = sp + 116|0;
 $139 = sp + 104|0;
 $__h = sp + 92|0;
 $140 = sp + 88|0;
 $141 = sp + 76|0;
 $137 = $this;
 $138 = $__k;
 $144 = $137;
 $145 = $138;
 $146 = (__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS9_($144,$__parent,$145)|0);
 $__child = $146;
 $147 = $__child;
 $148 = HEAP32[$147>>2]|0;
 $__r = $148;
 $149 = $__child;
 $150 = HEAP32[$149>>2]|0;
 $134 = $136;
 $135 = -1;
 $151 = $134;
 HEAP32[$151>>2] = 0;
 $152 = HEAP32[$136>>2]|0;
 HEAP32[$139>>2] = $152;
 $133 = $139;
 $153 = ($150|0)==(0|0);
 if (!($153)) {
  $331 = $__r;
  $332 = ((($331)) + 16|0);
  $333 = ((($332)) + 4|0);
  STACKTOP = sp;return ($333|0);
 }
 $154 = $138;
 __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE25__construct_node_with_keyERS9_($141,$144,$154);
 $100 = $141;
 $155 = $100;
 $97 = $99;
 $98 = $155;
 $156 = $97;
 $157 = $98;
 HEAP32[$156>>2] = $157;
 $158 = HEAP32[$99>>2]|0;
 HEAP32[$140>>2] = $158;
 ;HEAP8[$96>>0]=HEAP8[$140>>0]|0;HEAP8[$96+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$140+3>>0]|0;
 $94 = $__h;
 $159 = $94;
 $93 = $96;
 $160 = $93;
 $161 = HEAP32[$160>>2]|0;
 $76 = $161;
 $162 = $76;
 $75 = $162;
 $163 = $75;
 $74 = $163;
 $164 = $74;
 $165 = HEAP32[$164>>2]|0;
 $__t$i$i = $165;
 $73 = $162;
 $166 = $73;
 $72 = $166;
 $167 = $72;
 HEAP32[$167>>2] = 0;
 $168 = $__t$i$i;
 $77 = $96;
 $169 = $77;
 $170 = HEAP32[$169>>2]|0;
 $80 = $170;
 $171 = $80;
 $79 = $171;
 $172 = $79;
 $78 = $172;
 $173 = $78;
 $174 = ((($173)) + 4|0);
 $81 = $174;
 $175 = $81;
 ;HEAP32[$95>>2]=HEAP32[$175>>2]|0;HEAP32[$95+4>>2]=HEAP32[$175+4>>2]|0;
 ;HEAP8[$92>>0]=HEAP8[$95>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $159;
 HEAP32[$90>>2] = $168;
 $176 = $89;
 $88 = $90;
 $177 = $88;
 $178 = HEAP32[$177>>2]|0;
 $82 = $92;
 $179 = $82;
 ;HEAP32[$91>>2]=HEAP32[$179>>2]|0;HEAP32[$91+4>>2]=HEAP32[$179+4>>2]|0;
 ;HEAP8[$87>>0]=HEAP8[$91>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $176;
 HEAP32[$86>>2] = $178;
 $180 = $85;
 $84 = $86;
 $181 = $84;
 $182 = HEAP32[$181>>2]|0;
 HEAP32[$180>>2] = $182;
 $183 = ((($180)) + 4|0);
 $83 = $87;
 $184 = $83;
 ;HEAP32[$183>>2]=HEAP32[$184>>2]|0;HEAP32[$183+4>>2]=HEAP32[$184+4>>2]|0;
 $39 = $141;
 $185 = $39;
 $37 = $185;
 $38 = 0;
 $186 = $37;
 $36 = $186;
 $187 = $36;
 $35 = $187;
 $188 = $35;
 $189 = HEAP32[$188>>2]|0;
 $__tmp$i$i7 = $189;
 $190 = $38;
 $11 = $186;
 $191 = $11;
 $10 = $191;
 $192 = $10;
 HEAP32[$192>>2] = $190;
 $193 = $__tmp$i$i7;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $9 = $186;
  $195 = $9;
  $8 = $195;
  $196 = $8;
  $197 = ((($196)) + 4|0);
  $198 = $__tmp$i$i7;
  $33 = $197;
  $34 = $198;
  $199 = $33;
  $200 = ((($199)) + 5|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&1;
  if ($202) {
   $203 = HEAP32[$199>>2]|0;
   $204 = $34;
   $205 = ((($204)) + 16|0);
   $206 = ((($205)) + 4|0);
   $32 = $206;
   $207 = $32;
   $22 = $203;
   $23 = $207;
   $208 = $22;
   $209 = $23;
   ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
   $19 = $208;
   $20 = $209;
  }
  $210 = ((($199)) + 4|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&1;
  if ($212) {
   $213 = HEAP32[$199>>2]|0;
   $214 = $34;
   $215 = ((($214)) + 16|0);
   $12 = $215;
   $216 = $12;
   $16 = $213;
   $17 = $216;
   $217 = $16;
   $218 = $17;
   ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
   $13 = $217;
   $14 = $218;
  }
  $219 = $34;
  $220 = ($219|0)!=(0|0);
  if ($220) {
   $221 = HEAP32[$199>>2]|0;
   $222 = $34;
   $29 = $221;
   $30 = $222;
   $31 = 1;
   $223 = $29;
   $224 = $30;
   $225 = $31;
   $26 = $223;
   $27 = $224;
   $28 = $225;
   $226 = $27;
   $25 = $226;
   $227 = $25;
   __ZdlPv($227);
  }
 }
 $228 = HEAP32[$__parent>>2]|0;
 $229 = $__child;
 $7 = $__h;
 $230 = $7;
 $6 = $230;
 $231 = $6;
 $5 = $231;
 $232 = $5;
 $233 = HEAP32[$232>>2]|0;
 __THREW__ = 0;
 invoke_viiii(426,($144|0),($228|0),($229|0),($233|0));
 $234 = __THREW__; __THREW__ = 0;
 $235 = $234&1;
 if ($235) {
  $286 = ___cxa_find_matching_catch_2()|0;
  $287 = tempRet0;
  $142 = $286;
  $143 = $287;
  $132 = $__h;
  $288 = $132;
  $130 = $288;
  $131 = 0;
  $289 = $130;
  $129 = $289;
  $290 = $129;
  $128 = $290;
  $291 = $128;
  $292 = HEAP32[$291>>2]|0;
  $__tmp$i$i = $292;
  $293 = $131;
  $104 = $289;
  $294 = $104;
  $103 = $294;
  $295 = $103;
  HEAP32[$295>>2] = $293;
  $296 = $__tmp$i$i;
  $297 = ($296|0)!=(0|0);
  if (!($297)) {
   $334 = $142;
   $335 = $143;
   ___resumeException($334|0);
   // unreachable;
  }
  $102 = $289;
  $298 = $102;
  $101 = $298;
  $299 = $101;
  $300 = ((($299)) + 4|0);
  $301 = $__tmp$i$i;
  $126 = $300;
  $127 = $301;
  $302 = $126;
  $303 = ((($302)) + 5|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $304&1;
  if ($305) {
   $306 = HEAP32[$302>>2]|0;
   $307 = $127;
   $308 = ((($307)) + 16|0);
   $309 = ((($308)) + 4|0);
   $125 = $309;
   $310 = $125;
   $115 = $306;
   $116 = $310;
   $311 = $115;
   $312 = $116;
   ;HEAP8[$114>>0]=HEAP8[$117>>0]|0;
   $112 = $311;
   $113 = $312;
  }
  $313 = ((($302)) + 4|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = $314&1;
  if ($315) {
   $316 = HEAP32[$302>>2]|0;
   $317 = $127;
   $318 = ((($317)) + 16|0);
   $105 = $318;
   $319 = $105;
   $109 = $316;
   $110 = $319;
   $320 = $109;
   $321 = $110;
   ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
   $106 = $320;
   $107 = $321;
  }
  $322 = $127;
  $323 = ($322|0)!=(0|0);
  if (!($323)) {
   $334 = $142;
   $335 = $143;
   ___resumeException($334|0);
   // unreachable;
  }
  $324 = HEAP32[$302>>2]|0;
  $325 = $127;
  $122 = $324;
  $123 = $325;
  $124 = 1;
  $326 = $122;
  $327 = $123;
  $328 = $124;
  $119 = $326;
  $120 = $327;
  $121 = $328;
  $329 = $120;
  $118 = $329;
  $330 = $118;
  __ZdlPv($330);
  $334 = $142;
  $335 = $143;
  ___resumeException($334|0);
  // unreachable;
 } else {
  $4 = $__h;
  $236 = $4;
  $3 = $236;
  $237 = $3;
  $2 = $237;
  $238 = $2;
  $239 = HEAP32[$238>>2]|0;
  $__t$i = $239;
  $1 = $236;
  $240 = $1;
  $0 = $240;
  $241 = $0;
  HEAP32[$241>>2] = 0;
  $242 = $__t$i;
  $__r = $242;
  $71 = $__h;
  $243 = $71;
  $69 = $243;
  $70 = 0;
  $244 = $69;
  $68 = $244;
  $245 = $68;
  $67 = $245;
  $246 = $67;
  $247 = HEAP32[$246>>2]|0;
  $__tmp$i$i4 = $247;
  $248 = $70;
  $43 = $244;
  $249 = $43;
  $42 = $249;
  $250 = $42;
  HEAP32[$250>>2] = $248;
  $251 = $__tmp$i$i4;
  $252 = ($251|0)!=(0|0);
  if (!($252)) {
   $331 = $__r;
   $332 = ((($331)) + 16|0);
   $333 = ((($332)) + 4|0);
   STACKTOP = sp;return ($333|0);
  }
  $41 = $244;
  $253 = $41;
  $40 = $253;
  $254 = $40;
  $255 = ((($254)) + 4|0);
  $256 = $__tmp$i$i4;
  $65 = $255;
  $66 = $256;
  $257 = $65;
  $258 = ((($257)) + 5|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&1;
  if ($260) {
   $261 = HEAP32[$257>>2]|0;
   $262 = $66;
   $263 = ((($262)) + 16|0);
   $264 = ((($263)) + 4|0);
   $64 = $264;
   $265 = $64;
   $54 = $261;
   $55 = $265;
   $266 = $54;
   $267 = $55;
   ;HEAP8[$53>>0]=HEAP8[$56>>0]|0;
   $51 = $266;
   $52 = $267;
  }
  $268 = ((($257)) + 4|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = $269&1;
  if ($270) {
   $271 = HEAP32[$257>>2]|0;
   $272 = $66;
   $273 = ((($272)) + 16|0);
   $44 = $273;
   $274 = $44;
   $48 = $271;
   $49 = $274;
   $275 = $48;
   $276 = $49;
   ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
   $45 = $275;
   $46 = $276;
  }
  $277 = $66;
  $278 = ($277|0)!=(0|0);
  if (!($278)) {
   $331 = $__r;
   $332 = ((($331)) + 16|0);
   $333 = ((($332)) + 4|0);
   STACKTOP = sp;return ($333|0);
  }
  $279 = HEAP32[$257>>2]|0;
  $280 = $66;
  $61 = $279;
  $62 = $280;
  $63 = 1;
  $281 = $61;
  $282 = $62;
  $283 = $63;
  $58 = $281;
  $59 = $282;
  $60 = $283;
  $284 = $59;
  $57 = $284;
  $285 = $57;
  __ZdlPv($285);
  $331 = $__r;
  $332 = ((($331)) + 16|0);
  $333 = ((($332)) + 4|0);
  STACKTOP = sp;return ($333|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS9_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 168|0;
 $13 = sp + 124|0;
 $24 = sp + 80|0;
 $41 = sp + 8|0;
 $42 = sp + 4|0;
 $43 = sp;
 $38 = $this;
 $39 = $__parent;
 $40 = $__k;
 $44 = $38;
 $36 = $44;
 $45 = $36;
 $35 = $45;
 $46 = $35;
 $47 = ((($46)) + 4|0);
 $34 = $47;
 $48 = $34;
 $33 = $48;
 $49 = $33;
 $32 = $49;
 $50 = $32;
 $31 = $50;
 $51 = $31;
 $52 = HEAP32[$51>>2]|0;
 $__nd = $52;
 $53 = $__nd;
 $0 = $2;
 $1 = -1;
 $54 = $0;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$2>>2]|0;
 HEAP32[$41>>2] = $55;
 $3 = $41;
 $56 = ($53|0)!=(0|0);
 if (!($56)) {
  $30 = $44;
  $108 = $30;
  $109 = ((($108)) + 4|0);
  $29 = $109;
  $110 = $29;
  $28 = $110;
  $111 = $28;
  $27 = $111;
  $112 = $27;
  $26 = $112;
  $113 = $26;
  $114 = $39;
  HEAP32[$114>>2] = $113;
  $115 = $39;
  $116 = HEAP32[$115>>2]|0;
  $37 = $116;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 while(1) {
  $6 = $44;
  $57 = $6;
  $58 = ((($57)) + 8|0);
  $5 = $58;
  $59 = $5;
  $4 = $59;
  $60 = $4;
  $7 = $60;
  $61 = $7;
  $62 = $40;
  $63 = $__nd;
  $64 = ((($63)) + 16|0);
  $8 = $61;
  $9 = $62;
  $10 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = $10;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66>>>0)<($68>>>0);
  if ($69) {
   $70 = $__nd;
   $71 = HEAP32[$70>>2]|0;
   $11 = $13;
   $12 = -1;
   $72 = $11;
   HEAP32[$72>>2] = 0;
   $73 = HEAP32[$13>>2]|0;
   HEAP32[$42>>2] = $73;
   $14 = $42;
   $74 = ($71|0)!=(0|0);
   $75 = $__nd;
   if (!($74)) {
    label = 5;
    break;
   }
   $76 = HEAP32[$75>>2]|0;
   $__nd = $76;
   continue;
  }
  $17 = $44;
  $80 = $17;
  $81 = ((($80)) + 8|0);
  $16 = $81;
  $82 = $16;
  $15 = $82;
  $83 = $15;
  $18 = $83;
  $84 = $18;
  $85 = $__nd;
  $86 = ((($85)) + 16|0);
  $87 = $40;
  $19 = $84;
  $20 = $86;
  $21 = $87;
  $88 = $20;
  $89 = HEAP32[$88>>2]|0;
  $90 = $21;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($89>>>0)<($91>>>0);
  $93 = $__nd;
  if (!($92)) {
   label = 10;
   break;
  }
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $22 = $24;
  $23 = -1;
  $96 = $22;
  HEAP32[$96>>2] = 0;
  $97 = HEAP32[$24>>2]|0;
  HEAP32[$43>>2] = $97;
  $25 = $43;
  $98 = ($95|0)!=(0|0);
  $99 = $__nd;
  if (!($98)) {
   label = 9;
   break;
  }
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $__nd = $101;
 }
 if ((label|0) == 5) {
  $77 = $39;
  HEAP32[$77>>2] = $75;
  $78 = $39;
  $79 = HEAP32[$78>>2]|0;
  $37 = $79;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 9) {
  $102 = $39;
  HEAP32[$102>>2] = $99;
  $103 = $39;
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 4|0);
  $37 = $105;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 10) {
  $106 = $39;
  HEAP32[$106>>2] = $93;
  $107 = $39;
  $37 = $107;
  $117 = $37;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE25__construct_node_with_keyERS9_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0;
 var $__tmp$i$i1$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 988|0;
 $27 = sp + 136|0;
 $30 = sp + 976|0;
 $31 = sp + 968|0;
 $32 = sp + 128|0;
 $35 = sp + 952|0;
 $36 = sp + 120|0;
 $44 = sp + 112|0;
 $47 = sp + 1105|0;
 $50 = sp + 104|0;
 $53 = sp + 1104|0;
 $71 = sp + 824|0;
 $87 = sp + 756|0;
 $88 = sp + 96|0;
 $91 = sp + 744|0;
 $92 = sp + 736|0;
 $93 = sp + 88|0;
 $96 = sp + 720|0;
 $97 = sp + 80|0;
 $101 = sp + 700|0;
 $102 = sp + 688|0;
 $103 = sp + 684|0;
 $106 = sp + 672|0;
 $122 = sp + 604|0;
 $123 = sp + 72|0;
 $126 = sp + 592|0;
 $127 = sp + 584|0;
 $128 = sp + 64|0;
 $131 = sp + 568|0;
 $132 = sp + 56|0;
 $143 = sp + 48|0;
 $146 = sp + 1103|0;
 $149 = sp + 40|0;
 $152 = sp + 1102|0;
 $176 = sp + 32|0;
 $179 = sp + 1101|0;
 $182 = sp + 24|0;
 $185 = sp + 1100|0;
 $209 = sp + 284|0;
 $210 = sp + 16|0;
 $213 = sp + 272|0;
 $214 = sp + 264|0;
 $215 = sp + 8|0;
 $218 = sp + 248|0;
 $219 = sp + 240|0;
 $220 = sp;
 $__h = sp + 168|0;
 $234 = sp + 160|0;
 $235 = sp + 156|0;
 $236 = sp + 144|0;
 $232 = $this;
 $233 = $__k;
 $237 = $232;
 $231 = $237;
 $238 = $231;
 $239 = ((($238)) + 4|0);
 $230 = $239;
 $240 = $230;
 $229 = $240;
 $241 = $229;
 $__na = $241;
 $242 = $__na;
 $227 = $242;
 $228 = 1;
 $243 = $227;
 $244 = $228;
 $224 = $243;
 $225 = $244;
 $226 = 0;
 $245 = $225;
 $246 = ($245*36)|0;
 $223 = $246;
 $247 = $223;
 $248 = (__Znwj($247)|0);
 $249 = $__na;
 $221 = $234;
 $222 = $249;
 $250 = $221;
 $251 = $222;
 HEAP32[$250>>2] = $251;
 $252 = ((($250)) + 4|0);
 HEAP8[$252>>0] = 0;
 $253 = ((($250)) + 5|0);
 HEAP8[$253>>0] = 0;
 ;HEAP8[$220>>0]=HEAP8[$234>>0]|0;HEAP8[$220+1>>0]=HEAP8[$234+1>>0]|0;HEAP8[$220+2>>0]=HEAP8[$234+2>>0]|0;HEAP8[$220+3>>0]=HEAP8[$234+3>>0]|0;HEAP8[$220+4>>0]=HEAP8[$234+4>>0]|0;HEAP8[$220+5>>0]=HEAP8[$234+5>>0]|0;HEAP8[$220+6>>0]=HEAP8[$234+6>>0]|0;HEAP8[$220+7>>0]=HEAP8[$234+7>>0]|0;
 $217 = $__h;
 HEAP32[$218>>2] = $248;
 $254 = $217;
 $216 = $218;
 $255 = $216;
 $256 = HEAP32[$255>>2]|0;
 $204 = $220;
 $257 = $204;
 ;HEAP32[$219>>2]=HEAP32[$257>>2]|0;HEAP32[$219+4>>2]=HEAP32[$257+4>>2]|0;
 ;HEAP8[$215>>0]=HEAP8[$219>>0]|0;HEAP8[$215+1>>0]=HEAP8[$219+1>>0]|0;HEAP8[$215+2>>0]=HEAP8[$219+2>>0]|0;HEAP8[$215+3>>0]=HEAP8[$219+3>>0]|0;HEAP8[$215+4>>0]=HEAP8[$219+4>>0]|0;HEAP8[$215+5>>0]=HEAP8[$219+5>>0]|0;HEAP8[$215+6>>0]=HEAP8[$219+6>>0]|0;HEAP8[$215+7>>0]=HEAP8[$219+7>>0]|0;
 $212 = $254;
 HEAP32[$213>>2] = $256;
 $258 = $212;
 $211 = $213;
 $259 = $211;
 $260 = HEAP32[$259>>2]|0;
 $205 = $215;
 $261 = $205;
 ;HEAP32[$214>>2]=HEAP32[$261>>2]|0;HEAP32[$214+4>>2]=HEAP32[$261+4>>2]|0;
 ;HEAP8[$210>>0]=HEAP8[$214>>0]|0;HEAP8[$210+1>>0]=HEAP8[$214+1>>0]|0;HEAP8[$210+2>>0]=HEAP8[$214+2>>0]|0;HEAP8[$210+3>>0]=HEAP8[$214+3>>0]|0;HEAP8[$210+4>>0]=HEAP8[$214+4>>0]|0;HEAP8[$210+5>>0]=HEAP8[$214+5>>0]|0;HEAP8[$210+6>>0]=HEAP8[$214+6>>0]|0;HEAP8[$210+7>>0]=HEAP8[$214+7>>0]|0;
 $208 = $258;
 HEAP32[$209>>2] = $260;
 $262 = $208;
 $207 = $209;
 $263 = $207;
 $264 = HEAP32[$263>>2]|0;
 HEAP32[$262>>2] = $264;
 $265 = ((($262)) + 4|0);
 $206 = $210;
 $266 = $206;
 ;HEAP32[$265>>2]=HEAP32[$266>>2]|0;HEAP32[$265+4>>2]=HEAP32[$266+4>>2]|0;
 $267 = $__na;
 $203 = $__h;
 $268 = $203;
 $202 = $268;
 $269 = $202;
 $201 = $269;
 $270 = $201;
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + 16|0);
 $168 = $272;
 $273 = $168;
 $274 = $233;
 $133 = $267;
 $134 = $273;
 $135 = $274;
 $275 = $134;
 $276 = $135;
 $277 = HEAP32[$276>>2]|0;
 HEAP32[$275>>2] = $277;
 $11 = $__h;
 $278 = $11;
 $10 = $278;
 $279 = $10;
 $9 = $279;
 $280 = $9;
 $281 = ((($280)) + 4|0);
 $282 = ((($281)) + 4|0);
 HEAP8[$282>>0] = 1;
 $283 = $__na;
 $3 = $__h;
 $284 = $3;
 $2 = $284;
 $285 = $2;
 $1 = $285;
 $286 = $1;
 $287 = HEAP32[$286>>2]|0;
 $288 = ((($287)) + 16|0);
 $289 = ((($288)) + 4|0);
 $0 = $289;
 $290 = $0;
 $4 = $283;
 $5 = $290;
 $291 = $5;
 __ZN9QuadrupleC2Ev($291);
 $8 = $__h;
 $292 = $8;
 $7 = $292;
 $293 = $7;
 $6 = $293;
 $294 = $6;
 $295 = ((($294)) + 4|0);
 $296 = ((($295)) + 5|0);
 HEAP8[$296>>0] = 1;
 $100 = $__h;
 $297 = $100;
 $98 = $103;
 $99 = $297;
 $298 = $98;
 $299 = $99;
 HEAP32[$298>>2] = $299;
 ;HEAP8[$97>>0]=HEAP8[$103>>0]|0;HEAP8[$97+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$103+3>>0]|0;
 $95 = $102;
 $300 = $95;
 $94 = $97;
 $301 = $94;
 $302 = HEAP32[$301>>2]|0;
 $77 = $302;
 $303 = $77;
 $76 = $303;
 $304 = $76;
 $75 = $304;
 $305 = $75;
 $306 = HEAP32[$305>>2]|0;
 $__t$i$i$i = $306;
 $74 = $303;
 $307 = $74;
 $73 = $307;
 $308 = $73;
 HEAP32[$308>>2] = 0;
 $309 = $__t$i$i$i;
 $78 = $97;
 $310 = $78;
 $311 = HEAP32[$310>>2]|0;
 $81 = $311;
 $312 = $81;
 $80 = $312;
 $313 = $80;
 $79 = $313;
 $314 = $79;
 $315 = ((($314)) + 4|0);
 $82 = $315;
 $316 = $82;
 ;HEAP32[$96>>2]=HEAP32[$316>>2]|0;HEAP32[$96+4>>2]=HEAP32[$316+4>>2]|0;
 ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;HEAP8[$93+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$96+3>>0]|0;HEAP8[$93+4>>0]=HEAP8[$96+4>>0]|0;HEAP8[$93+5>>0]=HEAP8[$96+5>>0]|0;HEAP8[$93+6>>0]=HEAP8[$96+6>>0]|0;HEAP8[$93+7>>0]=HEAP8[$96+7>>0]|0;
 $90 = $300;
 HEAP32[$91>>2] = $309;
 $317 = $90;
 $89 = $91;
 $318 = $89;
 $319 = HEAP32[$318>>2]|0;
 $83 = $93;
 $320 = $83;
 ;HEAP32[$92>>2]=HEAP32[$320>>2]|0;HEAP32[$92+4>>2]=HEAP32[$320+4>>2]|0;
 ;HEAP8[$88>>0]=HEAP8[$92>>0]|0;HEAP8[$88+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$92+3>>0]|0;HEAP8[$88+4>>0]=HEAP8[$92+4>>0]|0;HEAP8[$88+5>>0]=HEAP8[$92+5>>0]|0;HEAP8[$88+6>>0]=HEAP8[$92+6>>0]|0;HEAP8[$88+7>>0]=HEAP8[$92+7>>0]|0;
 $86 = $317;
 HEAP32[$87>>2] = $319;
 $321 = $86;
 $85 = $87;
 $322 = $85;
 $323 = HEAP32[$322>>2]|0;
 HEAP32[$321>>2] = $323;
 $324 = ((($321)) + 4|0);
 $84 = $88;
 $325 = $84;
 ;HEAP32[$324>>2]=HEAP32[$325>>2]|0;HEAP32[$324+4>>2]=HEAP32[$325+4>>2]|0;
 $72 = $102;
 $326 = $72;
 $69 = $71;
 $70 = $326;
 $327 = $69;
 $328 = $70;
 HEAP32[$327>>2] = $328;
 $329 = HEAP32[$71>>2]|0;
 HEAP32[$101>>2] = $329;
 ;HEAP8[$36>>0]=HEAP8[$101>>0]|0;HEAP8[$36+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$101+3>>0]|0;
 $34 = $236;
 $330 = $34;
 $33 = $36;
 $331 = $33;
 $332 = HEAP32[$331>>2]|0;
 $16 = $332;
 $333 = $16;
 $15 = $333;
 $334 = $15;
 $14 = $334;
 $335 = $14;
 $336 = HEAP32[$335>>2]|0;
 $__t$i$i4$i = $336;
 $13 = $333;
 $337 = $13;
 $12 = $337;
 $338 = $12;
 HEAP32[$338>>2] = 0;
 $339 = $__t$i$i4$i;
 $17 = $36;
 $340 = $17;
 $341 = HEAP32[$340>>2]|0;
 $20 = $341;
 $342 = $20;
 $19 = $342;
 $343 = $19;
 $18 = $343;
 $344 = $18;
 $345 = ((($344)) + 4|0);
 $21 = $345;
 $346 = $21;
 ;HEAP32[$35>>2]=HEAP32[$346>>2]|0;HEAP32[$35+4>>2]=HEAP32[$346+4>>2]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;HEAP8[$32+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$32+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$32+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$32+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$32+7>>0]=HEAP8[$35+7>>0]|0;
 $29 = $330;
 HEAP32[$30>>2] = $339;
 $347 = $29;
 $28 = $30;
 $348 = $28;
 $349 = HEAP32[$348>>2]|0;
 $22 = $32;
 $350 = $22;
 ;HEAP32[$31>>2]=HEAP32[$350>>2]|0;HEAP32[$31+4>>2]=HEAP32[$350+4>>2]|0;
 ;HEAP8[$27>>0]=HEAP8[$31>>0]|0;HEAP8[$27+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$31+7>>0]|0;
 $25 = $347;
 HEAP32[$26>>2] = $349;
 $351 = $25;
 $24 = $26;
 $352 = $24;
 $353 = HEAP32[$352>>2]|0;
 HEAP32[$351>>2] = $353;
 $354 = ((($351)) + 4|0);
 $23 = $27;
 $355 = $23;
 ;HEAP32[$354>>2]=HEAP32[$355>>2]|0;HEAP32[$354+4>>2]=HEAP32[$355+4>>2]|0;
 $68 = $102;
 $356 = $68;
 $66 = $356;
 $67 = 0;
 $357 = $66;
 $65 = $357;
 $358 = $65;
 $64 = $358;
 $359 = $64;
 $360 = HEAP32[$359>>2]|0;
 $__tmp$i$i1$i = $360;
 $361 = $67;
 $40 = $357;
 $362 = $40;
 $39 = $362;
 $363 = $39;
 HEAP32[$363>>2] = $361;
 $364 = $__tmp$i$i1$i;
 $365 = ($364|0)!=(0|0);
 if ($365) {
  $38 = $357;
  $366 = $38;
  $37 = $366;
  $367 = $37;
  $368 = ((($367)) + 4|0);
  $369 = $__tmp$i$i1$i;
  $62 = $368;
  $63 = $369;
  $370 = $62;
  $371 = ((($370)) + 5|0);
  $372 = HEAP8[$371>>0]|0;
  $373 = $372&1;
  if ($373) {
   $374 = HEAP32[$370>>2]|0;
   $375 = $63;
   $376 = ((($375)) + 16|0);
   $377 = ((($376)) + 4|0);
   $61 = $377;
   $378 = $61;
   $51 = $374;
   $52 = $378;
   $379 = $51;
   $380 = $52;
   ;HEAP8[$50>>0]=HEAP8[$53>>0]|0;
   $48 = $379;
   $49 = $380;
  }
  $381 = ((($370)) + 4|0);
  $382 = HEAP8[$381>>0]|0;
  $383 = $382&1;
  if ($383) {
   $384 = HEAP32[$370>>2]|0;
   $385 = $63;
   $386 = ((($385)) + 16|0);
   $41 = $386;
   $387 = $41;
   $45 = $384;
   $46 = $387;
   $388 = $45;
   $389 = $46;
   ;HEAP8[$44>>0]=HEAP8[$47>>0]|0;
   $42 = $388;
   $43 = $389;
  }
  $390 = $63;
  $391 = ($390|0)!=(0|0);
  if ($391) {
   $392 = HEAP32[$370>>2]|0;
   $393 = $63;
   $58 = $392;
   $59 = $393;
   $60 = 1;
   $394 = $58;
   $395 = $59;
   $396 = $60;
   $55 = $394;
   $56 = $395;
   $57 = $396;
   $397 = $56;
   $54 = $397;
   $398 = $54;
   __ZdlPv($398);
  }
 }
 $107 = $236;
 $399 = $107;
 $104 = $106;
 $105 = $399;
 $400 = $104;
 $401 = $105;
 HEAP32[$400>>2] = $401;
 $402 = HEAP32[$106>>2]|0;
 HEAP32[$235>>2] = $402;
 ;HEAP8[$132>>0]=HEAP8[$235>>0]|0;HEAP8[$132+1>>0]=HEAP8[$235+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$235+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$235+3>>0]|0;
 $130 = $agg$result;
 $403 = $130;
 $129 = $132;
 $404 = $129;
 $405 = HEAP32[$404>>2]|0;
 $112 = $405;
 $406 = $112;
 $111 = $406;
 $407 = $111;
 $110 = $407;
 $408 = $110;
 $409 = HEAP32[$408>>2]|0;
 $__t$i$i = $409;
 $109 = $406;
 $410 = $109;
 $108 = $410;
 $411 = $108;
 HEAP32[$411>>2] = 0;
 $412 = $__t$i$i;
 $113 = $132;
 $413 = $113;
 $414 = HEAP32[$413>>2]|0;
 $116 = $414;
 $415 = $116;
 $115 = $415;
 $416 = $115;
 $114 = $416;
 $417 = $114;
 $418 = ((($417)) + 4|0);
 $117 = $418;
 $419 = $117;
 ;HEAP32[$131>>2]=HEAP32[$419>>2]|0;HEAP32[$131+4>>2]=HEAP32[$419+4>>2]|0;
 ;HEAP8[$128>>0]=HEAP8[$131>>0]|0;HEAP8[$128+1>>0]=HEAP8[$131+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$131+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$131+3>>0]|0;HEAP8[$128+4>>0]=HEAP8[$131+4>>0]|0;HEAP8[$128+5>>0]=HEAP8[$131+5>>0]|0;HEAP8[$128+6>>0]=HEAP8[$131+6>>0]|0;HEAP8[$128+7>>0]=HEAP8[$131+7>>0]|0;
 $125 = $403;
 HEAP32[$126>>2] = $412;
 $420 = $125;
 $124 = $126;
 $421 = $124;
 $422 = HEAP32[$421>>2]|0;
 $118 = $128;
 $423 = $118;
 ;HEAP32[$127>>2]=HEAP32[$423>>2]|0;HEAP32[$127+4>>2]=HEAP32[$423+4>>2]|0;
 ;HEAP8[$123>>0]=HEAP8[$127>>0]|0;HEAP8[$123+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$127+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$127+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$127+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$127+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$127+7>>0]|0;
 $121 = $420;
 HEAP32[$122>>2] = $422;
 $424 = $121;
 $120 = $122;
 $425 = $120;
 $426 = HEAP32[$425>>2]|0;
 HEAP32[$424>>2] = $426;
 $427 = ((($424)) + 4|0);
 $119 = $123;
 $428 = $119;
 ;HEAP32[$427>>2]=HEAP32[$428>>2]|0;HEAP32[$427+4>>2]=HEAP32[$428+4>>2]|0;
 $167 = $236;
 $429 = $167;
 $165 = $429;
 $166 = 0;
 $430 = $165;
 $164 = $430;
 $431 = $164;
 $163 = $431;
 $432 = $163;
 $433 = HEAP32[$432>>2]|0;
 $__tmp$i$i7 = $433;
 $434 = $166;
 $139 = $430;
 $435 = $139;
 $138 = $435;
 $436 = $138;
 HEAP32[$436>>2] = $434;
 $437 = $__tmp$i$i7;
 $438 = ($437|0)!=(0|0);
 if ($438) {
  $137 = $430;
  $439 = $137;
  $136 = $439;
  $440 = $136;
  $441 = ((($440)) + 4|0);
  $442 = $__tmp$i$i7;
  $161 = $441;
  $162 = $442;
  $443 = $161;
  $444 = ((($443)) + 5|0);
  $445 = HEAP8[$444>>0]|0;
  $446 = $445&1;
  if ($446) {
   $447 = HEAP32[$443>>2]|0;
   $448 = $162;
   $449 = ((($448)) + 16|0);
   $450 = ((($449)) + 4|0);
   $160 = $450;
   $451 = $160;
   $150 = $447;
   $151 = $451;
   $452 = $150;
   $453 = $151;
   ;HEAP8[$149>>0]=HEAP8[$152>>0]|0;
   $147 = $452;
   $148 = $453;
  }
  $454 = ((($443)) + 4|0);
  $455 = HEAP8[$454>>0]|0;
  $456 = $455&1;
  if ($456) {
   $457 = HEAP32[$443>>2]|0;
   $458 = $162;
   $459 = ((($458)) + 16|0);
   $140 = $459;
   $460 = $140;
   $144 = $457;
   $145 = $460;
   $461 = $144;
   $462 = $145;
   ;HEAP8[$143>>0]=HEAP8[$146>>0]|0;
   $141 = $461;
   $142 = $462;
  }
  $463 = $162;
  $464 = ($463|0)!=(0|0);
  if ($464) {
   $465 = HEAP32[$443>>2]|0;
   $466 = $162;
   $157 = $465;
   $158 = $466;
   $159 = 1;
   $467 = $157;
   $468 = $158;
   $469 = $159;
   $154 = $467;
   $155 = $468;
   $156 = $469;
   $470 = $155;
   $153 = $470;
   $471 = $153;
   __ZdlPv($471);
  }
 }
 $200 = $__h;
 $472 = $200;
 $198 = $472;
 $199 = 0;
 $473 = $198;
 $197 = $473;
 $474 = $197;
 $196 = $474;
 $475 = $196;
 $476 = HEAP32[$475>>2]|0;
 $__tmp$i$i4 = $476;
 $477 = $199;
 $172 = $473;
 $478 = $172;
 $171 = $478;
 $479 = $171;
 HEAP32[$479>>2] = $477;
 $480 = $__tmp$i$i4;
 $481 = ($480|0)!=(0|0);
 if (!($481)) {
  STACKTOP = sp;return;
 }
 $170 = $473;
 $482 = $170;
 $169 = $482;
 $483 = $169;
 $484 = ((($483)) + 4|0);
 $485 = $__tmp$i$i4;
 $194 = $484;
 $195 = $485;
 $486 = $194;
 $487 = ((($486)) + 5|0);
 $488 = HEAP8[$487>>0]|0;
 $489 = $488&1;
 if ($489) {
  $490 = HEAP32[$486>>2]|0;
  $491 = $195;
  $492 = ((($491)) + 16|0);
  $493 = ((($492)) + 4|0);
  $193 = $493;
  $494 = $193;
  $183 = $490;
  $184 = $494;
  $495 = $183;
  $496 = $184;
  ;HEAP8[$182>>0]=HEAP8[$185>>0]|0;
  $180 = $495;
  $181 = $496;
 }
 $497 = ((($486)) + 4|0);
 $498 = HEAP8[$497>>0]|0;
 $499 = $498&1;
 if ($499) {
  $500 = HEAP32[$486>>2]|0;
  $501 = $195;
  $502 = ((($501)) + 16|0);
  $173 = $502;
  $503 = $173;
  $177 = $500;
  $178 = $503;
  $504 = $177;
  $505 = $178;
  ;HEAP8[$176>>0]=HEAP8[$179>>0]|0;
  $174 = $504;
  $175 = $505;
 }
 $506 = $195;
 $507 = ($506|0)!=(0|0);
 if (!($507)) {
  STACKTOP = sp;return;
 }
 $508 = HEAP32[$486>>2]|0;
 $509 = $195;
 $190 = $508;
 $191 = $509;
 $192 = 1;
 $510 = $190;
 $511 = $191;
 $512 = $192;
 $187 = $510;
 $188 = $511;
 $189 = $512;
 $513 = $188;
 $186 = $513;
 $514 = $186;
 __ZdlPv($514);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData25CopyDynamicBodyAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $b = 0, $body_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $body_index = 0;
 $3 = $1;
 $4 = ((($3)) + 103068|0);
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 while(1) {
  $6 = $b;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $b;
  $9 = ((($8)) + 100|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $b;
  $12 = ((($11)) + 104|0);
  HEAP32[$12>>2] = $10;
  $13 = $b;
  $14 = ((($13)) + 12|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $body_index;
  $17 = ((($2)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  HEAPF32[$19>>2] = $15;
  $20 = $b;
  $21 = ((($20)) + 12|0);
  $22 = ((($21)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $body_index;
  $25 = ((($2)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24<<4)|0);
  $28 = ((($27)) + 4|0);
  HEAPF32[$28>>2] = $23;
  $29 = $b;
  $30 = ((($29)) + 12|0);
  $31 = ((($30)) + 8|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $body_index;
  $34 = ((($2)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($33<<4)|0);
  $37 = ((($36)) + 8|0);
  HEAPF32[$37>>2] = $32;
  $38 = $b;
  $39 = ((($38)) + 12|0);
  $40 = ((($39)) + 8|0);
  $41 = ((($40)) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $body_index;
  $44 = ((($2)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($43<<4)|0);
  $47 = ((($46)) + 8|0);
  $48 = ((($47)) + 4|0);
  HEAPF32[$48>>2] = $42;
  $49 = $b;
  $50 = ((($49)) + 28|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $body_index;
  $53 = ((($2)) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + (($52*72)|0)|0);
  HEAPF32[$55>>2] = $51;
  $56 = $b;
  $57 = ((($56)) + 28|0);
  $58 = ((($57)) + 4|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $body_index;
  $61 = ((($2)) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + (($60*72)|0)|0);
  $64 = ((($63)) + 4|0);
  HEAPF32[$64>>2] = $59;
  $65 = $b;
  $66 = ((($65)) + 28|0);
  $67 = ((($66)) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $body_index;
  $70 = ((($2)) + 32|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($69*72)|0)|0);
  $73 = ((($72)) + 8|0);
  HEAPF32[$73>>2] = $68;
  $74 = $b;
  $75 = ((($74)) + 28|0);
  $76 = ((($75)) + 8|0);
  $77 = ((($76)) + 4|0);
  $78 = +HEAPF32[$77>>2];
  $79 = $body_index;
  $80 = ((($2)) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($79*72)|0)|0);
  $83 = ((($82)) + 8|0);
  $84 = ((($83)) + 4|0);
  HEAPF32[$84>>2] = $78;
  $85 = $b;
  $86 = ((($85)) + 28|0);
  $87 = ((($86)) + 16|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $body_index;
  $90 = ((($2)) + 32|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + (($89*72)|0)|0);
  $93 = ((($92)) + 16|0);
  HEAPF32[$93>>2] = $88;
  $94 = $b;
  $95 = ((($94)) + 28|0);
  $96 = ((($95)) + 16|0);
  $97 = ((($96)) + 4|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $body_index;
  $100 = ((($2)) + 32|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + (($99*72)|0)|0);
  $103 = ((($102)) + 16|0);
  $104 = ((($103)) + 4|0);
  HEAPF32[$104>>2] = $98;
  $105 = $b;
  $106 = ((($105)) + 28|0);
  $107 = ((($106)) + 24|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $body_index;
  $110 = ((($2)) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + (($109*72)|0)|0);
  $113 = ((($112)) + 24|0);
  HEAPF32[$113>>2] = $108;
  $114 = $b;
  $115 = ((($114)) + 28|0);
  $116 = ((($115)) + 28|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $body_index;
  $119 = ((($2)) + 32|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($118*72)|0)|0);
  $122 = ((($121)) + 28|0);
  HEAPF32[$122>>2] = $117;
  $123 = $b;
  $124 = ((($123)) + 64|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $body_index;
  $127 = ((($2)) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + (($126*72)|0)|0);
  $130 = ((($129)) + 40|0);
  HEAPF32[$130>>2] = $125;
  $131 = $b;
  $132 = ((($131)) + 64|0);
  $133 = ((($132)) + 4|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $body_index;
  $136 = ((($2)) + 32|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + (($135*72)|0)|0);
  $139 = ((($138)) + 40|0);
  $140 = ((($139)) + 4|0);
  HEAPF32[$140>>2] = $134;
  $141 = $b;
  $142 = ((($141)) + 76|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $body_index;
  $145 = ((($2)) + 32|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + (($144*72)|0)|0);
  $148 = ((($147)) + 48|0);
  HEAPF32[$148>>2] = $143;
  $149 = $b;
  $150 = ((($149)) + 76|0);
  $151 = ((($150)) + 4|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $body_index;
  $154 = ((($2)) + 32|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($153*72)|0)|0);
  $157 = ((($156)) + 48|0);
  $158 = ((($157)) + 4|0);
  HEAPF32[$158>>2] = $152;
  $159 = $b;
  $160 = ((($159)) + 72|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $body_index;
  $163 = ((($2)) + 32|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + (($162*72)|0)|0);
  $166 = ((($165)) + 56|0);
  HEAPF32[$166>>2] = $161;
  $167 = $b;
  $168 = ((($167)) + 84|0);
  $169 = +HEAPF32[$168>>2];
  $170 = $body_index;
  $171 = ((($2)) + 32|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($170*72)|0)|0);
  $174 = ((($173)) + 60|0);
  HEAPF32[$174>>2] = $169;
  $175 = $b;
  $176 = ((($175)) + 104|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $body_index;
  $179 = ((($2)) + 32|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + (($178*72)|0)|0);
  $182 = ((($181)) + 64|0);
  HEAP32[$182>>2] = $177;
  $183 = $body_index;
  $184 = $b;
  $185 = ((($184)) + 100|0);
  HEAP32[$185>>2] = $183;
  $186 = $body_index;
  $187 = (($186) + 1)|0;
  $body_index = $187;
  $188 = $b;
  $189 = ((($188)) + 96|0);
  $190 = HEAP32[$189>>2]|0;
  $b = $190;
 }
 $191 = (__ZN10b2CLDevice8instanceEv()|0);
 $192 = ((($2)) + 64|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ((($2)) + 28|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $1;
 $197 = ((($196)) + 103076|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198<<4;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($191,$193,$195,0,$199);
 $200 = (__ZN10b2CLDevice8instanceEv()|0);
 $201 = ((($2)) + 76|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ((($2)) + 32|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $1;
 $206 = ((($205)) + 103076|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207*72)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($200,$202,$204,0,$208);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData10CopyJointsEP7b2Worldbbb($this,$m_pWorld,$warmStarting,$isJointChanged,$isJointUpdated) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $warmStarting = $warmStarting|0;
 $isJointChanged = $isJointChanged|0;
 $isJointUpdated = $isJointUpdated|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ciErrNum = 0, $currentIndex = 0, $i = 0, $i1 = 0, $i2 = 0, $jointIndex = 0, $jointType = 0, $pJoint = 0, $region = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jointIndex = sp + 36|0;
 $region = sp + 8|0;
 $ciErrNum = sp + 4|0;
 $5 = sp;
 $0 = $this;
 $1 = $m_pWorld;
 $6 = $warmStarting&1;
 $2 = $6;
 $7 = $isJointChanged&1;
 $3 = $7;
 $8 = $isJointUpdated&1;
 $4 = $8;
 $9 = $0;
 $10 = $3;
 $11 = $10&1;
 if (!($11)) {
  $12 = $4;
  $13 = $12&1;
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = $3;
 $15 = $14&1;
 if ($15) {
  $16 = $2;
  $17 = $16&1;
  if ($17) {
   __ZN14b2CLCommonData18StoreJointImpulsesEv($9);
  }
  $18 = ((($9)) + 144|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($9)) + 1128|0);
  HEAP32[$20>>2] = $19;
  __ZN14b2CLCommonData12DeleteJointsEv($9);
  $21 = $1;
  $22 = ((($21)) + 103088|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($9)) + 144|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = ((($9)) + 144|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $pJoint = 0;
 $28 = $3;
 $29 = $28&1;
 do {
  if ($29) {
   $30 = $1;
   $31 = ((($30)) + 103072|0);
   $32 = HEAP32[$31>>2]|0;
   $pJoint = $32;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = ((($9)) + 144|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)<($35|0);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = $pJoint;
    $38 = (__ZNK7b2Joint7GetTypeEv($37)|0);
    $39 = ($38|0)<(11);
    if (!($39)) {
     label = 12;
     break;
    }
    $40 = $pJoint;
    $41 = (__ZNK7b2Joint7GetTypeEv($40)|0);
    $42 = ((($9)) + 100|0);
    $43 = (($42) + ($41<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[$43>>2] = $45;
    $46 = $pJoint;
    $47 = (__ZN7b2Joint7GetNextEv($46)|0);
    $pJoint = $47;
    $48 = $i;
    $49 = (($48) + 1)|0;
    $i = $49;
   }
   if ((label|0) == 12) {
    ___assert_fail((13189|0),(12986|0),611,(13223|0));
    // unreachable;
   }
   else if ((label|0) == 14) {
    $50 = ((($9)) + 144|0);
    $51 = HEAP32[$50>>2]|0;
    $$arith = ($51*228)|0;
    $$overflow = ($51>>>0)>(18837575);
    $52 = $$overflow ? -1 : $$arith;
    $53 = (__Znaj($52)|0);
    $54 = ((($9)) + 148|0);
    HEAP32[$54>>2] = $53;
    $55 = ((($9)) + 148|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($9)) + 144|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58*228)|0;
    _memset(($56|0),0,($59|0))|0;
    $60 = (__ZN10b2CLDevice8instanceEv()|0);
    $61 = ((($9)) + 144|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62*228)|0;
    $64 = (__ZN10b2CLDevice13allocateArrayEjb($60,$63,0)|0);
    $65 = ((($9)) + 1076|0);
    HEAP32[$65>>2] = $64;
    break;
   }
  }
 } while(0);
 $currentIndex = 0;
 $i1 = 0;
 while(1) {
  $66 = $i1;
  $67 = ($66|0)<(11);
  if (!($67)) {
   break;
  }
  $68 = $currentIndex;
  $69 = $i1;
  $70 = (($jointIndex) + ($69<<2)|0);
  HEAP32[$70>>2] = $68;
  $71 = $currentIndex;
  $72 = $i1;
  $73 = ((($9)) + 152|0);
  $74 = (($73) + (($72*80)|0)|0);
  HEAP32[$74>>2] = $71;
  $75 = $i1;
  $76 = ((($9)) + 100|0);
  $77 = (($76) + ($75<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $currentIndex;
  $80 = (($79) + ($78))|0;
  $currentIndex = $80;
  $81 = $i1;
  $82 = (($81) + 1)|0;
  $i1 = $82;
 }
 $83 = $1;
 $84 = ((($83)) + 103072|0);
 $85 = HEAP32[$84>>2]|0;
 $pJoint = $85;
 $i2 = 0;
 while(1) {
  $86 = $i2;
  $87 = $1;
  $88 = ((($87)) + 103088|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($86|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $pJoint;
  $92 = (__ZNK7b2Joint7GetTypeEv($91)|0);
  $jointType = $92;
  $93 = $jointType;
  $94 = ((($9)) + 1080|0);
  $95 = (($94) + ($93<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)!=(0|0);
  if (!($97)) {
   label = 21;
   break;
  }
  $98 = $jointType;
  $99 = ((($9)) + 1080|0);
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $pJoint;
  $103 = $jointType;
  $104 = (($jointIndex) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$104>>2] = $106;
  $107 = ((($9)) + 148|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + (($105*228)|0)|0);
  FUNCTION_TABLE_vii[$101 & 1023]($102,$109);
  $110 = $pJoint;
  $111 = (__ZN7b2Joint7GetNextEv($110)|0);
  $pJoint = $111;
  $112 = $i2;
  $113 = (($112) + 1)|0;
  $i2 = $113;
 }
 if ((label|0) == 21) {
  ___assert_fail((13234|0),(12986|0),635,(13223|0));
  // unreachable;
 }
 $114 = $1;
 __ZN14b2CLCommonData18ComputeJointColorsEP7b2World($9,$114);
 $115 = $3;
 $116 = $115&1;
 if (!($116)) {
  HEAP32[$region>>2] = 208;
  $127 = ((($region)) + 4|0);
  $128 = ((($9)) + 144|0);
  $129 = HEAP32[$128>>2]|0;
  HEAP32[$127>>2] = $129;
  $130 = ((($127)) + 4|0);
  HEAP32[$130>>2] = 1;
  $131 = (__ZN10b2CLDevice8instanceEv()|0);
  $132 = (__ZNK10b2CLDevice15GetCommandQueueEv($131)|0);
  $133 = ((($9)) + 1076|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($9)) + 148|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (_clEnqueueWriteBufferRect(($132|0),($134|0),1,(2016|0),(2016|0),($region|0),228,0,228,0,($136|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $137;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum,$5);
  STACKTOP = sp;return;
 }
 $117 = (__ZN10b2CLDevice8instanceEv()|0);
 $118 = ((($9)) + 1076|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ((($9)) + 148|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($9)) + 144|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123*228)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($117,$119,$121,0,$124,1);
 $125 = $2;
 $126 = $125&1;
 if (!($126)) {
  STACKTOP = sp;return;
 }
 __ZN14b2CLCommonData21ReadLastJointImpulsesEv($9);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData18StoreJointImpulsesEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ascendingNumbers = 0, $ciErrNum = 0, $ciErrNum2 = 0, $i = 0, $region = 0, $region1 = 0, $sortCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $region = sp + 36|0;
 $ciErrNum = sp + 32|0;
 $1 = sp + 28|0;
 $region1 = sp + 16|0;
 $ciErrNum2 = sp + 12|0;
 $2 = sp + 8|0;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>=(0);
 if (!($6)) {
  ___assert_fail((13150|0),(12986|0),1018,(13170|0));
  // unreachable;
 }
 $7 = ((($3)) + 144|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($3)) + 144|0);
 $11 = HEAP32[$10>>2]|0;
 $sortCount = $11;
 $12 = $sortCount;
 $13 = ((($3)) + 1144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)>($14|0);
 if ($15) {
  $16 = ((($3)) + 1124|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = (__ZN10b2CLDevice8instanceEv()|0);
   $20 = ((($3)) + 1124|0);
   $21 = HEAP32[$20>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($19,$21);
  }
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = $sortCount;
  $24 = ($23*20)|0;
  $25 = (__ZN10b2CLDevice13allocateArrayEjb($22,$24,0)|0);
  $26 = ((($3)) + 1124|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($3)) + 1148|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = (__ZN10b2CLDevice8instanceEv()|0);
   $31 = ((($3)) + 1148|0);
   $32 = HEAP32[$31>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($30,$32);
  }
  $33 = (__ZN10b2CLDevice8instanceEv()|0);
  $34 = $sortCount;
  $35 = $34<<2;
  $36 = (__ZN10b2CLDevice13allocateArrayEjb($33,$35,0)|0);
  $37 = ((($3)) + 1148|0);
  HEAP32[$37>>2] = $36;
  $38 = ((($3)) + 1152|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = (__ZN10b2CLDevice8instanceEv()|0);
   $42 = ((($3)) + 1152|0);
   $43 = HEAP32[$42>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($41,$43);
  }
  $44 = (__ZN10b2CLDevice8instanceEv()|0);
  $45 = $sortCount;
  $46 = $45<<2;
  $47 = (__ZN10b2CLDevice13allocateArrayEjb($44,$46,0)|0);
  $48 = ((($3)) + 1152|0);
  HEAP32[$48>>2] = $47;
 }
 HEAP32[$region>>2] = 20;
 $49 = ((($region)) + 4|0);
 $50 = ((($3)) + 144|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$49>>2] = $51;
 $52 = ((($49)) + 4|0);
 HEAP32[$52>>2] = 1;
 $53 = (__ZN10b2CLDevice8instanceEv()|0);
 $54 = (__ZNK10b2CLDevice15GetCommandQueueEv($53)|0);
 $55 = ((($3)) + 1076|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($3)) + 1124|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_clEnqueueCopyBufferRect(($54|0),($56|0),($58|0),(32432|0),(32432|0),($region|0),228,0,0,0,0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $59;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum,$1);
 HEAP32[$region1>>2] = 4;
 $60 = ((($region1)) + 4|0);
 $61 = ((($3)) + 144|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$60>>2] = $62;
 $63 = ((($60)) + 4|0);
 HEAP32[$63>>2] = 1;
 $64 = (__ZN10b2CLDevice8instanceEv()|0);
 $65 = (__ZNK10b2CLDevice15GetCommandQueueEv($64)|0);
 $66 = ((($3)) + 1076|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($3)) + 1148|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_clEnqueueCopyBufferRect(($65|0),($67|0),($69|0),(32444|0),(32444|0),($region1|0),228,0,0,0,0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum2>>2] = $70;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum2,$2);
 $71 = ((($3)) + 144|0);
 $72 = HEAP32[$71>>2]|0;
 $$arith = $72<<2;
 $$overflow = ($72>>>0)>(1073741823);
 $73 = $$overflow ? -1 : $$arith;
 $74 = (__Znaj($73)|0);
 $ascendingNumbers = $74;
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = ((($3)) + 144|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)<($77|0);
  if (!($78)) {
   break;
  }
  $79 = $i;
  $80 = $i;
  $81 = $ascendingNumbers;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $79;
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 $85 = (__ZN10b2CLDevice8instanceEv()|0);
 $86 = ((($3)) + 1152|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $ascendingNumbers;
 $89 = ((($3)) + 144|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($85,$87,$88,0,$91,1);
 $92 = $ascendingNumbers;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  __ZdaPv($92);
 }
 $94 = (__ZN8b2CLSort8instanceEv()|0);
 $95 = ((($3)) + 1148|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($3)) + 1152|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($3)) + 144|0);
 $100 = HEAP32[$99>>2]|0;
 __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($94,$96,$98,$100,0,1);
 $101 = $sortCount;
 $102 = ((($3)) + 1144|0);
 HEAP32[$102>>2] = $101;
 STACKTOP = sp;return;
}
function __ZL14b2clCheckErrorIiiEvRKT_RKT0_($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $r;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $a = 0;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((13336|0),(13343|0),144,(13425|0));
  // unreachable;
 }
}
function __ZN7b2Joint7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14b2CLCommonData18ComputeJointColorsEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $color = 0, $coloredJointIndex = 0, $currentJointData = 0, $freezed_body = 0, $i = 0, $i1 = 0, $indexA = 0, $indexB = 0, $indexC = 0, $indexD = 0, $jointColors = 0, $jointIndexToColoredJointIndexMap = 0, $jointType = 0, $numCurrentTypeJoints = 0, $sortedList = 0, $typeOffset = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 103076|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(0);
 $7 = $6 ? -1 : $5;
 $8 = (__Znaj($7)|0);
 $freezed_body = $8;
 $9 = $freezed_body;
 $10 = $1;
 $11 = ((($10)) + 103076|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 _memset(($9|0),0,($13|0))|0;
 $14 = ((($2)) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $$arith6 = $15<<2;
 $$overflow7 = ($15>>>0)>(1073741823);
 $16 = $$overflow7 ? -1 : $$arith6;
 $17 = (__Znaj($16)|0);
 $jointColors = $17;
 $18 = ((($2)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $$arith2 = $19<<2;
 $$overflow3 = ($19>>>0)>(1073741823);
 $20 = $$overflow3 ? -1 : $$arith2;
 $21 = (__Znaj($20)|0);
 $jointIndexToColoredJointIndexMap = $21;
 $22 = ((($2)) + 144|0);
 $23 = HEAP32[$22>>2]|0;
 $$arith = ($23*228)|0;
 $$overflow = ($23>>>0)>(18837575);
 $24 = $$overflow ? -1 : $$arith;
 $25 = (__Znaj($24)|0);
 $sortedList = $25;
 $jointType = 0;
 L1: while(1) {
  $26 = $jointType;
  $27 = ($26|0)<(11);
  if (!($27)) {
   break;
  }
  $28 = $jointType;
  $29 = ((($2)) + 100|0);
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $numCurrentTypeJoints = $31;
  $32 = $numCurrentTypeJoints;
  $33 = ($32|0)==(0);
  L4: do {
   if (!($33)) {
    $34 = $jointType;
    $35 = ((($2)) + 152|0);
    $36 = (($35) + (($34*80)|0)|0);
    $37 = HEAP32[$36>>2]|0;
    $typeOffset = $37;
    $38 = $jointColors;
    $39 = $numCurrentTypeJoints;
    $40 = $39<<2;
    _memset(($38|0),0,($40|0))|0;
    $color = 1;
    $coloredJointIndex = 0;
    while(1) {
     $41 = $coloredJointIndex;
     $42 = $numCurrentTypeJoints;
     $43 = ($41|0)<($42|0);
     if (!($43)) {
      break;
     }
     $i = 0;
     while(1) {
      $44 = $i;
      $45 = $numCurrentTypeJoints;
      $46 = ($44|0)<($45|0);
      if (!($46)) {
       break;
      }
      $47 = $i;
      $48 = $jointColors;
      $49 = (($48) + ($47<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)!=(0);
      do {
       if (!($51)) {
        $52 = $typeOffset;
        $53 = $i;
        $54 = (($52) + ($53))|0;
        $55 = ((($2)) + 148|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = (($56) + (($54*228)|0)|0);
        $currentJointData = $57;
        $58 = $currentJointData;
        $59 = ((($58)) + 32|0);
        $60 = HEAP32[$59>>2]|0;
        $indexA = $60;
        $61 = $currentJointData;
        $62 = ((($61)) + 36|0);
        $63 = HEAP32[$62>>2]|0;
        $indexB = $63;
        $64 = $currentJointData;
        $65 = ((($64)) + 40|0);
        $66 = HEAP32[$65>>2]|0;
        $indexC = $66;
        $67 = $currentJointData;
        $68 = ((($67)) + 44|0);
        $69 = HEAP32[$68>>2]|0;
        $indexD = $69;
        $70 = $indexA;
        $71 = $freezed_body;
        $72 = (($71) + ($70)|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73&1;
        if (!($74)) {
         $75 = $indexB;
         $76 = $freezed_body;
         $77 = (($76) + ($75)|0);
         $78 = HEAP8[$77>>0]|0;
         $79 = $78&1;
         if (!($79)) {
          $80 = $indexC;
          $81 = ($80|0)!=(0);
          if ($81) {
           $82 = $indexC;
           $83 = $freezed_body;
           $84 = (($83) + ($82)|0);
           $85 = HEAP8[$84>>0]|0;
           $86 = $85&1;
           if ($86) {
            break;
           }
          }
          $87 = $indexD;
          $88 = ($87|0)!=(0);
          if ($88) {
           $89 = $indexD;
           $90 = $freezed_body;
           $91 = (($90) + ($89)|0);
           $92 = HEAP8[$91>>0]|0;
           $93 = $92&1;
           if ($93) {
            break;
           }
          }
          $94 = $color;
          $95 = $i;
          $96 = $jointColors;
          $97 = (($96) + ($95<<2)|0);
          HEAP32[$97>>2] = $94;
          $98 = $currentJointData;
          $99 = ((($98)) + 20|0);
          HEAP32[$99>>2] = $94;
          $100 = $coloredJointIndex;
          $101 = $i;
          $102 = $jointIndexToColoredJointIndexMap;
          $103 = (($102) + ($101<<2)|0);
          HEAP32[$103>>2] = $100;
          $104 = $coloredJointIndex;
          $105 = (($104) + 1)|0;
          $coloredJointIndex = $105;
          $106 = $indexA;
          $107 = ((($2)) + 24|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = (($108) + (($106*72)|0)|0);
          $110 = ((($109)) + 28|0);
          $111 = +HEAPF32[$110>>2];
          $112 = $111 == 2.0;
          if ($112) {
           $113 = $indexA;
           $114 = $freezed_body;
           $115 = (($114) + ($113)|0);
           HEAP8[$115>>0] = 1;
          }
          $116 = $indexB;
          $117 = ((($2)) + 24|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = (($118) + (($116*72)|0)|0);
          $120 = ((($119)) + 28|0);
          $121 = +HEAPF32[$120>>2];
          $122 = $121 == 2.0;
          if ($122) {
           $123 = $indexB;
           $124 = $freezed_body;
           $125 = (($124) + ($123)|0);
           HEAP8[$125>>0] = 1;
          }
          $126 = $indexC;
          $127 = ($126|0)!=(0);
          if ($127) {
           $128 = $indexC;
           $129 = ((($2)) + 24|0);
           $130 = HEAP32[$129>>2]|0;
           $131 = (($130) + (($128*72)|0)|0);
           $132 = ((($131)) + 28|0);
           $133 = +HEAPF32[$132>>2];
           $134 = $133 == 2.0;
           if ($134) {
            $135 = $indexC;
            $136 = $freezed_body;
            $137 = (($136) + ($135)|0);
            HEAP8[$137>>0] = 1;
           }
          }
          $138 = $indexD;
          $139 = ($138|0)!=(0);
          if ($139) {
           $140 = $indexD;
           $141 = ((($2)) + 24|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = (($142) + (($140*72)|0)|0);
           $144 = ((($143)) + 28|0);
           $145 = +HEAPF32[$144>>2];
           $146 = $145 == 2.0;
           if ($146) {
            $147 = $indexD;
            $148 = $freezed_body;
            $149 = (($148) + ($147)|0);
            HEAP8[$149>>0] = 1;
           }
          }
         }
        }
       }
      } while(0);
      $150 = $i;
      $151 = (($150) + 1)|0;
      $i = $151;
     }
     $152 = $color;
     $153 = (($152) + 1)|0;
     $color = $153;
     $154 = $color;
     $155 = ($154|0)>(20);
     if ($155) {
      label = 27;
      break L1;
     }
     $156 = $freezed_body;
     $157 = $1;
     $158 = ((($157)) + 103076|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159;
     _memset(($156|0),0,($160|0))|0;
     $161 = $typeOffset;
     $162 = $coloredJointIndex;
     $163 = (($161) + ($162))|0;
     $164 = $color;
     $165 = (($164) - 1)|0;
     $166 = $jointType;
     $167 = ((($2)) + 152|0);
     $168 = (($167) + (($166*80)|0)|0);
     $169 = (($168) + ($165<<2)|0);
     HEAP32[$169>>2] = $163;
    }
    $170 = $color;
    $171 = (($170) - 1)|0;
    $172 = $jointType;
    $173 = ((($2)) + 1032|0);
    $174 = (($173) + ($172<<2)|0);
    HEAP32[$174>>2] = $171;
    $175 = $typeOffset;
    $176 = $numCurrentTypeJoints;
    $177 = (($175) + ($176))|0;
    $178 = $color;
    $179 = (($178) - 1)|0;
    $180 = $jointType;
    $181 = ((($2)) + 152|0);
    $182 = (($181) + (($180*80)|0)|0);
    $183 = (($182) + ($179<<2)|0);
    HEAP32[$183>>2] = $177;
    $i1 = 0;
    while(1) {
     $184 = $i1;
     $185 = $numCurrentTypeJoints;
     $186 = ($184|0)<($185|0);
     if (!($186)) {
      break L4;
     }
     $187 = $typeOffset;
     $188 = $i1;
     $189 = $jointIndexToColoredJointIndexMap;
     $190 = (($189) + ($188<<2)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($187) + ($191))|0;
     $193 = $sortedList;
     $194 = (($193) + (($192*228)|0)|0);
     $195 = $typeOffset;
     $196 = $i1;
     $197 = (($195) + ($196))|0;
     $198 = ((($2)) + 148|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = (($199) + (($197*228)|0)|0);
     _memcpy(($194|0),($200|0),228)|0;
     $201 = $i1;
     $202 = (($201) + 1)|0;
     $i1 = $202;
    }
   }
  } while(0);
  $203 = $jointType;
  $204 = (($203) + 1)|0;
  $jointType = $204;
 }
 if ((label|0) == 27) {
  (_printf(13259,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $205 = $jointColors;
 $206 = ($205|0)==(0|0);
 if (!($206)) {
  __ZdaPv($205);
 }
 $207 = $jointIndexToColoredJointIndexMap;
 $208 = ($207|0)==(0|0);
 if (!($208)) {
  __ZdaPv($207);
 }
 $209 = $freezed_body;
 $210 = ($209|0)==(0|0);
 if (!($210)) {
  __ZdaPv($209);
 }
 $211 = ((($2)) + 148|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ($212|0)==(0|0);
 if ($213) {
  $214 = $sortedList;
  $215 = ((($2)) + 148|0);
  HEAP32[$215>>2] = $214;
  STACKTOP = sp;return;
 }
 __ZdaPv($212);
 $214 = $sortedList;
 $215 = ((($2)) + 148|0);
 HEAP32[$215>>2] = $214;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData21ReadLastJointImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 1128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $5 = ((($1)) + 1180|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = ((($1)) + 1076|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $11 = $err;
 $12 = $11 | $10;
 $err = $12;
 $13 = ((($1)) + 1180|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $a;
 $16 = (($15) + 1)|0;
 $a = $16;
 $17 = ((($1)) + 1124|0);
 $18 = (_clSetKernelArg(($14|0),($15|0),4,($17|0))|0);
 $19 = $err;
 $20 = $19 | $18;
 $err = $20;
 $21 = ((($1)) + 1180|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $a;
 $24 = (($23) + 1)|0;
 $a = $24;
 $25 = ((($1)) + 1148|0);
 $26 = (_clSetKernelArg(($22|0),($23|0),4,($25|0))|0);
 $27 = $err;
 $28 = $27 | $26;
 $err = $28;
 $29 = ((($1)) + 1180|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $a;
 $32 = (($31) + 1)|0;
 $a = $32;
 $33 = ((($1)) + 1152|0);
 $34 = (_clSetKernelArg(($30|0),($31|0),4,($33|0))|0);
 $35 = $err;
 $36 = $35 | $34;
 $err = $36;
 $37 = ((($1)) + 1180|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $a;
 $40 = (($39) + 1)|0;
 $a = $40;
 $41 = ((($1)) + 144|0);
 $42 = (_clSetKernelArg(($38|0),($39|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = ((($1)) + 1180|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = ((($1)) + 1128|0);
 $50 = (_clSetKernelArg(($46|0),($47|0),4,($49|0))|0);
 $51 = $err;
 $52 = $51 | $50;
 $err = $52;
 $53 = $err;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = ((($1)) + 1180|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer>>2] = $56;
  (_printf(19385,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $57 = ((($1)) + 144|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($1)) + 1184|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + ($60))|0;
 $62 = (($61) - 1)|0;
 $63 = ((($1)) + 1184|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62>>>0) / ($64>>>0))&-1;
 $group_num = $65;
 $66 = $group_num;
 $67 = ((($1)) + 1184|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = Math_imul($66, $68)|0;
 HEAP32[$global>>2] = $69;
 $err = 0;
 $70 = (__ZN10b2CLDevice8instanceEv()|0);
 $71 = (__ZNK10b2CLDevice15GetCommandQueueEv($70)|0);
 $72 = ((($1)) + 1180|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($1)) + 1184|0);
 $75 = (_clEnqueueNDRangeKernel(($71|0),($73|0),1,(0|0),($global|0),($74|0),0,(0|0),(0|0))|0);
 $76 = $err;
 $77 = $76 | $75;
 $err = $77;
 $78 = $err;
 $79 = ($78|0)!=(0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = ((($1)) + 1180|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $81;
 (_printf(15353,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 36|0;
 $6 = sp + 28|0;
 $10 = sp + 12|0;
 $13 = sp;
 $12 = $__x;
 $14 = $12;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $8 = $10;
 $9 = -1;
 $17 = $8;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$10>>2]|0;
 HEAP32[$13>>2] = $18;
 $0 = $13;
 $19 = ($16|0)!=(0|0);
 if (!($19)) {
  while(1) {
   $30 = $12;
   $7 = $30;
   $31 = $7;
   $32 = $7;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($31|0)==($35|0);
   $37 = $36 ^ 1;
   $38 = $12;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   if (!($37)) {
    break;
   }
   $12 = $40;
  }
  $11 = $40;
  $41 = $11;
  STACKTOP = sp;return ($41|0);
 }
 $20 = $12;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 while(1) {
  $23 = $5;
  $24 = HEAP32[$23>>2]|0;
  $2 = $4;
  $3 = -1;
  $25 = $2;
  HEAP32[$25>>2] = 0;
  $26 = HEAP32[$4>>2]|0;
  HEAP32[$6>>2] = $26;
  $1 = $6;
  $27 = ($24|0)!=(0|0);
  $28 = $5;
  if (!($27)) {
   break;
  }
  $29 = HEAP32[$28>>2]|0;
  $5 = $29;
 }
 $11 = $28;
 $41 = $11;
 STACKTOP = sp;return ($41|0);
}
function __ZN14b2CLCommonData31UpdateFixtureAddressAndChildrenEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $b = 0, $f = 0, $fixture_index = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = ((($2)) + 1168|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 103084|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 if ($8) {
  $9 = ((($2)) + 1160|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = ((($2)) + 1160|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __ZdaPv($13);
   }
  }
  $15 = $1;
  $16 = ((($15)) + 103084|0);
  $17 = HEAP32[$16>>2]|0;
  $$arith2 = $17<<2;
  $$overflow3 = ($17>>>0)>(1073741823);
  $18 = $$overflow3 ? -1 : $$arith2;
  $19 = (__Znaj($18)|0);
  $20 = ((($2)) + 1160|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($2)) + 1164|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = ((($2)) + 1164|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    __ZdaPv($25);
   }
  }
  $27 = $1;
  $28 = ((($27)) + 103084|0);
  $29 = HEAP32[$28>>2]|0;
  $$arith = $29<<2;
  $$overflow = ($29>>>0)>(1073741823);
  $30 = $$overflow ? -1 : $$arith;
  $31 = (__Znaj($30)|0);
  $32 = ((($2)) + 1164|0);
  HEAP32[$32>>2] = $31;
  $33 = $1;
  $34 = ((($33)) + 103084|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($2)) + 1168|0);
  HEAP32[$36>>2] = $35;
 }
 $fixture_index = 0;
 $37 = $1;
 $38 = ((($37)) + 103068|0);
 $39 = HEAP32[$38>>2]|0;
 $b = $39;
 while(1) {
  $40 = $b;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   break;
  }
  $42 = $b;
  $43 = ((($42)) + 108|0);
  $44 = HEAP32[$43>>2]|0;
  $f = $44;
  while(1) {
   $45 = $f;
   $46 = ($45|0)!=(0|0);
   if (!($46)) {
    break;
   }
   $47 = $f;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $s = $49;
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = $s;
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_ii[$54 & 1023]($51)|0);
    $56 = ($50|0)<($55|0);
    $57 = $f;
    if (!($56)) {
     break;
    }
    $58 = $fixture_index;
    $59 = ((($2)) + 1160|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($58<<2)|0);
    HEAP32[$61>>2] = $57;
    $62 = $i;
    $63 = $fixture_index;
    $64 = ((($2)) + 1164|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($63<<2)|0);
    HEAP32[$66>>2] = $62;
    $67 = $fixture_index;
    $68 = (($67) + 1)|0;
    $fixture_index = $68;
    $69 = $i;
    $70 = (($69) + 1)|0;
    $i = $70;
   }
   $71 = ((($57)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $f = $72;
  }
  $73 = $b;
  $74 = ((($73)) + 96|0);
  $75 = HEAP32[$74>>2]|0;
  $b = $75;
 }
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[30424]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (32456|0);
 }
 $4 = (___cxa_guard_acquire(30424)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (32456|0);
 }
 __THREW__ = 0;
 invoke_vi(427,(32456|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((428|0),(32456|0),(___dso_handle|0))|0);
 STACKTOP = sp;return (32456|0);
}
function __ZN10b2CLDeviceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10b2CLDevice13startupOpenCLEv($1);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice13startupOpenCLEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ciErrNum = 0;
 var $cpPlatforms = 0, $firstCPU = 0, $firstGPU = 0, $i = 0, $i1 = 0, $infoLen = 0, $infoStr = 0, $infoType = 0, $max_compute_units = 0, $max_workgroup_size = 0, $or$cond = 0, $returned_size = 0, $uiNumDevices = 0, $uiNumPlatforms = 0, $uiTargetPlatform = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer51 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer51 = sp + 160|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer44 = sp + 136|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $uiNumPlatforms = sp + 232|0;
 $uiNumDevices = sp + 220|0;
 $ciErrNum = sp + 216|0;
 $infoStr = sp + 240|0;
 $infoLen = sp + 212|0;
 $infoType = sp;
 $1 = sp + 200|0;
 $2 = sp + 192|0;
 $3 = sp + 188|0;
 $returned_size = sp + 180|0;
 $max_workgroup_size = sp + 176|0;
 $max_compute_units = sp + 172|0;
 $4 = sp + 168|0;
 $5 = sp + 164|0;
 $0 = $this;
 $6 = $0;
 $firstGPU = -1;
 $firstCPU = -1;
 __ZL6shrLogPKcz_143(13315,$vararg_buffer);
 (_clGetPlatformIDs(0,(0|0),($uiNumPlatforms|0))|0);
 $7 = HEAP32[$uiNumPlatforms>>2]|0;
 $8 = $7<<2;
 $9 = (_malloc($8)|0);
 $cpPlatforms = $9;
 $10 = HEAP32[$uiNumPlatforms>>2]|0;
 $11 = $cpPlatforms;
 $12 = (_clGetPlatformIDs(($10|0),($11|0),($uiNumPlatforms|0))|0);
 HEAP32[$ciErrNum>>2] = $12;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$1);
 $13 = HEAP32[$uiNumPlatforms>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $13;
 __ZL6shrLogPKcz_143(13440,$vararg_buffer2);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$uiNumPlatforms>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $cpPlatforms;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  (_clGetPlatformInfo(($20|0),2307,1024,($infoStr|0),($infoLen|0))|0);
  $21 = $i;
  HEAP32[$vararg_buffer4>>2] = $21;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $infoStr;
  __ZL6shrLogPKcz_143(13471,$vararg_buffer4);
  $22 = $i;
  $23 = $cpPlatforms;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  (_clGetPlatformInfo(($25|0),2306,1024,($infoStr|0),($infoLen|0))|0);
  $26 = $i;
  HEAP32[$vararg_buffer8>>2] = $26;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $infoStr;
  __ZL6shrLogPKcz_143(13495,$vararg_buffer8);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $uiTargetPlatform = 0;
 $29 = $uiTargetPlatform;
 HEAP32[$vararg_buffer12>>2] = $29;
 __ZL6shrLogPKcz_143(13518,$vararg_buffer12);
 __ZL6shrLogPKcz_143(13538,$vararg_buffer15);
 $30 = $uiTargetPlatform;
 $31 = $cpPlatforms;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_clGetDeviceIDs(($33|0),-1,0,0,(0|0),($uiNumDevices|0))|0);
 HEAP32[$ciErrNum>>2] = $34;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$2);
 $35 = HEAP32[$uiNumDevices>>2]|0;
 $36 = $35<<2;
 $37 = (_malloc($36)|0);
 $38 = ((($6)) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = $uiTargetPlatform;
 $40 = $cpPlatforms;
 $41 = (($40) + ($39<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$uiNumDevices>>2]|0;
 $44 = ((($6)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_clGetDeviceIDs(($42|0),-1,0,($43|0),($45|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $46;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$3);
 $47 = HEAP32[$uiNumDevices>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $47;
 __ZL6shrLogPKcz_143(13558,$vararg_buffer17);
 $i1 = 0;
 while(1) {
  $48 = $i1;
  $49 = HEAP32[$uiNumDevices>>2]|0;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $i1;
  HEAP32[$vararg_buffer20>>2] = $51;
  __ZL6shrLogPKcz_143(13587,$vararg_buffer20);
  $52 = $i1;
  $53 = ((($6)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  (_clGetDeviceInfo(($56|0),4096,8,($infoType|0),($infoLen|0))|0);
  $57 = $infoType;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $59 & 2;
  $64 = ($63|0)!=(0);
  $65 = (0)!=(0);
  $66 = $64 | $65;
  if ($66) {
   __ZL6shrLogPKcz_143(13602,$vararg_buffer23);
   $67 = $firstCPU;
   $68 = ($67|0)<(0);
   if ($68) {
    $69 = $i1;
    $firstCPU = $69;
   }
  }
  $70 = $infoType;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 4)|0;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = $72 & 4;
  $77 = ($76|0)!=(0);
  $78 = (0)!=(0);
  $79 = $77 | $78;
  if ($79) {
   __ZL6shrLogPKcz_143(13608,$vararg_buffer25);
   $80 = $firstGPU;
   $81 = ($80|0)<(0);
   if ($81) {
    $82 = $i1;
    $firstGPU = $82;
   }
  }
  $83 = $i1;
  $84 = ((($6)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($83<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  (_clGetDeviceInfo(($87|0),4140,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer27>>2] = $infoStr;
  __ZL6shrLogPKcz_143(13614,$vararg_buffer27);
  $88 = $i1;
  $89 = ((($6)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($88<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  (_clGetDeviceInfo(($92|0),4139,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer30>>2] = $infoStr;
  __ZL6shrLogPKcz_143(13634,$vararg_buffer30);
  $93 = $i1;
  $94 = ((($6)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($93<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  (_clGetDeviceInfo(($97|0),4143,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer33>>2] = $infoStr;
  __ZL6shrLogPKcz_143(13652,$vararg_buffer33);
  HEAP32[$returned_size>>2] = 0;
  HEAP32[$max_workgroup_size>>2] = 0;
  $98 = $i1;
  $99 = ((($6)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($98<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  (_clGetDeviceInfo(($102|0),4100,4,($max_workgroup_size|0),($returned_size|0))|0);
  $103 = HEAP32[$max_workgroup_size>>2]|0;
  HEAP32[$vararg_buffer36>>2] = $103;
  __ZL6shrLogPKcz_143(13683,$vararg_buffer36);
  HEAP32[$max_compute_units>>2] = 0;
  $104 = $i1;
  $105 = ((($6)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($104<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  (_clGetDeviceInfo(($108|0),4098,4,($max_compute_units|0),($returned_size|0))|0);
  $109 = HEAP32[$max_compute_units>>2]|0;
  HEAP32[$vararg_buffer39>>2] = $109;
  __ZL6shrLogPKcz_143(13709,$vararg_buffer39);
  $110 = $i1;
  $111 = (($110) + 1)|0;
  $i1 = $111;
 }
 __ZL6shrLogPKcz_143(21197,$vararg_buffer42);
 $112 = $firstCPU;
 $113 = ($112|0)>=(0);
 $114 = $firstGPU;
 $115 = ($114|0)>=(0);
 $or$cond = $113 | $115;
 if (!($or$cond)) {
  ___assert_fail((13742|0),(13769|0),135,(13853|0));
  // unreachable;
 }
 $116 = $firstCPU;
 $117 = ($116|0)<(0);
 if ($117) {
  (_printf(13867,$vararg_buffer44)|0);
  _exit(1);
  // unreachable;
 } else {
  $118 = $firstCPU;
  HEAP32[$6>>2] = $118;
  $119 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer46>>2] = $119;
  __ZL6shrLogPKcz_143(13913,$vararg_buffer46);
  $120 = HEAP32[$6>>2]|0;
  $121 = ((($6)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($120<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($6)) + 8|0);
  HEAP32[$125>>2] = $124;
  $126 = ((($6)) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($6)) + 12|0);
  (_clGetDeviceInfo(($127|0),4100,4,($128|0),(0|0))|0);
  __ZL6shrLogPKcz_143(13931,$vararg_buffer49);
  $129 = ((($6)) + 8|0);
  $130 = (_clCreateContext((0|0),1,($129|0),(0|0),(0|0),($ciErrNum|0))|0);
  $131 = ((($6)) + 16|0);
  HEAP32[$131>>2] = $130;
  HEAP32[$4>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$4);
  __ZL6shrLogPKcz_143(13954,$vararg_buffer51);
  $132 = ((($6)) + 16|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($6)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (_clCreateCommandQueue(($133|0),($135|0),0,0,($ciErrNum|0))|0);
  $137 = ((($6)) + 20|0);
  HEAP32[$137>>2] = $136;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$5);
  $138 = $cpPlatforms;
  _free($138);
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz_143($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $r;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $a = 0;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((13336|0),(13343|0),144,(13425|0));
  // unreachable;
 }
}
function __ZN10b2CLDeviceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($this,$kernelName,$workGroupSize) {
 $this = $this|0;
 $kernelName = $kernelName|0;
 $workGroupSize = $workGroupSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $error = sp + 4|0;
 $3 = sp;
 $0 = $this;
 $1 = $kernelName;
 $2 = $workGroupSize;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($4)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (_clGetKernelWorkGroupInfo(($6|0),($11|0),4528,4,($12|0),(0|0))|0);
 HEAP32[$error>>2] = $13;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($error,$3);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice13allocateArrayEjb($this,$size,$print_log) {
 $this = $this|0;
 $size = $size|0;
 $print_log = $print_log|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $result = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $error = sp + 12|0;
 $3 = sp + 4|0;
 $0 = $this;
 $1 = $size;
 $4 = $print_log&1;
 $2 = $4;
 $5 = $0;
 $6 = $2;
 $7 = $6&1;
 if ($7) {
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  __ZL6shrLogPKcz_143(13980,$vararg_buffer);
 }
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (_clCreateBuffer(($10|0),1,0,($11|0),(0|0),($error|0))|0);
 $result = $12;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($error,$3);
 $13 = $result;
 STACKTOP = sp;return ($13|0);
}
function __ZN10b2CLDevice9freeArrayEP7_cl_mem($this,$memObj) {
 $this = $this|0;
 $memObj = $memObj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $1 = $memObj;
 $3 = $1;
 $4 = (_clReleaseMemObject(($3|0))|0);
 HEAP32[$ciErrNum>>2] = $4;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$2);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($this,$hostPtr,$memObj,$vbo,$size) {
 $this = $this|0;
 $hostPtr = $hostPtr|0;
 $memObj = $memObj|0;
 $vbo = $vbo|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $5 = sp;
 $0 = $this;
 $1 = $hostPtr;
 $2 = $memObj;
 $3 = $vbo;
 $4 = $size;
 $6 = $0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($6)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = $4;
  $13 = $1;
  $14 = (_clEnqueueReadBuffer(($10|0),($11|0),1,0,($12|0),($13|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $14;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$5);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((14022|0),(13769|0),286,(14031|0));
  // unreachable;
 }
}
function __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($this,$hostPtr,$memObj,$vbo,$size,$blocking) {
 $this = $this|0;
 $hostPtr = $hostPtr|0;
 $memObj = $memObj|0;
 $vbo = $vbo|0;
 $size = $size|0;
 $blocking = $blocking|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $6 = sp;
 $0 = $this;
 $1 = $hostPtr;
 $2 = $memObj;
 $3 = $vbo;
 $4 = $size;
 $7 = $blocking&1;
 $5 = $7;
 $8 = $0;
 $9 = $3;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($8)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = $5;
  $15 = $14&1;
  $16 = $15 ? 1 : 0;
  $17 = $4;
  $18 = $1;
  $19 = (_clEnqueueReadBuffer(($12|0),($13|0),($16|0),0,($17|0),($18|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $19;
  HEAP32[$6>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$6);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((14022|0),(13769|0),294,(14031|0));
  // unreachable;
 }
}
function __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($this,$memObj,$hostPtr,$offset,$size) {
 $this = $this|0;
 $memObj = $memObj|0;
 $hostPtr = $hostPtr|0;
 $offset = $offset|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $5 = sp;
 $0 = $this;
 $1 = $memObj;
 $2 = $hostPtr;
 $3 = $offset;
 $4 = $size;
 $6 = $0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $4;
 $11 = $2;
 $12 = $3;
 $13 = (_clEnqueueWriteBuffer(($8|0),($9|0),1,0,($10|0),($11|0),($12|0),(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $13;
 HEAP32[$5>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$5);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($this,$memObj,$hostPtr,$offset,$size,$blocking) {
 $this = $this|0;
 $memObj = $memObj|0;
 $hostPtr = $hostPtr|0;
 $offset = $offset|0;
 $size = $size|0;
 $blocking = $blocking|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $6 = sp;
 $0 = $this;
 $1 = $memObj;
 $2 = $hostPtr;
 $3 = $offset;
 $4 = $size;
 $7 = $blocking&1;
 $5 = $7;
 $8 = $0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $5;
 $13 = $12&1;
 $14 = $13 ? 1 : 0;
 $15 = $3;
 $16 = $4;
 $17 = $2;
 $18 = (_clEnqueueWriteBuffer(($10|0),($11|0),($14|0),($15|0),($16|0),($17|0),0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $18;
 HEAP32[$6>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($ciErrNum,$6);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice18finishCommandQueueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $error = sp + 4|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_clFinish(($4|0))|0);
 HEAP32[$error>>2] = $5;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0__144($error,$1);
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $buffer = 0, $err = 0, $len = 0, $narrowPhaseKernelSource = 0, $narrowPhaseKernelSourceLen = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 204912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer30 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer18 = sp + 32|0;
 $vararg_buffer16 = sp + 24|0;
 $vararg_buffer14 = sp + 16|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 104|0;
 $narrowPhaseKernelSource = sp + 100|0;
 $narrowPhaseKernelSourceLen = sp + 96|0;
 $len = sp + 92|0;
 $buffer = sp + 112|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[11781]|0;
 $3 = $2&1;
 if (!($3)) {
  $81 = (__ZN14b2CLCommonData8instanceEv()|0);
  $82 = ((($81)) + 44|0);
  HEAP32[$82>>2] = 0;
  $83 = ((($1)) + 40|0);
  HEAP32[$83>>2] = 0;
  $84 = ((($1)) + 40|0);
  $85 = ((($84)) + 4|0);
  HEAP32[$85>>2] = 0;
  STACKTOP = sp;return;
 }
 (_printf(14051,$vararg_buffer)|0);
 HEAP32[$narrowPhaseKernelSource>>2] = 0;
 HEAP32[$narrowPhaseKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz_203(14084,$vararg_buffer12);
 $4 = (__ZL15shrFindFilePathPKcPv_205(14115,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj_207($4,19137,$narrowPhaseKernelSourceLen)|0);
 HEAP32[$narrowPhaseKernelSource>>2] = $5;
 $6 = HEAP32[$narrowPhaseKernelSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(14150,$vararg_buffer14);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($narrowPhaseKernelSource|0),(0|0),($err|0))|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf(19218,$vararg_buffer16)|0);
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_clBuildProgram(($13|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $14;
 $15 = HEAP32[$err>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  (_printf(19260,$vararg_buffer18)|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (__ZN10b2CLDevice8instanceEv()|0);
  $19 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($18)|0);
  (_clGetProgramBuildInfo(($17|0),($19|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer20>>2] = $buffer;
  (_printf(19304,$vararg_buffer20)|0);
  _exit(1);
  // unreachable;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (_clCreateKernel(($20|0),(14219|0),($err|0))|0);
 $22 = ((($1)) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 $26 = HEAP32[$err>>2]|0;
 $27 = ($26|0)!=(0);
 $or$cond = $25 | $27;
 if ($or$cond) {
  (_printf(16762,$vararg_buffer22)|0);
  _exit(1);
  // unreachable;
 }
 $28 = HEAP32[$1>>2]|0;
 $29 = (_clCreateKernel(($28|0),(14239|0),($err|0))|0);
 $30 = ((($1)) + 8|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 $34 = HEAP32[$err>>2]|0;
 $35 = ($34|0)!=(0);
 $or$cond3 = $33 | $35;
 if ($or$cond3) {
  (_printf(16762,$vararg_buffer24)|0);
  _exit(1);
  // unreachable;
 }
 $36 = HEAP32[$1>>2]|0;
 $37 = (_clCreateKernel(($36|0),(14258|0),($err|0))|0);
 $38 = ((($1)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($1)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 $42 = HEAP32[$err>>2]|0;
 $43 = ($42|0)!=(0);
 $or$cond5 = $41 | $43;
 if ($or$cond5) {
  (_printf(16762,$vararg_buffer26)|0);
  _exit(1);
  // unreachable;
 }
 $44 = HEAP32[$1>>2]|0;
 $45 = (_clCreateKernel(($44|0),(14286|0),($err|0))|0);
 $46 = ((($1)) + 16|0);
 HEAP32[$46>>2] = $45;
 $47 = ((($1)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 $50 = HEAP32[$err>>2]|0;
 $51 = ($50|0)!=(0);
 $or$cond7 = $49 | $51;
 if ($or$cond7) {
  (_printf(16762,$vararg_buffer28)|0);
  _exit(1);
  // unreachable;
 }
 $52 = HEAP32[$1>>2]|0;
 $53 = (_clCreateKernel(($52|0),(14311|0),($err|0))|0);
 $54 = ((($1)) + 20|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($1)) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0|0);
 $58 = HEAP32[$err>>2]|0;
 $59 = ($58|0)!=(0);
 $or$cond9 = $57 | $59;
 if ($or$cond9) {
  (_printf(16762,$vararg_buffer30)|0);
  _exit(1);
  // unreachable;
 }
 $60 = (__ZN10b2CLDevice8instanceEv()|0);
 $61 = ((($1)) + 4|0);
 $62 = ((($1)) + 28|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($60,$61,$62);
 $63 = HEAP32[$1>>2]|0;
 $64 = (_clCreateKernel(($63|0),(14337|0),($err|0))|0);
 $65 = ((($1)) + 24|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($1)) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 $69 = HEAP32[$err>>2]|0;
 $70 = ($69|0)!=(0);
 $or$cond11 = $68 | $70;
 if ($or$cond11) {
  (_printf(16762,$vararg_buffer32)|0);
  _exit(1);
  // unreachable;
 }
 $71 = ((($1)) + 36|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($1)) + 48|0);
 HEAP32[$72>>2] = 0;
 $73 = (__ZN14b2CLCommonData8instanceEv()|0);
 $74 = ((($73)) + 1156|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($1)) + 56|0);
 HEAP32[$75>>2] = 0;
 $76 = ((($1)) + 52|0);
 HEAP32[$76>>2] = 0;
 $77 = (__ZN14b2CLCommonData8instanceEv()|0);
 $78 = ((($77)) + 52|0);
 HEAP32[$78>>2] = 0;
 $79 = (__ZN14b2CLCommonData8instanceEv()|0);
 $80 = ((($79)) + 48|0);
 HEAP32[$80>>2] = 0;
 (__ZN8b2CLScan8instanceEv()|0);
 $81 = (__ZN14b2CLCommonData8instanceEv()|0);
 $82 = ((($81)) + 44|0);
 HEAP32[$82>>2] = 0;
 $83 = ((($1)) + 40|0);
 HEAP32[$83>>2] = 0;
 $84 = ((($1)) + 40|0);
 $85 = ((($84)) + 4|0);
 HEAP32[$85>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL6shrLogPKcz_203($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv_205($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj_207($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30432]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30432)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 32504;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(32504|0),(___dso_handle|0))|0);
  }
 }
 $76 = 32504;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 38078;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32504|0),(38078|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32504|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 32504;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 32504;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN15b2CLNarrowPhaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhase17InitializeGPUDataEP7b2WorldP9b2ContactPi($this,$m_pWorld,$m_contactList,$m_pContactCounts) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $m_contactList = $m_contactList|0;
 $m_pContactCounts = $m_pContactCounts|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $contactCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $m_contactList;
 $3 = $m_pContactCounts;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 102876|0);
 $7 = ((($6)) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $contactCount = $8;
 $9 = ((($4)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $contactCount;
 $12 = ($10|0)<($11|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 103096|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = (__ZN14b2CLCommonData8instanceEv()|0);
   $18 = ((($17)) + 1156|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = (__ZN14b2CLCommonData8instanceEv()|0);
    $22 = ((($21)) + 1156|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     __ZdaPv($23);
    }
   }
   $25 = $contactCount;
   $$arith2 = ($25*72)|0;
   $$overflow3 = ($25>>>0)>(59652323);
   $26 = $$overflow3 ? -1 : $$arith2;
   $27 = (__Znaj($26)|0);
   $28 = (__ZN14b2CLCommonData8instanceEv()|0);
   $29 = ((($28)) + 1156|0);
   HEAP32[$29>>2] = $27;
   $30 = (__ZN14b2CLCommonData8instanceEv()|0);
   $31 = ((($30)) + 1172|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = (__ZN14b2CLCommonData8instanceEv()|0);
    $35 = ((($34)) + 1172|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     __ZdaPv($36);
    }
   }
   $38 = $contactCount;
   $39 = $38<<2;
   $$arith = $39<<2;
   $$overflow = ($39>>>0)>(1073741823);
   $40 = $$overflow ? -1 : $$arith;
   $41 = (__Znaj($40)|0);
   $42 = (__ZN14b2CLCommonData8instanceEv()|0);
   $43 = ((($42)) + 1172|0);
   HEAP32[$43>>2] = $41;
  }
  $44 = (__ZN14b2CLCommonData8instanceEv()|0);
  $45 = ((($44)) + 48|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = (__ZN10b2CLDevice8instanceEv()|0);
   $49 = (__ZN14b2CLCommonData8instanceEv()|0);
   $50 = ((($49)) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($48,$51);
  }
  $52 = (__ZN10b2CLDevice8instanceEv()|0);
  $53 = $contactCount;
  $54 = $53<<2;
  $55 = (__ZN10b2CLDevice13allocateArrayEjb($52,$54,0)|0);
  $56 = (__ZN14b2CLCommonData8instanceEv()|0);
  $57 = ((($56)) + 48|0);
  HEAP32[$57>>2] = $55;
  $58 = (__ZN14b2CLCommonData8instanceEv()|0);
  $59 = ((($58)) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = (__ZN10b2CLDevice8instanceEv()|0);
   $63 = (__ZN14b2CLCommonData8instanceEv()|0);
   $64 = ((($63)) + 52|0);
   $65 = HEAP32[$64>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($62,$65);
  }
  $66 = (__ZN10b2CLDevice8instanceEv()|0);
  $67 = $contactCount;
  $68 = $67<<2;
  $69 = (__ZN10b2CLDevice13allocateArrayEjb($66,$68,0)|0);
  $70 = (__ZN14b2CLCommonData8instanceEv()|0);
  $71 = ((($70)) + 52|0);
  HEAP32[$71>>2] = $69;
  $72 = $contactCount;
  $73 = ((($4)) + 36|0);
  HEAP32[$73>>2] = $72;
 }
 $74 = (__ZN14b2CLCommonData8instanceEv()|0);
 $75 = ((($74)) + 44|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (1 - ($76))|0;
 $78 = (__ZN14b2CLCommonData8instanceEv()|0);
 $79 = ((($78)) + 44|0);
 HEAP32[$79>>2] = $77;
 $80 = (__ZN14b2CLCommonData8instanceEv()|0);
 $81 = ((($80)) + 44|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($4)) + 40|0);
 $84 = (($83) + ($82<<2)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $contactCount;
 $87 = ($85|0)<($86|0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = (__ZN14b2CLCommonData8instanceEv()|0);
 $89 = ((($88)) + 44|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (__ZN14b2CLCommonData8instanceEv()|0);
 $92 = ((($91)) + 36|0);
 $93 = (($92) + ($90<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0|0);
 if ($95) {
  $96 = (__ZN10b2CLDevice8instanceEv()|0);
  $97 = (__ZN14b2CLCommonData8instanceEv()|0);
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (__ZN14b2CLCommonData8instanceEv()|0);
  $101 = ((($100)) + 36|0);
  $102 = (($101) + ($99<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($96,$103);
 }
 $104 = (__ZN10b2CLDevice8instanceEv()|0);
 $105 = $contactCount;
 $106 = ($105*72)|0;
 $107 = (__ZN10b2CLDevice13allocateArrayEjb($104,$106,0)|0);
 $108 = (__ZN14b2CLCommonData8instanceEv()|0);
 $109 = ((($108)) + 44|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (__ZN14b2CLCommonData8instanceEv()|0);
 $112 = ((($111)) + 36|0);
 $113 = (($112) + ($110<<2)|0);
 HEAP32[$113>>2] = $107;
 $114 = $contactCount;
 $115 = (__ZN14b2CLCommonData8instanceEv()|0);
 $116 = ((($115)) + 44|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($4)) + 40|0);
 $119 = (($118) + ($117<<2)|0);
 HEAP32[$119>>2] = $114;
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhase18UpdateContactPairsEiPii($this,$contactNum,$pContactNums,$maxContactNum) {
 $this = $this|0;
 $contactNum = $contactNum|0;
 $pContactNums = $pContactNums|0;
 $maxContactNum = $maxContactNum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0, $collideKernel = 0, $contactType = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $contactNum;
 $2 = $pContactNums;
 HEAP32[$3>>2] = $maxContactNum;
 $4 = $0;
 $contactType = 0;
 L1: while(1) {
  $5 = $contactType;
  $6 = ($5|0)<(5);
  if (!($6)) {
   label = 18;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $a = 0;
  }
  $10 = $contactType;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(0);
  if ($14) {
   $a1 = 0;
   $15 = $contactType;
   switch ($15|0) {
   case 0:  {
    $16 = ((($4)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $collideKernel = $17;
    break;
   }
   case 1:  {
    $18 = ((($4)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $collideKernel = $19;
    break;
   }
   case 2:  {
    $20 = ((($4)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $collideKernel = $21;
    break;
   }
   case 3:  {
    $22 = ((($4)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $collideKernel = $23;
    break;
   }
   case 4:  {
    $24 = ((($4)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $collideKernel = $25;
    break;
   }
   default: {
    label = 12;
    break L1;
   }
   }
   $err = 0;
   $27 = $collideKernel;
   $28 = $a1;
   $29 = (($28) + 1)|0;
   $a1 = $29;
   $30 = (__ZN14b2CLCommonData8instanceEv()|0);
   $31 = ((($30)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (__ZN14b2CLCommonData8instanceEv()|0);
   $34 = ((($33)) + 36|0);
   $35 = (($34) + ($32<<2)|0);
   $36 = (_clSetKernelArg(($27|0),($28|0),4,($35|0))|0);
   $37 = $err;
   $38 = $37 | $36;
   $err = $38;
   $39 = $collideKernel;
   $40 = $a1;
   $41 = (($40) + 1)|0;
   $a1 = $41;
   $42 = (__ZN14b2CLCommonData8instanceEv()|0);
   $43 = ((($42)) + 48|0);
   $44 = (_clSetKernelArg(($39|0),($40|0),4,($43|0))|0);
   $45 = $err;
   $46 = $45 | $44;
   $err = $46;
   $47 = $collideKernel;
   $48 = $a1;
   $49 = (($48) + 1)|0;
   $a1 = $49;
   $50 = (__ZN14b2CLCommonData8instanceEv()|0);
   $51 = ((($50)) + 56|0);
   $52 = (_clSetKernelArg(($47|0),($48|0),4,($51|0))|0);
   $53 = $err;
   $54 = $53 | $52;
   $err = $54;
   $55 = $collideKernel;
   $56 = $a1;
   $57 = (($56) + 1)|0;
   $a1 = $57;
   $58 = (__ZN14b2CLCommonData8instanceEv()|0);
   $59 = ((($58)) + 64|0);
   $60 = (_clSetKernelArg(($55|0),($56|0),4,($59|0))|0);
   $61 = $err;
   $62 = $61 | $60;
   $err = $62;
   $63 = $collideKernel;
   $64 = $a1;
   $65 = (($64) + 1)|0;
   $a1 = $65;
   $66 = (__ZN14b2CLCommonData8instanceEv()|0);
   $67 = ((($66)) + 80|0);
   $68 = (_clSetKernelArg(($63|0),($64|0),4,($67|0))|0);
   $69 = $err;
   $70 = $69 | $68;
   $err = $70;
   $71 = $collideKernel;
   $72 = $a1;
   $73 = (($72) + 1)|0;
   $a1 = $73;
   $74 = (__ZN14b2CLCommonData8instanceEv()|0);
   $75 = ((($74)) + 84|0);
   $76 = (_clSetKernelArg(($71|0),($72|0),4,($75|0))|0);
   $77 = $err;
   $78 = $77 | $76;
   $err = $78;
   $79 = $collideKernel;
   $80 = $a1;
   $81 = (($80) + 1)|0;
   $a1 = $81;
   $82 = (_clSetKernelArg(($79|0),($80|0),4,($3|0))|0);
   $83 = $err;
   $84 = $83 | $82;
   $err = $84;
   $85 = $collideKernel;
   $86 = $a1;
   $87 = (($86) + 1)|0;
   $a1 = $87;
   $88 = $2;
   $89 = $contactType;
   $90 = (($88) + ($89<<2)|0);
   $91 = (_clSetKernelArg(($85|0),($86|0),4,($90|0))|0);
   $92 = $err;
   $93 = $92 | $91;
   $err = $93;
   $94 = $err;
   $95 = ($94|0)!=(0);
   if ($95) {
    label = 14;
    break;
   }
   $98 = $contactType;
   $99 = $2;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($4)) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + ($103))|0;
   $105 = (($104) - 1)|0;
   $106 = ((($4)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($105>>>0) / ($107>>>0))&-1;
   $group_num = $108;
   $109 = $group_num;
   $110 = ((($4)) + 28|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = Math_imul($109, $111)|0;
   HEAP32[$global>>2] = $112;
   $err = 0;
   $113 = (__ZN10b2CLDevice8instanceEv()|0);
   $114 = (__ZNK10b2CLDevice15GetCommandQueueEv($113)|0);
   $115 = $collideKernel;
   $116 = ((($4)) + 28|0);
   $117 = (_clEnqueueNDRangeKernel(($114|0),($115|0),1,(0|0),($global|0),($116|0),0,(0|0),(0|0))|0);
   $118 = $err;
   $119 = $118 | $117;
   $err = $119;
   $120 = $err;
   $121 = ($120|0)!=(0);
   if ($121) {
    label = 16;
    break;
   }
  }
  $122 = $contactType;
  $123 = (($122) + 1)|0;
  $contactType = $123;
 }
 if ((label|0) == 12) {
  $26 = $contactType;
  HEAP32[$vararg_buffer>>2] = $26;
  (_printf(14362,$vararg_buffer)|0);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $96 = ((($4)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $97;
  (_printf(19385,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  (_printf(14400,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2CLNarrowPhase19CompactContactPairsEi($this,$contactNum) {
 $this = $this|0;
 $contactNum = $contactNum|0;
 var $$arith = 0, $$arith4 = 0, $$overflow = 0, $$overflow5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $i = 0, $manifoldBinaryBitList = 0, $scanResult = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 24|0;
 $0 = $this;
 $1 = $contactNum;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)==(1);
 if ($4) {
  $a = 0;
  $err = 0;
  $5 = ((($2)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $a;
  $8 = (($7) + 1)|0;
  $a = $8;
  $9 = (__ZN14b2CLCommonData8instanceEv()|0);
  $10 = ((($9)) + 48|0);
  $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
  $12 = $err;
  $13 = $12 | $11;
  $err = $13;
  $14 = ((($2)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $a;
  $17 = (($16) + 1)|0;
  $a = $17;
  $18 = (__ZN14b2CLCommonData8instanceEv()|0);
  $19 = ((($18)) + 52|0);
  $20 = (_clSetKernelArg(($15|0),($16|0),4,($19|0))|0);
  $21 = $err;
  $22 = $21 | $20;
  $err = $22;
  $23 = (__ZN8b2CLScan8instanceEv()|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   $27 = (__ZN10b2CLDevice8instanceEv()|0);
   $28 = (__ZN10b2CLDevice13allocateArrayEjb($27,4,0)|0);
   $29 = (__ZN8b2CLScan8instanceEv()|0);
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $28;
  }
  $31 = ((($2)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $a;
  $34 = (($33) + 1)|0;
  $a = $34;
  $35 = (__ZN8b2CLScan8instanceEv()|0);
  $36 = ((($35)) + 4|0);
  $37 = (_clSetKernelArg(($32|0),($33|0),4,($36|0))|0);
  $38 = $err;
  $39 = $38 | $37;
  $err = $39;
  $40 = $err;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = ((($2)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$vararg_buffer>>2] = $43;
   (_printf(19385,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
  HEAP32[$global>>2] = 1;
  $err = 0;
  $44 = (__ZN10b2CLDevice8instanceEv()|0);
  $45 = (__ZNK10b2CLDevice15GetCommandQueueEv($44)|0);
  $46 = ((($2)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_clEnqueueNDRangeKernel(($45|0),($47|0),1,(0|0),($global|0),(0|0),0,(0|0),(0|0))|0);
  $49 = $err;
  $50 = $49 | $48;
  $err = $50;
  $51 = $err;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   STACKTOP = sp;return;
  }
  (_printf(14450,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $53 = $1;
 $$arith4 = $53<<2;
 $$overflow5 = ($53>>>0)>(1073741823);
 $54 = $$overflow5 ? -1 : $$arith4;
 $55 = (__Znaj($54)|0);
 $manifoldBinaryBitList = $55;
 $56 = $1;
 $$arith = $56<<2;
 $$overflow = ($56>>>0)>(1073741823);
 $57 = $$overflow ? -1 : $$arith;
 $58 = (__Znaj($57)|0);
 $scanResult = $58;
 $59 = (__ZN10b2CLDevice8instanceEv()|0);
 $60 = $manifoldBinaryBitList;
 $61 = (__ZN14b2CLCommonData8instanceEv()|0);
 $62 = ((($61)) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $1;
 $65 = $64<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($59,$60,$63,0,$65,1);
 $66 = $scanResult;
 HEAP32[$66>>2] = 0;
 $i = 1;
 while(1) {
  $67 = $i;
  $68 = $1;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $i;
  $71 = (($70) - 1)|0;
  $72 = $scanResult;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = (($75) - 1)|0;
  $77 = $manifoldBinaryBitList;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($74) + ($79))|0;
  $81 = $i;
  $82 = $scanResult;
  $83 = (($82) + ($81<<2)|0);
  HEAP32[$83>>2] = $80;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = (__ZN8b2CLScan8instanceEv()|0);
 $87 = (__ZN8b2CLScan20GetElementsAllocatedEv($86)|0);
 $88 = $1;
 $89 = ($87|0)<($88|0);
 if ($89) {
  $90 = (__ZN8b2CLScan8instanceEv()|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)!=(0|0);
  if ($92) {
   $93 = (__ZN10b2CLDevice8instanceEv()|0);
   $94 = (__ZN8b2CLScan8instanceEv()|0);
   $95 = HEAP32[$94>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($93,$95);
  }
  $96 = (__ZN10b2CLDevice8instanceEv()|0);
  $97 = $1;
  $98 = $97<<2;
  $99 = (__ZN10b2CLDevice13allocateArrayEjb($96,$98,0)|0);
  $100 = (__ZN8b2CLScan8instanceEv()|0);
  HEAP32[$100>>2] = $99;
 }
 $101 = (__ZN10b2CLDevice8instanceEv()|0);
 $102 = (__ZN8b2CLScan8instanceEv()|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $scanResult;
 $105 = $1;
 $106 = $105<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($101,$103,$104,0,$106,1);
 $107 = $manifoldBinaryBitList;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  __ZdaPv($107);
 }
 $109 = $scanResult;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  __ZdaPv($109);
 }
 $111 = (__ZN8b2CLScan8instanceEv()|0);
 $112 = (__ZN14b2CLCommonData8instanceEv()|0);
 $113 = ((($112)) + 52|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (__ZN14b2CLCommonData8instanceEv()|0);
 $116 = ((($115)) + 48|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (__ZN8b2CLScan8instanceEv()|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $1;
 (__ZN8b2CLScan22ParallelCompactIndicesEP7_cl_memS1_S1_iS1_($111,$114,$117,$119,$120,0)|0);
 STACKTOP = sp;return;
}
function __ZN8b2CLScan20GetElementsAllocatedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15b2CLNarrowPhase26ReadbackGPUDataForListenerEP7b2WorldPP9b2ContactP17b2ContactListenerPiS7_($this,$m_pWorld,$m_contactList,$listener,$enableBitArray,$temp) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $m_contactList = $m_contactList|0;
 $listener = $listener|0;
 $enableBitArray = $enableBitArray|0;
 $temp = $temp|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bFoundSameContact = 0, $bodyA = 0, $bodyB = 0, $c = 0, $c1 = 0, $edge = 0;
 var $fA = 0, $fB = 0, $fixtureA = 0, $fixtureB = 0, $fixtureIndexA = 0, $fixtureIndexB = 0, $globalIndex = 0, $globalIndices = 0, $i = 0, $iA = 0, $iB = 0, $indexA = 0, $indexB = 0, $k = 0, $k2 = 0, $manifoldBinaryBitList = 0, $manifoldListData = 0, $oldManifold = 0, $pc = 0, $totalContactCount = 0;
 var $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $oldManifold = sp + 96|0;
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $m_contactList;
 $3 = $listener;
 $4 = $enableBitArray;
 $5 = $temp;
 $6 = $1;
 $7 = ((($6)) + 102876|0);
 $8 = ((($7)) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = ((($11)) + 102876|0);
 $13 = ((($12)) + 108|0);
 $14 = HEAP32[$13>>2]|0;
 $totalContactCount = $14;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $pc = $16;
 while(1) {
  $17 = $pc;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $pc;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 | 64;
  HEAP32[$20>>2] = $22;
  $23 = $pc;
  $24 = (__ZN9b2Contact7GetNextEv($23)|0);
  $pc = $24;
 }
 __ZN10b2ManifoldC2Ev($oldManifold);
 $25 = $totalContactCount;
 $26 = ($25|0)>(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ((($27)) + 103096|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 4;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $4;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = $totalContactCount;
    $$arith = $34<<2;
    $$overflow = ($34>>>0)>(1073741823);
    $35 = $$overflow ? -1 : $$arith;
    $36 = (__Znaj($35)|0);
    $manifoldBinaryBitList = $36;
    $37 = (__ZN10b2CLDevice8instanceEv()|0);
    $38 = $manifoldBinaryBitList;
    $39 = (__ZN14b2CLCommonData8instanceEv()|0);
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $totalContactCount;
    $43 = $42<<2;
    __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($37,$38,$41,0,$43,1);
    break;
   } else {
    ___assert_fail((14598|0),(14509|0),845,(14613|0));
    // unreachable;
   }
  }
 } while(0);
 $44 = (__ZN14b2CLCommonData8instanceEv()|0);
 $45 = ((($44)) + 1156|0);
 $46 = HEAP32[$45>>2]|0;
 $manifoldListData = $46;
 $47 = (__ZN10b2CLDevice8instanceEv()|0);
 $48 = $manifoldListData;
 $49 = (__ZN14b2CLCommonData8instanceEv()|0);
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (__ZN14b2CLCommonData8instanceEv()|0);
 $53 = ((($52)) + 36|0);
 $54 = (($53) + ($51<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $totalContactCount;
 $57 = ($56*72)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($47,$48,$55,0,$57);
 $58 = (__ZN14b2CLCommonData8instanceEv()|0);
 $59 = ((($58)) + 1172|0);
 $60 = HEAP32[$59>>2]|0;
 $globalIndices = $60;
 $61 = (__ZN10b2CLDevice8instanceEv()|0);
 $62 = $globalIndices;
 $63 = (__ZN14b2CLCommonData8instanceEv()|0);
 $64 = ((($63)) + 80|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $totalContactCount;
 $67 = $66<<2;
 $68 = $67<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($61,$62,$65,0,$68,1);
 $i = 0;
 L17: while(1) {
  $69 = $i;
  $70 = $totalContactCount;
  $71 = ($69|0)<($70|0);
  $72 = $1;
  $73 = ((($72)) + 103096|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74 & 4;
  $76 = ($75|0)!=(0);
  if (!($71)) {
   label = 56;
   break;
  }
  if ($76) {
   $77 = $i;
   $78 = $manifoldBinaryBitList;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $i;
   $82 = $4;
   $83 = (($82) + ($81<<2)|0);
   HEAP32[$83>>2] = $80;
  }
  $84 = $i;
  $globalIndex = $84;
  $85 = $globalIndex;
  $86 = $manifoldListData;
  $87 = (($86) + (($85*72)|0)|0);
  $88 = ((($87)) + 68|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(0);
  do {
   if (!($90)) {
    $91 = $globalIndex;
    $92 = $91<<2;
    $93 = $globalIndices;
    $94 = (($93) + ($92<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $fixtureIndexA = $95;
    $96 = $globalIndex;
    $97 = $96<<2;
    $98 = (($97) + 1)|0;
    $99 = $globalIndices;
    $100 = (($99) + ($98<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $fixtureIndexB = $101;
    $102 = $fixtureIndexA;
    $103 = (__ZN14b2CLCommonData8instanceEv()|0);
    $104 = ((($103)) + 1160|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $fixtureA = $107;
    $108 = $fixtureIndexB;
    $109 = (__ZN14b2CLCommonData8instanceEv()|0);
    $110 = ((($109)) + 1160|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($108<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $fixtureB = $113;
    $114 = $fixtureIndexA;
    $115 = (__ZN14b2CLCommonData8instanceEv()|0);
    $116 = ((($115)) + 1164|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + ($114<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $indexA = $119;
    $120 = $fixtureIndexB;
    $121 = (__ZN14b2CLCommonData8instanceEv()|0);
    $122 = ((($121)) + 1164|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($120<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $indexB = $125;
    $126 = $fixtureA;
    $127 = (__ZN9b2Fixture7GetBodyEv($126)|0);
    $bodyA = $127;
    $128 = $fixtureB;
    $129 = (__ZN9b2Fixture7GetBodyEv($128)|0);
    $bodyB = $129;
    $130 = $bodyA;
    $131 = $bodyB;
    $132 = ($130|0)==($131|0);
    if ($132) {
     label = 16;
     break L17;
    }
    $133 = $bodyB;
    $134 = (__ZN6b2Body14GetContactListEv($133)|0);
    $edge = $134;
    $bFoundSameContact = 0;
    while(1) {
     $135 = $edge;
     $136 = ($135|0)!=(0|0);
     if (!($136)) {
      break;
     }
     $137 = $edge;
     $138 = HEAP32[$137>>2]|0;
     $139 = $bodyA;
     $140 = ($138|0)==($139|0);
     if ($140) {
      $141 = $edge;
      $142 = ((($141)) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (__ZN9b2Contact11GetFixtureAEv($143)|0);
      $fA = $144;
      $145 = $edge;
      $146 = ((($145)) + 4|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (__ZN9b2Contact11GetFixtureBEv($147)|0);
      $fB = $148;
      $149 = $edge;
      $150 = ((($149)) + 4|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (__ZNK9b2Contact14GetChildIndexAEv($151)|0);
      $iA = $152;
      $153 = $edge;
      $154 = ((($153)) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (__ZNK9b2Contact14GetChildIndexBEv($155)|0);
      $iB = $156;
      $157 = $fA;
      $158 = $fixtureA;
      $159 = ($157|0)==($158|0);
      if ($159) {
       $160 = $fB;
       $161 = $fixtureB;
       $162 = ($160|0)==($161|0);
       if ($162) {
        $163 = $iA;
        $164 = $indexA;
        $165 = ($163|0)==($164|0);
        if ($165) {
         $166 = $iB;
         $167 = $indexB;
         $168 = ($166|0)==($167|0);
         if ($168) {
          label = 24;
          break;
         }
        }
       }
      }
      $169 = $fA;
      $170 = $fixtureB;
      $171 = ($169|0)==($170|0);
      if ($171) {
       $172 = $fB;
       $173 = $fixtureA;
       $174 = ($172|0)==($173|0);
       if ($174) {
        $175 = $iA;
        $176 = $indexB;
        $177 = ($175|0)==($176|0);
        if ($177) {
         $178 = $iB;
         $179 = $indexA;
         $180 = ($178|0)==($179|0);
         if ($180) {
          label = 29;
          break;
         }
        }
       }
      }
     }
     $181 = $edge;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $edge = $183;
    }
    if ((label|0) == 24) {
     label = 0;
     $bFoundSameContact = 1;
    }
    else if ((label|0) == 29) {
     label = 0;
     $bFoundSameContact = 1;
    }
    $184 = $bFoundSameContact;
    $185 = $184&1;
    if ($185) {
     $186 = $edge;
     $187 = ((($186)) + 4|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ((($188)) + 64|0);
     dest=$oldManifold; src=$189; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $190 = $edge;
     $191 = ((($190)) + 4|0);
     $192 = HEAP32[$191>>2]|0;
     $c = $192;
     $193 = $i;
     $194 = $manifoldListData;
     $195 = (($194) + (($193*72)|0)|0);
     $196 = ((($195)) + 68|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $c;
     $199 = ((($198)) + 64|0);
     $200 = ((($199)) + 60|0);
     HEAP32[$200>>2] = $197;
     $201 = $i;
     $202 = $manifoldListData;
     $203 = (($202) + (($201*72)|0)|0);
     $204 = ((($203)) + 8|0);
     $205 = +HEAPF32[$204>>2];
     $206 = $c;
     $207 = ((($206)) + 64|0);
     $208 = ((($207)) + 48|0);
     HEAPF32[$208>>2] = $205;
     $209 = $i;
     $210 = $manifoldListData;
     $211 = (($210) + (($209*72)|0)|0);
     $212 = ((($211)) + 8|0);
     $213 = ((($212)) + 4|0);
     $214 = +HEAPF32[$213>>2];
     $215 = $c;
     $216 = ((($215)) + 64|0);
     $217 = ((($216)) + 48|0);
     $218 = ((($217)) + 4|0);
     HEAPF32[$218>>2] = $214;
     $219 = $i;
     $220 = $manifoldListData;
     $221 = (($220) + (($219*72)|0)|0);
     $222 = +HEAPF32[$221>>2];
     $223 = $c;
     $224 = ((($223)) + 64|0);
     $225 = ((($224)) + 40|0);
     HEAPF32[$225>>2] = $222;
     $226 = $i;
     $227 = $manifoldListData;
     $228 = (($227) + (($226*72)|0)|0);
     $229 = ((($228)) + 4|0);
     $230 = +HEAPF32[$229>>2];
     $231 = $c;
     $232 = ((($231)) + 64|0);
     $233 = ((($232)) + 40|0);
     $234 = ((($233)) + 4|0);
     HEAPF32[$234>>2] = $230;
     $235 = $i;
     $236 = $manifoldListData;
     $237 = (($236) + (($235*72)|0)|0);
     $238 = ((($237)) + 64|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $c;
     $241 = ((($240)) + 64|0);
     $242 = ((($241)) + 56|0);
     HEAP32[$242>>2] = $239;
     $k = 0;
     while(1) {
      $243 = $k;
      $244 = $c;
      $245 = ((($244)) + 64|0);
      $246 = ((($245)) + 60|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = ($243|0)<($247|0);
      if (!($248)) {
       break;
      }
      $249 = $k;
      $250 = $i;
      $251 = $manifoldListData;
      $252 = (($251) + (($250*72)|0)|0);
      $253 = ((($252)) + 16|0);
      $254 = (($253) + (($249*24)|0)|0);
      $255 = ((($254)) + 16|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $k;
      $258 = $c;
      $259 = ((($258)) + 64|0);
      $260 = (($259) + (($257*20)|0)|0);
      $261 = ((($260)) + 16|0);
      HEAP32[$261>>2] = $256;
      $262 = $k;
      $263 = $i;
      $264 = $manifoldListData;
      $265 = (($264) + (($263*72)|0)|0);
      $266 = ((($265)) + 16|0);
      $267 = (($266) + (($262*24)|0)|0);
      $268 = +HEAPF32[$267>>2];
      $269 = $k;
      $270 = $c;
      $271 = ((($270)) + 64|0);
      $272 = (($271) + (($269*20)|0)|0);
      HEAPF32[$272>>2] = $268;
      $273 = $k;
      $274 = $i;
      $275 = $manifoldListData;
      $276 = (($275) + (($274*72)|0)|0);
      $277 = ((($276)) + 16|0);
      $278 = (($277) + (($273*24)|0)|0);
      $279 = ((($278)) + 4|0);
      $280 = +HEAPF32[$279>>2];
      $281 = $k;
      $282 = $c;
      $283 = ((($282)) + 64|0);
      $284 = (($283) + (($281*20)|0)|0);
      $285 = ((($284)) + 4|0);
      HEAPF32[$285>>2] = $280;
      $286 = $k;
      $287 = $i;
      $288 = $manifoldListData;
      $289 = (($288) + (($287*72)|0)|0);
      $290 = ((($289)) + 16|0);
      $291 = (($290) + (($286*24)|0)|0);
      $292 = ((($291)) + 8|0);
      $293 = +HEAPF32[$292>>2];
      $294 = $k;
      $295 = $c;
      $296 = ((($295)) + 64|0);
      $297 = (($296) + (($294*20)|0)|0);
      $298 = ((($297)) + 8|0);
      HEAPF32[$298>>2] = $293;
      $299 = $k;
      $300 = $i;
      $301 = $manifoldListData;
      $302 = (($301) + (($300*72)|0)|0);
      $303 = ((($302)) + 16|0);
      $304 = (($303) + (($299*24)|0)|0);
      $305 = ((($304)) + 12|0);
      $306 = +HEAPF32[$305>>2];
      $307 = $k;
      $308 = $c;
      $309 = ((($308)) + 64|0);
      $310 = (($309) + (($307*20)|0)|0);
      $311 = ((($310)) + 12|0);
      HEAPF32[$311>>2] = $306;
      $312 = $k;
      $313 = (($312) + 1)|0;
      $k = $313;
     }
     $314 = $c;
     $315 = ((($314)) + 4|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $316 & -65;
     HEAP32[$315>>2] = $317;
     $318 = $c;
     $319 = ((($318)) + 4|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $320 | 2;
     HEAP32[$319>>2] = $321;
     $322 = $c;
     $323 = ((($322)) + 4|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = $324 | 4;
     HEAP32[$323>>2] = $325;
     $326 = $1;
     $327 = ((($326)) + 103096|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $328 & 4;
     $330 = ($329|0)!=(0);
     if (!($330)) {
      break;
     }
     $331 = $3;
     $332 = HEAP32[$331>>2]|0;
     $333 = ((($332)) + 16|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = $c;
     FUNCTION_TABLE_viii[$334 & 1023]($331,$335,$oldManifold);
     $336 = $c;
     $337 = ((($336)) + 4|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = $338 & 4;
     $340 = ($339>>>0)>(0);
     $341 = $340&1;
     $342 = $i;
     $343 = $4;
     $344 = (($343) + ($342<<2)|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = $345 & $341;
     HEAP32[$344>>2] = $346;
     break;
    }
    $347 = $bodyB;
    $348 = $bodyA;
    $349 = (__ZNK6b2Body13ShouldCollideEPKS_($347,$348)|0);
    $350 = $349&1;
    $351 = ($350|0)==(0);
    if ($351) {
     label = 38;
     break L17;
    }
    $352 = $1;
    $353 = ((($352)) + 102876|0);
    $354 = ((($353)) + 116|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)!=(0|0);
    if ($356) {
     $357 = $1;
     $358 = ((($357)) + 102876|0);
     $359 = ((($358)) + 116|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = HEAP32[$360>>2]|0;
     $362 = ((($361)) + 8|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $fixtureA;
     $365 = $fixtureB;
     $366 = (FUNCTION_TABLE_iiii[$363 & 1023]($360,$364,$365)|0);
     $367 = $366&1;
     $368 = ($367|0)==(0);
     if ($368) {
      label = 41;
      break L17;
     }
    }
    $369 = $fixtureA;
    $370 = $indexA;
    $371 = $fixtureB;
    $372 = $indexB;
    $373 = $1;
    $374 = ((($373)) + 102876|0);
    $375 = ((($374)) + 124|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($369,$370,$371,$372,$376)|0);
    $c1 = $377;
    $378 = $c1;
    $379 = ($378|0)==(0|0);
    if ($379) {
     label = 43;
     break L17;
    }
    $380 = $c1;
    $381 = (__ZN9b2Contact11GetFixtureAEv($380)|0);
    $fixtureA = $381;
    $382 = $c1;
    $383 = (__ZN9b2Contact11GetFixtureBEv($382)|0);
    $fixtureB = $383;
    $384 = $c1;
    $385 = (__ZNK9b2Contact14GetChildIndexAEv($384)|0);
    $indexA = $385;
    $386 = $c1;
    $387 = (__ZNK9b2Contact14GetChildIndexBEv($386)|0);
    $indexB = $387;
    $388 = $fixtureA;
    $389 = (__ZN9b2Fixture7GetBodyEv($388)|0);
    $bodyA = $389;
    $390 = $fixtureB;
    $391 = (__ZN9b2Fixture7GetBodyEv($390)|0);
    $bodyB = $391;
    $392 = $c1;
    $393 = ((($392)) + 8|0);
    HEAP32[$393>>2] = 0;
    $394 = $2;
    $395 = HEAP32[$394>>2]|0;
    $396 = $c1;
    $397 = ((($396)) + 12|0);
    HEAP32[$397>>2] = $395;
    $398 = $2;
    $399 = HEAP32[$398>>2]|0;
    $400 = ($399|0)!=(0|0);
    if ($400) {
     $401 = $c1;
     $402 = $2;
     $403 = HEAP32[$402>>2]|0;
     $404 = ((($403)) + 8|0);
     HEAP32[$404>>2] = $401;
    }
    $405 = $c1;
    $406 = $2;
    HEAP32[$406>>2] = $405;
    $407 = $c1;
    $408 = $c1;
    $409 = ((($408)) + 16|0);
    $410 = ((($409)) + 4|0);
    HEAP32[$410>>2] = $407;
    $411 = $bodyB;
    $412 = $c1;
    $413 = ((($412)) + 16|0);
    HEAP32[$413>>2] = $411;
    $414 = $c1;
    $415 = ((($414)) + 16|0);
    $416 = ((($415)) + 8|0);
    HEAP32[$416>>2] = 0;
    $417 = $bodyA;
    $418 = ((($417)) + 120|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = $c1;
    $421 = ((($420)) + 16|0);
    $422 = ((($421)) + 12|0);
    HEAP32[$422>>2] = $419;
    $423 = $bodyA;
    $424 = ((($423)) + 120|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = ($425|0)!=(0|0);
    if ($426) {
     $427 = $c1;
     $428 = ((($427)) + 16|0);
     $429 = $bodyA;
     $430 = ((($429)) + 120|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ((($431)) + 8|0);
     HEAP32[$432>>2] = $428;
    }
    $433 = $c1;
    $434 = ((($433)) + 16|0);
    $435 = $bodyA;
    $436 = ((($435)) + 120|0);
    HEAP32[$436>>2] = $434;
    $437 = $c1;
    $438 = $c1;
    $439 = ((($438)) + 32|0);
    $440 = ((($439)) + 4|0);
    HEAP32[$440>>2] = $437;
    $441 = $bodyA;
    $442 = $c1;
    $443 = ((($442)) + 32|0);
    HEAP32[$443>>2] = $441;
    $444 = $c1;
    $445 = ((($444)) + 32|0);
    $446 = ((($445)) + 8|0);
    HEAP32[$446>>2] = 0;
    $447 = $bodyB;
    $448 = ((($447)) + 120|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = $c1;
    $451 = ((($450)) + 32|0);
    $452 = ((($451)) + 12|0);
    HEAP32[$452>>2] = $449;
    $453 = $bodyB;
    $454 = ((($453)) + 120|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = ($455|0)!=(0|0);
    if ($456) {
     $457 = $c1;
     $458 = ((($457)) + 32|0);
     $459 = $bodyB;
     $460 = ((($459)) + 120|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = ((($461)) + 8|0);
     HEAP32[$462>>2] = $458;
    }
    $463 = $c1;
    $464 = ((($463)) + 32|0);
    $465 = $bodyB;
    $466 = ((($465)) + 120|0);
    HEAP32[$466>>2] = $464;
    $467 = $c1;
    $468 = ((($467)) + 64|0);
    dest=$oldManifold; src=$468; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $469 = $i;
    $470 = $manifoldListData;
    $471 = (($470) + (($469*72)|0)|0);
    $472 = ((($471)) + 68|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $c1;
    $475 = ((($474)) + 64|0);
    $476 = ((($475)) + 60|0);
    HEAP32[$476>>2] = $473;
    $477 = $i;
    $478 = $manifoldListData;
    $479 = (($478) + (($477*72)|0)|0);
    $480 = ((($479)) + 8|0);
    $481 = +HEAPF32[$480>>2];
    $482 = $c1;
    $483 = ((($482)) + 64|0);
    $484 = ((($483)) + 48|0);
    HEAPF32[$484>>2] = $481;
    $485 = $i;
    $486 = $manifoldListData;
    $487 = (($486) + (($485*72)|0)|0);
    $488 = ((($487)) + 8|0);
    $489 = ((($488)) + 4|0);
    $490 = +HEAPF32[$489>>2];
    $491 = $c1;
    $492 = ((($491)) + 64|0);
    $493 = ((($492)) + 48|0);
    $494 = ((($493)) + 4|0);
    HEAPF32[$494>>2] = $490;
    $495 = $i;
    $496 = $manifoldListData;
    $497 = (($496) + (($495*72)|0)|0);
    $498 = +HEAPF32[$497>>2];
    $499 = $c1;
    $500 = ((($499)) + 64|0);
    $501 = ((($500)) + 40|0);
    HEAPF32[$501>>2] = $498;
    $502 = $i;
    $503 = $manifoldListData;
    $504 = (($503) + (($502*72)|0)|0);
    $505 = ((($504)) + 4|0);
    $506 = +HEAPF32[$505>>2];
    $507 = $c1;
    $508 = ((($507)) + 64|0);
    $509 = ((($508)) + 40|0);
    $510 = ((($509)) + 4|0);
    HEAPF32[$510>>2] = $506;
    $511 = $i;
    $512 = $manifoldListData;
    $513 = (($512) + (($511*72)|0)|0);
    $514 = ((($513)) + 64|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = $c1;
    $517 = ((($516)) + 64|0);
    $518 = ((($517)) + 56|0);
    HEAP32[$518>>2] = $515;
    $k2 = 0;
    while(1) {
     $519 = $k2;
     $520 = $c1;
     $521 = ((($520)) + 64|0);
     $522 = ((($521)) + 60|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ($519|0)<($523|0);
     if (!($524)) {
      break;
     }
     $525 = $k2;
     $526 = $i;
     $527 = $manifoldListData;
     $528 = (($527) + (($526*72)|0)|0);
     $529 = ((($528)) + 16|0);
     $530 = (($529) + (($525*24)|0)|0);
     $531 = ((($530)) + 16|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = $k2;
     $534 = $c1;
     $535 = ((($534)) + 64|0);
     $536 = (($535) + (($533*20)|0)|0);
     $537 = ((($536)) + 16|0);
     HEAP32[$537>>2] = $532;
     $538 = $k2;
     $539 = $i;
     $540 = $manifoldListData;
     $541 = (($540) + (($539*72)|0)|0);
     $542 = ((($541)) + 16|0);
     $543 = (($542) + (($538*24)|0)|0);
     $544 = +HEAPF32[$543>>2];
     $545 = $k2;
     $546 = $c1;
     $547 = ((($546)) + 64|0);
     $548 = (($547) + (($545*20)|0)|0);
     HEAPF32[$548>>2] = $544;
     $549 = $k2;
     $550 = $i;
     $551 = $manifoldListData;
     $552 = (($551) + (($550*72)|0)|0);
     $553 = ((($552)) + 16|0);
     $554 = (($553) + (($549*24)|0)|0);
     $555 = ((($554)) + 4|0);
     $556 = +HEAPF32[$555>>2];
     $557 = $k2;
     $558 = $c1;
     $559 = ((($558)) + 64|0);
     $560 = (($559) + (($557*20)|0)|0);
     $561 = ((($560)) + 4|0);
     HEAPF32[$561>>2] = $556;
     $562 = $k2;
     $563 = $i;
     $564 = $manifoldListData;
     $565 = (($564) + (($563*72)|0)|0);
     $566 = ((($565)) + 16|0);
     $567 = (($566) + (($562*24)|0)|0);
     $568 = ((($567)) + 8|0);
     $569 = +HEAPF32[$568>>2];
     $570 = $k2;
     $571 = $c1;
     $572 = ((($571)) + 64|0);
     $573 = (($572) + (($570*20)|0)|0);
     $574 = ((($573)) + 8|0);
     HEAPF32[$574>>2] = $569;
     $575 = $k2;
     $576 = $i;
     $577 = $manifoldListData;
     $578 = (($577) + (($576*72)|0)|0);
     $579 = ((($578)) + 16|0);
     $580 = (($579) + (($575*24)|0)|0);
     $581 = ((($580)) + 12|0);
     $582 = +HEAPF32[$581>>2];
     $583 = $k2;
     $584 = $c1;
     $585 = ((($584)) + 64|0);
     $586 = (($585) + (($583*20)|0)|0);
     $587 = ((($586)) + 12|0);
     HEAPF32[$587>>2] = $582;
     $588 = $k2;
     $589 = (($588) + 1)|0;
     $k2 = $589;
    }
    $590 = $c1;
    $591 = ((($590)) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = $592 & -65;
    HEAP32[$591>>2] = $593;
    $594 = $c1;
    $595 = ((($594)) + 4|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = $596 | 2;
    HEAP32[$595>>2] = $597;
    $598 = $c1;
    $599 = ((($598)) + 4|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = $600 | 4;
    HEAP32[$599>>2] = $601;
    $602 = $3;
    $603 = HEAP32[$602>>2]|0;
    $604 = ((($603)) + 8|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = $c1;
    FUNCTION_TABLE_vii[$605 & 1023]($602,$606);
    $607 = $1;
    $608 = ((($607)) + 103096|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = $609 & 4;
    $611 = ($610|0)!=(0);
    if ($611) {
     $612 = $3;
     $613 = HEAP32[$612>>2]|0;
     $614 = ((($613)) + 16|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = $c1;
     FUNCTION_TABLE_viii[$615 & 1023]($612,$616,$oldManifold);
     $617 = $c1;
     $618 = ((($617)) + 4|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = $619 & 4;
     $621 = ($620>>>0)>(0);
     $622 = $621&1;
     $623 = $i;
     $624 = $4;
     $625 = (($624) + ($623<<2)|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 & $622;
     HEAP32[$625>>2] = $627;
    }
   }
  } while(0);
  $628 = $i;
  $629 = (($628) + 1)|0;
  $i = $629;
 }
 if ((label|0) == 16) {
  ___assert_fail((18954|0),(14509|0),891,(14613|0));
  // unreachable;
 }
 else if ((label|0) == 38) {
  ___assert_fail((18954|0),(14509|0),961,(14613|0));
  // unreachable;
 }
 else if ((label|0) == 41) {
  ___assert_fail((18954|0),(14509|0),969,(14613|0));
  // unreachable;
 }
 else if ((label|0) == 43) {
  (_printf(14640,$vararg_buffer)|0);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 56) {
  if (!($76)) {
   STACKTOP = sp;return;
  }
  $630 = $manifoldBinaryBitList;
  $631 = ($630|0)==(0|0);
  if ($631) {
   STACKTOP = sp;return;
  }
  __ZdaPv($630);
  STACKTOP = sp;return;
 }
}
function __ZN10b2ManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = $1;
 while(1) {
  __ZN15b2ManifoldPointC2Ev($3);
  $4 = ((($3)) + 20|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = ((($1)) + 40|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = ((($1)) + 48|0);
 __ZN6b2Vec2C2Ev($7);
 STACKTOP = sp;return;
}
function __ZN15b2ManifoldPointC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9b2Fixture7GetBodyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body14GetContactListEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact11GetFixtureAEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact11GetFixtureBEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9b2Contact14GetChildIndexAEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9b2Contact14GetChildIndexBEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8b2CLScanC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $buffer2 = 0, $err = 0, $i = 0, $len = 0, $len1 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $scanKernelSource = 0, $scanKernelSourceLen = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 409744|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 132|0;
 $scanKernelSource = sp + 128|0;
 $scanKernelSourceLen = sp + 124|0;
 $len = sp + 120|0;
 $buffer = sp + 204944|0;
 $size = sp + 112|0;
 $len1 = sp + 108|0;
 $buffer2 = sp + 144|0;
 $0 = $this;
 $1 = $0;
 (_printf(14908,$vararg_buffer)|0);
 HEAP32[$scanKernelSource>>2] = 0;
 HEAP32[$scanKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz_246(14934,$vararg_buffer6);
 $2 = (__ZL15shrFindFilePathPKcPv_248(14958,0)|0);
 $3 = (__ZL18b2clLoadProgSourcePKcS0_Pj_250($2,19137,$scanKernelSourceLen)|0);
 HEAP32[$scanKernelSource>>2] = $3;
 $4 = HEAP32[$scanKernelSource>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __Z5b2LogPKcz(14986,$vararg_buffer8);
 }
 $6 = (__ZN10b2CLDevice8instanceEv()|0);
 $7 = (__ZNK10b2CLDevice10GetContextEv($6)|0);
 $8 = (_clCreateProgramWithSource(($7|0),1,($scanKernelSource|0),(0|0),($err|0))|0);
 $9 = ((($1)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf(19218,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 }
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_clBuildProgram(($14|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  (_printf(19260,$vararg_buffer12)|0);
  $18 = ((($1)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN10b2CLDevice8instanceEv()|0);
  $21 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($20)|0);
  (_clGetProgramBuildInfo(($19|0),($21|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer14>>2] = $buffer;
  (_printf(19304,$vararg_buffer14)|0);
  _exit(1);
  // unreachable;
 }
 $22 = ((($1)) + 44|0);
 HEAP32[$22>>2] = 2147483647;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(8);
  if (!($24)) {
   break;
  }
  $25 = ((($1)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $i;
  $28 = (2028 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_clCreateKernel(($26|0),($29|0),($err|0))|0);
  $31 = $i;
  $32 = ((($1)) + 12|0);
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = $30;
  $34 = $i;
  $35 = ((($1)) + 12|0);
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  $39 = HEAP32[$err>>2]|0;
  $40 = ($39|0)!=(0);
  $or$cond = $38 | $40;
  if ($or$cond) {
   label = 10;
   break;
  }
  $41 = (__ZN10b2CLDevice8instanceEv()|0);
  $42 = $i;
  $43 = ((($1)) + 12|0);
  $44 = (($43) + ($42<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($41,$44,$size);
  $45 = ((($1)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$size>>2]|0;
  $48 = ($46>>>0)>($47>>>0);
  if ($48) {
   $49 = HEAP32[$size>>2]|0;
   $53 = $49;
  } else {
   $50 = ((($1)) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $53 = $51;
  }
  $52 = ((($1)) + 44|0);
  HEAP32[$52>>2] = $53;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 10) {
  (_printf(16762,$vararg_buffer16)|0);
  _exit(1);
  // unreachable;
 }
 __ZL6shrLogPKcz_246(15048,$vararg_buffer18);
 $56 = (__ZL15shrFindFilePathPKcPv_248(15077,0)|0);
 $57 = (__ZL18b2clLoadProgSourcePKcS0_Pj_250($56,19137,$scanKernelSourceLen)|0);
 HEAP32[$scanKernelSource>>2] = $57;
 $58 = HEAP32[$scanKernelSource>>2]|0;
 $59 = ($58|0)==(0|0);
 if ($59) {
  __Z5b2LogPKcz(15110,$vararg_buffer20);
 }
 $60 = (__ZN10b2CLDevice8instanceEv()|0);
 $61 = (__ZNK10b2CLDevice10GetContextEv($60)|0);
 $62 = (_clCreateProgramWithSource(($61|0),1,($scanKernelSource|0),(0|0),($err|0))|0);
 $63 = ((($1)) + 8|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($1)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  (_printf(19218,$vararg_buffer22)|0);
  _exit(1);
  // unreachable;
 }
 $67 = ((($1)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (_clBuildProgram(($68|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $69;
 $70 = HEAP32[$err>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  (_printf(19260,$vararg_buffer24)|0);
  $72 = ((($1)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (__ZN10b2CLDevice8instanceEv()|0);
  $75 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($74)|0);
  (_clGetProgramBuildInfo(($73|0),($75|0),4483,204800,($buffer2|0),($len1|0))|0);
  HEAP32[$vararg_buffer26>>2] = $buffer2;
  (_printf(19304,$vararg_buffer26)|0);
  _exit(1);
  // unreachable;
 }
 $76 = ((($1)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (_clCreateKernel(($77|0),(15177|0),($err|0))|0);
 $79 = ((($1)) + 48|0);
 HEAP32[$79>>2] = $78;
 $80 = ((($1)) + 48|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 $83 = HEAP32[$err>>2]|0;
 $84 = ($83|0)!=(0);
 $or$cond3 = $82 | $84;
 if ($or$cond3) {
  (_printf(15205,$vararg_buffer29)|0);
  _exit(1);
  // unreachable;
 }
 $85 = (__ZN10b2CLDevice8instanceEv()|0);
 $86 = ((($1)) + 48|0);
 $87 = ((($1)) + 56|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($85,$86,$87);
 $88 = ((($1)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (_clCreateKernel(($89|0),(15274|0),($err|0))|0);
 $91 = ((($1)) + 52|0);
 HEAP32[$91>>2] = $90;
 $92 = ((($1)) + 52|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0|0);
 $95 = HEAP32[$err>>2]|0;
 $96 = ($95|0)!=(0);
 $or$cond5 = $94 | $96;
 if ($or$cond5) {
  (_printf(15293,$vararg_buffer31)|0);
  _exit(1);
  // unreachable;
 } else {
  $97 = (__ZN10b2CLDevice8instanceEv()|0);
  $98 = ((($1)) + 52|0);
  $99 = ((($1)) + 60|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($97,$98,$99);
  $100 = ((($1)) + 68|0);
  HEAP32[$100>>2] = 0;
  $101 = ((($1)) + 72|0);
  HEAP32[$101>>2] = 0;
  HEAP32[$1>>2] = 0;
  $102 = ((($1)) + 4|0);
  HEAP32[$102>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz_246($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv_248($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj_250($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30440]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30440)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 32516;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(32516|0),(___dso_handle|0))|0);
  }
 }
 $76 = 32516;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 39102;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32516|0),(39102|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32516|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 32516;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 32516;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8b2CLScanD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8b2CLScan18ReleasePartialSumsEv($1);
 STACKTOP = sp;return;
}
function __ZN8b2CLScan18ReleasePartialSumsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 68|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  (_clReleaseMemObject(($10|0))|0);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = ((($1)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = ((($1)) + 64|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($1)) + 72|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 68|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2CLScan8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[30448]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (32528|0);
 }
 $4 = (___cxa_guard_acquire(30448)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (32528|0);
 }
 __THREW__ = 0;
 invoke_vi(429,(32528|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((430|0),(32528|0),(___dso_handle|0))|0);
 STACKTOP = sp;return (32528|0);
}
function __ZN8b2CLScan22ParallelCompactIndicesEP7_cl_memS1_S1_iS1_($this,$output_data,$input_data,$scan_result,$element_count,$num_validdata) {
 $this = $this|0;
 $output_data = $output_data|0;
 $input_data = $input_data|0;
 $scan_result = $scan_result|0;
 $element_count = $element_count|0;
 $num_validdata = $num_validdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a = 0, $err = 0, $global = 0, $group = 0, $k = 0, $local = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $global = sp + 16|0;
 $local = sp + 12|0;
 $1 = $this;
 HEAP32[$2>>2] = $output_data;
 HEAP32[$3>>2] = $input_data;
 HEAP32[$4>>2] = $scan_result;
 HEAP32[$5>>2] = $element_count;
 HEAP32[$6>>2] = $num_validdata;
 $7 = $1;
 $k = 6;
 $a = 0;
 $8 = HEAP32[$6>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = ((($7)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   $13 = (__ZN10b2CLDevice8instanceEv()|0);
   $14 = (__ZN10b2CLDevice13allocateArrayEjb($13,4,0)|0);
   $15 = ((($7)) + 4|0);
   HEAP32[$15>>2] = $14;
  }
 }
 $err = 0;
 $16 = $k;
 $17 = ((($7)) + 12|0);
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $a;
 $21 = (($20) + 1)|0;
 $a = $21;
 $22 = (_clSetKernelArg(($19|0),($20|0),4,($2|0))|0);
 $23 = $err;
 $24 = $23 | $22;
 $err = $24;
 $25 = $k;
 $26 = ((($7)) + 12|0);
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (_clSetKernelArg(($28|0),($29|0),4,($3|0))|0);
 $32 = $err;
 $33 = $32 | $31;
 $err = $33;
 $34 = $k;
 $35 = ((($7)) + 12|0);
 $36 = (($35) + ($34<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (_clSetKernelArg(($37|0),($38|0),4,($4|0))|0);
 $41 = $err;
 $42 = $41 | $40;
 $err = $42;
 $43 = HEAP32[$6>>2]|0;
 $44 = ($43|0)!=(0|0);
 $45 = $k;
 $46 = ((($7)) + 12|0);
 $47 = (($46) + ($45<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $a;
 $50 = (($49) + 1)|0;
 $a = $50;
 if ($44) {
  $51 = (_clSetKernelArg(($48|0),($49|0),4,($6|0))|0);
  $52 = $err;
  $53 = $52 | $51;
  $err = $53;
 } else {
  $54 = ((($7)) + 4|0);
  $55 = (_clSetKernelArg(($48|0),($49|0),4,($54|0))|0);
  $56 = $err;
  $57 = $56 | $55;
  $err = $57;
 }
 $58 = $k;
 $59 = ((($7)) + 12|0);
 $60 = (($59) + ($58<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $a;
 $63 = (($62) + 1)|0;
 $a = $63;
 $64 = (_clSetKernelArg(($61|0),($62|0),4,($5|0))|0);
 $65 = $err;
 $66 = $65 | $64;
 $err = $66;
 $67 = $err;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $k;
  $70 = (2028 + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$vararg_buffer>>2] = $71;
  (_printf(19385,$vararg_buffer)|0);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $72 = HEAP32[$5>>2]|0;
 $73 = ((($7)) + 44|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + ($74))|0;
 $76 = (($75) - 1)|0;
 $77 = ((($7)) + 44|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76>>>0) / ($78>>>0))&-1;
 $group = $79;
 $80 = ((($7)) + 44|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $group;
 $83 = Math_imul($81, $82)|0;
 HEAP32[$global>>2] = $83;
 $84 = ((($7)) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$local>>2] = $85;
 $err = 0;
 $86 = (__ZN10b2CLDevice8instanceEv()|0);
 $87 = (__ZNK10b2CLDevice15GetCommandQueueEv($86)|0);
 $88 = $k;
 $89 = ((($7)) + 12|0);
 $90 = (($89) + ($88<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (_clEnqueueNDRangeKernel(($87|0),($91|0),1,(0|0),($global|0),($local|0),0,(0|0),(0|0))|0);
 $93 = $err;
 $94 = $93 | $92;
 $err = $94;
 $95 = $err;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $k;
  $98 = (2028 + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $99;
  (_printf(15353,$vararg_buffer1)|0);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 } else {
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function __ZN10b2CLSolverC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $buffer3 = 0, $err = 0;
 var $i = 0, $i1 = 0, $i4 = 0, $len = 0, $len2 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0;
 var $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0, $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond7 = 0, $or$cond9 = 0, $source = 0, $sourceLen = 0, $vararg_buffer = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0;
 var $vararg_buffer110 = 0, $vararg_buffer112 = 0, $vararg_buffer114 = 0, $vararg_buffer116 = 0, $vararg_buffer118 = 0, $vararg_buffer120 = 0, $vararg_buffer122 = 0, $vararg_buffer124 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0;
 var $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer128 = sp + 288|0;
 $vararg_buffer126 = sp + 280|0;
 $vararg_buffer124 = sp + 272|0;
 $vararg_buffer122 = sp + 264|0;
 $vararg_buffer120 = sp + 256|0;
 $vararg_buffer118 = sp + 248|0;
 $vararg_buffer116 = sp + 240|0;
 $vararg_buffer114 = sp + 232|0;
 $vararg_buffer112 = sp + 224|0;
 $vararg_buffer110 = sp + 216|0;
 $vararg_buffer108 = sp + 208|0;
 $vararg_buffer105 = sp + 200|0;
 $vararg_buffer103 = sp + 192|0;
 $vararg_buffer101 = sp + 184|0;
 $vararg_buffer99 = sp + 176|0;
 $vararg_buffer97 = sp + 168|0;
 $vararg_buffer95 = sp + 160|0;
 $vararg_buffer93 = sp + 152|0;
 $vararg_buffer91 = sp + 144|0;
 $vararg_buffer89 = sp + 136|0;
 $vararg_buffer87 = sp + 128|0;
 $vararg_buffer85 = sp + 120|0;
 $vararg_buffer83 = sp + 112|0;
 $vararg_buffer81 = sp + 104|0;
 $vararg_buffer79 = sp + 96|0;
 $vararg_buffer77 = sp + 88|0;
 $vararg_buffer74 = sp + 80|0;
 $vararg_buffer72 = sp + 72|0;
 $vararg_buffer70 = sp + 64|0;
 $vararg_buffer68 = sp + 56|0;
 $vararg_buffer66 = sp + 48|0;
 $vararg_buffer64 = sp + 40|0;
 $vararg_buffer62 = sp + 32|0;
 $vararg_buffer60 = sp + 24|0;
 $vararg_buffer58 = sp + 16|0;
 $vararg_buffer56 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 320|0;
 $source = sp + 316|0;
 $sourceLen = sp + 312|0;
 $len = sp + 308|0;
 $buffer = sp + 30328|0;
 $len2 = sp + 296|0;
 $buffer3 = sp + 328|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[11781]|0;
 $3 = $2&1;
 if (!($3)) {
  $596 = ((($1)) + 12|0);
  HEAPF32[$596>>2] = 0.0;
  STACKTOP = sp;return;
 }
 (_printf(15391,$vararg_buffer)|0);
 HEAP32[$source>>2] = 0;
 HEAP32[$sourceLen>>2] = 0;
 $4 = (__ZL15shrFindFilePathPKcPv_288(15419,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj_290($4,19137,$sourceLen)|0);
 HEAP32[$source>>2] = $5;
 $6 = HEAP32[$source>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(15466,$vararg_buffer56);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($source|0),(0|0),($err|0))|0);
 $11 = ((($1)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($1)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  (_printf(19218,$vararg_buffer58)|0);
  _exit(1);
  // unreachable;
 }
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_clBuildProgram(($16|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $17;
 $18 = HEAP32[$err>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  (_printf(19260,$vararg_buffer60)|0);
  $20 = ((($1)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($22)|0);
  (_clGetProgramBuildInfo(($21|0),($23|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer62>>2] = $buffer;
  (_printf(19304,$vararg_buffer62)|0);
  _exit(1);
  // unreachable;
 }
 $24 = ((($1)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_clCreateKernel(($25|0),(15547|0),($err|0))|0);
 $27 = ((($1)) + 72|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($1)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 $31 = HEAP32[$err>>2]|0;
 $32 = ($31|0)!=(0);
 $or$cond = $30 | $32;
 if ($or$cond) {
  (_printf(15583,$vararg_buffer64)|0);
  _exit(1);
  // unreachable;
 }
 $33 = ((($1)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_clCreateKernel(($34|0),(15625|0),($err|0))|0);
 $36 = ((($1)) + 80|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($1)) + 80|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 $40 = HEAP32[$err>>2]|0;
 $41 = ($40|0)!=(0);
 $or$cond3 = $39 | $41;
 if ($or$cond3) {
  (_printf(15583,$vararg_buffer66)|0);
  _exit(1);
  // unreachable;
 }
 $42 = ((($1)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_clCreateKernel(($43|0),(15654|0),($err|0))|0);
 $45 = ((($1)) + 76|0);
 HEAP32[$45>>2] = $44;
 $46 = ((($1)) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 $49 = HEAP32[$err>>2]|0;
 $50 = ($49|0)!=(0);
 $or$cond5 = $48 | $50;
 if ($or$cond5) {
  (_printf(15583,$vararg_buffer68)|0);
  _exit(1);
  // unreachable;
 }
 $51 = (__ZN10b2CLDevice8instanceEv()|0);
 $52 = ((($1)) + 76|0);
 $53 = ((($1)) + 296|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($51,$52,$53);
 $54 = (__ZN10b2CLDevice8instanceEv()|0);
 $55 = ((($1)) + 72|0);
 $56 = ((($1)) + 244|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($54,$55,$56);
 $57 = ((($1)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_clCreateKernel(($58|0),(15689|0),($err|0))|0);
 $60 = ((($1)) + 24|0);
 HEAP32[$60>>2] = $59;
 $61 = ((($1)) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 $64 = HEAP32[$err>>2]|0;
 $65 = ($64|0)!=(0);
 $or$cond7 = $63 | $65;
 if ($or$cond7) {
  (_printf(15713,$vararg_buffer70)|0);
  _exit(1);
  // unreachable;
 }
 $66 = (__ZN10b2CLDevice8instanceEv()|0);
 $67 = ((($1)) + 24|0);
 $68 = ((($1)) + 244|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($66,$67,$68);
 $i = 1;
 while(1) {
  $69 = $i;
  $70 = ($69|0)<(11);
  if (!($70)) {
   break;
  }
  $71 = $i;
  do {
   switch ($71|0) {
   case 3:  {
    $72 = ((($1)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (_clCreateKernel(($73|0),(15778|0),($err|0))|0);
    $75 = $i;
    $76 = ((($1)) + 28|0);
    $77 = (($76) + ($75<<2)|0);
    HEAP32[$77>>2] = $74;
    break;
   }
   case 1:  {
    $78 = ((($1)) + 16|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_clCreateKernel(($79|0),(15815|0),($err|0))|0);
    $81 = $i;
    $82 = ((($1)) + 28|0);
    $83 = (($82) + ($81<<2)|0);
    HEAP32[$83>>2] = $80;
    break;
   }
   case 2:  {
    $84 = ((($1)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (_clCreateKernel(($85|0),(15852|0),($err|0))|0);
    $87 = $i;
    $88 = ((($1)) + 28|0);
    $89 = (($88) + ($87<<2)|0);
    HEAP32[$89>>2] = $86;
    break;
   }
   case 6:  {
    $90 = ((($1)) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (_clCreateKernel(($91|0),(15890|0),($err|0))|0);
    $93 = $i;
    $94 = ((($1)) + 28|0);
    $95 = (($94) + ($93<<2)|0);
    HEAP32[$95>>2] = $92;
    break;
   }
   case 4:  {
    $96 = ((($1)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (_clCreateKernel(($97|0),(15923|0),($err|0))|0);
    $99 = $i;
    $100 = ((($1)) + 28|0);
    $101 = (($100) + ($99<<2)|0);
    HEAP32[$101>>2] = $98;
    break;
   }
   case 10:  {
    $102 = ((($1)) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_clCreateKernel(($103|0),(15958|0),($err|0))|0);
    $105 = $i;
    $106 = ((($1)) + 28|0);
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = $104;
    break;
   }
   case 7:  {
    $108 = ((($1)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (_clCreateKernel(($109|0),(15991|0),($err|0))|0);
    $111 = $i;
    $112 = ((($1)) + 28|0);
    $113 = (($112) + ($111<<2)|0);
    HEAP32[$113>>2] = $110;
    break;
   }
   case 8:  {
    $114 = ((($1)) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (_clCreateKernel(($115|0),(16025|0),($err|0))|0);
    $117 = $i;
    $118 = ((($1)) + 28|0);
    $119 = (($118) + ($117<<2)|0);
    HEAP32[$119>>2] = $116;
    break;
   }
   case 5:  {
    $120 = ((($1)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (_clCreateKernel(($121|0),(16058|0),($err|0))|0);
    $123 = $i;
    $124 = ((($1)) + 28|0);
    $125 = (($124) + ($123<<2)|0);
    HEAP32[$125>>2] = $122;
    break;
   }
   case 9:  {
    $126 = ((($1)) + 16|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_clCreateKernel(($127|0),(16092|0),($err|0))|0);
    $129 = $i;
    $130 = ((($1)) + 28|0);
    $131 = (($130) + ($129<<2)|0);
    HEAP32[$131>>2] = $128;
    break;
   }
   default: {
   }
   }
  } while(0);
  $132 = $i;
  $133 = ((($1)) + 28|0);
  $134 = (($133) + ($132<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)==(0|0);
  $137 = HEAP32[$err>>2]|0;
  $138 = ($137|0)!=(0);
  $or$cond9 = $136 | $138;
  if ($or$cond9) {
   label = 30;
   break;
  }
  $139 = (__ZN10b2CLDevice8instanceEv()|0);
  $140 = $i;
  $141 = ((($1)) + 28|0);
  $142 = (($141) + ($140<<2)|0);
  $143 = $i;
  $144 = ((($1)) + 248|0);
  $145 = (($144) + ($143<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($139,$142,$145);
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 if ((label|0) == 30) {
  (_printf(15713,$vararg_buffer72)|0);
  _exit(1);
  // unreachable;
 }
 $148 = ((($1)) + 16|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (_clCreateKernel(($149|0),(16129|0),($err|0))|0);
 $151 = ((($1)) + 92|0);
 HEAP32[$151>>2] = $150;
 $152 = ((($1)) + 92|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)==(0|0);
 $155 = HEAP32[$err>>2]|0;
 $156 = ($155|0)!=(0);
 $or$cond11 = $154 | $156;
 if ($or$cond11) {
  $157 = HEAP32[$err>>2]|0;
  HEAP32[$vararg_buffer74>>2] = $157;
  (_printf(16158,$vararg_buffer74)|0);
  _exit(1);
  // unreachable;
 }
 $i1 = 1;
 while(1) {
  $158 = $i1;
  $159 = ($158|0)<(11);
  if (!($159)) {
   break;
  }
  $160 = $i1;
  do {
   switch ($160|0) {
   case 3:  {
    $161 = ((($1)) + 16|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (_clCreateKernel(($162|0),(16233|0),($err|0))|0);
    $164 = $i1;
    $165 = ((($1)) + 96|0);
    $166 = (($165) + ($164<<2)|0);
    HEAP32[$166>>2] = $163;
    break;
   }
   case 1:  {
    $167 = ((($1)) + 16|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (_clCreateKernel(($168|0),(16275|0),($err|0))|0);
    $170 = $i1;
    $171 = ((($1)) + 96|0);
    $172 = (($171) + ($170<<2)|0);
    HEAP32[$172>>2] = $169;
    break;
   }
   case 2:  {
    $173 = ((($1)) + 16|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (_clCreateKernel(($174|0),(16317|0),($err|0))|0);
    $176 = $i1;
    $177 = ((($1)) + 96|0);
    $178 = (($177) + ($176<<2)|0);
    HEAP32[$178>>2] = $175;
    break;
   }
   case 6:  {
    $179 = ((($1)) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (_clCreateKernel(($180|0),(16360|0),($err|0))|0);
    $182 = $i1;
    $183 = ((($1)) + 96|0);
    $184 = (($183) + ($182<<2)|0);
    HEAP32[$184>>2] = $181;
    break;
   }
   case 4:  {
    $185 = ((($1)) + 16|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (_clCreateKernel(($186|0),(16398|0),($err|0))|0);
    $188 = $i1;
    $189 = ((($1)) + 96|0);
    $190 = (($189) + ($188<<2)|0);
    HEAP32[$190>>2] = $187;
    break;
   }
   case 10:  {
    $191 = ((($1)) + 16|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (_clCreateKernel(($192|0),(16438|0),($err|0))|0);
    $194 = $i1;
    $195 = ((($1)) + 96|0);
    $196 = (($195) + ($194<<2)|0);
    HEAP32[$196>>2] = $193;
    break;
   }
   case 7:  {
    $197 = ((($1)) + 16|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (_clCreateKernel(($198|0),(16476|0),($err|0))|0);
    $200 = $i1;
    $201 = ((($1)) + 96|0);
    $202 = (($201) + ($200<<2)|0);
    HEAP32[$202>>2] = $199;
    break;
   }
   case 8:  {
    $203 = ((($1)) + 16|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (_clCreateKernel(($204|0),(16515|0),($err|0))|0);
    $206 = $i1;
    $207 = ((($1)) + 96|0);
    $208 = (($207) + ($206<<2)|0);
    HEAP32[$208>>2] = $205;
    break;
   }
   case 5:  {
    $209 = ((($1)) + 16|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (_clCreateKernel(($210|0),(16553|0),($err|0))|0);
    $212 = $i1;
    $213 = ((($1)) + 96|0);
    $214 = (($213) + ($212<<2)|0);
    HEAP32[$214>>2] = $211;
    break;
   }
   case 9:  {
    $215 = ((($1)) + 16|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (_clCreateKernel(($216|0),(16592|0),($err|0))|0);
    $218 = $i1;
    $219 = ((($1)) + 96|0);
    $220 = (($219) + ($218<<2)|0);
    HEAP32[$220>>2] = $217;
    break;
   }
   default: {
   }
   }
  } while(0);
  $221 = $i1;
  $222 = ((($1)) + 96|0);
  $223 = (($222) + ($221<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = ($224|0)==(0|0);
  $226 = HEAP32[$err>>2]|0;
  $227 = ($226|0)!=(0);
  $or$cond13 = $225 | $227;
  if ($or$cond13) {
   label = 48;
   break;
  }
  $228 = $i1;
  $229 = (($228) + 1)|0;
  $i1 = $229;
 }
 if ((label|0) == 48) {
  (_printf(15713,$vararg_buffer77)|0);
  _exit(1);
  // unreachable;
 }
 $230 = ((($1)) + 16|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (_clCreateKernel(($231|0),(16634|0),($err|0))|0);
 $233 = ((($1)) + 88|0);
 HEAP32[$233>>2] = $232;
 $234 = ((($1)) + 88|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)==(0|0);
 $237 = HEAP32[$err>>2]|0;
 $238 = ($237|0)!=(0);
 $or$cond15 = $236 | $238;
 if ($or$cond15) {
  (_printf(16672,$vararg_buffer79)|0);
  _exit(1);
  // unreachable;
 }
 $239 = (__ZN10b2CLDevice8instanceEv()|0);
 $240 = ((($1)) + 88|0);
 $241 = ((($1)) + 292|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($239,$240,$241);
 $242 = ((($1)) + 16|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = (_clCreateKernel(($243|0),(16742|0),($err|0))|0);
 $245 = ((($1)) + 140|0);
 HEAP32[$245>>2] = $244;
 $246 = ((($1)) + 140|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)==(0|0);
 $249 = HEAP32[$err>>2]|0;
 $250 = ($249|0)!=(0);
 $or$cond17 = $248 | $250;
 if ($or$cond17) {
  (_printf(16762,$vararg_buffer81)|0);
  _exit(1);
  // unreachable;
 }
 $251 = (__ZN10b2CLDevice8instanceEv()|0);
 $252 = ((($1)) + 140|0);
 $253 = ((($1)) + 300|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($251,$252,$253);
 $254 = ((($1)) + 16|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = (_clCreateKernel(($255|0),(16803|0),($err|0))|0);
 $257 = ((($1)) + 144|0);
 HEAP32[$257>>2] = $256;
 $258 = ((($1)) + 144|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($259|0)==(0|0);
 $261 = HEAP32[$err>>2]|0;
 $262 = ($261|0)!=(0);
 $or$cond19 = $260 | $262;
 if ($or$cond19) {
  (_printf(16762,$vararg_buffer83)|0);
  _exit(1);
  // unreachable;
 }
 $263 = (__ZN10b2CLDevice8instanceEv()|0);
 $264 = ((($1)) + 144|0);
 $265 = ((($1)) + 304|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($263,$264,$265);
 $266 = ((($1)) + 16|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (_clCreateKernel(($267|0),(16833|0),($err|0))|0);
 $269 = ((($1)) + 148|0);
 HEAP32[$269>>2] = $268;
 $270 = ((($1)) + 148|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ($271|0)==(0|0);
 $273 = HEAP32[$err>>2]|0;
 $274 = ($273|0)!=(0);
 $or$cond21 = $272 | $274;
 if ($or$cond21) {
  (_printf(16762,$vararg_buffer85)|0);
  _exit(1);
  // unreachable;
 }
 $275 = (__ZN10b2CLDevice8instanceEv()|0);
 $276 = ((($1)) + 148|0);
 $277 = ((($1)) + 308|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($275,$276,$277);
 $278 = ((($1)) + 16|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = (_clCreateKernel(($279|0),(16843|0),($err|0))|0);
 $281 = ((($1)) + 152|0);
 HEAP32[$281>>2] = $280;
 $282 = ((($1)) + 152|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = ($283|0)==(0|0);
 $285 = HEAP32[$err>>2]|0;
 $286 = ($285|0)!=(0);
 $or$cond23 = $284 | $286;
 if ($or$cond23) {
  (_printf(16762,$vararg_buffer87)|0);
  _exit(1);
  // unreachable;
 }
 $287 = (__ZN10b2CLDevice8instanceEv()|0);
 $288 = ((($1)) + 152|0);
 $289 = ((($1)) + 316|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($287,$288,$289);
 $290 = ((($1)) + 16|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = (_clCreateKernel(($291|0),(16865|0),($err|0))|0);
 $293 = ((($1)) + 156|0);
 HEAP32[$293>>2] = $292;
 $294 = ((($1)) + 156|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = ($295|0)==(0|0);
 $297 = HEAP32[$err>>2]|0;
 $298 = ($297|0)!=(0);
 $or$cond25 = $296 | $298;
 if ($or$cond25) {
  (_printf(16762,$vararg_buffer89)|0);
  _exit(1);
  // unreachable;
 }
 $299 = ((($1)) + 16|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = (_clCreateKernel(($300|0),(16880|0),($err|0))|0);
 $302 = ((($1)) + 240|0);
 HEAP32[$302>>2] = $301;
 $303 = (__ZN10b2CLDevice8instanceEv()|0);
 $304 = ((($1)) + 156|0);
 $305 = ((($1)) + 312|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($303,$304,$305);
 $306 = (__ZN10b2CLDevice8instanceEv()|0);
 $307 = ((($1)) + 156|0);
 $308 = ((($1)) + 312|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($306,$307,$308);
 $309 = ((($1)) + 16|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = (_clCreateKernel(($310|0),(16907|0),($err|0))|0);
 $312 = ((($1)) + 160|0);
 HEAP32[$312>>2] = $311;
 $313 = ((($1)) + 160|0);
 $314 = HEAP32[$313>>2]|0;
 $315 = ($314|0)==(0|0);
 $316 = HEAP32[$err>>2]|0;
 $317 = ($316|0)!=(0);
 $or$cond27 = $315 | $317;
 if ($or$cond27) {
  (_printf(16762,$vararg_buffer91)|0);
  _exit(1);
  // unreachable;
 }
 $318 = (__ZN10b2CLDevice8instanceEv()|0);
 $319 = ((($1)) + 160|0);
 $320 = ((($1)) + 320|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($318,$319,$320);
 $321 = ((($1)) + 16|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = (_clCreateKernel(($322|0),(16921|0),($err|0))|0);
 $324 = ((($1)) + 164|0);
 HEAP32[$324>>2] = $323;
 $325 = ((($1)) + 164|0);
 $326 = HEAP32[$325>>2]|0;
 $327 = ($326|0)==(0|0);
 $328 = HEAP32[$err>>2]|0;
 $329 = ($328|0)!=(0);
 $or$cond29 = $327 | $329;
 if ($or$cond29) {
  (_printf(16762,$vararg_buffer93)|0);
  _exit(1);
  // unreachable;
 }
 $330 = (__ZN10b2CLDevice8instanceEv()|0);
 $331 = ((($1)) + 164|0);
 $332 = ((($1)) + 324|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($330,$331,$332);
 $333 = ((($1)) + 16|0);
 $334 = HEAP32[$333>>2]|0;
 $335 = (_clCreateKernel(($334|0),(16938|0),($err|0))|0);
 $336 = ((($1)) + 168|0);
 HEAP32[$336>>2] = $335;
 $337 = ((($1)) + 168|0);
 $338 = HEAP32[$337>>2]|0;
 $339 = ($338|0)==(0|0);
 $340 = HEAP32[$err>>2]|0;
 $341 = ($340|0)!=(0);
 $or$cond31 = $339 | $341;
 if ($or$cond31) {
  (_printf(16762,$vararg_buffer95)|0);
  _exit(1);
  // unreachable;
 }
 $342 = (__ZN10b2CLDevice8instanceEv()|0);
 $343 = ((($1)) + 168|0);
 $344 = ((($1)) + 328|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($342,$343,$344);
 $345 = ((($1)) + 16|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = (_clCreateKernel(($346|0),(16965|0),($err|0))|0);
 $348 = ((($1)) + 172|0);
 HEAP32[$348>>2] = $347;
 $349 = ((($1)) + 172|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = ($350|0)==(0|0);
 $352 = HEAP32[$err>>2]|0;
 $353 = ($352|0)!=(0);
 $or$cond33 = $351 | $353;
 if ($or$cond33) {
  (_printf(16762,$vararg_buffer97)|0);
  _exit(1);
  // unreachable;
 }
 $354 = (__ZN10b2CLDevice8instanceEv()|0);
 $355 = ((($1)) + 172|0);
 $356 = ((($1)) + 332|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($354,$355,$356);
 $357 = (__ZL15shrFindFilePathPKcPv_288(16979,0)|0);
 $358 = (__ZL18b2clLoadProgSourcePKcS0_Pj_290($357,19137,$sourceLen)|0);
 HEAP32[$source>>2] = $358;
 $359 = HEAP32[$source>>2]|0;
 $360 = ($359|0)==(0|0);
 if ($360) {
  __Z5b2LogPKcz(17026,$vararg_buffer99);
 }
 $361 = (__ZN10b2CLDevice8instanceEv()|0);
 $362 = (__ZNK10b2CLDevice10GetContextEv($361)|0);
 $363 = (_clCreateProgramWithSource(($362|0),1,($source|0),(0|0),($err|0))|0);
 $364 = ((($1)) + 20|0);
 HEAP32[$364>>2] = $363;
 $365 = ((($1)) + 20|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = ($366|0)!=(0|0);
 if (!($367)) {
  (_printf(17102,$vararg_buffer101)|0);
  _exit(1);
  // unreachable;
 }
 $368 = ((($1)) + 20|0);
 $369 = HEAP32[$368>>2]|0;
 $370 = (_clBuildProgram(($369|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $370;
 $371 = HEAP32[$err>>2]|0;
 $372 = ($371|0)!=(0);
 if ($372) {
  (_printf(19260,$vararg_buffer103)|0);
  $373 = ((($1)) + 20|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (__ZN10b2CLDevice8instanceEv()|0);
  $376 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($375)|0);
  (_clGetProgramBuildInfo(($374|0),($376|0),4483,30000,($buffer3|0),($len2|0))|0);
  HEAP32[$vararg_buffer105>>2] = $buffer3;
  (_printf(19304,$vararg_buffer105)|0);
  _exit(1);
  // unreachable;
 }
 $377 = ((($1)) + 20|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = (_clCreateKernel(($378|0),(17167|0),($err|0))|0);
 $380 = ((($1)) + 176|0);
 HEAP32[$380>>2] = $379;
 $381 = ((($1)) + 176|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = ($382|0)==(0|0);
 $384 = HEAP32[$err>>2]|0;
 $385 = ($384|0)!=(0);
 $or$cond35 = $383 | $385;
 if ($or$cond35) {
  (_printf(17185,$vararg_buffer108)|0);
  _exit(1);
  // unreachable;
 }
 $386 = ((($1)) + 20|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = (_clCreateKernel(($387|0),(17238|0),($err|0))|0);
 $389 = ((($1)) + 180|0);
 HEAP32[$389>>2] = $388;
 $390 = ((($1)) + 180|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = ($391|0)==(0|0);
 $393 = HEAP32[$err>>2]|0;
 $394 = ($393|0)!=(0);
 $or$cond37 = $392 | $394;
 if ($or$cond37) {
  (_printf(17262,$vararg_buffer110)|0);
  _exit(1);
  // unreachable;
 }
 $395 = ((($1)) + 20|0);
 $396 = HEAP32[$395>>2]|0;
 $397 = (_clCreateKernel(($396|0),(17321|0),($err|0))|0);
 $398 = ((($1)) + 184|0);
 HEAP32[$398>>2] = $397;
 $399 = ((($1)) + 184|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = ($400|0)==(0|0);
 $402 = HEAP32[$err>>2]|0;
 $403 = ($402|0)!=(0);
 $or$cond39 = $401 | $403;
 if ($or$cond39) {
  (_printf(17262,$vararg_buffer112)|0);
  _exit(1);
  // unreachable;
 }
 $404 = ((($1)) + 20|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = (_clCreateKernel(($405|0),(17350|0),($err|0))|0);
 $407 = ((($1)) + 188|0);
 HEAP32[$407>>2] = $406;
 $408 = ((($1)) + 188|0);
 $409 = HEAP32[$408>>2]|0;
 $410 = ($409|0)==(0|0);
 $411 = HEAP32[$err>>2]|0;
 $412 = ($411|0)!=(0);
 $or$cond41 = $410 | $412;
 if ($or$cond41) {
  (_printf(17262,$vararg_buffer114)|0);
  _exit(1);
  // unreachable;
 }
 $i4 = 1;
 while(1) {
  $413 = $i4;
  $414 = ($413|0)<(11);
  if (!($414)) {
   break;
  }
  $415 = $i4;
  do {
   switch ($415|0) {
   case 3:  {
    $416 = ((($1)) + 20|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = (_clCreateKernel(($417|0),(17392|0),($err|0))|0);
    $419 = $i4;
    $420 = ((($1)) + 192|0);
    $421 = (($420) + ($419<<2)|0);
    HEAP32[$421>>2] = $418;
    break;
   }
   case 1:  {
    $422 = ((($1)) + 20|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = (_clCreateKernel(($423|0),(17429|0),($err|0))|0);
    $425 = $i4;
    $426 = ((($1)) + 192|0);
    $427 = (($426) + ($425<<2)|0);
    HEAP32[$427>>2] = $424;
    break;
   }
   case 2:  {
    $428 = ((($1)) + 20|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = (_clCreateKernel(($429|0),(17466|0),($err|0))|0);
    $431 = $i4;
    $432 = ((($1)) + 192|0);
    $433 = (($432) + ($431<<2)|0);
    HEAP32[$433>>2] = $430;
    break;
   }
   case 6:  {
    $434 = ((($1)) + 20|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = (_clCreateKernel(($435|0),(17504|0),($err|0))|0);
    $437 = $i4;
    $438 = ((($1)) + 192|0);
    $439 = (($438) + ($437<<2)|0);
    HEAP32[$439>>2] = $436;
    break;
   }
   case 4:  {
    $440 = ((($1)) + 20|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = (_clCreateKernel(($441|0),(17537|0),($err|0))|0);
    $443 = $i4;
    $444 = ((($1)) + 192|0);
    $445 = (($444) + ($443<<2)|0);
    HEAP32[$445>>2] = $442;
    break;
   }
   case 10:  {
    $446 = ((($1)) + 20|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = (_clCreateKernel(($447|0),(17572|0),($err|0))|0);
    $449 = $i4;
    $450 = ((($1)) + 192|0);
    $451 = (($450) + ($449<<2)|0);
    HEAP32[$451>>2] = $448;
    break;
   }
   case 7:  {
    $452 = ((($1)) + 20|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (_clCreateKernel(($453|0),(17605|0),($err|0))|0);
    $455 = $i4;
    $456 = ((($1)) + 192|0);
    $457 = (($456) + ($455<<2)|0);
    HEAP32[$457>>2] = $454;
    break;
   }
   case 8:  {
    $458 = ((($1)) + 20|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = (_clCreateKernel(($459|0),(17639|0),($err|0))|0);
    $461 = $i4;
    $462 = ((($1)) + 192|0);
    $463 = (($462) + ($461<<2)|0);
    HEAP32[$463>>2] = $460;
    break;
   }
   case 5:  {
    $464 = ((($1)) + 20|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = (_clCreateKernel(($465|0),(17672|0),($err|0))|0);
    $467 = $i4;
    $468 = ((($1)) + 192|0);
    $469 = (($468) + ($467<<2)|0);
    HEAP32[$469>>2] = $466;
    break;
   }
   case 9:  {
    $470 = ((($1)) + 20|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = (_clCreateKernel(($471|0),(17706|0),($err|0))|0);
    $473 = $i4;
    $474 = ((($1)) + 192|0);
    $475 = (($474) + ($473<<2)|0);
    HEAP32[$475>>2] = $472;
    break;
   }
   default: {
   }
   }
  } while(0);
  $476 = $i4;
  $477 = ((($1)) + 192|0);
  $478 = (($477) + ($476<<2)|0);
  $479 = HEAP32[$478>>2]|0;
  $480 = ($479|0)==(0|0);
  $481 = HEAP32[$err>>2]|0;
  $482 = ($481|0)!=(0);
  $or$cond43 = $480 | $482;
  if ($or$cond43) {
   label = 98;
   break;
  }
  $483 = (__ZN10b2CLDevice8instanceEv()|0);
  $484 = $i4;
  $485 = ((($1)) + 192|0);
  $486 = (($485) + ($484<<2)|0);
  $487 = $i4;
  $488 = ((($1)) + 344|0);
  $489 = (($488) + ($487<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($483,$486,$489);
  $490 = $i4;
  $491 = (($490) + 1)|0;
  $i4 = $491;
 }
 if ((label|0) == 98) {
  (_printf(17743,$vararg_buffer116)|0);
  _exit(1);
  // unreachable;
 }
 $492 = ((($1)) + 20|0);
 $493 = HEAP32[$492>>2]|0;
 $494 = (_clCreateKernel(($493|0),(17808|0),($err|0))|0);
 $495 = ((($1)) + 428|0);
 HEAP32[$495>>2] = $494;
 $496 = ((($1)) + 428|0);
 $497 = HEAP32[$496>>2]|0;
 $498 = ($497|0)==(0|0);
 $499 = HEAP32[$err>>2]|0;
 $500 = ($499|0)!=(0);
 $or$cond45 = $498 | $500;
 if ($or$cond45) {
  (_printf(17839,$vararg_buffer118)|0);
  _exit(1);
  // unreachable;
 }
 $501 = ((($1)) + 20|0);
 $502 = HEAP32[$501>>2]|0;
 $503 = (_clCreateKernel(($502|0),(17900|0),($err|0))|0);
 $504 = ((($1)) + 440|0);
 HEAP32[$504>>2] = $503;
 $505 = ((($1)) + 440|0);
 $506 = HEAP32[$505>>2]|0;
 $507 = ($506|0)==(0|0);
 $508 = HEAP32[$err>>2]|0;
 $509 = ($508|0)!=(0);
 $or$cond47 = $507 | $509;
 if ($or$cond47) {
  (_printf(17928,$vararg_buffer120)|0);
  _exit(1);
  // unreachable;
 }
 $510 = ((($1)) + 20|0);
 $511 = HEAP32[$510>>2]|0;
 $512 = (_clCreateKernel(($511|0),(17965|0),($err|0))|0);
 $513 = ((($1)) + 432|0);
 HEAP32[$513>>2] = $512;
 $514 = ((($1)) + 432|0);
 $515 = HEAP32[$514>>2]|0;
 $516 = ($515|0)==(0|0);
 $517 = HEAP32[$err>>2]|0;
 $518 = ($517|0)!=(0);
 $or$cond49 = $516 | $518;
 if ($or$cond49) {
  (_printf(17981,$vararg_buffer122)|0);
  _exit(1);
  // unreachable;
 }
 $519 = ((($1)) + 20|0);
 $520 = HEAP32[$519>>2]|0;
 $521 = (_clCreateKernel(($520|0),(18036|0),($err|0))|0);
 $522 = ((($1)) + 436|0);
 HEAP32[$522>>2] = $521;
 $523 = ((($1)) + 436|0);
 $524 = HEAP32[$523>>2]|0;
 $525 = ($524|0)==(0|0);
 $526 = HEAP32[$err>>2]|0;
 $527 = ($526|0)!=(0);
 $or$cond51 = $525 | $527;
 if ($or$cond51) {
  (_printf(18052,$vararg_buffer124)|0);
  _exit(1);
  // unreachable;
 }
 $528 = ((($1)) + 20|0);
 $529 = HEAP32[$528>>2]|0;
 $530 = (_clCreateKernel(($529|0),(18107|0),($err|0))|0);
 $531 = ((($1)) + 444|0);
 HEAP32[$531>>2] = $530;
 $532 = ((($1)) + 444|0);
 $533 = HEAP32[$532>>2]|0;
 $534 = ($533|0)==(0|0);
 $535 = HEAP32[$err>>2]|0;
 $536 = ($535|0)!=(0);
 $or$cond53 = $534 | $536;
 if ($or$cond53) {
  (_printf(18118,$vararg_buffer126)|0);
  _exit(1);
  // unreachable;
 }
 $537 = ((($1)) + 20|0);
 $538 = HEAP32[$537>>2]|0;
 $539 = (_clCreateKernel(($538|0),(18168|0),($err|0))|0);
 $540 = ((($1)) + 236|0);
 HEAP32[$540>>2] = $539;
 $541 = ((($1)) + 236|0);
 $542 = HEAP32[$541>>2]|0;
 $543 = ($542|0)==(0|0);
 $544 = HEAP32[$err>>2]|0;
 $545 = ($544|0)!=(0);
 $or$cond55 = $543 | $545;
 if ($or$cond55) {
  (_printf(17262,$vararg_buffer128)|0);
  _exit(1);
  // unreachable;
 }
 $546 = (__ZN10b2CLDevice8instanceEv()|0);
 $547 = ((($1)) + 176|0);
 $548 = ((($1)) + 336|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($546,$547,$548);
 $549 = (__ZN10b2CLDevice8instanceEv()|0);
 $550 = ((($1)) + 180|0);
 $551 = ((($1)) + 340|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($549,$550,$551);
 $552 = (__ZN10b2CLDevice8instanceEv()|0);
 $553 = ((($1)) + 236|0);
 $554 = ((($1)) + 388|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($552,$553,$554);
 $555 = ((($1)) + 612|0);
 HEAP32[$555>>2] = 0;
 $556 = ((($1)) + 608|0);
 HEAP32[$556>>2] = 0;
 $557 = ((($1)) + 620|0);
 HEAP32[$557>>2] = 0;
 $558 = ((($1)) + 616|0);
 HEAP32[$558>>2] = 0;
 $559 = ((($1)) + 520|0);
 HEAP32[$559>>2] = 0;
 $560 = ((($1)) + 524|0);
 HEAP32[$560>>2] = 0;
 $561 = ((($1)) + 560|0);
 HEAP32[$561>>2] = 0;
 $562 = ((($1)) + 564|0);
 HEAP32[$562>>2] = 0;
 $563 = ((($1)) + 568|0);
 HEAP32[$563>>2] = 0;
 $564 = ((($1)) + 572|0);
 HEAP32[$564>>2] = 0;
 $565 = ((($1)) + 580|0);
 HEAP32[$565>>2] = 0;
 $566 = ((($1)) + 584|0);
 HEAP32[$566>>2] = 0;
 $567 = ((($1)) + 588|0);
 HEAP32[$567>>2] = 0;
 $568 = ((($1)) + 592|0);
 HEAP32[$568>>2] = 0;
 $569 = ((($1)) + 4|0);
 HEAP32[$569>>2] = 0;
 $570 = ((($1)) + 8|0);
 HEAP32[$570>>2] = 0;
 $571 = ((($1)) + 504|0);
 HEAP32[$571>>2] = 0;
 $572 = ((($1)) + 512|0);
 HEAP32[$572>>2] = 0;
 $573 = ((($1)) + 508|0);
 HEAP32[$573>>2] = 0;
 $574 = ((($1)) + 500|0);
 HEAP32[$574>>2] = 0;
 $575 = ((($1)) + 492|0);
 HEAP32[$575>>2] = 0;
 $576 = ((($1)) + 496|0);
 HEAP32[$576>>2] = 0;
 $577 = ((($1)) + 488|0);
 HEAP32[$577>>2] = 0;
 $578 = ((($1)) + 400|0);
 HEAP32[$578>>2] = 0;
 $579 = ((($1)) + 392|0);
 HEAP32[$579>>2] = 0;
 $580 = ((($1)) + 424|0);
 HEAP32[$580>>2] = 0;
 $581 = ((($1)) + 408|0);
 HEAP32[$581>>2] = 0;
 $582 = ((($1)) + 404|0);
 HEAP32[$582>>2] = 0;
 $583 = ((($1)) + 420|0);
 HEAP32[$583>>2] = 0;
 $584 = ((($1)) + 412|0);
 HEAP32[$584>>2] = 0;
 $585 = ((($1)) + 480|0);
 HEAP32[$585>>2] = 0;
 $586 = ((($1)) + 476|0);
 HEAP32[$586>>2] = 0;
 $587 = ((($1)) + 472|0);
 HEAP32[$587>>2] = 0;
 $588 = ((($1)) + 468|0);
 HEAP32[$588>>2] = 0;
 $589 = ((($1)) + 464|0);
 HEAP32[$589>>2] = 0;
 $590 = ((($1)) + 460|0);
 HEAP32[$590>>2] = 0;
 $591 = ((($1)) + 456|0);
 HEAP32[$591>>2] = 0;
 $592 = ((($1)) + 452|0);
 HEAP32[$592>>2] = 0;
 $593 = ((($1)) + 448|0);
 HEAP32[$593>>2] = 0;
 $594 = ((($1)) + 484|0);
 HEAP32[$594>>2] = 0;
 $595 = ((($1)) + 396|0);
 HEAP32[$595>>2] = 0;
 $596 = ((($1)) + 12|0);
 HEAPF32[$596>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv_288($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj_290($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30456]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30456)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 32608;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(32608|0),(___dso_handle|0))|0);
  }
 }
 $76 = 32608;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 40126;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32608|0),(40126|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32608|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 32608;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 32608;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10b2CLSolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[11781]|0;
 $3 = $2&1;
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ((($1)) + 560|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = ((($1)) + 560|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
 }
 $10 = ((($1)) + 564|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($1)) + 564|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   __ZdaPv($14);
  }
 }
 $16 = ((($1)) + 568|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($1)) + 568|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = ((($1)) + 572|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = ((($1)) + 572|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   __ZdaPv($26);
  }
 }
 $28 = ((($1)) + 580|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = ((($1)) + 580|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   __ZdaPv($32);
  }
 }
 $34 = ((($1)) + 584|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = ((($1)) + 584|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = ((($1)) + 588|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = ((($1)) + 588|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = ((($1)) + 592|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = ((($1)) + 592|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0|0);
  if (!($51)) {
   __ZdaPv($50);
  }
 }
 $52 = ((($1)) + 392|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = (__ZN10b2CLDevice8instanceEv()|0);
  $56 = ((($1)) + 392|0);
  $57 = HEAP32[$56>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($55,$57);
 }
 $58 = ((($1)) + 400|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = (__ZN10b2CLDevice8instanceEv()|0);
  $62 = ((($1)) + 400|0);
  $63 = HEAP32[$62>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($61,$63);
 }
 $64 = ((($1)) + 484|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = (__ZN10b2CLDevice8instanceEv()|0);
  $68 = ((($1)) + 484|0);
  $69 = HEAP32[$68>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($67,$69);
 }
 $70 = ((($1)) + 488|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = (__ZN10b2CLDevice8instanceEv()|0);
  $74 = ((($1)) + 488|0);
  $75 = HEAP32[$74>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($73,$75);
 }
 $76 = ((($1)) + 496|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = (__ZN10b2CLDevice8instanceEv()|0);
  $80 = ((($1)) + 496|0);
  $81 = HEAP32[$80>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($79,$81);
 }
 $82 = ((($1)) + 492|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0|0);
 if ($84) {
  $85 = (__ZN10b2CLDevice8instanceEv()|0);
  $86 = ((($1)) + 492|0);
  $87 = HEAP32[$86>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($85,$87);
 }
 $88 = ((($1)) + 500|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = (__ZN10b2CLDevice8instanceEv()|0);
  $92 = ((($1)) + 500|0);
  $93 = HEAP32[$92>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($91,$93);
 }
 $94 = ((($1)) + 504|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = (__ZN10b2CLDevice8instanceEv()|0);
  $98 = ((($1)) + 504|0);
  $99 = HEAP32[$98>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($97,$99);
 }
 $100 = ((($1)) + 404|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = (__ZN10b2CLDevice8instanceEv()|0);
  $104 = ((($1)) + 404|0);
  $105 = HEAP32[$104>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($103,$105);
 }
 $106 = ((($1)) + 408|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = (__ZN10b2CLDevice8instanceEv()|0);
  $110 = ((($1)) + 408|0);
  $111 = HEAP32[$110>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($109,$111);
 }
 $112 = ((($1)) + 412|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = (__ZN10b2CLDevice8instanceEv()|0);
  $116 = ((($1)) + 412|0);
  $117 = HEAP32[$116>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($115,$117);
 }
 $118 = ((($1)) + 420|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 if ($120) {
  $121 = (__ZN10b2CLDevice8instanceEv()|0);
  $122 = ((($1)) + 420|0);
  $123 = HEAP32[$122>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($121,$123);
 }
 $124 = ((($1)) + 424|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = (__ZN10b2CLDevice8instanceEv()|0);
  $128 = ((($1)) + 424|0);
  $129 = HEAP32[$128>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($127,$129);
 }
 $130 = ((($1)) + 448|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = (__ZN10b2CLDevice8instanceEv()|0);
  $134 = ((($1)) + 448|0);
  $135 = HEAP32[$134>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($133,$135);
 }
 $136 = ((($1)) + 452|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = (__ZN10b2CLDevice8instanceEv()|0);
  $140 = ((($1)) + 452|0);
  $141 = HEAP32[$140>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($139,$141);
 }
 $142 = ((($1)) + 460|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = (__ZN10b2CLDevice8instanceEv()|0);
  $146 = ((($1)) + 460|0);
  $147 = HEAP32[$146>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($145,$147);
 }
 $148 = ((($1)) + 464|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = (__ZN10b2CLDevice8instanceEv()|0);
  $152 = ((($1)) + 464|0);
  $153 = HEAP32[$152>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($151,$153);
 }
 $154 = ((($1)) + 456|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = (__ZN10b2CLDevice8instanceEv()|0);
  $158 = ((($1)) + 456|0);
  $159 = HEAP32[$158>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($157,$159);
 }
 $160 = ((($1)) + 468|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ($161|0)!=(0|0);
 if ($162) {
  $163 = (__ZN10b2CLDevice8instanceEv()|0);
  $164 = ((($1)) + 468|0);
  $165 = HEAP32[$164>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($163,$165);
 }
 $166 = ((($1)) + 472|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if (!($168)) {
  STACKTOP = sp;return;
 }
 $169 = (__ZN10b2CLDevice8instanceEv()|0);
 $170 = ((($1)) + 472|0);
 $171 = HEAP32[$170>>2]|0;
 __ZN10b2CLDevice9freeArrayEP7_cl_mem($169,$171);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver9SetValuesEii6b2Vec2ff($this,$bodyCount,$contactCount,$gravity,$m_dtInput,$dtRatio) {
 $this = $this|0;
 $bodyCount = $bodyCount|0;
 $contactCount = $contactCount|0;
 $gravity = $gravity|0;
 $m_dtInput = +$m_dtInput;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bodyCount;
 $2 = $contactCount;
 $3 = $m_dtInput;
 $4 = $dtRatio;
 $5 = $0;
 $6 = $1;
 $7 = ((($5)) + 596|0);
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = ((($5)) + 600|0);
 HEAP32[$9>>2] = $8;
 $10 = +HEAPF32[$gravity>>2];
 $11 = ((($5)) + 624|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($gravity)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($5)) + 624|0);
 $15 = ((($14)) + 4|0);
 HEAPF32[$15>>2] = $13;
 $16 = $3;
 $17 = ((($5)) + 632|0);
 HEAPF32[$17>>2] = $16;
 $18 = $4;
 $19 = ((($5)) + 636|0);
 HEAPF32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function __ZN9b2Contact11GetManifoldEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10b2CLSolver20b2CLInitializeSolverEPP6b2BodyPP9b2ContactP10b2VelocityP10b2Positionii6b2Vec2fRK16b2ContactManagerS5_P27b2ContactVelocityConstraintP27b2ContactPositionConstraint($this,$m_bodiesInput,$m_contactsInput,$m_velocitiesInput,$m_positionsInput,$m_bodyCountInput,$m_contactCountInput,$m_gravityInput,$m_dtInput,$contactManager,$m_islandContacts,$m_velocitiesConstraintsInput,$m_positionsConstraintsInput) {
 $this = $this|0;
 $m_bodiesInput = $m_bodiesInput|0;
 $m_contactsInput = $m_contactsInput|0;
 $m_velocitiesInput = $m_velocitiesInput|0;
 $m_positionsInput = $m_positionsInput|0;
 $m_bodyCountInput = $m_bodyCountInput|0;
 $m_contactCountInput = $m_contactCountInput|0;
 $m_gravityInput = $m_gravityInput|0;
 $m_dtInput = +$m_dtInput;
 $contactManager = $contactManager|0;
 $m_islandContacts = $m_islandContacts|0;
 $m_velocitiesConstraintsInput = $m_velocitiesConstraintsInput|0;
 $m_positionsConstraintsInput = $m_positionsConstraintsInput|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $testColorTimer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $testColorTimer = sp + 48|0;
 $0 = $this;
 $1 = $m_bodiesInput;
 $2 = $m_contactsInput;
 $3 = $m_velocitiesInput;
 $4 = $m_positionsInput;
 $5 = $m_bodyCountInput;
 $6 = $m_contactCountInput;
 $7 = $m_dtInput;
 $8 = $contactManager;
 $9 = $m_islandContacts;
 $10 = $m_velocitiesConstraintsInput;
 $11 = $m_positionsConstraintsInput;
 $12 = $0;
 $13 = ((($12)) + 596|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<=(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = ((($12)) + 548|0);
 HEAP32[$17>>2] = $16;
 $18 = $3;
 $19 = ((($12)) + 544|0);
 HEAP32[$19>>2] = $18;
 $20 = $1;
 $21 = ((($12)) + 540|0);
 HEAP32[$21>>2] = $20;
 __ZN10b2CLSolver22CreateBuffersForBodiesEv($12);
 $22 = ((($12)) + 600|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<=(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $2;
 $26 = ((($12)) + 536|0);
 HEAP32[$26>>2] = $25;
 $27 = $10;
 $28 = ((($12)) + 552|0);
 HEAP32[$28>>2] = $27;
 $29 = $11;
 $30 = ((($12)) + 556|0);
 HEAP32[$30>>2] = $29;
 __ZN10b2CLSolver24CreateBuffersForContactsEv($12);
 __ZN7b2TimerC2Ev($testColorTimer);
 $31 = $9;
 __ZN10b2CLSolver25ComputeColoringOfContactsEPP9b2Contact($12,$31);
 __ZN10b2CLSolver24CopyDataToGPUForContactsEv($12);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver22CreateBuffersForBodiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 608|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 596|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 392|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (__ZN10b2CLDevice8instanceEv()|0);
  $11 = ((($1)) + 392|0);
  $12 = HEAP32[$11>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
 }
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = ((($1)) + 596|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*12)|0;
 $17 = (__ZN10b2CLDevice13allocateArrayEjb($13,$16,0)|0);
 $18 = ((($1)) + 392|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 400|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = ((($1)) + 400|0);
  $24 = HEAP32[$23>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($22,$24);
 }
 $25 = (__ZN10b2CLDevice8instanceEv()|0);
 $26 = ((($1)) + 596|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27*12)|0;
 $29 = (__ZN10b2CLDevice13allocateArrayEjb($25,$28,0)|0);
 $30 = ((($1)) + 400|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 484|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = (__ZN10b2CLDevice8instanceEv()|0);
  $35 = ((($1)) + 484|0);
  $36 = HEAP32[$35>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($34,$36);
 }
 $37 = (__ZN10b2CLDevice8instanceEv()|0);
 $38 = ((($1)) + 596|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39*12)|0;
 $41 = (__ZN10b2CLDevice13allocateArrayEjb($37,$40,0)|0);
 $42 = ((($1)) + 484|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($1)) + 596|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($1)) + 608|0);
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver24CreateBuffersForContactsEv($this) {
 $this = $this|0;
 var $$arith = 0, $$arith10 = 0, $$arith14 = 0, $$arith18 = 0, $$arith2 = 0, $$arith22 = 0, $$arith26 = 0, $$arith6 = 0, $$overflow = 0, $$overflow11 = 0, $$overflow15 = 0, $$overflow19 = 0, $$overflow23 = 0, $$overflow27 = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 612|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 600|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ((($3)) + 560|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = ((($3)) + 560|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   __ZdaPv($13);
  }
 }
 $15 = ((($3)) + 600|0);
 $16 = HEAP32[$15>>2]|0;
 $$arith26 = ($16*40)|0;
 $$overflow27 = ($16>>>0)>(107374182);
 $17 = $$overflow27 ? -1 : $$arith26;
 $18 = (__Znaj($17)|0);
 $19 = ((($3)) + 560|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($3)) + 564|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = ((($3)) + 564|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   __ZdaPv($24);
  }
 }
 $26 = ((($3)) + 600|0);
 $27 = HEAP32[$26>>2]|0;
 $$arith22 = ($27*56)|0;
 $$overflow23 = ($27>>>0)>(76695844);
 $28 = $$overflow23 ? -1 : $$arith22;
 $29 = (__Znaj($28)|0);
 $30 = ((($3)) + 564|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($3)) + 568|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = ((($3)) + 568|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if (!($36)) {
   __ZdaPv($35);
  }
 }
 $37 = ((($3)) + 600|0);
 $38 = HEAP32[$37>>2]|0;
 $$arith18 = $38<<4;
 $$overflow19 = ($38>>>0)>(268435455);
 $39 = $$overflow19 ? -1 : $$arith18;
 $40 = (__Znaj($39)|0);
 $41 = ((($3)) + 568|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($3)) + 572|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = ((($3)) + 572|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if (!($47)) {
   __ZdaPv($46);
  }
 }
 $48 = ((($3)) + 600|0);
 $49 = HEAP32[$48>>2]|0;
 $$arith14 = $49<<6;
 $$overflow15 = ($49>>>0)>(67108863);
 $50 = $$overflow15 ? -1 : $$arith14;
 $51 = (__Znaj($50)|0);
 $52 = ($49|0)==(0);
 L20: do {
  if (!($52)) {
   $53 = (($51) + ($49<<6)|0);
   $54 = $51;
   while(1) {
    __THREW__ = 0;
    invoke_vi(431,($54|0));
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     break;
    }
    $57 = ((($54)) + 64|0);
    $58 = ($57|0)==($53|0);
    if ($58) {
     break L20;
    } else {
     $54 = $57;
    }
   }
   $66 = ___cxa_find_matching_catch_2()|0;
   $67 = tempRet0;
   $1 = $66;
   $2 = $67;
   __ZdaPv($51);
   $68 = $1;
   $69 = $2;
   ___resumeException($68|0);
   // unreachable;
  }
 } while(0);
 $59 = ((($3)) + 572|0);
 HEAP32[$59>>2] = $51;
 $60 = ((($3)) + 580|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = ((($3)) + 580|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   __ZdaPv($64);
  }
 }
 $70 = ((($3)) + 600|0);
 $71 = HEAP32[$70>>2]|0;
 $$arith10 = $71<<2;
 $$overflow11 = ($71>>>0)>(1073741823);
 $72 = $$overflow11 ? -1 : $$arith10;
 $73 = (__Znaj($72)|0);
 $74 = ((($3)) + 580|0);
 HEAP32[$74>>2] = $73;
 $75 = ((($3)) + 584|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0|0);
 if ($77) {
  $78 = ((($3)) + 584|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   __ZdaPv($79);
  }
 }
 $81 = ((($3)) + 600|0);
 $82 = HEAP32[$81>>2]|0;
 $$arith6 = $82<<2;
 $$overflow7 = ($82>>>0)>(1073741823);
 $83 = $$overflow7 ? -1 : $$arith6;
 $84 = (__Znaj($83)|0);
 $85 = ((($3)) + 584|0);
 HEAP32[$85>>2] = $84;
 $86 = ((($3)) + 588|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = ((($3)) + 588|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(0|0);
  if (!($91)) {
   __ZdaPv($90);
  }
 }
 $92 = ((($3)) + 600|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + 1)|0;
 $$arith2 = $94<<2;
 $$overflow3 = ($94>>>0)>(1073741823);
 $95 = $$overflow3 ? -1 : $$arith2;
 $96 = (__Znaj($95)|0);
 $97 = ((($3)) + 588|0);
 HEAP32[$97>>2] = $96;
 $98 = ((($3)) + 592|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)!=(0|0);
 if ($100) {
  $101 = ((($3)) + 592|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0|0);
  if (!($103)) {
   __ZdaPv($102);
  }
 }
 $104 = ((($3)) + 600|0);
 $105 = HEAP32[$104>>2]|0;
 $$arith = $105<<2;
 $$overflow = ($105>>>0)>(1073741823);
 $106 = $$overflow ? -1 : $$arith;
 $107 = (__Znaj($106)|0);
 $108 = ((($3)) + 592|0);
 HEAP32[$108>>2] = $107;
 $109 = ((($3)) + 488|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $112 = (__ZN10b2CLDevice8instanceEv()|0);
  $113 = ((($3)) + 488|0);
  $114 = HEAP32[$113>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($112,$114);
 }
 $115 = (__ZN10b2CLDevice8instanceEv()|0);
 $116 = ((($3)) + 600|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117*40)|0;
 $119 = (__ZN10b2CLDevice13allocateArrayEjb($115,$118,0)|0);
 $120 = ((($3)) + 488|0);
 HEAP32[$120>>2] = $119;
 $121 = ((($3)) + 496|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = (__ZN10b2CLDevice8instanceEv()|0);
  $125 = ((($3)) + 496|0);
  $126 = HEAP32[$125>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($124,$126);
 }
 $127 = (__ZN10b2CLDevice8instanceEv()|0);
 $128 = ((($3)) + 600|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129*56)|0;
 $131 = (__ZN10b2CLDevice13allocateArrayEjb($127,$130,0)|0);
 $132 = ((($3)) + 496|0);
 HEAP32[$132>>2] = $131;
 $133 = ((($3)) + 500|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = (__ZN10b2CLDevice8instanceEv()|0);
  $137 = ((($3)) + 500|0);
  $138 = HEAP32[$137>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($136,$138);
 }
 $139 = (__ZN10b2CLDevice8instanceEv()|0);
 $140 = ((($3)) + 600|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141<<6;
 $143 = (__ZN10b2CLDevice13allocateArrayEjb($139,$142,0)|0);
 $144 = ((($3)) + 500|0);
 HEAP32[$144>>2] = $143;
 $145 = ((($3)) + 492|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = (__ZN10b2CLDevice8instanceEv()|0);
  $149 = ((($3)) + 492|0);
  $150 = HEAP32[$149>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($148,$150);
 }
 $151 = (__ZN10b2CLDevice8instanceEv()|0);
 $152 = ((($3)) + 600|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153<<4;
 $155 = (__ZN10b2CLDevice13allocateArrayEjb($151,$154,0)|0);
 $156 = ((($3)) + 492|0);
 HEAP32[$156>>2] = $155;
 $157 = ((($3)) + 504|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = (__ZN10b2CLDevice8instanceEv()|0);
  $161 = ((($3)) + 504|0);
  $162 = HEAP32[$161>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($160,$162);
 }
 $163 = (__ZN10b2CLDevice8instanceEv()|0);
 $164 = ((($3)) + 600|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = $165<<2;
 $167 = (__ZN10b2CLDevice13allocateArrayEjb($163,$166,0)|0);
 $168 = ((($3)) + 504|0);
 HEAP32[$168>>2] = $167;
 $169 = ((($3)) + 600|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ((($3)) + 612|0);
 HEAP32[$171>>2] = $170;
 STACKTOP = sp;return;
}
function __ZN12clb2ManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = ((($1)) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = ((($1)) + 24|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = ((($1)) + 48|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = ((($1)) + 56|0);
 __ZN6b2Vec2C2Ev($6);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver25ComputeColoringOfContactsEPP9b2Contact($this,$m_islandContacts) {
 $this = $this|0;
 $m_islandContacts = $m_islandContacts|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0, $coloredContactIndex = 0, $contactColors = 0, $freezed_body = 0, $globalIndex = 0, $i = 0, $i1 = 0;
 var $indexA = 0, $indexB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_islandContacts;
 $2 = $0;
 $3 = ((($2)) + 596|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 $6 = $5 ? -1 : $4;
 $7 = (__Znaj($6)|0);
 $freezed_body = $7;
 $8 = ((($2)) + 600|0);
 $9 = HEAP32[$8>>2]|0;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $contactColors = $11;
 $12 = $freezed_body;
 $13 = ((($2)) + 596|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 _memset(($12|0),0,($15|0))|0;
 $16 = $contactColors;
 $17 = ((($2)) + 600|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 _memset(($16|0),0,($19|0))|0;
 $color = 1;
 $coloredContactIndex = 0;
 $20 = ((($2)) + 588|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$21>>2] = 0;
 while(1) {
  $22 = $coloredContactIndex;
  $23 = ((($2)) + 600|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = ((($2)) + 600|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = $contactColors;
   $32 = (($31) + ($30<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $35 = $i;
    $36 = ((($2)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($35<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $globalIndex = $39;
    $40 = $globalIndex;
    $41 = $40<<2;
    $42 = (($41) + 2)|0;
    $43 = ((($2)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($42<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $indexA = $46;
    $47 = $globalIndex;
    $48 = $47<<2;
    $49 = (($48) + 3)|0;
    $50 = ((($2)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($49<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $indexB = $53;
    $54 = $indexA;
    $55 = $freezed_body;
    $56 = (($55) + ($54)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&1;
    if (!($58)) {
     $59 = $indexB;
     $60 = $freezed_body;
     $61 = (($60) + ($59)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&1;
     if (!($63)) {
      $64 = $color;
      $65 = $i;
      $66 = $contactColors;
      $67 = (($66) + ($65<<2)|0);
      HEAP32[$67>>2] = $64;
      $68 = $coloredContactIndex;
      $69 = $i;
      $70 = ((($2)) + 580|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + ($69<<2)|0);
      HEAP32[$72>>2] = $68;
      $73 = $globalIndex;
      $74 = $coloredContactIndex;
      $75 = ((($2)) + 584|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) + ($74<<2)|0);
      HEAP32[$77>>2] = $73;
      $78 = $coloredContactIndex;
      $79 = (($78) + 1)|0;
      $coloredContactIndex = $79;
      $80 = $indexA;
      $81 = ((($2)) + 540|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + ($80<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (__ZNK6b2Body7GetTypeEv($84)|0);
      $86 = ($85|0)==(2);
      if ($86) {
       $87 = $indexA;
       $88 = $freezed_body;
       $89 = (($88) + ($87)|0);
       HEAP8[$89>>0] = 1;
      }
      $90 = $indexB;
      $91 = ((($2)) + 540|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($92) + ($90<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (__ZNK6b2Body7GetTypeEv($94)|0);
      $96 = ($95|0)==(2);
      if ($96) {
       $97 = $indexB;
       $98 = $freezed_body;
       $99 = (($98) + ($97)|0);
       HEAP8[$99>>0] = 1;
      }
     }
    }
   }
   $100 = $i;
   $101 = (($100) + 1)|0;
   $i = $101;
  }
  $102 = $color;
  $103 = (($102) + 1)|0;
  $color = $103;
  $104 = $freezed_body;
  $105 = ((($2)) + 596|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106;
  _memset(($104|0),0,($107|0))|0;
  $108 = $coloredContactIndex;
  $109 = $color;
  $110 = (($109) - 1)|0;
  $111 = ((($2)) + 588|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + ($110<<2)|0);
  HEAP32[$113>>2] = $108;
 }
 $114 = $color;
 $115 = (($114) - 1)|0;
 $116 = ((($2)) + 576|0);
 HEAP32[$116>>2] = $115;
 $117 = ((($2)) + 600|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($2)) + 576|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ((($2)) + 588|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + ($120<<2)|0);
 HEAP32[$123>>2] = $118;
 $i1 = 1;
 while(1) {
  $124 = $i1;
  $125 = ((($2)) + 576|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)<=($126|0);
  if (!($127)) {
   break;
  }
  $128 = $i1;
  $129 = ((($2)) + 588|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + ($128<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $i1;
  $134 = (($133) - 1)|0;
  $135 = ((($2)) + 588|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($134<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($132) - ($138))|0;
  $140 = $i1;
  $141 = (($140) - 1)|0;
  $142 = ((($2)) + 592|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + ($141<<2)|0);
  HEAP32[$144>>2] = $139;
  $145 = $i1;
  $146 = (($145) + 1)|0;
  $i1 = $146;
 }
 $147 = $contactColors;
 $148 = ($147|0)==(0|0);
 if (!($148)) {
  __ZdaPv($147);
 }
 $149 = $freezed_body;
 $150 = ($149|0)==(0|0);
 if ($150) {
  STACKTOP = sp;return;
 }
 __ZdaPv($149);
 STACKTOP = sp;return;
}
function __ZNK6b2Body7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10b2CLSolver24CopyDataToGPUForContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN10b2CLDevice8instanceEv()|0);
 $3 = ((($1)) + 504|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 584|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 600|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($2,$4,$6,0,$9,1);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver32CreateBuffersForSortingManifoldsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $exp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exp = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(512);
 if ($4) {
  $5 = ((($1)) + 516|0);
  HEAP32[$5>>2] = 512;
 } else {
  $6 = ((($1)) + 600|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($7|0));
  $9 = $8;
  (+_frexp($9,$exp));
  $10 = HEAP32[$exp>>2]|0;
  $11 = (($10) - 1)|0;
  $12 = 1 << $11;
  $13 = ((($1)) + 516|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($1)) + 516|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($1)) + 600|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<($17|0);
  if ($18) {
   $19 = ((($1)) + 516|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 << 1;
   HEAP32[$19>>2] = $21;
  }
 }
 $22 = ((($1)) + 520|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 516|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($23|0)<($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = ((($1)) + 508|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = (__ZN10b2CLDevice8instanceEv()|0);
  $31 = ((($1)) + 508|0);
  $32 = HEAP32[$31>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($30,$32);
 }
 $33 = (__ZN10b2CLDevice8instanceEv()|0);
 $34 = ((($1)) + 516|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35<<2;
 $37 = (__ZN10b2CLDevice13allocateArrayEjb($33,$36,0)|0);
 $38 = ((($1)) + 508|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($1)) + 512|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = (__ZN10b2CLDevice8instanceEv()|0);
  $43 = ((($1)) + 512|0);
  $44 = HEAP32[$43>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($42,$44);
 }
 $45 = (__ZN10b2CLDevice8instanceEv()|0);
 $46 = ((($1)) + 516|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47<<2;
 $49 = (__ZN10b2CLDevice13allocateArrayEjb($45,$48,0)|0);
 $50 = ((($1)) + 512|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($1)) + 516|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($1)) + 520|0);
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver27CopyResultsFromGPUForBodiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (__ZN10b2CLDevice8instanceEv()|0);
 $6 = ((($1)) + 548|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 400|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 596|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11*12)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($5,$7,$9,0,$12,1);
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = ((($1)) + 544|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 392|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 596|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19*12)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($13,$15,$17,0,$20,1);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver37b2CLInitializeJointVelocityConstraintEbf($this,$bWarmStarting,$dt) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0;
 var $colorIndex = 0, $curEvent = 0, $curr = 0, $err = 0, $event_wait_list = 0, $events = 0, $global = 0, $i = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0, $numBlocks = 0, $numContact = 0, $num_events_in_wait_list = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 97|0;
 $2 = sp + 88|0;
 $events = sp + 80|0;
 $offset = sp + 36|0;
 $length = sp + 32|0;
 $global = sp + 20|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dt;
 $4 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $i = 1;
 L1: while(1) {
  $5 = $i;
  $6 = ($5|0)<(11);
  if (!($6)) {
   label = 17;
   break;
  }
  $7 = $i;
  $8 = (__ZN14b2CLCommonData8instanceEv()|0);
  $9 = ((($8)) + 100|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $numContact = $11;
  $12 = $numContact;
  $13 = ($12|0)==(0);
  L4: do {
   if (!($13)) {
    $a1 = 0;
    $14 = $i;
    $15 = ((($4)) + 96|0);
    $16 = (($15) + ($14<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $a1;
    $19 = (($18) + 1)|0;
    $a1 = $19;
    $20 = ((($4)) + 392|0);
    $21 = (_clSetKernelArg(($17|0),($18|0),4,($20|0))|0);
    $err = $21;
    $22 = $i;
    $23 = ((($4)) + 96|0);
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $a1;
    $27 = (($26) + 1)|0;
    $a1 = $27;
    $28 = ((($4)) + 400|0);
    $29 = (_clSetKernelArg(($25|0),($26|0),4,($28|0))|0);
    $30 = $err;
    $31 = $30 | $29;
    $err = $31;
    $32 = $i;
    $33 = ((($4)) + 96|0);
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $a1;
    $37 = (($36) + 1)|0;
    $a1 = $37;
    $38 = (__ZN14b2CLCommonData8instanceEv()|0);
    $39 = ((($38)) + 72|0);
    $40 = (_clSetKernelArg(($35|0),($36|0),4,($39|0))|0);
    $41 = $err;
    $42 = $41 | $40;
    $err = $42;
    $43 = $i;
    $44 = ((($4)) + 96|0);
    $45 = (($44) + ($43<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $a1;
    $48 = (($47) + 1)|0;
    $a1 = $48;
    $49 = (__ZN14b2CLCommonData8instanceEv()|0);
    $50 = ((($49)) + 64|0);
    $51 = (_clSetKernelArg(($46|0),($47|0),4,($50|0))|0);
    $52 = $err;
    $53 = $52 | $51;
    $err = $53;
    $54 = $i;
    $55 = ((($4)) + 96|0);
    $56 = (($55) + ($54<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $a1;
    $59 = (($58) + 1)|0;
    $a1 = $59;
    $60 = (__ZN14b2CLCommonData8instanceEv()|0);
    $61 = ((($60)) + 1076|0);
    $62 = (_clSetKernelArg(($57|0),($58|0),4,($61|0))|0);
    $63 = $err;
    $64 = $63 | $62;
    $err = $64;
    $65 = $i;
    $66 = ((($4)) + 96|0);
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $a1;
    $70 = (($69) + 1)|0;
    $a1 = $70;
    $71 = (_clSetKernelArg(($68|0),($69|0),4,($1|0))|0);
    $72 = $err;
    $73 = $72 | $71;
    $err = $73;
    $74 = $i;
    $75 = ((($4)) + 96|0);
    $76 = (($75) + ($74<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $a1;
    $79 = (($78) + 1)|0;
    $a1 = $79;
    $80 = (_clSetKernelArg(($77|0),($78|0),4,($2|0))|0);
    $81 = $err;
    $82 = $81 | $80;
    $err = $82;
    $83 = $i;
    $84 = ((($4)) + 96|0);
    $85 = (($84) + ($83<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $a1;
    $88 = (($87) + 1)|0;
    $a1 = $88;
    $89 = ((($4)) + 636|0);
    $90 = (_clSetKernelArg(($86|0),($87|0),4,($89|0))|0);
    $91 = $err;
    $92 = $91 | $90;
    $err = $92;
    $93 = $i;
    $94 = (__ZN14b2CLCommonData8instanceEv()|0);
    $95 = ((($94)) + 1032|0);
    $96 = (($95) + ($93<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $maxcolor = $97;
    $colorIndex = 0;
    while(1) {
     $98 = $colorIndex;
     $99 = $maxcolor;
     $100 = ($98|0)<($99|0);
     if (!($100)) {
      break L4;
     }
     $101 = $colorIndex;
     $102 = $i;
     $103 = (__ZN14b2CLCommonData8instanceEv()|0);
     $104 = ((($103)) + 152|0);
     $105 = (($104) + (($102*80)|0)|0);
     $106 = (($105) + ($101<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     HEAP32[$offset>>2] = $107;
     $108 = $colorIndex;
     $109 = (($108) + 1)|0;
     $110 = $i;
     $111 = (__ZN14b2CLCommonData8instanceEv()|0);
     $112 = ((($111)) + 152|0);
     $113 = (($112) + (($110*80)|0)|0);
     $114 = (($113) + ($109<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = HEAP32[$offset>>2]|0;
     $117 = (($115) - ($116))|0;
     HEAP32[$length>>2] = $117;
     $118 = $curr;
     $119 = (($events) + ($118<<2)|0);
     $curEvent = $119;
     $120 = HEAP8[$1>>0]|0;
     $121 = $120&1;
     if (!($121)) {
      $122 = $numContact;
      HEAP32[$length>>2] = $122;
      $curEvent = 0;
     }
     $123 = $i;
     $124 = ((($4)) + 96|0);
     $125 = (($124) + ($123<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $a1;
     $128 = (_clSetKernelArg(($126|0),($127|0),4,($offset|0))|0);
     $129 = $err;
     $130 = $129 | $128;
     $err = $130;
     $131 = $i;
     $132 = ((($4)) + 96|0);
     $133 = (($132) + ($131<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $a1;
     $136 = (($135) + 1)|0;
     $137 = (_clSetKernelArg(($134|0),($136|0),4,($length|0))|0);
     $138 = $err;
     $139 = $138 | $137;
     $err = $139;
     $140 = $err;
     $141 = ($140|0)!=(0);
     if ($141) {
      label = 9;
      break L1;
     }
     $143 = HEAP32[$length>>2]|0;
     $144 = ((($4)) + 292|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($143) + ($145))|0;
     $147 = (($146) - 1)|0;
     $148 = ((($4)) + 292|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147>>>0) / ($149>>>0))&-1;
     $numBlocks = $150;
     $151 = $numBlocks;
     $152 = ((($4)) + 292|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = Math_imul($151, $153)|0;
     HEAP32[$global>>2] = $154;
     $155 = $noqueue;
     $156 = $155&1;
     $157 = $156 ? 0 : 1;
     $num_events_in_wait_list = $157;
     $158 = $noqueue;
     $159 = $158&1;
     $160 = $last;
     $161 = (($events) + ($160<<2)|0);
     $162 = $159 ? 0 : $161;
     $event_wait_list = $162;
     $163 = (__ZN10b2CLDevice8instanceEv()|0);
     $164 = (__ZNK10b2CLDevice15GetCommandQueueEv($163)|0);
     $165 = $i;
     $166 = ((($4)) + 96|0);
     $167 = (($166) + ($165<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($4)) + 292|0);
     $170 = $num_events_in_wait_list;
     $171 = $event_wait_list;
     $172 = $curEvent;
     $173 = (_clEnqueueNDRangeKernel(($164|0),($168|0),1,(0|0),($global|0),($169|0),($170|0),($171|0),($172|0))|0);
     $err = $173;
     $174 = $err;
     $175 = ($174|0)!=(0);
     if ($175) {
      label = 11;
      break L1;
     }
     $177 = HEAP8[$1>>0]|0;
     $178 = $177&1;
     if (!($178)) {
      break L4;
     }
     $179 = $noqueue;
     $180 = $179&1;
     if (!($180)) {
      $181 = $last;
      $182 = (($events) + ($181<<2)|0);
      $183 = HEAP32[$182>>2]|0;
      (_clReleaseEvent(($183|0))|0);
     }
     $noqueue = 0;
     $184 = $last;
     $curr = $184;
     $185 = $last;
     $186 = (1 - ($185))|0;
     $last = $186;
     $187 = $colorIndex;
     $188 = (($187) + 1)|0;
     $colorIndex = $188;
    }
   }
  } while(0);
  $189 = $i;
  $190 = (($189) + 1)|0;
  $i = $190;
 }
 if ((label|0) == 9) {
  $142 = $err;
  HEAP32[$vararg_buffer>>2] = $142;
  (_printf(18179,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $176 = $i;
  HEAP32[$vararg_buffer1>>2] = $176;
  (_printf(18314,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $191 = $noqueue;
  $192 = $191&1;
  $193 = $192&1;
  $194 = ($193|0)==(0);
  if (!($194)) {
   STACKTOP = sp;return;
  }
  $195 = $last;
  $196 = (($events) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  (_clReleaseEvent(($197|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLInitializeVelocityConstraintEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 36|0;
 $2 = sp + 28|0;
 $global = sp + 12|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = ((($4)) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $8 = ((($4)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $a;
 $11 = (($10) + 1)|0;
 $a = $11;
 $12 = ((($4)) + 488|0);
 $13 = (_clSetKernelArg(($9|0),($10|0),4,($12|0))|0);
 $err = $13;
 $14 = ((($4)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $a;
 $17 = (($16) + 1)|0;
 $a = $17;
 $18 = ((($4)) + 492|0);
 $19 = (_clSetKernelArg(($15|0),($16|0),4,($18|0))|0);
 $20 = $err;
 $21 = $20 | $19;
 $err = $21;
 $22 = ((($4)) + 92|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $a;
 $25 = (($24) + 1)|0;
 $a = $25;
 $26 = ((($4)) + 496|0);
 $27 = (_clSetKernelArg(($23|0),($24|0),4,($26|0))|0);
 $28 = $err;
 $29 = $28 | $27;
 $err = $29;
 $30 = ((($4)) + 92|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $a;
 $33 = (($32) + 1)|0;
 $a = $33;
 $34 = ((($4)) + 500|0);
 $35 = (_clSetKernelArg(($31|0),($32|0),4,($34|0))|0);
 $36 = $err;
 $37 = $36 | $35;
 $err = $37;
 $38 = ((($4)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $a;
 $41 = (($40) + 1)|0;
 $a = $41;
 $42 = ((($4)) + 600|0);
 $43 = (_clSetKernelArg(($39|0),($40|0),4,($42|0))|0);
 $44 = $err;
 $45 = $44 | $43;
 $err = $45;
 $46 = ((($4)) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $a;
 $49 = (($48) + 1)|0;
 $a = $49;
 $50 = ((($4)) + 392|0);
 $51 = (_clSetKernelArg(($47|0),($48|0),4,($50|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = ((($4)) + 92|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $a = $57;
 $58 = ((($4)) + 400|0);
 $59 = (_clSetKernelArg(($55|0),($56|0),4,($58|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = ((($4)) + 92|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = (__ZN14b2CLCommonData8instanceEv()|0);
 $67 = ((($66)) + 68|0);
 $68 = (_clSetKernelArg(($63|0),($64|0),4,($67|0))|0);
 $69 = $err;
 $70 = $69 | $68;
 $err = $70;
 $71 = ((($4)) + 92|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $a;
 $74 = (($73) + 1)|0;
 $a = $74;
 $75 = (__ZN14b2CLCommonData8instanceEv()|0);
 $76 = ((($75)) + 72|0);
 $77 = (_clSetKernelArg(($72|0),($73|0),4,($76|0))|0);
 $78 = $err;
 $79 = $78 | $77;
 $err = $79;
 $80 = ((($4)) + 92|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $a;
 $83 = (($82) + 1)|0;
 $a = $83;
 $84 = (__ZN14b2CLCommonData8instanceEv()|0);
 $85 = ((($84)) + 80|0);
 $86 = (_clSetKernelArg(($81|0),($82|0),4,($85|0))|0);
 $87 = $err;
 $88 = $87 | $86;
 $err = $88;
 $89 = ((($4)) + 92|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $a;
 $92 = (($91) + 1)|0;
 $a = $92;
 $93 = ((($4)) + 504|0);
 $94 = (_clSetKernelArg(($90|0),($91|0),4,($93|0))|0);
 $95 = $err;
 $96 = $95 | $94;
 $err = $96;
 $97 = ((($4)) + 92|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $a;
 $100 = (($99) + 1)|0;
 $a = $100;
 $101 = (__ZN14b2CLCommonData8instanceEv()|0);
 $102 = ((($101)) + 56|0);
 $103 = (_clSetKernelArg(($98|0),($99|0),4,($102|0))|0);
 $104 = $err;
 $105 = $104 | $103;
 $err = $105;
 $106 = ((($4)) + 92|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $a;
 $109 = (($108) + 1)|0;
 $a = $109;
 $110 = (__ZN14b2CLCommonData8instanceEv()|0);
 $111 = ((($110)) + 64|0);
 $112 = (_clSetKernelArg(($107|0),($108|0),4,($111|0))|0);
 $113 = $err;
 $114 = $113 | $112;
 $err = $114;
 $115 = ((($4)) + 92|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $a;
 $118 = (($117) + 1)|0;
 $a = $118;
 $119 = (__ZN14b2CLCommonData8instanceEv()|0);
 $120 = ((($119)) + 44|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (__ZN14b2CLCommonData8instanceEv()|0);
 $123 = ((($122)) + 36|0);
 $124 = (($123) + ($121<<2)|0);
 $125 = (_clSetKernelArg(($116|0),($117|0),4,($124|0))|0);
 $126 = $err;
 $127 = $126 | $125;
 $err = $127;
 $128 = ((($4)) + 92|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $a;
 $131 = (($130) + 1)|0;
 $a = $131;
 $132 = (_clSetKernelArg(($129|0),($130|0),4,($1|0))|0);
 $133 = $err;
 $134 = $133 | $132;
 $err = $134;
 $135 = ((($4)) + 92|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $a;
 $138 = (($137) + 1)|0;
 $a = $138;
 $139 = (_clSetKernelArg(($136|0),($137|0),4,($2|0))|0);
 $140 = $err;
 $141 = $140 | $139;
 $err = $141;
 $142 = $err;
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = $err;
  HEAP32[$vararg_buffer>>2] = $144;
  (_printf(18179,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $145 = ((($4)) + 600|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ((($4)) + 292|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + ($148))|0;
 $150 = (($149) - 1)|0;
 $151 = ((($4)) + 292|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150>>>0) / ($152>>>0))&-1;
 $numBlocks = $153;
 $154 = $numBlocks;
 $155 = ((($4)) + 292|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = Math_imul($154, $156)|0;
 HEAP32[$global>>2] = $157;
 $158 = (__ZN10b2CLDevice8instanceEv()|0);
 $159 = (__ZNK10b2CLDevice15GetCommandQueueEv($158)|0);
 $160 = ((($4)) + 92|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($4)) + 292|0);
 $163 = (_clEnqueueNDRangeKernel(($159|0),($161|0),1,(0|0),($global|0),($162|0),0,(0|0),(0|0))|0);
 $err = $163;
 $164 = $err;
 $165 = ($164|0)!=(0);
 if ($165) {
  (_printf(18253,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver25b2CLReadCompactedContactsERi($this,$contactCount) {
 $this = $this|0;
 $contactCount = $contactCount|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contactCount;
 $2 = $0;
 $3 = (__ZN10b2CLDevice8instanceEv()|0);
 $4 = (__ZN8b2CLScan8instanceEv()|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($3,$2,$6,0,4,1);
 $7 = ((($2)) + 616|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = ((($2)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = ((($2)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    __ZdaPv($15);
   }
  }
  $17 = HEAP32[$2>>2]|0;
  $$arith2 = $17<<2;
  $$overflow3 = ($17>>>0)>(1073741823);
  $18 = $$overflow3 ? -1 : $$arith2;
  $19 = (__Znaj($18)|0);
  $20 = ((($2)) + 4|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($2)) + 616|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($2)) + 620|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 600|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)<($26|0);
 if ($27) {
  $28 = ((($2)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = ((($2)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    __ZdaPv($32);
   }
  }
  $34 = ((($2)) + 600|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35<<2;
  $$arith = $36<<2;
  $$overflow = ($36>>>0)>(1073741823);
  $37 = $$overflow ? -1 : $$arith;
  $38 = (__Znaj($37)|0);
  $39 = ((($2)) + 8|0);
  HEAP32[$39>>2] = $38;
  $40 = ((($2)) + 600|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($2)) + 620|0);
  HEAP32[$42>>2] = $41;
 }
 $43 = HEAP32[$2>>2]|0;
 $44 = ($43|0)>(0);
 if (!($44)) {
  $63 = ((($2)) + 600|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($2)) + 604|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP32[$2>>2]|0;
  $67 = $1;
  HEAP32[$67>>2] = $66;
  $68 = HEAP32[$2>>2]|0;
  $69 = ((($2)) + 600|0);
  HEAP32[$69>>2] = $68;
  STACKTOP = sp;return;
 }
 $45 = (__ZN10b2CLDevice8instanceEv()|0);
 $46 = ((($2)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (__ZN14b2CLCommonData8instanceEv()|0);
 $49 = ((($48)) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$2>>2]|0;
 $52 = $51<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($45,$47,$50,0,$52,1);
 $53 = (__ZN10b2CLDevice8instanceEv()|0);
 $54 = ((($2)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (__ZN14b2CLCommonData8instanceEv()|0);
 $57 = ((($56)) + 80|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($2)) + 600|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60<<2;
 $62 = $61<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($53,$55,$58,0,$62,1);
 $63 = ((($2)) + 600|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($2)) + 604|0);
 HEAP32[$65>>2] = $64;
 $66 = HEAP32[$2>>2]|0;
 $67 = $1;
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$2>>2]|0;
 $69 = ((($2)) + 600|0);
 HEAP32[$69>>2] = $68;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver23b2CLInitializeBodyStateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = ((($1)) + 140|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = ((($1)) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = ((($1)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($1)) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = ((($1)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = (__ZN14b2CLCommonData8instanceEv()|0);
 $24 = ((($23)) + 64|0);
 $25 = (_clSetKernelArg(($20|0),($21|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = ((($1)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $a;
 $31 = (($30) + 1)|0;
 $a = $31;
 $32 = ((($1)) + 596|0);
 $33 = (_clSetKernelArg(($29|0),($30|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = ((($1)) + 140|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (__ZN14b2CLCommonData8instanceEv()|0);
 $41 = ((($40)) + 72|0);
 $42 = (_clSetKernelArg(($37|0),($38|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = ((($1)) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = (__ZN14b2CLCommonData8instanceEv()|0);
 $50 = ((($49)) + 76|0);
 $51 = (_clSetKernelArg(($46|0),($47|0),4,($50|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = ((($1)) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $a = $57;
 $58 = ((($1)) + 624|0);
 $59 = (_clSetKernelArg(($55|0),($56|0),8,($58|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = ((($1)) + 140|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = ((($1)) + 632|0);
 $67 = (_clSetKernelArg(($63|0),($64|0),4,($66|0))|0);
 $68 = $err;
 $69 = $68 | $67;
 $err = $69;
 $70 = $err;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $err;
  HEAP32[$vararg_buffer>>2] = $72;
  (_printf(18385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $73 = ((($1)) + 596|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($1)) + 300|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + ($76))|0;
 $78 = (($77) - 1)|0;
 $79 = ((($1)) + 300|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78>>>0) / ($80>>>0))&-1;
 $numBlocks = $81;
 $82 = $numBlocks;
 $83 = ((($1)) + 300|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = Math_imul($82, $84)|0;
 HEAP32[$global>>2] = $85;
 $86 = (__ZN10b2CLDevice8instanceEv()|0);
 $87 = (__ZNK10b2CLDevice15GetCommandQueueEv($86)|0);
 $88 = ((($1)) + 140|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($1)) + 300|0);
 $91 = (_clEnqueueNDRangeKernel(($87|0),($89|0),1,(0|0),($global|0),($90|0),0,(0|0),(0|0))|0);
 $err = $91;
 $92 = $err;
 $93 = ($92|0)!=(0);
 if ($93) {
  (_printf(18253,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver33b2CLInitializeBodyStateFirstFrameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = ((($1)) + 144|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = ((($1)) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = ((($1)) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($1)) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = ((($1)) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = ((($1)) + 596|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = ((($1)) + 144|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (__ZN14b2CLCommonData8instanceEv()|0);
 $32 = ((($31)) + 72|0);
 $33 = (_clSetKernelArg(($28|0),($29|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = ((($1)) + 144|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (__ZN14b2CLCommonData8instanceEv()|0);
 $41 = ((($40)) + 76|0);
 $42 = (_clSetKernelArg(($37|0),($38|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = ((($1)) + 144|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = ((($1)) + 624|0);
 $50 = (_clSetKernelArg(($46|0),($47|0),8,($49|0))|0);
 $51 = $err;
 $52 = $51 | $50;
 $err = $52;
 $53 = ((($1)) + 144|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $a;
 $56 = (($55) + 1)|0;
 $a = $56;
 $57 = ((($1)) + 632|0);
 $58 = (_clSetKernelArg(($54|0),($55|0),4,($57|0))|0);
 $59 = $err;
 $60 = $59 | $58;
 $err = $60;
 $61 = $err;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $err;
  HEAP32[$vararg_buffer>>2] = $63;
  (_printf(18385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $64 = ((($1)) + 596|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($1)) + 304|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + ($67))|0;
 $69 = (($68) - 1)|0;
 $70 = ((($1)) + 304|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69>>>0) / ($71>>>0))&-1;
 $numBlocks = $72;
 $73 = $numBlocks;
 $74 = ((($1)) + 304|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = Math_imul($73, $75)|0;
 HEAP32[$global>>2] = $76;
 $77 = (__ZN10b2CLDevice8instanceEv()|0);
 $78 = (__ZNK10b2CLDevice15GetCommandQueueEv($77)|0);
 $79 = ((($1)) + 144|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($1)) + 304|0);
 $82 = (_clEnqueueNDRangeKernel(($78|0),($80|0),1,(0|0),($global|0),($81|0),0,(0|0),(0|0))|0);
 $err = $82;
 $83 = $err;
 $84 = ($83|0)!=(0);
 if ($84) {
  (_printf(18253,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver25b2CLWarmStartWithColoringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0;
 var $global = 0, $last = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 56|0;
 $global = sp + 28|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $5 = ((($1)) + 152|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = ((($1)) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = ((($1)) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($1)) + 488|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = ((($1)) + 152|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = ((($1)) + 492|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = ((($1)) + 152|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = ((($1)) + 496|0);
 $32 = (_clSetKernelArg(($28|0),($29|0),4,($31|0))|0);
 $33 = $err;
 $34 = $33 | $32;
 $err = $34;
 $35 = $err;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $err;
  HEAP32[$vararg_buffer>>2] = $37;
  (_printf(18385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $colorIndex = 0;
 while(1) {
  $38 = $colorIndex;
  $39 = ((($1)) + 576|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   label = 14;
   break;
  }
  $42 = ((($1)) + 152|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $a;
  $45 = $colorIndex;
  $46 = ((($1)) + 588|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  $49 = (_clSetKernelArg(($43|0),($44|0),4,($48|0))|0);
  $50 = $err;
  $51 = $50 | $49;
  $err = $51;
  $52 = ((($1)) + 152|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $a;
  $55 = (($54) + 1)|0;
  $56 = $colorIndex;
  $57 = ((($1)) + 592|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($56<<2)|0);
  $60 = (_clSetKernelArg(($53|0),($55|0),4,($59|0))|0);
  $61 = $err;
  $62 = $61 | $60;
  $err = $62;
  $63 = $err;
  $64 = ($63|0)!=(0);
  if ($64) {
   label = 7;
   break;
  }
  $66 = $colorIndex;
  $67 = ((($1)) + 592|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($1)) + 316|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + ($72))|0;
  $74 = (($73) - 1)|0;
  $75 = ((($1)) + 316|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74>>>0) / ($76>>>0))&-1;
  $numBlocks = $77;
  $78 = $numBlocks;
  $79 = ((($1)) + 316|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = Math_imul($78, $80)|0;
  HEAP32[$global>>2] = $81;
  $82 = $colorIndex;
  $83 = ($82|0)==(0);
  $84 = (__ZN10b2CLDevice8instanceEv()|0);
  $85 = (__ZNK10b2CLDevice15GetCommandQueueEv($84)|0);
  $86 = ((($1)) + 152|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($1)) + 316|0);
  if ($83) {
   $89 = $curr;
   $90 = (($events) + ($89<<2)|0);
   $91 = (_clEnqueueNDRangeKernel(($85|0),($87|0),1,(0|0),($global|0),($88|0),0,(0|0),($90|0))|0);
   $err = $91;
   $92 = $last;
   $curr = $92;
   $93 = $last;
   $94 = (1 - ($93))|0;
   $last = $94;
   $95 = $err;
   $96 = ($95|0)!=(0);
   if ($96) {
    label = 10;
    break;
   }
  } else {
   $97 = $last;
   $98 = (($events) + ($97<<2)|0);
   $99 = $curr;
   $100 = (($events) + ($99<<2)|0);
   $101 = (_clEnqueueNDRangeKernel(($85|0),($87|0),1,(0|0),($global|0),($88|0),1,($98|0),($100|0))|0);
   $err = $101;
   $102 = $last;
   $103 = (($events) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   (_clReleaseEvent(($104|0))|0);
   $105 = $last;
   $curr = $105;
   $106 = $last;
   $107 = (1 - ($106))|0;
   $last = $107;
   $108 = $err;
   $109 = ($108|0)!=(0);
   if ($109) {
    label = 12;
    break;
   }
  }
  $110 = $colorIndex;
  $111 = (($110) + 1)|0;
  $colorIndex = $111;
 }
 if ((label|0) == 7) {
  $65 = $err;
  HEAP32[$vararg_buffer1>>2] = $65;
  (_printf(18385,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 10) {
  (_printf(18448,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 12) {
  (_printf(18448,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $112 = $last;
  $113 = (($events) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  (_clReleaseEvent(($114|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver27b2CLSolveVelocityConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $last = 0;
 var $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 64|0;
 $global = sp + 28|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $3 = ((($2)) + 600|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $a;
 $9 = (($8) + 1)|0;
 $a = $9;
 $10 = ((($2)) + 392|0);
 $11 = (_clSetKernelArg(($7|0),($8|0),4,($10|0))|0);
 $err = $11;
 $12 = ((($2)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = ((($2)) + 488|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = ((($2)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = ((($2)) + 492|0);
 $25 = (_clSetKernelArg(($21|0),($22|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = ((($2)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $a;
 $31 = (($30) + 1)|0;
 $a = $31;
 $32 = ((($2)) + 496|0);
 $33 = (_clSetKernelArg(($29|0),($30|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = $err;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $err;
  HEAP32[$vararg_buffer>>2] = $38;
  (_printf(18385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $iter = 0;
 L7: while(1) {
  $39 = $iter;
  $40 = $1;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   label = 19;
   break;
  }
  $colorIndex = 0;
  while(1) {
   $42 = $colorIndex;
   $43 = ((($2)) + 576|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = ((($2)) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $a;
   $49 = $colorIndex;
   $50 = ((($2)) + 588|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($49<<2)|0);
   $53 = (_clSetKernelArg(($47|0),($48|0),4,($52|0))|0);
   $err = $53;
   $54 = ((($2)) + 24|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $a;
   $57 = (($56) + 1)|0;
   $58 = $colorIndex;
   $59 = ((($2)) + 592|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($58<<2)|0);
   $62 = (_clSetKernelArg(($55|0),($57|0),4,($61|0))|0);
   $63 = $err;
   $64 = $63 | $62;
   $err = $64;
   $65 = $err;
   $66 = ($65|0)!=(0);
   if ($66) {
    label = 9;
    break L7;
   }
   $68 = $colorIndex;
   $69 = ((($2)) + 592|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($68<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($2)) + 244|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($72) + ($74))|0;
   $76 = (($75) - 1)|0;
   $77 = ((($2)) + 244|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76>>>0) / ($78>>>0))&-1;
   $numBlocks = $79;
   $80 = $numBlocks;
   $81 = ((($2)) + 244|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = Math_imul($80, $82)|0;
   HEAP32[$global>>2] = $83;
   $84 = $colorIndex;
   $85 = ($84|0)==(0);
   $86 = (__ZN10b2CLDevice8instanceEv()|0);
   $87 = (__ZNK10b2CLDevice15GetCommandQueueEv($86)|0);
   $88 = ((($2)) + 24|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($2)) + 244|0);
   if ($85) {
    $91 = $iter;
    $92 = ($91|0)!=(0);
    $93 = $92 ? 1 : 0;
    $94 = $iter;
    $95 = ($94|0)!=(0);
    $96 = $last;
    $97 = (($events) + ($96<<2)|0);
    $98 = $95 ? $97 : 0;
    $99 = $curr;
    $100 = (($events) + ($99<<2)|0);
    $101 = (_clEnqueueNDRangeKernel(($87|0),($89|0),1,(0|0),($global|0),($90|0),($93|0),($98|0),($100|0))|0);
    $err = $101;
    $102 = $iter;
    $103 = ($102|0)!=(0);
    if ($103) {
     $104 = $last;
     $105 = (($events) + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     (_clReleaseEvent(($106|0))|0);
    }
    $107 = $last;
    $curr = $107;
    $108 = $last;
    $109 = (1 - ($108))|0;
    $last = $109;
    $110 = $err;
    $111 = ($110|0)!=(0);
    if ($111) {
     label = 14;
     break L7;
    }
   } else {
    $112 = $last;
    $113 = (($events) + ($112<<2)|0);
    $114 = $curr;
    $115 = (($events) + ($114<<2)|0);
    $116 = (_clEnqueueNDRangeKernel(($87|0),($89|0),1,(0|0),($global|0),($90|0),1,($113|0),($115|0))|0);
    $err = $116;
    $117 = $last;
    $118 = (($events) + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    (_clReleaseEvent(($119|0))|0);
    $120 = $last;
    $curr = $120;
    $121 = $last;
    $122 = (1 - ($121))|0;
    $last = $122;
    $123 = $err;
    $124 = ($123|0)!=(0);
    if ($124) {
     label = 16;
     break L7;
    }
   }
   $125 = $colorIndex;
   $126 = (($125) + 1)|0;
   $colorIndex = $126;
  }
  $127 = $iter;
  $128 = (($127) + 1)|0;
  $iter = $128;
 }
 if ((label|0) == 9) {
  $67 = $err;
  HEAP32[$vararg_buffer1>>2] = $67;
  (_printf(18385,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 14) {
  (_printf(18253,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 16) {
  (_printf(18253,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  $129 = $last;
  $130 = (($events) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  (_clReleaseEvent(($131|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLSolveJointVelocityConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0;
 var $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $jointType = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0, $numBlocks = 0, $numContact = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 72|0;
 $length = sp + 32|0;
 $offset = sp + 28|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $3 = (__ZN14b2CLCommonData8instanceEv()|0);
 $4 = ((($3)) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $iter = 0;
 L4: while(1) {
  $7 = $iter;
  $8 = $1;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 23;
   break;
  }
  $jointType = 1;
  while(1) {
   $10 = $jointType;
   $11 = ($10|0)<(11);
   if (!($11)) {
    break;
   }
   $12 = $jointType;
   $13 = (__ZN14b2CLCommonData8instanceEv()|0);
   $14 = ((($13)) + 100|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $numContact = $16;
   $17 = $numContact;
   $18 = ($17|0)==(0);
   L10: do {
    if (!($18)) {
     $19 = $jointType;
     $20 = (__ZN14b2CLCommonData8instanceEv()|0);
     $21 = ((($20)) + 1032|0);
     $22 = (($21) + ($19<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $maxcolor = $23;
     $a = 0;
     $24 = $jointType;
     $25 = ((($2)) + 28|0);
     $26 = (($25) + ($24<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $a;
     $29 = (($28) + 1)|0;
     $a = $29;
     $30 = ((($2)) + 392|0);
     $31 = (_clSetKernelArg(($27|0),($28|0),4,($30|0))|0);
     $err = $31;
     $32 = $jointType;
     $33 = ((($2)) + 28|0);
     $34 = (($33) + ($32<<2)|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $a;
     $37 = (($36) + 1)|0;
     $a = $37;
     $38 = (__ZN14b2CLCommonData8instanceEv()|0);
     $39 = ((($38)) + 1076|0);
     $40 = (_clSetKernelArg(($35|0),($36|0),4,($39|0))|0);
     $41 = $err;
     $42 = $41 | $40;
     $err = $42;
     $43 = $jointType;
     $44 = ((($2)) + 28|0);
     $45 = (($44) + ($43<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $a;
     $48 = (($47) + 1)|0;
     $a = $48;
     $49 = ((($2)) + 632|0);
     $50 = (_clSetKernelArg(($46|0),($47|0),4,($49|0))|0);
     $51 = $err;
     $52 = $51 | $50;
     $err = $52;
     $colorIndex = 0;
     while(1) {
      $53 = $colorIndex;
      $54 = $maxcolor;
      $55 = ($53|0)<($54|0);
      if (!($55)) {
       break L10;
      }
      $56 = $colorIndex;
      $57 = (($56) + 1)|0;
      $58 = $jointType;
      $59 = (__ZN14b2CLCommonData8instanceEv()|0);
      $60 = ((($59)) + 152|0);
      $61 = (($60) + (($58*80)|0)|0);
      $62 = (($61) + ($57<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = $colorIndex;
      $65 = $jointType;
      $66 = (__ZN14b2CLCommonData8instanceEv()|0);
      $67 = ((($66)) + 152|0);
      $68 = (($67) + (($65*80)|0)|0);
      $69 = (($68) + ($64<<2)|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($63) - ($70))|0;
      HEAP32[$length>>2] = $71;
      $72 = $colorIndex;
      $73 = $jointType;
      $74 = (__ZN14b2CLCommonData8instanceEv()|0);
      $75 = ((($74)) + 152|0);
      $76 = (($75) + (($73*80)|0)|0);
      $77 = (($76) + ($72<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      HEAP32[$offset>>2] = $78;
      $79 = $jointType;
      $80 = ((($2)) + 28|0);
      $81 = (($80) + ($79<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = $a;
      $84 = (_clSetKernelArg(($82|0),($83|0),4,($offset|0))|0);
      $85 = $err;
      $86 = $85 | $84;
      $err = $86;
      $87 = $jointType;
      $88 = ((($2)) + 28|0);
      $89 = (($88) + ($87<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = $a;
      $92 = (($91) + 1)|0;
      $93 = (_clSetKernelArg(($90|0),($92|0),4,($length|0))|0);
      $94 = $err;
      $95 = $94 | $93;
      $err = $95;
      $96 = $err;
      $97 = ($96|0)!=(0);
      if ($97) {
       label = 10;
       break L4;
      }
      $99 = HEAP32[$length>>2]|0;
      $100 = $jointType;
      $101 = ((($2)) + 248|0);
      $102 = (($101) + ($100<<2)|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($99) + ($103))|0;
      $105 = (($104) - 1)|0;
      $106 = $jointType;
      $107 = ((($2)) + 248|0);
      $108 = (($107) + ($106<<2)|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($105>>>0) / ($109>>>0))&-1;
      $numBlocks = $110;
      $111 = $numBlocks;
      $112 = $jointType;
      $113 = ((($2)) + 248|0);
      $114 = (($113) + ($112<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = Math_imul($111, $115)|0;
      HEAP32[$global>>2] = $116;
      $117 = $colorIndex;
      $118 = ($117|0)==(0);
      $119 = (__ZN10b2CLDevice8instanceEv()|0);
      $120 = (__ZNK10b2CLDevice15GetCommandQueueEv($119)|0);
      $121 = $jointType;
      $122 = ((($2)) + 28|0);
      $123 = (($122) + ($121<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $jointType;
      $126 = ((($2)) + 248|0);
      $127 = (($126) + ($125<<2)|0);
      if ($118) {
       $128 = $iter;
       $129 = ($128|0)!=(0);
       $130 = $129 ? 1 : 0;
       $131 = $iter;
       $132 = ($131|0)!=(0);
       $133 = $last;
       $134 = (($events) + ($133<<2)|0);
       $135 = $132 ? $134 : 0;
       $136 = $curr;
       $137 = (($events) + ($136<<2)|0);
       $138 = (_clEnqueueNDRangeKernel(($120|0),($124|0),1,(0|0),($global|0),($127|0),($130|0),($135|0),($137|0))|0);
       $err = $138;
       $139 = $noqueue;
       $140 = $139&1;
       $141 = $140&1;
       $142 = ($141|0)==(0);
       if ($142) {
        $143 = $last;
        $144 = (($events) + ($143<<2)|0);
        $145 = HEAP32[$144>>2]|0;
        (_clReleaseEvent(($145|0))|0);
       }
       $146 = $last;
       $curr = $146;
       $147 = $last;
       $148 = (1 - ($147))|0;
       $last = $148;
       $149 = $err;
       $150 = ($149|0)!=(0);
       if ($150) {
        label = 15;
        break L4;
       }
       $151 = $noqueue;
       $152 = $151&1;
       if ($152) {
        $noqueue = 0;
       }
      } else {
       $153 = $last;
       $154 = (($events) + ($153<<2)|0);
       $155 = $curr;
       $156 = (($events) + ($155<<2)|0);
       $157 = (_clEnqueueNDRangeKernel(($120|0),($124|0),1,(0|0),($global|0),($127|0),1,($154|0),($156|0))|0);
       $err = $157;
       $158 = $last;
       $159 = (($events) + ($158<<2)|0);
       $160 = HEAP32[$159>>2]|0;
       (_clReleaseEvent(($160|0))|0);
       $161 = $last;
       $curr = $161;
       $162 = $last;
       $163 = (1 - ($162))|0;
       $last = $163;
       $164 = $err;
       $165 = ($164|0)!=(0);
       if ($165) {
        label = 19;
        break L4;
       }
      }
      $166 = $colorIndex;
      $167 = (($166) + 1)|0;
      $colorIndex = $167;
     }
    }
   } while(0);
   $168 = $jointType;
   $169 = (($168) + 1)|0;
   $jointType = $169;
  }
  $170 = $iter;
  $171 = (($170) + 1)|0;
  $iter = $171;
 }
 if ((label|0) == 10) {
  $98 = $err;
  HEAP32[$vararg_buffer>>2] = $98;
  (_printf(18385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 15) {
  (_printf(18253,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  (_printf(18253,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $172 = $noqueue;
  $173 = $172&1;
  $174 = $173&1;
  $175 = ($174|0)==(0);
  if (!($175)) {
   STACKTOP = sp;return;
  }
  $176 = $last;
  $177 = (($events) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  (_clReleaseEvent(($178|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver22b2CLIntegratePositionsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = ((($1)) + 176|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = ((($1)) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = ((($1)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($1)) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = ((($1)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = ((($1)) + 632|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = ((($1)) + 176|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = ((($1)) + 596|0);
 $32 = (_clSetKernelArg(($28|0),($29|0),4,($31|0))|0);
 $33 = $err;
 $34 = $33 | $32;
 $err = $34;
 $35 = $err;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $err;
  HEAP32[$vararg_buffer>>2] = $37;
  (_printf(18507,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $38 = ((($1)) + 596|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($1)) + 336|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41))|0;
 $43 = (($42) - 1)|0;
 $44 = ((($1)) + 336|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43>>>0) / ($45>>>0))&-1;
 $numBlocks = $46;
 $47 = $numBlocks;
 $48 = ((($1)) + 336|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($47, $49)|0;
 HEAP32[$global>>2] = $50;
 $51 = (__ZN10b2CLDevice8instanceEv()|0);
 $52 = (__ZNK10b2CLDevice15GetCommandQueueEv($51)|0);
 $53 = ((($1)) + 176|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($1)) + 336|0);
 $56 = (_clEnqueueNDRangeKernel(($52|0),($54|0),1,(0|0),($global|0),($55|0),0,(0|0),(0|0))|0);
 $err = $56;
 $57 = $err;
 $58 = ($57|0)!=(0);
 if ($58) {
  (_printf(18563,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver27b2CLSolvePositionConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $last = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 64|0;
 $global = sp + 28|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $3 = ((($2)) + 600|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $6 = ((($2)) + 180|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $a;
 $9 = (($8) + 1)|0;
 $a = $9;
 $10 = ((($2)) + 400|0);
 $11 = (_clSetKernelArg(($7|0),($8|0),4,($10|0))|0);
 $err = $11;
 $12 = ((($2)) + 180|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = ((($2)) + 500|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = ((($2)) + 180|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = ((($2)) + 488|0);
 $25 = (_clSetKernelArg(($21|0),($22|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = $err;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $err;
  HEAP32[$vararg_buffer>>2] = $30;
  (_printf(18608,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $iter = 0;
 L7: while(1) {
  $31 = $iter;
  $32 = $1;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   label = 19;
   break;
  }
  $colorIndex = 0;
  while(1) {
   $34 = $colorIndex;
   $35 = ((($2)) + 576|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = ((($2)) + 180|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $a;
   $41 = $colorIndex;
   $42 = ((($2)) + 588|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41<<2)|0);
   $45 = (_clSetKernelArg(($39|0),($40|0),4,($44|0))|0);
   $err = $45;
   $46 = ((($2)) + 180|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $a;
   $49 = (($48) + 1)|0;
   $50 = $colorIndex;
   $51 = ((($2)) + 592|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($50<<2)|0);
   $54 = (_clSetKernelArg(($47|0),($49|0),4,($53|0))|0);
   $55 = $err;
   $56 = $55 | $54;
   $err = $56;
   $57 = $err;
   $58 = ($57|0)!=(0);
   if ($58) {
    label = 9;
    break L7;
   }
   $60 = $colorIndex;
   $61 = ((($2)) + 592|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($60<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($2)) + 340|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + ($66))|0;
   $68 = (($67) - 1)|0;
   $69 = ((($2)) + 340|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68>>>0) / ($70>>>0))&-1;
   $numBlocks = $71;
   $72 = $numBlocks;
   $73 = ((($2)) + 340|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = Math_imul($72, $74)|0;
   HEAP32[$global>>2] = $75;
   $76 = $colorIndex;
   $77 = ($76|0)==(0);
   $78 = (__ZN10b2CLDevice8instanceEv()|0);
   $79 = (__ZNK10b2CLDevice15GetCommandQueueEv($78)|0);
   $80 = ((($2)) + 180|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($2)) + 340|0);
   if ($77) {
    $83 = $iter;
    $84 = ($83|0)!=(0);
    $85 = $84 ? 1 : 0;
    $86 = $iter;
    $87 = ($86|0)!=(0);
    $88 = $last;
    $89 = (($events) + ($88<<2)|0);
    $90 = $87 ? $89 : 0;
    $91 = $curr;
    $92 = (($events) + ($91<<2)|0);
    $93 = (_clEnqueueNDRangeKernel(($79|0),($81|0),1,(0|0),($global|0),($82|0),($85|0),($90|0),($92|0))|0);
    $err = $93;
    $94 = $iter;
    $95 = ($94|0)!=(0);
    if ($95) {
     $96 = $last;
     $97 = (($events) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     (_clReleaseEvent(($98|0))|0);
    }
    $99 = $last;
    $curr = $99;
    $100 = $last;
    $101 = (1 - ($100))|0;
    $last = $101;
    $102 = $err;
    $103 = ($102|0)!=(0);
    if ($103) {
     label = 14;
     break L7;
    }
   } else {
    $104 = $last;
    $105 = (($events) + ($104<<2)|0);
    $106 = $curr;
    $107 = (($events) + ($106<<2)|0);
    $108 = (_clEnqueueNDRangeKernel(($79|0),($81|0),1,(0|0),($global|0),($82|0),1,($105|0),($107|0))|0);
    $err = $108;
    $109 = $last;
    $110 = (($events) + ($109<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    (_clReleaseEvent(($111|0))|0);
    $112 = $last;
    $curr = $112;
    $113 = $last;
    $114 = (1 - ($113))|0;
    $last = $114;
    $115 = $err;
    $116 = ($115|0)!=(0);
    if ($116) {
     label = 16;
     break L7;
    }
   }
   $117 = $colorIndex;
   $118 = (($117) + 1)|0;
   $colorIndex = $118;
  }
  $119 = $iter;
  $120 = (($119) + 1)|0;
  $iter = $120;
 }
 if ((label|0) == 9) {
  $59 = $err;
  HEAP32[$vararg_buffer1>>2] = $59;
  (_printf(18385,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 14) {
  (_printf(18671,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 16) {
  (_printf(18671,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  $121 = $last;
  $122 = (($events) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  (_clReleaseEvent(($123|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLSolveJointPositionConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $jointType = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0;
 var $numBlocks = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 72|0;
 $length = sp + 32|0;
 $offset = sp + 28|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $3 = (__ZN14b2CLCommonData8instanceEv()|0);
 $4 = ((($3)) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $iter = 0;
 L4: while(1) {
  $7 = $iter;
  $8 = $1;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 23;
   break;
  }
  $jointType = 1;
  while(1) {
   $10 = $jointType;
   $11 = ($10|0)<(11);
   if (!($11)) {
    break;
   }
   $12 = $jointType;
   $13 = (__ZN14b2CLCommonData8instanceEv()|0);
   $14 = ((($13)) + 100|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   L10: do {
    if (!($17)) {
     $18 = $jointType;
     $19 = (__ZN14b2CLCommonData8instanceEv()|0);
     $20 = ((($19)) + 1032|0);
     $21 = (($20) + ($18<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $maxcolor = $22;
     $a = 0;
     $23 = $jointType;
     $24 = ((($2)) + 192|0);
     $25 = (($24) + ($23<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $a;
     $28 = (($27) + 1)|0;
     $a = $28;
     $29 = ((($2)) + 400|0);
     $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
     $err = $30;
     $31 = $jointType;
     $32 = ((($2)) + 192|0);
     $33 = (($32) + ($31<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $a;
     $36 = (($35) + 1)|0;
     $a = $36;
     $37 = (__ZN14b2CLCommonData8instanceEv()|0);
     $38 = ((($37)) + 1076|0);
     $39 = (_clSetKernelArg(($34|0),($35|0),4,($38|0))|0);
     $40 = $err;
     $41 = $40 | $39;
     $err = $41;
     $colorIndex = 0;
     while(1) {
      $42 = $colorIndex;
      $43 = $maxcolor;
      $44 = ($42|0)<($43|0);
      if (!($44)) {
       break L10;
      }
      $45 = $colorIndex;
      $46 = (($45) + 1)|0;
      $47 = $jointType;
      $48 = (__ZN14b2CLCommonData8instanceEv()|0);
      $49 = ((($48)) + 152|0);
      $50 = (($49) + (($47*80)|0)|0);
      $51 = (($50) + ($46<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $colorIndex;
      $54 = $jointType;
      $55 = (__ZN14b2CLCommonData8instanceEv()|0);
      $56 = ((($55)) + 152|0);
      $57 = (($56) + (($54*80)|0)|0);
      $58 = (($57) + ($53<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($52) - ($59))|0;
      HEAP32[$length>>2] = $60;
      $61 = $colorIndex;
      $62 = $jointType;
      $63 = (__ZN14b2CLCommonData8instanceEv()|0);
      $64 = ((($63)) + 152|0);
      $65 = (($64) + (($62*80)|0)|0);
      $66 = (($65) + ($61<<2)|0);
      $67 = HEAP32[$66>>2]|0;
      HEAP32[$offset>>2] = $67;
      $68 = $jointType;
      $69 = ((($2)) + 192|0);
      $70 = (($69) + ($68<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $a;
      $73 = (_clSetKernelArg(($71|0),($72|0),4,($offset|0))|0);
      $74 = $err;
      $75 = $74 | $73;
      $err = $75;
      $76 = $jointType;
      $77 = ((($2)) + 192|0);
      $78 = (($77) + ($76<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $a;
      $81 = (($80) + 1)|0;
      $82 = (_clSetKernelArg(($79|0),($81|0),4,($length|0))|0);
      $83 = $err;
      $84 = $83 | $82;
      $err = $84;
      $85 = $err;
      $86 = ($85|0)!=(0);
      if ($86) {
       label = 10;
       break L4;
      }
      $88 = HEAP32[$length>>2]|0;
      $89 = $jointType;
      $90 = ((($2)) + 344|0);
      $91 = (($90) + ($89<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($88) + ($92))|0;
      $94 = (($93) - 1)|0;
      $95 = $jointType;
      $96 = ((($2)) + 344|0);
      $97 = (($96) + ($95<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($94>>>0) / ($98>>>0))&-1;
      $numBlocks = $99;
      $100 = $numBlocks;
      $101 = $jointType;
      $102 = ((($2)) + 344|0);
      $103 = (($102) + ($101<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = Math_imul($100, $104)|0;
      HEAP32[$global>>2] = $105;
      $106 = $colorIndex;
      $107 = ($106|0)==(0);
      $108 = (__ZN10b2CLDevice8instanceEv()|0);
      $109 = (__ZNK10b2CLDevice15GetCommandQueueEv($108)|0);
      $110 = $jointType;
      $111 = ((($2)) + 192|0);
      $112 = (($111) + ($110<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $jointType;
      $115 = ((($2)) + 344|0);
      $116 = (($115) + ($114<<2)|0);
      if ($107) {
       $117 = $iter;
       $118 = ($117|0)!=(0);
       $119 = $118 ? 1 : 0;
       $120 = $iter;
       $121 = ($120|0)!=(0);
       $122 = $last;
       $123 = (($events) + ($122<<2)|0);
       $124 = $121 ? $123 : 0;
       $125 = $curr;
       $126 = (($events) + ($125<<2)|0);
       $127 = (_clEnqueueNDRangeKernel(($109|0),($113|0),1,(0|0),($global|0),($116|0),($119|0),($124|0),($126|0))|0);
       $err = $127;
       $128 = $noqueue;
       $129 = $128&1;
       $130 = $129&1;
       $131 = ($130|0)==(0);
       if ($131) {
        $132 = $last;
        $133 = (($events) + ($132<<2)|0);
        $134 = HEAP32[$133>>2]|0;
        (_clReleaseEvent(($134|0))|0);
       }
       $135 = $last;
       $curr = $135;
       $136 = $last;
       $137 = (1 - ($136))|0;
       $last = $137;
       $138 = $err;
       $139 = ($138|0)!=(0);
       if ($139) {
        label = 15;
        break L4;
       }
       $140 = $noqueue;
       $141 = $140&1;
       if ($141) {
        $noqueue = 0;
       }
      } else {
       $142 = $last;
       $143 = (($events) + ($142<<2)|0);
       $144 = $curr;
       $145 = (($events) + ($144<<2)|0);
       $146 = (_clEnqueueNDRangeKernel(($109|0),($113|0),1,(0|0),($global|0),($116|0),1,($143|0),($145|0))|0);
       $err = $146;
       $147 = $last;
       $148 = (($events) + ($147<<2)|0);
       $149 = HEAP32[$148>>2]|0;
       (_clReleaseEvent(($149|0))|0);
       $150 = $last;
       $curr = $150;
       $151 = $last;
       $152 = (1 - ($151))|0;
       $last = $152;
       $153 = $err;
       $154 = ($153|0)!=(0);
       if ($154) {
        label = 19;
        break L4;
       }
      }
      $155 = $colorIndex;
      $156 = (($155) + 1)|0;
      $colorIndex = $156;
     }
    }
   } while(0);
   $157 = $jointType;
   $158 = (($157) + 1)|0;
   $jointType = $158;
  }
  $159 = $iter;
  $160 = (($159) + 1)|0;
  $iter = $160;
 }
 if ((label|0) == 10) {
  $87 = $err;
  HEAP32[$vararg_buffer>>2] = $87;
  (_printf(18732,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 15) {
  (_printf(18253,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  (_printf(18253,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $161 = $noqueue;
  $162 = $161&1;
  $163 = $162&1;
  $164 = ($163|0)==(0);
  if (!($164)) {
   STACKTOP = sp;return;
  }
  $165 = $last;
  $166 = (($events) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  (_clReleaseEvent(($167|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver17b2CLSynchronizeXfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = ((($1)) + 160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (__ZN14b2CLCommonData8instanceEv()|0);
 $10 = ((($9)) + 64|0);
 $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
 $err = $11;
 $12 = ((($1)) + 160|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = ((($1)) + 400|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = ((($1)) + 160|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = (__ZN14b2CLCommonData8instanceEv()|0);
 $25 = ((($24)) + 72|0);
 $26 = (_clSetKernelArg(($21|0),($22|0),4,($25|0))|0);
 $27 = $err;
 $28 = $27 | $26;
 $err = $28;
 $29 = ((($1)) + 160|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $a;
 $32 = (($31) + 1)|0;
 $a = $32;
 $33 = (__ZN14b2CLCommonData8instanceEv()|0);
 $34 = ((($33)) + 76|0);
 $35 = (_clSetKernelArg(($30|0),($31|0),4,($34|0))|0);
 $36 = $err;
 $37 = $36 | $35;
 $err = $37;
 $38 = ((($1)) + 160|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $a;
 $41 = (($40) + 1)|0;
 $a = $41;
 $42 = ((($1)) + 596|0);
 $43 = (_clSetKernelArg(($39|0),($40|0),4,($42|0))|0);
 $44 = $err;
 $45 = $44 | $43;
 $err = $45;
 $46 = $err;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $err;
  HEAP32[$vararg_buffer>>2] = $48;
  (_printf(18801,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $49 = ((($1)) + 596|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($1)) + 320|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + ($52))|0;
 $54 = (($53) - 1)|0;
 $55 = ((($1)) + 320|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54>>>0) / ($56>>>0))&-1;
 $numBlocks = $57;
 $58 = $numBlocks;
 $59 = ((($1)) + 320|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($58, $60)|0;
 HEAP32[$global>>2] = $61;
 $62 = (__ZN10b2CLDevice8instanceEv()|0);
 $63 = (__ZNK10b2CLDevice15GetCommandQueueEv($62)|0);
 $64 = ((($1)) + 160|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($1)) + 320|0);
 $67 = (_clEnqueueNDRangeKernel(($63|0),($65|0),1,(0|0),($global|0),($66|0),0,(0|0),(0|0))|0);
 $err = $67;
 $68 = $err;
 $69 = ($68|0)!=(0);
 if ($69) {
  (_printf(18852,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver16SortManifoldKeysEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (__ZN8b2CLSort8instanceEv()|0);
 $6 = ((($1)) + 508|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 512|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 600|0);
 $11 = HEAP32[$10>>2]|0;
 __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($5,$7,$9,$11,0,1);
 $12 = ((($1)) + 600|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 524|0);
 HEAP32[$14>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver17b2CLStoreImpulsesEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zeroBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 __ZN10b2CLSolver32CreateBuffersForSortingManifoldsEv($1);
 $5 = ((($1)) + 516|0);
 $6 = HEAP32[$5>>2]|0;
 $$arith = $6<<2;
 $$overflow = ($6>>>0)>(1073741823);
 $7 = $$overflow ? -1 : $$arith;
 $8 = (__Znaj($7)|0);
 $zeroBuffer = $8;
 $9 = $zeroBuffer;
 $10 = ((($1)) + 516|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 _memset(($9|0),0,($12|0))|0;
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = ((($1)) + 508|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $zeroBuffer;
 $17 = ((($1)) + 516|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($13,$15,$16,0,$19,1);
 $20 = $zeroBuffer;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  __ZdaPv($20);
 }
 $a = 0;
 $22 = ((($1)) + 172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $a;
 $25 = (($24) + 1)|0;
 $a = $25;
 $26 = (__ZN14b2CLCommonData8instanceEv()|0);
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (__ZN14b2CLCommonData8instanceEv()|0);
 $30 = ((($29)) + 36|0);
 $31 = (($30) + ($28<<2)|0);
 $32 = (_clSetKernelArg(($23|0),($24|0),4,($31|0))|0);
 $err = $32;
 $33 = ((($1)) + 172|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = ((($1)) + 508|0);
 $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
 $39 = $err;
 $40 = $39 | $38;
 $err = $40;
 $41 = ((($1)) + 172|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $a;
 $44 = (($43) + 1)|0;
 $a = $44;
 $45 = ((($1)) + 512|0);
 $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = ((($1)) + 172|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = ((($1)) + 504|0);
 $54 = (_clSetKernelArg(($50|0),($51|0),4,($53|0))|0);
 $55 = $err;
 $56 = $55 | $54;
 $err = $56;
 $57 = ((($1)) + 172|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $a;
 $60 = (($59) + 1)|0;
 $a = $60;
 $61 = ((($1)) + 492|0);
 $62 = (_clSetKernelArg(($58|0),($59|0),4,($61|0))|0);
 $63 = $err;
 $64 = $63 | $62;
 $err = $64;
 $65 = ((($1)) + 172|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $a;
 $68 = (($67) + 1)|0;
 $a = $68;
 $69 = (__ZN14b2CLCommonData8instanceEv()|0);
 $70 = ((($69)) + 80|0);
 $71 = (_clSetKernelArg(($66|0),($67|0),4,($70|0))|0);
 $72 = $err;
 $73 = $72 | $71;
 $err = $73;
 $74 = ((($1)) + 172|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $a;
 $77 = (($76) + 1)|0;
 $a = $77;
 $78 = ((($1)) + 600|0);
 $79 = (_clSetKernelArg(($75|0),($76|0),4,($78|0))|0);
 $80 = $err;
 $81 = $80 | $79;
 $err = $81;
 $82 = $err;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $err;
  HEAP32[$vararg_buffer>>2] = $84;
  (_printf(18179,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $85 = ((($1)) + 600|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($1)) + 332|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + ($88))|0;
 $90 = (($89) - 1)|0;
 $91 = ((($1)) + 332|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90>>>0) / ($92>>>0))&-1;
 $numBlocks = $93;
 $94 = $numBlocks;
 $95 = ((($1)) + 332|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = Math_imul($94, $96)|0;
 HEAP32[$global>>2] = $97;
 $98 = (__ZN10b2CLDevice8instanceEv()|0);
 $99 = (__ZNK10b2CLDevice15GetCommandQueueEv($98)|0);
 $100 = ((($1)) + 172|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($1)) + 332|0);
 $103 = (_clEnqueueNDRangeKernel(($99|0),($101|0),1,(0|0),($global|0),($102|0),0,(0|0),(0|0))|0);
 $err = $103;
 $104 = $err;
 $105 = ($104|0)!=(0);
 if ($105) {
  (_printf(18901,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver20b2CLReadLastImpulsesEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 36|0;
 $2 = sp + 28|0;
 $global = sp + 12|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = ((($4)) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($4)) + 524|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $11 = ((($4)) + 164|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($4)) + 492|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $err = $16;
 $17 = ((($4)) + 164|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $a;
 $20 = (($19) + 1)|0;
 $a = $20;
 $21 = ((($4)) + 508|0);
 $22 = (_clSetKernelArg(($18|0),($19|0),4,($21|0))|0);
 $23 = $err;
 $24 = $23 | $22;
 $err = $24;
 $25 = ((($4)) + 164|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $a;
 $28 = (($27) + 1)|0;
 $a = $28;
 $29 = ((($4)) + 512|0);
 $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
 $31 = $err;
 $32 = $31 | $30;
 $err = $32;
 $33 = ((($4)) + 164|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = ((($4)) + 524|0);
 $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
 $39 = $err;
 $40 = $39 | $38;
 $err = $40;
 $41 = ((($4)) + 164|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $a;
 $44 = (($43) + 1)|0;
 $a = $44;
 $45 = ((($4)) + 600|0);
 $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = ((($4)) + 164|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = (__ZN14b2CLCommonData8instanceEv()|0);
 $54 = ((($53)) + 80|0);
 $55 = (_clSetKernelArg(($50|0),($51|0),4,($54|0))|0);
 $56 = $err;
 $57 = $56 | $55;
 $err = $57;
 $58 = ((($4)) + 164|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $a;
 $61 = (($60) + 1)|0;
 $a = $61;
 $62 = ((($4)) + 504|0);
 $63 = (_clSetKernelArg(($59|0),($60|0),4,($62|0))|0);
 $64 = $err;
 $65 = $64 | $63;
 $err = $65;
 $66 = ((($4)) + 164|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $a;
 $69 = (($68) + 1)|0;
 $a = $69;
 $70 = (__ZN14b2CLCommonData8instanceEv()|0);
 $71 = ((($70)) + 44|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (__ZN14b2CLCommonData8instanceEv()|0);
 $74 = ((($73)) + 36|0);
 $75 = (($74) + ($72<<2)|0);
 $76 = (_clSetKernelArg(($67|0),($68|0),4,($75|0))|0);
 $77 = $err;
 $78 = $77 | $76;
 $err = $78;
 $79 = ((($4)) + 164|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $a;
 $82 = (($81) + 1)|0;
 $a = $82;
 $83 = (__ZN14b2CLCommonData8instanceEv()|0);
 $84 = ((($83)) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (1 - ($85))|0;
 $87 = (__ZN14b2CLCommonData8instanceEv()|0);
 $88 = ((($87)) + 36|0);
 $89 = (($88) + ($86<<2)|0);
 $90 = (_clSetKernelArg(($80|0),($81|0),4,($89|0))|0);
 $91 = $err;
 $92 = $91 | $90;
 $err = $92;
 $93 = ((($4)) + 164|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $a;
 $96 = (($95) + 1)|0;
 $a = $96;
 $97 = (_clSetKernelArg(($94|0),($95|0),4,($1|0))|0);
 $98 = $err;
 $99 = $98 | $97;
 $err = $99;
 $100 = ((($4)) + 164|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $a;
 $103 = (($102) + 1)|0;
 $a = $103;
 $104 = (_clSetKernelArg(($101|0),($102|0),4,($2|0))|0);
 $105 = $err;
 $106 = $105 | $104;
 $err = $106;
 $107 = $err;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $err;
  HEAP32[$vararg_buffer>>2] = $109;
  (_printf(18179,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $110 = ((($4)) + 600|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($4)) + 324|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + ($113))|0;
 $115 = (($114) - 1)|0;
 $116 = ((($4)) + 324|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($115>>>0) / ($117>>>0))&-1;
 $numBlocks = $118;
 $119 = $numBlocks;
 $120 = ((($4)) + 324|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = Math_imul($119, $121)|0;
 HEAP32[$global>>2] = $122;
 $123 = (__ZN10b2CLDevice8instanceEv()|0);
 $124 = (__ZNK10b2CLDevice15GetCommandQueueEv($123)|0);
 $125 = ((($4)) + 164|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($4)) + 324|0);
 $128 = (_clEnqueueNDRangeKernel(($124|0),($126|0),1,(0|0),($global|0),($127|0),0,(0|0),(0|0))|0);
 $err = $128;
 $129 = $err;
 $130 = ($129|0)!=(0);
 if ($130) {
  (_printf(18901,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $131 = (__ZN10b2CLDevice8instanceEv()|0);
 $132 = (__ZNK10b2CLDevice15GetCommandQueueEv($131)|0);
 (_clFinish(($132|0))|0);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver30b2CLReadLastImpulsesFirstFrameEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 36|0;
 $2 = sp + 28|0;
 $global = sp + 12|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = ((($4)) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($4)) + 524|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $11 = ((($4)) + 168|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = ((($4)) + 492|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $err = $16;
 $17 = ((($4)) + 168|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $a;
 $20 = (($19) + 1)|0;
 $a = $20;
 $21 = ((($4)) + 508|0);
 $22 = (_clSetKernelArg(($18|0),($19|0),4,($21|0))|0);
 $23 = $err;
 $24 = $23 | $22;
 $err = $24;
 $25 = ((($4)) + 168|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $a;
 $28 = (($27) + 1)|0;
 $a = $28;
 $29 = ((($4)) + 512|0);
 $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
 $31 = $err;
 $32 = $31 | $30;
 $err = $32;
 $33 = ((($4)) + 168|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = ((($4)) + 524|0);
 $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
 $39 = $err;
 $40 = $39 | $38;
 $err = $40;
 $41 = ((($4)) + 168|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $a;
 $44 = (($43) + 1)|0;
 $a = $44;
 $45 = ((($4)) + 600|0);
 $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = ((($4)) + 168|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = (__ZN14b2CLCommonData8instanceEv()|0);
 $54 = ((($53)) + 80|0);
 $55 = (_clSetKernelArg(($50|0),($51|0),4,($54|0))|0);
 $56 = $err;
 $57 = $56 | $55;
 $err = $57;
 $58 = ((($4)) + 168|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $a;
 $61 = (($60) + 1)|0;
 $a = $61;
 $62 = (__ZN14b2CLCommonData8instanceEv()|0);
 $63 = ((($62)) + 68|0);
 $64 = (_clSetKernelArg(($59|0),($60|0),4,($63|0))|0);
 $65 = $err;
 $66 = $65 | $64;
 $err = $66;
 $67 = ((($4)) + 168|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $a;
 $70 = (($69) + 1)|0;
 $a = $70;
 $71 = ((($4)) + 504|0);
 $72 = (_clSetKernelArg(($68|0),($69|0),4,($71|0))|0);
 $73 = $err;
 $74 = $73 | $72;
 $err = $74;
 $75 = ((($4)) + 168|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $a;
 $78 = (($77) + 1)|0;
 $a = $78;
 $79 = (__ZN14b2CLCommonData8instanceEv()|0);
 $80 = ((($79)) + 44|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (__ZN14b2CLCommonData8instanceEv()|0);
 $83 = ((($82)) + 36|0);
 $84 = (($83) + ($81<<2)|0);
 $85 = (_clSetKernelArg(($76|0),($77|0),4,($84|0))|0);
 $86 = $err;
 $87 = $86 | $85;
 $err = $87;
 $88 = ((($4)) + 168|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $a;
 $91 = (($90) + 1)|0;
 $a = $91;
 $92 = (__ZN14b2CLCommonData8instanceEv()|0);
 $93 = ((($92)) + 44|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (1 - ($94))|0;
 $96 = (__ZN14b2CLCommonData8instanceEv()|0);
 $97 = ((($96)) + 36|0);
 $98 = (($97) + ($95<<2)|0);
 $99 = (_clSetKernelArg(($89|0),($90|0),4,($98|0))|0);
 $100 = $err;
 $101 = $100 | $99;
 $err = $101;
 $102 = ((($4)) + 168|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $a;
 $105 = (($104) + 1)|0;
 $a = $105;
 $106 = (_clSetKernelArg(($103|0),($104|0),4,($1|0))|0);
 $107 = $err;
 $108 = $107 | $106;
 $err = $108;
 $109 = ((($4)) + 168|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $a;
 $112 = (($111) + 1)|0;
 $a = $112;
 $113 = (_clSetKernelArg(($110|0),($111|0),4,($2|0))|0);
 $114 = $err;
 $115 = $114 | $113;
 $err = $115;
 $116 = $err;
 $117 = ($116|0)!=(0);
 if ($117) {
  $118 = $err;
  HEAP32[$vararg_buffer>>2] = $118;
  (_printf(18179,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $119 = ((($4)) + 600|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ((($4)) + 328|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($120) + ($122))|0;
 $124 = (($123) - 1)|0;
 $125 = ((($4)) + 328|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124>>>0) / ($126>>>0))&-1;
 $numBlocks = $127;
 $128 = $numBlocks;
 $129 = ((($4)) + 328|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = Math_imul($128, $130)|0;
 HEAP32[$global>>2] = $131;
 $132 = (__ZN10b2CLDevice8instanceEv()|0);
 $133 = (__ZNK10b2CLDevice15GetCommandQueueEv($132)|0);
 $134 = ((($4)) + 168|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ((($4)) + 328|0);
 $137 = (_clEnqueueNDRangeKernel(($133|0),($135|0),1,(0|0),($global|0),($136|0),0,(0|0),(0|0))|0);
 $err = $137;
 $138 = $err;
 $139 = ($138|0)!=(0);
 if ($139) {
  (_printf(18901,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $140 = (__ZN10b2CLDevice8instanceEv()|0);
 $141 = (__ZNK10b2CLDevice15GetCommandQueueEv($140)|0);
 (_clFinish(($141|0))|0);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver6ReportEP16b2ContactManager($this,$m_pContactManager) {
 $this = $this|0;
 $m_pContactManager = $m_pContactManager|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bFoundSameContact = 0, $bodyA = 0, $bodyB = 0, $contactCount = 0, $edge = 0, $fA = 0, $fB = 0, $fixtureA = 0, $fixtureB = 0, $fixtureIndexA = 0, $fixtureIndexB = 0, $globalIndex = 0;
 var $globalIndices = 0, $i = 0, $iA = 0, $iB = 0, $impulse = 0, $indexA = 0, $indexB = 0, $j = 0, $k = 0, $manifoldListData = 0, $num = 0, $pc = 0, $validContactIndices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $impulse = sp + 4|0;
 $0 = $this;
 $1 = $m_pContactManager;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $contactCount = $9;
 $10 = ((($2)) + 600|0);
 $11 = HEAP32[$10>>2]|0;
 $contactCount = $11;
 $12 = $contactCount;
 $13 = ($12|0)<=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (__ZN14b2CLCommonData8instanceEv()|0);
 $15 = ((($14)) + 1156|0);
 $16 = HEAP32[$15>>2]|0;
 $manifoldListData = $16;
 $17 = (__ZN10b2CLDevice8instanceEv()|0);
 $18 = $manifoldListData;
 $19 = (__ZN14b2CLCommonData8instanceEv()|0);
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__ZN14b2CLCommonData8instanceEv()|0);
 $23 = ((($22)) + 36|0);
 $24 = (($23) + ($21<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $contactCount;
 $27 = ($26*72)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($17,$18,$25,0,$27);
 $28 = (__ZN14b2CLCommonData8instanceEv()|0);
 $29 = ((($28)) + 1172|0);
 $30 = HEAP32[$29>>2]|0;
 $globalIndices = $30;
 $31 = (__ZN10b2CLDevice8instanceEv()|0);
 $32 = $globalIndices;
 $33 = (__ZN14b2CLCommonData8instanceEv()|0);
 $34 = ((($33)) + 80|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($2)) + 604|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37<<2;
 $39 = $38<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($31,$32,$35,0,$39,1);
 $40 = $contactCount;
 $$arith = $40<<2;
 $$overflow = ($40>>>0)>(1073741823);
 $41 = $$overflow ? -1 : $$arith;
 $42 = (__Znaj($41)|0);
 $validContactIndices = $42;
 $43 = (__ZN10b2CLDevice8instanceEv()|0);
 $44 = $validContactIndices;
 $45 = (__ZN14b2CLCommonData8instanceEv()|0);
 $46 = ((($45)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $contactCount;
 $49 = $48<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($43,$44,$47,0,$49,1);
 $50 = $1;
 $51 = ((($50)) + 100|0);
 $52 = HEAP32[$51>>2]|0;
 $pc = $52;
 $i = 0;
 L7: while(1) {
  $53 = $i;
  $54 = $contactCount;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $validContactIndices;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $globalIndex = $59;
  $60 = $globalIndex;
  $61 = $manifoldListData;
  $62 = (($61) + (($60*72)|0)|0);
  $63 = ((($62)) + 68|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0);
  L10: do {
   if (!($65)) {
    $66 = $globalIndex;
    $67 = $66<<2;
    $68 = $globalIndices;
    $69 = (($68) + ($67<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $fixtureIndexA = $70;
    $71 = $globalIndex;
    $72 = $71<<2;
    $73 = (($72) + 1)|0;
    $74 = $globalIndices;
    $75 = (($74) + ($73<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $fixtureIndexB = $76;
    $77 = $fixtureIndexA;
    $78 = (__ZN14b2CLCommonData8instanceEv()|0);
    $79 = ((($78)) + 1160|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($77<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $fixtureA = $82;
    $83 = $fixtureIndexB;
    $84 = (__ZN14b2CLCommonData8instanceEv()|0);
    $85 = ((($84)) + 1160|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($83<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $fixtureB = $88;
    $89 = $fixtureIndexA;
    $90 = (__ZN14b2CLCommonData8instanceEv()|0);
    $91 = ((($90)) + 1164|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($89<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $indexA = $94;
    $95 = $fixtureIndexB;
    $96 = (__ZN14b2CLCommonData8instanceEv()|0);
    $97 = ((($96)) + 1164|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + ($95<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $indexB = $100;
    $101 = $fixtureA;
    $102 = (__ZN9b2Fixture7GetBodyEv($101)|0);
    $bodyA = $102;
    $103 = $fixtureB;
    $104 = (__ZN9b2Fixture7GetBodyEv($103)|0);
    $bodyB = $104;
    $105 = $bodyA;
    $106 = $bodyB;
    $107 = ($105|0)==($106|0);
    if ($107) {
     label = 7;
     break L7;
    }
    $108 = $bodyB;
    $109 = (__ZN6b2Body14GetContactListEv($108)|0);
    $edge = $109;
    $bFoundSameContact = 0;
    while(1) {
     $110 = $edge;
     $111 = ($110|0)!=(0|0);
     if (!($111)) {
      break;
     }
     $112 = $edge;
     $113 = HEAP32[$112>>2]|0;
     $114 = $bodyA;
     $115 = ($113|0)==($114|0);
     if ($115) {
      $116 = $edge;
      $117 = ((($116)) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (__ZN9b2Contact11GetFixtureAEv($118)|0);
      $fA = $119;
      $120 = $edge;
      $121 = ((($120)) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (__ZN9b2Contact11GetFixtureBEv($122)|0);
      $fB = $123;
      $124 = $edge;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (__ZNK9b2Contact14GetChildIndexAEv($126)|0);
      $iA = $127;
      $128 = $edge;
      $129 = ((($128)) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (__ZNK9b2Contact14GetChildIndexBEv($130)|0);
      $iB = $131;
      $132 = $fA;
      $133 = $fixtureA;
      $134 = ($132|0)==($133|0);
      if ($134) {
       $135 = $fB;
       $136 = $fixtureB;
       $137 = ($135|0)==($136|0);
       if ($137) {
        $138 = $iA;
        $139 = $indexA;
        $140 = ($138|0)==($139|0);
        if ($140) {
         $141 = $iB;
         $142 = $indexB;
         $143 = ($141|0)==($142|0);
         if ($143) {
          label = 15;
          break;
         }
        }
       }
      }
      $144 = $fA;
      $145 = $fixtureB;
      $146 = ($144|0)==($145|0);
      if ($146) {
       $147 = $fB;
       $148 = $fixtureA;
       $149 = ($147|0)==($148|0);
       if ($149) {
        $150 = $iA;
        $151 = $indexB;
        $152 = ($150|0)==($151|0);
        if ($152) {
         $153 = $iB;
         $154 = $indexA;
         $155 = ($153|0)==($154|0);
         if ($155) {
          label = 20;
          break;
         }
        }
       }
      }
     }
     $156 = $edge;
     $157 = ((($156)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $edge = $158;
    }
    if ((label|0) == 15) {
     label = 0;
     $bFoundSameContact = 1;
    }
    else if ((label|0) == 20) {
     label = 0;
     $bFoundSameContact = 1;
    }
    $159 = $bFoundSameContact;
    $160 = $159&1;
    if ($160) {
     $k = 0;
     while(1) {
      $161 = $k;
      $162 = $edge;
      $163 = ((($162)) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ((($164)) + 64|0);
      $166 = ((($165)) + 60|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($161|0)<($167|0);
      if (!($168)) {
       break L10;
      }
      $169 = $k;
      $170 = $i;
      $171 = $manifoldListData;
      $172 = (($171) + (($170*72)|0)|0);
      $173 = ((($172)) + 16|0);
      $174 = (($173) + (($169*24)|0)|0);
      $175 = ((($174)) + 8|0);
      $176 = +HEAPF32[$175>>2];
      $177 = $k;
      $178 = $edge;
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ((($180)) + 64|0);
      $182 = (($181) + (($177*20)|0)|0);
      $183 = ((($182)) + 8|0);
      HEAPF32[$183>>2] = $176;
      $184 = $k;
      $185 = $i;
      $186 = $manifoldListData;
      $187 = (($186) + (($185*72)|0)|0);
      $188 = ((($187)) + 16|0);
      $189 = (($188) + (($184*24)|0)|0);
      $190 = ((($189)) + 12|0);
      $191 = +HEAPF32[$190>>2];
      $192 = $k;
      $193 = $edge;
      $194 = ((($193)) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ((($195)) + 64|0);
      $197 = (($196) + (($192*20)|0)|0);
      $198 = ((($197)) + 12|0);
      HEAPF32[$198>>2] = $191;
      $199 = $k;
      $200 = (($199) + 1)|0;
      $k = $200;
     }
    }
   }
  } while(0);
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 if ((label|0) == 7) {
  ___assert_fail((18954|0),(18956|0),3470,(19040|0));
  // unreachable;
 }
 $203 = $validContactIndices;
 $204 = ($203|0)==(0|0);
 if (!($204)) {
  __ZdaPv($203);
 }
 $num = 0;
 while(1) {
  $205 = $pc;
  $206 = ($205|0)!=(0|0);
  if (!($206)) {
   break;
  }
  $207 = $pc;
  $208 = ((($207)) + 64|0);
  $209 = ((($208)) + 60|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($impulse)) + 16|0);
  HEAP32[$211>>2] = $210;
  $j = 0;
  while(1) {
   $212 = $j;
   $213 = ((($impulse)) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($212|0)<($214|0);
   if (!($215)) {
    break;
   }
   $216 = $j;
   $217 = $pc;
   $218 = ((($217)) + 64|0);
   $219 = (($218) + (($216*20)|0)|0);
   $220 = ((($219)) + 8|0);
   $221 = +HEAPF32[$220>>2];
   $222 = $j;
   $223 = (($impulse) + ($222<<2)|0);
   HEAPF32[$223>>2] = $221;
   $224 = $j;
   $225 = $pc;
   $226 = ((($225)) + 64|0);
   $227 = (($226) + (($224*20)|0)|0);
   $228 = ((($227)) + 12|0);
   $229 = +HEAPF32[$228>>2];
   $230 = $j;
   $231 = ((($impulse)) + 8|0);
   $232 = (($231) + ($230<<2)|0);
   HEAPF32[$232>>2] = $229;
   $233 = $j;
   $234 = (($233) + 1)|0;
   $j = $234;
  }
  $235 = $1;
  $236 = ((($235)) + 120|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$237>>2]|0;
  $239 = ((($238)) + 20|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $pc;
  FUNCTION_TABLE_viii[$240 & 1023]($237,$241,$impulse);
  $242 = $num;
  $243 = (($242) + 1)|0;
  $num = $243;
  $244 = $pc;
  $245 = (__ZN9b2Contact7GetNextEv($244)|0);
  $pc = $245;
 }
 STACKTOP = sp;return;
}
function __ZN12b2CLSolveTOIC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $TOIKernelSource = 0, $TOIKernelSourceLen = 0, $buffer = 0, $err = 0, $len = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 204880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $err = sp + 64|0;
 $TOIKernelSource = sp + 60|0;
 $TOIKernelSourceLen = sp + 56|0;
 $len = sp + 52|0;
 $buffer = sp + 72|0;
 $0 = $this;
 $1 = $0;
 (_printf(19047,$vararg_buffer)|0);
 HEAP32[$TOIKernelSource>>2] = 0;
 HEAP32[$TOIKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz_343(19077,$vararg_buffer2);
 $2 = (__ZL15shrFindFilePathPKcPv_345(19105,0)|0);
 $3 = (__ZL18b2clLoadProgSourcePKcS0_Pj_347($2,19137,$TOIKernelSourceLen)|0);
 HEAP32[$TOIKernelSource>>2] = $3;
 $4 = HEAP32[$TOIKernelSource>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __Z5b2LogPKcz(19152,$vararg_buffer4);
 }
 $6 = (__ZN10b2CLDevice8instanceEv()|0);
 $7 = (__ZNK10b2CLDevice10GetContextEv($6)|0);
 $8 = (_clCreateProgramWithSource(($7|0),1,($TOIKernelSource|0),(0|0),($err|0))|0);
 $9 = ((($1)) + 16|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf(19218,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $13 = ((($1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_clBuildProgram(($14|0),0,(0|0),(43215|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  (_printf(19260,$vararg_buffer8)|0);
  $18 = ((($1)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN10b2CLDevice8instanceEv()|0);
  $21 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($20)|0);
  (_clGetProgramBuildInfo(($19|0),($21|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer10>>2] = $buffer;
  (_printf(19304,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 }
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_clCreateKernel(($23|0),(19308|0),($err|0))|0);
 $25 = ((($1)) + 36|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($1)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 $29 = HEAP32[$err>>2]|0;
 $30 = ($29|0)!=(0);
 $or$cond = $28 | $30;
 if ($or$cond) {
  (_printf(19332,$vararg_buffer12)|0);
  _exit(1);
  // unreachable;
 } else {
  $31 = (__ZN10b2CLDevice8instanceEv()|0);
  $32 = ((($1)) + 36|0);
  $33 = ((($1)) + 24|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($31,$32,$33);
  $34 = ((($1)) + 56|0);
  HEAP32[$34>>2] = 0;
  $35 = ((($1)) + 60|0);
  HEAP32[$35>>2] = 0;
  $36 = ((($1)) + 72|0);
  HEAP32[$36>>2] = 0;
  $37 = ((($1)) + 68|0);
  HEAP32[$37>>2] = 0;
  $38 = ((($1)) + 76|0);
  HEAP32[$38>>2] = 0;
  $39 = ((($1)) + 80|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz_343($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf($1,$args)|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv_345($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj_347($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 436|0;
 $77 = sp + 553|0;
 $78 = sp + 552|0;
 $file = sp + 4|0;
 $87 = $path;
 $88 = $dummy;
 $89 = $kernelLength;
 $93 = HEAP8[30464]|0;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $95 = (___cxa_guard_acquire(30464)|0);
  $96 = ($95|0)!=(0);
  if ($96) {
   $85 = 32620;
   $97 = $85;
   $84 = $97;
   $98 = $84;
   $83 = $98;
   $99 = $83;
   $82 = $99;
   $81 = $97;
   $100 = $81;
   $80 = $100;
   $101 = $80;
   $79 = $101;
   $102 = $79;
   $__a$i$i = $102;
   $__i$i$i = 0;
   while(1) {
    $103 = $__i$i$i;
    $104 = ($103>>>0)<(3);
    if (!($104)) {
     break;
    }
    $105 = $__i$i$i;
    $106 = $__a$i$i;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = 0;
    $108 = $__i$i$i;
    $109 = (($108) + 1)|0;
    $__i$i$i = $109;
   }
   (___cxa_atexit((382|0),(32620|0),(___dso_handle|0))|0);
  }
 }
 $76 = 32620;
 $110 = $76;
 $75 = $110;
 $70 = $110;
 $111 = $70;
 $69 = $111;
 $112 = $69;
 $68 = $112;
 $113 = $68;
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = $115 & 1;
 $117 = ($116|0)!=(0);
 if ($117) {
  $58 = $110;
  $118 = $58;
  $57 = $118;
  $119 = $57;
  $56 = $119;
  $120 = $56;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($122,$77);
  $61 = $110;
  $62 = 0;
  $123 = $61;
  $124 = $62;
  $60 = $123;
  $125 = $60;
  $59 = $125;
  $126 = $59;
  $127 = ((($126)) + 4|0);
  HEAP32[$127>>2] = $124;
 } else {
  $67 = $110;
  $128 = $67;
  $66 = $128;
  $129 = $66;
  $65 = $129;
  $130 = $65;
  $131 = ((($130)) + 1|0);
  $64 = $131;
  $132 = $64;
  $63 = $132;
  $133 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($133,$78);
  $73 = $110;
  $74 = 0;
  $134 = $73;
  $135 = $74;
  $136 = $135 << 1;
  $137 = $136&255;
  $72 = $134;
  $138 = $72;
  $71 = $138;
  $139 = $71;
  HEAP8[$139>>0] = $137;
 }
 $140 = $87;
 $51 = $file;
 $52 = $140;
 $53 = 8;
 $141 = $51;
 $142 = ((($141)) + 108|0);
 $50 = $142;
 $143 = $50;
 $49 = $143;
 $144 = $49;
 $145 = 5964;
 HEAP32[$144>>2] = $145;
 $146 = 5948;
 HEAP32[$143>>2] = $146;
 $147 = 1852;
 HEAP32[$141>>2] = $147;
 $148 = ((($141)) + 108|0);
 $149 = 1872;
 HEAP32[$148>>2] = $149;
 $150 = ((($141)) + 8|0);
 $46 = $141;
 $151 = 1884;
 $47 = $151;
 $48 = $150;
 $152 = $46;
 $153 = $47;
 $154 = HEAP32[$153>>2]|0;
 HEAP32[$152>>2] = $154;
 $155 = ((($153)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$152>>2]|0;
 $158 = ((($157)) + -12|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($152) + ($159)|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($152)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = HEAP32[$152>>2]|0;
 $163 = ((($162)) + -12|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($152) + ($164)|0);
 $166 = $48;
 $44 = $165;
 $45 = $166;
 $167 = $44;
 $168 = $45;
 __THREW__ = 0;
 invoke_vii(383,($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $201 = ___cxa_find_matching_catch_2()|0;
  $202 = tempRet0;
  $54 = $201;
  $55 = $202;
 } else {
  $171 = ((($167)) + 72|0);
  HEAP32[$171>>2] = 0;
  $172 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $173 = ((($167)) + 76|0);
  HEAP32[$173>>2] = $172;
  $174 = 1852;
  HEAP32[$141>>2] = $174;
  $175 = ((($141)) + 108|0);
  $176 = 1872;
  HEAP32[$175>>2] = $176;
  $177 = ((($141)) + 8|0);
  __THREW__ = 0;
  invoke_vi(384,($177|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $203 = ___cxa_find_matching_catch_2()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $180 = ((($141)) + 8|0);
   $181 = $52;
   $182 = $53;
   $183 = $182 | 8;
   __THREW__ = 0;
   $184 = (invoke_iiii(385,($180|0),($181|0),($183|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   do {
    if (!($186)) {
     $187 = ($184|0)==(0|0);
     if ($187) {
      $188 = HEAP32[$141>>2]|0;
      $189 = ((($188)) + -12|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (($141) + ($190)|0);
      $42 = $191;
      $43 = 4;
      $192 = $42;
      $193 = $43;
      $40 = $192;
      $41 = $193;
      $194 = $40;
      $195 = ((($194)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $41;
      $198 = $196 | $197;
      __THREW__ = 0;
      invoke_vii(386,($194|0),($198|0));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break;
      }
     }
     $39 = $file;
     $218 = $39;
     $219 = ((($218)) + 8|0);
     $38 = $219;
     $220 = $38;
     $221 = ((($220)) + 64|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)!=(0|0);
     if (!($223)) {
      $86 = 0;
      $92 = 1;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
      $323 = $86;
      STACKTOP = sp;return ($323|0);
     }
     while(1) {
      $228 = HEAP32[$file>>2]|0;
      $229 = ((($228)) + -12|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($file) + ($230)|0);
      $37 = $231;
      $232 = $37;
      $36 = $232;
      $233 = $36;
      $234 = ((($233)) + 16|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235 & 2;
      $237 = ($236|0)!=(0);
      $238 = $237 ^ 1;
      if (!($238)) {
       label = 37;
       break;
      }
      $33 = $file;
      $34 = 41150;
      $35 = 1024;
      $239 = $33;
      $240 = $34;
      $241 = $35;
      $242 = HEAP32[$239>>2]|0;
      $243 = ((($242)) + -12|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = (($239) + ($244)|0);
      $28 = $245;
      $29 = 10;
      $246 = $28;
      __THREW__ = 0;
      $247 = (invoke_ii(387,($246|0))|0);
      $248 = __THREW__; __THREW__ = 0;
      $249 = $248&1;
      if ($249) {
       label = 24;
       break;
      }
      HEAP32[$30>>2] = $247;
      $27 = $30;
      $250 = $27;
      __THREW__ = 0;
      $251 = (invoke_iii(388,($250|0),(33460|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 30;
       break;
      }
      $254 = $29;
      $25 = $251;
      $26 = $254;
      $255 = $25;
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $26;
      __THREW__ = 0;
      $260 = (invoke_iii($258|0,($255|0),($259|0))|0);
      $261 = __THREW__; __THREW__ = 0;
      $262 = $261&1;
      if ($262) {
       label = 30;
       break;
      }
      __THREW__ = 0;
      invoke_vi(389,($30|0));
      $271 = __THREW__; __THREW__ = 0;
      $272 = $271&1;
      if ($272) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iiiii(390,($239|0),($240|0),($241|0),($260|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32620|0),(41150|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       label = 24;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(391,(32620|0),(21197|0))|0);
      $277 = __THREW__; __THREW__ = 0;
      $278 = $277&1;
      if ($278) {
       label = 24;
       break;
      }
     }
     do {
      if ((label|0) == 24) {
       $224 = ___cxa_find_matching_catch_2()|0;
       $225 = tempRet0;
       $eh$lpad$body$index2Z2D = $225;$eh$lpad$body$indexZ2D = $224;
      }
      else if ((label|0) == 30) {
       $263 = ___cxa_find_matching_catch_2()|0;
       $264 = tempRet0;
       $31 = $263;
       $32 = $264;
       __THREW__ = 0;
       invoke_vi(389,($30|0));
       $265 = __THREW__; __THREW__ = 0;
       $266 = $265&1;
       if ($266) {
        $269 = ___cxa_find_matching_catch_3(0|0)|0;
        $270 = tempRet0;
        ___clang_call_terminate($269);
        // unreachable;
       } else {
        $267 = $31;
        $268 = $32;
        $eh$lpad$body$index2Z2D = $268;$eh$lpad$body$indexZ2D = $267;
        break;
       }
      }
      else if ((label|0) == 37) {
       $24 = 32620;
       $279 = $24;
       $23 = $279;
       $280 = $23;
       $22 = $280;
       $281 = $22;
       $21 = $281;
       $282 = $21;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283&255;
       $285 = $284 & 1;
       $286 = ($285|0)!=(0);
       if ($286) {
        $17 = $279;
        $287 = $17;
        $16 = $287;
        $288 = $16;
        $15 = $288;
        $289 = $15;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $299 = $291;
       } else {
        $20 = $279;
        $292 = $20;
        $19 = $292;
        $293 = $19;
        $18 = $293;
        $294 = $18;
        $295 = HEAP8[$294>>0]|0;
        $296 = $295&255;
        $297 = $296 >> 1;
        $299 = $297;
       }
       $298 = $89;
       HEAP32[$298>>2] = $299;
       $14 = 32620;
       $300 = $14;
       $13 = $300;
       $301 = $13;
       $12 = $301;
       $302 = $12;
       $11 = $302;
       $303 = $11;
       $10 = $303;
       $304 = $10;
       $9 = $304;
       $305 = $9;
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 1;
       $309 = ($308|0)!=(0);
       if ($309) {
        $3 = $302;
        $310 = $3;
        $2 = $310;
        $311 = $2;
        $1 = $311;
        $312 = $1;
        $313 = ((($312)) + 8|0);
        $314 = HEAP32[$313>>2]|0;
        $321 = $314;
       } else {
        $8 = $302;
        $315 = $8;
        $7 = $315;
        $316 = $7;
        $6 = $316;
        $317 = $6;
        $318 = ((($317)) + 1|0);
        $5 = $318;
        $319 = $5;
        $4 = $319;
        $320 = $4;
        $321 = $320;
       }
       $0 = $321;
       $322 = $0;
       $86 = $322;
       $92 = 1;
       __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
       $323 = $86;
       STACKTOP = sp;return ($323|0);
      }
     } while(0);
     $90 = $eh$lpad$body$indexZ2D;
     $91 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(20,($file|0));
     $226 = __THREW__; __THREW__ = 0;
     $227 = $226&1;
     if ($227) {
      $326 = ___cxa_find_matching_catch_3(0|0)|0;
      $327 = tempRet0;
      ___clang_call_terminate($326);
      // unreachable;
     } else {
      $324 = $90;
      $325 = $91;
      ___resumeException($324|0);
      // unreachable;
     }
    }
   } while(0);
   $205 = ___cxa_find_matching_catch_2()|0;
   $206 = tempRet0;
   $54 = $205;
   $55 = $206;
   __THREW__ = 0;
   invoke_vi(28,($177|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if ($208) {
    $216 = ___cxa_find_matching_catch_3(0|0)|0;
    $217 = tempRet0;
    ___clang_call_terminate($216);
    // unreachable;
   }
  }
  __THREW__ = 0;
  $209 = __THREW__; __THREW__ = 0;
  $210 = $209&1;
  if ($210) {
   $216 = ___cxa_find_matching_catch_3(0|0)|0;
   $217 = tempRet0;
   ___clang_call_terminate($216);
   // unreachable;
  }
 }
 $211 = ((($141)) + 108|0);
 __THREW__ = 0;
 invoke_vi(79,($211|0));
 $212 = __THREW__; __THREW__ = 0;
 $213 = $212&1;
 if ($213) {
  $216 = ___cxa_find_matching_catch_3(0|0)|0;
  $217 = tempRet0;
  ___clang_call_terminate($216);
  // unreachable;
 } else {
  $214 = $54;
  $215 = $55;
  ___resumeException($214|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12b2CLSolveTOID2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = (__ZN10b2CLDevice8instanceEv()|0);
  $6 = ((($1)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($5,$7);
 }
 $8 = ((($1)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = (__ZN10b2CLDevice8instanceEv()|0);
  $12 = ((($1)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($11,$13);
 }
 $14 = ((($1)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = ((($1)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 __ZdaPv($18);
 STACKTOP = sp;return;
}
function __ZN12b2CLSolveTOI21syncMovedBodytoDeviceERNSt3__13setIP6b2BodyNS0_4lessIS3_EENS0_9allocatorIS3_EEEEP10b2CLSolver($this,$movedBodySet,$solver) {
 $this = $this|0;
 $movedBodySet = $movedBodySet|0;
 $solver = $solver|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $bodySize = 0, $err = 0, $global = 0, $i = 0, $iter = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $9 = sp + 8|0;
 $13 = sp + 232|0;
 $15 = sp + 224|0;
 $17 = sp + 216|0;
 $19 = sp;
 $27 = sp + 180|0;
 $29 = sp + 172|0;
 $31 = sp + 164|0;
 $42 = sp + 120|0;
 $bodySize = sp + 64|0;
 $iter = sp + 56|0;
 $56 = sp + 52|0;
 $57 = sp + 44|0;
 $global = sp + 28|0;
 $53 = $this;
 $54 = $movedBodySet;
 $55 = $solver;
 $58 = $53;
 $59 = $54;
 $52 = $59;
 $60 = $52;
 $51 = $60;
 $61 = $51;
 $62 = ((($61)) + 8|0);
 $50 = $62;
 $63 = $50;
 $49 = $63;
 $64 = $49;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(0);
 if ($66) {
  STACKTOP = sp;return;
 }
 $67 = $54;
 $48 = $67;
 $68 = $48;
 $47 = $68;
 $69 = $47;
 $70 = ((($69)) + 8|0);
 $46 = $70;
 $71 = $46;
 $45 = $71;
 $72 = $45;
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($58)) + 60|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($73>>>0)>($75>>>0);
 if ($76) {
  $77 = ((($58)) + 56|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)!=(0|0);
  if ($79) {
   $80 = ((($58)) + 56|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(0|0);
   if (!($82)) {
    __ZdaPv($81);
   }
   $83 = (__ZN10b2CLDevice8instanceEv()|0);
   $84 = ((($58)) + 52|0);
   $85 = HEAP32[$84>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($83,$85);
  }
  $86 = $54;
  $40 = $86;
  $87 = $40;
  $39 = $87;
  $88 = $39;
  $89 = ((($88)) + 8|0);
  $38 = $89;
  $90 = $38;
  $37 = $90;
  $91 = $37;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92*11)|0;
  $$arith = $93<<2;
  $$overflow = ($93>>>0)>(1073741823);
  $94 = $$overflow ? -1 : $$arith;
  $95 = (__Znaj($94)|0);
  $96 = ((($58)) + 56|0);
  HEAP32[$96>>2] = $95;
  $97 = (__ZN10b2CLDevice8instanceEv()|0);
  $98 = $54;
  $3 = $98;
  $99 = $3;
  $2 = $99;
  $100 = $2;
  $101 = ((($100)) + 8|0);
  $1 = $101;
  $102 = $1;
  $0 = $102;
  $103 = $0;
  $104 = HEAP32[$103>>2]|0;
  $105 = $104<<2;
  $106 = ($105*11)|0;
  $107 = (__ZN10b2CLDevice13allocateArrayEjb($97,$106,0)|0);
  $108 = ((($58)) + 52|0);
  HEAP32[$108>>2] = $107;
 }
 $109 = $54;
 $7 = $109;
 $110 = $7;
 $6 = $110;
 $111 = $6;
 $112 = ((($111)) + 8|0);
 $5 = $112;
 $113 = $5;
 $4 = $113;
 $114 = $4;
 $115 = HEAP32[$114>>2]|0;
 HEAP32[$bodySize>>2] = $115;
 $i = 0;
 $116 = $54;
 $16 = $116;
 $117 = $16;
 $14 = $117;
 $118 = $14;
 $12 = $118;
 $119 = $12;
 $120 = HEAP32[$119>>2]|0;
 $10 = $13;
 $11 = $120;
 $121 = $10;
 $122 = $11;
 HEAP32[$121>>2] = $122;
 $123 = HEAP32[$13>>2]|0;
 HEAP32[$17>>2] = $123;
 ;HEAP8[$9>>0]=HEAP8[$17>>0]|0;HEAP8[$9+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$17+3>>0]|0;
 $8 = $15;
 $124 = $8;
 $125 = HEAP32[$9>>2]|0;
 HEAP32[$124>>2] = $125;
 $126 = HEAP32[$15>>2]|0;
 HEAP32[$iter>>2] = $126;
 while(1) {
  $127 = $54;
  $30 = $127;
  $128 = $30;
  $28 = $128;
  $129 = $28;
  $26 = $129;
  $130 = $26;
  $131 = ((($130)) + 4|0);
  $25 = $131;
  $132 = $25;
  $24 = $132;
  $133 = $24;
  $23 = $133;
  $134 = $23;
  $22 = $134;
  $135 = $22;
  $20 = $27;
  $21 = $135;
  $136 = $20;
  $137 = $21;
  HEAP32[$136>>2] = $137;
  $138 = HEAP32[$27>>2]|0;
  HEAP32[$31>>2] = $138;
  ;HEAP8[$19>>0]=HEAP8[$31>>0]|0;HEAP8[$19+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$31+3>>0]|0;
  $18 = $29;
  $139 = $18;
  $140 = HEAP32[$19>>2]|0;
  HEAP32[$139>>2] = $140;
  $141 = HEAP32[$29>>2]|0;
  HEAP32[$56>>2] = $141;
  $34 = $iter;
  $35 = $56;
  $142 = $34;
  $143 = $35;
  $32 = $142;
  $33 = $143;
  $144 = $32;
  $145 = HEAP32[$144>>2]|0;
  $146 = $33;
  $147 = HEAP32[$146>>2]|0;
  $148 = ($145|0)==($147|0);
  $149 = $148 ^ 1;
  if (!($149)) {
   break;
  }
  $36 = $iter;
  $150 = $36;
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 16|0);
  $153 = HEAP32[$152>>2]|0;
  $b = $153;
  $154 = $b;
  $155 = ((($154)) + 100|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (+($156|0));
  $158 = $i;
  $159 = ($158*11)|0;
  $160 = (($159) + 0)|0;
  $161 = ((($58)) + 56|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + ($160<<2)|0);
  HEAPF32[$163>>2] = $157;
  $164 = $b;
  $165 = ((($164)) + 64|0);
  $166 = +HEAPF32[$165>>2];
  $167 = $i;
  $168 = ($167*11)|0;
  $169 = (($168) + 1)|0;
  $170 = ((($58)) + 56|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + ($169<<2)|0);
  HEAPF32[$172>>2] = $166;
  $173 = $b;
  $174 = ((($173)) + 64|0);
  $175 = ((($174)) + 4|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $i;
  $178 = ($177*11)|0;
  $179 = (($178) + 2)|0;
  $180 = ((($58)) + 56|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($179<<2)|0);
  HEAPF32[$182>>2] = $176;
  $183 = $b;
  $184 = ((($183)) + 72|0);
  $185 = +HEAPF32[$184>>2];
  $186 = $i;
  $187 = ($186*11)|0;
  $188 = (($187) + 3)|0;
  $189 = ((($58)) + 56|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + ($188<<2)|0);
  HEAPF32[$191>>2] = $185;
  $192 = $b;
  $193 = ((($192)) + 28|0);
  $194 = ((($193)) + 16|0);
  $195 = +HEAPF32[$194>>2];
  $196 = $i;
  $197 = ($196*11)|0;
  $198 = (($197) + 4)|0;
  $199 = ((($58)) + 56|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = (($200) + ($198<<2)|0);
  HEAPF32[$201>>2] = $195;
  $202 = $b;
  $203 = ((($202)) + 28|0);
  $204 = ((($203)) + 16|0);
  $205 = ((($204)) + 4|0);
  $206 = +HEAPF32[$205>>2];
  $207 = $i;
  $208 = ($207*11)|0;
  $209 = (($208) + 5)|0;
  $210 = ((($58)) + 56|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + ($209<<2)|0);
  HEAPF32[$212>>2] = $206;
  $213 = $b;
  $214 = ((($213)) + 28|0);
  $215 = ((($214)) + 28|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $i;
  $218 = ($217*11)|0;
  $219 = (($218) + 6)|0;
  $220 = ((($58)) + 56|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + ($219<<2)|0);
  HEAPF32[$222>>2] = $216;
  $223 = $b;
  $224 = ((($223)) + 12|0);
  $225 = +HEAPF32[$224>>2];
  $226 = $i;
  $227 = ($226*11)|0;
  $228 = (($227) + 7)|0;
  $229 = ((($58)) + 56|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + ($228<<2)|0);
  HEAPF32[$231>>2] = $225;
  $232 = $b;
  $233 = ((($232)) + 12|0);
  $234 = ((($233)) + 4|0);
  $235 = +HEAPF32[$234>>2];
  $236 = $i;
  $237 = ($236*11)|0;
  $238 = (($237) + 8)|0;
  $239 = ((($58)) + 56|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + ($238<<2)|0);
  HEAPF32[$241>>2] = $235;
  $242 = $b;
  $243 = ((($242)) + 12|0);
  $244 = ((($243)) + 8|0);
  $245 = +HEAPF32[$244>>2];
  $246 = $i;
  $247 = ($246*11)|0;
  $248 = (($247) + 9)|0;
  $249 = ((($58)) + 56|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + ($248<<2)|0);
  HEAPF32[$251>>2] = $245;
  $252 = $b;
  $253 = ((($252)) + 12|0);
  $254 = ((($253)) + 8|0);
  $255 = ((($254)) + 4|0);
  $256 = +HEAPF32[$255>>2];
  $257 = $i;
  $258 = ($257*11)|0;
  $259 = (($258) + 10)|0;
  $260 = ((($58)) + 56|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + ($259<<2)|0);
  HEAPF32[$262>>2] = $256;
  $263 = $i;
  $264 = (($263) + 1)|0;
  $i = $264;
  $43 = $iter;
  $44 = 0;
  $265 = $43;
  ;HEAP32[$42>>2]=HEAP32[$265>>2]|0;
  $41 = $265;
  $266 = $41;
  $267 = HEAP32[$266>>2]|0;
  $268 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($267)|0);
  HEAP32[$266>>2] = $268;
  $269 = HEAP32[$42>>2]|0;
  HEAP32[$57>>2] = $269;
 }
 $270 = (__ZN10b2CLDevice8instanceEv()|0);
 $271 = ((($58)) + 52|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = ((($58)) + 56|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = HEAP32[$bodySize>>2]|0;
 $276 = ($275*44)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($270,$272,$274,0,$276,1);
 $err = 0;
 $a = 0;
 $277 = ((($58)) + 36|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $a;
 $280 = (($279) + 1)|0;
 $a = $280;
 $281 = ((($58)) + 52|0);
 $282 = (_clSetKernelArg(($278|0),($279|0),4,($281|0))|0);
 $283 = $err;
 $284 = $283 | $282;
 $err = $284;
 $285 = ((($58)) + 36|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = $a;
 $288 = (($287) + 1)|0;
 $a = $288;
 $289 = (_clSetKernelArg(($286|0),($287|0),4,($bodySize|0))|0);
 $290 = $err;
 $291 = $290 | $289;
 $err = $291;
 $292 = ((($58)) + 36|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $a;
 $295 = (($294) + 1)|0;
 $a = $295;
 $296 = (__ZN14b2CLCommonData8instanceEv()|0);
 $297 = ((($296)) + 64|0);
 $298 = (_clSetKernelArg(($293|0),($294|0),4,($297|0))|0);
 $299 = $err;
 $300 = $299 | $298;
 $err = $300;
 $301 = ((($58)) + 36|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = $a;
 $304 = (($303) + 1)|0;
 $a = $304;
 $305 = $55;
 $306 = ((($305)) + 392|0);
 $307 = (_clSetKernelArg(($302|0),($303|0),4,($306|0))|0);
 $308 = $err;
 $309 = $308 | $307;
 $err = $309;
 $310 = ((($58)) + 36|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $a;
 $313 = (($312) + 1)|0;
 $a = $313;
 $314 = $55;
 $315 = ((($314)) + 400|0);
 $316 = (_clSetKernelArg(($311|0),($312|0),4,($315|0))|0);
 $317 = $err;
 $318 = $317 | $316;
 $err = $318;
 $319 = $err;
 $320 = ($319|0)!=(0);
 if ($320) {
  $321 = ((($58)) + 36|0);
  $322 = HEAP32[$321>>2]|0;
  HEAP32[$vararg_buffer>>2] = $322;
  (_printf(19385,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $323 = HEAP32[$bodySize>>2]|0;
 $324 = ((($58)) + 24|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = (($323) + ($325))|0;
 $327 = (($326) - 1)|0;
 $328 = ((($58)) + 24|0);
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327>>>0) / ($329>>>0))&-1;
 $numBlocks = $330;
 $331 = $numBlocks;
 $332 = ((($58)) + 24|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = Math_imul($331, $333)|0;
 HEAP32[$global>>2] = $334;
 $335 = (__ZN10b2CLDevice8instanceEv()|0);
 $336 = (__ZNK10b2CLDevice15GetCommandQueueEv($335)|0);
 $337 = ((($58)) + 36|0);
 $338 = HEAP32[$337>>2]|0;
 $339 = ((($58)) + 24|0);
 $340 = (_clEnqueueNDRangeKernel(($336|0),($338|0),1,(0|0),($global|0),($339|0),0,(0|0),(0|0))|0);
 $err = $340;
 $341 = $err;
 $342 = ($341|0)!=(0);
 if ($342) {
  (_printf(19429,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6b2Body7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8b2CLSortC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $sortKernelSource = 0, $sortKernelSourceLen = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 (_printf(19481,$vararg_buffer)|0);
 $sortKernelSource = 0;
 $sortKernelSourceLen = 0;
 $2 = ((($1)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 40|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 44|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2CLSortD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8b2CLSort8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[30472]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (32632|0);
 }
 $4 = (___cxa_guard_acquire(30472)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (32632|0);
 }
 __THREW__ = 0;
 invoke_vi(432,(32632|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((433|0),(32632|0),(___dso_handle|0))|0);
 STACKTOP = sp;return (32632|0);
}
function __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($this,$keyBuffer,$valueBuffer,$arraySize,$sortAscending,$storeKeys) {
 $this = $this|0;
 $keyBuffer = $keyBuffer|0;
 $valueBuffer = $valueBuffer|0;
 $arraySize = $arraySize|0;
 $sortAscending = $sortAscending|0;
 $storeKeys = $storeKeys|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $3 = $this;
 $4 = $keyBuffer;
 $5 = $valueBuffer;
 $6 = $arraySize;
 $7 = $sortAscending;
 $8 = $storeKeys;
 $9 = $3;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = ((($9)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = ((($9)) + 36|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    __ZdaPv($18);
   }
  }
  $20 = $6;
  $$arith6 = $20<<2;
  $$overflow7 = ($20>>>0)>(1073741823);
  $21 = $$overflow7 ? -1 : $$arith6;
  $22 = (__Znaj($21)|0);
  $23 = ((($9)) + 36|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($9)) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = ((($9)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    __ZdaPv($28);
   }
  }
  $30 = $6;
  $$arith2 = $30<<2;
  $$overflow3 = ($30>>>0)>(1073741823);
  $31 = $$overflow3 ? -1 : $$arith2;
  $32 = (__Znaj($31)|0);
  $33 = ((($9)) + 40|0);
  HEAP32[$33>>2] = $32;
  $34 = ((($9)) + 44|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = ((($9)) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    __ZdaPv($38);
   }
  }
  $40 = $6;
  $$arith = $40<<3;
  $$overflow = ($40>>>0)>(536870911);
  $41 = $$overflow ? -1 : $$arith;
  $42 = (__Znaj($41)|0);
  $43 = ((($9)) + 44|0);
  HEAP32[$43>>2] = $42;
  $44 = $6;
  $45 = ((($9)) + 32|0);
  HEAP32[$45>>2] = $44;
 }
 $46 = (__ZN10b2CLDevice8instanceEv()|0);
 $47 = ((($9)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $4;
 $50 = $6;
 $51 = $50<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($46,$48,$49,0,$51,1);
 $52 = (__ZN10b2CLDevice8instanceEv()|0);
 $53 = ((($9)) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $5;
 $56 = $6;
 $57 = $56<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($52,$54,$55,0,$57,1);
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $6;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = ((($9)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $i;
  $67 = ((($9)) + 44|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<3)|0);
  HEAP32[$69>>2] = $65;
  $70 = $i;
  $71 = ((($9)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($70<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = ((($9)) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($75<<3)|0);
  $79 = ((($78)) + 4|0);
  HEAP32[$79>>2] = $74;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 $82 = ((($9)) + 44|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($9)) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = (($85) + ($86<<3)|0);
 $0 = $83;
 $1 = $87;
 HEAP32[$2>>2] = 434;
 $88 = $0;
 $89 = $1;
 __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($88,$89,$2);
 $i1 = 0;
 while(1) {
  $90 = $i1;
  $91 = $6;
  $92 = ($90|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $7;
  $94 = ($93|0)!=(0);
  if ($94) {
   $95 = $i1;
   $96 = ((($9)) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + ($95<<3)|0);
   $99 = ((($98)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $i1;
   $102 = ((($9)) + 40|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + ($101<<2)|0);
   HEAP32[$104>>2] = $100;
   $105 = $8;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $i1;
    $108 = ((($9)) + 44|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($107<<3)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $i1;
    $113 = ((($9)) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($112<<2)|0);
    HEAP32[$115>>2] = $111;
   }
  } else {
   $116 = $6;
   $117 = $i1;
   $118 = (($116) - ($117))|0;
   $119 = (($118) - 1)|0;
   $120 = ((($9)) + 44|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($119<<3)|0);
   $123 = ((($122)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $i1;
   $126 = ((($9)) + 40|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($125<<2)|0);
   HEAP32[$128>>2] = $124;
   $129 = $8;
   $130 = ($129|0)!=(0);
   if ($130) {
    $131 = $6;
    $132 = $i1;
    $133 = (($131) - ($132))|0;
    $134 = (($133) - 1)|0;
    $135 = ((($9)) + 44|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($134<<3)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $i1;
    $140 = ((($9)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($139<<2)|0);
    HEAP32[$142>>2] = $138;
   }
  }
  $143 = $i1;
  $144 = (($143) + 1)|0;
  $i1 = $144;
 }
 $145 = (__ZN10b2CLDevice8instanceEv()|0);
 $146 = $5;
 $147 = ((($9)) + 40|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $6;
 $150 = $149<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($145,$146,$148,0,$150,0);
 $151 = $8;
 $152 = ($151|0)!=(0);
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = (__ZN10b2CLDevice8instanceEv()|0);
 $154 = $4;
 $155 = ((($9)) + 36|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $6;
 $158 = $157<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($153,$154,$156,0,$158,0);
 STACKTOP = sp;return;
}
function __Z22CompareElementsForSortRK12element_typeS1_($e1,$e2) {
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e1;
 $1 = $e2;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 208|0;
 $__t$i4 = sp + 176|0;
 $__t$i3 = sp + 144|0;
 $__t$i2 = sp + 112|0;
 $__t$i1 = sp + 80|0;
 $__t$i = sp + 48|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  $33 = $31;
  $34 = $30;
  $35 = $33;
  $36 = $34;
  $37 = (($35) - ($36))|0;
  $38 = (($37|0) / 8)&-1;
  $__len = $38;
  $39 = $__len;
  switch ($39|0) {
  case 2:  {
   label = 3;
   break L1;
   break;
  }
  case 3:  {
   label = 5;
   break L1;
   break;
  }
  case 4:  {
   label = 6;
   break L1;
   break;
  }
  case 5:  {
   label = 7;
   break L1;
   break;
  }
  case 1: case 0:  {
   label = 49;
   break L1;
   break;
  }
  default: {
  }
  }
  $79 = $__len;
  $80 = ($79|0)<=(30);
  $81 = $30;
  if ($80) {
   label = 9;
   break;
  }
  $__m = $81;
  $84 = $31;
  $__lm1 = $84;
  $85 = $__lm1;
  $86 = ((($85)) + -8|0);
  $__lm1 = $86;
  $87 = $__len;
  $88 = ($87|0)>=(1000);
  $89 = $__len;
  $90 = (($89|0) / 2)&-1;
  $__delta = $90;
  $91 = $__delta;
  $92 = $__m;
  $93 = (($92) + ($91<<3)|0);
  $__m = $93;
  if ($88) {
   $94 = $__delta;
   $95 = (($94|0) / 2)&-1;
   $__delta = $95;
   $96 = $30;
   $97 = $30;
   $98 = $__delta;
   $99 = (($97) + ($98<<3)|0);
   $100 = $__m;
   $101 = $__m;
   $102 = $__delta;
   $103 = (($101) + ($102<<3)|0);
   $104 = $__lm1;
   $105 = $32;
   $106 = (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($96,$99,$100,$103,$104,$105)|0);
   $__n_swaps = $106;
  } else {
   $107 = $30;
   $108 = $__m;
   $109 = $__lm1;
   $110 = $32;
   $111 = (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($107,$108,$109,$110)|0);
   $__n_swaps = $111;
  }
  $112 = $30;
  $__i = $112;
  $113 = $__lm1;
  $__j = $113;
  $114 = $32;
  $115 = HEAP32[$114>>2]|0;
  $116 = $__i;
  $117 = $__m;
  $118 = (FUNCTION_TABLE_iii[$115 & 1023]($116,$117)|0);
  do {
   if (!($118)) {
    while(1) {
     $119 = $__i;
     $120 = $__j;
     $121 = ((($120)) + -8|0);
     $__j = $121;
     $122 = ($119|0)==($121|0);
     if ($122) {
      break;
     }
     $187 = $32;
     $188 = HEAP32[$187>>2]|0;
     $189 = $__j;
     $190 = $__m;
     $191 = (FUNCTION_TABLE_iii[$188 & 1023]($189,$190)|0);
     if ($191) {
      label = 28;
      break;
     }
    }
    if ((label|0) == 28) {
     label = 0;
     $192 = $__i;
     $193 = $__j;
     $13 = $192;
     $14 = $193;
     $194 = $13;
     $12 = $194;
     $195 = $12;
     ;HEAP32[$__t$i3>>2]=HEAP32[$195>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$195+4>>2]|0;
     $196 = $13;
     $197 = $14;
     $10 = $197;
     $198 = $10;
     ;HEAP32[$196>>2]=HEAP32[$198>>2]|0;HEAP32[$196+4>>2]=HEAP32[$198+4>>2]|0;
     $199 = $14;
     $11 = $__t$i3;
     $200 = $11;
     ;HEAP32[$199>>2]=HEAP32[$200>>2]|0;HEAP32[$199+4>>2]=HEAP32[$200+4>>2]|0;
     $201 = $__n_swaps;
     $202 = (($201) + 1)|0;
     $__n_swaps = $202;
     break;
    }
    $123 = $__i;
    $124 = ((($123)) + 8|0);
    $__i = $124;
    $125 = $31;
    $__j = $125;
    $126 = $32;
    $127 = HEAP32[$126>>2]|0;
    $128 = $30;
    $129 = $__j;
    $130 = ((($129)) + -8|0);
    $__j = $130;
    $131 = (FUNCTION_TABLE_iii[$127 & 1023]($128,$130)|0);
    if (!($131)) {
     while(1) {
      $132 = $__i;
      $133 = $__j;
      $134 = ($132|0)==($133|0);
      if ($134) {
       label = 49;
       break L1;
      }
      $135 = $32;
      $136 = HEAP32[$135>>2]|0;
      $137 = $30;
      $138 = $__i;
      $139 = (FUNCTION_TABLE_iii[$136 & 1023]($137,$138)|0);
      $140 = $__i;
      if ($139) {
       break;
      }
      $153 = ((($140)) + 8|0);
      $__i = $153;
     }
     $141 = $__j;
     $23 = $140;
     $24 = $141;
     $142 = $23;
     $22 = $142;
     $143 = $22;
     ;HEAP32[$__t$i1>>2]=HEAP32[$143>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$143+4>>2]|0;
     $144 = $23;
     $145 = $24;
     $20 = $145;
     $146 = $20;
     ;HEAP32[$144>>2]=HEAP32[$146>>2]|0;HEAP32[$144+4>>2]=HEAP32[$146+4>>2]|0;
     $147 = $24;
     $21 = $__t$i1;
     $148 = $21;
     ;HEAP32[$147>>2]=HEAP32[$148>>2]|0;HEAP32[$147+4>>2]=HEAP32[$148+4>>2]|0;
     $149 = $__n_swaps;
     $150 = (($149) + 1)|0;
     $__n_swaps = $150;
     $151 = $__i;
     $152 = ((($151)) + 8|0);
     $__i = $152;
    }
    $154 = $__i;
    $155 = $__j;
    $156 = ($154|0)==($155|0);
    if ($156) {
     label = 49;
     break L1;
    }
    while(1) {
     $157 = $32;
     $158 = HEAP32[$157>>2]|0;
     $159 = $30;
     $160 = $__i;
     $161 = (FUNCTION_TABLE_iii[$158 & 1023]($159,$160)|0);
     $162 = $161 ^ 1;
     if ($162) {
      $163 = $__i;
      $164 = ((($163)) + 8|0);
      $__i = $164;
      continue;
     }
     while(1) {
      $165 = $32;
      $166 = HEAP32[$165>>2]|0;
      $167 = $30;
      $168 = $__j;
      $169 = ((($168)) + -8|0);
      $__j = $169;
      $170 = (FUNCTION_TABLE_iii[$166 & 1023]($167,$169)|0);
      if (!($170)) {
       break;
      }
     }
     $171 = $__i;
     $172 = $__j;
     $173 = ($171>>>0)>=($172>>>0);
     $174 = $__i;
     if ($173) {
      break;
     }
     $175 = $__j;
     $18 = $174;
     $19 = $175;
     $176 = $18;
     $17 = $176;
     $177 = $17;
     ;HEAP32[$__t$i2>>2]=HEAP32[$177>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$177+4>>2]|0;
     $178 = $18;
     $179 = $19;
     $15 = $179;
     $180 = $15;
     ;HEAP32[$178>>2]=HEAP32[$180>>2]|0;HEAP32[$178+4>>2]=HEAP32[$180+4>>2]|0;
     $181 = $19;
     $16 = $__t$i2;
     $182 = $16;
     ;HEAP32[$181>>2]=HEAP32[$182>>2]|0;HEAP32[$181+4>>2]=HEAP32[$182+4>>2]|0;
     $183 = $__n_swaps;
     $184 = (($183) + 1)|0;
     $__n_swaps = $184;
     $185 = $__i;
     $186 = ((($185)) + 8|0);
     $__i = $186;
    }
    $30 = $174;
    continue L1;
   }
  } while(0);
  $203 = $__i;
  $204 = ((($203)) + 8|0);
  $__i = $204;
  $205 = $__i;
  $206 = $__j;
  $207 = ($205>>>0)<($206>>>0);
  L33: do {
   if ($207) {
    while(1) {
     $208 = $32;
     $209 = HEAP32[$208>>2]|0;
     $210 = $__i;
     $211 = $__m;
     $212 = (FUNCTION_TABLE_iii[$209 & 1023]($210,$211)|0);
     if ($212) {
      $213 = $__i;
      $214 = ((($213)) + 8|0);
      $__i = $214;
      continue;
     }
     while(1) {
      $215 = $32;
      $216 = HEAP32[$215>>2]|0;
      $217 = $__j;
      $218 = ((($217)) + -8|0);
      $__j = $218;
      $219 = $__m;
      $220 = (FUNCTION_TABLE_iii[$216 & 1023]($218,$219)|0);
      $221 = $220 ^ 1;
      if (!($221)) {
       break;
      }
     }
     $222 = $__i;
     $223 = $__j;
     $224 = ($222>>>0)>($223>>>0);
     if ($224) {
      break L33;
     }
     $225 = $__i;
     $226 = $__j;
     $8 = $225;
     $9 = $226;
     $227 = $8;
     $7 = $227;
     $228 = $7;
     ;HEAP32[$__t$i4>>2]=HEAP32[$228>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$228+4>>2]|0;
     $229 = $8;
     $230 = $9;
     $5 = $230;
     $231 = $5;
     ;HEAP32[$229>>2]=HEAP32[$231>>2]|0;HEAP32[$229+4>>2]=HEAP32[$231+4>>2]|0;
     $232 = $9;
     $6 = $__t$i4;
     $233 = $6;
     ;HEAP32[$232>>2]=HEAP32[$233>>2]|0;HEAP32[$232+4>>2]=HEAP32[$233+4>>2]|0;
     $234 = $__n_swaps;
     $235 = (($234) + 1)|0;
     $__n_swaps = $235;
     $236 = $__m;
     $237 = $__i;
     $238 = ($236|0)==($237|0);
     if ($238) {
      $239 = $__j;
      $__m = $239;
     }
     $240 = $__i;
     $241 = ((($240)) + 8|0);
     $__i = $241;
    }
   }
  } while(0);
  $242 = $__i;
  $243 = $__m;
  $244 = ($242|0)!=($243|0);
  if ($244) {
   $245 = $32;
   $246 = HEAP32[$245>>2]|0;
   $247 = $__m;
   $248 = $__i;
   $249 = (FUNCTION_TABLE_iii[$246 & 1023]($247,$248)|0);
   if ($249) {
    $250 = $__i;
    $251 = $__m;
    $3 = $250;
    $4 = $251;
    $252 = $3;
    $2 = $252;
    $253 = $2;
    ;HEAP32[$__t$i5>>2]=HEAP32[$253>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$253+4>>2]|0;
    $254 = $3;
    $255 = $4;
    $0 = $255;
    $256 = $0;
    ;HEAP32[$254>>2]=HEAP32[$256>>2]|0;HEAP32[$254+4>>2]=HEAP32[$256+4>>2]|0;
    $257 = $4;
    $1 = $__t$i5;
    $258 = $1;
    ;HEAP32[$257>>2]=HEAP32[$258>>2]|0;HEAP32[$257+4>>2]=HEAP32[$258+4>>2]|0;
    $259 = $__n_swaps;
    $260 = (($259) + 1)|0;
    $__n_swaps = $260;
   }
  }
  $261 = $__n_swaps;
  $262 = ($261|0)==(0);
  do {
   if ($262) {
    $263 = $30;
    $264 = $__i;
    $265 = $32;
    $266 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($263,$264,$265)|0);
    $267 = $266&1;
    $__fs = $267;
    $268 = $__i;
    $269 = ((($268)) + 8|0);
    $270 = $31;
    $271 = $32;
    $272 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($269,$270,$271)|0);
    $273 = $__fs;
    $274 = $273&1;
    if ($272) {
     if ($274) {
      label = 49;
      break L1;
     }
     $275 = $__i;
     $31 = $275;
     continue L1;
    } else {
     if (!($274)) {
      break;
     }
     $276 = $__i;
     $277 = ((($276)) + 8|0);
     $__i = $277;
     $30 = $277;
     continue L1;
    }
   }
  } while(0);
  $278 = $__i;
  $279 = $30;
  $280 = $278;
  $281 = $279;
  $282 = (($280) - ($281))|0;
  $283 = (($282|0) / 8)&-1;
  $284 = $31;
  $285 = $__i;
  $286 = $284;
  $287 = $285;
  $288 = (($286) - ($287))|0;
  $289 = (($288|0) / 8)&-1;
  $290 = ($283|0)<($289|0);
  if ($290) {
   $291 = $30;
   $292 = $__i;
   $293 = $32;
   __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($291,$292,$293);
   $294 = $__i;
   $295 = ((($294)) + 8|0);
   $__i = $295;
   $30 = $295;
   continue;
  } else {
   $296 = $__i;
   $297 = ((($296)) + 8|0);
   $298 = $31;
   $299 = $32;
   __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($297,$298,$299);
   $300 = $__i;
   $31 = $300;
   continue;
  }
 }
 if ((label|0) == 3) {
  $40 = $32;
  $41 = HEAP32[$40>>2]|0;
  $42 = $31;
  $43 = ((($42)) + -8|0);
  $31 = $43;
  $44 = $30;
  $45 = (FUNCTION_TABLE_iii[$41 & 1023]($43,$44)|0);
  if (!($45)) {
   STACKTOP = sp;return;
  }
  $46 = $30;
  $47 = $31;
  $28 = $46;
  $29 = $47;
  $48 = $28;
  $27 = $48;
  $49 = $27;
  ;HEAP32[$__t$i>>2]=HEAP32[$49>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$49+4>>2]|0;
  $50 = $28;
  $51 = $29;
  $25 = $51;
  $52 = $25;
  ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;
  $53 = $29;
  $26 = $__t$i;
  $54 = $26;
  ;HEAP32[$53>>2]=HEAP32[$54>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $55 = $30;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $58 = $31;
  $59 = ((($58)) + -8|0);
  $31 = $59;
  $60 = $32;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($55,$57,$59,$60)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $61 = $30;
  $62 = $30;
  $63 = ((($62)) + 8|0);
  $64 = $30;
  $65 = ((($64)) + 16|0);
  $66 = $31;
  $67 = ((($66)) + -8|0);
  $31 = $67;
  $68 = $32;
  (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($61,$63,$65,$67,$68)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $69 = $30;
  $70 = $30;
  $71 = ((($70)) + 8|0);
  $72 = $30;
  $73 = ((($72)) + 16|0);
  $74 = $30;
  $75 = ((($74)) + 24|0);
  $76 = $31;
  $77 = ((($76)) + -8|0);
  $31 = $77;
  $78 = $32;
  (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($69,$71,$73,$75,$77,$78)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $82 = $31;
  $83 = $32;
  __ZNSt3__118__insertion_sort_3IRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($81,$82,$83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 49) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__r = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 152|0;
 $__t$i3 = sp + 120|0;
 $__t$i2 = sp + 88|0;
 $__t$i1 = sp + 56|0;
 $__t$i = sp + 24|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $27;
 $33 = $26;
 $34 = (FUNCTION_TABLE_iii[$31 & 1023]($32,$33)|0);
 $35 = $29;
 $36 = HEAP32[$35>>2]|0;
 $37 = $28;
 $38 = $27;
 $39 = (FUNCTION_TABLE_iii[$36 & 1023]($37,$38)|0);
 if ($34) {
  $65 = $26;
  if ($39) {
   $66 = $28;
   $3 = $65;
   $4 = $66;
   $67 = $3;
   $2 = $67;
   $68 = $2;
   ;HEAP32[$__t$i4>>2]=HEAP32[$68>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$68+4>>2]|0;
   $69 = $3;
   $70 = $4;
   $0 = $70;
   $71 = $0;
   ;HEAP32[$69>>2]=HEAP32[$71>>2]|0;HEAP32[$69+4>>2]=HEAP32[$71+4>>2]|0;
   $72 = $4;
   $1 = $__t$i4;
   $73 = $1;
   ;HEAP32[$72>>2]=HEAP32[$73>>2]|0;HEAP32[$72+4>>2]=HEAP32[$73+4>>2]|0;
   $__r = 1;
   $74 = $__r;
   $25 = $74;
   $98 = $25;
   STACKTOP = sp;return ($98|0);
  }
  $75 = $27;
  $8 = $65;
  $9 = $75;
  $76 = $8;
  $7 = $76;
  $77 = $7;
  ;HEAP32[$__t$i3>>2]=HEAP32[$77>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$77+4>>2]|0;
  $78 = $8;
  $79 = $9;
  $5 = $79;
  $80 = $5;
  ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;
  $81 = $9;
  $6 = $__t$i3;
  $82 = $6;
  ;HEAP32[$81>>2]=HEAP32[$82>>2]|0;HEAP32[$81+4>>2]=HEAP32[$82+4>>2]|0;
  $__r = 1;
  $83 = $29;
  $84 = HEAP32[$83>>2]|0;
  $85 = $28;
  $86 = $27;
  $87 = (FUNCTION_TABLE_iii[$84 & 1023]($85,$86)|0);
  if ($87) {
   $88 = $27;
   $89 = $28;
   $18 = $88;
   $19 = $89;
   $90 = $18;
   $17 = $90;
   $91 = $17;
   ;HEAP32[$__t$i1>>2]=HEAP32[$91>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$91+4>>2]|0;
   $92 = $18;
   $93 = $19;
   $15 = $93;
   $94 = $15;
   ;HEAP32[$92>>2]=HEAP32[$94>>2]|0;HEAP32[$92+4>>2]=HEAP32[$94+4>>2]|0;
   $95 = $19;
   $16 = $__t$i1;
   $96 = $16;
   ;HEAP32[$95>>2]=HEAP32[$96>>2]|0;HEAP32[$95+4>>2]=HEAP32[$96+4>>2]|0;
   $__r = 2;
  }
  $97 = $__r;
  $25 = $97;
  $98 = $25;
  STACKTOP = sp;return ($98|0);
 } else {
  if (!($39)) {
   $40 = $__r;
   $25 = $40;
   $98 = $25;
   STACKTOP = sp;return ($98|0);
  }
  $41 = $27;
  $42 = $28;
  $23 = $41;
  $24 = $42;
  $43 = $23;
  $22 = $43;
  $44 = $22;
  ;HEAP32[$__t$i>>2]=HEAP32[$44>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$44+4>>2]|0;
  $45 = $23;
  $46 = $24;
  $20 = $46;
  $47 = $20;
  ;HEAP32[$45>>2]=HEAP32[$47>>2]|0;HEAP32[$45+4>>2]=HEAP32[$47+4>>2]|0;
  $48 = $24;
  $21 = $__t$i;
  $49 = $21;
  ;HEAP32[$48>>2]=HEAP32[$49>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;
  $__r = 1;
  $50 = $29;
  $51 = HEAP32[$50>>2]|0;
  $52 = $27;
  $53 = $26;
  $54 = (FUNCTION_TABLE_iii[$51 & 1023]($52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   ;HEAP32[$__t$i2>>2]=HEAP32[$58>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$58+4>>2]|0;
   $59 = $13;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   ;HEAP32[$59>>2]=HEAP32[$61>>2]|0;HEAP32[$59+4>>2]=HEAP32[$61+4>>2]|0;
   $62 = $14;
   $11 = $__t$i2;
   $63 = $11;
   ;HEAP32[$62>>2]=HEAP32[$63>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;
   $__r = 2;
  }
  $64 = $__r;
  $25 = $64;
  $98 = $25;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 88|0;
 $__t$i1 = sp + 56|0;
 $__t$i = sp + 24|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = HEAP32[$25>>2]|0;
 $27 = $18;
 $28 = $17;
 $29 = (FUNCTION_TABLE_iii[$26 & 1023]($27,$28)|0);
 if (!($29)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $30 = $17;
 $31 = $18;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 $12 = $32;
 $33 = $12;
 ;HEAP32[$__t$i>>2]=HEAP32[$33>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$33+4>>2]|0;
 $34 = $13;
 $35 = $14;
 $10 = $35;
 $36 = $10;
 ;HEAP32[$34>>2]=HEAP32[$36>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;
 $37 = $14;
 $11 = $__t$i;
 $38 = $11;
 ;HEAP32[$37>>2]=HEAP32[$38>>2]|0;HEAP32[$37+4>>2]=HEAP32[$38+4>>2]|0;
 $39 = $__r;
 $40 = (($39) + 1)|0;
 $__r = $40;
 $41 = $19;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = $16;
 $45 = (FUNCTION_TABLE_iii[$42 & 1023]($43,$44)|0);
 if (!($45)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $46 = $16;
 $47 = $17;
 $3 = $46;
 $4 = $47;
 $48 = $3;
 $2 = $48;
 $49 = $2;
 ;HEAP32[$__t$i2>>2]=HEAP32[$49>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$49+4>>2]|0;
 $50 = $3;
 $51 = $4;
 $0 = $51;
 $52 = $0;
 ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;
 $53 = $4;
 $1 = $__t$i2;
 $54 = $1;
 ;HEAP32[$53>>2]=HEAP32[$54>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;
 $55 = $__r;
 $56 = (($55) + 1)|0;
 $__r = $56;
 $57 = $19;
 $58 = HEAP32[$57>>2]|0;
 $59 = $16;
 $60 = $15;
 $61 = (FUNCTION_TABLE_iii[$58 & 1023]($59,$60)|0);
 if (!($61)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $62 = $15;
 $63 = $16;
 $8 = $62;
 $9 = $63;
 $64 = $8;
 $7 = $64;
 $65 = $7;
 ;HEAP32[$__t$i1>>2]=HEAP32[$65>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$65+4>>2]|0;
 $66 = $8;
 $67 = $9;
 $5 = $67;
 $68 = $5;
 ;HEAP32[$66>>2]=HEAP32[$68>>2]|0;HEAP32[$66+4>>2]=HEAP32[$68+4>>2]|0;
 $69 = $9;
 $6 = $__t$i1;
 $70 = $6;
 ;HEAP32[$69>>2]=HEAP32[$70>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;
 $71 = $__r;
 $72 = (($71) + 1)|0;
 $__r = $72;
 $73 = $__r;
 STACKTOP = sp;return ($73|0);
}
function __ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 128|0;
 $__t$i2 = sp + 96|0;
 $__t$i1 = sp + 64|0;
 $__t$i = sp + 32|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = HEAP32[$32>>2]|0;
 $34 = $24;
 $35 = $23;
 $36 = (FUNCTION_TABLE_iii[$33 & 1023]($34,$35)|0);
 if (!($36)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $37 = $23;
 $38 = $24;
 $18 = $37;
 $19 = $38;
 $39 = $18;
 $17 = $39;
 $40 = $17;
 ;HEAP32[$__t$i>>2]=HEAP32[$40>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$40+4>>2]|0;
 $41 = $18;
 $42 = $19;
 $15 = $42;
 $43 = $15;
 ;HEAP32[$41>>2]=HEAP32[$43>>2]|0;HEAP32[$41+4>>2]=HEAP32[$43+4>>2]|0;
 $44 = $19;
 $16 = $__t$i;
 $45 = $16;
 ;HEAP32[$44>>2]=HEAP32[$45>>2]|0;HEAP32[$44+4>>2]=HEAP32[$45+4>>2]|0;
 $46 = $__r;
 $47 = (($46) + 1)|0;
 $__r = $47;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = $22;
 $52 = (FUNCTION_TABLE_iii[$49 & 1023]($50,$51)|0);
 if (!($52)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $53 = $22;
 $54 = $23;
 $8 = $53;
 $9 = $54;
 $55 = $8;
 $7 = $55;
 $56 = $7;
 ;HEAP32[$__t$i2>>2]=HEAP32[$56>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$56+4>>2]|0;
 $57 = $8;
 $58 = $9;
 $5 = $58;
 $59 = $5;
 ;HEAP32[$57>>2]=HEAP32[$59>>2]|0;HEAP32[$57+4>>2]=HEAP32[$59+4>>2]|0;
 $60 = $9;
 $6 = $__t$i2;
 $61 = $6;
 ;HEAP32[$60>>2]=HEAP32[$61>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;
 $62 = $__r;
 $63 = (($62) + 1)|0;
 $__r = $63;
 $64 = $25;
 $65 = HEAP32[$64>>2]|0;
 $66 = $22;
 $67 = $21;
 $68 = (FUNCTION_TABLE_iii[$65 & 1023]($66,$67)|0);
 if (!($68)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $69 = $21;
 $70 = $22;
 $3 = $69;
 $4 = $70;
 $71 = $3;
 $2 = $71;
 $72 = $2;
 ;HEAP32[$__t$i3>>2]=HEAP32[$72>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$72+4>>2]|0;
 $73 = $3;
 $74 = $4;
 $0 = $74;
 $75 = $0;
 ;HEAP32[$73>>2]=HEAP32[$75>>2]|0;HEAP32[$73+4>>2]=HEAP32[$75+4>>2]|0;
 $76 = $4;
 $1 = $__t$i3;
 $77 = $1;
 ;HEAP32[$76>>2]=HEAP32[$77>>2]|0;HEAP32[$76+4>>2]=HEAP32[$77+4>>2]|0;
 $78 = $__r;
 $79 = (($78) + 1)|0;
 $__r = $79;
 $80 = $25;
 $81 = HEAP32[$80>>2]|0;
 $82 = $21;
 $83 = $20;
 $84 = (FUNCTION_TABLE_iii[$81 & 1023]($82,$83)|0);
 if (!($84)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $85 = $20;
 $86 = $21;
 $13 = $85;
 $14 = $86;
 $87 = $13;
 $12 = $87;
 $88 = $12;
 ;HEAP32[$__t$i1>>2]=HEAP32[$88>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$88+4>>2]|0;
 $89 = $13;
 $90 = $14;
 $10 = $90;
 $91 = $10;
 ;HEAP32[$89>>2]=HEAP32[$91>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;
 $92 = $14;
 $11 = $__t$i1;
 $93 = $11;
 ;HEAP32[$92>>2]=HEAP32[$93>>2]|0;HEAP32[$92+4>>2]=HEAP32[$93+4>>2]|0;
 $94 = $__r;
 $95 = (($94) + 1)|0;
 $__r = $95;
 $96 = $__r;
 STACKTOP = sp;return ($96|0);
}
function __ZNSt3__118__insertion_sort_3IRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 8|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = ((($6)) + 16|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = ((($13)) + 8|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = HEAP32[$18>>2]|0;
  $20 = $__i;
  $21 = $__j;
  $22 = (FUNCTION_TABLE_iii[$19 & 1023]($20,$21)|0);
  if ($22) {
   $23 = $__i;
   $2 = $23;
   $24 = $2;
   ;HEAP32[$__t>>2]=HEAP32[$24>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$24+4>>2]|0;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__j;
    $28 = $__k;
    $0 = $28;
    $29 = $0;
    ;HEAP32[$27>>2]=HEAP32[$29>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $__k;
    $__j = $30;
    $31 = $__j;
    $32 = $3;
    $33 = ($31|0)!=($32|0);
    if (!($33)) {
     break;
    }
    $34 = $5;
    $35 = HEAP32[$34>>2]|0;
    $36 = $__k;
    $37 = ((($36)) + -8|0);
    $__k = $37;
    $38 = (FUNCTION_TABLE_iii[$35 & 1023]($__t,$37)|0);
    if (!($38)) {
     break;
    }
   }
   $39 = $__j;
   $1 = $__t;
   $40 = $1;
   ;HEAP32[$39>>2]=HEAP32[$40>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;
  }
  $41 = $__i;
  $__j = $41;
  $42 = $__i;
  $43 = ((($42)) + 8|0);
  $__i = $43;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 48|0;
 $8 = sp + 88|0;
 $__t = sp + 8|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 8)&-1;
 switch ($17|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  HEAP8[$8>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 2:  {
  $18 = $11;
  $19 = HEAP32[$18>>2]|0;
  $20 = $10;
  $21 = ((($20)) + -8|0);
  $10 = $21;
  $22 = $9;
  $23 = (FUNCTION_TABLE_iii[$19 & 1023]($21,$22)|0);
  if ($23) {
   $24 = $9;
   $25 = $10;
   $6 = $24;
   $7 = $25;
   $26 = $6;
   $5 = $26;
   $27 = $5;
   ;HEAP32[$__t$i>>2]=HEAP32[$27>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$27+4>>2]|0;
   $28 = $6;
   $29 = $7;
   $3 = $29;
   $30 = $3;
   ;HEAP32[$28>>2]=HEAP32[$30>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;
   $31 = $7;
   $4 = $__t$i;
   $32 = $4;
   ;HEAP32[$31>>2]=HEAP32[$32>>2]|0;HEAP32[$31+4>>2]=HEAP32[$32+4>>2]|0;
  }
  $$expand_i1_val2 = 1;
  HEAP8[$8>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 3:  {
  $33 = $9;
  $34 = $9;
  $35 = ((($34)) + 8|0);
  $36 = $10;
  $37 = ((($36)) + -8|0);
  $10 = $37;
  $38 = $11;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($33,$35,$37,$38)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$8>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 4:  {
  $39 = $9;
  $40 = $9;
  $41 = ((($40)) + 8|0);
  $42 = $9;
  $43 = ((($42)) + 16|0);
  $44 = $10;
  $45 = ((($44)) + -8|0);
  $10 = $45;
  $46 = $11;
  (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($39,$41,$43,$45,$46)|0);
  $$expand_i1_val6 = 1;
  HEAP8[$8>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 5:  {
  $47 = $9;
  $48 = $9;
  $49 = ((($48)) + 8|0);
  $50 = $9;
  $51 = ((($50)) + 16|0);
  $52 = $9;
  $53 = ((($52)) + 24|0);
  $54 = $10;
  $55 = ((($54)) + -8|0);
  $10 = $55;
  $56 = $11;
  (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($47,$49,$51,$53,$55,$56)|0);
  $$expand_i1_val8 = 1;
  HEAP8[$8>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 default: {
  $57 = $9;
  $58 = ((($57)) + 16|0);
  $__j = $58;
  $59 = $9;
  $60 = $9;
  $61 = ((($60)) + 8|0);
  $62 = $__j;
  $63 = $11;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($59,$61,$62,$63)|0);
  $__limit = 8;
  $__count = 0;
  $64 = $__j;
  $65 = ((($64)) + 8|0);
  $__i = $65;
  while(1) {
   $66 = $__i;
   $67 = $10;
   $68 = ($66|0)!=($67|0);
   if (!($68)) {
    label = 18;
    break;
   }
   $69 = $11;
   $70 = HEAP32[$69>>2]|0;
   $71 = $__i;
   $72 = $__j;
   $73 = (FUNCTION_TABLE_iii[$70 & 1023]($71,$72)|0);
   if ($73) {
    $74 = $__i;
    $1 = $74;
    $75 = $1;
    ;HEAP32[$__t>>2]=HEAP32[$75>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$75+4>>2]|0;
    $76 = $__j;
    $__k = $76;
    $77 = $__i;
    $__j = $77;
    while(1) {
     $78 = $__j;
     $79 = $__k;
     $0 = $79;
     $80 = $0;
     ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;
     $81 = $__k;
     $__j = $81;
     $82 = $__j;
     $83 = $9;
     $84 = ($82|0)!=($83|0);
     if (!($84)) {
      break;
     }
     $85 = $11;
     $86 = HEAP32[$85>>2]|0;
     $87 = $__k;
     $88 = ((($87)) + -8|0);
     $__k = $88;
     $89 = (FUNCTION_TABLE_iii[$86 & 1023]($__t,$88)|0);
     if (!($89)) {
      break;
     }
    }
    $90 = $__j;
    $2 = $__t;
    $91 = $2;
    ;HEAP32[$90>>2]=HEAP32[$91>>2]|0;HEAP32[$90+4>>2]=HEAP32[$91+4>>2]|0;
    $92 = $__count;
    $93 = (($92) + 1)|0;
    $__count = $93;
    $94 = ($93|0)==(8);
    if ($94) {
     label = 16;
     break;
    }
   }
   $99 = $__i;
   $__j = $99;
   $100 = $__i;
   $101 = ((($100)) + 8|0);
   $__i = $101;
  }
  if ((label|0) == 16) {
   $95 = $__i;
   $96 = ((($95)) + 8|0);
   $__i = $96;
   $97 = $10;
   $98 = ($96|0)==($97|0);
   $$expand_i1_val10 = $98&1;
   HEAP8[$8>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 18) {
   $$expand_i1_val12 = 1;
   HEAP8[$8>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
 }
 }
 return (0)|0;
}
function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this,$bd,$world) {
 $this = $this|0;
 $bd = $bd|0;
 $world = $world|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bd;
 $2 = $world;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 __ZN11b2TransformC2Ev($4);
 $5 = ((($3)) + 28|0);
 __ZN7b2SweepC2Ev($5);
 $6 = ((($3)) + 64|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = ((($3)) + 76|0);
 __ZN6b2Vec2C2Ev($7);
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = (__ZNK6b2Vec27IsValidEv($9)|0);
 if (!($10)) {
  ___assert_fail((19507|0),(19530|0),27,(19605|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 16|0);
 $13 = (__ZNK6b2Vec27IsValidEv($12)|0);
 if (!($13)) {
  ___assert_fail((19612|0),(19530|0),28,(19605|0));
  // unreachable;
 }
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (__Z9b2IsValidf($16)|0);
 if (!($17)) {
  ___assert_fail((19641|0),(19530|0),29,(19605|0));
  // unreachable;
 }
 $18 = $1;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (__Z9b2IsValidf($20)|0);
 if (!($21)) {
  ___assert_fail((19662|0),(19530|0),30,(19605|0));
  // unreachable;
 }
 $22 = $1;
 $23 = ((($22)) + 32|0);
 $24 = +HEAPF32[$23>>2];
 $25 = (__Z9b2IsValidf($24)|0);
 if (!($25)) {
  ___assert_fail((19693|0),(19530|0),31,(19605|0));
  // unreachable;
 }
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 >= 0.0;
 if (!($29)) {
  ___assert_fail((19693|0),(19530|0),31,(19605|0));
  // unreachable;
 }
 $30 = $1;
 $31 = ((($30)) + 28|0);
 $32 = +HEAPF32[$31>>2];
 $33 = (__Z9b2IsValidf($32)|0);
 if (!($33)) {
  ___assert_fail((19753|0),(19530|0),32,(19605|0));
  // unreachable;
 }
 $34 = $1;
 $35 = ((($34)) + 28|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 >= 0.0;
 if (!($37)) {
  ___assert_fail((19753|0),(19530|0),32,(19605|0));
  // unreachable;
 }
 $38 = ((($3)) + 4|0);
 HEAP16[$38>>1] = 0;
 $39 = $1;
 $40 = ((($39)) + 39|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = ((($3)) + 4|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = $45 | 8;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
 }
 $48 = $1;
 $49 = ((($48)) + 38|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&1;
 if ($51) {
  $52 = ((($3)) + 4|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = $54 | 16;
  $56 = $55&65535;
  HEAP16[$52>>1] = $56;
 }
 $57 = $1;
 $58 = ((($57)) + 36|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&1;
 if ($60) {
  $61 = ((($3)) + 4|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = $63 | 4;
  $65 = $64&65535;
  HEAP16[$61>>1] = $65;
 }
 $66 = $1;
 $67 = ((($66)) + 37|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&1;
 if ($69) {
  $70 = ((($3)) + 4|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $72 | 2;
  $74 = $73&65535;
  HEAP16[$70>>1] = $74;
 }
 $75 = $1;
 $76 = ((($75)) + 40|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&1;
 if ($78) {
  $79 = ((($3)) + 4|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | 32;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
 }
 $84 = $2;
 $85 = ((($3)) + 88|0);
 HEAP32[$85>>2] = $84;
 $86 = ((($3)) + 12|0);
 $87 = $1;
 $88 = ((($87)) + 4|0);
 ;HEAP32[$86>>2]=HEAP32[$88>>2]|0;HEAP32[$86+4>>2]=HEAP32[$88+4>>2]|0;
 $89 = ((($3)) + 12|0);
 $90 = ((($89)) + 8|0);
 $91 = $1;
 $92 = ((($91)) + 12|0);
 $93 = +HEAPF32[$92>>2];
 __ZN5b2Rot3SetEf($90,$93);
 $94 = ((($3)) + 28|0);
 __ZN6b2Vec27SetZeroEv($94);
 $95 = ((($3)) + 28|0);
 $96 = ((($95)) + 8|0);
 $97 = ((($3)) + 12|0);
 ;HEAP32[$96>>2]=HEAP32[$97>>2]|0;HEAP32[$96+4>>2]=HEAP32[$97+4>>2]|0;
 $98 = ((($3)) + 28|0);
 $99 = ((($98)) + 16|0);
 $100 = ((($3)) + 12|0);
 ;HEAP32[$99>>2]=HEAP32[$100>>2]|0;HEAP32[$99+4>>2]=HEAP32[$100+4>>2]|0;
 $101 = $1;
 $102 = ((($101)) + 12|0);
 $103 = +HEAPF32[$102>>2];
 $104 = ((($3)) + 28|0);
 $105 = ((($104)) + 24|0);
 HEAPF32[$105>>2] = $103;
 $106 = $1;
 $107 = ((($106)) + 12|0);
 $108 = +HEAPF32[$107>>2];
 $109 = ((($3)) + 28|0);
 $110 = ((($109)) + 28|0);
 HEAPF32[$110>>2] = $108;
 $111 = ((($3)) + 28|0);
 $112 = ((($111)) + 32|0);
 HEAPF32[$112>>2] = 0.0;
 $113 = ((($3)) + 116|0);
 HEAP32[$113>>2] = 0;
 $114 = ((($3)) + 120|0);
 HEAP32[$114>>2] = 0;
 $115 = ((($3)) + 92|0);
 HEAP32[$115>>2] = 0;
 $116 = ((($3)) + 96|0);
 HEAP32[$116>>2] = 0;
 $117 = ((($3)) + 64|0);
 $118 = $1;
 $119 = ((($118)) + 16|0);
 ;HEAP32[$117>>2]=HEAP32[$119>>2]|0;HEAP32[$117+4>>2]=HEAP32[$119+4>>2]|0;
 $120 = $1;
 $121 = ((($120)) + 24|0);
 $122 = +HEAPF32[$121>>2];
 $123 = ((($3)) + 72|0);
 HEAPF32[$123>>2] = $122;
 $124 = $1;
 $125 = ((($124)) + 28|0);
 $126 = +HEAPF32[$125>>2];
 $127 = ((($3)) + 140|0);
 HEAPF32[$127>>2] = $126;
 $128 = $1;
 $129 = ((($128)) + 32|0);
 $130 = +HEAPF32[$129>>2];
 $131 = ((($3)) + 144|0);
 HEAPF32[$131>>2] = $130;
 $132 = $1;
 $133 = ((($132)) + 48|0);
 $134 = +HEAPF32[$133>>2];
 $135 = ((($3)) + 148|0);
 HEAPF32[$135>>2] = $134;
 $136 = ((($3)) + 76|0);
 __ZN6b2Vec27SetZeroEv($136);
 $137 = ((($3)) + 84|0);
 HEAPF32[$137>>2] = 0.0;
 $138 = ((($3)) + 152|0);
 HEAPF32[$138>>2] = 0.0;
 $139 = $1;
 $140 = HEAP32[$139>>2]|0;
 HEAP32[$3>>2] = $140;
 $141 = HEAP32[$3>>2]|0;
 $142 = ($141|0)==(2);
 $143 = ((($3)) + 124|0);
 if ($142) {
  HEAPF32[$143>>2] = 1.0;
  $144 = ((($3)) + 128|0);
  HEAPF32[$144>>2] = 1.0;
  $146 = ((($3)) + 132|0);
  HEAPF32[$146>>2] = 0.0;
  $147 = ((($3)) + 136|0);
  HEAPF32[$147>>2] = 0.0;
  $148 = $1;
  $149 = ((($148)) + 44|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($3)) + 156|0);
  HEAP32[$151>>2] = $150;
  $152 = ((($3)) + 108|0);
  HEAP32[$152>>2] = 0;
  $153 = ((($3)) + 112|0);
  HEAP32[$153>>2] = 0;
  $154 = ((($3)) + 104|0);
  HEAP32[$154>>2] = -1;
  $155 = ((($3)) + 100|0);
  HEAP32[$155>>2] = -1;
  $156 = ((($3)) + 160|0);
  $157 = ((($156)) + 8|0);
  HEAPF32[$157>>2] = -1.0;
  $158 = ((($3)) + 160|0);
  $159 = ((($158)) + 4|0);
  HEAPF32[$159>>2] = -1.0;
  $160 = ((($3)) + 160|0);
  HEAPF32[$160>>2] = -1.0;
  STACKTOP = sp;return;
 } else {
  HEAPF32[$143>>2] = 0.0;
  $145 = ((($3)) + 128|0);
  HEAPF32[$145>>2] = 0.0;
  $146 = ((($3)) + 132|0);
  HEAPF32[$146>>2] = 0.0;
  $147 = ((($3)) + 136|0);
  HEAPF32[$147>>2] = 0.0;
  $148 = $1;
  $149 = ((($148)) + 44|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($3)) + 156|0);
  HEAP32[$151>>2] = $150;
  $152 = ((($3)) + 108|0);
  HEAP32[$152>>2] = 0;
  $153 = ((($3)) + 112|0);
  HEAP32[$153>>2] = 0;
  $154 = ((($3)) + 104|0);
  HEAP32[$154>>2] = -1;
  $155 = ((($3)) + 100|0);
  HEAP32[$155>>2] = -1;
  $156 = ((($3)) + 160|0);
  $157 = ((($156)) + 8|0);
  HEAPF32[$157>>2] = -1.0;
  $158 = ((($3)) + 160|0);
  $159 = ((($158)) + 4|0);
  HEAPF32[$159>>2] = -1.0;
  $160 = ((($3)) + 160|0);
  HEAPF32[$160>>2] = -1.0;
  STACKTOP = sp;return;
 }
}
function __ZNK6b2Vec27IsValidEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = (__Z9b2IsValidf($2)|0);
 if (!($3)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = (__Z9b2IsValidf($5)|0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __Z9b2IsValidf($x) {
 $x = +$x;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $infinity = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $x;
 $2 = $1;
 $3 = $1;
 $4 = $2 != $3;
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $infinity = inf;
  $5 = $infinity;
  $6 = -$5;
  $7 = $1;
  $8 = $6 < $7;
  if ($8) {
   $9 = $1;
   $10 = $infinity;
   $11 = $9 < $10;
   $12 = $11;
  } else {
   $12 = 0;
  }
  $$expand_i1_val2 = $12&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function __ZNK7b2World8IsLockedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 102872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(2);
 STACKTOP = sp;return ($5|0);
}
function __ZN6b2Body13ResetMassDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $f = 0, $localCenter = 0;
 var $massData = 0, $oldCenter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenter = sp + 64|0;
 $massData = sp + 40|0;
 $1 = sp + 32|0;
 $oldCenter = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 $6 = ((($5)) + 124|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($5)) + 128|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = ((($5)) + 132|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($5)) + 136|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($5)) + 28|0);
 __ZN6b2Vec27SetZeroEv($10);
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = HEAP32[$5>>2]|0;
  $14 = ($13|0)==(1);
  if (!($14)) {
   $26 = HEAP32[$5>>2]|0;
   $27 = ($26|0)==(2);
   if (!($27)) {
    ___assert_fail((19840|0),(19530|0),305,(19865|0));
    // unreachable;
   }
   ;HEAP32[$localCenter>>2]=HEAP32[31176>>2]|0;HEAP32[$localCenter+4>>2]=HEAP32[31176+4>>2]|0;
   $28 = ((($5)) + 108|0);
   $29 = HEAP32[$28>>2]|0;
   $f = $29;
   while(1) {
    $30 = $f;
    $31 = ($30|0)!=(0|0);
    if (!($31)) {
     break;
    }
    $32 = $f;
    $33 = +HEAPF32[$32>>2];
    $34 = $33 == 0.0;
    if (!($34)) {
     __ZN10b2MassDataC2Ev($massData);
     $35 = $f;
     __ZNK9b2Fixture11GetMassDataEP10b2MassData($35,$massData);
     $36 = +HEAPF32[$massData>>2];
     $37 = ((($5)) + 124|0);
     $38 = +HEAPF32[$37>>2];
     $39 = $38 + $36;
     HEAPF32[$37>>2] = $39;
     $40 = +HEAPF32[$massData>>2];
     $41 = ((($massData)) + 4|0);
     __ZmlfRK6b2Vec2($1,$40,$41);
     __ZN6b2Vec2pLERKS_($localCenter,$1);
     $42 = ((($massData)) + 12|0);
     $43 = +HEAPF32[$42>>2];
     $44 = ((($5)) + 132|0);
     $45 = +HEAPF32[$44>>2];
     $46 = $45 + $43;
     HEAPF32[$44>>2] = $46;
    }
    $47 = $f;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $f = $49;
   }
   $50 = ((($5)) + 124|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $51 > 0.0;
   $53 = ((($5)) + 124|0);
   if ($52) {
    $54 = +HEAPF32[$53>>2];
    $55 = 1.0 / $54;
    $56 = ((($5)) + 128|0);
    HEAPF32[$56>>2] = $55;
    $57 = ((($5)) + 128|0);
    $58 = +HEAPF32[$57>>2];
    __ZN6b2Vec2mLEf($localCenter,$58);
   } else {
    HEAPF32[$53>>2] = 1.0;
    $59 = ((($5)) + 128|0);
    HEAPF32[$59>>2] = 1.0;
   }
   $60 = ((($5)) + 132|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $61 > 0.0;
   do {
    if ($62) {
     $63 = ((($5)) + 4|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $64&65535;
     $66 = $65 & 16;
     $67 = ($66|0)==(0);
     if ($67) {
      $68 = ((($5)) + 124|0);
      $69 = +HEAPF32[$68>>2];
      $70 = (+__Z5b2DotRK6b2Vec2S1_($localCenter,$localCenter));
      $71 = $69 * $70;
      $72 = ((($5)) + 132|0);
      $73 = +HEAPF32[$72>>2];
      $74 = $73 - $71;
      HEAPF32[$72>>2] = $74;
      $75 = ((($5)) + 132|0);
      $76 = +HEAPF32[$75>>2];
      $77 = $76 > 0.0;
      if ($77) {
       $78 = ((($5)) + 132|0);
       $79 = +HEAPF32[$78>>2];
       $80 = 1.0 / $79;
       $81 = ((($5)) + 136|0);
       HEAPF32[$81>>2] = $80;
       break;
      } else {
       ___assert_fail((19879|0),(19530|0),340,(19865|0));
       // unreachable;
      }
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
   } while(0);
   if ((label|0) == 19) {
    $82 = ((($5)) + 132|0);
    HEAPF32[$82>>2] = 0.0;
    $83 = ((($5)) + 136|0);
    HEAPF32[$83>>2] = 0.0;
   }
   $84 = ((($5)) + 28|0);
   $85 = ((($84)) + 16|0);
   ;HEAP32[$oldCenter>>2]=HEAP32[$85>>2]|0;HEAP32[$oldCenter+4>>2]=HEAP32[$85+4>>2]|0;
   $86 = ((($5)) + 28|0);
   ;HEAP32[$86>>2]=HEAP32[$localCenter>>2]|0;HEAP32[$86+4>>2]=HEAP32[$localCenter+4>>2]|0;
   $87 = ((($5)) + 28|0);
   $88 = ((($87)) + 8|0);
   $89 = ((($5)) + 28|0);
   $90 = ((($89)) + 16|0);
   $91 = ((($5)) + 12|0);
   $92 = ((($5)) + 28|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($2,$91,$92);
   ;HEAP32[$90>>2]=HEAP32[$2>>2]|0;HEAP32[$90+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;
   $93 = ((($5)) + 64|0);
   $94 = ((($5)) + 72|0);
   $95 = +HEAPF32[$94>>2];
   $96 = ((($5)) + 28|0);
   $97 = ((($96)) + 16|0);
   __ZmiRK6b2Vec2S1_($4,$97,$oldCenter);
   __Z7b2CrossfRK6b2Vec2($3,$95,$4);
   __ZN6b2Vec2pLERKS_($93,$3);
   STACKTOP = sp;return;
  }
 }
 $15 = ((($5)) + 28|0);
 $16 = ((($15)) + 8|0);
 $17 = ((($5)) + 12|0);
 ;HEAP32[$16>>2]=HEAP32[$17>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;
 $18 = ((($5)) + 28|0);
 $19 = ((($18)) + 16|0);
 $20 = ((($5)) + 12|0);
 ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;
 $21 = ((($5)) + 28|0);
 $22 = ((($21)) + 28|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($5)) + 28|0);
 $25 = ((($24)) + 24|0);
 HEAPF32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN10b2MassDataC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK9b2Fixture11GetMassDataEP10b2MassData($this,$massData) {
 $this = $this|0;
 $massData = $massData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $massData;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = +HEAPF32[$2>>2];
 FUNCTION_TABLE_viid[$7 & 31]($4,$8,$9);
 STACKTOP = sp;return;
}
function __ZN6b2Body19SynchronizeFixturesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $broadPhase = 0, $f = 0, $xf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xf1 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $0 = $this;
 $3 = $0;
 __ZN11b2TransformC2Ev($xf1);
 $4 = ((($xf1)) + 8|0);
 $5 = ((($3)) + 28|0);
 $6 = ((($5)) + 24|0);
 $7 = +HEAPF32[$6>>2];
 __ZN5b2Rot3SetEf($4,$7);
 $8 = ((($3)) + 28|0);
 $9 = ((($8)) + 8|0);
 $10 = ((($xf1)) + 8|0);
 $11 = ((($3)) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($2,$10,$11);
 __ZmiRK6b2Vec2S1_($1,$9,$2);
 ;HEAP32[$xf1>>2]=HEAP32[$1>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$1+4>>2]|0;
 $12 = ((($3)) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 102876|0);
 $broadPhase = $14;
 $15 = ((($3)) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $f = $16;
 while(1) {
  $17 = $f;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $f;
  $20 = $broadPhase;
  $21 = ((($3)) + 12|0);
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($19,$20,$xf1,$21);
  $22 = $f;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $f = $24;
 }
 STACKTOP = sp;return;
}
function __ZN6b2Body8SetAwakeEb($this,$flag) {
 $this = $this|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $flag&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 if (!($5)) {
  $17 = $8 & -3;
  $18 = $17&65535;
  HEAP16[$6>>1] = $18;
  $19 = ((($3)) + 152|0);
  HEAPF32[$19>>2] = 0.0;
  $20 = ((($3)) + 64|0);
  __ZN6b2Vec27SetZeroEv($20);
  $21 = ((($3)) + 72|0);
  HEAPF32[$21>>2] = 0.0;
  $22 = ((($3)) + 76|0);
  __ZN6b2Vec27SetZeroEv($22);
  $23 = ((($3)) + 84|0);
  HEAPF32[$23>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $9 = $8 & 2;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($3)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 | 2;
 $15 = $14&65535;
 HEAP16[$11>>1] = $15;
 $16 = ((($3)) + 152|0);
 HEAPF32[$16>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $allocator = 0, $broadPhase = 0, $fixture = 0, $memory = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = ((($3)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK7b2World8IsLockedEv($5)|0);
 $7 = $6&1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  ___assert_fail((19811|0),(19530|0),157,(19890|0));
  // unreachable;
 }
 $9 = ((($3)) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK7b2World8IsLockedEv($10)|0);
 $12 = $11&1;
 $13 = ($12|0)==(1);
 if ($13) {
  $0 = 0;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $14 = ((($3)) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 4|0);
 $allocator = $16;
 $17 = $allocator;
 $18 = (__ZN16b2BlockAllocator8AllocateEi($17,52)|0);
 $memory = $18;
 $19 = $memory;
 __ZN9b2FixtureC2Ev($19);
 $fixture = $19;
 $20 = $fixture;
 $21 = $allocator;
 $22 = $2;
 __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($20,$21,$3,$22);
 $23 = ((($3)) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $25 & 32;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = ((($3)) + 88|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 102876|0);
  $broadPhase = $30;
  $31 = $fixture;
  $32 = $broadPhase;
  $33 = ((($3)) + 12|0);
  __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($31,$32,$33);
 }
 $34 = ((($3)) + 108|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $fixture;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = $35;
 $38 = $fixture;
 $39 = ((($3)) + 108|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($3)) + 112|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($3)) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 103080|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 $48 = $fixture;
 $49 = ((($48)) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($3)) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 103084|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($50))|0;
 HEAP32[$53>>2] = $55;
 $56 = ((($3)) + 88|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 103093|0);
 HEAP8[$58>>0] = 1;
 $59 = $fixture;
 $60 = ((($59)) + 8|0);
 HEAP32[$60>>2] = $3;
 $61 = $fixture;
 $62 = +HEAPF32[$61>>2];
 $63 = $62 > 0.0;
 if ($63) {
  __ZN6b2Body13ResetMassDataEv($3);
 }
 $64 = ((($3)) + 88|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 102872|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | 1;
 HEAP32[$66>>2] = $68;
 $69 = $fixture;
 $70 = ((($69)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (__ZNK7b2Shape7GetTypeEv($71)|0);
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $fixture;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (__ZNK7b2Shape7GetTypeEv($76)|0);
  $78 = ($77|0)!=(1);
  if ($78) {
   $79 = $fixture;
   $80 = ((($79)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (__ZNK7b2Shape7GetTypeEv($81)|0);
   $83 = ($82|0)!=(3);
   if ($83) {
    $84 = $fixture;
    $85 = ((($84)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (__ZNK7b2Shape7GetTypeEv($86)|0);
    $88 = ($87|0)!=(2);
    if ($88) {
     HEAP8[11781] = 0;
    }
   }
  }
 }
 $89 = $fixture;
 $0 = $89;
 $90 = $0;
 STACKTOP = sp;return ($90|0);
}
function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this,$shape,$density) {
 $this = $this|0;
 $shape = $shape|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $def = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $def = sp;
 $0 = $this;
 $1 = $shape;
 $2 = $density;
 $3 = $0;
 __ZN12b2FixtureDefC2Ev($def);
 $4 = $1;
 HEAP32[$def>>2] = $4;
 $5 = $2;
 $6 = ((($def)) + 16|0);
 HEAPF32[$6>>2] = $5;
 $7 = (__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($3,$def)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN12b2FixtureDefC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 22|0);
 __ZN8b2FilterC2Ev($2);
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAPF32[$4>>2] = 0.20000000298023224;
 $5 = ((($1)) + 12|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($1)) + 16|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($1)) + 20|0);
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2FilterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP16[$1>>1] = 1;
 $2 = ((($1)) + 2|0);
 HEAP16[$2>>1] = -1;
 $3 = ((($1)) + 4|0);
 HEAP16[$3>>1] = 0;
 STACKTOP = sp;return;
}
function __ZNK6b2Body13ShouldCollideEPKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $other;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(2);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(2);
  if ($8) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($3)) + 116|0);
   $10 = HEAP32[$9>>2]|0;
   $jn = $10;
   while(1) {
    $11 = $jn;
    $12 = ($11|0)!=(0|0);
    if (!($12)) {
     label = 10;
     break;
    }
    $13 = $jn;
    $14 = HEAP32[$13>>2]|0;
    $15 = $2;
    $16 = ($14|0)==($15|0);
    if ($16) {
     $17 = $jn;
     $18 = ((($17)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 61|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21&1;
     $23 = $22&1;
     $24 = ($23|0)==(0);
     if ($24) {
      label = 8;
      break;
     }
    }
    $25 = $jn;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $jn = $27;
   }
   if ((label|0) == 8) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   else if ((label|0) == 10) {
    $$expand_i1_val4 = 1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function __ZNK6b2Body8IsActiveEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 32;
 $6 = ($5|0)==(32);
 STACKTOP = sp;return ($6|0);
}
function __GLOBAL__sub_I_b2ContactManager_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_414();
 ___cxx_global_var_init_1();
 return;
}
function ___cxx_global_var_init_414() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15b2ContactFilterC2Ev(32680);
 (___cxa_atexit((48|0),(32680|0),(___dso_handle|0))|0);
 return;
}
function __ZN15b2ContactFilterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2100;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN15b2ContactFilterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17b2ContactListenerC2Ev(32684);
 (___cxa_atexit((42|0),(32684|0),(___dso_handle|0))|0);
 return;
}
function __ZN17b2ContactListenerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2068;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListenerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListenerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(42,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN17b2ContactListener12BeginContactEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener10EndContactEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this,$contact,$oldManifold) {
 $this = $this|0;
 $contact = $contact|0;
 $oldManifold = $oldManifold|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $oldManifold;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this,$contact,$impulse) {
 $this = $this|0;
 $contact = $contact|0;
 $impulse = $impulse|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $impulse;
 STACKTOP = sp;return;
}
function __ZN16b2ContactManagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN12b2BroadPhaseC2Ev($3);
 $4 = ((($3)) + 128|0);
 __THREW__ = 0;
 invoke_vi(435,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $1 = $18;
  $2 = $19;
 } else {
  $7 = ((($3)) + 100|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($3)) + 108|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  $9 = (invoke_ii(436,20)|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = ((($3)) + 104|0);
   HEAP32[$12>>2] = $9;
   $13 = ((($3)) + 104|0);
   $14 = HEAP32[$13>>2]|0;
   ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
   $15 = ((($3)) + 116|0);
   HEAP32[$15>>2] = 32680;
   $16 = ((($3)) + 120|0);
   HEAP32[$16>>2] = 32684;
   $17 = ((($3)) + 124|0);
   HEAP32[$17>>2] = 0;
   STACKTOP = sp;return;
  }
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = tempRet0;
  $1 = $20;
  $2 = $21;
  __THREW__ = 0;
  invoke_vi(437,($4|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $28 = ___cxa_find_matching_catch_3(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(438,($3|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $1;
  $27 = $2;
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZN16b2ContactManagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZdaPv($5);
 }
 $7 = ((($3)) + 128|0);
 __THREW__ = 0;
 invoke_vi(437,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN12b2BroadPhaseD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch_2()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(438,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch_3(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZN16b2ContactManager7DestroyEP9b2Contact($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0;
 var $fixtureA = 0, $fixtureB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN9b2Contact11GetFixtureAEv($3)|0);
 $fixtureA = $4;
 $5 = $1;
 $6 = (__ZN9b2Contact11GetFixtureBEv($5)|0);
 $fixtureB = $6;
 $7 = $fixtureA;
 $8 = (__ZN9b2Fixture7GetBodyEv($7)|0);
 $bodyA = $8;
 $9 = $fixtureB;
 $10 = (__ZN9b2Fixture7GetBodyEv($9)|0);
 $bodyB = $10;
 $11 = ((($2)) + 120|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = (__ZNK9b2Contact10IsTouchingEv($14)|0);
  if ($15) {
   $16 = ((($2)) + 120|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   FUNCTION_TABLE_vii[$20 & 1023]($17,$21);
  }
 }
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  HEAP32[$32>>2] = $28;
 }
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 8|0);
  HEAP32[$43>>2] = $39;
 }
 $44 = $1;
 $45 = ((($2)) + 100|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44|0)==($46|0);
 if ($47) {
  $48 = $1;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($2)) + 100|0);
  HEAP32[$51>>2] = $50;
 }
 $52 = $1;
 $53 = ((($52)) + 16|0);
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = $1;
  $58 = ((($57)) + 16|0);
  $59 = ((($58)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $1;
  $62 = ((($61)) + 16|0);
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 12|0);
  HEAP32[$65>>2] = $60;
 }
 $66 = $1;
 $67 = ((($66)) + 16|0);
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = $1;
  $72 = ((($71)) + 16|0);
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $1;
  $76 = ((($75)) + 16|0);
  $77 = ((($76)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 8|0);
  HEAP32[$79>>2] = $74;
 }
 $80 = $1;
 $81 = ((($80)) + 16|0);
 $82 = $bodyA;
 $83 = ((($82)) + 120|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($81|0)==($84|0);
 if ($85) {
  $86 = $1;
  $87 = ((($86)) + 16|0);
  $88 = ((($87)) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $bodyA;
  $91 = ((($90)) + 120|0);
  HEAP32[$91>>2] = $89;
 }
 $92 = $1;
 $93 = ((($92)) + 32|0);
 $94 = ((($93)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = $1;
  $98 = ((($97)) + 32|0);
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $1;
  $102 = ((($101)) + 32|0);
  $103 = ((($102)) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 12|0);
  HEAP32[$105>>2] = $100;
 }
 $106 = $1;
 $107 = ((($106)) + 32|0);
 $108 = ((($107)) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = $1;
  $112 = ((($111)) + 32|0);
  $113 = ((($112)) + 8|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $1;
  $116 = ((($115)) + 32|0);
  $117 = ((($116)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 8|0);
  HEAP32[$119>>2] = $114;
 }
 $120 = $1;
 $121 = ((($120)) + 32|0);
 $122 = $bodyB;
 $123 = ((($122)) + 120|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($121|0)==($124|0);
 if (!($125)) {
  $132 = $1;
  $133 = ((($2)) + 124|0);
  $134 = HEAP32[$133>>2]|0;
  __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132,$134);
  $135 = ((($2)) + 108|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + -1)|0;
  HEAP32[$135>>2] = $137;
  STACKTOP = sp;return;
 }
 $126 = $1;
 $127 = ((($126)) + 32|0);
 $128 = ((($127)) + 12|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $bodyB;
 $131 = ((($130)) + 120|0);
 HEAP32[$131>>2] = $129;
 $132 = $1;
 $133 = ((($2)) + 124|0);
 $134 = HEAP32[$133>>2]|0;
 __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132,$134);
 $135 = ((($2)) + 108|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + -1)|0;
 HEAP32[$135>>2] = $137;
 STACKTOP = sp;return;
}
function __ZNK9b2Contact10IsTouchingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(2);
 STACKTOP = sp;return ($5|0);
}
function __ZN16b2ContactManager7CollideEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0;
 var $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $InitializeGPUDataTimer = 0, $ReadbackGPUDataTimer = 0, $UpdateContactPairsTimer = 0, $activeA = 0;
 var $activeB = 0, $bodyA = 0, $bodyB = 0, $c = 0, $cNuke = 0, $cNuke1 = 0, $cNuke2 = 0, $cNuke4 = 0, $enableBitArray = 0, $fixtureA = 0, $fixtureB = 0, $indexA = 0, $indexB = 0, $narrowPhaseTimer = 0, $narrowPhaseTimer3 = 0, $overlap = 0, $pc = 0, $proxyIdA = 0, $proxyIdB = 0, $temp = 0;
 var $validContactCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $narrowPhaseTimer = sp + 76|0;
 $narrowPhaseTimer3 = sp + 75|0;
 $InitializeGPUDataTimer = sp + 74|0;
 $UpdateContactPairsTimer = sp + 73|0;
 $validContactCount = sp + 12|0;
 $ReadbackGPUDataTimer = sp + 72|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = ((($1)) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 103896|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 + $4;
 HEAPF64[$7>>3] = $9;
 $10 = HEAP8[11781]|0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $12 = ((($1)) + 100|0);
   $13 = HEAP32[$12>>2]|0;
   $c = $13;
   while(1) {
    $14 = $c;
    $15 = ($14|0)!=(0|0);
    if (!($15)) {
     break L1;
    }
    $16 = $c;
    $17 = (__ZN9b2Contact11GetFixtureAEv($16)|0);
    $fixtureA = $17;
    $18 = $c;
    $19 = (__ZN9b2Contact11GetFixtureBEv($18)|0);
    $fixtureB = $19;
    $20 = $c;
    $21 = (__ZNK9b2Contact14GetChildIndexAEv($20)|0);
    $indexA = $21;
    $22 = $c;
    $23 = (__ZNK9b2Contact14GetChildIndexBEv($22)|0);
    $indexB = $23;
    $24 = $fixtureA;
    $25 = (__ZN9b2Fixture7GetBodyEv($24)|0);
    $bodyA = $25;
    $26 = $fixtureB;
    $27 = (__ZN9b2Fixture7GetBodyEv($26)|0);
    $bodyB = $27;
    $28 = $c;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 & 8;
    $32 = ($31|0)!=(0);
    if ($32) {
     $33 = $bodyB;
     $34 = $bodyA;
     $35 = (__ZNK6b2Body13ShouldCollideEPKS_($33,$34)|0);
     $36 = $35&1;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = $c;
      $cNuke = $38;
      $39 = $cNuke;
      $40 = (__ZN9b2Contact7GetNextEv($39)|0);
      $c = $40;
      $41 = $cNuke;
      __ZN16b2ContactManager7DestroyEP9b2Contact($1,$41);
      continue;
     }
     $42 = ((($1)) + 116|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)!=(0|0);
     if ($44) {
      $45 = ((($1)) + 116|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($47)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $fixtureA;
      $51 = $fixtureB;
      $52 = (FUNCTION_TABLE_iiii[$49 & 1023]($46,$50,$51)|0);
      $53 = $52&1;
      $54 = ($53|0)==(0);
      if ($54) {
       $55 = $c;
       $cNuke1 = $55;
       $56 = $cNuke1;
       $57 = (__ZN9b2Contact7GetNextEv($56)|0);
       $c = $57;
       $58 = $cNuke1;
       __ZN16b2ContactManager7DestroyEP9b2Contact($1,$58);
       continue;
      }
     }
     $59 = $c;
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 & -9;
     HEAP32[$60>>2] = $62;
    }
    $63 = $bodyA;
    $64 = (__ZNK6b2Body7IsAwakeEv($63)|0);
    if ($64) {
     $65 = $bodyA;
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0);
     $69 = $67;
    } else {
     $69 = 0;
    }
    $68 = $69&1;
    $activeA = $68;
    $70 = $bodyB;
    $71 = (__ZNK6b2Body7IsAwakeEv($70)|0);
    if ($71) {
     $72 = $bodyB;
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)!=(0);
     $76 = $74;
    } else {
     $76 = 0;
    }
    $75 = $76&1;
    $activeB = $75;
    $77 = $activeA;
    $78 = $77&1;
    $79 = $78&1;
    $80 = ($79|0)==(0);
    if ($80) {
     $81 = $activeB;
     $82 = $81&1;
     $83 = $82&1;
     $84 = ($83|0)==(0);
     if ($84) {
      $85 = $c;
      $86 = (__ZN9b2Contact7GetNextEv($85)|0);
      $c = $86;
      continue;
     }
    }
    $87 = $indexA;
    $88 = $fixtureA;
    $89 = ((($88)) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + (($87*36)|0)|0);
    $92 = ((($91)) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $proxyIdA = $93;
    $94 = $indexB;
    $95 = $fixtureB;
    $96 = ((($95)) + 32|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + (($94*36)|0)|0);
    $99 = ((($98)) + 24|0);
    $100 = HEAP32[$99>>2]|0;
    $proxyIdB = $100;
    $101 = $proxyIdA;
    $102 = $proxyIdB;
    $103 = (__ZNK12b2BroadPhase11TestOverlapEii($1,$101,$102)|0);
    $104 = $103&1;
    $overlap = $104;
    $105 = $overlap;
    $106 = $105&1;
    $107 = $106&1;
    $108 = ($107|0)==(0);
    if ($108) {
     $109 = $c;
     $cNuke2 = $109;
     $110 = $cNuke2;
     $111 = (__ZN9b2Contact7GetNextEv($110)|0);
     $c = $111;
     $112 = $cNuke2;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1,$112);
     continue;
    }
    $113 = HEAP8[11781]|0;
    $114 = $113&1;
    if (!($114)) {
     __ZN7b2TimerC2Ev($narrowPhaseTimer);
     $115 = $c;
     $116 = ((($1)) + 120|0);
     $117 = HEAP32[$116>>2]|0;
     __ZN9b2Contact6UpdateEP17b2ContactListener($115,$117);
     $118 = (+__ZNK7b2Timer15GetMillisecondsEv($narrowPhaseTimer));
     $119 = ((($1)) + 188|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 103964|0);
     $122 = +HEAPF32[$121>>2];
     $123 = $122 + $118;
     HEAPF32[$121>>2] = $123;
    }
    $124 = $c;
    $125 = (__ZN9b2Contact7GetNextEv($124)|0);
    $c = $125;
   }
  }
 } while(0);
 $126 = HEAP8[11781]|0;
 $127 = $126&1;
 if (!($127)) {
  STACKTOP = sp;return;
 }
 __ZN7b2TimerC2Ev($narrowPhaseTimer3);
 __ZN7b2TimerC2Ev($InitializeGPUDataTimer);
 $128 = ((($1)) + 188|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 102876|0);
 $131 = ((($130)) + 108|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)>(0);
 if (!($133)) {
  STACKTOP = sp;return;
 }
 $134 = ((($1)) + 128|0);
 $135 = ((($1)) + 188|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($1)) + 100|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($1)) + 104|0);
 $140 = HEAP32[$139>>2]|0;
 __ZN15b2CLNarrowPhase17InitializeGPUDataEP7b2WorldP9b2ContactPi($134,$136,$138,$140);
 $141 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($141);
 $142 = (+__ZNK7b2Timer15GetMillisecondsEv($InitializeGPUDataTimer));
 $143 = ((($1)) + 188|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 103968|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $146 + $142;
 HEAPF32[$145>>2] = $147;
 __ZN7b2TimerC2Ev($UpdateContactPairsTimer);
 $148 = ((($1)) + 128|0);
 $149 = ((($1)) + 108|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($1)) + 104|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((($1)) + 112|0);
 $154 = HEAP32[$153>>2]|0;
 __ZN15b2CLNarrowPhase18UpdateContactPairsEiPii($148,$150,$152,$154);
 $155 = ((($1)) + 188|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 103096|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)!=(0);
 if ($159) {
  $enableBitArray = 0;
  $160 = ((($1)) + 188|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($161)) + 103096|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $163 & 4;
  $165 = ($164|0)!=(0);
  if ($165) {
   $166 = ((($1)) + 108|0);
   $167 = HEAP32[$166>>2]|0;
   $$arith = $167<<2;
   $$overflow = ($167>>>0)>(1073741823);
   $168 = $$overflow ? -1 : $$arith;
   $169 = (__Znaj($168)|0);
   $enableBitArray = $169;
  }
  $170 = ((($1)) + 128|0);
  $171 = ((($1)) + 188|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ((($1)) + 100|0);
  $174 = ((($1)) + 120|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $enableBitArray;
  __ZN15b2CLNarrowPhase26ReadbackGPUDataForListenerEP7b2WorldPP9b2ContactP17b2ContactListenerPiS7_($170,$172,$173,$175,$176,$validContactCount);
  $177 = ((($1)) + 100|0);
  $178 = HEAP32[$177>>2]|0;
  $pc = $178;
  while(1) {
   $179 = $pc;
   $180 = ($179|0)!=(0|0);
   if (!($180)) {
    break;
   }
   $181 = $pc;
   $182 = ((($181)) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 & 64;
   $185 = ($184|0)!=(0);
   $186 = $pc;
   if ($185) {
    $cNuke4 = $186;
    $187 = $cNuke4;
    $188 = (__ZN9b2Contact7GetNextEv($187)|0);
    $pc = $188;
    $189 = ((($1)) + 108|0);
    $190 = HEAP32[$189>>2]|0;
    $temp = $190;
    $191 = $cNuke4;
    __ZN16b2ContactManager7DestroyEP9b2Contact($1,$191);
    $192 = $temp;
    $193 = ((($1)) + 108|0);
    HEAP32[$193>>2] = $192;
    continue;
   } else {
    $194 = (__ZN9b2Contact7GetNextEv($186)|0);
    $pc = $194;
    continue;
   }
  }
  $195 = ((($1)) + 188|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ((($196)) + 103096|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 & 4;
  $200 = ($199|0)!=(0);
  if ($200) {
   $201 = (__ZN10b2CLDevice8instanceEv()|0);
   $202 = (__ZN14b2CLCommonData8instanceEv()|0);
   $203 = ((($202)) + 48|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $enableBitArray;
   $206 = ((($1)) + 108|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $207<<2;
   __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($201,$204,$205,0,$208);
   $209 = $enableBitArray;
   $210 = ($209|0)==(0|0);
   if (!($210)) {
    __ZdaPv($209);
   }
  }
 }
 $211 = ((($1)) + 128|0);
 $212 = ((($1)) + 108|0);
 $213 = HEAP32[$212>>2]|0;
 __ZN15b2CLNarrowPhase19CompactContactPairsEi($211,$213);
 $214 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($214);
 $215 = (+__ZNK7b2Timer15GetMillisecondsEv($UpdateContactPairsTimer));
 $216 = ((($1)) + 188|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ((($217)) + 103972|0);
 $219 = +HEAPF32[$218>>2];
 $220 = $219 + $215;
 HEAPF32[$218>>2] = $220;
 __ZN7b2TimerC2Ev($ReadbackGPUDataTimer);
 $221 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($221);
 $222 = (+__ZNK7b2Timer15GetMillisecondsEv($ReadbackGPUDataTimer));
 $223 = ((($1)) + 188|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ((($224)) + 103976|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $226 + $222;
 HEAPF32[$225>>2] = $227;
 $228 = (+__ZNK7b2Timer15GetMillisecondsEv($narrowPhaseTimer3));
 $229 = ((($1)) + 188|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($230)) + 103964|0);
 $232 = +HEAPF32[$231>>2];
 $233 = $232 + $228;
 HEAPF32[$231>>2] = $233;
 STACKTOP = sp;return;
}
function __ZNK6b2Body7IsAwakeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 2;
 $6 = ($5|0)==(2);
 STACKTOP = sp;return ($6|0);
}
function __ZNK12b2BroadPhase11TestOverlapEii($this,$proxyIdA,$proxyIdB) {
 $this = $this|0;
 $proxyIdA = $proxyIdA|0;
 $proxyIdB = $proxyIdB|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabbA = 0, $aabbB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyIdA;
 $2 = $proxyIdB;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK13b2DynamicTree10GetFatAABBEi($3,$4)|0);
 $aabbA = $5;
 $6 = $2;
 $7 = (__ZNK13b2DynamicTree10GetFatAABBEi($3,$6)|0);
 $aabbB = $7;
 $8 = $aabbA;
 $9 = $aabbB;
 $10 = (__Z13b2TestOverlapRK6b2AABBS1_($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK13b2DynamicTree10GetFatAABBEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if ($4) {
  $5 = $1;
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = ((($2)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + (($9*36)|0)|0);
   STACKTOP = sp;return ($12|0);
  }
 }
 ___assert_fail((19924|0),(19965|0),159,(20046|0));
 // unreachable;
 return (0)|0;
}
function __Z13b2TestOverlapRK6b2AABBS1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d1 = 0, $d2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $d1 = sp + 24|0;
 $d2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $1 = $a;
 $2 = $b;
 __ZN6b2Vec2C2Ev($d1);
 __ZN6b2Vec2C2Ev($d2);
 $5 = $2;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 __ZmiRK6b2Vec2S1_($3,$5,$7);
 ;HEAP32[$d1>>2]=HEAP32[$3>>2]|0;HEAP32[$d1+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = $1;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 __ZmiRK6b2Vec2S1_($4,$8,$10);
 ;HEAP32[$d2>>2]=HEAP32[$4>>2]|0;HEAP32[$d2+4>>2]=HEAP32[$4+4>>2]|0;
 $11 = +HEAPF32[$d1>>2];
 $12 = $11 > 0.0;
 if (!($12)) {
  $13 = ((($d1)) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14 > 0.0;
  if (!($15)) {
   $16 = +HEAPF32[$d2>>2];
   $17 = $16 > 0.0;
   if (!($17)) {
    $18 = ((($d2)) + 4|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $19 > 0.0;
    if (!($20)) {
     $$expand_i1_val4 = 1;
     HEAP8[$0>>0] = $$expand_i1_val4;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $21 = $$pre_trunc&1;
     STACKTOP = sp;return ($21|0);
    }
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $21 = $$pre_trunc&1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function __ZN16b2ContactManager10cpuOverLapEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $bodyA = 0, $bodyB = 0, $c = 0, $cNuke = 0, $cNuke1 = 0, $cNuke2 = 0, $fixtureA = 0, $fixtureB = 0, $indexA = 0, $indexB = 0, $overlap = 0, $proxyIdA = 0, $proxyIdB = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $c = $3;
 while(1) {
  $4 = $c;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $c;
  $7 = (__ZN9b2Contact11GetFixtureAEv($6)|0);
  $fixtureA = $7;
  $8 = $c;
  $9 = (__ZN9b2Contact11GetFixtureBEv($8)|0);
  $fixtureB = $9;
  $10 = $c;
  $11 = (__ZNK9b2Contact14GetChildIndexAEv($10)|0);
  $indexA = $11;
  $12 = $c;
  $13 = (__ZNK9b2Contact14GetChildIndexBEv($12)|0);
  $indexB = $13;
  $14 = $fixtureA;
  $15 = (__ZN9b2Fixture7GetBodyEv($14)|0);
  $bodyA = $15;
  $16 = $fixtureB;
  $17 = (__ZN9b2Fixture7GetBodyEv($16)|0);
  $bodyB = $17;
  $18 = $c;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 8;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $bodyB;
   $24 = $bodyA;
   $25 = (__ZNK6b2Body13ShouldCollideEPKS_($23,$24)|0);
   $26 = $25&1;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $c;
    $cNuke = $28;
    $29 = $cNuke;
    $30 = (__ZN9b2Contact7GetNextEv($29)|0);
    $c = $30;
    $31 = $cNuke;
    __ZN16b2ContactManager7DestroyEP9b2Contact($1,$31);
    continue;
   }
   $32 = ((($1)) + 116|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = ((($1)) + 116|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $fixtureA;
    $41 = $fixtureB;
    $42 = (FUNCTION_TABLE_iiii[$39 & 1023]($36,$40,$41)|0);
    $43 = $42&1;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $c;
     $cNuke1 = $45;
     $46 = $cNuke1;
     $47 = (__ZN9b2Contact7GetNextEv($46)|0);
     $c = $47;
     $48 = $cNuke1;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1,$48);
     continue;
    }
   }
   $49 = $c;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 & -9;
   HEAP32[$50>>2] = $52;
  }
  $53 = $bodyA;
  $54 = (__ZNK6b2Body7IsAwakeEv($53)|0);
  if ($54) {
   $55 = $bodyA;
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0);
   $59 = $57;
  } else {
   $59 = 0;
  }
  $58 = $59&1;
  $activeA = $58;
  $60 = $bodyB;
  $61 = (__ZNK6b2Body7IsAwakeEv($60)|0);
  if ($61) {
   $62 = $bodyB;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   $66 = $64;
  } else {
   $66 = 0;
  }
  $65 = $66&1;
  $activeB = $65;
  $67 = $activeA;
  $68 = $67&1;
  $69 = $68&1;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = $activeB;
   $72 = $71&1;
   $73 = $72&1;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = $c;
    $76 = (__ZN9b2Contact7GetNextEv($75)|0);
    $c = $76;
    continue;
   }
  }
  $77 = $indexA;
  $78 = $fixtureA;
  $79 = ((($78)) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($77*36)|0)|0);
  $82 = ((($81)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $proxyIdA = $83;
  $84 = $indexB;
  $85 = $fixtureB;
  $86 = ((($85)) + 32|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + (($84*36)|0)|0);
  $89 = ((($88)) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $proxyIdB = $90;
  $91 = $proxyIdA;
  $92 = $proxyIdB;
  $93 = (__ZNK12b2BroadPhase11TestOverlapEii($1,$91,$92)|0);
  $94 = $93&1;
  $overlap = $94;
  $95 = $overlap;
  $96 = $95&1;
  $97 = $96&1;
  $98 = ($97|0)==(0);
  $99 = $c;
  if ($98) {
   $cNuke2 = $99;
   $100 = $cNuke2;
   $101 = (__ZN9b2Contact7GetNextEv($100)|0);
   $c = $101;
   $102 = $cNuke2;
   __ZN16b2ContactManager7DestroyEP9b2Contact($1,$102);
   continue;
  } else {
   $103 = (__ZN9b2Contact7GetNextEv($99)|0);
   $c = $103;
   continue;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager15FindNewContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 103944|0);
 $5 = ((($1)) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 103948|0);
 $8 = ((($1)) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 103952|0);
 $11 = ((($1)) + 188|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 103956|0);
 $14 = ((($1)) + 188|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 103960|0);
 __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($1,$4,$7,$10,$13,$16);
 $17 = ((($1)) + 188|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK7b2World15GetFixtureCountEv($18)|0);
 $20 = ((($1)) + 108|0);
 $21 = ((($1)) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 __ZN12b2BroadPhase9SetValuesEiPiS0_($1,$19,$20,$22);
 $23 = ((($1)) + 188|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZNK7b2World13GetProxyCountEv($24)|0);
 $26 = ($25*10)|0;
 $27 = ((($1)) + 112|0);
 HEAP32[$27>>2] = $26;
 __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($1,$1);
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($this,$pUpdatePairsTime,$pCreateGPUBuffersTime,$pComputeAABBsTime,$pSortAABBsTime,$pComputePairsTime) {
 $this = $this|0;
 $pUpdatePairsTime = $pUpdatePairsTime|0;
 $pCreateGPUBuffersTime = $pCreateGPUBuffersTime|0;
 $pComputeAABBsTime = $pComputeAABBsTime|0;
 $pSortAABBsTime = $pSortAABBsTime|0;
 $pComputePairsTime = $pComputePairsTime|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pUpdatePairsTime;
 $2 = $pCreateGPUBuffersTime;
 $3 = $pComputeAABBsTime;
 $4 = $pSortAABBsTime;
 $5 = $pComputePairsTime;
 $6 = $0;
 $7 = $1;
 $8 = ((($6)) + 80|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = ((($6)) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = ((($6)) + 88|0);
 HEAP32[$12>>2] = $11;
 $13 = $4;
 $14 = ((($6)) + 92|0);
 HEAP32[$14>>2] = $13;
 $15 = $5;
 $16 = ((($6)) + 96|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNK7b2World15GetFixtureCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 103080|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12b2BroadPhase9SetValuesEiPiS0_($this,$fixtureCount,$pTotalContactCount,$pContactCounts) {
 $this = $this|0;
 $fixtureCount = $fixtureCount|0;
 $pTotalContactCount = $pTotalContactCount|0;
 $pContactCounts = $pContactCounts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureCount;
 $2 = $pTotalContactCount;
 $3 = $pContactCounts;
 $4 = $0;
 $5 = HEAP8[11781]|0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($4)) + 64|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = ((($4)) + 68|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = ((($4)) + 72|0);
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this,$callback) {
 $this = $this|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ComputeAABBsTimer = 0;
 var $ComputePairsTimer = 0, $CreateGPUBuffersTimer = 0, $SortAABBsTimer = 0, $fatAABB = 0, $i = 0, $i1 = 0, $pair = 0, $primaryPair = 0, $updatePairsTimer = 0, $userDataA = 0, $userDataB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $updatePairsTimer = sp + 52|0;
 $CreateGPUBuffersTimer = sp + 51|0;
 $ComputeAABBsTimer = sp + 50|0;
 $SortAABBsTimer = sp + 49|0;
 $ComputePairsTimer = sp + 48|0;
 $3 = $this;
 $4 = $callback;
 $5 = $3;
 __ZN7b2TimerC2Ev($updatePairsTimer);
 __ZN7b2TimerC2Ev($CreateGPUBuffersTimer);
 $6 = HEAP8[11781]|0;
 $7 = $6&1;
 if ($7) {
  $80 = ((($5)) + 60|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($5)) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  __ZN14b2CLBroadPhase16CreateGPUBuffersEi($81,$83);
  $84 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($84);
  $85 = (+__ZNK7b2Timer15GetMillisecondsEv($CreateGPUBuffersTimer));
  $86 = ((($5)) + 84|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = +HEAPF32[$87>>2];
  $89 = $88 + $85;
  HEAPF32[$87>>2] = $89;
  __ZN7b2TimerC2Ev($ComputeAABBsTimer);
  $90 = ((($5)) + 60|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($5)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  __ZN14b2CLBroadPhase12ComputeAABBsEi($91,$93);
  $94 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($94);
  $95 = (+__ZNK7b2Timer15GetMillisecondsEv($ComputeAABBsTimer));
  $96 = ((($5)) + 88|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = +HEAPF32[$97>>2];
  $99 = $98 + $95;
  HEAPF32[$97>>2] = $99;
  __ZN7b2TimerC2Ev($SortAABBsTimer);
  $100 = ((($5)) + 60|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($5)) + 28|0);
  $103 = HEAP32[$102>>2]|0;
  __ZN14b2CLBroadPhase18PrepareSumVarianceEi($101,$103);
  $104 = ((($5)) + 60|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($5)) + 28|0);
  $107 = HEAP32[$106>>2]|0;
  __ZN14b2CLBroadPhase15InitSortingKeysEi($105,$107);
  $108 = ((($5)) + 60|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($5)) + 28|0);
  $111 = HEAP32[$110>>2]|0;
  __ZN14b2CLBroadPhase9SortAABBsEi($109,$111);
  $112 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($112);
  $113 = (+__ZNK7b2Timer15GetMillisecondsEv($SortAABBsTimer));
  $114 = ((($5)) + 92|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = +HEAPF32[$115>>2];
  $117 = $116 + $113;
  HEAPF32[$115>>2] = $117;
  __ZN7b2TimerC2Ev($ComputePairsTimer);
  $118 = ((($5)) + 60|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($5)) + 28|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($5)) + 68|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($5)) + 72|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($5)) + 76|0);
  $127 = HEAP32[$126>>2]|0;
  __ZN14b2CLBroadPhase12ComputePairsEiPiS0_PK7b2World($119,$121,$123,$125,$127);
  $128 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($128);
  $129 = (+__ZNK7b2Timer15GetMillisecondsEv($ComputePairsTimer));
  $130 = ((($5)) + 96|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = +HEAPF32[$131>>2];
  $133 = $132 + $129;
  HEAPF32[$131>>2] = $133;
  $134 = (+__ZNK7b2Timer15GetMillisecondsEv($updatePairsTimer));
  $135 = ((($5)) + 80|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = +HEAPF32[$136>>2];
  $138 = $137 + $134;
  HEAPF32[$136>>2] = $138;
  STACKTOP = sp;return;
 }
 $8 = ((($5)) + 52|0);
 HEAP32[$8>>2] = 0;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($5)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = ((($5)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($5)) + 56|0);
  HEAP32[$18>>2] = $17;
  $19 = ((($5)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(-1);
  if (!($21)) {
   $22 = ((($5)) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (__ZNK13b2DynamicTree10GetFatAABBEi($5,$23)|0);
   $fatAABB = $24;
   $25 = $fatAABB;
   __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($5,$5,$25);
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = ((($5)) + 40|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($5)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($5)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($5)) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + (($34*12)|0)|0);
 $0 = $30;
 $1 = $35;
 HEAP32[$2>>2] = 439;
 $36 = $0;
 $37 = $1;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($36,$37,$2);
 $i1 = 0;
 L12: while(1) {
  $38 = $i1;
  $39 = ((($5)) + 52|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = ((($5)) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $i1;
  $45 = (($43) + (($44*12)|0)|0);
  $primaryPair = $45;
  $46 = $primaryPair;
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$47)|0);
  $userDataA = $48;
  $49 = $primaryPair;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$51)|0);
  $userDataB = $52;
  $53 = $4;
  $54 = $userDataA;
  $55 = $userDataB;
  __ZN16b2ContactManager7AddPairEPvS0_($53,$54,$55);
  $56 = $i1;
  $57 = (($56) + 1)|0;
  $i1 = $57;
  while(1) {
   $58 = $i1;
   $59 = ((($5)) + 52|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58|0)<($60|0);
   if (!($61)) {
    continue L12;
   }
   $62 = ((($5)) + 44|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $i1;
   $65 = (($63) + (($64*12)|0)|0);
   $pair = $65;
   $66 = $pair;
   $67 = HEAP32[$66>>2]|0;
   $68 = $primaryPair;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)!=($69|0);
   if ($70) {
    continue L12;
   }
   $71 = $pair;
   $72 = ((($71)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $primaryPair;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($73|0)!=($76|0);
   if ($77) {
    continue L12;
   }
   $78 = $i1;
   $79 = (($78) + 1)|0;
   $i1 = $79;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this,$callback,$aabb) {
 $this = $this|0;
 $callback = $callback|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $nodeId = 0, $proceed = 0;
 var $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stack = sp + 20|0;
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $6 = $0;
 __ZN15b2GrowableStackIiLi256EEC2Ev($stack);
 __THREW__ = 0;
 invoke_vii(440,($stack|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   while(1) {
    __THREW__ = 0;
    $9 = (invoke_ii(441,($stack|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break L1;
    }
    $12 = ($9|0)>(0);
    if (!($12)) {
     label = 16;
     break;
    }
    __THREW__ = 0;
    $13 = (invoke_ii(442,($stack|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break L1;
    }
    $nodeId = $13;
    $16 = $nodeId;
    $17 = ($16|0)==(-1);
    if ($17) {
     continue;
    }
    $22 = ((($6)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $nodeId;
    $25 = (($23) + (($24*36)|0)|0);
    $node = $25;
    $26 = $node;
    $27 = $2;
    __THREW__ = 0;
    $28 = (invoke_iii(444,($26|0),($27|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     break L1;
    }
    if (!($28)) {
     continue;
    }
    $31 = $node;
    __THREW__ = 0;
    $32 = (invoke_ii(445,($31|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     break L1;
    }
    if ($32) {
     $35 = $1;
     $36 = $nodeId;
     __THREW__ = 0;
     $37 = (invoke_iii(446,($35|0),($36|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break L1;
     }
     $40 = $37&1;
     $proceed = $40;
     $41 = $proceed;
     $42 = $41&1;
     $43 = $42&1;
     $44 = ($43|0)==(0);
     if ($44) {
      label = 13;
      break;
     } else {
      continue;
     }
    } else {
     $45 = $node;
     $46 = ((($45)) + 24|0);
     __THREW__ = 0;
     invoke_vii(440,($stack|0),($46|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      break L1;
     }
     $49 = $node;
     $50 = ((($49)) + 28|0);
     __THREW__ = 0;
     invoke_vii(440,($stack|0),($50|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break L1;
     } else {
      continue;
     }
    }
   }
   if ((label|0) == 13) {
    $5 = 1;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 16) {
    $5 = 0;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(443,($stack|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $55 = ___cxa_find_matching_catch_3(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 } else {
  $53 = $3;
  $54 = $4;
  ___resumeException($53|0);
  // unreachable;
 }
}
function __ZN15b2GrowableStackIiLi256EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 1028|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 1032|0);
 HEAP32[$4>>2] = 256;
 STACKTOP = sp;return;
}
function __ZN15b2GrowableStackIiLi256EE4PushERKi($this,$element) {
 $this = $this|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $0;
 $3 = ((($2)) + 1028|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 1032|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $old = $8;
  $9 = ((($2)) + 1032|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10<<1;
  HEAP32[$9>>2] = $11;
  $12 = ((($2)) + 1032|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<2;
  $15 = (__Z7b2Alloci($14)|0);
  HEAP32[$2>>2] = $15;
  $16 = HEAP32[$2>>2]|0;
  $17 = $old;
  $18 = ((($2)) + 1028|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<2;
  _memcpy(($16|0),($17|0),($20|0))|0;
  $21 = $old;
  $22 = ((($2)) + 4|0);
  $23 = ($21|0)!=($22|0);
  if ($23) {
   $24 = $old;
   __Z6b2FreePv($24);
  }
 }
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 1028|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$2>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = $26;
 $31 = ((($2)) + 1028|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function __ZN15b2GrowableStackIiLi256EE8GetCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 1028|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 1028|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ((($1)) + 1028|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = ((($1)) + 1028|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((20057|0),(20069|0),67,(20149|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN15b2GrowableStackIiLi256EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 __Z6b2FreePv($5);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __Z14b2PairLessThanRK6b2PairS1_($pair1,$pair2) {
 $pair1 = $pair1|0;
 $pair2 = $pair2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = $pair1;
 $2 = $pair2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = $2;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)==($11|0);
   if ($12) {
    $13 = $1;
    $14 = ((($13)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $2;
    $17 = ((($16)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($15|0)<($18|0);
    $$expand_i1_val2 = $19&1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   } else {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 204|0;
 $__t$i4 = sp + 172|0;
 $__t$i3 = sp + 140|0;
 $__t$i2 = sp + 108|0;
 $__t$i1 = sp + 76|0;
 $__t$i = sp + 44|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  $33 = $31;
  $34 = $30;
  $35 = $33;
  $36 = $34;
  $37 = (($35) - ($36))|0;
  $38 = (($37|0) / 12)&-1;
  $__len = $38;
  $39 = $__len;
  switch ($39|0) {
  case 2:  {
   label = 3;
   break L1;
   break;
  }
  case 3:  {
   label = 5;
   break L1;
   break;
  }
  case 4:  {
   label = 6;
   break L1;
   break;
  }
  case 5:  {
   label = 7;
   break L1;
   break;
  }
  case 1: case 0:  {
   label = 49;
   break L1;
   break;
  }
  default: {
  }
  }
  $79 = $__len;
  $80 = ($79|0)<=(30);
  $81 = $30;
  if ($80) {
   label = 9;
   break;
  }
  $__m = $81;
  $84 = $31;
  $__lm1 = $84;
  $85 = $__lm1;
  $86 = ((($85)) + -12|0);
  $__lm1 = $86;
  $87 = $__len;
  $88 = ($87|0)>=(1000);
  $89 = $__len;
  $90 = (($89|0) / 2)&-1;
  $__delta = $90;
  $91 = $__delta;
  $92 = $__m;
  $93 = (($92) + (($91*12)|0)|0);
  $__m = $93;
  if ($88) {
   $94 = $__delta;
   $95 = (($94|0) / 2)&-1;
   $__delta = $95;
   $96 = $30;
   $97 = $30;
   $98 = $__delta;
   $99 = (($97) + (($98*12)|0)|0);
   $100 = $__m;
   $101 = $__m;
   $102 = $__delta;
   $103 = (($101) + (($102*12)|0)|0);
   $104 = $__lm1;
   $105 = $32;
   $106 = (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($96,$99,$100,$103,$104,$105)|0);
   $__n_swaps = $106;
  } else {
   $107 = $30;
   $108 = $__m;
   $109 = $__lm1;
   $110 = $32;
   $111 = (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($107,$108,$109,$110)|0);
   $__n_swaps = $111;
  }
  $112 = $30;
  $__i = $112;
  $113 = $__lm1;
  $__j = $113;
  $114 = $32;
  $115 = HEAP32[$114>>2]|0;
  $116 = $__i;
  $117 = $__m;
  $118 = (FUNCTION_TABLE_iii[$115 & 1023]($116,$117)|0);
  do {
   if (!($118)) {
    while(1) {
     $119 = $__i;
     $120 = $__j;
     $121 = ((($120)) + -12|0);
     $__j = $121;
     $122 = ($119|0)==($121|0);
     if ($122) {
      break;
     }
     $187 = $32;
     $188 = HEAP32[$187>>2]|0;
     $189 = $__j;
     $190 = $__m;
     $191 = (FUNCTION_TABLE_iii[$188 & 1023]($189,$190)|0);
     if ($191) {
      label = 28;
      break;
     }
    }
    if ((label|0) == 28) {
     label = 0;
     $192 = $__i;
     $193 = $__j;
     $13 = $192;
     $14 = $193;
     $194 = $13;
     $12 = $194;
     $195 = $12;
     ;HEAP32[$__t$i3>>2]=HEAP32[$195>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$195+8>>2]|0;
     $196 = $13;
     $197 = $14;
     $10 = $197;
     $198 = $10;
     ;HEAP32[$196>>2]=HEAP32[$198>>2]|0;HEAP32[$196+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$196+8>>2]=HEAP32[$198+8>>2]|0;
     $199 = $14;
     $11 = $__t$i3;
     $200 = $11;
     ;HEAP32[$199>>2]=HEAP32[$200>>2]|0;HEAP32[$199+4>>2]=HEAP32[$200+4>>2]|0;HEAP32[$199+8>>2]=HEAP32[$200+8>>2]|0;
     $201 = $__n_swaps;
     $202 = (($201) + 1)|0;
     $__n_swaps = $202;
     break;
    }
    $123 = $__i;
    $124 = ((($123)) + 12|0);
    $__i = $124;
    $125 = $31;
    $__j = $125;
    $126 = $32;
    $127 = HEAP32[$126>>2]|0;
    $128 = $30;
    $129 = $__j;
    $130 = ((($129)) + -12|0);
    $__j = $130;
    $131 = (FUNCTION_TABLE_iii[$127 & 1023]($128,$130)|0);
    if (!($131)) {
     while(1) {
      $132 = $__i;
      $133 = $__j;
      $134 = ($132|0)==($133|0);
      if ($134) {
       label = 49;
       break L1;
      }
      $135 = $32;
      $136 = HEAP32[$135>>2]|0;
      $137 = $30;
      $138 = $__i;
      $139 = (FUNCTION_TABLE_iii[$136 & 1023]($137,$138)|0);
      $140 = $__i;
      if ($139) {
       break;
      }
      $153 = ((($140)) + 12|0);
      $__i = $153;
     }
     $141 = $__j;
     $23 = $140;
     $24 = $141;
     $142 = $23;
     $22 = $142;
     $143 = $22;
     ;HEAP32[$__t$i1>>2]=HEAP32[$143>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$143+8>>2]|0;
     $144 = $23;
     $145 = $24;
     $20 = $145;
     $146 = $20;
     ;HEAP32[$144>>2]=HEAP32[$146>>2]|0;HEAP32[$144+4>>2]=HEAP32[$146+4>>2]|0;HEAP32[$144+8>>2]=HEAP32[$146+8>>2]|0;
     $147 = $24;
     $21 = $__t$i1;
     $148 = $21;
     ;HEAP32[$147>>2]=HEAP32[$148>>2]|0;HEAP32[$147+4>>2]=HEAP32[$148+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$148+8>>2]|0;
     $149 = $__n_swaps;
     $150 = (($149) + 1)|0;
     $__n_swaps = $150;
     $151 = $__i;
     $152 = ((($151)) + 12|0);
     $__i = $152;
    }
    $154 = $__i;
    $155 = $__j;
    $156 = ($154|0)==($155|0);
    if ($156) {
     label = 49;
     break L1;
    }
    while(1) {
     $157 = $32;
     $158 = HEAP32[$157>>2]|0;
     $159 = $30;
     $160 = $__i;
     $161 = (FUNCTION_TABLE_iii[$158 & 1023]($159,$160)|0);
     $162 = $161 ^ 1;
     if ($162) {
      $163 = $__i;
      $164 = ((($163)) + 12|0);
      $__i = $164;
      continue;
     }
     while(1) {
      $165 = $32;
      $166 = HEAP32[$165>>2]|0;
      $167 = $30;
      $168 = $__j;
      $169 = ((($168)) + -12|0);
      $__j = $169;
      $170 = (FUNCTION_TABLE_iii[$166 & 1023]($167,$169)|0);
      if (!($170)) {
       break;
      }
     }
     $171 = $__i;
     $172 = $__j;
     $173 = ($171>>>0)>=($172>>>0);
     $174 = $__i;
     if ($173) {
      break;
     }
     $175 = $__j;
     $18 = $174;
     $19 = $175;
     $176 = $18;
     $17 = $176;
     $177 = $17;
     ;HEAP32[$__t$i2>>2]=HEAP32[$177>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$177+8>>2]|0;
     $178 = $18;
     $179 = $19;
     $15 = $179;
     $180 = $15;
     ;HEAP32[$178>>2]=HEAP32[$180>>2]|0;HEAP32[$178+4>>2]=HEAP32[$180+4>>2]|0;HEAP32[$178+8>>2]=HEAP32[$180+8>>2]|0;
     $181 = $19;
     $16 = $__t$i2;
     $182 = $16;
     ;HEAP32[$181>>2]=HEAP32[$182>>2]|0;HEAP32[$181+4>>2]=HEAP32[$182+4>>2]|0;HEAP32[$181+8>>2]=HEAP32[$182+8>>2]|0;
     $183 = $__n_swaps;
     $184 = (($183) + 1)|0;
     $__n_swaps = $184;
     $185 = $__i;
     $186 = ((($185)) + 12|0);
     $__i = $186;
    }
    $30 = $174;
    continue L1;
   }
  } while(0);
  $203 = $__i;
  $204 = ((($203)) + 12|0);
  $__i = $204;
  $205 = $__i;
  $206 = $__j;
  $207 = ($205>>>0)<($206>>>0);
  L33: do {
   if ($207) {
    while(1) {
     $208 = $32;
     $209 = HEAP32[$208>>2]|0;
     $210 = $__i;
     $211 = $__m;
     $212 = (FUNCTION_TABLE_iii[$209 & 1023]($210,$211)|0);
     if ($212) {
      $213 = $__i;
      $214 = ((($213)) + 12|0);
      $__i = $214;
      continue;
     }
     while(1) {
      $215 = $32;
      $216 = HEAP32[$215>>2]|0;
      $217 = $__j;
      $218 = ((($217)) + -12|0);
      $__j = $218;
      $219 = $__m;
      $220 = (FUNCTION_TABLE_iii[$216 & 1023]($218,$219)|0);
      $221 = $220 ^ 1;
      if (!($221)) {
       break;
      }
     }
     $222 = $__i;
     $223 = $__j;
     $224 = ($222>>>0)>($223>>>0);
     if ($224) {
      break L33;
     }
     $225 = $__i;
     $226 = $__j;
     $8 = $225;
     $9 = $226;
     $227 = $8;
     $7 = $227;
     $228 = $7;
     ;HEAP32[$__t$i4>>2]=HEAP32[$228>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$228+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$228+8>>2]|0;
     $229 = $8;
     $230 = $9;
     $5 = $230;
     $231 = $5;
     ;HEAP32[$229>>2]=HEAP32[$231>>2]|0;HEAP32[$229+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$229+8>>2]=HEAP32[$231+8>>2]|0;
     $232 = $9;
     $6 = $__t$i4;
     $233 = $6;
     ;HEAP32[$232>>2]=HEAP32[$233>>2]|0;HEAP32[$232+4>>2]=HEAP32[$233+4>>2]|0;HEAP32[$232+8>>2]=HEAP32[$233+8>>2]|0;
     $234 = $__n_swaps;
     $235 = (($234) + 1)|0;
     $__n_swaps = $235;
     $236 = $__m;
     $237 = $__i;
     $238 = ($236|0)==($237|0);
     if ($238) {
      $239 = $__j;
      $__m = $239;
     }
     $240 = $__i;
     $241 = ((($240)) + 12|0);
     $__i = $241;
    }
   }
  } while(0);
  $242 = $__i;
  $243 = $__m;
  $244 = ($242|0)!=($243|0);
  if ($244) {
   $245 = $32;
   $246 = HEAP32[$245>>2]|0;
   $247 = $__m;
   $248 = $__i;
   $249 = (FUNCTION_TABLE_iii[$246 & 1023]($247,$248)|0);
   if ($249) {
    $250 = $__i;
    $251 = $__m;
    $3 = $250;
    $4 = $251;
    $252 = $3;
    $2 = $252;
    $253 = $2;
    ;HEAP32[$__t$i5>>2]=HEAP32[$253>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$253+4>>2]|0;HEAP32[$__t$i5+8>>2]=HEAP32[$253+8>>2]|0;
    $254 = $3;
    $255 = $4;
    $0 = $255;
    $256 = $0;
    ;HEAP32[$254>>2]=HEAP32[$256>>2]|0;HEAP32[$254+4>>2]=HEAP32[$256+4>>2]|0;HEAP32[$254+8>>2]=HEAP32[$256+8>>2]|0;
    $257 = $4;
    $1 = $__t$i5;
    $258 = $1;
    ;HEAP32[$257>>2]=HEAP32[$258>>2]|0;HEAP32[$257+4>>2]=HEAP32[$258+4>>2]|0;HEAP32[$257+8>>2]=HEAP32[$258+8>>2]|0;
    $259 = $__n_swaps;
    $260 = (($259) + 1)|0;
    $__n_swaps = $260;
   }
  }
  $261 = $__n_swaps;
  $262 = ($261|0)==(0);
  do {
   if ($262) {
    $263 = $30;
    $264 = $__i;
    $265 = $32;
    $266 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($263,$264,$265)|0);
    $267 = $266&1;
    $__fs = $267;
    $268 = $__i;
    $269 = ((($268)) + 12|0);
    $270 = $31;
    $271 = $32;
    $272 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($269,$270,$271)|0);
    $273 = $__fs;
    $274 = $273&1;
    if ($272) {
     if ($274) {
      label = 49;
      break L1;
     }
     $275 = $__i;
     $31 = $275;
     continue L1;
    } else {
     if (!($274)) {
      break;
     }
     $276 = $__i;
     $277 = ((($276)) + 12|0);
     $__i = $277;
     $30 = $277;
     continue L1;
    }
   }
  } while(0);
  $278 = $__i;
  $279 = $30;
  $280 = $278;
  $281 = $279;
  $282 = (($280) - ($281))|0;
  $283 = (($282|0) / 12)&-1;
  $284 = $31;
  $285 = $__i;
  $286 = $284;
  $287 = $285;
  $288 = (($286) - ($287))|0;
  $289 = (($288|0) / 12)&-1;
  $290 = ($283|0)<($289|0);
  if ($290) {
   $291 = $30;
   $292 = $__i;
   $293 = $32;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($291,$292,$293);
   $294 = $__i;
   $295 = ((($294)) + 12|0);
   $__i = $295;
   $30 = $295;
   continue;
  } else {
   $296 = $__i;
   $297 = ((($296)) + 12|0);
   $298 = $31;
   $299 = $32;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($297,$298,$299);
   $300 = $__i;
   $31 = $300;
   continue;
  }
 }
 if ((label|0) == 3) {
  $40 = $32;
  $41 = HEAP32[$40>>2]|0;
  $42 = $31;
  $43 = ((($42)) + -12|0);
  $31 = $43;
  $44 = $30;
  $45 = (FUNCTION_TABLE_iii[$41 & 1023]($43,$44)|0);
  if (!($45)) {
   STACKTOP = sp;return;
  }
  $46 = $30;
  $47 = $31;
  $28 = $46;
  $29 = $47;
  $48 = $28;
  $27 = $48;
  $49 = $27;
  ;HEAP32[$__t$i>>2]=HEAP32[$49>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$49+8>>2]|0;
  $50 = $28;
  $51 = $29;
  $25 = $51;
  $52 = $25;
  ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$52+8>>2]|0;
  $53 = $29;
  $26 = $__t$i;
  $54 = $26;
  ;HEAP32[$53>>2]=HEAP32[$54>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$54+8>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $55 = $30;
  $56 = $30;
  $57 = ((($56)) + 12|0);
  $58 = $31;
  $59 = ((($58)) + -12|0);
  $31 = $59;
  $60 = $32;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($55,$57,$59,$60)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $61 = $30;
  $62 = $30;
  $63 = ((($62)) + 12|0);
  $64 = $30;
  $65 = ((($64)) + 24|0);
  $66 = $31;
  $67 = ((($66)) + -12|0);
  $31 = $67;
  $68 = $32;
  (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($61,$63,$65,$67,$68)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $69 = $30;
  $70 = $30;
  $71 = ((($70)) + 12|0);
  $72 = $30;
  $73 = ((($72)) + 24|0);
  $74 = $30;
  $75 = ((($74)) + 36|0);
  $76 = $31;
  $77 = ((($76)) + -12|0);
  $31 = $77;
  $78 = $32;
  (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($69,$71,$73,$75,$77,$78)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $82 = $31;
  $83 = $32;
  __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($81,$82,$83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 49) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__r = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 152|0;
 $__t$i3 = sp + 120|0;
 $__t$i2 = sp + 88|0;
 $__t$i1 = sp + 56|0;
 $__t$i = sp + 24|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $27;
 $33 = $26;
 $34 = (FUNCTION_TABLE_iii[$31 & 1023]($32,$33)|0);
 $35 = $29;
 $36 = HEAP32[$35>>2]|0;
 $37 = $28;
 $38 = $27;
 $39 = (FUNCTION_TABLE_iii[$36 & 1023]($37,$38)|0);
 if ($34) {
  $65 = $26;
  if ($39) {
   $66 = $28;
   $3 = $65;
   $4 = $66;
   $67 = $3;
   $2 = $67;
   $68 = $2;
   ;HEAP32[$__t$i4>>2]=HEAP32[$68>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$68+8>>2]|0;
   $69 = $3;
   $70 = $4;
   $0 = $70;
   $71 = $0;
   ;HEAP32[$69>>2]=HEAP32[$71>>2]|0;HEAP32[$69+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$71+8>>2]|0;
   $72 = $4;
   $1 = $__t$i4;
   $73 = $1;
   ;HEAP32[$72>>2]=HEAP32[$73>>2]|0;HEAP32[$72+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$73+8>>2]|0;
   $__r = 1;
   $74 = $__r;
   $25 = $74;
   $98 = $25;
   STACKTOP = sp;return ($98|0);
  }
  $75 = $27;
  $8 = $65;
  $9 = $75;
  $76 = $8;
  $7 = $76;
  $77 = $7;
  ;HEAP32[$__t$i3>>2]=HEAP32[$77>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$77+8>>2]|0;
  $78 = $8;
  $79 = $9;
  $5 = $79;
  $80 = $5;
  ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;
  $81 = $9;
  $6 = $__t$i3;
  $82 = $6;
  ;HEAP32[$81>>2]=HEAP32[$82>>2]|0;HEAP32[$81+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$82+8>>2]|0;
  $__r = 1;
  $83 = $29;
  $84 = HEAP32[$83>>2]|0;
  $85 = $28;
  $86 = $27;
  $87 = (FUNCTION_TABLE_iii[$84 & 1023]($85,$86)|0);
  if ($87) {
   $88 = $27;
   $89 = $28;
   $18 = $88;
   $19 = $89;
   $90 = $18;
   $17 = $90;
   $91 = $17;
   ;HEAP32[$__t$i1>>2]=HEAP32[$91>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$91+8>>2]|0;
   $92 = $18;
   $93 = $19;
   $15 = $93;
   $94 = $15;
   ;HEAP32[$92>>2]=HEAP32[$94>>2]|0;HEAP32[$92+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$92+8>>2]=HEAP32[$94+8>>2]|0;
   $95 = $19;
   $16 = $__t$i1;
   $96 = $16;
   ;HEAP32[$95>>2]=HEAP32[$96>>2]|0;HEAP32[$95+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$96+8>>2]|0;
   $__r = 2;
  }
  $97 = $__r;
  $25 = $97;
  $98 = $25;
  STACKTOP = sp;return ($98|0);
 } else {
  if (!($39)) {
   $40 = $__r;
   $25 = $40;
   $98 = $25;
   STACKTOP = sp;return ($98|0);
  }
  $41 = $27;
  $42 = $28;
  $23 = $41;
  $24 = $42;
  $43 = $23;
  $22 = $43;
  $44 = $22;
  ;HEAP32[$__t$i>>2]=HEAP32[$44>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$44+8>>2]|0;
  $45 = $23;
  $46 = $24;
  $20 = $46;
  $47 = $20;
  ;HEAP32[$45>>2]=HEAP32[$47>>2]|0;HEAP32[$45+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$47+8>>2]|0;
  $48 = $24;
  $21 = $__t$i;
  $49 = $21;
  ;HEAP32[$48>>2]=HEAP32[$49>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$49+8>>2]|0;
  $__r = 1;
  $50 = $29;
  $51 = HEAP32[$50>>2]|0;
  $52 = $27;
  $53 = $26;
  $54 = (FUNCTION_TABLE_iii[$51 & 1023]($52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   ;HEAP32[$__t$i2>>2]=HEAP32[$58>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$58+8>>2]|0;
   $59 = $13;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   ;HEAP32[$59>>2]=HEAP32[$61>>2]|0;HEAP32[$59+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$61+8>>2]|0;
   $62 = $14;
   $11 = $__t$i2;
   $63 = $11;
   ;HEAP32[$62>>2]=HEAP32[$63>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$63+8>>2]|0;
   $__r = 2;
  }
  $64 = $__r;
  $25 = $64;
  $98 = $25;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 88|0;
 $__t$i1 = sp + 56|0;
 $__t$i = sp + 24|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = HEAP32[$25>>2]|0;
 $27 = $18;
 $28 = $17;
 $29 = (FUNCTION_TABLE_iii[$26 & 1023]($27,$28)|0);
 if (!($29)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $30 = $17;
 $31 = $18;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 $12 = $32;
 $33 = $12;
 ;HEAP32[$__t$i>>2]=HEAP32[$33>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$33+8>>2]|0;
 $34 = $13;
 $35 = $14;
 $10 = $35;
 $36 = $10;
 ;HEAP32[$34>>2]=HEAP32[$36>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$36+8>>2]|0;
 $37 = $14;
 $11 = $__t$i;
 $38 = $11;
 ;HEAP32[$37>>2]=HEAP32[$38>>2]|0;HEAP32[$37+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$38+8>>2]|0;
 $39 = $__r;
 $40 = (($39) + 1)|0;
 $__r = $40;
 $41 = $19;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = $16;
 $45 = (FUNCTION_TABLE_iii[$42 & 1023]($43,$44)|0);
 if (!($45)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $46 = $16;
 $47 = $17;
 $3 = $46;
 $4 = $47;
 $48 = $3;
 $2 = $48;
 $49 = $2;
 ;HEAP32[$__t$i2>>2]=HEAP32[$49>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$49+8>>2]|0;
 $50 = $3;
 $51 = $4;
 $0 = $51;
 $52 = $0;
 ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$52+8>>2]|0;
 $53 = $4;
 $1 = $__t$i2;
 $54 = $1;
 ;HEAP32[$53>>2]=HEAP32[$54>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$54+8>>2]|0;
 $55 = $__r;
 $56 = (($55) + 1)|0;
 $__r = $56;
 $57 = $19;
 $58 = HEAP32[$57>>2]|0;
 $59 = $16;
 $60 = $15;
 $61 = (FUNCTION_TABLE_iii[$58 & 1023]($59,$60)|0);
 if (!($61)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $62 = $15;
 $63 = $16;
 $8 = $62;
 $9 = $63;
 $64 = $8;
 $7 = $64;
 $65 = $7;
 ;HEAP32[$__t$i1>>2]=HEAP32[$65>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$65+8>>2]|0;
 $66 = $8;
 $67 = $9;
 $5 = $67;
 $68 = $5;
 ;HEAP32[$66>>2]=HEAP32[$68>>2]|0;HEAP32[$66+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$68+8>>2]|0;
 $69 = $9;
 $6 = $__t$i1;
 $70 = $6;
 ;HEAP32[$69>>2]=HEAP32[$70>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$70+8>>2]|0;
 $71 = $__r;
 $72 = (($71) + 1)|0;
 $__r = $72;
 $73 = $__r;
 STACKTOP = sp;return ($73|0);
}
function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 124|0;
 $__t$i2 = sp + 92|0;
 $__t$i1 = sp + 60|0;
 $__t$i = sp + 28|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = HEAP32[$32>>2]|0;
 $34 = $24;
 $35 = $23;
 $36 = (FUNCTION_TABLE_iii[$33 & 1023]($34,$35)|0);
 if (!($36)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $37 = $23;
 $38 = $24;
 $18 = $37;
 $19 = $38;
 $39 = $18;
 $17 = $39;
 $40 = $17;
 ;HEAP32[$__t$i>>2]=HEAP32[$40>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$40+8>>2]|0;
 $41 = $18;
 $42 = $19;
 $15 = $42;
 $43 = $15;
 ;HEAP32[$41>>2]=HEAP32[$43>>2]|0;HEAP32[$41+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$43+8>>2]|0;
 $44 = $19;
 $16 = $__t$i;
 $45 = $16;
 ;HEAP32[$44>>2]=HEAP32[$45>>2]|0;HEAP32[$44+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $__r;
 $47 = (($46) + 1)|0;
 $__r = $47;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = $22;
 $52 = (FUNCTION_TABLE_iii[$49 & 1023]($50,$51)|0);
 if (!($52)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $53 = $22;
 $54 = $23;
 $8 = $53;
 $9 = $54;
 $55 = $8;
 $7 = $55;
 $56 = $7;
 ;HEAP32[$__t$i2>>2]=HEAP32[$56>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$56+8>>2]|0;
 $57 = $8;
 $58 = $9;
 $5 = $58;
 $59 = $5;
 ;HEAP32[$57>>2]=HEAP32[$59>>2]|0;HEAP32[$57+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$59+8>>2]|0;
 $60 = $9;
 $6 = $__t$i2;
 $61 = $6;
 ;HEAP32[$60>>2]=HEAP32[$61>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$61+8>>2]|0;
 $62 = $__r;
 $63 = (($62) + 1)|0;
 $__r = $63;
 $64 = $25;
 $65 = HEAP32[$64>>2]|0;
 $66 = $22;
 $67 = $21;
 $68 = (FUNCTION_TABLE_iii[$65 & 1023]($66,$67)|0);
 if (!($68)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $69 = $21;
 $70 = $22;
 $3 = $69;
 $4 = $70;
 $71 = $3;
 $2 = $71;
 $72 = $2;
 ;HEAP32[$__t$i3>>2]=HEAP32[$72>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$72+8>>2]|0;
 $73 = $3;
 $74 = $4;
 $0 = $74;
 $75 = $0;
 ;HEAP32[$73>>2]=HEAP32[$75>>2]|0;HEAP32[$73+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$75+8>>2]|0;
 $76 = $4;
 $1 = $__t$i3;
 $77 = $1;
 ;HEAP32[$76>>2]=HEAP32[$77>>2]|0;HEAP32[$76+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$76+8>>2]=HEAP32[$77+8>>2]|0;
 $78 = $__r;
 $79 = (($78) + 1)|0;
 $__r = $79;
 $80 = $25;
 $81 = HEAP32[$80>>2]|0;
 $82 = $21;
 $83 = $20;
 $84 = (FUNCTION_TABLE_iii[$81 & 1023]($82,$83)|0);
 if (!($84)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $85 = $20;
 $86 = $21;
 $13 = $85;
 $14 = $86;
 $87 = $13;
 $12 = $87;
 $88 = $12;
 ;HEAP32[$__t$i1>>2]=HEAP32[$88>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$88+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$88+8>>2]|0;
 $89 = $13;
 $90 = $14;
 $10 = $90;
 $91 = $10;
 ;HEAP32[$89>>2]=HEAP32[$91>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$91+8>>2]|0;
 $92 = $14;
 $11 = $__t$i1;
 $93 = $11;
 ;HEAP32[$92>>2]=HEAP32[$93>>2]|0;HEAP32[$92+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$92+8>>2]=HEAP32[$93+8>>2]|0;
 $94 = $__r;
 $95 = (($94) + 1)|0;
 $__r = $95;
 $96 = $__r;
 STACKTOP = sp;return ($96|0);
}
function __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 4|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = ((($6)) + 24|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = ((($9)) + 12|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = ((($13)) + 12|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = HEAP32[$18>>2]|0;
  $20 = $__i;
  $21 = $__j;
  $22 = (FUNCTION_TABLE_iii[$19 & 1023]($20,$21)|0);
  if ($22) {
   $23 = $__i;
   $2 = $23;
   $24 = $2;
   ;HEAP32[$__t>>2]=HEAP32[$24>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$24+8>>2]|0;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__j;
    $28 = $__k;
    $0 = $28;
    $29 = $0;
    ;HEAP32[$27>>2]=HEAP32[$29>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$29+8>>2]|0;
    $30 = $__k;
    $__j = $30;
    $31 = $__j;
    $32 = $3;
    $33 = ($31|0)!=($32|0);
    if (!($33)) {
     break;
    }
    $34 = $5;
    $35 = HEAP32[$34>>2]|0;
    $36 = $__k;
    $37 = ((($36)) + -12|0);
    $__k = $37;
    $38 = (FUNCTION_TABLE_iii[$35 & 1023]($__t,$37)|0);
    if (!($38)) {
     break;
    }
   }
   $39 = $__j;
   $1 = $__t;
   $40 = $1;
   ;HEAP32[$39>>2]=HEAP32[$40>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$40+8>>2]|0;
  }
  $41 = $__i;
  $__j = $41;
  $42 = $__i;
  $43 = ((($42)) + 12|0);
  $__i = $43;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 44|0;
 $8 = sp + 88|0;
 $__t = sp + 4|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 12)&-1;
 switch ($17|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  HEAP8[$8>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 2:  {
  $18 = $11;
  $19 = HEAP32[$18>>2]|0;
  $20 = $10;
  $21 = ((($20)) + -12|0);
  $10 = $21;
  $22 = $9;
  $23 = (FUNCTION_TABLE_iii[$19 & 1023]($21,$22)|0);
  if ($23) {
   $24 = $9;
   $25 = $10;
   $6 = $24;
   $7 = $25;
   $26 = $6;
   $5 = $26;
   $27 = $5;
   ;HEAP32[$__t$i>>2]=HEAP32[$27>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$27+8>>2]|0;
   $28 = $6;
   $29 = $7;
   $3 = $29;
   $30 = $3;
   ;HEAP32[$28>>2]=HEAP32[$30>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$30+8>>2]|0;
   $31 = $7;
   $4 = $__t$i;
   $32 = $4;
   ;HEAP32[$31>>2]=HEAP32[$32>>2]|0;HEAP32[$31+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$32+8>>2]|0;
  }
  $$expand_i1_val2 = 1;
  HEAP8[$8>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 3:  {
  $33 = $9;
  $34 = $9;
  $35 = ((($34)) + 12|0);
  $36 = $10;
  $37 = ((($36)) + -12|0);
  $10 = $37;
  $38 = $11;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($33,$35,$37,$38)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$8>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 4:  {
  $39 = $9;
  $40 = $9;
  $41 = ((($40)) + 12|0);
  $42 = $9;
  $43 = ((($42)) + 24|0);
  $44 = $10;
  $45 = ((($44)) + -12|0);
  $10 = $45;
  $46 = $11;
  (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($39,$41,$43,$45,$46)|0);
  $$expand_i1_val6 = 1;
  HEAP8[$8>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 5:  {
  $47 = $9;
  $48 = $9;
  $49 = ((($48)) + 12|0);
  $50 = $9;
  $51 = ((($50)) + 24|0);
  $52 = $9;
  $53 = ((($52)) + 36|0);
  $54 = $10;
  $55 = ((($54)) + -12|0);
  $10 = $55;
  $56 = $11;
  (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($47,$49,$51,$53,$55,$56)|0);
  $$expand_i1_val8 = 1;
  HEAP8[$8>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 default: {
  $57 = $9;
  $58 = ((($57)) + 24|0);
  $__j = $58;
  $59 = $9;
  $60 = $9;
  $61 = ((($60)) + 12|0);
  $62 = $__j;
  $63 = $11;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($59,$61,$62,$63)|0);
  $__limit = 8;
  $__count = 0;
  $64 = $__j;
  $65 = ((($64)) + 12|0);
  $__i = $65;
  while(1) {
   $66 = $__i;
   $67 = $10;
   $68 = ($66|0)!=($67|0);
   if (!($68)) {
    label = 18;
    break;
   }
   $69 = $11;
   $70 = HEAP32[$69>>2]|0;
   $71 = $__i;
   $72 = $__j;
   $73 = (FUNCTION_TABLE_iii[$70 & 1023]($71,$72)|0);
   if ($73) {
    $74 = $__i;
    $1 = $74;
    $75 = $1;
    ;HEAP32[$__t>>2]=HEAP32[$75>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$75+8>>2]|0;
    $76 = $__j;
    $__k = $76;
    $77 = $__i;
    $__j = $77;
    while(1) {
     $78 = $__j;
     $79 = $__k;
     $0 = $79;
     $80 = $0;
     ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;
     $81 = $__k;
     $__j = $81;
     $82 = $__j;
     $83 = $9;
     $84 = ($82|0)!=($83|0);
     if (!($84)) {
      break;
     }
     $85 = $11;
     $86 = HEAP32[$85>>2]|0;
     $87 = $__k;
     $88 = ((($87)) + -12|0);
     $__k = $88;
     $89 = (FUNCTION_TABLE_iii[$86 & 1023]($__t,$88)|0);
     if (!($89)) {
      break;
     }
    }
    $90 = $__j;
    $2 = $__t;
    $91 = $2;
    ;HEAP32[$90>>2]=HEAP32[$91>>2]|0;HEAP32[$90+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$90+8>>2]=HEAP32[$91+8>>2]|0;
    $92 = $__count;
    $93 = (($92) + 1)|0;
    $__count = $93;
    $94 = ($93|0)==(8);
    if ($94) {
     label = 16;
     break;
    }
   }
   $99 = $__i;
   $__j = $99;
   $100 = $__i;
   $101 = ((($100)) + 12|0);
   $__i = $101;
  }
  if ((label|0) == 16) {
   $95 = $__i;
   $96 = ((($95)) + 12|0);
   $__i = $96;
   $97 = $10;
   $98 = ($96|0)==($97|0);
   $$expand_i1_val10 = $98&1;
   HEAP8[$8>>0] = $$expand_i1_val10;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 18) {
   $$expand_i1_val12 = 1;
   HEAP8[$8>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
 }
 }
 return (0)|0;
}
function __ZNK13b2DynamicTree11GetUserDataEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if (!($4)) {
  ___assert_fail((19924|0),(19965|0),153,(20153|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if ($8) {
  $9 = $1;
  $10 = ((($2)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($9*36)|0)|0);
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((19924|0),(19965|0),153,(20153|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN16b2ContactManager7AddPairEPvS0_($this,$proxyUserDataA,$proxyUserDataB) {
 $this = $this|0;
 $proxyUserDataA = $proxyUserDataA|0;
 $proxyUserDataB = $proxyUserDataB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0, $c = 0, $edge = 0, $fA = 0;
 var $fB = 0, $fixtureA = 0, $fixtureB = 0, $iA = 0, $iB = 0, $indexA = 0, $indexB = 0, $proxyA = 0, $proxyB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyUserDataA;
 $2 = $proxyUserDataB;
 $3 = $0;
 $4 = $1;
 $proxyA = $4;
 $5 = $2;
 $proxyB = $5;
 $6 = $proxyA;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $fixtureA = $8;
 $9 = $proxyB;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $fixtureB = $11;
 $12 = $proxyA;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $indexA = $14;
 $15 = $proxyB;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $indexB = $17;
 $18 = $fixtureA;
 $19 = (__ZN9b2Fixture7GetBodyEv($18)|0);
 $bodyA = $19;
 $20 = $fixtureB;
 $21 = (__ZN9b2Fixture7GetBodyEv($20)|0);
 $bodyB = $21;
 $22 = $bodyA;
 $23 = $bodyB;
 $24 = ($22|0)==($23|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $bodyB;
 $26 = (__ZN6b2Body14GetContactListEv($25)|0);
 $edge = $26;
 while(1) {
  $27 = $edge;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   label = 14;
   break;
  }
  $29 = $edge;
  $30 = HEAP32[$29>>2]|0;
  $31 = $bodyA;
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = $edge;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (__ZN9b2Contact11GetFixtureAEv($35)|0);
   $fA = $36;
   $37 = $edge;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (__ZN9b2Contact11GetFixtureBEv($39)|0);
   $fB = $40;
   $41 = $edge;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (__ZNK9b2Contact14GetChildIndexAEv($43)|0);
   $iA = $44;
   $45 = $edge;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (__ZNK9b2Contact14GetChildIndexBEv($47)|0);
   $iB = $48;
   $49 = $fA;
   $50 = $fixtureA;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $52 = $fB;
    $53 = $fixtureB;
    $54 = ($52|0)==($53|0);
    if ($54) {
     $55 = $iA;
     $56 = $indexA;
     $57 = ($55|0)==($56|0);
     if ($57) {
      $58 = $iB;
      $59 = $indexB;
      $60 = ($58|0)==($59|0);
      if ($60) {
       label = 25;
       break;
      }
     }
    }
   }
   $61 = $fA;
   $62 = $fixtureB;
   $63 = ($61|0)==($62|0);
   if ($63) {
    $64 = $fB;
    $65 = $fixtureA;
    $66 = ($64|0)==($65|0);
    if ($66) {
     $67 = $iA;
     $68 = $indexB;
     $69 = ($67|0)==($68|0);
     if ($69) {
      $70 = $iB;
      $71 = $indexA;
      $72 = ($70|0)==($71|0);
      if ($72) {
       label = 25;
       break;
      }
     }
    }
   }
  }
  $73 = $edge;
  $74 = ((($73)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $edge = $75;
 }
 if ((label|0) == 14) {
  $76 = $bodyB;
  $77 = $bodyA;
  $78 = (__ZNK6b2Body13ShouldCollideEPKS_($76,$77)|0);
  $79 = $78&1;
  $80 = ($79|0)==(0);
  if ($80) {
   STACKTOP = sp;return;
  }
  $81 = ((($3)) + 116|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = ((($3)) + 116|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $fixtureA;
   $90 = $fixtureB;
   $91 = (FUNCTION_TABLE_iiii[$88 & 1023]($85,$89,$90)|0);
   $92 = $91&1;
   $93 = ($92|0)==(0);
   if ($93) {
    STACKTOP = sp;return;
   }
  }
  $94 = $fixtureA;
  $95 = $indexA;
  $96 = $fixtureB;
  $97 = $indexB;
  $98 = ((($3)) + 124|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($94,$95,$96,$97,$99)|0);
  $c = $100;
  $101 = $c;
  $102 = ($101|0)==(0|0);
  if ($102) {
   STACKTOP = sp;return;
  }
  $103 = $c;
  $104 = (__ZN9b2Contact11GetFixtureAEv($103)|0);
  $fixtureA = $104;
  $105 = $c;
  $106 = (__ZN9b2Contact11GetFixtureBEv($105)|0);
  $fixtureB = $106;
  $107 = $c;
  $108 = (__ZNK9b2Contact14GetChildIndexAEv($107)|0);
  $indexA = $108;
  $109 = $c;
  $110 = (__ZNK9b2Contact14GetChildIndexBEv($109)|0);
  $indexB = $110;
  $111 = $fixtureA;
  $112 = (__ZN9b2Fixture7GetBodyEv($111)|0);
  $bodyA = $112;
  $113 = $fixtureB;
  $114 = (__ZN9b2Fixture7GetBodyEv($113)|0);
  $bodyB = $114;
  $115 = $c;
  $116 = ((($115)) + 8|0);
  HEAP32[$116>>2] = 0;
  $117 = ((($3)) + 100|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $c;
  $120 = ((($119)) + 12|0);
  HEAP32[$120>>2] = $118;
  $121 = ((($3)) + 100|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $c;
   $125 = ((($3)) + 100|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($126)) + 8|0);
   HEAP32[$127>>2] = $124;
  }
  $128 = $c;
  $129 = ((($3)) + 100|0);
  HEAP32[$129>>2] = $128;
  $130 = $c;
  $131 = $c;
  $132 = ((($131)) + 16|0);
  $133 = ((($132)) + 4|0);
  HEAP32[$133>>2] = $130;
  $134 = $bodyB;
  $135 = $c;
  $136 = ((($135)) + 16|0);
  HEAP32[$136>>2] = $134;
  $137 = $c;
  $138 = ((($137)) + 16|0);
  $139 = ((($138)) + 8|0);
  HEAP32[$139>>2] = 0;
  $140 = $bodyA;
  $141 = ((($140)) + 120|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $c;
  $144 = ((($143)) + 16|0);
  $145 = ((($144)) + 12|0);
  HEAP32[$145>>2] = $142;
  $146 = $bodyA;
  $147 = ((($146)) + 120|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)!=(0|0);
  if ($149) {
   $150 = $c;
   $151 = ((($150)) + 16|0);
   $152 = $bodyA;
   $153 = ((($152)) + 120|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ((($154)) + 8|0);
   HEAP32[$155>>2] = $151;
  }
  $156 = $c;
  $157 = ((($156)) + 16|0);
  $158 = $bodyA;
  $159 = ((($158)) + 120|0);
  HEAP32[$159>>2] = $157;
  $160 = $c;
  $161 = $c;
  $162 = ((($161)) + 32|0);
  $163 = ((($162)) + 4|0);
  HEAP32[$163>>2] = $160;
  $164 = $bodyA;
  $165 = $c;
  $166 = ((($165)) + 32|0);
  HEAP32[$166>>2] = $164;
  $167 = $c;
  $168 = ((($167)) + 32|0);
  $169 = ((($168)) + 8|0);
  HEAP32[$169>>2] = 0;
  $170 = $bodyB;
  $171 = ((($170)) + 120|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $c;
  $174 = ((($173)) + 32|0);
  $175 = ((($174)) + 12|0);
  HEAP32[$175>>2] = $172;
  $176 = $bodyB;
  $177 = ((($176)) + 120|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($178|0)!=(0|0);
  if ($179) {
   $180 = $c;
   $181 = ((($180)) + 32|0);
   $182 = $bodyB;
   $183 = ((($182)) + 120|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ((($184)) + 8|0);
   HEAP32[$185>>2] = $181;
  }
  $186 = $c;
  $187 = ((($186)) + 32|0);
  $188 = $bodyB;
  $189 = ((($188)) + 120|0);
  HEAP32[$189>>2] = $187;
  $190 = $bodyA;
  __ZN6b2Body8SetAwakeEb($190,1);
  $191 = $bodyB;
  __ZN6b2Body8SetAwakeEb($191,1);
  $192 = ((($3)) + 108|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + 1)|0;
  HEAP32[$192>>2] = $194;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZN16b2ContactManager18cpuFindNewContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 103944|0);
 $5 = ((($1)) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 103948|0);
 $8 = ((($1)) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 103952|0);
 $11 = ((($1)) + 188|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 103956|0);
 $14 = ((($1)) + 188|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 103960|0);
 __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($1,$4,$7,$10,$13,$16);
 $17 = ((($1)) + 188|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK7b2World15GetFixtureCountEv($18)|0);
 $20 = ((($1)) + 108|0);
 $21 = ((($1)) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 __ZN12b2BroadPhase9SetValuesEiPiS0_($1,$19,$20,$22);
 $23 = ((($1)) + 188|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZNK7b2World13GetProxyCountEv($24)|0);
 $26 = ($25*10)|0;
 $27 = ((($1)) + 112|0);
 HEAP32[$27>>2] = $26;
 __ZN12b2BroadPhase14cpuUpdatePairsI16b2ContactManagerEEvPT_($1,$1);
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase14cpuUpdatePairsI16b2ContactManagerEEvPT_($this,$callback) {
 $this = $this|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $fatAABB = 0, $i = 0;
 var $i1 = 0, $pair = 0, $primaryPair = 0, $userDataA = 0, $userDataB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $3 = $this;
 $4 = $callback;
 $5 = $3;
 $6 = ((($5)) + 52|0);
 HEAP32[$6>>2] = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ((($5)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = ((($5)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($5)) + 56|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($5)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(-1);
  if (!($19)) {
   $20 = ((($5)) + 56|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (__ZNK13b2DynamicTree10GetFatAABBEi($5,$21)|0);
   $fatAABB = $22;
   $23 = $fatAABB;
   __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($5,$5,$23);
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = ((($5)) + 40|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($5)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($5)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($5)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + (($32*12)|0)|0);
 $0 = $28;
 $1 = $33;
 HEAP32[$2>>2] = 439;
 $34 = $0;
 $35 = $1;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($34,$35,$2);
 $i1 = 0;
 L8: while(1) {
  $36 = $i1;
  $37 = ((($5)) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = ((($5)) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $i1;
  $43 = (($41) + (($42*12)|0)|0);
  $primaryPair = $43;
  $44 = $primaryPair;
  $45 = HEAP32[$44>>2]|0;
  $46 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$45)|0);
  $userDataA = $46;
  $47 = $primaryPair;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$49)|0);
  $userDataB = $50;
  $51 = $4;
  $52 = $userDataA;
  $53 = $userDataB;
  __ZN16b2ContactManager7AddPairEPvS0_($51,$52,$53);
  $54 = $i1;
  $55 = (($54) + 1)|0;
  $i1 = $55;
  while(1) {
   $56 = $i1;
   $57 = ((($5)) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)<($58|0);
   if (!($59)) {
    continue L8;
   }
   $60 = ((($5)) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $i1;
   $63 = (($61) + (($62*12)|0)|0);
   $pair = $63;
   $64 = $pair;
   $65 = HEAP32[$64>>2]|0;
   $66 = $primaryPair;
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)!=($67|0);
   if ($68) {
    continue L8;
   }
   $69 = $pair;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $primaryPair;
   $73 = ((($72)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($71|0)!=($74|0);
   if ($75) {
    continue L8;
   }
   $76 = $i1;
   $77 = (($76) + 1)|0;
   $i1 = $77;
  }
 }
 STACKTOP = sp;return;
}
function __ZN9b2FixtureC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 __ZN8b2FilterC2Ev($2);
 $3 = ((($1)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 36|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 12|0);
 HEAP32[$8>>2] = 0;
 HEAPF32[$1>>2] = 0.0;
 $9 = ((($1)) + 20|0);
 HEAP32[$9>>2] = -1;
 $10 = ((($1)) + 16|0);
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this,$allocator,$body,$def) {
 $this = $this|0;
 $allocator = $allocator|0;
 $body = $body|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $7 = 0, $8 = 0, $9 = 0, $childCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $body;
 $3 = $def;
 $4 = $0;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 48|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($4)) + 24|0);
 HEAPF32[$12>>2] = $11;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($4)) + 28|0);
 HEAPF32[$16>>2] = $15;
 $17 = $2;
 $18 = ((($4)) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($4)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 40|0);
 $21 = $3;
 $22 = ((($21)) + 22|0);
 ;HEAP16[$20>>1]=HEAP16[$22>>1]|0;HEAP16[$20+2>>1]=HEAP16[$22+2>>1]|0;HEAP16[$20+4>>1]=HEAP16[$22+4>>1]|0;
 $23 = $3;
 $24 = ((($23)) + 20|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 $27 = ((($4)) + 46|0);
 $28 = $26&1;
 HEAP8[$27>>0] = $28;
 $29 = $3;
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $1;
 $35 = (FUNCTION_TABLE_iii[$33 & 1023]($30,$34)|0);
 $36 = ((($4)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($4)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_ii[$41 & 1023]($38)|0);
 $childCount = $42;
 $43 = $1;
 $44 = $childCount;
 $45 = ($44*36)|0;
 $46 = (__ZN16b2BlockAllocator8AllocateEi($43,$45)|0);
 $47 = ((($4)) + 32|0);
 HEAP32[$47>>2] = $46;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $childCount;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = ((($4)) + 32|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($51*36)|0)|0);
  $55 = ((($54)) + 16|0);
  HEAP32[$55>>2] = 0;
  $56 = $i;
  $57 = ((($4)) + 32|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + (($56*36)|0)|0);
  $60 = ((($59)) + 24|0);
  HEAP32[$60>>2] = -1;
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = ((($4)) + 36|0);
 HEAP32[$63>>2] = 0;
 $64 = $3;
 $65 = ((($64)) + 16|0);
 $66 = +HEAPF32[$65>>2];
 HEAPF32[$4>>2] = $66;
 STACKTOP = sp;return;
}
function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $childCount = 0, $s = 0, $s1 = 0, $s2 = 0, $s3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  ___assert_fail((20165|0),(20183|0),84,(23195|0));
  // unreachable;
 }
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $childCount = $11;
 $12 = $1;
 $13 = ((($2)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $childCount;
 $16 = ($15*36)|0;
 __ZN16b2BlockAllocator4FreeEPvi($12,$14,$16);
 $17 = ((($2)) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($2)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 switch ($21|0) {
 case 0:  {
  $22 = ((($2)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $s = $23;
  $24 = $s;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$26 & 1023]($24);
  $27 = $1;
  $28 = $s;
  __ZN16b2BlockAllocator4FreeEPvi($27,$28,20);
  $50 = ((($2)) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $29 = ((($2)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $s1 = $30;
  $31 = $s1;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 1023]($31);
  $34 = $1;
  $35 = $s1;
  __ZN16b2BlockAllocator4FreeEPvi($34,$35,48);
  $50 = ((($2)) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $36 = ((($2)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $s2 = $37;
  $38 = $s2;
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($38);
  $41 = $1;
  $42 = $s2;
  __ZN16b2BlockAllocator4FreeEPvi($41,$42,152);
  $50 = ((($2)) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $43 = ((($2)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $s3 = $44;
  $45 = $s3;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vi[$47 & 1023]($45);
  $48 = $1;
  $49 = $s3;
  __ZN16b2BlockAllocator4FreeEPvi($48,$49,40);
  $50 = ((($2)) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((29532|0),(20183|0),127,(23195|0));
  // unreachable;
 }
 }
}
function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this,$broadPhase,$xf) {
 $this = $this|0;
 $broadPhase = $broadPhase|0;
 $xf = $xf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $broadPhase;
 $2 = $xf;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  ___assert_fail((20165|0),(20183|0),136,(20261|0));
  // unreachable;
 }
 $7 = ((($3)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = ((($3)) + 36|0);
 HEAP32[$13>>2] = $12;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ((($3)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = ((($3)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $i;
  $21 = (($19) + (($20*36)|0)|0);
  $proxy = $21;
  $22 = ((($3)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $proxy;
  $28 = $2;
  $29 = $i;
  FUNCTION_TABLE_viiii[$26 & 511]($23,$27,$28,$29);
  $30 = $1;
  $31 = $proxy;
  $32 = $proxy;
  $33 = (__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($30,$31,$32)|0);
  $34 = $proxy;
  $35 = ((($34)) + 24|0);
  HEAP32[$35>>2] = $33;
  $36 = $proxy;
  $37 = ((($36)) + 16|0);
  HEAP32[$37>>2] = $3;
  $38 = $i;
  $39 = $proxy;
  $40 = ((($39)) + 20|0);
  HEAP32[$40>>2] = $38;
  $41 = $proxy;
  $42 = ((($41)) + 32|0);
  HEAP32[$42>>2] = -1;
  $43 = $proxy;
  $44 = ((($43)) + 28|0);
  HEAP32[$44>>2] = -1;
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 STACKTOP = sp;return;
}
function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this,$broadPhase,$transform1,$transform2) {
 $this = $this|0;
 $broadPhase = $broadPhase|0;
 $transform1 = $transform1|0;
 $transform2 = $transform2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabb1 = 0, $aabb2 = 0, $displacement = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aabb1 = sp + 24|0;
 $aabb2 = sp + 8|0;
 $displacement = sp;
 $0 = $this;
 $1 = $broadPhase;
 $2 = $transform1;
 $3 = $transform2;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ((($4)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = ((($4)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $i;
  $15 = (($13) + (($14*36)|0)|0);
  $proxy = $15;
  __ZN6b2AABBC2Ev($aabb1);
  __ZN6b2AABBC2Ev($aabb2);
  $16 = ((($4)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = $proxy;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_viiii[$20 & 511]($17,$aabb1,$21,$24);
  $25 = ((($4)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = $proxy;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_viiii[$29 & 511]($26,$aabb2,$30,$33);
  $34 = $proxy;
  __ZN6b2AABB7CombineERKS_S1_($34,$aabb1,$aabb2);
  $35 = $3;
  $36 = $2;
  __ZmiRK6b2Vec2S1_($displacement,$35,$36);
  $37 = $1;
  $38 = $proxy;
  $39 = ((($38)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $proxy;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($37,$40,$41,$displacement);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListenerP7b2WorldP10b2CLSolver($this,$bodyCapacity,$contactCapacity,$jointCapacity,$allocator,$listener,$pWorld,$pb2clSolver) {
 $this = $this|0;
 $bodyCapacity = $bodyCapacity|0;
 $contactCapacity = $contactCapacity|0;
 $jointCapacity = $jointCapacity|0;
 $allocator = $allocator|0;
 $listener = $listener|0;
 $pWorld = $pWorld|0;
 $pb2clSolver = $pb2clSolver|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bodyCapacity;
 $2 = $contactCapacity;
 $3 = $jointCapacity;
 $4 = $allocator;
 $5 = $listener;
 $6 = $pWorld;
 $7 = $pb2clSolver;
 $8 = $0;
 $9 = $1;
 $10 = ((($8)) + 40|0);
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = ((($8)) + 44|0);
 HEAP32[$12>>2] = $11;
 $13 = $3;
 $14 = ((($8)) + 48|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($8)) + 28|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($8)) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($8)) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = $4;
 HEAP32[$8>>2] = $18;
 $19 = $5;
 $20 = ((($8)) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = $6;
 $22 = ((($8)) + 52|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP8[11781]|0;
 $24 = $23&1;
 if ($24) {
  $25 = $7;
  $26 = ((($8)) + 56|0);
  HEAP32[$26>>2] = $25;
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = $1;
 $29 = $28<<2;
 $30 = (__ZN16b2StackAllocator8AllocateEi($27,$29)|0);
 $31 = ((($8)) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$8>>2]|0;
 $33 = $2;
 $34 = $33<<2;
 $35 = (__ZN16b2StackAllocator8AllocateEi($32,$34)|0);
 $36 = ((($8)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$8>>2]|0;
 $38 = $3;
 $39 = $38<<2;
 $40 = (__ZN16b2StackAllocator8AllocateEi($37,$39)|0);
 $41 = ((($8)) + 16|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$8>>2]|0;
 $43 = ((($8)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44*12)|0;
 $46 = (__ZN16b2StackAllocator8AllocateEi($42,$45)|0);
 $47 = ((($8)) + 24|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$8>>2]|0;
 $49 = ((($8)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50*12)|0;
 $52 = (__ZN16b2StackAllocator8AllocateEi($48,$51)|0);
 $53 = ((($8)) + 20|0);
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function __ZN8b2IslandD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($2,$4);
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($1)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($5,$7);
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($8,$10);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($11,$13);
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($14,$16);
 STACKTOP = sp;return;
}
function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this,$profile,$step,$gravity,$allowSleep) {
 $this = $this|0;
 $profile = $profile|0;
 $step = $step|0;
 $gravity = $gravity|0;
 $allowSleep = $allowSleep|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0;
 var $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0.0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0.0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $a = 0.0, $a7 = 0.0;
 var $b = 0, $b3 = 0, $body = 0, $c = 0, $c6 = 0, $constraintFinalizeTimer = 0, $constraintInitCPUTimer = 0, $constraintInitGPUTimer = 0, $constraintSolveTimer = 0, $constraintSolveTimer13 = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i11 = 0, $i12 = 0, $i14 = 0, $i16 = 0, $i17 = 0;
 var $i2 = 0, $i4 = 0, $i5 = 0, $j = 0, $jointOkay = 0, $jointsOkay = 0, $pContactSolver = 0, $positionSolved = 0, $positionSolved15 = 0, $ratio = 0.0, $ratio10 = 0.0, $rotation = 0.0, $solverData = 0, $solverTimer = 0, $testSolvePositionConstraintTimer = 0, $testSolveVelocityConstraintTimer = 0, $timer = 0, $translation = 0, $v = 0, $v8 = 0;
 var $w = 0.0, $w9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 320|0;
 $$byval_copy = sp + 312|0;
 $solverTimer = sp + 341|0;
 $constraintInitCPUTimer = sp + 340|0;
 $timer = sp + 339|0;
 $solverData = sp + 256|0;
 $contactSolverDef = sp + 208|0;
 $c = sp + 192|0;
 $v = sp + 176|0;
 $5 = sp + 160|0;
 $6 = sp + 152|0;
 $7 = sp + 144|0;
 $8 = sp + 136|0;
 $constraintSolveTimer = sp + 338|0;
 $c6 = sp + 96|0;
 $v8 = sp + 80|0;
 $translation = sp + 64|0;
 $11 = sp + 40|0;
 $constraintInitGPUTimer = sp + 333|0;
 $12 = sp + 24|0;
 $13 = sp + 16|0;
 $constraintSolveTimer13 = sp + 332|0;
 $testSolveVelocityConstraintTimer = sp + 331|0;
 $testSolvePositionConstraintTimer = sp + 329|0;
 $constraintFinalizeTimer = sp + 328|0;
 $0 = $this;
 $1 = $profile;
 $2 = $step;
 $3 = $gravity;
 $14 = $allowSleep&1;
 $4 = $14;
 $15 = $0;
 __ZN7b2TimerC2Ev($solverTimer);
 __ZN7b2TimerC2Ev($constraintInitCPUTimer);
 $pContactSolver = 0;
 __ZN7b2TimerC2Ev($timer);
 $16 = $2;
 $17 = +HEAPF32[$16>>2];
 $h = $17;
 $18 = HEAP8[11781]|0;
 $19 = $18&1;
 L1: do {
  if ($19) {
   $i2 = 0;
   while(1) {
    $174 = $i2;
    $175 = ((($15)) + 28|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($174|0)<($176|0);
    if (!($177)) {
     break L1;
    }
    $178 = $i2;
    $179 = ((($15)) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + ($178<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $b3 = $182;
    $183 = $b3;
    $184 = ((($183)) + 28|0);
    $185 = ((($184)) + 8|0);
    $186 = $b3;
    $187 = ((($186)) + 28|0);
    $188 = ((($187)) + 16|0);
    ;HEAP32[$185>>2]=HEAP32[$188>>2]|0;HEAP32[$185+4>>2]=HEAP32[$188+4>>2]|0;
    $189 = $b3;
    $190 = ((($189)) + 28|0);
    $191 = ((($190)) + 28|0);
    $192 = +HEAPF32[$191>>2];
    $193 = $b3;
    $194 = ((($193)) + 28|0);
    $195 = ((($194)) + 24|0);
    HEAPF32[$195>>2] = $192;
    $196 = $i2;
    $197 = (($196) + 1)|0;
    $i2 = $197;
   }
  } else {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = ((($15)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = $i;
    $25 = ((($15)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + ($24<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $b = $28;
    $29 = $b;
    $30 = ((($29)) + 28|0);
    $31 = ((($30)) + 16|0);
    ;HEAP32[$c>>2]=HEAP32[$31>>2]|0;HEAP32[$c+4>>2]=HEAP32[$31+4>>2]|0;
    $32 = $b;
    $33 = ((($32)) + 28|0);
    $34 = ((($33)) + 28|0);
    $35 = +HEAPF32[$34>>2];
    $a = $35;
    $36 = $b;
    $37 = ((($36)) + 64|0);
    ;HEAP32[$v>>2]=HEAP32[$37>>2]|0;HEAP32[$v+4>>2]=HEAP32[$37+4>>2]|0;
    $38 = $b;
    $39 = ((($38)) + 72|0);
    $40 = +HEAPF32[$39>>2];
    $w = $40;
    $41 = $b;
    $42 = ((($41)) + 28|0);
    $43 = ((($42)) + 8|0);
    $44 = $b;
    $45 = ((($44)) + 28|0);
    $46 = ((($45)) + 16|0);
    ;HEAP32[$43>>2]=HEAP32[$46>>2]|0;HEAP32[$43+4>>2]=HEAP32[$46+4>>2]|0;
    $47 = $b;
    $48 = ((($47)) + 28|0);
    $49 = ((($48)) + 28|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $b;
    $52 = ((($51)) + 28|0);
    $53 = ((($52)) + 24|0);
    HEAPF32[$53>>2] = $50;
    $54 = $b;
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(2);
    if ($56) {
     $57 = $h;
     $58 = $b;
     $59 = ((($58)) + 148|0);
     $60 = +HEAPF32[$59>>2];
     $61 = $3;
     __ZmlfRK6b2Vec2($7,$60,$61);
     $62 = $b;
     $63 = ((($62)) + 128|0);
     $64 = +HEAPF32[$63>>2];
     $65 = $b;
     $66 = ((($65)) + 76|0);
     __ZmlfRK6b2Vec2($8,$64,$66);
     __ZplRK6b2Vec2S1_($6,$7,$8);
     __ZmlfRK6b2Vec2($5,$57,$6);
     __ZN6b2Vec2pLERKS_($v,$5);
     $67 = $h;
     $68 = $b;
     $69 = ((($68)) + 136|0);
     $70 = +HEAPF32[$69>>2];
     $71 = $67 * $70;
     $72 = $b;
     $73 = ((($72)) + 84|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $71 * $74;
     $76 = $w;
     $77 = $76 + $75;
     $w = $77;
     $78 = $h;
     $79 = $b;
     $80 = ((($79)) + 140|0);
     $81 = +HEAPF32[$80>>2];
     $82 = $78 * $81;
     $83 = 1.0 - $82;
     $84 = (+__Z7b2ClampIfET_S0_S0_S0_($83,0.0,1.0));
     __ZN6b2Vec2mLEf($v,$84);
     $85 = $h;
     $86 = $b;
     $87 = ((($86)) + 144|0);
     $88 = +HEAPF32[$87>>2];
     $89 = $85 * $88;
     $90 = 1.0 - $89;
     $91 = (+__Z7b2ClampIfET_S0_S0_S0_($90,0.0,1.0));
     $92 = $w;
     $93 = $92 * $91;
     $w = $93;
    }
    $94 = $i;
    $95 = ((($15)) + 20|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + (($94*12)|0)|0);
    ;HEAP32[$97>>2]=HEAP32[$c>>2]|0;HEAP32[$97+4>>2]=HEAP32[$c+4>>2]|0;
    $98 = $a;
    $99 = $i;
    $100 = ((($15)) + 20|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + (($99*12)|0)|0);
    $103 = ((($102)) + 8|0);
    HEAPF32[$103>>2] = $98;
    $104 = $i;
    $105 = ((($15)) + 24|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + (($104*12)|0)|0);
    ;HEAP32[$107>>2]=HEAP32[$v>>2]|0;HEAP32[$107+4>>2]=HEAP32[$v+4>>2]|0;
    $108 = $w;
    $109 = $i;
    $110 = ((($15)) + 24|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + (($109*12)|0)|0);
    $113 = ((($112)) + 8|0);
    HEAPF32[$113>>2] = $108;
    $114 = $i;
    $115 = (($114) + 1)|0;
    $i = $115;
   }
   __ZN7b2Timer5ResetEv($timer);
   $116 = $2;
   ;HEAP32[$solverData>>2]=HEAP32[$116>>2]|0;HEAP32[$solverData+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$solverData+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$solverData+12>>2]=HEAP32[$116+12>>2]|0;HEAP32[$solverData+16>>2]=HEAP32[$116+16>>2]|0;HEAP32[$solverData+20>>2]=HEAP32[$116+20>>2]|0;
   $117 = ((($15)) + 20|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($solverData)) + 24|0);
   HEAP32[$119>>2] = $118;
   $120 = ((($15)) + 24|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($solverData)) + 28|0);
   HEAP32[$122>>2] = $121;
   $123 = $2;
   ;HEAP32[$contactSolverDef>>2]=HEAP32[$123>>2]|0;HEAP32[$contactSolverDef+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$contactSolverDef+8>>2]=HEAP32[$123+8>>2]|0;HEAP32[$contactSolverDef+12>>2]=HEAP32[$123+12>>2]|0;HEAP32[$contactSolverDef+16>>2]=HEAP32[$123+16>>2]|0;HEAP32[$contactSolverDef+20>>2]=HEAP32[$123+20>>2]|0;
   $124 = ((($15)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($contactSolverDef)) + 24|0);
   HEAP32[$126>>2] = $125;
   $127 = ((($15)) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ((($contactSolverDef)) + 28|0);
   HEAP32[$129>>2] = $128;
   $130 = ((($15)) + 20|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($contactSolverDef)) + 32|0);
   HEAP32[$132>>2] = $131;
   $133 = ((($15)) + 24|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($contactSolverDef)) + 36|0);
   HEAP32[$135>>2] = $134;
   $136 = HEAP32[$15>>2]|0;
   $137 = ((($contactSolverDef)) + 40|0);
   HEAP32[$137>>2] = $136;
   $138 = (__Znwj(52)|0);
   __THREW__ = 0;
   invoke_vii(447,($138|0),($contactSolverDef|0));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   if ($140) {
    $147 = ___cxa_find_matching_catch_2()|0;
    $148 = tempRet0;
    $9 = $147;
    $10 = $148;
    __ZdlPv($138);
    $634 = $9;
    $635 = $10;
    ___resumeException($634|0);
    // unreachable;
   }
   $pContactSolver = $138;
   $141 = $pContactSolver;
   __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($141);
   $142 = $2;
   $143 = ((($142)) + 20|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&1;
   if ($145) {
    $146 = $pContactSolver;
    __ZN15b2ContactSolver9WarmStartEv($146);
   }
   $i1 = 0;
   while(1) {
    $149 = $i1;
    $150 = ((($15)) + 32|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149|0)<($151|0);
    if (!($152)) {
     break;
    }
    $153 = $i1;
    $154 = ((($15)) + 16|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + ($153<<2)|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($158)) + 28|0);
    $160 = HEAP32[$159>>2]|0;
    FUNCTION_TABLE_vii[$160 & 1023]($157,$solverData);
    $161 = $i1;
    $162 = (($161) + 1)|0;
    $i1 = $162;
   }
   $163 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
   $164 = $1;
   $165 = ((($164)) + 12|0);
   HEAPF32[$165>>2] = $163;
   $166 = ((($15)) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (+($167|0));
   $169 = ((($15)) + 52|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($170)) + 103904|0);
   $172 = +HEAPF64[$171>>3];
   $173 = $172 + $168;
   HEAPF64[$171>>3] = $173;
  }
 } while(0);
 $198 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitCPUTimer));
 $199 = ((($15)) + 52|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ((($200)) + 103984|0);
 $202 = +HEAPF32[$201>>2];
 $203 = $202 + $198;
 HEAPF32[$201>>2] = $203;
 __ZN7b2TimerC2Ev($constraintSolveTimer);
 $204 = HEAP8[11781]|0;
 $205 = $204&1;
 L26: do {
  if (!($205)) {
   __ZN7b2Timer5ResetEv($timer);
   $i4 = 0;
   while(1) {
    $206 = $i4;
    $207 = $2;
    $208 = ((($207)) + 12|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ($206|0)<($209|0);
    if (!($210)) {
     break;
    }
    $j = 0;
    while(1) {
     $211 = $j;
     $212 = ((($15)) + 32|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($211|0)<($213|0);
     if (!($214)) {
      break;
     }
     $215 = $j;
     $216 = ((($15)) + 16|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (($217) + ($215<<2)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = HEAP32[$219>>2]|0;
     $221 = ((($220)) + 32|0);
     $222 = HEAP32[$221>>2]|0;
     FUNCTION_TABLE_vii[$222 & 1023]($219,$solverData);
     $223 = $j;
     $224 = (($223) + 1)|0;
     $j = $224;
    }
    $225 = $pContactSolver;
    __ZN15b2ContactSolver24SolveVelocityConstraintsEv($225);
    $226 = $i4;
    $227 = (($226) + 1)|0;
    $i4 = $227;
   }
   $228 = $pContactSolver;
   __ZN15b2ContactSolver13StoreImpulsesEv($228);
   $229 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
   $230 = $1;
   $231 = ((($230)) + 16|0);
   HEAPF32[$231>>2] = $229;
   $i5 = 0;
   while(1) {
    $232 = $i5;
    $233 = ((($15)) + 28|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ($232|0)<($234|0);
    if (!($235)) {
     break;
    }
    $236 = $i5;
    $237 = ((($15)) + 20|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (($238) + (($236*12)|0)|0);
    ;HEAP32[$c6>>2]=HEAP32[$239>>2]|0;HEAP32[$c6+4>>2]=HEAP32[$239+4>>2]|0;
    $240 = $i5;
    $241 = ((($15)) + 20|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = (($242) + (($240*12)|0)|0);
    $244 = ((($243)) + 8|0);
    $245 = +HEAPF32[$244>>2];
    $a7 = $245;
    $246 = $i5;
    $247 = ((($15)) + 24|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + (($246*12)|0)|0);
    ;HEAP32[$v8>>2]=HEAP32[$249>>2]|0;HEAP32[$v8+4>>2]=HEAP32[$249+4>>2]|0;
    $250 = $i5;
    $251 = ((($15)) + 24|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + (($250*12)|0)|0);
    $254 = ((($253)) + 8|0);
    $255 = +HEAPF32[$254>>2];
    $w9 = $255;
    $256 = $h;
    __ZmlfRK6b2Vec2($translation,$256,$v8);
    $257 = (+__Z5b2DotRK6b2Vec2S1_($translation,$translation));
    $258 = $257 > 4.0;
    if ($258) {
     $259 = (+__ZNK6b2Vec26LengthEv($translation));
     $260 = 2.0 / $259;
     $ratio = $260;
     $261 = $ratio;
     __ZN6b2Vec2mLEf($v8,$261);
    }
    $262 = $h;
    $263 = $w9;
    $264 = $262 * $263;
    $rotation = $264;
    $265 = $rotation;
    $266 = $rotation;
    $267 = $265 * $266;
    $268 = $267 > 2.4674012660980225;
    if ($268) {
     $269 = $rotation;
     $270 = (+__Z5b2AbsIfET_S0_($269));
     $271 = 1.5707963705062866 / $270;
     $ratio10 = $271;
     $272 = $ratio10;
     $273 = $w9;
     $274 = $273 * $272;
     $w9 = $274;
    }
    $275 = $h;
    __ZmlfRK6b2Vec2($11,$275,$v8);
    __ZN6b2Vec2pLERKS_($c6,$11);
    $276 = $h;
    $277 = $w9;
    $278 = $276 * $277;
    $279 = $a7;
    $280 = $279 + $278;
    $a7 = $280;
    $281 = $i5;
    $282 = ((($15)) + 20|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (($283) + (($281*12)|0)|0);
    ;HEAP32[$284>>2]=HEAP32[$c6>>2]|0;HEAP32[$284+4>>2]=HEAP32[$c6+4>>2]|0;
    $285 = $a7;
    $286 = $i5;
    $287 = ((($15)) + 20|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = (($288) + (($286*12)|0)|0);
    $290 = ((($289)) + 8|0);
    HEAPF32[$290>>2] = $285;
    $291 = $i5;
    $292 = ((($15)) + 24|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($293) + (($291*12)|0)|0);
    ;HEAP32[$294>>2]=HEAP32[$v8>>2]|0;HEAP32[$294+4>>2]=HEAP32[$v8+4>>2]|0;
    $295 = $w9;
    $296 = $i5;
    $297 = ((($15)) + 24|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = (($298) + (($296*12)|0)|0);
    $300 = ((($299)) + 8|0);
    HEAPF32[$300>>2] = $295;
    $301 = $i5;
    $302 = (($301) + 1)|0;
    $i5 = $302;
   }
   __ZN7b2Timer5ResetEv($timer);
   $positionSolved = 0;
   $i11 = 0;
   while(1) {
    $303 = $i11;
    $304 = $2;
    $305 = ((($304)) + 16|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($303|0)<($306|0);
    if (!($307)) {
     break L26;
    }
    $308 = $pContactSolver;
    $309 = (__ZN15b2ContactSolver24SolvePositionConstraintsEv($308)|0);
    $310 = $309&1;
    $contactsOkay = $310;
    $jointsOkay = 1;
    $i12 = 0;
    while(1) {
     $311 = $i12;
     $312 = ((($15)) + 32|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ($311|0)<($313|0);
     if (!($314)) {
      break;
     }
     $315 = $i12;
     $316 = ((($15)) + 16|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (($317) + ($315<<2)|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = HEAP32[$319>>2]|0;
     $321 = ((($320)) + 36|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = (FUNCTION_TABLE_iii[$322 & 1023]($319,$solverData)|0);
     $324 = $323&1;
     $jointOkay = $324;
     $325 = $jointsOkay;
     $326 = $325&1;
     $327 = $jointOkay;
     $328 = $327&1;
     $329 = $326 ? $328 : 0;
     $330 = $329&1;
     $jointsOkay = $330;
     $331 = $i12;
     $332 = (($331) + 1)|0;
     $i12 = $332;
    }
    $333 = $contactsOkay;
    $334 = $333&1;
    if ($334) {
     $335 = $jointsOkay;
     $336 = $335&1;
     if ($336) {
      break;
     }
    }
    $337 = $i11;
    $338 = (($337) + 1)|0;
    $i11 = $338;
   }
   $positionSolved = 1;
  }
 } while(0);
 $339 = HEAP8[11781]|0;
 $340 = $339&1;
 if ($340) {
  $341 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitCPUTimer));
  $342 = ((($15)) + 52|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = ((($343)) + 103984|0);
  $345 = +HEAPF32[$344>>2];
  $346 = $345 + $341;
  HEAPF32[$344>>2] = $346;
  $347 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($347);
  __ZN7b2TimerC2Ev($constraintInitGPUTimer);
  $348 = ((($15)) + 56|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ((($15)) + 28|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ((($15)) + 36|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = ((($15)) + 52|0);
  $355 = HEAP32[$354>>2]|0;
  __ZNK7b2World10GetGravityEv($12,$355);
  $356 = $2;
  $357 = +HEAPF32[$356>>2];
  $358 = $2;
  $359 = ((($358)) + 8|0);
  $360 = +HEAPF32[$359>>2];
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;
  __ZN10b2CLSolver9SetValuesEii6b2Vec2ff($349,$351,$353,$$byval_copy,$357,$360);
  $361 = ((($15)) + 36|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ($362|0)>(0);
  if ($363) {
   $364 = ((($15)) + 56|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = ((($15)) + 36|0);
   __ZN10b2CLSolver25b2CLReadCompactedContactsERi($365,$366);
  }
  $367 = ((($15)) + 56|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = ((($15)) + 8|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = ((($15)) + 12|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = ((($15)) + 24|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = ((($15)) + 20|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = ((($15)) + 28|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = ((($15)) + 36|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $3;
  ;HEAP32[$13>>2]=HEAP32[$381>>2]|0;HEAP32[$13+4>>2]=HEAP32[$381+4>>2]|0;
  $382 = $2;
  $383 = +HEAPF32[$382>>2];
  $384 = ((($15)) + 52|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = (__ZNK7b2World17GetContactManagerEv($385)|0);
  $387 = ((($15)) + 12|0);
  $388 = HEAP32[$387>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;
  __ZN10b2CLSolver20b2CLInitializeSolverEPP6b2BodyPP9b2ContactP10b2VelocityP10b2Positionii6b2Vec2fRK16b2ContactManagerS5_P27b2ContactVelocityConstraintP27b2ContactPositionConstraint($368,$370,$372,$374,$376,$378,$380,$$byval_copy1,$383,$386,$388,0,0);
  $389 = ((($15)) + 56|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = ((($390)) + 12|0);
  $392 = +HEAPF32[$391>>2];
  $393 = ((($15)) + 52|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = ((($394)) + 103936|0);
  $396 = +HEAPF32[$395>>2];
  $397 = $396 + $392;
  HEAPF32[$395>>2] = $397;
  $398 = ((($15)) + 56|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = ((($399)) + 12|0);
  HEAPF32[$400>>2] = 0.0;
  $401 = ((($15)) + 52|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = ((($402)) + 103888|0);
  $404 = HEAP8[$403>>0]|0;
  $405 = $404&1;
  if ($405) {
   label = 46;
  } else {
   $406 = ((($15)) + 52|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = ((($407)) + 103095|0);
   $409 = HEAP8[$408>>0]|0;
   $410 = $409&1;
   if ($410) {
    label = 46;
   } else {
    $413 = ((($15)) + 56|0);
    $414 = HEAP32[$413>>2]|0;
    __ZN10b2CLSolver23b2CLInitializeBodyStateEv($414);
   }
  }
  if ((label|0) == 46) {
   $411 = ((($15)) + 56|0);
   $412 = HEAP32[$411>>2]|0;
   __ZN10b2CLSolver33b2CLInitializeBodyStateFirstFrameEv($412);
  }
  $415 = ((($15)) + 56|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = $2;
  $418 = ((($417)) + 20|0);
  $419 = HEAP8[$418>>0]|0;
  $420 = $419&1;
  $421 = $2;
  $422 = +HEAPF32[$421>>2];
  __ZN10b2CLSolver37b2CLInitializeJointVelocityConstraintEbf($416,$420,$422);
  $423 = ((($15)) + 56|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = $2;
  $426 = ((($425)) + 20|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&1;
  $429 = $2;
  $430 = ((($429)) + 8|0);
  $431 = +HEAPF32[$430>>2];
  __ZN10b2CLSolver32b2CLInitializeVelocityConstraintEbf($424,$428,$431);
  $432 = ((($15)) + 52|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = ((($433)) + 103888|0);
  $435 = HEAP8[$434>>0]|0;
  $436 = $435&1;
  $437 = ((($15)) + 56|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = $2;
  $440 = ((($439)) + 20|0);
  $441 = HEAP8[$440>>0]|0;
  $442 = $441&1;
  $443 = $2;
  $444 = ((($443)) + 8|0);
  $445 = +HEAPF32[$444>>2];
  if ($436) {
   __ZN10b2CLSolver30b2CLReadLastImpulsesFirstFrameEbf($438,$442,$445);
  } else {
   __ZN10b2CLSolver20b2CLReadLastImpulsesEbf($438,$442,$445);
  }
  $446 = $2;
  $447 = ((($446)) + 20|0);
  $448 = HEAP8[$447>>0]|0;
  $449 = $448&1;
  if ($449) {
   $450 = ((($15)) + 56|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = (__ZN10b2CLSolver19GetLastContactCountEv($451)|0);
   $453 = ($452|0)>(0);
   if ($453) {
    $454 = ((($15)) + 56|0);
    $455 = HEAP32[$454>>2]|0;
    __ZN10b2CLSolver25b2CLWarmStartWithColoringEv($455);
   }
  }
  $456 = ((($15)) + 36|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = (+($457|0));
  $459 = ((($15)) + 52|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = ((($460)) + 103904|0);
  $462 = +HEAPF64[$461>>3];
  $463 = $462 + $458;
  HEAPF64[$461>>3] = $463;
  $464 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($464);
  $465 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitGPUTimer));
  $466 = ((($15)) + 52|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = ((($467)) + 103988|0);
  $469 = +HEAPF32[$468>>2];
  $470 = $469 + $465;
  HEAPF32[$468>>2] = $470;
  __ZN7b2TimerC2Ev($constraintSolveTimer13);
  __ZN7b2TimerC2Ev($testSolveVelocityConstraintTimer);
  $i14 = 0;
  while(1) {
   $471 = $i14;
   $472 = $2;
   $473 = ((($472)) + 12|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = ($471|0)<($474|0);
   if (!($475)) {
    break;
   }
   $476 = ((($15)) + 56|0);
   $477 = HEAP32[$476>>2]|0;
   __ZN10b2CLSolver32b2CLSolveJointVelocityConstraintEi($477,1);
   $478 = ((($15)) + 56|0);
   $479 = HEAP32[$478>>2]|0;
   __ZN10b2CLSolver27b2CLSolveVelocityConstraintEi($479,1);
   $480 = $i14;
   $481 = (($480) + 1)|0;
   $i14 = $481;
  }
  $482 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($482);
  $483 = (+__ZNK7b2Timer15GetMillisecondsEv($testSolveVelocityConstraintTimer));
  $484 = ((($15)) + 52|0);
  $485 = HEAP32[$484>>2]|0;
  $486 = ((($485)) + 104004|0);
  $487 = +HEAPF32[$486>>2];
  $488 = $487 + $483;
  HEAPF32[$486>>2] = $488;
  $489 = $2;
  $490 = ((($489)) + 20|0);
  $491 = HEAP8[$490>>0]|0;
  $492 = $491&1;
  if ($492) {
   $493 = ((($15)) + 56|0);
   $494 = HEAP32[$493>>2]|0;
   __ZN10b2CLSolver17b2CLStoreImpulsesEv($494);
   $495 = ((($15)) + 56|0);
   $496 = HEAP32[$495>>2]|0;
   __ZN10b2CLSolver16SortManifoldKeysEv($496);
  }
  $497 = ((($15)) + 56|0);
  $498 = HEAP32[$497>>2]|0;
  __ZN10b2CLSolver22b2CLIntegratePositionsEv($498);
  $positionSolved15 = 0;
  $499 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($499);
  __ZN7b2TimerC2Ev($testSolvePositionConstraintTimer);
  $i16 = 0;
  while(1) {
   $500 = $i16;
   $501 = $2;
   $502 = ((($501)) + 16|0);
   $503 = HEAP32[$502>>2]|0;
   $504 = ($500|0)<($503|0);
   if (!($504)) {
    break;
   }
   $505 = ((($15)) + 56|0);
   $506 = HEAP32[$505>>2]|0;
   __ZN10b2CLSolver27b2CLSolvePositionConstraintEi($506,1);
   $507 = ((($15)) + 56|0);
   $508 = HEAP32[$507>>2]|0;
   __ZN10b2CLSolver32b2CLSolveJointPositionConstraintEi($508,1);
   $509 = $i16;
   $510 = (($509) + 1)|0;
   $i16 = $510;
  }
  $511 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($511);
  $512 = (+__ZNK7b2Timer15GetMillisecondsEv($testSolvePositionConstraintTimer));
  $513 = ((($15)) + 52|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = ((($514)) + 104008|0);
  $516 = +HEAPF32[$515>>2];
  $517 = $516 + $512;
  HEAPF32[$515>>2] = $517;
  $518 = ((($15)) + 56|0);
  $519 = HEAP32[$518>>2]|0;
  __ZN10b2CLSolver17b2CLSynchronizeXfEv($519);
  $520 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($520);
  $521 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintSolveTimer13));
  $522 = ((($15)) + 52|0);
  $523 = HEAP32[$522>>2]|0;
  $524 = ((($523)) + 103992|0);
  $525 = +HEAPF32[$524>>2];
  $526 = $525 + $521;
  HEAPF32[$524>>2] = $526;
  __ZN7b2TimerC2Ev($constraintFinalizeTimer);
  $527 = ((($15)) + 56|0);
  $528 = HEAP32[$527>>2]|0;
  __ZN10b2CLSolver27CopyResultsFromGPUForBodiesEv($528);
  $529 = ((($15)) + 52|0);
  $530 = HEAP32[$529>>2]|0;
  $531 = ((($530)) + 103888|0);
  $532 = HEAP8[$531>>0]|0;
  $533 = $532&1;
  do {
   if ($533) {
    $534 = ((($15)) + 36|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = ($535|0)>(0);
    if (!($536)) {
     $537 = ((($15)) + 36|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = ($538|0)==(0);
     if (!($539)) {
      break;
     }
     $540 = (__ZN14b2CLCommonData8instanceEv()|0);
     $541 = (__ZNK14b2CLCommonData12GetNumJointsEv($540)|0);
     $542 = ($541|0)!=(0);
     if (!($542)) {
      break;
     }
    }
    $543 = ((($15)) + 52|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = ((($544)) + 103888|0);
    HEAP8[$545>>0] = 0;
   }
  } while(0);
  $546 = ((($15)) + 52|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = ((($547)) + 103095|0);
  $549 = HEAP8[$548>>0]|0;
  $550 = $549&1;
  if ($550) {
   $551 = ((($15)) + 52|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = ((($552)) + 103095|0);
   HEAP8[$553>>0] = 0;
  }
  $554 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($554);
  $555 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintFinalizeTimer));
  $556 = ((($15)) + 52|0);
  $557 = HEAP32[$556>>2]|0;
  $558 = ((($557)) + 103996|0);
  $559 = +HEAPF32[$558>>2];
  $560 = $559 + $555;
  HEAPF32[$558>>2] = $560;
  $561 = (+__ZNK7b2Timer15GetMillisecondsEv($solverTimer));
  $562 = ((($15)) + 52|0);
  $563 = HEAP32[$562>>2]|0;
  $564 = ((($563)) + 103980|0);
  $565 = +HEAPF32[$564>>2];
  $566 = $565 + $561;
  HEAPF32[$564>>2] = $566;
 }
 $i17 = 0;
 while(1) {
  $567 = $i17;
  $568 = ((($15)) + 28|0);
  $569 = HEAP32[$568>>2]|0;
  $570 = ($567|0)<($569|0);
  if (!($570)) {
   break;
  }
  $571 = $i17;
  $572 = ((($15)) + 8|0);
  $573 = HEAP32[$572>>2]|0;
  $574 = (($573) + ($571<<2)|0);
  $575 = HEAP32[$574>>2]|0;
  $body = $575;
  $576 = $body;
  $577 = ((($576)) + 28|0);
  $578 = ((($577)) + 16|0);
  $579 = $i17;
  $580 = ((($15)) + 20|0);
  $581 = HEAP32[$580>>2]|0;
  $582 = (($581) + (($579*12)|0)|0);
  ;HEAP32[$578>>2]=HEAP32[$582>>2]|0;HEAP32[$578+4>>2]=HEAP32[$582+4>>2]|0;
  $583 = $i17;
  $584 = ((($15)) + 20|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = (($585) + (($583*12)|0)|0);
  $587 = ((($586)) + 8|0);
  $588 = +HEAPF32[$587>>2];
  $589 = $body;
  $590 = ((($589)) + 28|0);
  $591 = ((($590)) + 28|0);
  HEAPF32[$591>>2] = $588;
  $592 = $body;
  $593 = ((($592)) + 64|0);
  $594 = $i17;
  $595 = ((($15)) + 24|0);
  $596 = HEAP32[$595>>2]|0;
  $597 = (($596) + (($594*12)|0)|0);
  ;HEAP32[$593>>2]=HEAP32[$597>>2]|0;HEAP32[$593+4>>2]=HEAP32[$597+4>>2]|0;
  $598 = $i17;
  $599 = ((($15)) + 24|0);
  $600 = HEAP32[$599>>2]|0;
  $601 = (($600) + (($598*12)|0)|0);
  $602 = ((($601)) + 8|0);
  $603 = +HEAPF32[$602>>2];
  $604 = $body;
  $605 = ((($604)) + 72|0);
  HEAPF32[$605>>2] = $603;
  $606 = $body;
  __ZN6b2Body20SynchronizeTransformEv($606);
  $607 = $i17;
  $608 = (($607) + 1)|0;
  $i17 = $608;
 }
 $609 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
 $610 = $1;
 $611 = ((($610)) + 20|0);
 HEAPF32[$611>>2] = $609;
 $612 = HEAP8[11781]|0;
 $613 = $612&1;
 if ($613) {
  $617 = ((($15)) + 52|0);
  $618 = HEAP32[$617>>2]|0;
  $619 = ((($618)) + 103096|0);
  $620 = HEAP32[$619>>2]|0;
  $621 = $620 & 8;
  $622 = ($621|0)!=(0);
  if ($622) {
   $623 = ((($15)) + 56|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = ((($15)) + 52|0);
   $626 = HEAP32[$625>>2]|0;
   $627 = ((($626)) + 102876|0);
   __ZN10b2CLSolver6ReportEP16b2ContactManager($624,$627);
  }
 } else {
  $614 = $pContactSolver;
  $615 = ((($614)) + 40|0);
  $616 = HEAP32[$615>>2]|0;
  __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($15,$616);
 }
 $628 = $pContactSolver;
 $629 = ($628|0)==(0|0);
 if ($629) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(448,($628|0));
 $630 = __THREW__; __THREW__ = 0;
 $631 = $630&1;
 if ($631) {
  $632 = ___cxa_find_matching_catch_2()|0;
  $633 = tempRet0;
  $9 = $632;
  $10 = $633;
  __ZdlPv($628);
  $634 = $9;
  $635 = $10;
  ___resumeException($634|0);
  // unreachable;
 } else {
  __ZdlPv($628);
  STACKTOP = sp;return;
 }
}
function __Z7b2ClampIfET_S0_S0_S0_($a,$low,$high) {
 $a = +$a;
 $low = +$low;
 $high = +$high;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $low;
 $2 = $high;
 $3 = $1;
 $4 = $0;
 $5 = $2;
 $6 = (+__Z5b2MinIfET_S0_S0_($4,$5));
 $7 = (+__Z5b2MaxIfET_S0_S0_($3,$6));
 STACKTOP = sp;return (+$7);
}
function __ZNK7b2World10GetGravityEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 103104|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$2>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK7b2World17GetContactManagerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 102876|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10b2CLSolver19GetLastContactCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 524|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK14b2CLCommonData12GetNumJointsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 144|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body20SynchronizeTransformEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = ((($4)) + 8|0);
 $6 = ((($3)) + 28|0);
 $7 = ((($6)) + 28|0);
 $8 = +HEAPF32[$7>>2];
 __ZN5b2Rot3SetEf($5,$8);
 $9 = ((($3)) + 12|0);
 $10 = ((($3)) + 28|0);
 $11 = ((($10)) + 16|0);
 $12 = ((($3)) + 12|0);
 $13 = ((($12)) + 8|0);
 $14 = ((($3)) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($2,$13,$14);
 __ZmiRK6b2Vec2S1_($1,$11,$2);
 ;HEAP32[$9>>2]=HEAP32[$1>>2]|0;HEAP32[$9+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this,$constraints) {
 $this = $this|0;
 $constraints = $constraints|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $impulse = 0, $j = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $impulse = sp + 4|0;
 $0 = $this;
 $1 = $constraints;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ((($2)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = ((($2)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $c = $14;
  $15 = $1;
  $16 = $i;
  $17 = (($15) + (($16*152)|0)|0);
  $vc = $17;
  $18 = $vc;
  $19 = ((($18)) + 144|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($impulse)) + 16|0);
  HEAP32[$21>>2] = $20;
  $j = 0;
  while(1) {
   $22 = $j;
   $23 = $vc;
   $24 = ((($23)) + 144|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $j;
   $28 = $vc;
   $29 = (($28) + (($27*36)|0)|0);
   $30 = ((($29)) + 16|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $j;
   $33 = (($impulse) + ($32<<2)|0);
   HEAPF32[$33>>2] = $31;
   $34 = $j;
   $35 = $vc;
   $36 = (($35) + (($34*36)|0)|0);
   $37 = ((($36)) + 20|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $j;
   $40 = ((($impulse)) + 8|0);
   $41 = (($40) + ($39<<2)|0);
   HEAPF32[$41>>2] = $38;
   $42 = $j;
   $43 = (($42) + 1)|0;
   $j = $43;
  }
  $44 = ((($2)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $c;
  FUNCTION_TABLE_viii[$48 & 1023]($45,$49,$impulse);
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 STACKTOP = sp;return;
}
function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this,$subStep,$toiIndexA,$toiIndexB) {
 $this = $this|0;
 $subStep = $subStep|0;
 $toiIndexA = $toiIndexA|0;
 $toiIndexB = $toiIndexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0.0, $b = 0, $body = 0, $c = 0, $contactSolver = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $ratio = 0.0, $ratio4 = 0.0, $rotation = 0.0;
 var $translation = 0, $v = 0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $contactSolverDef = sp + 148|0;
 $contactSolver = sp + 96|0;
 $c = sp + 64|0;
 $v = sp + 48|0;
 $translation = sp + 32|0;
 $6 = sp + 8|0;
 $0 = $this;
 $1 = $subStep;
 $2 = $toiIndexA;
 $3 = $toiIndexB;
 $7 = $0;
 $8 = $2;
 $9 = ((($7)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)<($10|0);
 if (!($11)) {
  ___assert_fail((20275|0),(20299|0),719,(20732|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($7)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)<($14|0);
 if (!($15)) {
  ___assert_fail((20376|0),(20299|0),720,(20732|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ((($7)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = ((($7)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $b = $24;
  $25 = $i;
  $26 = ((($7)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($25*12)|0)|0);
  $29 = $b;
  $30 = ((($29)) + 28|0);
  $31 = ((($30)) + 16|0);
  ;HEAP32[$28>>2]=HEAP32[$31>>2]|0;HEAP32[$28+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $b;
  $33 = ((($32)) + 28|0);
  $34 = ((($33)) + 28|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $i;
  $37 = ((($7)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + (($36*12)|0)|0);
  $40 = ((($39)) + 8|0);
  HEAPF32[$40>>2] = $35;
  $41 = $i;
  $42 = ((($7)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + (($41*12)|0)|0);
  $45 = $b;
  $46 = ((($45)) + 64|0);
  ;HEAP32[$44>>2]=HEAP32[$46>>2]|0;HEAP32[$44+4>>2]=HEAP32[$46+4>>2]|0;
  $47 = $b;
  $48 = ((($47)) + 72|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $i;
  $51 = ((($7)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($50*12)|0)|0);
  $54 = ((($53)) + 8|0);
  HEAPF32[$54>>2] = $49;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = ((($7)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($contactSolverDef)) + 24|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($7)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($contactSolverDef)) + 28|0);
 HEAP32[$62>>2] = $61;
 $63 = HEAP32[$7>>2]|0;
 $64 = ((($contactSolverDef)) + 40|0);
 HEAP32[$64>>2] = $63;
 $65 = $1;
 ;HEAP32[$contactSolverDef>>2]=HEAP32[$65>>2]|0;HEAP32[$contactSolverDef+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$contactSolverDef+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$contactSolverDef+12>>2]=HEAP32[$65+12>>2]|0;HEAP32[$contactSolverDef+16>>2]=HEAP32[$65+16>>2]|0;HEAP32[$contactSolverDef+20>>2]=HEAP32[$65+20>>2]|0;
 $66 = ((($7)) + 20|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($contactSolverDef)) + 32|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($7)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($contactSolverDef)) + 36|0);
 HEAP32[$71>>2] = $70;
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver,$contactSolverDef);
 $i1 = 0;
 while(1) {
  $72 = $i1;
  $73 = $1;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($72|0)<($75|0);
  if (!($76)) {
   label = 14;
   break;
  }
  $77 = $2;
  $78 = $3;
  __THREW__ = 0;
  $79 = (invoke_iiii(449,($contactSolver|0),($77|0),($78|0))|0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   break;
  }
  $82 = $79&1;
  $contactsOkay = $82;
  $83 = $contactsOkay;
  $84 = $83&1;
  if ($84) {
   label = 14;
   break;
  }
  $89 = $i1;
  $90 = (($89) + 1)|0;
  $i1 = $90;
 }
 L16: do {
  if ((label|0) == 14) {
   $91 = $2;
   $92 = ((($7)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($91<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 28|0);
   $97 = ((($96)) + 8|0);
   $98 = $2;
   $99 = ((($7)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + (($98*12)|0)|0);
   ;HEAP32[$97>>2]=HEAP32[$101>>2]|0;HEAP32[$97+4>>2]=HEAP32[$101+4>>2]|0;
   $102 = $2;
   $103 = ((($7)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + (($102*12)|0)|0);
   $106 = ((($105)) + 8|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $2;
   $109 = ((($7)) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($108<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ((($112)) + 28|0);
   $114 = ((($113)) + 24|0);
   HEAPF32[$114>>2] = $107;
   $115 = $3;
   $116 = ((($7)) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($115<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 28|0);
   $121 = ((($120)) + 8|0);
   $122 = $3;
   $123 = ((($7)) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + (($122*12)|0)|0);
   ;HEAP32[$121>>2]=HEAP32[$125>>2]|0;HEAP32[$121+4>>2]=HEAP32[$125+4>>2]|0;
   $126 = $3;
   $127 = ((($7)) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + (($126*12)|0)|0);
   $130 = ((($129)) + 8|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $3;
   $133 = ((($7)) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($132<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ((($136)) + 28|0);
   $138 = ((($137)) + 24|0);
   HEAPF32[$138>>2] = $131;
   __THREW__ = 0;
   invoke_vi(450,($contactSolver|0));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   if (!($140)) {
    $i2 = 0;
    while(1) {
     $141 = $i2;
     $142 = $1;
     $143 = ((($142)) + 12|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($141|0)<($144|0);
     if (!($145)) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(451,($contactSolver|0));
     $146 = __THREW__; __THREW__ = 0;
     $147 = $146&1;
     if ($147) {
      break L16;
     }
     $148 = $i2;
     $149 = (($148) + 1)|0;
     $i2 = $149;
    }
    $150 = $1;
    $151 = +HEAPF32[$150>>2];
    $h = $151;
    $i3 = 0;
    while(1) {
     $152 = $i3;
     $153 = ((($7)) + 28|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)<($154|0);
     if (!($155)) {
      break;
     }
     $156 = $i3;
     $157 = ((($7)) + 20|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + (($156*12)|0)|0);
     ;HEAP32[$c>>2]=HEAP32[$159>>2]|0;HEAP32[$c+4>>2]=HEAP32[$159+4>>2]|0;
     $160 = $i3;
     $161 = ((($7)) + 20|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + (($160*12)|0)|0);
     $164 = ((($163)) + 8|0);
     $165 = +HEAPF32[$164>>2];
     $a = $165;
     $166 = $i3;
     $167 = ((($7)) + 24|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + (($166*12)|0)|0);
     ;HEAP32[$v>>2]=HEAP32[$169>>2]|0;HEAP32[$v+4>>2]=HEAP32[$169+4>>2]|0;
     $170 = $i3;
     $171 = ((($7)) + 24|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + (($170*12)|0)|0);
     $174 = ((($173)) + 8|0);
     $175 = +HEAPF32[$174>>2];
     $w = $175;
     $176 = $h;
     __THREW__ = 0;
     invoke_vidi(452,($translation|0),(+$176),($v|0));
     $177 = __THREW__; __THREW__ = 0;
     $178 = $177&1;
     if ($178) {
      break L16;
     }
     __THREW__ = 0;
     $179 = (+invoke_dii(453,($translation|0),($translation|0)));
     $180 = __THREW__; __THREW__ = 0;
     $181 = $180&1;
     if ($181) {
      break L16;
     }
     $182 = $179 > 4.0;
     if ($182) {
      __THREW__ = 0;
      $183 = (+invoke_di(454,($translation|0)));
      $184 = __THREW__; __THREW__ = 0;
      $185 = $184&1;
      if ($185) {
       break L16;
      }
      $186 = 2.0 / $183;
      $ratio = $186;
      $187 = $ratio;
      __THREW__ = 0;
      invoke_vid(455,($v|0),(+$187));
      $188 = __THREW__; __THREW__ = 0;
      $189 = $188&1;
      if ($189) {
       break L16;
      }
     }
     $190 = $h;
     $191 = $w;
     $192 = $190 * $191;
     $rotation = $192;
     $193 = $rotation;
     $194 = $rotation;
     $195 = $193 * $194;
     $196 = $195 > 2.4674012660980225;
     if ($196) {
      $197 = $rotation;
      __THREW__ = 0;
      $198 = (+invoke_dd(456,(+$197)));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break L16;
      }
      $201 = 1.5707963705062866 / $198;
      $ratio4 = $201;
      $202 = $ratio4;
      $203 = $w;
      $204 = $203 * $202;
      $w = $204;
     }
     $205 = $h;
     __THREW__ = 0;
     invoke_vidi(452,($6|0),(+$205),($v|0));
     $206 = __THREW__; __THREW__ = 0;
     $207 = $206&1;
     if ($207) {
      break L16;
     }
     __THREW__ = 0;
     invoke_vii(457,($c|0),($6|0));
     $208 = __THREW__; __THREW__ = 0;
     $209 = $208&1;
     if ($209) {
      break L16;
     }
     $210 = $h;
     $211 = $w;
     $212 = $210 * $211;
     $213 = $a;
     $214 = $213 + $212;
     $a = $214;
     $215 = $i3;
     $216 = ((($7)) + 20|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (($217) + (($215*12)|0)|0);
     ;HEAP32[$218>>2]=HEAP32[$c>>2]|0;HEAP32[$218+4>>2]=HEAP32[$c+4>>2]|0;
     $219 = $a;
     $220 = $i3;
     $221 = ((($7)) + 20|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = (($222) + (($220*12)|0)|0);
     $224 = ((($223)) + 8|0);
     HEAPF32[$224>>2] = $219;
     $225 = $i3;
     $226 = ((($7)) + 24|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (($227) + (($225*12)|0)|0);
     ;HEAP32[$228>>2]=HEAP32[$v>>2]|0;HEAP32[$228+4>>2]=HEAP32[$v+4>>2]|0;
     $229 = $w;
     $230 = $i3;
     $231 = ((($7)) + 24|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + (($230*12)|0)|0);
     $234 = ((($233)) + 8|0);
     HEAPF32[$234>>2] = $229;
     $235 = $i3;
     $236 = ((($7)) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + ($235<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $body = $239;
     $240 = $body;
     $241 = ((($240)) + 28|0);
     $242 = ((($241)) + 16|0);
     ;HEAP32[$242>>2]=HEAP32[$c>>2]|0;HEAP32[$242+4>>2]=HEAP32[$c+4>>2]|0;
     $243 = $a;
     $244 = $body;
     $245 = ((($244)) + 28|0);
     $246 = ((($245)) + 28|0);
     HEAPF32[$246>>2] = $243;
     $247 = $body;
     $248 = ((($247)) + 64|0);
     ;HEAP32[$248>>2]=HEAP32[$v>>2]|0;HEAP32[$248+4>>2]=HEAP32[$v+4>>2]|0;
     $249 = $w;
     $250 = $body;
     $251 = ((($250)) + 72|0);
     HEAPF32[$251>>2] = $249;
     $252 = $body;
     __THREW__ = 0;
     invoke_vi(458,($252|0));
     $253 = __THREW__; __THREW__ = 0;
     $254 = $253&1;
     if ($254) {
      break L16;
     }
     $255 = $i3;
     $256 = (($255) + 1)|0;
     $i3 = $256;
    }
    $257 = ((($contactSolver)) + 40|0);
    $258 = HEAP32[$257>>2]|0;
    __THREW__ = 0;
    invoke_vii(459,($7|0),($258|0));
    $259 = __THREW__; __THREW__ = 0;
    $260 = $259&1;
    if (!($260)) {
     __ZN15b2ContactSolverD2Ev($contactSolver);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $85 = ___cxa_find_matching_catch_2()|0;
 $86 = tempRet0;
 $4 = $85;
 $5 = $86;
 __THREW__ = 0;
 invoke_vi(448,($contactSolver|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $263 = ___cxa_find_matching_catch_3(0|0)|0;
  $264 = tempRet0;
  ___clang_call_terminate($263);
  // unreachable;
 } else {
  $261 = $4;
  $262 = $5;
  ___resumeException($261|0);
  // unreachable;
 }
}
function __ZN7b2WorldC2ERK6b2Vec2($this,$gravity) {
 $this = $this|0;
 $gravity = $gravity|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $gravity;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZN16b2BlockAllocatorC2Ev($5);
 $6 = ((($4)) + 72|0);
 __THREW__ = 0;
 invoke_vi(460,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  $2 = $57;
  $3 = $58;
 } else {
  $9 = ((($4)) + 102876|0);
  __THREW__ = 0;
  invoke_vi(461,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $59 = ___cxa_find_matching_catch_2()|0;
   $60 = tempRet0;
   $2 = $59;
   $3 = $60;
  } else {
   $12 = ((($4)) + 103104|0);
   __THREW__ = 0;
   invoke_vi(380,($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 12;
   } else {
    $15 = ((($4)) + 103164|0);
    __THREW__ = 0;
    invoke_vi(462,($15|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 12;
    } else {
     $18 = ((($4)) + 103804|0);
     __THREW__ = 0;
     invoke_vi(463,($18|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      $2 = $63;
      $3 = $64;
     } else {
      $21 = ((($4)) + 103116|0);
      HEAP32[$21>>2] = 0;
      $22 = ((($4)) + 103120|0);
      HEAP32[$22>>2] = 0;
      $23 = ((($4)) + 103068|0);
      HEAP32[$23>>2] = 0;
      $24 = ((($4)) + 103072|0);
      HEAP32[$24>>2] = 0;
      $25 = ((($4)) + 103076|0);
      HEAP32[$25>>2] = 0;
      $26 = ((($4)) + 103088|0);
      HEAP32[$26>>2] = 0;
      $27 = ((($4)) + 103080|0);
      HEAP32[$27>>2] = 0;
      $28 = ((($4)) + 103084|0);
      HEAP32[$28>>2] = 0;
      $29 = ((($4)) + 103092|0);
      HEAP8[$29>>0] = 0;
      $30 = ((($4)) + 103093|0);
      HEAP8[$30>>0] = 0;
      $31 = ((($4)) + 103094|0);
      HEAP8[$31>>0] = 0;
      $32 = ((($4)) + 103095|0);
      HEAP8[$32>>0] = 0;
      $33 = ((($4)) + 103096|0);
      HEAP32[$33>>2] = 0;
      $34 = ((($4)) + 103100|0);
      HEAP8[$34>>0] = 1;
      $35 = ((($4)) + 103101|0);
      HEAP8[$35>>0] = 0;
      $36 = ((($4)) + 103128|0);
      HEAP8[$36>>0] = 1;
      $37 = ((($4)) + 103129|0);
      HEAP8[$37>>0] = 1;
      $38 = ((($4)) + 103130|0);
      HEAP8[$38>>0] = 0;
      $39 = ((($4)) + 103131|0);
      HEAP8[$39>>0] = 1;
      $40 = ((($4)) + 103112|0);
      HEAP8[$40>>0] = 1;
      $41 = ((($4)) + 103104|0);
      $42 = $1;
      ;HEAP32[$41>>2]=HEAP32[$42>>2]|0;HEAP32[$41+4>>2]=HEAP32[$42+4>>2]|0;
      $43 = ((($4)) + 102872|0);
      HEAP32[$43>>2] = 4;
      $44 = ((($4)) + 103124|0);
      HEAPF32[$44>>2] = 0.0;
      $45 = ((($4)) + 4|0);
      $46 = ((($4)) + 102876|0);
      $47 = ((($46)) + 124|0);
      HEAP32[$47>>2] = $45;
      $48 = ((($4)) + 103132|0);
      ;HEAP32[$48>>2]=0|0;HEAP32[$48+4>>2]=0|0;HEAP32[$48+8>>2]=0|0;HEAP32[$48+12>>2]=0|0;HEAP32[$48+16>>2]=0|0;HEAP32[$48+20>>2]=0|0;HEAP32[$48+24>>2]=0|0;HEAP32[$48+28>>2]=0|0;
      __THREW__ = 0;
      (invoke_i(407)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if (!($50)) {
       $51 = ((($4)) + 102876|0);
       __THREW__ = 0;
       invoke_vii(464,($51|0),($4|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if (!($53)) {
        HEAP32[$4>>2] = 0;
        $54 = HEAP8[11781]|0;
        $55 = $54&1;
        if ($55) {
         $56 = ((($4)) + 103888|0);
         HEAP8[$56>>0] = 0;
        }
        $69 = ((($4)) + 103892|0);
        HEAP32[$69>>2] = 0;
        $70 = ((($4)) + 103904|0);
        HEAPF64[$70>>3] = 0.0;
        $71 = ((($4)) + 103896|0);
        HEAPF64[$71>>3] = 0.0;
        $72 = ((($4)) + 103916|0);
        HEAP8[$72>>0] = 0;
        $73 = ((($4)) + 103920|0);
        HEAPF32[$73>>2] = 0.0;
        $74 = ((($4)) + 103932|0);
        HEAPF32[$74>>2] = 0.0;
        $75 = ((($4)) + 103928|0);
        HEAPF32[$75>>2] = 0.0;
        $76 = ((($4)) + 103924|0);
        HEAPF32[$76>>2] = 0.0;
        $77 = ((($4)) + 103940|0);
        HEAPF32[$77>>2] = 0.0;
        $78 = ((($4)) + 103944|0);
        HEAPF32[$78>>2] = 0.0;
        $79 = ((($4)) + 103960|0);
        HEAPF32[$79>>2] = 0.0;
        $80 = ((($4)) + 103956|0);
        HEAPF32[$80>>2] = 0.0;
        $81 = ((($4)) + 103952|0);
        HEAPF32[$81>>2] = 0.0;
        $82 = ((($4)) + 103948|0);
        HEAPF32[$82>>2] = 0.0;
        $83 = ((($4)) + 103964|0);
        HEAPF32[$83>>2] = 0.0;
        $84 = ((($4)) + 103976|0);
        HEAPF32[$84>>2] = 0.0;
        $85 = ((($4)) + 103972|0);
        HEAPF32[$85>>2] = 0.0;
        $86 = ((($4)) + 103968|0);
        HEAPF32[$86>>2] = 0.0;
        $87 = ((($4)) + 103980|0);
        HEAPF32[$87>>2] = 0.0;
        $88 = ((($4)) + 103996|0);
        HEAPF32[$88>>2] = 0.0;
        $89 = ((($4)) + 103992|0);
        HEAPF32[$89>>2] = 0.0;
        $90 = ((($4)) + 103988|0);
        HEAPF32[$90>>2] = 0.0;
        $91 = ((($4)) + 103984|0);
        HEAPF32[$91>>2] = 0.0;
        $92 = ((($4)) + 104000|0);
        HEAPF32[$92>>2] = 0.0;
        $93 = ((($4)) + 104008|0);
        HEAPF32[$93>>2] = 0.0;
        $94 = ((($4)) + 104004|0);
        HEAPF32[$94>>2] = 0.0;
        STACKTOP = sp;return;
       }
      }
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      $2 = $65;
      $3 = $66;
      __THREW__ = 0;
      invoke_vi(465,($18|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       $105 = ___cxa_find_matching_catch_3(0|0)|0;
       $106 = tempRet0;
       ___clang_call_terminate($105);
       // unreachable;
      }
     }
     __THREW__ = 0;
     invoke_vi(466,($15|0));
     $95 = __THREW__; __THREW__ = 0;
     $96 = $95&1;
     if ($96) {
      $105 = ___cxa_find_matching_catch_3(0|0)|0;
      $106 = tempRet0;
      ___clang_call_terminate($105);
      // unreachable;
     }
    }
   }
   if ((label|0) == 12) {
    $61 = ___cxa_find_matching_catch_2()|0;
    $62 = tempRet0;
    $2 = $61;
    $3 = $62;
   }
   __THREW__ = 0;
   invoke_vi(467,($9|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $105 = ___cxa_find_matching_catch_3(0|0)|0;
    $106 = tempRet0;
    ___clang_call_terminate($105);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(468,($6|0));
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $105 = ___cxa_find_matching_catch_3(0|0)|0;
   $106 = tempRet0;
   ___clang_call_terminate($105);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(469,($5|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch_3(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 } else {
  $103 = $2;
  $104 = $3;
  ___resumeException($103|0);
  // unreachable;
 }
}
function __ZN16b2ContactManager15SetWorldPointerEP7b2World($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 188|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN7b2WorldD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bNext = 0, $f = 0, $fNext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 103068|0);
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 L1: while(1) {
  $6 = $b;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 9;
   break;
  }
  $8 = $b;
  $9 = ((($8)) + 96|0);
  $10 = HEAP32[$9>>2]|0;
  $bNext = $10;
  $11 = $b;
  $12 = ((($11)) + 108|0);
  $13 = HEAP32[$12>>2]|0;
  $f = $13;
  while(1) {
   $14 = $f;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $f;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $fNext = $18;
   $19 = $f;
   $20 = ((($19)) + 36|0);
   HEAP32[$20>>2] = 0;
   $21 = $f;
   $22 = ((($3)) + 4|0);
   __THREW__ = 0;
   invoke_vii(470,($21|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 7;
    break L1;
   }
   $25 = $fNext;
   $f = $25;
  }
  $31 = $bNext;
  $b = $31;
 }
 do {
  if ((label|0) == 7) {
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   $1 = $26;
   $2 = $27;
   $28 = ((($3)) + 103804|0);
   __THREW__ = 0;
   invoke_vi(465,($28|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $67 = ___cxa_find_matching_catch_3(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   } else {
    label = 16;
   }
  }
  else if ((label|0) == 9) {
   $32 = ((($3)) + 103804|0);
   __THREW__ = 0;
   invoke_vi(465,($32|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $45 = ___cxa_find_matching_catch_2()|0;
    $46 = tempRet0;
    $1 = $45;
    $2 = $46;
    label = 16;
    break;
   }
   $35 = ((($3)) + 103164|0);
   __THREW__ = 0;
   invoke_vi(466,($35|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $1 = $47;
    $2 = $48;
    label = 18;
    break;
   }
   $38 = ((($3)) + 102876|0);
   __THREW__ = 0;
   invoke_vi(467,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    $1 = $52;
    $2 = $53;
    label = 20;
    break;
   }
   $41 = ((($3)) + 72|0);
   __THREW__ = 0;
   invoke_vi(468,($41|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $57 = ___cxa_find_matching_catch_2()|0;
    $58 = tempRet0;
    $1 = $57;
    $2 = $58;
    break;
   } else {
    $44 = ((($3)) + 4|0);
    __ZN16b2BlockAllocatorD2Ev($44);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = ((($3)) + 103164|0);
  __THREW__ = 0;
  invoke_vi(466,($49|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  } else {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $54 = ((($3)) + 102876|0);
  __THREW__ = 0;
  invoke_vi(467,($54|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  } else {
   label = 20;
  }
 }
 if ((label|0) == 20) {
  $59 = ((($3)) + 72|0);
  __THREW__ = 0;
  invoke_vi(468,($59|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
 }
 $62 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(469,($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $67 = ___cxa_find_matching_catch_3(0|0)|0;
  $68 = tempRet0;
  ___clang_call_terminate($67);
  // unreachable;
 } else {
  $65 = $1;
  $66 = $2;
  ___resumeException($65|0);
  // unreachable;
 }
}
function __ZN7b2World10CreateBodyEPK9b2BodyDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = (__ZNK7b2World8IsLockedEv($3)|0);
 $5 = $4&1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  ___assert_fail((20400|0),(20420|0),169,(20496|0));
  // unreachable;
 }
 $7 = (__ZNK7b2World8IsLockedEv($3)|0);
 if ($7) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $8 = ((($3)) + 4|0);
 $9 = (__ZN16b2BlockAllocator8AllocateEi($8,172)|0);
 $mem = $9;
 $10 = $mem;
 $11 = $2;
 __ZN6b2BodyC2EPK9b2BodyDefP7b2World($10,$11,$3);
 $b = $10;
 $12 = $b;
 $13 = ((($12)) + 92|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($3)) + 103068|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $b;
 $17 = ((($16)) + 96|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($3)) + 103068|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $b;
  $22 = ((($3)) + 103068|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 92|0);
  HEAP32[$24>>2] = $21;
 }
 $25 = $b;
 $26 = ((($3)) + 103068|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($3)) + 103076|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$27>>2] = $29;
 $30 = ((($3)) + 103092|0);
 HEAP8[$30>>0] = 1;
 $31 = ((($3)) + 103101|0);
 HEAP8[$31>>0] = 1;
 $32 = $b;
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function __ZN7b2World5SolveERK10b2TimeStep($this,$step) {
 $this = $this|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b1 = 0, $b3 = 0, $c = 0, $ce = 0, $contact = 0, $j = 0, $je = 0, $moveCount = 0, $other = 0, $other2 = 0, $pIsland = 0, $profile = 0, $seed = 0, $sensorA = 0;
 var $sensorB = 0, $stack = 0, $stackSize = 0, $stepBroadPhaseTimer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $profile = sp + 8|0;
 $stepBroadPhaseTimer = sp + 108|0;
 $0 = $this;
 $1 = $step;
 $4 = $0;
 $5 = HEAP8[11781]|0;
 $6 = $5&1;
 $7 = (__Znwj(60)|0);
 $8 = ((($4)) + 103076|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($4)) + 102876|0);
 $11 = ((($10)) + 108|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($4)) + 103088|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($4)) + 72|0);
 $16 = ((($4)) + 102876|0);
 $17 = ((($16)) + 120|0);
 $18 = HEAP32[$17>>2]|0;
 do {
  if ($6) {
   $19 = ((($4)) + 103164|0);
   __THREW__ = 0;
   invoke_viiiiiiii(471,($7|0),($9|0),($12|0),($14|0),($15|0),($18|0),($4|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $pIsland = $7;
    break;
   }
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   $2 = $22;
   $3 = $23;
   __ZdlPv($7);
   $263 = $2;
   $264 = $3;
   ___resumeException($263|0);
   // unreachable;
  } else {
   __THREW__ = 0;
   invoke_viiiiiiii(471,($7|0),($9|0),($12|0),($14|0),($15|0),($18|0),($4|0),(0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $pIsland = $7;
    break;
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   $2 = $26;
   $3 = $27;
   __ZdlPv($7);
   $263 = $2;
   $264 = $3;
   ___resumeException($263|0);
   // unreachable;
  }
 } while(0);
 $28 = ((($4)) + 103068|0);
 $29 = HEAP32[$28>>2]|0;
 $b = $29;
 while(1) {
  $30 = $b;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $b;
  $33 = ((($32)) + 4|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $35 & -2;
  $37 = $36&65535;
  HEAP16[$33>>1] = $37;
  $38 = $b;
  $39 = ((($38)) + 96|0);
  $40 = HEAP32[$39>>2]|0;
  $b = $40;
 }
 $41 = ((($4)) + 102876|0);
 $42 = ((($41)) + 100|0);
 $43 = HEAP32[$42>>2]|0;
 $c = $43;
 while(1) {
  $44 = $c;
  $45 = ($44|0)!=(0|0);
  if (!($45)) {
   break;
  }
  $46 = $c;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & -2;
  HEAP32[$47>>2] = $49;
  $50 = $c;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $c = $52;
 }
 $53 = ((($4)) + 103072|0);
 $54 = HEAP32[$53>>2]|0;
 $j = $54;
 while(1) {
  $55 = $j;
  $56 = ($55|0)!=(0|0);
  if (!($56)) {
   break;
  }
  $57 = $j;
  $58 = ((($57)) + 60|0);
  HEAP8[$58>>0] = 0;
  $59 = $j;
  $60 = ((($59)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $j = $61;
 }
 $62 = ((($4)) + 103076|0);
 $63 = HEAP32[$62>>2]|0;
 $stackSize = $63;
 $64 = ((($4)) + 72|0);
 $65 = $stackSize;
 $66 = $65<<2;
 $67 = (__ZN16b2StackAllocator8AllocateEi($64,$66)|0);
 $stack = $67;
 $68 = $pIsland;
 __ZN8b2Island5ClearEv($68);
 $69 = HEAP8[11781]|0;
 $70 = $69&1;
 if ($70) {
  $71 = ((($4)) + 102876|0);
  $72 = ((($71)) + 108|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $pIsland;
  $75 = ((($74)) + 36|0);
  HEAP32[$75>>2] = $73;
 }
 $76 = ((($4)) + 103068|0);
 $77 = HEAP32[$76>>2]|0;
 $seed = $77;
 while(1) {
  $78 = $seed;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $80 = $seed;
  $81 = ((($80)) + 4|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82&65535;
  $84 = $83 | 1;
  $85 = $84&65535;
  HEAP16[$81>>1] = $85;
  $86 = $pIsland;
  $87 = $seed;
  __ZN8b2Island3AddEP6b2Body($86,$87);
  $88 = $seed;
  $b1 = $88;
  $89 = HEAP8[11781]|0;
  $90 = $89&1;
  L31: do {
   if (!($90)) {
    $91 = $b1;
    $92 = ((($91)) + 120|0);
    $93 = HEAP32[$92>>2]|0;
    $ce = $93;
    while(1) {
     $94 = $ce;
     $95 = ($94|0)!=(0|0);
     if (!($95)) {
      break L31;
     }
     $96 = $ce;
     $97 = ((($96)) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $contact = $98;
     $99 = $contact;
     $100 = ((($99)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $101 & 1;
     $103 = ($102|0)!=(0);
     if (!($103)) {
      $104 = $contact;
      $105 = (__ZNK9b2Contact9IsEnabledEv($104)|0);
      $106 = $105&1;
      $107 = ($106|0)==(0);
      if (!($107)) {
       $108 = $contact;
       $109 = (__ZNK9b2Contact10IsTouchingEv($108)|0);
       $110 = $109&1;
       $111 = ($110|0)==(0);
       if (!($111)) {
        $112 = $contact;
        $113 = ((($112)) + 48|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ((($114)) + 46|0);
        $116 = HEAP8[$115>>0]|0;
        $117 = $116&1;
        $118 = $117&1;
        $sensorA = $118;
        $119 = $contact;
        $120 = ((($119)) + 52|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ((($121)) + 46|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123&1;
        $125 = $124&1;
        $sensorB = $125;
        $126 = $sensorA;
        $127 = $126&1;
        if (!($127)) {
         $128 = $sensorB;
         $129 = $128&1;
         if (!($129)) {
          $130 = $pIsland;
          $131 = $contact;
          __ZN8b2Island3AddEP9b2Contact($130,$131);
          $132 = $contact;
          $133 = ((($132)) + 4|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = $134 | 1;
          HEAP32[$133>>2] = $135;
          $136 = $ce;
          $137 = HEAP32[$136>>2]|0;
          $other = $137;
          $138 = $other;
          $139 = ((($138)) + 4|0);
          $140 = HEAP16[$139>>1]|0;
          $141 = $140&65535;
          $142 = $141 & 1;
          $143 = ($142|0)!=(0);
          if (!($143)) {
           $144 = $other;
           $145 = ((($144)) + 4|0);
           $146 = HEAP16[$145>>1]|0;
           $147 = $146&65535;
           $148 = $147 | 1;
           $149 = $148&65535;
           HEAP16[$145>>1] = $149;
          }
         }
        }
       }
      }
     }
     $150 = $ce;
     $151 = ((($150)) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $ce = $152;
    }
   }
  } while(0);
  $153 = $b1;
  $154 = ((($153)) + 116|0);
  $155 = HEAP32[$154>>2]|0;
  $je = $155;
  while(1) {
   $156 = $je;
   $157 = ($156|0)!=(0|0);
   if (!($157)) {
    break;
   }
   $158 = $je;
   $159 = ((($158)) + 4|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ((($160)) + 60|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&1;
   $164 = $163&1;
   $165 = ($164|0)==(1);
   if (!($165)) {
    $166 = $je;
    $167 = HEAP32[$166>>2]|0;
    $other2 = $167;
    $168 = $other2;
    $169 = (__ZNK6b2Body8IsActiveEv($168)|0);
    $170 = $169&1;
    $171 = ($170|0)==(0);
    if (!($171)) {
     $172 = $pIsland;
     $173 = $je;
     $174 = ((($173)) + 4|0);
     $175 = HEAP32[$174>>2]|0;
     __ZN8b2Island3AddEP7b2Joint($172,$175);
     $176 = $je;
     $177 = ((($176)) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($178)) + 60|0);
     HEAP8[$179>>0] = 1;
     $180 = $other2;
     $181 = ((($180)) + 4|0);
     $182 = HEAP16[$181>>1]|0;
     $183 = $182&65535;
     $184 = $183 & 1;
     $185 = ($184|0)!=(0);
     if (!($185)) {
      $186 = $other2;
      $187 = ((($186)) + 4|0);
      $188 = HEAP16[$187>>1]|0;
      $189 = $188&65535;
      $190 = $189 | 1;
      $191 = $190&65535;
      HEAP16[$187>>1] = $191;
     }
    }
   }
   $192 = $je;
   $193 = ((($192)) + 12|0);
   $194 = HEAP32[$193>>2]|0;
   $je = $194;
  }
  $195 = $seed;
  $196 = ((($195)) + 96|0);
  $197 = HEAP32[$196>>2]|0;
  $seed = $197;
 }
 $198 = $pIsland;
 $199 = $1;
 $200 = ((($4)) + 103104|0);
 $201 = ((($4)) + 103112|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($198,$profile,$199,$200,$203);
 $204 = ((($profile)) + 12|0);
 $205 = +HEAPF32[$204>>2];
 $206 = ((($4)) + 103132|0);
 $207 = ((($206)) + 12|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $208 + $205;
 HEAPF32[$207>>2] = $209;
 $210 = ((($profile)) + 16|0);
 $211 = +HEAPF32[$210>>2];
 $212 = ((($4)) + 103132|0);
 $213 = ((($212)) + 16|0);
 $214 = +HEAPF32[$213>>2];
 $215 = $214 + $211;
 HEAPF32[$213>>2] = $215;
 $216 = ((($profile)) + 20|0);
 $217 = +HEAPF32[$216>>2];
 $218 = ((($4)) + 103132|0);
 $219 = ((($218)) + 20|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $220 + $217;
 HEAPF32[$219>>2] = $221;
 $222 = ((($4)) + 72|0);
 $223 = $stack;
 __ZN16b2StackAllocator4FreeEPv($222,$223);
 $224 = $pIsland;
 $225 = ($224|0)==(0|0);
 do {
  if (!($225)) {
   __THREW__ = 0;
   invoke_vi(472,($224|0));
   $226 = __THREW__; __THREW__ = 0;
   $227 = $226&1;
   if (!($227)) {
    __ZdlPv($224);
    break;
   }
   $246 = ___cxa_find_matching_catch_2()|0;
   $247 = tempRet0;
   $2 = $246;
   $3 = $247;
   __ZdlPv($224);
   $263 = $2;
   $264 = $3;
   ___resumeException($263|0);
   // unreachable;
  }
 } while(0);
 $228 = ((($4)) + 102876|0);
 $229 = ((($228)) + 40|0);
 $230 = HEAP32[$229>>2]|0;
 $moveCount = $230;
 $231 = HEAP8[11781]|0;
 $232 = $231&1;
 if ($232) {
  $233 = ((($4)) + 103129|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = $234&1;
  if ($235) {
   label = 45;
  }
 } else {
  label = 45;
 }
 L64: do {
  if ((label|0) == 45) {
   $236 = ((($4)) + 103068|0);
   $237 = HEAP32[$236>>2]|0;
   $b3 = $237;
   while(1) {
    $238 = $b3;
    $239 = ($238|0)!=(0|0);
    if (!($239)) {
     break L64;
    }
    $240 = $b3;
    $241 = ((($240)) + 4|0);
    $242 = HEAP16[$241>>1]|0;
    $243 = $242&65535;
    $244 = $243 & 1;
    $245 = ($244|0)==(0);
    if (!($245)) {
     $248 = $b3;
     $249 = (__ZNK6b2Body7GetTypeEv($248)|0);
     $250 = ($249|0)==(0);
     if (!($250)) {
      $251 = $b3;
      __ZN6b2Body19SynchronizeFixturesEv($251);
     }
    }
    $252 = $b3;
    $253 = (__ZN6b2Body7GetNextEv($252)|0);
    $b3 = $253;
   }
  }
 } while(0);
 __ZN7b2TimerC2Ev($stepBroadPhaseTimer);
 $254 = ((($4)) + 103129|0);
 $255 = HEAP8[$254>>0]|0;
 $256 = $255&1;
 if ($256) {
  $258 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($258);
  $259 = (+__ZNK7b2Timer15GetMillisecondsEv($stepBroadPhaseTimer));
  $260 = ((($4)) + 103932|0);
  $261 = +HEAPF32[$260>>2];
  $262 = $261 + $259;
  HEAPF32[$260>>2] = $262;
  STACKTOP = sp;return;
 }
 $257 = ((($4)) + 102876|0);
 __ZN16b2ContactManager15FindNewContactsEv($257);
 $258 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($258);
 $259 = (+__ZNK7b2Timer15GetMillisecondsEv($stepBroadPhaseTimer));
 $260 = ((($4)) + 103932|0);
 $261 = +HEAPF32[$260>>2];
 $262 = $261 + $259;
 HEAPF32[$260>>2] = $262;
 STACKTOP = sp;return;
}
function __ZN8b2Island5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 32|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2Island3AddEP6b2Body($this,$body) {
 $this = $this|0;
 $body = $body|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $body;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = ((($2)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = $1;
  $13 = ((($2)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($2)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = $12;
  $18 = ((($2)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((20507|0),(20536|0),56,(20611|0));
  // unreachable;
 }
}
function __ZNK9b2Contact9IsEnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(4);
 STACKTOP = sp;return ($5|0);
}
function __ZN8b2Island3AddEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = $1;
  $9 = ((($2)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = ((($2)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  HEAP32[$14>>2] = $8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((20615|0),(20536|0),64,(20611|0));
  // unreachable;
 }
}
function __ZN8b2Island3AddEP7b2Joint($this,$joint) {
 $this = $this|0;
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $joint;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = $1;
  $9 = ((($2)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = ((($2)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  HEAP32[$14>>2] = $8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((20650|0),(20536|0),70,(20611|0));
  // unreachable;
 }
}
function __ZN7b2World8SolveTOIERK10b2TimeStep($this,$step) {
 $this = $this|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $alpha = 0.0, $alpha0 = 0.0, $b = 0, $bA = 0, $bA4 = 0, $bB = 0, $bB5 = 0, $backup = 0, $backup1 = 0, $backup2 = 0, $beta = 0.0;
 var $bodies = 0, $body = 0, $body7 = 0, $c = 0, $c1 = 0, $ce = 0, $ce8 = 0, $collideA = 0, $collideB = 0, $contact = 0, $currentLoopNum = 0, $fA = 0, $fA2 = 0, $fB = 0, $fB3 = 0, $findTOITimer = 0, $i = 0, $i6 = 0, $indexA = 0, $indexB = 0;
 var $input = 0, $island = 0, $minAlpha = 0.0, $minContact = 0, $movedBodySet = 0, $or$cond = 0, $or$cond3 = 0, $other = 0, $output = 0, $preLoopNum = 0, $resetAlpha0 = 0, $sensorA = 0, $sensorB = 0, $subStep = 0, $typeA = 0, $typeB = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $4 = sp + 528|0;
 $7 = sp + 512|0;
 $9 = sp + 552|0;
 $findTOITimer = sp + 551|0;
 $movedBodySet = sp + 484|0;
 $island = sp + 424|0;
 $input = sp + 216|0;
 $output = sp + 208|0;
 $backup1 = sp + 148|0;
 $backup2 = sp + 112|0;
 $bodies = sp + 104|0;
 $backup = sp + 48|0;
 $subStep = sp + 24|0;
 $body7 = sp + 16|0;
 $14 = sp + 8|0;
 $10 = $this;
 $11 = $step;
 $15 = $10;
 __ZN7b2TimerC2Ev($findTOITimer);
 $16 = ((($15)) + 102876|0);
 __ZN16b2ContactManager10cpuOverLapEv($16);
 $17 = ((($15)) + 102876|0);
 __ZN16b2ContactManager18cpuFindNewContactsEv($17);
 $8 = $movedBodySet;
 $18 = $8;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($18,$9);
 $19 = ((($15)) + 72|0);
 $20 = ((($15)) + 102876|0);
 $21 = ((($20)) + 120|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiiii(471,($island|0),64,32,0,($19|0),($22|0),($15|0),(0|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 6;
  } else {
   $25 = ((($15)) + 103131|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&1;
   L3: do {
    if ($27) {
     $28 = ((($15)) + 103068|0);
     $29 = HEAP32[$28>>2]|0;
     $b = $29;
     while(1) {
      $30 = $b;
      $31 = ($30|0)!=(0|0);
      if (!($31)) {
       break;
      }
      $32 = $b;
      $33 = ((($32)) + 4|0);
      $34 = HEAP16[$33>>1]|0;
      $35 = $34&65535;
      $36 = $35 & -2;
      $37 = $36&65535;
      HEAP16[$33>>1] = $37;
      $38 = $b;
      $39 = ((($38)) + 28|0);
      $40 = ((($39)) + 32|0);
      HEAPF32[$40>>2] = 0.0;
      $41 = $b;
      $42 = ((($41)) + 96|0);
      $43 = HEAP32[$42>>2]|0;
      $b = $43;
     }
     $46 = ((($15)) + 102876|0);
     $47 = ((($46)) + 100|0);
     $48 = HEAP32[$47>>2]|0;
     $c = $48;
     while(1) {
      $49 = $c;
      $50 = ($49|0)!=(0|0);
      if (!($50)) {
       break L3;
      }
      $51 = $c;
      $52 = ((($51)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $53 & -34;
      HEAP32[$52>>2] = $54;
      $55 = $c;
      $56 = ((($55)) + 128|0);
      HEAP32[$56>>2] = 0;
      $57 = $c;
      $58 = ((($57)) + 132|0);
      HEAPF32[$58>>2] = 1.0;
      $59 = $c;
      $60 = ((($59)) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $c = $61;
     }
    }
   } while(0);
   $resetAlpha0 = 1;
   $preLoopNum = 0;
   $currentLoopNum = 0;
   L13: while(1) {
    $minContact = 0;
    $minAlpha = 1.0;
    $62 = $currentLoopNum;
    $preLoopNum = $62;
    $currentLoopNum = 0;
    $63 = ((($15)) + 102876|0);
    $64 = ((($63)) + 100|0);
    $65 = HEAP32[$64>>2]|0;
    $c1 = $65;
    while(1) {
     $66 = $c1;
     $67 = ($66|0)!=(0|0);
     if (!($67)) {
      break;
     }
     $68 = $currentLoopNum;
     $69 = (($68) + 1)|0;
     $currentLoopNum = $69;
     $70 = $c1;
     __THREW__ = 0;
     $71 = (invoke_ii(473,($70|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      break L13;
     }
     $74 = $71&1;
     $75 = ($74|0)==(0);
     do {
      if (!($75)) {
       $80 = $c1;
       $81 = ((($80)) + 128|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)>(8);
       if (!($83)) {
        $alpha = 1.0;
        $84 = $c1;
        $85 = ((($84)) + 4|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = $86 & 32;
        $88 = ($87|0)!=(0);
        $89 = $c1;
        if ($88) {
         $90 = ((($89)) + 132|0);
         $91 = +HEAPF32[$90>>2];
         $alpha = $91;
        } else {
         __THREW__ = 0;
         $92 = (invoke_ii(474,($89|0))|0);
         $93 = __THREW__; __THREW__ = 0;
         $94 = $93&1;
         if ($94) {
          break L13;
         }
         $fA = $92;
         $95 = $c1;
         __THREW__ = 0;
         $96 = (invoke_ii(475,($95|0))|0);
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          break L13;
         }
         $fB = $96;
         $99 = $fA;
         __THREW__ = 0;
         $100 = (invoke_ii(476,($99|0))|0);
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if ($102) {
          break L13;
         }
         if ($100) {
          break;
         }
         $103 = $fB;
         __THREW__ = 0;
         $104 = (invoke_ii(476,($103|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          break L13;
         }
         if ($104) {
          break;
         }
         $107 = $fA;
         __THREW__ = 0;
         $108 = (invoke_ii(477,($107|0))|0);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          break L13;
         }
         $bA = $108;
         $111 = $fB;
         __THREW__ = 0;
         $112 = (invoke_ii(477,($111|0))|0);
         $113 = __THREW__; __THREW__ = 0;
         $114 = $113&1;
         if ($114) {
          break L13;
         }
         $bB = $112;
         $115 = $bA;
         $116 = HEAP32[$115>>2]|0;
         $typeA = $116;
         $117 = $bB;
         $118 = HEAP32[$117>>2]|0;
         $typeB = $118;
         $119 = $typeA;
         $120 = ($119|0)==(2);
         $121 = $typeB;
         $122 = ($121|0)==(2);
         $or$cond = $120 | $122;
         if (!($or$cond)) {
          label = 28;
          break L13;
         }
         $124 = $bA;
         __THREW__ = 0;
         $125 = (invoke_ii(478,($124|0))|0);
         $126 = __THREW__; __THREW__ = 0;
         $127 = $126&1;
         if ($127) {
          break L13;
         }
         $128 = $typeA;
         $129 = ($128|0)!=(0);
         $130 = $125 ? $129 : 0;
         $131 = $130&1;
         $activeA = $131;
         $132 = $bB;
         __THREW__ = 0;
         $133 = (invoke_ii(478,($132|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          break L13;
         }
         $136 = $typeB;
         $137 = ($136|0)!=(0);
         $138 = $133 ? $137 : 0;
         $139 = $138&1;
         $activeB = $139;
         $140 = $activeA;
         $141 = $140&1;
         $142 = $141&1;
         $143 = ($142|0)==(0);
         if ($143) {
          $144 = $activeB;
          $145 = $144&1;
          $146 = $145&1;
          $147 = ($146|0)==(0);
          if ($147) {
           break;
          }
         }
         $148 = $bA;
         __THREW__ = 0;
         $149 = (invoke_ii(417,($148|0))|0);
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          break L13;
         }
         $152 = $typeA;
         $153 = ($152|0)!=(2);
         $154 = $149 ? 1 : $153;
         $155 = $154&1;
         $collideA = $155;
         $156 = $bB;
         __THREW__ = 0;
         $157 = (invoke_ii(417,($156|0))|0);
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          break L13;
         }
         $160 = $typeB;
         $161 = ($160|0)!=(2);
         $162 = $157 ? 1 : $161;
         $163 = $162&1;
         $collideB = $163;
         $164 = $collideA;
         $165 = $164&1;
         $166 = $165&1;
         $167 = ($166|0)==(0);
         if ($167) {
          $168 = $collideB;
          $169 = $168&1;
          $170 = $169&1;
          $171 = ($170|0)==(0);
          if ($171) {
           break;
          }
         }
         $172 = $bA;
         $173 = ((($172)) + 28|0);
         $174 = ((($173)) + 32|0);
         $175 = +HEAPF32[$174>>2];
         $alpha0 = $175;
         $176 = $bA;
         $177 = ((($176)) + 28|0);
         $178 = ((($177)) + 32|0);
         $179 = +HEAPF32[$178>>2];
         $180 = $bB;
         $181 = ((($180)) + 28|0);
         $182 = ((($181)) + 32|0);
         $183 = +HEAPF32[$182>>2];
         $184 = $179 < $183;
         $185 = $bB;
         $186 = ((($185)) + 28|0);
         $187 = ((($186)) + 32|0);
         $188 = +HEAPF32[$187>>2];
         do {
          if ($184) {
           $alpha0 = $188;
           $189 = $bA;
           $190 = ((($189)) + 28|0);
           $191 = $alpha0;
           __THREW__ = 0;
           invoke_vid(479,($190|0),(+$191));
           $192 = __THREW__; __THREW__ = 0;
           $193 = $192&1;
           if ($193) {
            break L13;
           }
          } else {
           $194 = $bA;
           $195 = ((($194)) + 28|0);
           $196 = ((($195)) + 32|0);
           $197 = +HEAPF32[$196>>2];
           $198 = $188 < $197;
           if (!($198)) {
            break;
           }
           $199 = $bA;
           $200 = ((($199)) + 28|0);
           $201 = ((($200)) + 32|0);
           $202 = +HEAPF32[$201>>2];
           $alpha0 = $202;
           $203 = $bB;
           $204 = ((($203)) + 28|0);
           $205 = $alpha0;
           __THREW__ = 0;
           invoke_vid(479,($204|0),(+$205));
           $206 = __THREW__; __THREW__ = 0;
           $207 = $206&1;
           if ($207) {
            break L13;
           }
          }
         } while(0);
         $208 = $alpha0;
         $209 = $208 < 1.0;
         if (!($209)) {
          label = 42;
          break L13;
         }
         $211 = $c1;
         __THREW__ = 0;
         $212 = (invoke_ii(480,($211|0))|0);
         $213 = __THREW__; __THREW__ = 0;
         $214 = $213&1;
         if ($214) {
          break L13;
         }
         $indexA = $212;
         $215 = $c1;
         __THREW__ = 0;
         $216 = (invoke_ii(481,($215|0))|0);
         $217 = __THREW__; __THREW__ = 0;
         $218 = $217&1;
         if ($218) {
          break L13;
         }
         $indexB = $216;
         __THREW__ = 0;
         invoke_vi(482,($input|0));
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         if ($220) {
          break L13;
         }
         $221 = $fA;
         __THREW__ = 0;
         $222 = (invoke_ii(483,($221|0))|0);
         $223 = __THREW__; __THREW__ = 0;
         $224 = $223&1;
         if ($224) {
          break L13;
         }
         $225 = $indexA;
         __THREW__ = 0;
         invoke_viii(484,($input|0),($222|0),($225|0));
         $226 = __THREW__; __THREW__ = 0;
         $227 = $226&1;
         if ($227) {
          break L13;
         }
         $228 = ((($input)) + 28|0);
         $229 = $fB;
         __THREW__ = 0;
         $230 = (invoke_ii(483,($229|0))|0);
         $231 = __THREW__; __THREW__ = 0;
         $232 = $231&1;
         if ($232) {
          break L13;
         }
         $233 = $indexB;
         __THREW__ = 0;
         invoke_viii(484,($228|0),($230|0),($233|0));
         $234 = __THREW__; __THREW__ = 0;
         $235 = $234&1;
         if ($235) {
          break L13;
         }
         $236 = ((($input)) + 56|0);
         $237 = $bA;
         $238 = ((($237)) + 28|0);
         dest=$236; src=$238; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         $239 = ((($input)) + 92|0);
         $240 = $bB;
         $241 = ((($240)) + 28|0);
         dest=$239; src=$241; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         $242 = ((($input)) + 128|0);
         HEAPF32[$242>>2] = 1.0;
         __THREW__ = 0;
         invoke_vii(485,($output|0),($input|0));
         $243 = __THREW__; __THREW__ = 0;
         $244 = $243&1;
         if ($244) {
          break L13;
         }
         $245 = ((($output)) + 4|0);
         $246 = +HEAPF32[$245>>2];
         $beta = $246;
         $247 = HEAP32[$output>>2]|0;
         $248 = ($247|0)==(3);
         if ($248) {
          $249 = $alpha0;
          $250 = $alpha0;
          $251 = 1.0 - $250;
          $252 = $beta;
          $253 = $251 * $252;
          $254 = $249 + $253;
          __THREW__ = 0;
          $255 = (+invoke_ddd(486,(+$254),1.0));
          $256 = __THREW__; __THREW__ = 0;
          $257 = $256&1;
          if ($257) {
           break L13;
          }
          $alpha = $255;
         } else {
          $alpha = 1.0;
         }
         $258 = $alpha;
         $259 = $c1;
         $260 = ((($259)) + 132|0);
         HEAPF32[$260>>2] = $258;
         $261 = $c1;
         $262 = ((($261)) + 4|0);
         $263 = HEAP32[$262>>2]|0;
         $264 = $263 | 32;
         HEAP32[$262>>2] = $264;
        }
        $265 = $alpha;
        $266 = $minAlpha;
        $267 = $265 < $266;
        if ($267) {
         $268 = $c1;
         $minContact = $268;
         $269 = $alpha;
         $minAlpha = $269;
        }
       }
      }
     } while(0);
     $270 = $c1;
     $271 = ((($270)) + 12|0);
     $272 = HEAP32[$271>>2]|0;
     $c1 = $272;
    }
    $273 = $minContact;
    $274 = ($273|0)==(0|0);
    $275 = $minAlpha;
    $276 = 0.99999880790710449 < $275;
    $or$cond3 = $274 | $276;
    if ($or$cond3) {
     label = 60;
     break;
    }
    $278 = $minContact;
    __THREW__ = 0;
    $279 = (invoke_ii(474,($278|0))|0);
    $280 = __THREW__; __THREW__ = 0;
    $281 = $280&1;
    if ($281) {
     break;
    }
    $fA2 = $279;
    $282 = $minContact;
    __THREW__ = 0;
    $283 = (invoke_ii(475,($282|0))|0);
    $284 = __THREW__; __THREW__ = 0;
    $285 = $284&1;
    if ($285) {
     break;
    }
    $fB3 = $283;
    $286 = $fA2;
    __THREW__ = 0;
    $287 = (invoke_ii(477,($286|0))|0);
    $288 = __THREW__; __THREW__ = 0;
    $289 = $288&1;
    if ($289) {
     break;
    }
    $bA4 = $287;
    $290 = $fB3;
    __THREW__ = 0;
    $291 = (invoke_ii(477,($290|0))|0);
    $292 = __THREW__; __THREW__ = 0;
    $293 = $292&1;
    if ($293) {
     break;
    }
    $bB5 = $291;
    $294 = $bA4;
    $295 = ((($294)) + 28|0);
    dest=$backup1; src=$295; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $296 = $bB5;
    $297 = ((($296)) + 28|0);
    dest=$backup2; src=$297; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $298 = $bA4;
    $299 = $minAlpha;
    __THREW__ = 0;
    invoke_vid(487,($298|0),(+$299));
    $300 = __THREW__; __THREW__ = 0;
    $301 = $300&1;
    if ($301) {
     break;
    }
    $302 = $bB5;
    $303 = $minAlpha;
    __THREW__ = 0;
    invoke_vid(487,($302|0),(+$303));
    $304 = __THREW__; __THREW__ = 0;
    $305 = $304&1;
    if ($305) {
     break;
    }
    $306 = $minContact;
    $307 = ((($15)) + 102876|0);
    $308 = ((($307)) + 120|0);
    $309 = HEAP32[$308>>2]|0;
    __THREW__ = 0;
    invoke_vii(488,($306|0),($309|0));
    $310 = __THREW__; __THREW__ = 0;
    $311 = $310&1;
    if ($311) {
     break;
    }
    $312 = $minContact;
    $313 = ((($312)) + 4|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = $314 & -33;
    HEAP32[$313>>2] = $315;
    $316 = $minContact;
    $317 = ((($316)) + 128|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + 1)|0;
    HEAP32[$317>>2] = $319;
    $320 = $minContact;
    __THREW__ = 0;
    $321 = (invoke_ii(473,($320|0))|0);
    $322 = __THREW__; __THREW__ = 0;
    $323 = $322&1;
    if ($323) {
     break;
    }
    $324 = $321&1;
    $325 = ($324|0)==(0);
    if (!($325)) {
     $326 = $minContact;
     __THREW__ = 0;
     $327 = (invoke_ii(489,($326|0))|0);
     $328 = __THREW__; __THREW__ = 0;
     $329 = $328&1;
     if ($329) {
      break;
     }
     $330 = $327&1;
     $331 = ($330|0)==(0);
     if (!($331)) {
      $345 = $bA4;
      __THREW__ = 0;
      invoke_vii(491,($345|0),1);
      $346 = __THREW__; __THREW__ = 0;
      $347 = $346&1;
      if ($347) {
       break;
      }
      $348 = $bB5;
      __THREW__ = 0;
      invoke_vii(491,($348|0),1);
      $349 = __THREW__; __THREW__ = 0;
      $350 = $349&1;
      if ($350) {
       break;
      }
      __THREW__ = 0;
      invoke_vi(492,($island|0));
      $351 = __THREW__; __THREW__ = 0;
      $352 = $351&1;
      if ($352) {
       break;
      }
      $353 = $bA4;
      __THREW__ = 0;
      invoke_vii(493,($island|0),($353|0));
      $354 = __THREW__; __THREW__ = 0;
      $355 = $354&1;
      if ($355) {
       break;
      }
      $356 = $bB5;
      __THREW__ = 0;
      invoke_vii(493,($island|0),($356|0));
      $357 = __THREW__; __THREW__ = 0;
      $358 = $357&1;
      if ($358) {
       break;
      }
      $359 = $minContact;
      __THREW__ = 0;
      invoke_vii(494,($island|0),($359|0));
      $360 = __THREW__; __THREW__ = 0;
      $361 = $360&1;
      if ($361) {
       break;
      }
      $362 = $bA4;
      $363 = ((($362)) + 4|0);
      $364 = HEAP16[$363>>1]|0;
      $365 = $364&65535;
      $366 = $365 | 1;
      $367 = $366&65535;
      HEAP16[$363>>1] = $367;
      $368 = $bB5;
      $369 = ((($368)) + 4|0);
      $370 = HEAP16[$369>>1]|0;
      $371 = $370&65535;
      $372 = $371 | 1;
      $373 = $372&65535;
      HEAP16[$369>>1] = $373;
      $374 = $minContact;
      $375 = ((($374)) + 4|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = $376 | 1;
      HEAP32[$375>>2] = $377;
      $378 = $bA4;
      HEAP32[$bodies>>2] = $378;
      $379 = ((($bodies)) + 4|0);
      $380 = $bB5;
      HEAP32[$379>>2] = $380;
      $i = 0;
      while(1) {
       $381 = $i;
       $382 = ($381|0)<(2);
       if (!($382)) {
        break;
       }
       $383 = $i;
       $384 = (($bodies) + ($383<<2)|0);
       $385 = HEAP32[$384>>2]|0;
       $body = $385;
       $386 = $body;
       $387 = HEAP32[$386>>2]|0;
       $388 = ($387|0)==(2);
       L89: do {
        if ($388) {
         $389 = $body;
         $390 = ((($389)) + 120|0);
         $391 = HEAP32[$390>>2]|0;
         $ce = $391;
         while(1) {
          $392 = $ce;
          $393 = ($392|0)!=(0|0);
          if (!($393)) {
           break L89;
          }
          $394 = ((($island)) + 28|0);
          $395 = HEAP32[$394>>2]|0;
          $396 = ((($island)) + 40|0);
          $397 = HEAP32[$396>>2]|0;
          $398 = ($395|0)==($397|0);
          if ($398) {
           break L89;
          }
          $399 = ((($island)) + 36|0);
          $400 = HEAP32[$399>>2]|0;
          $401 = ((($island)) + 44|0);
          $402 = HEAP32[$401>>2]|0;
          $403 = ($400|0)==($402|0);
          if ($403) {
           break L89;
          }
          $404 = $ce;
          $405 = ((($404)) + 4|0);
          $406 = HEAP32[$405>>2]|0;
          $contact = $406;
          $407 = $contact;
          $408 = ((($407)) + 4|0);
          $409 = HEAP32[$408>>2]|0;
          $410 = $409 & 1;
          $411 = ($410|0)!=(0);
          L96: do {
           if (!($411)) {
            $412 = $ce;
            $413 = HEAP32[$412>>2]|0;
            $other = $413;
            $414 = $other;
            $415 = HEAP32[$414>>2]|0;
            $416 = ($415|0)==(2);
            do {
             if ($416) {
              $417 = $body;
              __THREW__ = 0;
              $418 = (invoke_ii(417,($417|0))|0);
              $419 = __THREW__; __THREW__ = 0;
              $420 = $419&1;
              if ($420) {
               break L13;
              }
              $421 = $418&1;
              $422 = ($421|0)==(0);
              if (!($422)) {
               break;
              }
              $423 = $other;
              __THREW__ = 0;
              $424 = (invoke_ii(417,($423|0))|0);
              $425 = __THREW__; __THREW__ = 0;
              $426 = $425&1;
              if ($426) {
               break L13;
              }
              $427 = $424&1;
              $428 = ($427|0)==(0);
              if ($428) {
               break L96;
              }
             }
            } while(0);
            $429 = $contact;
            $430 = ((($429)) + 48|0);
            $431 = HEAP32[$430>>2]|0;
            $432 = ((($431)) + 46|0);
            $433 = HEAP8[$432>>0]|0;
            $434 = $433&1;
            $435 = $434&1;
            $sensorA = $435;
            $436 = $contact;
            $437 = ((($436)) + 52|0);
            $438 = HEAP32[$437>>2]|0;
            $439 = ((($438)) + 46|0);
            $440 = HEAP8[$439>>0]|0;
            $441 = $440&1;
            $442 = $441&1;
            $sensorB = $442;
            $443 = $sensorA;
            $444 = $443&1;
            if ($444) {
             break;
            }
            $445 = $sensorB;
            $446 = $445&1;
            if ($446) {
             break;
            }
            $447 = $other;
            $448 = ((($447)) + 28|0);
            dest=$backup; src=$448; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            $449 = $other;
            $450 = ((($449)) + 4|0);
            $451 = HEAP16[$450>>1]|0;
            $452 = $451&65535;
            $453 = $452 & 1;
            $454 = ($453|0)==(0);
            if ($454) {
             $455 = $other;
             $456 = $minAlpha;
             __THREW__ = 0;
             invoke_vid(487,($455|0),(+$456));
             $457 = __THREW__; __THREW__ = 0;
             $458 = $457&1;
             if ($458) {
              break L13;
             }
            }
            $459 = $contact;
            $460 = ((($15)) + 102876|0);
            $461 = ((($460)) + 120|0);
            $462 = HEAP32[$461>>2]|0;
            __THREW__ = 0;
            invoke_vii(488,($459|0),($462|0));
            $463 = __THREW__; __THREW__ = 0;
            $464 = $463&1;
            if ($464) {
             break L13;
            }
            $465 = $contact;
            __THREW__ = 0;
            $466 = (invoke_ii(473,($465|0))|0);
            $467 = __THREW__; __THREW__ = 0;
            $468 = $467&1;
            if ($468) {
             break L13;
            }
            $469 = $466&1;
            $470 = ($469|0)==(0);
            if ($470) {
             $471 = $other;
             $472 = ((($471)) + 28|0);
             dest=$472; src=$backup; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
             $473 = $other;
             __THREW__ = 0;
             invoke_vi(458,($473|0));
             $474 = __THREW__; __THREW__ = 0;
             $475 = $474&1;
             if ($475) {
              break L13;
             } else {
              break;
             }
            }
            $476 = $contact;
            __THREW__ = 0;
            $477 = (invoke_ii(489,($476|0))|0);
            $478 = __THREW__; __THREW__ = 0;
            $479 = $478&1;
            if ($479) {
             break L13;
            }
            $480 = $477&1;
            $481 = ($480|0)==(0);
            if ($481) {
             $482 = $other;
             $483 = ((($482)) + 28|0);
             dest=$483; src=$backup; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
             $484 = $other;
             __THREW__ = 0;
             invoke_vi(458,($484|0));
             $485 = __THREW__; __THREW__ = 0;
             $486 = $485&1;
             if ($486) {
              break L13;
             } else {
              break;
             }
            }
            $487 = $contact;
            $488 = ((($487)) + 4|0);
            $489 = HEAP32[$488>>2]|0;
            $490 = $489 | 1;
            HEAP32[$488>>2] = $490;
            $491 = $contact;
            __THREW__ = 0;
            invoke_vii(494,($island|0),($491|0));
            $492 = __THREW__; __THREW__ = 0;
            $493 = $492&1;
            if ($493) {
             break L13;
            }
            $494 = $other;
            $495 = ((($494)) + 4|0);
            $496 = HEAP16[$495>>1]|0;
            $497 = $496&65535;
            $498 = $497 & 1;
            $499 = ($498|0)!=(0);
            if ($499) {
             break;
            }
            $500 = $other;
            $501 = ((($500)) + 4|0);
            $502 = HEAP16[$501>>1]|0;
            $503 = $502&65535;
            $504 = $503 | 1;
            $505 = $504&65535;
            HEAP16[$501>>1] = $505;
            $506 = $other;
            $507 = HEAP32[$506>>2]|0;
            $508 = ($507|0)!=(0);
            if ($508) {
             $509 = $other;
             __THREW__ = 0;
             invoke_vii(491,($509|0),1);
             $510 = __THREW__; __THREW__ = 0;
             $511 = $510&1;
             if ($511) {
              break L13;
             }
            }
            $512 = $other;
            __THREW__ = 0;
            invoke_vii(493,($island|0),($512|0));
            $513 = __THREW__; __THREW__ = 0;
            $514 = $513&1;
            if ($514) {
             break L13;
            }
           }
          } while(0);
          $515 = $ce;
          $516 = ((($515)) + 12|0);
          $517 = HEAP32[$516>>2]|0;
          $ce = $517;
         }
        }
       } while(0);
       $518 = $i;
       $519 = (($518) + 1)|0;
       $i = $519;
      }
      $520 = $minAlpha;
      $521 = 1.0 - $520;
      $522 = $11;
      $523 = +HEAPF32[$522>>2];
      $524 = $521 * $523;
      HEAPF32[$subStep>>2] = $524;
      $525 = +HEAPF32[$subStep>>2];
      $526 = 1.0 / $525;
      $527 = ((($subStep)) + 4|0);
      HEAPF32[$527>>2] = $526;
      $528 = ((($subStep)) + 8|0);
      HEAPF32[$528>>2] = 1.0;
      $529 = ((($subStep)) + 16|0);
      HEAP32[$529>>2] = 20;
      $530 = $11;
      $531 = ((($530)) + 12|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = ((($subStep)) + 12|0);
      HEAP32[$533>>2] = $532;
      $534 = ((($subStep)) + 20|0);
      HEAP8[$534>>0] = 0;
      $535 = $bA4;
      $536 = ((($535)) + 8|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = $bB5;
      $539 = ((($538)) + 8|0);
      $540 = HEAP32[$539>>2]|0;
      __THREW__ = 0;
      invoke_viiii(495,($island|0),($subStep|0),($537|0),($540|0));
      $541 = __THREW__; __THREW__ = 0;
      $542 = $541&1;
      if ($542) {
       break;
      }
      $i6 = 0;
      while(1) {
       $543 = $i6;
       $544 = ((($island)) + 28|0);
       $545 = HEAP32[$544>>2]|0;
       $546 = ($543|0)<($545|0);
       if (!($546)) {
        break;
       }
       $547 = $i6;
       $548 = ((($island)) + 8|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = (($549) + ($547<<2)|0);
       $551 = HEAP32[$550>>2]|0;
       HEAP32[$body7>>2] = $551;
       $552 = HEAP32[$body7>>2]|0;
       $553 = ((($552)) + 4|0);
       $554 = HEAP16[$553>>1]|0;
       $555 = $554&65535;
       $556 = $555 & -2;
       $557 = $556&65535;
       HEAP16[$553>>1] = $557;
       $558 = HEAP32[$body7>>2]|0;
       $559 = HEAP32[$558>>2]|0;
       $560 = ($559|0)!=(2);
       L130: do {
        if (!($560)) {
         $561 = HEAP32[$body7>>2]|0;
         __THREW__ = 0;
         invoke_vi(496,($561|0));
         $562 = __THREW__; __THREW__ = 0;
         $563 = $562&1;
         if ($563) {
          break L13;
         }
         $5 = $movedBodySet;
         $6 = $body7;
         $564 = $5;
         $565 = $6;
         __THREW__ = 0;
         invoke_viii(497,($7|0),($564|0),($565|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          break L13;
         }
         $2 = $14;
         $3 = $7;
         $568 = $2;
         $569 = $3;
         ;HEAP32[$4>>2]=HEAP32[$569>>2]|0;
         ;HEAP8[$1>>0]=HEAP8[$4>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
         $0 = $568;
         $570 = $0;
         $571 = HEAP32[$1>>2]|0;
         HEAP32[$570>>2] = $571;
         $572 = ((($568)) + 4|0);
         $573 = $3;
         $574 = ((($573)) + 4|0);
         $575 = HEAP8[$574>>0]|0;
         $576 = $575&1;
         $577 = $576&1;
         HEAP8[$572>>0] = $577;
         $578 = HEAP32[$body7>>2]|0;
         $579 = ((($578)) + 120|0);
         $580 = HEAP32[$579>>2]|0;
         $ce8 = $580;
         while(1) {
          $581 = $ce8;
          $582 = ($581|0)!=(0|0);
          if (!($582)) {
           break L130;
          }
          $583 = $ce8;
          $584 = ((($583)) + 4|0);
          $585 = HEAP32[$584>>2]|0;
          $586 = ((($585)) + 4|0);
          $587 = HEAP32[$586>>2]|0;
          $588 = $587 & -34;
          HEAP32[$586>>2] = $588;
          $589 = $ce8;
          $590 = ((($589)) + 12|0);
          $591 = HEAP32[$590>>2]|0;
          $ce8 = $591;
         }
        }
       } while(0);
       $592 = $i6;
       $593 = (($592) + 1)|0;
       $i6 = $593;
      }
      $594 = ((($15)) + 102876|0);
      __THREW__ = 0;
      invoke_vi(498,($594|0));
      $595 = __THREW__; __THREW__ = 0;
      $596 = $595&1;
      if ($596) {
       break;
      }
      $597 = ((($15)) + 103130|0);
      $598 = HEAP8[$597>>0]|0;
      $599 = $598&1;
      if ($599) {
       label = 124;
       break;
      } else {
       continue;
      }
     }
    }
    $332 = $minContact;
    __THREW__ = 0;
    invoke_vii(490,($332|0),0);
    $333 = __THREW__; __THREW__ = 0;
    $334 = $333&1;
    if ($334) {
     break;
    }
    $335 = $bA4;
    $336 = ((($335)) + 28|0);
    dest=$336; src=$backup1; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $337 = $bB5;
    $338 = ((($337)) + 28|0);
    dest=$338; src=$backup2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $339 = $bA4;
    __THREW__ = 0;
    invoke_vi(458,($339|0));
    $340 = __THREW__; __THREW__ = 0;
    $341 = $340&1;
    if ($341) {
     break;
    }
    $342 = $bB5;
    __THREW__ = 0;
    invoke_vi(458,($342|0));
    $343 = __THREW__; __THREW__ = 0;
    $344 = $343&1;
    if ($344) {
     break;
    }
   }
   if ((label|0) == 28) {
    __THREW__ = 0;
    invoke_viiii(424,(20681|0),(20420|0),933,(20732|0));
    $123 = __THREW__; __THREW__ = 0;
   }
   else if ((label|0) == 42) {
    __THREW__ = 0;
    invoke_viiii(424,(20741|0),(20420|0),979,(20732|0));
    $210 = __THREW__; __THREW__ = 0;
   }
   else if ((label|0) == 60) {
    $277 = ((($15)) + 103131|0);
    HEAP8[$277>>0] = 1;
    label = 125;
   }
   else if ((label|0) == 124) {
    $600 = ((($15)) + 103131|0);
    HEAP8[$600>>0] = 0;
    label = 125;
   }
   if ((label|0) == 125) {
    $601 = ((($15)) + 103804|0);
    $602 = ((($15)) + 103164|0);
    __THREW__ = 0;
    invoke_viii(499,($601|0),($movedBodySet|0),($602|0));
    $603 = __THREW__; __THREW__ = 0;
    $604 = $603&1;
    if (!($604)) {
     $605 = ((($15)) + 102876|0);
     __THREW__ = 0;
     invoke_vi(500,($605|0));
     $606 = __THREW__; __THREW__ = 0;
     $607 = $606&1;
     if (!($607)) {
      __THREW__ = 0;
      $608 = (invoke_i(407)|0);
      $609 = __THREW__; __THREW__ = 0;
      $610 = $609&1;
      if (!($610)) {
       __THREW__ = 0;
       invoke_vi(501,($608|0));
       $611 = __THREW__; __THREW__ = 0;
       $612 = $611&1;
       if (!($612)) {
        __THREW__ = 0;
        $613 = (+invoke_di(502,($findTOITimer|0)));
        $614 = __THREW__; __THREW__ = 0;
        $615 = $614&1;
        if (!($615)) {
         $616 = ((($15)) + 103940|0);
         $617 = +HEAPF32[$616>>2];
         $618 = $617 + $613;
         HEAPF32[$616>>2] = $618;
         __THREW__ = 0;
         invoke_vi(472,($island|0));
         $619 = __THREW__; __THREW__ = 0;
         $620 = $619&1;
         if ($620) {
          label = 6;
          break;
         }
         __ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($movedBodySet);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
   $76 = ___cxa_find_matching_catch_2()|0;
   $77 = tempRet0;
   $12 = $76;
   $13 = $77;
   __THREW__ = 0;
   invoke_vi(472,($island|0));
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    $625 = ___cxa_find_matching_catch_3(0|0)|0;
    $626 = tempRet0;
    ___clang_call_terminate($625);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $12 = $44;
  $13 = $45;
 }
 __THREW__ = 0;
 invoke_vi(503,($movedBodySet|0));
 $621 = __THREW__; __THREW__ = 0;
 $622 = $621&1;
 if ($622) {
  $625 = ___cxa_find_matching_catch_3(0|0)|0;
  $626 = tempRet0;
  ___clang_call_terminate($625);
  // unreachable;
 } else {
  $623 = $12;
  $624 = $13;
  ___resumeException($623|0);
  // unreachable;
 }
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 60|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$10>>0]=HEAP8[$23>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = ((($36)) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN7b2Sweep7AdvanceEf($this,$alpha) {
 $this = $this|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $beta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $alpha;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 < 1.0;
 if ($8) {
  $9 = $1;
  $10 = ((($5)) + 32|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = ((($5)) + 32|0);
  $14 = +HEAPF32[$13>>2];
  $15 = 1.0 - $14;
  $16 = $12 / $15;
  $beta = $16;
  $17 = ((($5)) + 8|0);
  $18 = $beta;
  $19 = 1.0 - $18;
  $20 = ((($5)) + 8|0);
  __ZmlfRK6b2Vec2($3,$19,$20);
  $21 = $beta;
  $22 = ((($5)) + 16|0);
  __ZmlfRK6b2Vec2($4,$21,$22);
  __ZplRK6b2Vec2S1_($2,$3,$4);
  ;HEAP32[$17>>2]=HEAP32[$2>>2]|0;HEAP32[$17+4>>2]=HEAP32[$2+4>>2]|0;
  $23 = $beta;
  $24 = 1.0 - $23;
  $25 = ((($5)) + 24|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $24 * $26;
  $28 = $beta;
  $29 = ((($5)) + 28|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 * $30;
  $32 = $27 + $31;
  $33 = ((($5)) + 24|0);
  HEAPF32[$33>>2] = $32;
  $34 = $1;
  $35 = ((($5)) + 32|0);
  HEAPF32[$35>>2] = $34;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((20741|0),(20755|0),715,(20826|0));
  // unreachable;
 }
}
function __ZN10b2TOIInputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = ((($1)) + 28|0);
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = ((($1)) + 56|0);
 __ZN7b2SweepC2Ev($3);
 $4 = ((($1)) + 92|0);
 __ZN7b2SweepC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN9b2Fixture8GetShapeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body7AdvanceEf($this,$alpha) {
 $this = $this|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp;
 $0 = $this;
 $1 = $alpha;
 $4 = $0;
 $5 = ((($4)) + 28|0);
 $6 = $1;
 __ZN7b2Sweep7AdvanceEf($5,$6);
 $7 = ((($4)) + 28|0);
 $8 = ((($7)) + 16|0);
 $9 = ((($4)) + 28|0);
 $10 = ((($9)) + 8|0);
 ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;
 $11 = ((($4)) + 28|0);
 $12 = ((($11)) + 24|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($4)) + 28|0);
 $15 = ((($14)) + 28|0);
 HEAPF32[$15>>2] = $13;
 $16 = ((($4)) + 12|0);
 $17 = ((($16)) + 8|0);
 $18 = ((($4)) + 28|0);
 $19 = ((($18)) + 28|0);
 $20 = +HEAPF32[$19>>2];
 __ZN5b2Rot3SetEf($17,$20);
 $21 = ((($4)) + 12|0);
 $22 = ((($4)) + 28|0);
 $23 = ((($22)) + 16|0);
 $24 = ((($4)) + 12|0);
 $25 = ((($24)) + 8|0);
 $26 = ((($4)) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($3,$25,$26);
 __ZmiRK6b2Vec2S1_($2,$23,$3);
 ;HEAP32[$21>>2]=HEAP32[$2>>2]|0;HEAP32[$21+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN9b2Contact10SetEnabledEb($this,$flag) {
 $this = $this|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $flag&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = $7 | 4;
  HEAP32[$6>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $9 = $7 & -5;
  HEAP32[$6>>2] = $9;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0;
 var $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 40|0;
 $17 = sp + 587|0;
 $39 = sp + 32|0;
 $42 = sp + 586|0;
 $72 = sp + 292|0;
 $73 = sp + 24|0;
 $76 = sp + 280|0;
 $77 = sp + 272|0;
 $78 = sp + 16|0;
 $81 = sp + 256|0;
 $82 = sp + 8|0;
 $85 = sp + 244|0;
 $93 = sp;
 $96 = sp + 585|0;
 $120 = sp + 108|0;
 $__parent = sp + 96|0;
 $__inserted = sp + 584|0;
 $123 = sp + 84|0;
 $__h = sp + 72|0;
 $124 = sp + 68|0;
 $125 = sp + 56|0;
 $128 = sp + 44|0;
 $121 = $this;
 $122 = $__v;
 $129 = $121;
 $130 = $122;
 $131 = (__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($129,$__parent,$130)|0);
 $__child = $131;
 $132 = $__child;
 $133 = HEAP32[$132>>2]|0;
 $__r = $133;
 HEAP8[$__inserted>>0] = 0;
 $134 = $__child;
 $135 = HEAP32[$134>>2]|0;
 $118 = $120;
 $119 = -1;
 $136 = $118;
 HEAP32[$136>>2] = 0;
 $137 = HEAP32[$120>>2]|0;
 HEAP32[$123>>2] = $137;
 $117 = $123;
 $138 = ($135|0)==(0|0);
 if (!($138)) {
  $286 = $__r;
  $112 = $128;
  $113 = $286;
  $287 = $112;
  $288 = $113;
  HEAP32[$287>>2] = $288;
  $114 = $agg$result;
  $115 = $128;
  $116 = $__inserted;
  $289 = $114;
  $290 = $115;
  ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
  $291 = ((($289)) + 4|0);
  $292 = $116;
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&1;
  $295 = $294&1;
  HEAP8[$291>>0] = $295;
  STACKTOP = sp;return;
 }
 $139 = $122;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($125,$129,$139);
 $86 = $125;
 $140 = $86;
 $83 = $85;
 $84 = $140;
 $141 = $83;
 $142 = $84;
 HEAP32[$141>>2] = $142;
 $143 = HEAP32[$85>>2]|0;
 HEAP32[$124>>2] = $143;
 ;HEAP8[$82>>0]=HEAP8[$124>>0]|0;HEAP8[$82+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$124+3>>0]|0;
 $80 = $__h;
 $144 = $80;
 $79 = $82;
 $145 = $79;
 $146 = HEAP32[$145>>2]|0;
 $62 = $146;
 $147 = $62;
 $61 = $147;
 $148 = $61;
 $60 = $148;
 $149 = $60;
 $150 = HEAP32[$149>>2]|0;
 $__t$i$i = $150;
 $59 = $147;
 $151 = $59;
 $58 = $151;
 $152 = $58;
 HEAP32[$152>>2] = 0;
 $153 = $__t$i$i;
 $63 = $82;
 $154 = $63;
 $155 = HEAP32[$154>>2]|0;
 $66 = $155;
 $156 = $66;
 $65 = $156;
 $157 = $65;
 $64 = $157;
 $158 = $64;
 $159 = ((($158)) + 4|0);
 $67 = $159;
 $160 = $67;
 ;HEAP32[$81>>2]=HEAP32[$160>>2]|0;HEAP32[$81+4>>2]=HEAP32[$160+4>>2]|0;
 ;HEAP8[$78>>0]=HEAP8[$81>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $144;
 HEAP32[$76>>2] = $153;
 $161 = $75;
 $74 = $76;
 $162 = $74;
 $163 = HEAP32[$162>>2]|0;
 $68 = $78;
 $164 = $68;
 ;HEAP32[$77>>2]=HEAP32[$164>>2]|0;HEAP32[$77+4>>2]=HEAP32[$164+4>>2]|0;
 ;HEAP8[$73>>0]=HEAP8[$77>>0]|0;HEAP8[$73+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$73+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$73+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$73+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$73+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $161;
 HEAP32[$72>>2] = $163;
 $165 = $71;
 $70 = $72;
 $166 = $70;
 $167 = HEAP32[$166>>2]|0;
 HEAP32[$165>>2] = $167;
 $168 = ((($165)) + 4|0);
 $69 = $73;
 $169 = $69;
 ;HEAP32[$168>>2]=HEAP32[$169>>2]|0;HEAP32[$168+4>>2]=HEAP32[$169+4>>2]|0;
 $32 = $125;
 $170 = $32;
 $30 = $170;
 $31 = 0;
 $171 = $30;
 $29 = $171;
 $172 = $29;
 $28 = $172;
 $173 = $28;
 $174 = HEAP32[$173>>2]|0;
 $__tmp$i$i7 = $174;
 $175 = $31;
 $11 = $171;
 $176 = $11;
 $10 = $176;
 $177 = $10;
 HEAP32[$177>>2] = $175;
 $178 = $__tmp$i$i7;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $9 = $171;
  $180 = $9;
  $8 = $180;
  $181 = $8;
  $182 = ((($181)) + 4|0);
  $183 = $__tmp$i$i7;
  $26 = $182;
  $27 = $183;
  $184 = $26;
  $185 = ((($184)) + 4|0);
  $186 = HEAP8[$185>>0]|0;
  $187 = $186&1;
  if ($187) {
   $188 = HEAP32[$184>>2]|0;
   $189 = $27;
   $190 = ((($189)) + 16|0);
   $25 = $190;
   $191 = $25;
   $15 = $188;
   $16 = $191;
   $192 = $15;
   $193 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $192;
   $13 = $193;
  }
  $194 = $27;
  $195 = ($194|0)!=(0|0);
  if ($195) {
   $196 = HEAP32[$184>>2]|0;
   $197 = $27;
   $22 = $196;
   $23 = $197;
   $24 = 1;
   $198 = $22;
   $199 = $23;
   $200 = $24;
   $19 = $198;
   $20 = $199;
   $21 = $200;
   $201 = $20;
   $18 = $201;
   $202 = $18;
   __ZdlPv($202);
  }
 }
 $203 = HEAP32[$__parent>>2]|0;
 $204 = $__child;
 $7 = $__h;
 $205 = $7;
 $6 = $205;
 $206 = $6;
 $5 = $206;
 $207 = $5;
 $208 = HEAP32[$207>>2]|0;
 __THREW__ = 0;
 invoke_viiii(504,($129|0),($203|0),($204|0),($208|0));
 $209 = __THREW__; __THREW__ = 0;
 $210 = $209&1;
 if ($210) {
  $251 = ___cxa_find_matching_catch_2()|0;
  $252 = tempRet0;
  $126 = $251;
  $127 = $252;
  $111 = $__h;
  $253 = $111;
  $109 = $253;
  $110 = 0;
  $254 = $109;
  $108 = $254;
  $255 = $108;
  $107 = $255;
  $256 = $107;
  $257 = HEAP32[$256>>2]|0;
  $__tmp$i$i = $257;
  $258 = $110;
  $90 = $254;
  $259 = $90;
  $89 = $259;
  $260 = $89;
  HEAP32[$260>>2] = $258;
  $261 = $__tmp$i$i;
  $262 = ($261|0)!=(0|0);
  if (!($262)) {
   $296 = $126;
   $297 = $127;
   ___resumeException($296|0);
   // unreachable;
  }
  $88 = $254;
  $263 = $88;
  $87 = $263;
  $264 = $87;
  $265 = ((($264)) + 4|0);
  $266 = $__tmp$i$i;
  $105 = $265;
  $106 = $266;
  $267 = $105;
  $268 = ((($267)) + 4|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = $269&1;
  if ($270) {
   $271 = HEAP32[$267>>2]|0;
   $272 = $106;
   $273 = ((($272)) + 16|0);
   $104 = $273;
   $274 = $104;
   $94 = $271;
   $95 = $274;
   $275 = $94;
   $276 = $95;
   ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;
   $91 = $275;
   $92 = $276;
  }
  $277 = $106;
  $278 = ($277|0)!=(0|0);
  if (!($278)) {
   $296 = $126;
   $297 = $127;
   ___resumeException($296|0);
   // unreachable;
  }
  $279 = HEAP32[$267>>2]|0;
  $280 = $106;
  $101 = $279;
  $102 = $280;
  $103 = 1;
  $281 = $101;
  $282 = $102;
  $283 = $103;
  $98 = $281;
  $99 = $282;
  $100 = $283;
  $284 = $99;
  $97 = $284;
  $285 = $97;
  __ZdlPv($285);
  $296 = $126;
  $297 = $127;
  ___resumeException($296|0);
  // unreachable;
 } else {
  $4 = $__h;
  $211 = $4;
  $3 = $211;
  $212 = $3;
  $2 = $212;
  $213 = $2;
  $214 = HEAP32[$213>>2]|0;
  $__t$i = $214;
  $1 = $211;
  $215 = $1;
  $0 = $215;
  $216 = $0;
  HEAP32[$216>>2] = 0;
  $217 = $__t$i;
  $__r = $217;
  HEAP8[$__inserted>>0] = 1;
  $57 = $__h;
  $218 = $57;
  $55 = $218;
  $56 = 0;
  $219 = $55;
  $54 = $219;
  $220 = $54;
  $53 = $220;
  $221 = $53;
  $222 = HEAP32[$221>>2]|0;
  $__tmp$i$i4 = $222;
  $223 = $56;
  $36 = $219;
  $224 = $36;
  $35 = $224;
  $225 = $35;
  HEAP32[$225>>2] = $223;
  $226 = $__tmp$i$i4;
  $227 = ($226|0)!=(0|0);
  if (!($227)) {
   $286 = $__r;
   $112 = $128;
   $113 = $286;
   $287 = $112;
   $288 = $113;
   HEAP32[$287>>2] = $288;
   $114 = $agg$result;
   $115 = $128;
   $116 = $__inserted;
   $289 = $114;
   $290 = $115;
   ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
   $291 = ((($289)) + 4|0);
   $292 = $116;
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&1;
   $295 = $294&1;
   HEAP8[$291>>0] = $295;
   STACKTOP = sp;return;
  }
  $34 = $219;
  $228 = $34;
  $33 = $228;
  $229 = $33;
  $230 = ((($229)) + 4|0);
  $231 = $__tmp$i$i4;
  $51 = $230;
  $52 = $231;
  $232 = $51;
  $233 = ((($232)) + 4|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = $234&1;
  if ($235) {
   $236 = HEAP32[$232>>2]|0;
   $237 = $52;
   $238 = ((($237)) + 16|0);
   $50 = $238;
   $239 = $50;
   $40 = $236;
   $41 = $239;
   $240 = $40;
   $241 = $41;
   ;HEAP8[$39>>0]=HEAP8[$42>>0]|0;
   $37 = $240;
   $38 = $241;
  }
  $242 = $52;
  $243 = ($242|0)!=(0|0);
  if (!($243)) {
   $286 = $__r;
   $112 = $128;
   $113 = $286;
   $287 = $112;
   $288 = $113;
   HEAP32[$287>>2] = $288;
   $114 = $agg$result;
   $115 = $128;
   $116 = $__inserted;
   $289 = $114;
   $290 = $115;
   ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
   $291 = ((($289)) + 4|0);
   $292 = $116;
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&1;
   $295 = $294&1;
   HEAP8[$291>>0] = $295;
   STACKTOP = sp;return;
  }
  $244 = HEAP32[$232>>2]|0;
  $245 = $52;
  $47 = $244;
  $48 = $245;
  $49 = 1;
  $246 = $47;
  $247 = $48;
  $248 = $49;
  $44 = $246;
  $45 = $247;
  $46 = $248;
  $249 = $45;
  $43 = $249;
  $250 = $43;
  __ZdlPv($250);
  $286 = $__r;
  $112 = $128;
  $113 = $286;
  $287 = $112;
  $288 = $113;
  HEAP32[$287>>2] = $288;
  $114 = $agg$result;
  $115 = $128;
  $116 = $__inserted;
  $289 = $114;
  $290 = $115;
  ;HEAP32[$289>>2]=HEAP32[$290>>2]|0;
  $291 = ((($289)) + 4|0);
  $292 = $116;
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&1;
  $295 = $294&1;
  HEAP8[$291>>0] = $295;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 160|0;
 $12 = sp + 120|0;
 $22 = sp + 80|0;
 $39 = sp + 8|0;
 $40 = sp + 4|0;
 $41 = sp;
 $36 = $this;
 $37 = $__parent;
 $38 = $__v;
 $42 = $36;
 $34 = $42;
 $43 = $34;
 $33 = $43;
 $44 = $33;
 $45 = ((($44)) + 4|0);
 $32 = $45;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = HEAP32[$49>>2]|0;
 $__nd = $50;
 $51 = $__nd;
 $0 = $2;
 $1 = -1;
 $52 = $0;
 HEAP32[$52>>2] = 0;
 $53 = HEAP32[$2>>2]|0;
 HEAP32[$39>>2] = $53;
 $3 = $39;
 $54 = ($51|0)!=(0|0);
 if (!($54)) {
  $28 = $42;
  $104 = $28;
  $105 = ((($104)) + 4|0);
  $27 = $105;
  $106 = $27;
  $26 = $106;
  $107 = $26;
  $25 = $107;
  $108 = $25;
  $24 = $108;
  $109 = $24;
  $110 = $37;
  HEAP32[$110>>2] = $109;
  $111 = $37;
  $112 = HEAP32[$111>>2]|0;
  $35 = $112;
  $113 = $35;
  STACKTOP = sp;return ($113|0);
 }
 while(1) {
  $6 = $42;
  $55 = $6;
  $56 = ((($55)) + 8|0);
  $5 = $56;
  $57 = $5;
  $4 = $57;
  $58 = $4;
  $59 = $38;
  $60 = $__nd;
  $61 = ((($60)) + 16|0);
  $7 = $58;
  $8 = $59;
  $9 = $61;
  $62 = $8;
  $63 = HEAP32[$62>>2]|0;
  $64 = $9;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63>>>0)<($65>>>0);
  if ($66) {
   $67 = $__nd;
   $68 = HEAP32[$67>>2]|0;
   $10 = $12;
   $11 = -1;
   $69 = $10;
   HEAP32[$69>>2] = 0;
   $70 = HEAP32[$12>>2]|0;
   HEAP32[$40>>2] = $70;
   $13 = $40;
   $71 = ($68|0)!=(0|0);
   $72 = $__nd;
   if (!($71)) {
    label = 5;
    break;
   }
   $73 = HEAP32[$72>>2]|0;
   $__nd = $73;
   continue;
  }
  $16 = $42;
  $77 = $16;
  $78 = ((($77)) + 8|0);
  $15 = $78;
  $79 = $15;
  $14 = $79;
  $80 = $14;
  $81 = $__nd;
  $82 = ((($81)) + 16|0);
  $83 = $38;
  $17 = $80;
  $18 = $82;
  $19 = $83;
  $84 = $18;
  $85 = HEAP32[$84>>2]|0;
  $86 = $19;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85>>>0)<($87>>>0);
  $89 = $__nd;
  if (!($88)) {
   label = 10;
   break;
  }
  $90 = ((($89)) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $20 = $22;
  $21 = -1;
  $92 = $20;
  HEAP32[$92>>2] = 0;
  $93 = HEAP32[$22>>2]|0;
  HEAP32[$41>>2] = $93;
  $23 = $41;
  $94 = ($91|0)!=(0|0);
  $95 = $__nd;
  if (!($94)) {
   label = 9;
   break;
  }
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $__nd = $97;
 }
 if ((label|0) == 5) {
  $74 = $37;
  HEAP32[$74>>2] = $72;
  $75 = $37;
  $76 = HEAP32[$75>>2]|0;
  $35 = $76;
  $113 = $35;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 9) {
  $98 = $37;
  HEAP32[$98>>2] = $95;
  $99 = $37;
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 4|0);
  $35 = $101;
  $113 = $35;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 10) {
  $102 = $37;
  HEAP32[$102>>2] = $89;
  $103 = $37;
  $35 = $103;
  $113 = $35;
  STACKTOP = sp;return ($113|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0, $__tmp$i$i1$i = 0, $__tmp$i$i4 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 908|0;
 $18 = sp + 112|0;
 $21 = sp + 896|0;
 $22 = sp + 888|0;
 $23 = sp + 104|0;
 $26 = sp + 872|0;
 $27 = sp + 96|0;
 $34 = sp + 88|0;
 $37 = sp + 986|0;
 $55 = sp + 760|0;
 $71 = sp + 692|0;
 $72 = sp + 80|0;
 $75 = sp + 680|0;
 $76 = sp + 672|0;
 $77 = sp + 72|0;
 $80 = sp + 656|0;
 $81 = sp + 64|0;
 $85 = sp + 636|0;
 $86 = sp + 624|0;
 $87 = sp + 620|0;
 $90 = sp + 608|0;
 $106 = sp + 540|0;
 $107 = sp + 56|0;
 $110 = sp + 528|0;
 $111 = sp + 520|0;
 $112 = sp + 48|0;
 $115 = sp + 504|0;
 $116 = sp + 40|0;
 $126 = sp + 32|0;
 $129 = sp + 985|0;
 $152 = sp + 24|0;
 $155 = sp + 984|0;
 $179 = sp + 260|0;
 $180 = sp + 16|0;
 $183 = sp + 248|0;
 $184 = sp + 240|0;
 $185 = sp + 8|0;
 $188 = sp + 224|0;
 $189 = sp + 216|0;
 $190 = sp;
 $__h = sp + 144|0;
 $204 = sp + 136|0;
 $205 = sp + 132|0;
 $206 = sp + 120|0;
 $202 = $this;
 $203 = $__v;
 $207 = $202;
 $201 = $207;
 $208 = $201;
 $209 = ((($208)) + 4|0);
 $200 = $209;
 $210 = $200;
 $199 = $210;
 $211 = $199;
 $__na = $211;
 $212 = $__na;
 $197 = $212;
 $198 = 1;
 $213 = $197;
 $214 = $198;
 $194 = $213;
 $195 = $214;
 $196 = 0;
 $215 = $195;
 $216 = ($215*20)|0;
 $193 = $216;
 $217 = $193;
 $218 = (__Znwj($217)|0);
 $219 = $__na;
 $191 = $204;
 $192 = $219;
 $220 = $191;
 $221 = $192;
 HEAP32[$220>>2] = $221;
 $222 = ((($220)) + 4|0);
 HEAP8[$222>>0] = 0;
 ;HEAP8[$190>>0]=HEAP8[$204>>0]|0;HEAP8[$190+1>>0]=HEAP8[$204+1>>0]|0;HEAP8[$190+2>>0]=HEAP8[$204+2>>0]|0;HEAP8[$190+3>>0]=HEAP8[$204+3>>0]|0;HEAP8[$190+4>>0]=HEAP8[$204+4>>0]|0;HEAP8[$190+5>>0]=HEAP8[$204+5>>0]|0;HEAP8[$190+6>>0]=HEAP8[$204+6>>0]|0;HEAP8[$190+7>>0]=HEAP8[$204+7>>0]|0;
 $187 = $__h;
 HEAP32[$188>>2] = $218;
 $223 = $187;
 $186 = $188;
 $224 = $186;
 $225 = HEAP32[$224>>2]|0;
 $174 = $190;
 $226 = $174;
 ;HEAP32[$189>>2]=HEAP32[$226>>2]|0;HEAP32[$189+4>>2]=HEAP32[$226+4>>2]|0;
 ;HEAP8[$185>>0]=HEAP8[$189>>0]|0;HEAP8[$185+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$185+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$185+3>>0]=HEAP8[$189+3>>0]|0;HEAP8[$185+4>>0]=HEAP8[$189+4>>0]|0;HEAP8[$185+5>>0]=HEAP8[$189+5>>0]|0;HEAP8[$185+6>>0]=HEAP8[$189+6>>0]|0;HEAP8[$185+7>>0]=HEAP8[$189+7>>0]|0;
 $182 = $223;
 HEAP32[$183>>2] = $225;
 $227 = $182;
 $181 = $183;
 $228 = $181;
 $229 = HEAP32[$228>>2]|0;
 $175 = $185;
 $230 = $175;
 ;HEAP32[$184>>2]=HEAP32[$230>>2]|0;HEAP32[$184+4>>2]=HEAP32[$230+4>>2]|0;
 ;HEAP8[$180>>0]=HEAP8[$184>>0]|0;HEAP8[$180+1>>0]=HEAP8[$184+1>>0]|0;HEAP8[$180+2>>0]=HEAP8[$184+2>>0]|0;HEAP8[$180+3>>0]=HEAP8[$184+3>>0]|0;HEAP8[$180+4>>0]=HEAP8[$184+4>>0]|0;HEAP8[$180+5>>0]=HEAP8[$184+5>>0]|0;HEAP8[$180+6>>0]=HEAP8[$184+6>>0]|0;HEAP8[$180+7>>0]=HEAP8[$184+7>>0]|0;
 $178 = $227;
 HEAP32[$179>>2] = $229;
 $231 = $178;
 $177 = $179;
 $232 = $177;
 $233 = HEAP32[$232>>2]|0;
 HEAP32[$231>>2] = $233;
 $234 = ((($231)) + 4|0);
 $176 = $180;
 $235 = $176;
 ;HEAP32[$234>>2]=HEAP32[$235>>2]|0;HEAP32[$234+4>>2]=HEAP32[$235+4>>2]|0;
 $236 = $__na;
 $173 = $__h;
 $237 = $173;
 $172 = $237;
 $238 = $172;
 $171 = $238;
 $239 = $171;
 $240 = HEAP32[$239>>2]|0;
 $241 = ((($240)) + 16|0);
 $145 = $241;
 $242 = $145;
 $243 = $203;
 $117 = $236;
 $118 = $242;
 $119 = $243;
 $244 = $118;
 $245 = $119;
 $246 = HEAP32[$245>>2]|0;
 HEAP32[$244>>2] = $246;
 $2 = $__h;
 $247 = $2;
 $1 = $247;
 $248 = $1;
 $0 = $248;
 $249 = $0;
 $250 = ((($249)) + 4|0);
 $251 = ((($250)) + 4|0);
 HEAP8[$251>>0] = 1;
 $84 = $__h;
 $252 = $84;
 $82 = $87;
 $83 = $252;
 $253 = $82;
 $254 = $83;
 HEAP32[$253>>2] = $254;
 ;HEAP8[$81>>0]=HEAP8[$87>>0]|0;HEAP8[$81+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$87+3>>0]|0;
 $79 = $86;
 $255 = $79;
 $78 = $81;
 $256 = $78;
 $257 = HEAP32[$256>>2]|0;
 $61 = $257;
 $258 = $61;
 $60 = $258;
 $259 = $60;
 $59 = $259;
 $260 = $59;
 $261 = HEAP32[$260>>2]|0;
 $__t$i$i$i = $261;
 $58 = $258;
 $262 = $58;
 $57 = $262;
 $263 = $57;
 HEAP32[$263>>2] = 0;
 $264 = $__t$i$i$i;
 $62 = $81;
 $265 = $62;
 $266 = HEAP32[$265>>2]|0;
 $65 = $266;
 $267 = $65;
 $64 = $267;
 $268 = $64;
 $63 = $268;
 $269 = $63;
 $270 = ((($269)) + 4|0);
 $66 = $270;
 $271 = $66;
 ;HEAP32[$80>>2]=HEAP32[$271>>2]|0;HEAP32[$80+4>>2]=HEAP32[$271+4>>2]|0;
 ;HEAP8[$77>>0]=HEAP8[$80>>0]|0;HEAP8[$77+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$77+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$77+3>>0]=HEAP8[$80+3>>0]|0;HEAP8[$77+4>>0]=HEAP8[$80+4>>0]|0;HEAP8[$77+5>>0]=HEAP8[$80+5>>0]|0;HEAP8[$77+6>>0]=HEAP8[$80+6>>0]|0;HEAP8[$77+7>>0]=HEAP8[$80+7>>0]|0;
 $74 = $255;
 HEAP32[$75>>2] = $264;
 $272 = $74;
 $73 = $75;
 $273 = $73;
 $274 = HEAP32[$273>>2]|0;
 $67 = $77;
 $275 = $67;
 ;HEAP32[$76>>2]=HEAP32[$275>>2]|0;HEAP32[$76+4>>2]=HEAP32[$275+4>>2]|0;
 ;HEAP8[$72>>0]=HEAP8[$76>>0]|0;HEAP8[$72+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$76+3>>0]|0;HEAP8[$72+4>>0]=HEAP8[$76+4>>0]|0;HEAP8[$72+5>>0]=HEAP8[$76+5>>0]|0;HEAP8[$72+6>>0]=HEAP8[$76+6>>0]|0;HEAP8[$72+7>>0]=HEAP8[$76+7>>0]|0;
 $70 = $272;
 HEAP32[$71>>2] = $274;
 $276 = $70;
 $69 = $71;
 $277 = $69;
 $278 = HEAP32[$277>>2]|0;
 HEAP32[$276>>2] = $278;
 $279 = ((($276)) + 4|0);
 $68 = $72;
 $280 = $68;
 ;HEAP32[$279>>2]=HEAP32[$280>>2]|0;HEAP32[$279+4>>2]=HEAP32[$280+4>>2]|0;
 $56 = $86;
 $281 = $56;
 $53 = $55;
 $54 = $281;
 $282 = $53;
 $283 = $54;
 HEAP32[$282>>2] = $283;
 $284 = HEAP32[$55>>2]|0;
 HEAP32[$85>>2] = $284;
 ;HEAP8[$27>>0]=HEAP8[$85>>0]|0;HEAP8[$27+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$85+3>>0]|0;
 $25 = $206;
 $285 = $25;
 $24 = $27;
 $286 = $24;
 $287 = HEAP32[$286>>2]|0;
 $7 = $287;
 $288 = $7;
 $6 = $288;
 $289 = $6;
 $5 = $289;
 $290 = $5;
 $291 = HEAP32[$290>>2]|0;
 $__t$i$i4$i = $291;
 $4 = $288;
 $292 = $4;
 $3 = $292;
 $293 = $3;
 HEAP32[$293>>2] = 0;
 $294 = $__t$i$i4$i;
 $8 = $27;
 $295 = $8;
 $296 = HEAP32[$295>>2]|0;
 $11 = $296;
 $297 = $11;
 $10 = $297;
 $298 = $10;
 $9 = $298;
 $299 = $9;
 $300 = ((($299)) + 4|0);
 $12 = $300;
 $301 = $12;
 ;HEAP32[$26>>2]=HEAP32[$301>>2]|0;HEAP32[$26+4>>2]=HEAP32[$301+4>>2]|0;
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;HEAP8[$23+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $285;
 HEAP32[$21>>2] = $294;
 $302 = $20;
 $19 = $21;
 $303 = $19;
 $304 = HEAP32[$303>>2]|0;
 $13 = $23;
 $305 = $13;
 ;HEAP32[$22>>2]=HEAP32[$305>>2]|0;HEAP32[$22+4>>2]=HEAP32[$305+4>>2]|0;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $302;
 HEAP32[$17>>2] = $304;
 $306 = $16;
 $15 = $17;
 $307 = $15;
 $308 = HEAP32[$307>>2]|0;
 HEAP32[$306>>2] = $308;
 $309 = ((($306)) + 4|0);
 $14 = $18;
 $310 = $14;
 ;HEAP32[$309>>2]=HEAP32[$310>>2]|0;HEAP32[$309+4>>2]=HEAP32[$310+4>>2]|0;
 $52 = $86;
 $311 = $52;
 $50 = $311;
 $51 = 0;
 $312 = $50;
 $49 = $312;
 $313 = $49;
 $48 = $313;
 $314 = $48;
 $315 = HEAP32[$314>>2]|0;
 $__tmp$i$i1$i = $315;
 $316 = $51;
 $31 = $312;
 $317 = $31;
 $30 = $317;
 $318 = $30;
 HEAP32[$318>>2] = $316;
 $319 = $__tmp$i$i1$i;
 $320 = ($319|0)!=(0|0);
 if ($320) {
  $29 = $312;
  $321 = $29;
  $28 = $321;
  $322 = $28;
  $323 = ((($322)) + 4|0);
  $324 = $__tmp$i$i1$i;
  $46 = $323;
  $47 = $324;
  $325 = $46;
  $326 = ((($325)) + 4|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327&1;
  if ($328) {
   $329 = HEAP32[$325>>2]|0;
   $330 = $47;
   $331 = ((($330)) + 16|0);
   $45 = $331;
   $332 = $45;
   $35 = $329;
   $36 = $332;
   $333 = $35;
   $334 = $36;
   ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
   $32 = $333;
   $33 = $334;
  }
  $335 = $47;
  $336 = ($335|0)!=(0|0);
  if ($336) {
   $337 = HEAP32[$325>>2]|0;
   $338 = $47;
   $42 = $337;
   $43 = $338;
   $44 = 1;
   $339 = $42;
   $340 = $43;
   $341 = $44;
   $39 = $339;
   $40 = $340;
   $41 = $341;
   $342 = $40;
   $38 = $342;
   $343 = $38;
   __ZdlPv($343);
  }
 }
 $91 = $206;
 $344 = $91;
 $88 = $90;
 $89 = $344;
 $345 = $88;
 $346 = $89;
 HEAP32[$345>>2] = $346;
 $347 = HEAP32[$90>>2]|0;
 HEAP32[$205>>2] = $347;
 ;HEAP8[$116>>0]=HEAP8[$205>>0]|0;HEAP8[$116+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$205+3>>0]|0;
 $114 = $agg$result;
 $348 = $114;
 $113 = $116;
 $349 = $113;
 $350 = HEAP32[$349>>2]|0;
 $96 = $350;
 $351 = $96;
 $95 = $351;
 $352 = $95;
 $94 = $352;
 $353 = $94;
 $354 = HEAP32[$353>>2]|0;
 $__t$i$i = $354;
 $93 = $351;
 $355 = $93;
 $92 = $355;
 $356 = $92;
 HEAP32[$356>>2] = 0;
 $357 = $__t$i$i;
 $97 = $116;
 $358 = $97;
 $359 = HEAP32[$358>>2]|0;
 $100 = $359;
 $360 = $100;
 $99 = $360;
 $361 = $99;
 $98 = $361;
 $362 = $98;
 $363 = ((($362)) + 4|0);
 $101 = $363;
 $364 = $101;
 ;HEAP32[$115>>2]=HEAP32[$364>>2]|0;HEAP32[$115+4>>2]=HEAP32[$364+4>>2]|0;
 ;HEAP8[$112>>0]=HEAP8[$115>>0]|0;HEAP8[$112+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$112+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$112+3>>0]=HEAP8[$115+3>>0]|0;HEAP8[$112+4>>0]=HEAP8[$115+4>>0]|0;HEAP8[$112+5>>0]=HEAP8[$115+5>>0]|0;HEAP8[$112+6>>0]=HEAP8[$115+6>>0]|0;HEAP8[$112+7>>0]=HEAP8[$115+7>>0]|0;
 $109 = $348;
 HEAP32[$110>>2] = $357;
 $365 = $109;
 $108 = $110;
 $366 = $108;
 $367 = HEAP32[$366>>2]|0;
 $102 = $112;
 $368 = $102;
 ;HEAP32[$111>>2]=HEAP32[$368>>2]|0;HEAP32[$111+4>>2]=HEAP32[$368+4>>2]|0;
 ;HEAP8[$107>>0]=HEAP8[$111>>0]|0;HEAP8[$107+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$111+3>>0]|0;HEAP8[$107+4>>0]=HEAP8[$111+4>>0]|0;HEAP8[$107+5>>0]=HEAP8[$111+5>>0]|0;HEAP8[$107+6>>0]=HEAP8[$111+6>>0]|0;HEAP8[$107+7>>0]=HEAP8[$111+7>>0]|0;
 $105 = $365;
 HEAP32[$106>>2] = $367;
 $369 = $105;
 $104 = $106;
 $370 = $104;
 $371 = HEAP32[$370>>2]|0;
 HEAP32[$369>>2] = $371;
 $372 = ((($369)) + 4|0);
 $103 = $107;
 $373 = $103;
 ;HEAP32[$372>>2]=HEAP32[$373>>2]|0;HEAP32[$372+4>>2]=HEAP32[$373+4>>2]|0;
 $144 = $206;
 $374 = $144;
 $142 = $374;
 $143 = 0;
 $375 = $142;
 $141 = $375;
 $376 = $141;
 $140 = $376;
 $377 = $140;
 $378 = HEAP32[$377>>2]|0;
 $__tmp$i$i7 = $378;
 $379 = $143;
 $123 = $375;
 $380 = $123;
 $122 = $380;
 $381 = $122;
 HEAP32[$381>>2] = $379;
 $382 = $__tmp$i$i7;
 $383 = ($382|0)!=(0|0);
 if ($383) {
  $121 = $375;
  $384 = $121;
  $120 = $384;
  $385 = $120;
  $386 = ((($385)) + 4|0);
  $387 = $__tmp$i$i7;
  $138 = $386;
  $139 = $387;
  $388 = $138;
  $389 = ((($388)) + 4|0);
  $390 = HEAP8[$389>>0]|0;
  $391 = $390&1;
  if ($391) {
   $392 = HEAP32[$388>>2]|0;
   $393 = $139;
   $394 = ((($393)) + 16|0);
   $137 = $394;
   $395 = $137;
   $127 = $392;
   $128 = $395;
   $396 = $127;
   $397 = $128;
   ;HEAP8[$126>>0]=HEAP8[$129>>0]|0;
   $124 = $396;
   $125 = $397;
  }
  $398 = $139;
  $399 = ($398|0)!=(0|0);
  if ($399) {
   $400 = HEAP32[$388>>2]|0;
   $401 = $139;
   $134 = $400;
   $135 = $401;
   $136 = 1;
   $402 = $134;
   $403 = $135;
   $404 = $136;
   $131 = $402;
   $132 = $403;
   $133 = $404;
   $405 = $132;
   $130 = $405;
   $406 = $130;
   __ZdlPv($406);
  }
 }
 $170 = $__h;
 $407 = $170;
 $168 = $407;
 $169 = 0;
 $408 = $168;
 $167 = $408;
 $409 = $167;
 $166 = $409;
 $410 = $166;
 $411 = HEAP32[$410>>2]|0;
 $__tmp$i$i4 = $411;
 $412 = $169;
 $149 = $408;
 $413 = $149;
 $148 = $413;
 $414 = $148;
 HEAP32[$414>>2] = $412;
 $415 = $__tmp$i$i4;
 $416 = ($415|0)!=(0|0);
 if (!($416)) {
  STACKTOP = sp;return;
 }
 $147 = $408;
 $417 = $147;
 $146 = $417;
 $418 = $146;
 $419 = ((($418)) + 4|0);
 $420 = $__tmp$i$i4;
 $164 = $419;
 $165 = $420;
 $421 = $164;
 $422 = ((($421)) + 4|0);
 $423 = HEAP8[$422>>0]|0;
 $424 = $423&1;
 if ($424) {
  $425 = HEAP32[$421>>2]|0;
  $426 = $165;
  $427 = ((($426)) + 16|0);
  $163 = $427;
  $428 = $163;
  $153 = $425;
  $154 = $428;
  $429 = $153;
  $430 = $154;
  ;HEAP8[$152>>0]=HEAP8[$155>>0]|0;
  $150 = $429;
  $151 = $430;
 }
 $431 = $165;
 $432 = ($431|0)!=(0|0);
 if (!($432)) {
  STACKTOP = sp;return;
 }
 $433 = HEAP32[$421>>2]|0;
 $434 = $165;
 $160 = $433;
 $161 = $434;
 $162 = 1;
 $435 = $160;
 $436 = $161;
 $437 = $162;
 $157 = $435;
 $158 = $436;
 $159 = $437;
 $438 = $158;
 $156 = $438;
 $439 = $156;
 __ZdlPv($439);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 108|0;
 $7 = sp + 88|0;
 $22 = sp + 28|0;
 $27 = sp + 8|0;
 $28 = sp + 4|0;
 $29 = sp;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = ((($53)) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = ((($62)) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 96|0;
 $20 = sp + 20|0;
 $23 = sp + 8|0;
 $21 = $this;
 $22 = $__nd;
 $24 = $21;
 $25 = $22;
 $18 = $20;
 $19 = -1;
 $26 = $18;
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$20>>2]|0;
 HEAP32[$23>>2] = $27;
 $17 = $23;
 $28 = ($25|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $22;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($24,$30);
 $31 = $22;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($24,$33);
 $2 = $24;
 $34 = $2;
 $35 = ((($34)) + 4|0);
 $1 = $35;
 $36 = $1;
 $0 = $36;
 $37 = $0;
 $__na = $37;
 $38 = $__na;
 $39 = $22;
 $40 = ((($39)) + 16|0);
 $3 = $40;
 $41 = $3;
 $7 = $38;
 $8 = $41;
 $42 = $7;
 $43 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $42;
 $5 = $43;
 $44 = $__na;
 $45 = $22;
 $14 = $44;
 $15 = $45;
 $16 = 1;
 $46 = $14;
 $47 = $15;
 $48 = $16;
 $11 = $46;
 $12 = $47;
 $13 = $48;
 $49 = $12;
 $10 = $49;
 $50 = $10;
 __ZdlPv($50);
 STACKTOP = sp;return;
}
function __ZN7b2World17InitializeGPUDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 103096|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = ((($1)) + 103092|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&1;
   if (!($7)) {
    $8 = ((($1)) + 103093|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&1;
    if (!($10)) {
     break;
    }
   }
   $11 = (__ZN14b2CLCommonData8instanceEv()|0);
   __ZN14b2CLCommonData31UpdateFixtureAddressAndChildrenEP7b2World($11,$1);
  }
 } while(0);
 $12 = HEAP8[11781]|0;
 $13 = $12&1;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($1)) + 103092|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 if ($16) {
  label = 8;
 } else {
  $17 = ((($1)) + 103093|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&1;
  if ($19) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $20 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData10CopyShapesEP7b2World($20,$1);
 }
 $21 = ((($1)) + 103093|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if ($23) {
  $24 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData27CopyStaticFixtureAttributesEP7b2World($24,$1);
 }
 $25 = ((($1)) + 103092|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if ($27) {
  $28 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($28,$1);
  $29 = ((($1)) + 103888|0);
  HEAP8[$29>>0] = 1;
 } else {
  $30 = ((($1)) + 103094|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&1;
  if ($32) {
   $33 = (__ZN14b2CLCommonData8instanceEv()|0);
   __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($33,$1);
   $34 = ((($1)) + 103094|0);
   HEAP8[$34>>0] = 0;
  }
 }
 $35 = ((($1)) + 103888|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 if ($37) {
  label = 17;
 } else {
  $38 = ((($1)) + 103095|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&1;
  if ($40) {
   label = 17;
  }
 }
 if ((label|0) == 17) {
  $41 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData25CopyDynamicBodyAttributesEP7b2World($41,$1);
 }
 $42 = ((($1)) + 103100|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&1;
 if (!($44)) {
  $45 = ((($1)) + 103101|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&1;
  if (!($47)) {
   STACKTOP = sp;return;
  }
 }
 $48 = (__ZN14b2CLCommonData8instanceEv()|0);
 $49 = ((($1)) + 103128|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&1;
 $52 = ((($1)) + 103100|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&1;
 $55 = ((($1)) + 103101|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&1;
 __ZN14b2CLCommonData10CopyJointsEP7b2Worldbbb($48,$1,$51,$54,$57);
 $58 = ((($1)) + 103100|0);
 HEAP8[$58>>0] = 0;
 $59 = ((($1)) + 103101|0);
 HEAP8[$59>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN7b2World4StepEfii($this,$dt,$velocityIterations,$positionIterations) {
 $this = $this|0;
 $dt = +$dt;
 $velocityIterations = $velocityIterations|0;
 $positionIterations = $positionIterations|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $step = 0, $stepNarrowPhaseTimer = 0, $stepSolverTimer = 0, $stepTotalTimer = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer111 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer9 = 0;
 var $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr114 = 0, $vararg_ptr115 = 0, $vararg_ptr116 = 0, $vararg_ptr117 = 0, $vararg_ptr118 = 0, $vararg_ptr124 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr75 = 0, $vararg_ptr76 = 0;
 var $vararg_ptr77 = 0, $vararg_ptr78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer121 = sp + 440|0;
 $vararg_buffer119 = sp + 432|0;
 $vararg_buffer111 = sp + 384|0;
 $vararg_buffer108 = sp + 376|0;
 $vararg_buffer105 = sp + 368|0;
 $vararg_buffer102 = sp + 360|0;
 $vararg_buffer100 = sp + 352|0;
 $vararg_buffer97 = sp + 344|0;
 $vararg_buffer94 = sp + 336|0;
 $vararg_buffer91 = sp + 328|0;
 $vararg_buffer88 = sp + 320|0;
 $vararg_buffer85 = sp + 312|0;
 $vararg_buffer82 = sp + 304|0;
 $vararg_buffer79 = sp + 296|0;
 $vararg_buffer72 = sp + 256|0;
 $vararg_buffer69 = sp + 248|0;
 $vararg_buffer66 = sp + 240|0;
 $vararg_buffer63 = sp + 232|0;
 $vararg_buffer60 = sp + 224|0;
 $vararg_buffer57 = sp + 216|0;
 $vararg_buffer50 = sp + 176|0;
 $vararg_buffer47 = sp + 168|0;
 $vararg_buffer44 = sp + 160|0;
 $vararg_buffer41 = sp + 152|0;
 $vararg_buffer38 = sp + 144|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $stepTotalTimer = sp + 490|0;
 $step = sp + 448|0;
 $stepNarrowPhaseTimer = sp + 489|0;
 $stepSolverTimer = sp + 488|0;
 $0 = $this;
 $1 = $dt;
 $2 = $velocityIterations;
 $3 = $positionIterations;
 $4 = $0;
 __ZN7b2TimerC2Ev($stepTotalTimer);
 __ZN7b2World17InitializeGPUDataEv($4);
 $5 = ((($4)) + 103092|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if ($7) {
  label = 3;
 } else {
  $8 = ((($4)) + 103093|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if ($10) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $11 = ((($4)) + 102876|0);
  __ZN16b2ContactManager15FindNewContactsEv($11);
  $12 = ((($4)) + 102872|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & -2;
  HEAP32[$12>>2] = $14;
 }
 $15 = ((($4)) + 103092|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&1;
 if ($17) {
  $18 = ((($4)) + 103092|0);
  HEAP8[$18>>0] = 0;
 }
 $19 = ((($4)) + 103093|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if ($21) {
  $22 = ((($4)) + 103093|0);
  HEAP8[$22>>0] = 0;
 }
 $23 = ((($4)) + 102872|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | 2;
 HEAP32[$23>>2] = $25;
 $26 = $1;
 HEAPF32[$step>>2] = $26;
 $27 = $2;
 $28 = ((($step)) + 12|0);
 HEAP32[$28>>2] = $27;
 $29 = $3;
 $30 = ((($step)) + 16|0);
 HEAP32[$30>>2] = $29;
 $31 = $1;
 $32 = $31 > 0.0;
 if ($32) {
  $33 = $1;
  $34 = 1.0 / $33;
  $35 = ((($step)) + 4|0);
  HEAPF32[$35>>2] = $34;
 } else {
  $36 = ((($step)) + 4|0);
  HEAPF32[$36>>2] = 0.0;
 }
 $37 = ((($4)) + 103124|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = $38 * $39;
 $41 = ((($step)) + 8|0);
 HEAPF32[$41>>2] = $40;
 $42 = ((($4)) + 103128|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&1;
 $45 = ((($step)) + 20|0);
 $46 = $44&1;
 HEAP8[$45>>0] = $46;
 __ZN7b2TimerC2Ev($stepNarrowPhaseTimer);
 $47 = +HEAPF32[$step>>2];
 $48 = $47 > 0.0;
 if ($48) {
  $49 = ((($4)) + 102876|0);
  __ZN16b2ContactManager7CollideEv($49);
 }
 $50 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($50);
 $51 = (+__ZNK7b2Timer15GetMillisecondsEv($stepNarrowPhaseTimer));
 $52 = ((($4)) + 103924|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $53 + $51;
 HEAPF32[$52>>2] = $54;
 __ZN7b2TimerC2Ev($stepSolverTimer);
 $55 = +HEAPF32[$step>>2];
 $56 = $55 > 0.0;
 if ($56) {
  __ZN7b2World5SolveERK10b2TimeStep($4,$step);
 }
 $57 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($57);
 $58 = (+__ZNK7b2Timer15GetMillisecondsEv($stepSolverTimer));
 $59 = ((($4)) + 103928|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $60 + $58;
 HEAPF32[$59>>2] = $61;
 $62 = ((($4)) + 103129|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&1;
 if ($64) {
  $65 = +HEAPF32[$step>>2];
  $66 = $65 > 0.0;
  if ($66) {
   __ZN7b2World8SolveTOIERK10b2TimeStep($4,$step);
  }
 }
 $67 = +HEAPF32[$step>>2];
 $68 = $67 > 0.0;
 if ($68) {
  $69 = ((($step)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = ((($4)) + 103124|0);
  HEAPF32[$71>>2] = $70;
 }
 $72 = ((($4)) + 102872|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & 4;
 $75 = ($74|0)!=(0);
 if ($75) {
  __ZN7b2World11ClearForcesEv($4);
 }
 $76 = ((($4)) + 102872|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 & -3;
 HEAP32[$76>>2] = $78;
 $79 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($79);
 $80 = (+__ZNK7b2Timer15GetMillisecondsEv($stepTotalTimer));
 $81 = ((($4)) + 103920|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $82 + $80;
 HEAPF32[$81>>2] = $83;
 $84 = ((($4)) + 103892|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 HEAP32[$84>>2] = $86;
 $87 = ((($4)) + 103892|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)>=(60);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = ((($4)) + 103916|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&1;
 if ($92) {
  $93 = (_fopen(20834,20861)|0);
  $94 = ((($4)) + 103912|0);
  HEAP32[$94>>2] = $93;
  $95 = ((($4)) + 103912|0);
  $96 = HEAP32[$95>>2]|0;
  (_fprintf($96,20863,$vararg_buffer)|0);
  $97 = ((($4)) + 103912|0);
  $98 = HEAP32[$97>>2]|0;
  (_fprintf($98,20944,$vararg_buffer1)|0);
  $99 = ((($4)) + 103912|0);
  $100 = HEAP32[$99>>2]|0;
  (_fprintf($100,21023,$vararg_buffer3)|0);
  $101 = ((($4)) + 103912|0);
  $102 = HEAP32[$101>>2]|0;
  (_fprintf($102,21107,$vararg_buffer5)|0);
  $103 = ((($4)) + 103912|0);
  $104 = HEAP32[$103>>2]|0;
  (_fprintf($104,21197,$vararg_buffer7)|0);
 }
 (_printf(21197,$vararg_buffer9)|0);
 $105 = ((($4)) + 103920|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $106 / 60.0;
 HEAPF32[$105>>2] = $107;
 $108 = ((($4)) + 103924|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $109 / 60.0;
 HEAPF32[$108>>2] = $110;
 $111 = ((($4)) + 103928|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $112 / 60.0;
 HEAPF32[$111>>2] = $113;
 $114 = ((($4)) + 103932|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $115 / 60.0;
 HEAPF32[$114>>2] = $116;
 $117 = ((($4)) + 103936|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $118 / 60.0;
 HEAPF32[$117>>2] = $119;
 $120 = ((($4)) + 103940|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $121 / 60.0;
 HEAPF32[$120>>2] = $122;
 $123 = ((($4)) + 103920|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $124;
 HEAPF64[$vararg_buffer11>>3] = $125;
 (_printf(21199,$vararg_buffer11)|0);
 $126 = ((($4)) + 103924|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $127;
 HEAPF64[$vararg_buffer13>>3] = $128;
 (_printf(21226,$vararg_buffer13)|0);
 $129 = ((($4)) + 103928|0);
 $130 = +HEAPF32[$129>>2];
 $131 = ((($4)) + 103932|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $130 - $132;
 $134 = $133;
 HEAPF64[$vararg_buffer16>>3] = $134;
 (_printf(21256,$vararg_buffer16)|0);
 $135 = ((($4)) + 103932|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $136;
 HEAPF64[$vararg_buffer19>>3] = $137;
 (_printf(21280,$vararg_buffer19)|0);
 $138 = ((($4)) + 103940|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $139;
 HEAPF64[$vararg_buffer22>>3] = $140;
 (_printf(21309,$vararg_buffer22)|0);
 (_printf(21337,$vararg_buffer25)|0);
 $141 = ((($4)) + 103916|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&1;
 if ($143) {
  $144 = ((($4)) + 103912|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($4)) + 103076|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ((($4)) + 103088|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ((($4)) + 103920|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $151;
  $153 = ((($4)) + 103924|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $154;
  $156 = ((($4)) + 103928|0);
  $157 = +HEAPF32[$156>>2];
  $158 = ((($4)) + 103932|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $157 - $159;
  $161 = $160;
  $162 = ((($4)) + 103932|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $163;
  HEAP32[$vararg_buffer27>>2] = $147;
  $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $149;
  $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
  HEAPF64[$vararg_ptr31>>3] = $152;
  $vararg_ptr32 = ((($vararg_buffer27)) + 16|0);
  HEAPF64[$vararg_ptr32>>3] = $155;
  $vararg_ptr33 = ((($vararg_buffer27)) + 24|0);
  HEAPF64[$vararg_ptr33>>3] = $161;
  $vararg_ptr34 = ((($vararg_buffer27)) + 32|0);
  HEAPF64[$vararg_ptr34>>3] = $164;
  (_fprintf($145,21379,$vararg_buffer27)|0);
 }
 $165 = ((($4)) + 103920|0);
 HEAPF32[$165>>2] = 0.0;
 $166 = ((($4)) + 103940|0);
 HEAPF32[$166>>2] = 0.0;
 $167 = ((($4)) + 103936|0);
 HEAPF32[$167>>2] = 0.0;
 $168 = ((($4)) + 103932|0);
 HEAPF32[$168>>2] = 0.0;
 $169 = ((($4)) + 103928|0);
 HEAPF32[$169>>2] = 0.0;
 $170 = ((($4)) + 103924|0);
 HEAPF32[$170>>2] = 0.0;
 $171 = ((($4)) + 103944|0);
 $172 = +HEAPF32[$171>>2];
 $173 = $172 / 60.0;
 HEAPF32[$171>>2] = $173;
 $174 = ((($4)) + 103948|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $175 / 60.0;
 HEAPF32[$174>>2] = $176;
 $177 = ((($4)) + 103952|0);
 $178 = +HEAPF32[$177>>2];
 $179 = $178 / 60.0;
 HEAPF32[$177>>2] = $179;
 $180 = ((($4)) + 103956|0);
 $181 = +HEAPF32[$180>>2];
 $182 = $181 / 60.0;
 HEAPF32[$180>>2] = $182;
 $183 = ((($4)) + 103960|0);
 $184 = +HEAPF32[$183>>2];
 $185 = $184 / 60.0;
 HEAPF32[$183>>2] = $185;
 $186 = ((($4)) + 103944|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $187;
 HEAPF64[$vararg_buffer35>>3] = $188;
 (_printf(21406,$vararg_buffer35)|0);
 $189 = ((($4)) + 103948|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $190;
 HEAPF64[$vararg_buffer38>>3] = $191;
 (_printf(21449,$vararg_buffer38)|0);
 $192 = ((($4)) + 103952|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $193;
 HEAPF64[$vararg_buffer41>>3] = $194;
 (_printf(21494,$vararg_buffer41)|0);
 $195 = ((($4)) + 103956|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $196;
 HEAPF64[$vararg_buffer44>>3] = $197;
 (_printf(21535,$vararg_buffer44)|0);
 $198 = ((($4)) + 103960|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $199;
 HEAPF64[$vararg_buffer47>>3] = $200;
 (_printf(21573,$vararg_buffer47)|0);
 $201 = ((($4)) + 103916|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 if ($203) {
  $204 = ((($4)) + 103912|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ((($4)) + 103944|0);
  $207 = +HEAPF32[$206>>2];
  $208 = $207;
  $209 = ((($4)) + 103948|0);
  $210 = +HEAPF32[$209>>2];
  $211 = $210;
  $212 = ((($4)) + 103952|0);
  $213 = +HEAPF32[$212>>2];
  $214 = $213;
  $215 = ((($4)) + 103956|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $216;
  $218 = ((($4)) + 103960|0);
  $219 = +HEAPF32[$218>>2];
  $220 = $219;
  HEAPF64[$vararg_buffer50>>3] = $208;
  $vararg_ptr53 = ((($vararg_buffer50)) + 8|0);
  HEAPF64[$vararg_ptr53>>3] = $211;
  $vararg_ptr54 = ((($vararg_buffer50)) + 16|0);
  HEAPF64[$vararg_ptr54>>3] = $214;
  $vararg_ptr55 = ((($vararg_buffer50)) + 24|0);
  HEAPF64[$vararg_ptr55>>3] = $217;
  $vararg_ptr56 = ((($vararg_buffer50)) + 32|0);
  HEAPF64[$vararg_ptr56>>3] = $220;
  (_fprintf($205,21614,$vararg_buffer50)|0);
 }
 $221 = ((($4)) + 103944|0);
 HEAPF32[$221>>2] = 0.0;
 $222 = ((($4)) + 103960|0);
 HEAPF32[$222>>2] = 0.0;
 $223 = ((($4)) + 103956|0);
 HEAPF32[$223>>2] = 0.0;
 $224 = ((($4)) + 103952|0);
 HEAPF32[$224>>2] = 0.0;
 $225 = ((($4)) + 103948|0);
 HEAPF32[$225>>2] = 0.0;
 $226 = ((($4)) + 103896|0);
 $227 = +HEAPF64[$226>>3];
 $228 = $227 / 60.0;
 HEAPF64[$226>>3] = $228;
 $229 = ((($4)) + 103964|0);
 $230 = +HEAPF32[$229>>2];
 $231 = $230 / 60.0;
 HEAPF32[$229>>2] = $231;
 $232 = ((($4)) + 103968|0);
 $233 = +HEAPF32[$232>>2];
 $234 = $233 / 60.0;
 HEAPF32[$232>>2] = $234;
 $235 = ((($4)) + 103972|0);
 $236 = +HEAPF32[$235>>2];
 $237 = $236 / 60.0;
 HEAPF32[$235>>2] = $237;
 $238 = ((($4)) + 103976|0);
 $239 = +HEAPF32[$238>>2];
 $240 = $239 / 60.0;
 HEAPF32[$238>>2] = $240;
 $241 = ((($4)) + 103896|0);
 $242 = +HEAPF64[$241>>3];
 HEAPF64[$vararg_buffer57>>3] = $242;
 (_printf(21637,$vararg_buffer57)|0);
 $243 = ((($4)) + 103964|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $244;
 HEAPF64[$vararg_buffer60>>3] = $245;
 (_printf(21660,$vararg_buffer60)|0);
 $246 = ((($4)) + 103968|0);
 $247 = +HEAPF32[$246>>2];
 $248 = $247;
 HEAPF64[$vararg_buffer63>>3] = $248;
 (_printf(21704,$vararg_buffer63)|0);
 $249 = ((($4)) + 103972|0);
 $250 = +HEAPF32[$249>>2];
 $251 = $250;
 HEAPF64[$vararg_buffer66>>3] = $251;
 (_printf(21750,$vararg_buffer66)|0);
 $252 = ((($4)) + 103976|0);
 $253 = +HEAPF32[$252>>2];
 $254 = $253;
 HEAPF64[$vararg_buffer69>>3] = $254;
 (_printf(21797,$vararg_buffer69)|0);
 $255 = ((($4)) + 103916|0);
 $256 = HEAP8[$255>>0]|0;
 $257 = $256&1;
 if ($257) {
  $258 = ((($4)) + 103912|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ((($4)) + 103896|0);
  $261 = +HEAPF64[$260>>3];
  $262 = ((($4)) + 103964|0);
  $263 = +HEAPF32[$262>>2];
  $264 = $263;
  $265 = ((($4)) + 103968|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $266;
  $268 = ((($4)) + 103972|0);
  $269 = +HEAPF32[$268>>2];
  $270 = $269;
  $271 = ((($4)) + 103976|0);
  $272 = +HEAPF32[$271>>2];
  $273 = $272;
  HEAPF64[$vararg_buffer72>>3] = $261;
  $vararg_ptr75 = ((($vararg_buffer72)) + 8|0);
  HEAPF64[$vararg_ptr75>>3] = $264;
  $vararg_ptr76 = ((($vararg_buffer72)) + 16|0);
  HEAPF64[$vararg_ptr76>>3] = $267;
  $vararg_ptr77 = ((($vararg_buffer72)) + 24|0);
  HEAPF64[$vararg_ptr77>>3] = $270;
  $vararg_ptr78 = ((($vararg_buffer72)) + 32|0);
  HEAPF64[$vararg_ptr78>>3] = $273;
  (_fprintf($259,21614,$vararg_buffer72)|0);
 }
 $274 = ((($4)) + 103896|0);
 HEAPF64[$274>>3] = 0.0;
 $275 = ((($4)) + 103964|0);
 HEAPF32[$275>>2] = 0.0;
 $276 = ((($4)) + 103976|0);
 HEAPF32[$276>>2] = 0.0;
 $277 = ((($4)) + 103972|0);
 HEAPF32[$277>>2] = 0.0;
 $278 = ((($4)) + 103968|0);
 HEAPF32[$278>>2] = 0.0;
 $279 = ((($4)) + 103904|0);
 $280 = +HEAPF64[$279>>3];
 $281 = $280 / 60.0;
 HEAPF64[$279>>3] = $281;
 $282 = ((($4)) + 103980|0);
 $283 = +HEAPF32[$282>>2];
 $284 = $283 / 60.0;
 HEAPF32[$282>>2] = $284;
 $285 = ((($4)) + 103984|0);
 $286 = +HEAPF32[$285>>2];
 $287 = $286 / 60.0;
 HEAPF32[$285>>2] = $287;
 $288 = ((($4)) + 103988|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $289 / 60.0;
 HEAPF32[$288>>2] = $290;
 $291 = ((($4)) + 103992|0);
 $292 = +HEAPF32[$291>>2];
 $293 = $292 / 60.0;
 HEAPF32[$291>>2] = $293;
 $294 = ((($4)) + 103996|0);
 $295 = +HEAPF32[$294>>2];
 $296 = $295 / 60.0;
 HEAPF32[$294>>2] = $296;
 $297 = ((($4)) + 103904|0);
 $298 = +HEAPF64[$297>>3];
 HEAPF64[$vararg_buffer79>>3] = $298;
 (_printf(21841,$vararg_buffer79)|0);
 $299 = ((($4)) + 103980|0);
 $300 = +HEAPF32[$299>>2];
 $301 = $300;
 HEAPF64[$vararg_buffer82>>3] = $301;
 (_printf(21870,$vararg_buffer82)|0);
 $302 = ((($4)) + 103984|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $303;
 HEAPF64[$vararg_buffer85>>3] = $304;
 (_printf(21920,$vararg_buffer85)|0);
 $305 = ((($4)) + 103988|0);
 $306 = +HEAPF32[$305>>2];
 $307 = $306;
 HEAPF64[$vararg_buffer88>>3] = $307;
 (_printf(21978,$vararg_buffer88)|0);
 $308 = ((($4)) + 103992|0);
 $309 = +HEAPF32[$308>>2];
 $310 = $309;
 HEAPF64[$vararg_buffer91>>3] = $310;
 (_printf(22036,$vararg_buffer91)|0);
 $311 = ((($4)) + 103996|0);
 $312 = +HEAPF32[$311>>2];
 $313 = $312;
 HEAPF64[$vararg_buffer94>>3] = $313;
 (_printf(22083,$vararg_buffer94)|0);
 $314 = ((($4)) + 104000|0);
 $315 = +HEAPF32[$314>>2];
 $316 = $315 / 60.0;
 $317 = $316;
 HEAPF64[$vararg_buffer97>>3] = $317;
 (_printf(22127,$vararg_buffer97)|0);
 $318 = ((($4)) + 104000|0);
 HEAPF32[$318>>2] = 0.0;
 (_printf(22167,$vararg_buffer100)|0);
 $319 = ((($4)) + 104004|0);
 $320 = +HEAPF32[$319>>2];
 $321 = $320 / 60.0;
 HEAPF32[$319>>2] = $321;
 $322 = ((($4)) + 104008|0);
 $323 = +HEAPF32[$322>>2];
 $324 = $323 / 60.0;
 HEAPF32[$322>>2] = $324;
 $325 = ((($4)) + 104012|0);
 $326 = +HEAPF32[$325>>2];
 $327 = $326 / 60.0;
 HEAPF32[$325>>2] = $327;
 $328 = ((($4)) + 104004|0);
 $329 = +HEAPF32[$328>>2];
 $330 = $329;
 HEAPF64[$vararg_buffer102>>3] = $330;
 (_printf(22199,$vararg_buffer102)|0);
 $331 = ((($4)) + 104012|0);
 $332 = +HEAPF32[$331>>2];
 $333 = $332;
 HEAPF64[$vararg_buffer105>>3] = $333;
 (_printf(22253,$vararg_buffer105)|0);
 $334 = ((($4)) + 104008|0);
 $335 = +HEAPF32[$334>>2];
 $336 = $335;
 HEAPF64[$vararg_buffer108>>3] = $336;
 (_printf(22312,$vararg_buffer108)|0);
 $337 = ((($4)) + 104012|0);
 HEAPF32[$337>>2] = 0.0;
 $338 = ((($4)) + 104008|0);
 HEAPF32[$338>>2] = 0.0;
 $339 = ((($4)) + 104004|0);
 HEAPF32[$339>>2] = 0.0;
 $340 = ((($4)) + 103916|0);
 $341 = HEAP8[$340>>0]|0;
 $342 = $341&1;
 if ($342) {
  $343 = ((($4)) + 103912|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ((($4)) + 103904|0);
  $346 = +HEAPF64[$345>>3];
  $347 = ((($4)) + 103980|0);
  $348 = +HEAPF32[$347>>2];
  $349 = $348;
  $350 = ((($4)) + 103984|0);
  $351 = +HEAPF32[$350>>2];
  $352 = $351;
  $353 = ((($4)) + 103988|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $354;
  $356 = ((($4)) + 103992|0);
  $357 = +HEAPF32[$356>>2];
  $358 = $357;
  $359 = ((($4)) + 103996|0);
  $360 = +HEAPF32[$359>>2];
  $361 = $360;
  HEAPF64[$vararg_buffer111>>3] = $346;
  $vararg_ptr114 = ((($vararg_buffer111)) + 8|0);
  HEAPF64[$vararg_ptr114>>3] = $349;
  $vararg_ptr115 = ((($vararg_buffer111)) + 16|0);
  HEAPF64[$vararg_ptr115>>3] = $352;
  $vararg_ptr116 = ((($vararg_buffer111)) + 24|0);
  HEAPF64[$vararg_ptr116>>3] = $355;
  $vararg_ptr117 = ((($vararg_buffer111)) + 32|0);
  HEAPF64[$vararg_ptr117>>3] = $358;
  $vararg_ptr118 = ((($vararg_buffer111)) + 40|0);
  HEAPF64[$vararg_ptr118>>3] = $361;
  (_fprintf($344,22366,$vararg_buffer111)|0);
 }
 $362 = ((($4)) + 103892|0);
 HEAP32[$362>>2] = 0;
 $363 = ((($4)) + 103904|0);
 HEAPF64[$363>>3] = 0.0;
 $364 = ((($4)) + 103980|0);
 HEAPF32[$364>>2] = 0.0;
 $365 = ((($4)) + 103996|0);
 HEAPF32[$365>>2] = 0.0;
 $366 = ((($4)) + 103992|0);
 HEAPF32[$366>>2] = 0.0;
 $367 = ((($4)) + 103988|0);
 HEAPF32[$367>>2] = 0.0;
 $368 = ((($4)) + 103984|0);
 HEAPF32[$368>>2] = 0.0;
 $369 = ((($4)) + 103892|0);
 HEAP32[$369>>2] = 0;
 $370 = ((($4)) + 103916|0);
 $371 = HEAP8[$370>>0]|0;
 $372 = $371&1;
 if (!($372)) {
  STACKTOP = sp;return;
 }
 $373 = ((($4)) + 103916|0);
 HEAP8[$373>>0] = 0;
 $374 = ((($4)) + 103912|0);
 $375 = HEAP32[$374>>2]|0;
 (_fclose($375)|0);
 (_printf(22393,$vararg_buffer119)|0);
 $376 = ((($4)) + 103076|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = ((($4)) + 103088|0);
 $379 = HEAP32[$378>>2]|0;
 HEAP32[$vararg_buffer121>>2] = $377;
 $vararg_ptr124 = ((($vararg_buffer121)) + 4|0);
 HEAP32[$vararg_ptr124>>2] = $379;
 (_printf(22416,$vararg_buffer121)|0);
 STACKTOP = sp;return;
}
function __ZN7b2World11ClearForcesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $body = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 103068|0);
 $3 = HEAP32[$2>>2]|0;
 $body = $3;
 while(1) {
  $4 = $body;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $body;
  $7 = ((($6)) + 76|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $8 != 0.0;
  if ($9) {
   label = 5;
  } else {
   $10 = $body;
   $11 = ((($10)) + 76|0);
   $12 = ((($11)) + 4|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 != 0.0;
   if ($14) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $15 = $body;
   $16 = ((($15)) + 76|0);
   __ZN6b2Vec27SetZeroEv($16);
   $17 = ((($1)) + 103095|0);
   HEAP8[$17>>0] = 1;
  }
  $18 = $body;
  $19 = ((($18)) + 84|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 != 0.0;
  if ($21) {
   $22 = $body;
   $23 = ((($22)) + 84|0);
   HEAPF32[$23>>2] = 0.0;
   $24 = ((($1)) + 103095|0);
   HEAP8[$24>>0] = 1;
  }
  $25 = $body;
  $26 = (__ZN6b2Body7GetNextEv($25)|0);
  $body = $26;
 }
 STACKTOP = sp;return;
}
function __ZNK6b2Body12GetTransformEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK9b2Fixture7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK7b2Shape7GetTypeEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK7b2World13GetProxyCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 102876|0);
 $3 = (__ZNK12b2BroadPhase13GetProxyCountEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK12b2BroadPhase13GetProxyCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15b2ContactFilterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(48,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collide = 0, $filterA = 0, $filterB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 21|0;
 $1 = $this;
 $2 = $fixtureA;
 $3 = $fixtureB;
 $4 = $2;
 $5 = (__ZNK9b2Fixture13GetFilterDataEv($4)|0);
 $filterA = $5;
 $6 = $3;
 $7 = (__ZNK9b2Fixture13GetFilterDataEv($6)|0);
 $filterB = $7;
 $8 = $filterA;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = $filterB;
 $13 = ((($12)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($11|0)==($15|0);
 if ($16) {
  $17 = $filterA;
  $18 = ((($17)) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $filterA;
   $23 = ((($22)) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = ($25|0)>(0);
   $$expand_i1_val = $26&1;
   HEAP8[$0>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $49 = $$pre_trunc&1;
   STACKTOP = sp;return ($49|0);
  }
 }
 $27 = $filterA;
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $filterB;
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $30 & $33;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $filterA;
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = $filterB;
  $40 = ((($39)) + 2|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $38 & $42;
  $44 = ($43|0)!=(0);
  $46 = $44;
 } else {
  $46 = 0;
 }
 $45 = $46&1;
 $collide = $45;
 $47 = $collide;
 $48 = $47&1;
 $$expand_i1_val2 = $48&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function __ZNK9b2Fixture13GetFilterDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edge = sp + 8|0;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN9b2Fixture8GetShapeEv($8)|0);
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = ((($6)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viii(505,($10|0),($edge|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $1;
  $16 = $2;
  $17 = ((($6)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_ii(483,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(506,($15|0),($edge|0),($16|0),($19|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch_2()|0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __THREW__ = 0;
 invoke_vi(4,($edge|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch_3(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 } else {
  $29 = $4;
  $30 = $5;
  ___resumeException($29|0);
  // unreachable;
 }
}
function __ZN23b2ChainAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9b2ContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN23b2ChainAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(52,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = (__ZN16b2BlockAllocator8AllocateEi($5,144)|0);
 $mem = $6;
 $7 = $mem;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 STACKTOP = sp;return ($7|0);
}
function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this,$fixtureA,$indexA,$fixtureB,$indexB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 $12 = 2120;
 HEAP32[$7>>2] = $12;
 $13 = ((($7)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_ii(507,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(3);
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiii(424,(22646|0),(22494|0),43,(22595|0));
    $19 = __THREW__; __THREW__ = 0;
    break;
   }
   $24 = ((($7)) + 52|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   $26 = (invoke_ii(507,($25|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = ($26|0)==(0);
    if ($29) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24039|0),(22494|0),44,(22595|0));
     $30 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(60,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $33 = ___cxa_find_matching_catch_3(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edge = sp + 8|0;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN9b2Fixture8GetShapeEv($8)|0);
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = ((($6)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viii(505,($10|0),($edge|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $1;
  $16 = $2;
  $17 = ((($6)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_ii(483,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(508,($15|0),($edge|0),($16|0),($19|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch_2()|0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __THREW__ = 0;
 invoke_vi(4,($edge|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch_3(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 } else {
  $29 = $4;
  $30 = $5;
  ___resumeException($29|0);
  // unreachable;
 }
}
function __ZN24b2ChainAndPolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN24b2ChainAndPolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(55,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = (__ZN16b2BlockAllocator8AllocateEi($5,144)|0);
 $mem = $6;
 $7 = $mem;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 STACKTOP = sp;return ($7|0);
}
function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this,$fixtureA,$indexA,$fixtureB,$indexB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 $12 = 2140;
 HEAP32[$7>>2] = $12;
 $13 = ((($7)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_ii(507,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(3);
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiii(424,(22646|0),(22688|0),43,(22790|0));
    $19 = __THREW__; __THREW__ = 0;
    break;
   }
   $24 = ((($7)) + 52|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   $26 = (invoke_ii(507,($25|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = ($26|0)==(2);
    if ($29) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24256|0),(22688|0),44,(22790|0));
     $30 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(60,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $33 = ___cxa_find_matching_catch_3(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = ((($4)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(58,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN15b2CircleContactC2EP9b2FixtureS1_($9,$10,$11);
 STACKTOP = sp;return ($9|0);
}
function __ZN15b2CircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = 2160;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(507,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(0);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(424,(22833|0),(22876|0),44,(22969|0));
    $15 = __THREW__; __THREW__ = 0;
    break;
   }
   $20 = ((($5)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(507,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ($22|0)==(0);
    if ($25) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24039|0),(22876|0),45,(22969|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN9b2Contact19InitializeRegistersEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(509,510,0,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(511,512,2,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(513,514,2,2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(515,516,1,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(517,518,1,2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(519,520,3,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(521,522,3,2);
 return;
}
function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn,$destoryFcn,$type1,$type2) {
 $createFcn = $createFcn|0;
 $destoryFcn = $destoryFcn|0;
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $createFcn;
 $1 = $destoryFcn;
 $2 = $type1;
 $3 = $type2;
 $4 = $2;
 $5 = (0)<=($4|0);
 $6 = $2;
 $7 = ($6|0)<(4);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  ___assert_fail((22985|0),(23028|0),54,(23115|0));
  // unreachable;
 }
 $8 = $3;
 $9 = (0)<=($8|0);
 $10 = $3;
 $11 = ($10|0)<(4);
 $or$cond3 = $9 & $11;
 if (!($or$cond3)) {
  ___assert_fail((23123|0),(23028|0),55,(23115|0));
  // unreachable;
 }
 $12 = $0;
 $13 = $3;
 $14 = $2;
 $15 = (32688 + (($14*48)|0)|0);
 $16 = (($15) + (($13*12)|0)|0);
 HEAP32[$16>>2] = $12;
 $17 = $1;
 $18 = $3;
 $19 = $2;
 $20 = (32688 + (($19*48)|0)|0);
 $21 = (($20) + (($18*12)|0)|0);
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = $3;
 $24 = $2;
 $25 = (32688 + (($24*48)|0)|0);
 $26 = (($25) + (($23*12)|0)|0);
 $27 = ((($26)) + 8|0);
 HEAP8[$27>>0] = 1;
 $28 = $2;
 $29 = $3;
 $30 = ($28|0)!=($29|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $0;
 $32 = $2;
 $33 = $3;
 $34 = (32688 + (($33*48)|0)|0);
 $35 = (($34) + (($32*12)|0)|0);
 HEAP32[$35>>2] = $31;
 $36 = $1;
 $37 = $2;
 $38 = $3;
 $39 = (32688 + (($38*48)|0)|0);
 $40 = (($39) + (($37*12)|0)|0);
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $36;
 $42 = $2;
 $43 = $3;
 $44 = (32688 + (($43*48)|0)|0);
 $45 = (($44) + (($42*12)|0)|0);
 $46 = ((($45)) + 8|0);
 HEAP8[$46>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $createFcn = 0, $or$cond = 0, $or$cond3 = 0, $type1 = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $5 = $allocator;
 $6 = HEAP8[42174]|0;
 $7 = $6&1;
 $8 = $7&1;
 $9 = ($8|0)==(0);
 if ($9) {
  __ZN9b2Contact19InitializeRegistersEv();
  HEAP8[42174] = 1;
 }
 $10 = $1;
 $11 = (__ZNK9b2Fixture7GetTypeEv($10)|0);
 $type1 = $11;
 $12 = $3;
 $13 = (__ZNK9b2Fixture7GetTypeEv($12)|0);
 $type2 = $13;
 $14 = $type1;
 $15 = (0)<=($14|0);
 $16 = $type1;
 $17 = ($16|0)<(4);
 $or$cond = $15 & $17;
 if (!($or$cond)) {
  ___assert_fail((22985|0),(23028|0),80,(23166|0));
  // unreachable;
 }
 $18 = $type2;
 $19 = (0)<=($18|0);
 $20 = $type2;
 $21 = ($20|0)<(4);
 $or$cond3 = $19 & $21;
 if (!($or$cond3)) {
  ___assert_fail((23123|0),(23028|0),81,(23166|0));
  // unreachable;
 }
 $22 = $type2;
 $23 = $type1;
 $24 = (32688 + (($23*48)|0)|0);
 $25 = (($24) + (($22*12)|0)|0);
 $26 = HEAP32[$25>>2]|0;
 $createFcn = $26;
 $27 = $createFcn;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $29 = $type2;
 $30 = $type1;
 $31 = (32688 + (($30*48)|0)|0);
 $32 = (($31) + (($29*12)|0)|0);
 $33 = ((($32)) + 8|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 $36 = $createFcn;
 if ($35) {
  $37 = $1;
  $38 = $2;
  $39 = $3;
  $40 = $4;
  $41 = $5;
  $42 = (FUNCTION_TABLE_iiiiii[$36 & 1023]($37,$38,$39,$40,$41)|0);
  $0 = $42;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $43 = $3;
  $44 = $4;
  $45 = $1;
  $46 = $2;
  $47 = $5;
  $48 = (FUNCTION_TABLE_iiiiii[$36 & 1023]($43,$44,$45,$46,$47)|0);
  $0 = $48;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $destroyFcn = 0, $or$cond = 0, $or$cond3 = 0, $typeA = 0, $typeB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = HEAP8[42174]|0;
 $3 = $2&1;
 $4 = $3&1;
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___assert_fail((23173|0),(23028|0),103,(23195|0));
  // unreachable;
 }
 $6 = $0;
 $7 = ((($6)) + 64|0);
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = $0;
  $12 = (__ZN9b2Contact11GetFixtureAEv($11)|0);
  $13 = (__ZN9b2Fixture7GetBodyEv($12)|0);
  __ZN6b2Body8SetAwakeEb($13,1);
  $14 = $0;
  $15 = (__ZN9b2Contact11GetFixtureBEv($14)|0);
  $16 = (__ZN9b2Fixture7GetBodyEv($15)|0);
  __ZN6b2Body8SetAwakeEb($16,1);
 }
 $17 = $0;
 $18 = (__ZN9b2Contact11GetFixtureAEv($17)|0);
 $19 = (__ZNK9b2Fixture7GetTypeEv($18)|0);
 $typeA = $19;
 $20 = $0;
 $21 = (__ZN9b2Contact11GetFixtureBEv($20)|0);
 $22 = (__ZNK9b2Fixture7GetTypeEv($21)|0);
 $typeB = $22;
 $23 = $typeA;
 $24 = (0)<=($23|0);
 $25 = $typeB;
 $26 = ($25|0)<(4);
 $or$cond = $24 & $26;
 if (!($or$cond)) {
  ___assert_fail((23203|0),(23028|0),114,(23195|0));
  // unreachable;
 }
 $27 = $typeA;
 $28 = (0)<=($27|0);
 $29 = $typeB;
 $30 = ($29|0)<(4);
 $or$cond3 = $28 & $30;
 if ($or$cond3) {
  $31 = $typeB;
  $32 = $typeA;
  $33 = (32688 + (($32*48)|0)|0);
  $34 = (($33) + (($31*12)|0)|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $destroyFcn = $36;
  $37 = $destroyFcn;
  $38 = $0;
  $39 = $1;
  FUNCTION_TABLE_vii[$37 & 1023]($38,$39);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((23203|0),(23028|0),115,(23195|0));
  // unreachable;
 }
}
function __ZN9b2ContactC2EP9b2FixtureiS1_i($this,$fA,$indexA,$fB,$indexB) {
 $this = $this|0;
 $fA = $fA|0;
 $indexA = $indexA|0;
 $fB = $fB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fA;
 $2 = $indexA;
 $3 = $fB;
 $4 = $indexB;
 $5 = $0;
 $6 = 2180;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 64|0);
 __ZN10b2ManifoldC2Ev($7);
 $8 = ((($5)) + 4|0);
 HEAP32[$8>>2] = 4;
 $9 = $1;
 $10 = ((($5)) + 48|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = ((($5)) + 52|0);
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = ((($5)) + 56|0);
 HEAP32[$14>>2] = $13;
 $15 = $4;
 $16 = ((($5)) + 60|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($5)) + 64|0);
 $18 = ((($17)) + 60|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($5)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($5)) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($5)) + 16|0);
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($5)) + 16|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($5)) + 16|0);
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($5)) + 16|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($5)) + 32|0);
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($5)) + 32|0);
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($5)) + 32|0);
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($5)) + 32|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($5)) + 128|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($5)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 24|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($5)) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 24|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (+__Z13b2MixFrictionff($39,$43));
 $45 = ((($5)) + 136|0);
 HEAPF32[$45>>2] = $44;
 $46 = ((($5)) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 28|0);
 $49 = +HEAPF32[$48>>2];
 $50 = ((($5)) + 52|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 28|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (+__Z16b2MixRestitutionff($49,$53));
 $55 = ((($5)) + 140|0);
 HEAPF32[$55>>2] = $54;
 STACKTOP = sp;return;
}
function __ZN9b2ContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(60,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __Z13b2MixFrictionff($friction1,$friction2) {
 $friction1 = +$friction1;
 $friction2 = +$friction2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $friction1;
 $2 = $friction2;
 $3 = $1;
 $4 = $2;
 $5 = $3 * $4;
 $0 = $5;
 $6 = $0;
 $7 = (+Math_sqrt((+$6)));
 STACKTOP = sp;return (+$7);
}
function __Z16b2MixRestitutionff($restitution1,$restitution2) {
 $restitution1 = +$restitution1;
 $restitution2 = +$restitution2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $restitution1;
 $1 = $restitution2;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return (+$7);
}
function __ZN9b2Contact6UpdateEP17b2ContactListener($this,$listener) {
 $this = $this|0;
 $listener = $listener|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0;
 var $bodyA = 0, $bodyB = 0, $i = 0, $id2 = 0, $j = 0, $mp1 = 0, $mp2 = 0, $oldManifold = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $sensor = 0, $sensorA = 0, $sensorB = 0, $shapeA = 0, $shapeB = 0, $touching = 0, $wasTouching = 0, $xfA = 0, $xfB = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $oldManifold = sp + 48|0;
 $id2 = sp + 8|0;
 $0 = $this;
 $1 = $listener;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 dest=$oldManifold; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 4;
 HEAP32[$4>>2] = $6;
 $touching = 0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)==(2);
 $11 = $10&1;
 $wasTouching = $11;
 $12 = ((($2)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZNK9b2Fixture8IsSensorEv($13)|0);
 $15 = $14&1;
 $sensorA = $15;
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZNK9b2Fixture8IsSensorEv($17)|0);
 $19 = $18&1;
 $sensorB = $19;
 $20 = $sensorA;
 $21 = $20&1;
 $22 = $sensorB;
 $23 = $22&1;
 $24 = $21 ? 1 : $23;
 $25 = $24&1;
 $sensor = $25;
 $26 = ((($2)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZN9b2Fixture7GetBodyEv($27)|0);
 $bodyA = $28;
 $29 = ((($2)) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (__ZN9b2Fixture7GetBodyEv($30)|0);
 $bodyB = $31;
 $32 = $bodyA;
 $33 = (__ZNK6b2Body12GetTransformEv($32)|0);
 $xfA = $33;
 $34 = $bodyB;
 $35 = (__ZNK6b2Body12GetTransformEv($34)|0);
 $xfB = $35;
 $36 = $sensor;
 $37 = $36&1;
 if ($37) {
  $38 = ((($2)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZN9b2Fixture8GetShapeEv($39)|0);
  $shapeA = $40;
  $41 = ((($2)) + 52|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN9b2Fixture8GetShapeEv($42)|0);
  $shapeB = $43;
  $44 = $shapeA;
  $45 = ((($2)) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $shapeB;
  $48 = ((($2)) + 60|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $xfA;
  $51 = $xfB;
  $52 = (__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($44,$46,$47,$49,$50,$51)|0);
  $53 = $52&1;
  $touching = $53;
  $54 = ((($2)) + 64|0);
  $55 = ((($54)) + 60|0);
  HEAP32[$55>>2] = 0;
 } else {
  $56 = HEAP32[$2>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($2)) + 64|0);
  $59 = $xfA;
  $60 = $xfB;
  FUNCTION_TABLE_viiii[$57 & 511]($2,$58,$59,$60);
  $61 = ((($2)) + 64|0);
  $62 = ((($61)) + 60|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)>(0);
  $65 = $64&1;
  $touching = $65;
  $i = 0;
  while(1) {
   $66 = $i;
   $67 = ((($2)) + 64|0);
   $68 = ((($67)) + 60|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($66|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = ((($2)) + 64|0);
   $72 = $i;
   $73 = (($71) + (($72*20)|0)|0);
   $mp2 = $73;
   $74 = $mp2;
   $75 = ((($74)) + 8|0);
   HEAPF32[$75>>2] = 0.0;
   $76 = $mp2;
   $77 = ((($76)) + 12|0);
   HEAPF32[$77>>2] = 0.0;
   $78 = $mp2;
   $79 = ((($78)) + 16|0);
   ;HEAP32[$id2>>2]=HEAP32[$79>>2]|0;
   $j = 0;
   while(1) {
    $80 = $j;
    $81 = ((($oldManifold)) + 60|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)<($82|0);
    if (!($83)) {
     break;
    }
    $84 = $j;
    $85 = (($oldManifold) + (($84*20)|0)|0);
    $mp1 = $85;
    $86 = $mp1;
    $87 = ((($86)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP32[$id2>>2]|0;
    $90 = ($88|0)==($89|0);
    if ($90) {
     label = 8;
     break;
    }
    $101 = $j;
    $102 = (($101) + 1)|0;
    $j = $102;
   }
   if ((label|0) == 8) {
    label = 0;
    $91 = $mp1;
    $92 = ((($91)) + 8|0);
    $93 = +HEAPF32[$92>>2];
    $94 = $mp2;
    $95 = ((($94)) + 8|0);
    HEAPF32[$95>>2] = $93;
    $96 = $mp1;
    $97 = ((($96)) + 12|0);
    $98 = +HEAPF32[$97>>2];
    $99 = $mp2;
    $100 = ((($99)) + 12|0);
    HEAPF32[$100>>2] = $98;
   }
   $103 = $i;
   $104 = (($103) + 1)|0;
   $i = $104;
  }
  $105 = $touching;
  $106 = $105&1;
  $107 = $106&1;
  $108 = $wasTouching;
  $109 = $108&1;
  $110 = $109&1;
  $111 = ($107|0)!=($110|0);
  if ($111) {
   $112 = $bodyA;
   __ZN6b2Body8SetAwakeEb($112,1);
   $113 = $bodyB;
   __ZN6b2Body8SetAwakeEb($113,1);
  }
 }
 $114 = $touching;
 $115 = $114&1;
 $116 = ((($2)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 if ($115) {
  $118 = $117 | 2;
  HEAP32[$116>>2] = $118;
 } else {
  $119 = $117 & -3;
  HEAP32[$116>>2] = $119;
 }
 $120 = $wasTouching;
 $121 = $120&1;
 $122 = $121&1;
 $123 = ($122|0)==(0);
 if ($123) {
  $124 = $touching;
  $125 = $124&1;
  $126 = $125&1;
  $127 = ($126|0)==(1);
  $128 = $1;
  $129 = ($128|0)!=(0|0);
  $or$cond = $127 & $129;
  if ($or$cond) {
   $130 = $1;
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($131)) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   FUNCTION_TABLE_vii[$133 & 1023]($130,$2);
  }
 }
 $134 = $wasTouching;
 $135 = $134&1;
 $136 = $135&1;
 $137 = ($136|0)==(1);
 if ($137) {
  $138 = $touching;
  $139 = $138&1;
  $140 = $139&1;
  $141 = ($140|0)==(0);
  $142 = $1;
  $143 = ($142|0)!=(0|0);
  $or$cond3 = $141 & $143;
  if ($or$cond3) {
   $144 = $1;
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($145)) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   FUNCTION_TABLE_vii[$147 & 1023]($144,$2);
  }
 }
 $148 = $sensor;
 $149 = $148&1;
 $150 = $149&1;
 $151 = ($150|0)==(0);
 if (!($151)) {
  STACKTOP = sp;return;
 }
 $152 = $touching;
 $153 = $152&1;
 $154 = $1;
 $155 = ($154|0)!=(0|0);
 $or$cond5 = $153 & $155;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $156 = $1;
 $157 = HEAP32[$156>>2]|0;
 $158 = ((($157)) + 16|0);
 $159 = HEAP32[$158>>2]|0;
 FUNCTION_TABLE_viii[$159 & 1023]($156,$2,$oldManifold);
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bodyA = 0, $bodyB = 0, $contact = 0, $cp = 0, $fixtureA = 0, $fixtureB = 0, $i = 0, $j = 0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0, $radiusB = 0.0, $shapeA = 0, $shapeB = 0, $vc = 0, $vcp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $def;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$3+20>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 48|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($2)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*88)|0;
 $17 = (__ZN16b2StackAllocator8AllocateEi($13,$16)|0);
 $18 = ((($2)) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($2)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22*152)|0;
 $24 = (__ZN16b2StackAllocator8AllocateEi($20,$23)|0);
 $25 = ((($2)) + 40|0);
 HEAP32[$25>>2] = $24;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 24|0);
 HEAP32[$29>>2] = $28;
 $30 = $1;
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($2)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = $1;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 44|0);
 HEAP32[$37>>2] = $36;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ((($2)) + 48|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   label = 12;
   break;
  }
  $42 = $i;
  $43 = ((($2)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $contact = $46;
  $47 = $contact;
  $48 = ((($47)) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $fixtureA = $49;
  $50 = $contact;
  $51 = ((($50)) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $fixtureB = $52;
  $53 = $fixtureA;
  $54 = (__ZN9b2Fixture8GetShapeEv($53)|0);
  $shapeA = $54;
  $55 = $fixtureB;
  $56 = (__ZN9b2Fixture8GetShapeEv($55)|0);
  $shapeB = $56;
  $57 = $shapeA;
  $58 = ((($57)) + 8|0);
  $59 = +HEAPF32[$58>>2];
  $radiusA = $59;
  $60 = $shapeB;
  $61 = ((($60)) + 8|0);
  $62 = +HEAPF32[$61>>2];
  $radiusB = $62;
  $63 = $fixtureA;
  $64 = (__ZN9b2Fixture7GetBodyEv($63)|0);
  $bodyA = $64;
  $65 = $fixtureB;
  $66 = (__ZN9b2Fixture7GetBodyEv($65)|0);
  $bodyB = $66;
  $67 = $contact;
  $68 = (__ZN9b2Contact11GetManifoldEv($67)|0);
  $manifold = $68;
  $69 = $manifold;
  $70 = ((($69)) + 60|0);
  $71 = HEAP32[$70>>2]|0;
  $pointCount = $71;
  $72 = $pointCount;
  $73 = ($72|0)>(0);
  if (!($73)) {
   label = 4;
   break;
  }
  $74 = ((($2)) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $i;
  $77 = (($75) + (($76*152)|0)|0);
  $vc = $77;
  $78 = $contact;
  $79 = ((($78)) + 136|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $vc;
  $82 = ((($81)) + 136|0);
  HEAPF32[$82>>2] = $80;
  $83 = $contact;
  $84 = ((($83)) + 140|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $vc;
  $87 = ((($86)) + 140|0);
  HEAPF32[$87>>2] = $85;
  $88 = $bodyA;
  $89 = ((($88)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $vc;
  $92 = ((($91)) + 112|0);
  HEAP32[$92>>2] = $90;
  $93 = $bodyB;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $vc;
  $97 = ((($96)) + 116|0);
  HEAP32[$97>>2] = $95;
  $98 = $bodyA;
  $99 = ((($98)) + 128|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $vc;
  $102 = ((($101)) + 120|0);
  HEAPF32[$102>>2] = $100;
  $103 = $bodyB;
  $104 = ((($103)) + 128|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $vc;
  $107 = ((($106)) + 124|0);
  HEAPF32[$107>>2] = $105;
  $108 = $bodyA;
  $109 = ((($108)) + 136|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $vc;
  $112 = ((($111)) + 128|0);
  HEAPF32[$112>>2] = $110;
  $113 = $bodyB;
  $114 = ((($113)) + 136|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $vc;
  $117 = ((($116)) + 132|0);
  HEAPF32[$117>>2] = $115;
  $118 = $i;
  $119 = $vc;
  $120 = ((($119)) + 148|0);
  HEAP32[$120>>2] = $118;
  $121 = $pointCount;
  $122 = $vc;
  $123 = ((($122)) + 144|0);
  HEAP32[$123>>2] = $121;
  $124 = $vc;
  $125 = ((($124)) + 96|0);
  __ZN7b2Mat227SetZeroEv($125);
  $126 = $vc;
  $127 = ((($126)) + 80|0);
  __ZN7b2Mat227SetZeroEv($127);
  $128 = ((($2)) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $i;
  $131 = (($129) + (($130*88)|0)|0);
  $pc = $131;
  $132 = $bodyA;
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $pc;
  $136 = ((($135)) + 32|0);
  HEAP32[$136>>2] = $134;
  $137 = $bodyB;
  $138 = ((($137)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $pc;
  $141 = ((($140)) + 36|0);
  HEAP32[$141>>2] = $139;
  $142 = $bodyA;
  $143 = ((($142)) + 128|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $pc;
  $146 = ((($145)) + 40|0);
  HEAPF32[$146>>2] = $144;
  $147 = $bodyB;
  $148 = ((($147)) + 128|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $pc;
  $151 = ((($150)) + 44|0);
  HEAPF32[$151>>2] = $149;
  $152 = $pc;
  $153 = ((($152)) + 48|0);
  $154 = $bodyA;
  $155 = ((($154)) + 28|0);
  ;HEAP32[$153>>2]=HEAP32[$155>>2]|0;HEAP32[$153+4>>2]=HEAP32[$155+4>>2]|0;
  $156 = $pc;
  $157 = ((($156)) + 56|0);
  $158 = $bodyB;
  $159 = ((($158)) + 28|0);
  ;HEAP32[$157>>2]=HEAP32[$159>>2]|0;HEAP32[$157+4>>2]=HEAP32[$159+4>>2]|0;
  $160 = $bodyA;
  $161 = ((($160)) + 136|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $pc;
  $164 = ((($163)) + 64|0);
  HEAPF32[$164>>2] = $162;
  $165 = $bodyB;
  $166 = ((($165)) + 136|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $pc;
  $169 = ((($168)) + 68|0);
  HEAPF32[$169>>2] = $167;
  $170 = $pc;
  $171 = ((($170)) + 16|0);
  $172 = $manifold;
  $173 = ((($172)) + 40|0);
  ;HEAP32[$171>>2]=HEAP32[$173>>2]|0;HEAP32[$171+4>>2]=HEAP32[$173+4>>2]|0;
  $174 = $pc;
  $175 = ((($174)) + 24|0);
  $176 = $manifold;
  $177 = ((($176)) + 48|0);
  ;HEAP32[$175>>2]=HEAP32[$177>>2]|0;HEAP32[$175+4>>2]=HEAP32[$177+4>>2]|0;
  $178 = $pointCount;
  $179 = $pc;
  $180 = ((($179)) + 84|0);
  HEAP32[$180>>2] = $178;
  $181 = $radiusA;
  $182 = $pc;
  $183 = ((($182)) + 76|0);
  HEAPF32[$183>>2] = $181;
  $184 = $radiusB;
  $185 = $pc;
  $186 = ((($185)) + 80|0);
  HEAPF32[$186>>2] = $184;
  $187 = $manifold;
  $188 = ((($187)) + 56|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $pc;
  $191 = ((($190)) + 72|0);
  HEAP32[$191>>2] = $189;
  $j = 0;
  while(1) {
   $192 = $j;
   $193 = $pointCount;
   $194 = ($192|0)<($193|0);
   if (!($194)) {
    break;
   }
   $195 = $manifold;
   $196 = $j;
   $197 = (($195) + (($196*20)|0)|0);
   $cp = $197;
   $198 = $vc;
   $199 = $j;
   $200 = (($198) + (($199*36)|0)|0);
   $vcp = $200;
   $201 = ((($2)) + 20|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&1;
   if ($203) {
    $204 = ((($2)) + 8|0);
    $205 = +HEAPF32[$204>>2];
    $206 = $cp;
    $207 = ((($206)) + 8|0);
    $208 = +HEAPF32[$207>>2];
    $209 = $205 * $208;
    $210 = $vcp;
    $211 = ((($210)) + 16|0);
    HEAPF32[$211>>2] = $209;
    $212 = ((($2)) + 8|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $cp;
    $215 = ((($214)) + 12|0);
    $216 = +HEAPF32[$215>>2];
    $217 = $213 * $216;
    $218 = $vcp;
    $219 = ((($218)) + 20|0);
    HEAPF32[$219>>2] = $217;
   } else {
    $220 = $vcp;
    $221 = ((($220)) + 16|0);
    HEAPF32[$221>>2] = 0.0;
    $222 = $vcp;
    $223 = ((($222)) + 20|0);
    HEAPF32[$223>>2] = 0.0;
   }
   $224 = $vcp;
   __ZN6b2Vec27SetZeroEv($224);
   $225 = $vcp;
   $226 = ((($225)) + 8|0);
   __ZN6b2Vec27SetZeroEv($226);
   $227 = $vcp;
   $228 = ((($227)) + 24|0);
   HEAPF32[$228>>2] = 0.0;
   $229 = $vcp;
   $230 = ((($229)) + 28|0);
   HEAPF32[$230>>2] = 0.0;
   $231 = $vcp;
   $232 = ((($231)) + 32|0);
   HEAPF32[$232>>2] = 0.0;
   $233 = $j;
   $234 = $pc;
   $235 = (($234) + ($233<<3)|0);
   $236 = $cp;
   ;HEAP32[$235>>2]=HEAP32[$236>>2]|0;HEAP32[$235+4>>2]=HEAP32[$236+4>>2]|0;
   $237 = $j;
   $238 = (($237) + 1)|0;
   $j = $238;
  }
  $239 = $i;
  $240 = (($239) + 1)|0;
  $i = $240;
 }
 if ((label|0) == 4) {
  ___assert_fail((23246|0),(23261|0),71,(23354|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function __ZN7b2Mat227SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($1)) + 8|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 4|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($1)) + 8|0);
 $5 = ((($4)) + 4|0);
 HEAPF32[$5>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($3,$5);
 $6 = ((($1)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($7,$9);
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0;
 var $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $k11 = 0.0, $k12 = 0.0, $k22 = 0.0, $kNormal = 0.0, $kTangent = 0.0, $k_maxConditionNumber = 0.0, $localCenterA = 0, $localCenterB = 0, $mA = 0.0, $mB = 0.0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0, $radiusB = 0.0, $rn1A = 0.0;
 var $rn1B = 0.0, $rn2A = 0.0, $rn2B = 0.0, $rnA = 0.0, $rnB = 0.0, $rtA = 0.0, $rtB = 0.0, $tangent = 0, $vA = 0, $vB = 0, $vRel = 0.0, $vc = 0, $vcp = 0, $vcp1 = 0, $vcp2 = 0, $wA = 0.0, $wB = 0.0, $worldManifold = 0, $xfA = 0, $xfB = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 328|0;
 $localCenterB = sp + 320|0;
 $cA = sp + 312|0;
 $vA = sp + 296|0;
 $cB = sp + 280|0;
 $vB = sp + 264|0;
 $xfA = sp + 240|0;
 $xfB = sp + 224|0;
 $1 = sp + 216|0;
 $2 = sp + 208|0;
 $3 = sp + 200|0;
 $4 = sp + 192|0;
 $worldManifold = sp + 168|0;
 $5 = sp + 144|0;
 $6 = sp + 136|0;
 $tangent = sp + 112|0;
 $7 = sp + 88|0;
 $8 = sp + 80|0;
 $9 = sp + 72|0;
 $10 = sp + 64|0;
 $11 = sp + 56|0;
 $12 = sp;
 $0 = $this;
 $13 = $0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ((($13)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   label = 19;
   break;
  }
  $18 = ((($13)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $i;
  $21 = (($19) + (($20*152)|0)|0);
  $vc = $21;
  $22 = ((($13)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $i;
  $25 = (($23) + (($24*88)|0)|0);
  $pc = $25;
  $26 = $pc;
  $27 = ((($26)) + 76|0);
  $28 = +HEAPF32[$27>>2];
  $radiusA = $28;
  $29 = $pc;
  $30 = ((($29)) + 80|0);
  $31 = +HEAPF32[$30>>2];
  $radiusB = $31;
  $32 = $vc;
  $33 = ((($32)) + 148|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($13)) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (__ZN9b2Contact11GetManifoldEv($38)|0);
  $manifold = $39;
  $40 = $vc;
  $41 = ((($40)) + 112|0);
  $42 = HEAP32[$41>>2]|0;
  $indexA = $42;
  $43 = $vc;
  $44 = ((($43)) + 116|0);
  $45 = HEAP32[$44>>2]|0;
  $indexB = $45;
  $46 = $vc;
  $47 = ((($46)) + 120|0);
  $48 = +HEAPF32[$47>>2];
  $mA = $48;
  $49 = $vc;
  $50 = ((($49)) + 124|0);
  $51 = +HEAPF32[$50>>2];
  $mB = $51;
  $52 = $vc;
  $53 = ((($52)) + 128|0);
  $54 = +HEAPF32[$53>>2];
  $iA = $54;
  $55 = $vc;
  $56 = ((($55)) + 132|0);
  $57 = +HEAPF32[$56>>2];
  $iB = $57;
  $58 = $pc;
  $59 = ((($58)) + 48|0);
  ;HEAP32[$localCenterA>>2]=HEAP32[$59>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$59+4>>2]|0;
  $60 = $pc;
  $61 = ((($60)) + 56|0);
  ;HEAP32[$localCenterB>>2]=HEAP32[$61>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$61+4>>2]|0;
  $62 = $indexA;
  $63 = ((($13)) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + (($62*12)|0)|0);
  ;HEAP32[$cA>>2]=HEAP32[$65>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$65+4>>2]|0;
  $66 = $indexA;
  $67 = ((($13)) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + (($66*12)|0)|0);
  $70 = ((($69)) + 8|0);
  $71 = +HEAPF32[$70>>2];
  $aA = $71;
  $72 = $indexA;
  $73 = ((($13)) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + (($72*12)|0)|0);
  ;HEAP32[$vA>>2]=HEAP32[$75>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$75+4>>2]|0;
  $76 = $indexA;
  $77 = ((($13)) + 28|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + (($76*12)|0)|0);
  $80 = ((($79)) + 8|0);
  $81 = +HEAPF32[$80>>2];
  $wA = $81;
  $82 = $indexB;
  $83 = ((($13)) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + (($82*12)|0)|0);
  ;HEAP32[$cB>>2]=HEAP32[$85>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$85+4>>2]|0;
  $86 = $indexB;
  $87 = ((($13)) + 24|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($86*12)|0)|0);
  $90 = ((($89)) + 8|0);
  $91 = +HEAPF32[$90>>2];
  $aB = $91;
  $92 = $indexB;
  $93 = ((($13)) + 28|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + (($92*12)|0)|0);
  ;HEAP32[$vB>>2]=HEAP32[$95>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$95+4>>2]|0;
  $96 = $indexB;
  $97 = ((($13)) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($96*12)|0)|0);
  $100 = ((($99)) + 8|0);
  $101 = +HEAPF32[$100>>2];
  $wB = $101;
  $102 = $manifold;
  $103 = ((($102)) + 60|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)>(0);
  if (!($105)) {
   label = 4;
   break;
  }
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $106 = ((($xfA)) + 8|0);
  $107 = $aA;
  __ZN5b2Rot3SetEf($106,$107);
  $108 = ((($xfB)) + 8|0);
  $109 = $aB;
  __ZN5b2Rot3SetEf($108,$109);
  $110 = ((($xfA)) + 8|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($2,$110,$localCenterA);
  __ZmiRK6b2Vec2S1_($1,$cA,$2);
  ;HEAP32[$xfA>>2]=HEAP32[$1>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$1+4>>2]|0;
  $111 = ((($xfB)) + 8|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4,$111,$localCenterB);
  __ZmiRK6b2Vec2S1_($3,$cB,$4);
  ;HEAP32[$xfB>>2]=HEAP32[$3>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$3+4>>2]|0;
  __ZN15b2WorldManifoldC2Ev($worldManifold);
  $112 = $manifold;
  $113 = $radiusA;
  $114 = $radiusB;
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold,$112,$xfA,$113,$xfB,$114);
  $115 = $vc;
  $116 = ((($115)) + 72|0);
  ;HEAP32[$116>>2]=HEAP32[$worldManifold>>2]|0;HEAP32[$116+4>>2]=HEAP32[$worldManifold+4>>2]|0;
  $117 = $vc;
  $118 = ((($117)) + 144|0);
  $119 = HEAP32[$118>>2]|0;
  $pointCount = $119;
  $j = 0;
  while(1) {
   $120 = $j;
   $121 = $pointCount;
   $122 = ($120|0)<($121|0);
   $123 = $vc;
   if (!($122)) {
    break;
   }
   $124 = $j;
   $125 = (($123) + (($124*36)|0)|0);
   $vcp = $125;
   $126 = $vcp;
   $127 = $j;
   $128 = ((($worldManifold)) + 8|0);
   $129 = (($128) + ($127<<3)|0);
   __ZmiRK6b2Vec2S1_($5,$129,$cA);
   ;HEAP32[$126>>2]=HEAP32[$5>>2]|0;HEAP32[$126+4>>2]=HEAP32[$5+4>>2]|0;
   $130 = $vcp;
   $131 = ((($130)) + 8|0);
   $132 = $j;
   $133 = ((($worldManifold)) + 8|0);
   $134 = (($133) + ($132<<3)|0);
   __ZmiRK6b2Vec2S1_($6,$134,$cB);
   ;HEAP32[$131>>2]=HEAP32[$6>>2]|0;HEAP32[$131+4>>2]=HEAP32[$6+4>>2]|0;
   $135 = $vcp;
   $136 = $vc;
   $137 = ((($136)) + 72|0);
   $138 = (+__Z7b2CrossRK6b2Vec2S1_($135,$137));
   $rnA = $138;
   $139 = $vcp;
   $140 = ((($139)) + 8|0);
   $141 = $vc;
   $142 = ((($141)) + 72|0);
   $143 = (+__Z7b2CrossRK6b2Vec2S1_($140,$142));
   $rnB = $143;
   $144 = $mA;
   $145 = $mB;
   $146 = $144 + $145;
   $147 = $iA;
   $148 = $rnA;
   $149 = $147 * $148;
   $150 = $rnA;
   $151 = $149 * $150;
   $152 = $146 + $151;
   $153 = $iB;
   $154 = $rnB;
   $155 = $153 * $154;
   $156 = $rnB;
   $157 = $155 * $156;
   $158 = $152 + $157;
   $kNormal = $158;
   $159 = $kNormal;
   $160 = $159 > 0.0;
   if ($160) {
    $161 = $kNormal;
    $162 = 1.0 / $161;
    $165 = $162;
   } else {
    $165 = 0.0;
   }
   $163 = $vcp;
   $164 = ((($163)) + 24|0);
   HEAPF32[$164>>2] = $165;
   $166 = $vc;
   $167 = ((($166)) + 72|0);
   __Z7b2CrossRK6b2Vec2f($tangent,$167,1.0);
   $168 = $vcp;
   $169 = (+__Z7b2CrossRK6b2Vec2S1_($168,$tangent));
   $rtA = $169;
   $170 = $vcp;
   $171 = ((($170)) + 8|0);
   $172 = (+__Z7b2CrossRK6b2Vec2S1_($171,$tangent));
   $rtB = $172;
   $173 = $mA;
   $174 = $mB;
   $175 = $173 + $174;
   $176 = $iA;
   $177 = $rtA;
   $178 = $176 * $177;
   $179 = $rtA;
   $180 = $178 * $179;
   $181 = $175 + $180;
   $182 = $iB;
   $183 = $rtB;
   $184 = $182 * $183;
   $185 = $rtB;
   $186 = $184 * $185;
   $187 = $181 + $186;
   $kTangent = $187;
   $188 = $kTangent;
   $189 = $188 > 0.0;
   if ($189) {
    $190 = $kTangent;
    $191 = 1.0 / $190;
    $194 = $191;
   } else {
    $194 = 0.0;
   }
   $192 = $vcp;
   $193 = ((($192)) + 28|0);
   HEAPF32[$193>>2] = $194;
   $195 = $vcp;
   $196 = ((($195)) + 32|0);
   HEAPF32[$196>>2] = 0.0;
   $197 = $vc;
   $198 = ((($197)) + 72|0);
   $199 = $wB;
   $200 = $vcp;
   $201 = ((($200)) + 8|0);
   __Z7b2CrossfRK6b2Vec2($10,$199,$201);
   __ZplRK6b2Vec2S1_($9,$vB,$10);
   __ZmiRK6b2Vec2S1_($8,$9,$vA);
   $202 = $wA;
   $203 = $vcp;
   __Z7b2CrossfRK6b2Vec2($11,$202,$203);
   __ZmiRK6b2Vec2S1_($7,$8,$11);
   $204 = (+__Z5b2DotRK6b2Vec2S1_($198,$7));
   $vRel = $204;
   $205 = $vRel;
   $206 = $205 < -1.0;
   if ($206) {
    $207 = $vc;
    $208 = ((($207)) + 140|0);
    $209 = +HEAPF32[$208>>2];
    $210 = -$209;
    $211 = $vRel;
    $212 = $210 * $211;
    $213 = $vcp;
    $214 = ((($213)) + 32|0);
    HEAPF32[$214>>2] = $212;
   }
   $215 = $j;
   $216 = (($215) + 1)|0;
   $j = $216;
  }
  $217 = ((($123)) + 144|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($218|0)==(2);
  do {
   if ($219) {
    $220 = $vc;
    $vcp1 = $220;
    $221 = $vc;
    $222 = ((($221)) + 36|0);
    $vcp2 = $222;
    $223 = $vcp1;
    $224 = $vc;
    $225 = ((($224)) + 72|0);
    $226 = (+__Z7b2CrossRK6b2Vec2S1_($223,$225));
    $rn1A = $226;
    $227 = $vcp1;
    $228 = ((($227)) + 8|0);
    $229 = $vc;
    $230 = ((($229)) + 72|0);
    $231 = (+__Z7b2CrossRK6b2Vec2S1_($228,$230));
    $rn1B = $231;
    $232 = $vcp2;
    $233 = $vc;
    $234 = ((($233)) + 72|0);
    $235 = (+__Z7b2CrossRK6b2Vec2S1_($232,$234));
    $rn2A = $235;
    $236 = $vcp2;
    $237 = ((($236)) + 8|0);
    $238 = $vc;
    $239 = ((($238)) + 72|0);
    $240 = (+__Z7b2CrossRK6b2Vec2S1_($237,$239));
    $rn2B = $240;
    $241 = $mA;
    $242 = $mB;
    $243 = $241 + $242;
    $244 = $iA;
    $245 = $rn1A;
    $246 = $244 * $245;
    $247 = $rn1A;
    $248 = $246 * $247;
    $249 = $243 + $248;
    $250 = $iB;
    $251 = $rn1B;
    $252 = $250 * $251;
    $253 = $rn1B;
    $254 = $252 * $253;
    $255 = $249 + $254;
    $k11 = $255;
    $256 = $mA;
    $257 = $mB;
    $258 = $256 + $257;
    $259 = $iA;
    $260 = $rn2A;
    $261 = $259 * $260;
    $262 = $rn2A;
    $263 = $261 * $262;
    $264 = $258 + $263;
    $265 = $iB;
    $266 = $rn2B;
    $267 = $265 * $266;
    $268 = $rn2B;
    $269 = $267 * $268;
    $270 = $264 + $269;
    $k22 = $270;
    $271 = $mA;
    $272 = $mB;
    $273 = $271 + $272;
    $274 = $iA;
    $275 = $rn1A;
    $276 = $274 * $275;
    $277 = $rn2A;
    $278 = $276 * $277;
    $279 = $273 + $278;
    $280 = $iB;
    $281 = $rn1B;
    $282 = $280 * $281;
    $283 = $rn2B;
    $284 = $282 * $283;
    $285 = $279 + $284;
    $k12 = $285;
    $k_maxConditionNumber = 1000.0;
    $286 = $k11;
    $287 = $k11;
    $288 = $286 * $287;
    $289 = $k11;
    $290 = $k22;
    $291 = $289 * $290;
    $292 = $k12;
    $293 = $k12;
    $294 = $292 * $293;
    $295 = $291 - $294;
    $296 = 1000.0 * $295;
    $297 = $288 < $296;
    $298 = $vc;
    if ($297) {
     $299 = ((($298)) + 96|0);
     $300 = $k11;
     $301 = $k12;
     __ZN6b2Vec23SetEff($299,$300,$301);
     $302 = $vc;
     $303 = ((($302)) + 96|0);
     $304 = ((($303)) + 8|0);
     $305 = $k12;
     $306 = $k22;
     __ZN6b2Vec23SetEff($304,$305,$306);
     $307 = $vc;
     $308 = ((($307)) + 80|0);
     $309 = $vc;
     $310 = ((($309)) + 96|0);
     __ZNK7b2Mat2210GetInverseEv($12,$310);
     ;HEAP32[$308>>2]=HEAP32[$12>>2]|0;HEAP32[$308+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$308+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$308+12>>2]=HEAP32[$12+12>>2]|0;
     break;
    } else {
     $311 = ((($298)) + 144|0);
     HEAP32[$311>>2] = 1;
     break;
    }
   }
  } while(0);
  $312 = $i;
  $313 = (($312) + 1)|0;
  $i = $313;
 }
 if ((label|0) == 4) {
  ___assert_fail((23370|0),(23261|0),168,(23395|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2WorldManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 $3 = ((($2)) + 16|0);
 $4 = $2;
 while(1) {
  __ZN6b2Vec2C2Ev($4);
  $5 = ((($4)) + 8|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK7b2Mat2210GetInverseEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0.0;
 var $b = 0.0, $c = 0.0, $d = 0.0, $det = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $a = $2;
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $b = $4;
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $c = $6;
 $7 = ((($1)) + 8|0);
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $d = $9;
 __ZN7b2Mat22C2Ev($agg$result);
 $10 = $a;
 $11 = $d;
 $12 = $10 * $11;
 $13 = $b;
 $14 = $c;
 $15 = $13 * $14;
 $16 = $12 - $15;
 $det = $16;
 $17 = $det;
 $18 = $17 != 0.0;
 if ($18) {
  $19 = $det;
  $20 = 1.0 / $19;
  $det = $20;
 }
 $21 = $det;
 $22 = $d;
 $23 = $21 * $22;
 HEAPF32[$agg$result>>2] = $23;
 $24 = $det;
 $25 = -$24;
 $26 = $b;
 $27 = $25 * $26;
 $28 = ((($agg$result)) + 8|0);
 HEAPF32[$28>>2] = $27;
 $29 = $det;
 $30 = -$29;
 $31 = $c;
 $32 = $30 * $31;
 $33 = ((($agg$result)) + 4|0);
 HEAPF32[$33>>2] = $32;
 $34 = $det;
 $35 = $a;
 $36 = $34 * $35;
 $37 = ((($agg$result)) + 8|0);
 $38 = ((($37)) + 4|0);
 HEAPF32[$38>>2] = $36;
 STACKTOP = sp;return;
}
function __ZN7b2Mat22C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver9WarmStartEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $mA = 0.0, $mB = 0.0, $normal = 0, $pointCount = 0, $tangent = 0;
 var $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $wA = 0.0, $wB = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vA = sp + 88|0;
 $vB = sp + 72|0;
 $normal = sp + 56|0;
 $tangent = sp + 48|0;
 $P = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ((($5)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = ((($5)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $i;
  $13 = (($11) + (($12*152)|0)|0);
  $vc = $13;
  $14 = $vc;
  $15 = ((($14)) + 112|0);
  $16 = HEAP32[$15>>2]|0;
  $indexA = $16;
  $17 = $vc;
  $18 = ((($17)) + 116|0);
  $19 = HEAP32[$18>>2]|0;
  $indexB = $19;
  $20 = $vc;
  $21 = ((($20)) + 120|0);
  $22 = +HEAPF32[$21>>2];
  $mA = $22;
  $23 = $vc;
  $24 = ((($23)) + 128|0);
  $25 = +HEAPF32[$24>>2];
  $iA = $25;
  $26 = $vc;
  $27 = ((($26)) + 124|0);
  $28 = +HEAPF32[$27>>2];
  $mB = $28;
  $29 = $vc;
  $30 = ((($29)) + 132|0);
  $31 = +HEAPF32[$30>>2];
  $iB = $31;
  $32 = $vc;
  $33 = ((($32)) + 144|0);
  $34 = HEAP32[$33>>2]|0;
  $pointCount = $34;
  $35 = $indexA;
  $36 = ((($5)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($35*12)|0)|0);
  ;HEAP32[$vA>>2]=HEAP32[$38>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$38+4>>2]|0;
  $39 = $indexA;
  $40 = ((($5)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + (($39*12)|0)|0);
  $43 = ((($42)) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $wA = $44;
  $45 = $indexB;
  $46 = ((($5)) + 28|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($45*12)|0)|0);
  ;HEAP32[$vB>>2]=HEAP32[$48>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$48+4>>2]|0;
  $49 = $indexB;
  $50 = ((($5)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($49*12)|0)|0);
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF32[$53>>2];
  $wB = $54;
  $55 = $vc;
  $56 = ((($55)) + 72|0);
  ;HEAP32[$normal>>2]=HEAP32[$56>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$56+4>>2]|0;
  __Z7b2CrossRK6b2Vec2f($tangent,$normal,1.0);
  $j = 0;
  while(1) {
   $57 = $j;
   $58 = $pointCount;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $vc;
   $61 = $j;
   $62 = (($60) + (($61*36)|0)|0);
   $vcp = $62;
   $63 = $vcp;
   $64 = ((($63)) + 16|0);
   $65 = +HEAPF32[$64>>2];
   __ZmlfRK6b2Vec2($1,$65,$normal);
   $66 = $vcp;
   $67 = ((($66)) + 20|0);
   $68 = +HEAPF32[$67>>2];
   __ZmlfRK6b2Vec2($2,$68,$tangent);
   __ZplRK6b2Vec2S1_($P,$1,$2);
   $69 = $iA;
   $70 = $vcp;
   $71 = (+__Z7b2CrossRK6b2Vec2S1_($70,$P));
   $72 = $69 * $71;
   $73 = $wA;
   $74 = $73 - $72;
   $wA = $74;
   $75 = $mA;
   __ZmlfRK6b2Vec2($3,$75,$P);
   __ZN6b2Vec2mIERKS_($vA,$3);
   $76 = $iB;
   $77 = $vcp;
   $78 = ((($77)) + 8|0);
   $79 = (+__Z7b2CrossRK6b2Vec2S1_($78,$P));
   $80 = $76 * $79;
   $81 = $wB;
   $82 = $81 + $80;
   $wB = $82;
   $83 = $mB;
   __ZmlfRK6b2Vec2($4,$83,$P);
   __ZN6b2Vec2pLERKS_($vB,$4);
   $84 = $j;
   $85 = (($84) + 1)|0;
   $j = $85;
  }
  $86 = $indexA;
  $87 = ((($5)) + 28|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($86*12)|0)|0);
  ;HEAP32[$89>>2]=HEAP32[$vA>>2]|0;HEAP32[$89+4>>2]=HEAP32[$vA+4>>2]|0;
  $90 = $wA;
  $91 = $indexA;
  $92 = ((($5)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + (($91*12)|0)|0);
  $95 = ((($94)) + 8|0);
  HEAPF32[$95>>2] = $90;
  $96 = $indexB;
  $97 = ((($5)) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($96*12)|0)|0);
  ;HEAP32[$99>>2]=HEAP32[$vB>>2]|0;HEAP32[$99+4>>2]=HEAP32[$vB+4>>2]|0;
  $100 = $wB;
  $101 = $indexB;
  $102 = ((($5)) + 28|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($101*12)|0)|0);
  $105 = ((($104)) + 8|0);
  HEAPF32[$105>>2] = $100;
  $106 = $i;
  $107 = (($106) + 1)|0;
  $i = $107;
 }
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $P1 = 0, $P111 = 0, $P114 = 0, $P18 = 0, $P2 = 0, $P212 = 0, $P215 = 0, $P29 = 0;
 var $P5 = 0, $a = 0, $b = 0, $cp1 = 0, $cp2 = 0, $d = 0, $d10 = 0, $d13 = 0, $d7 = 0, $dv = 0, $dv1 = 0, $dv2 = 0, $dv26 = 0, $friction = 0.0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0;
 var $k_errorTol = 0.0, $lambda = 0.0, $lambda3 = 0.0, $mA = 0.0, $mB = 0.0, $maxFriction = 0.0, $newImpulse = 0.0, $newImpulse4 = 0.0, $normal = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pointCount = 0, $tangent = 0, $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $vcp1 = 0;
 var $vn = 0.0, $vn1 = 0.0, $vn2 = 0.0, $vt = 0.0, $wA = 0.0, $wB = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vA = sp + 592|0;
 $vB = sp + 576|0;
 $normal = sp + 560|0;
 $tangent = sp + 552|0;
 $dv = sp + 528|0;
 $1 = sp + 520|0;
 $2 = sp + 512|0;
 $3 = sp + 504|0;
 $4 = sp + 496|0;
 $P = sp + 472|0;
 $5 = sp + 464|0;
 $6 = sp + 456|0;
 $dv2 = sp + 440|0;
 $7 = sp + 432|0;
 $8 = sp + 424|0;
 $9 = sp + 416|0;
 $10 = sp + 408|0;
 $P5 = sp + 384|0;
 $11 = sp + 376|0;
 $12 = sp + 368|0;
 $a = sp + 352|0;
 $dv1 = sp + 344|0;
 $13 = sp + 336|0;
 $14 = sp + 328|0;
 $15 = sp + 320|0;
 $16 = sp + 312|0;
 $dv26 = sp + 304|0;
 $17 = sp + 296|0;
 $18 = sp + 288|0;
 $19 = sp + 280|0;
 $20 = sp + 272|0;
 $b = sp + 256|0;
 $21 = sp + 248|0;
 $x = sp + 232|0;
 $22 = sp + 224|0;
 $d = sp + 216|0;
 $P1 = sp + 208|0;
 $P2 = sp + 200|0;
 $23 = sp + 192|0;
 $24 = sp + 184|0;
 $25 = sp + 176|0;
 $26 = sp + 168|0;
 $d7 = sp + 160|0;
 $P18 = sp + 152|0;
 $P29 = sp + 144|0;
 $27 = sp + 136|0;
 $28 = sp + 128|0;
 $29 = sp + 120|0;
 $30 = sp + 112|0;
 $d10 = sp + 104|0;
 $P111 = sp + 96|0;
 $P212 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $33 = sp + 64|0;
 $34 = sp + 56|0;
 $d13 = sp + 48|0;
 $P114 = sp + 40|0;
 $P215 = sp + 32|0;
 $35 = sp + 24|0;
 $36 = sp + 16|0;
 $37 = sp + 8|0;
 $38 = sp;
 $0 = $this;
 $39 = $0;
 $i = 0;
 L1: while(1) {
  $40 = $i;
  $41 = ((($39)) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($40|0)<($42|0);
  if (!($43)) {
   label = 23;
   break;
  }
  $44 = ((($39)) + 40|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $i;
  $47 = (($45) + (($46*152)|0)|0);
  $vc = $47;
  $48 = $vc;
  $49 = ((($48)) + 112|0);
  $50 = HEAP32[$49>>2]|0;
  $indexA = $50;
  $51 = $vc;
  $52 = ((($51)) + 116|0);
  $53 = HEAP32[$52>>2]|0;
  $indexB = $53;
  $54 = $vc;
  $55 = ((($54)) + 120|0);
  $56 = +HEAPF32[$55>>2];
  $mA = $56;
  $57 = $vc;
  $58 = ((($57)) + 128|0);
  $59 = +HEAPF32[$58>>2];
  $iA = $59;
  $60 = $vc;
  $61 = ((($60)) + 124|0);
  $62 = +HEAPF32[$61>>2];
  $mB = $62;
  $63 = $vc;
  $64 = ((($63)) + 132|0);
  $65 = +HEAPF32[$64>>2];
  $iB = $65;
  $66 = $vc;
  $67 = ((($66)) + 144|0);
  $68 = HEAP32[$67>>2]|0;
  $pointCount = $68;
  $69 = $indexA;
  $70 = ((($39)) + 28|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($69*12)|0)|0);
  ;HEAP32[$vA>>2]=HEAP32[$72>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$72+4>>2]|0;
  $73 = $indexA;
  $74 = ((($39)) + 28|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + (($73*12)|0)|0);
  $77 = ((($76)) + 8|0);
  $78 = +HEAPF32[$77>>2];
  $wA = $78;
  $79 = $indexB;
  $80 = ((($39)) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($79*12)|0)|0);
  ;HEAP32[$vB>>2]=HEAP32[$82>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$82+4>>2]|0;
  $83 = $indexB;
  $84 = ((($39)) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($83*12)|0)|0);
  $87 = ((($86)) + 8|0);
  $88 = +HEAPF32[$87>>2];
  $wB = $88;
  $89 = $vc;
  $90 = ((($89)) + 72|0);
  ;HEAP32[$normal>>2]=HEAP32[$90>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$90+4>>2]|0;
  __Z7b2CrossRK6b2Vec2f($tangent,$normal,1.0);
  $91 = $vc;
  $92 = ((($91)) + 136|0);
  $93 = +HEAPF32[$92>>2];
  $friction = $93;
  $94 = $pointCount;
  $95 = ($94|0)==(1);
  $96 = $pointCount;
  $97 = ($96|0)==(2);
  $or$cond = $95 | $97;
  if (!($or$cond)) {
   label = 4;
   break;
  }
  $j = 0;
  while(1) {
   $98 = $j;
   $99 = $pointCount;
   $100 = ($98|0)<($99|0);
   $101 = $vc;
   if (!($100)) {
    break;
   }
   $102 = $j;
   $103 = (($101) + (($102*36)|0)|0);
   $vcp = $103;
   $104 = $wB;
   $105 = $vcp;
   $106 = ((($105)) + 8|0);
   __Z7b2CrossfRK6b2Vec2($3,$104,$106);
   __ZplRK6b2Vec2S1_($2,$vB,$3);
   __ZmiRK6b2Vec2S1_($1,$2,$vA);
   $107 = $wA;
   $108 = $vcp;
   __Z7b2CrossfRK6b2Vec2($4,$107,$108);
   __ZmiRK6b2Vec2S1_($dv,$1,$4);
   $109 = (+__Z5b2DotRK6b2Vec2S1_($dv,$tangent));
   $vt = $109;
   $110 = $vcp;
   $111 = ((($110)) + 28|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $vt;
   $114 = -$113;
   $115 = $112 * $114;
   $lambda = $115;
   $116 = $friction;
   $117 = $vcp;
   $118 = ((($117)) + 16|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $116 * $119;
   $maxFriction = $120;
   $121 = $vcp;
   $122 = ((($121)) + 20|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $lambda;
   $125 = $123 + $124;
   $126 = $maxFriction;
   $127 = -$126;
   $128 = $maxFriction;
   $129 = (+__Z7b2ClampIfET_S0_S0_S0_($125,$127,$128));
   $newImpulse = $129;
   $130 = $newImpulse;
   $131 = $vcp;
   $132 = ((($131)) + 20|0);
   $133 = +HEAPF32[$132>>2];
   $134 = $130 - $133;
   $lambda = $134;
   $135 = $newImpulse;
   $136 = $vcp;
   $137 = ((($136)) + 20|0);
   HEAPF32[$137>>2] = $135;
   $138 = $lambda;
   __ZmlfRK6b2Vec2($P,$138,$tangent);
   $139 = $mA;
   __ZmlfRK6b2Vec2($5,$139,$P);
   __ZN6b2Vec2mIERKS_($vA,$5);
   $140 = $iA;
   $141 = $vcp;
   $142 = (+__Z7b2CrossRK6b2Vec2S1_($141,$P));
   $143 = $140 * $142;
   $144 = $wA;
   $145 = $144 - $143;
   $wA = $145;
   $146 = $mB;
   __ZmlfRK6b2Vec2($6,$146,$P);
   __ZN6b2Vec2pLERKS_($vB,$6);
   $147 = $iB;
   $148 = $vcp;
   $149 = ((($148)) + 8|0);
   $150 = (+__Z7b2CrossRK6b2Vec2S1_($149,$P));
   $151 = $147 * $150;
   $152 = $wB;
   $153 = $152 + $151;
   $wB = $153;
   $154 = $j;
   $155 = (($154) + 1)|0;
   $j = $155;
  }
  $156 = ((($101)) + 144|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($157|0)==(1);
  $159 = $vc;
  do {
   if ($158) {
    $vcp1 = $159;
    $160 = $wB;
    $161 = $vcp1;
    $162 = ((($161)) + 8|0);
    __Z7b2CrossfRK6b2Vec2($9,$160,$162);
    __ZplRK6b2Vec2S1_($8,$vB,$9);
    __ZmiRK6b2Vec2S1_($7,$8,$vA);
    $163 = $wA;
    $164 = $vcp1;
    __Z7b2CrossfRK6b2Vec2($10,$163,$164);
    __ZmiRK6b2Vec2S1_($dv2,$7,$10);
    $165 = (+__Z5b2DotRK6b2Vec2S1_($dv2,$normal));
    $vn = $165;
    $166 = $vcp1;
    $167 = ((($166)) + 24|0);
    $168 = +HEAPF32[$167>>2];
    $169 = -$168;
    $170 = $vn;
    $171 = $vcp1;
    $172 = ((($171)) + 32|0);
    $173 = +HEAPF32[$172>>2];
    $174 = $170 - $173;
    $175 = $169 * $174;
    $lambda3 = $175;
    $176 = $vcp1;
    $177 = ((($176)) + 16|0);
    $178 = +HEAPF32[$177>>2];
    $179 = $lambda3;
    $180 = $178 + $179;
    $181 = (+__Z5b2MaxIfET_S0_S0_($180,0.0));
    $newImpulse4 = $181;
    $182 = $newImpulse4;
    $183 = $vcp1;
    $184 = ((($183)) + 16|0);
    $185 = +HEAPF32[$184>>2];
    $186 = $182 - $185;
    $lambda3 = $186;
    $187 = $newImpulse4;
    $188 = $vcp1;
    $189 = ((($188)) + 16|0);
    HEAPF32[$189>>2] = $187;
    $190 = $lambda3;
    __ZmlfRK6b2Vec2($P5,$190,$normal);
    $191 = $mA;
    __ZmlfRK6b2Vec2($11,$191,$P5);
    __ZN6b2Vec2mIERKS_($vA,$11);
    $192 = $iA;
    $193 = $vcp1;
    $194 = (+__Z7b2CrossRK6b2Vec2S1_($193,$P5));
    $195 = $192 * $194;
    $196 = $wA;
    $197 = $196 - $195;
    $wA = $197;
    $198 = $mB;
    __ZmlfRK6b2Vec2($12,$198,$P5);
    __ZN6b2Vec2pLERKS_($vB,$12);
    $199 = $iB;
    $200 = $vcp1;
    $201 = ((($200)) + 8|0);
    $202 = (+__Z7b2CrossRK6b2Vec2S1_($201,$P5));
    $203 = $199 * $202;
    $204 = $wB;
    $205 = $204 + $203;
    $wB = $205;
   } else {
    $cp1 = $159;
    $206 = $vc;
    $207 = ((($206)) + 36|0);
    $cp2 = $207;
    $208 = $cp1;
    $209 = ((($208)) + 16|0);
    $210 = +HEAPF32[$209>>2];
    $211 = $cp2;
    $212 = ((($211)) + 16|0);
    $213 = +HEAPF32[$212>>2];
    __ZN6b2Vec2C2Eff($a,$210,$213);
    $214 = +HEAPF32[$a>>2];
    $215 = $214 >= 0.0;
    if (!($215)) {
     label = 12;
     break L1;
    }
    $216 = ((($a)) + 4|0);
    $217 = +HEAPF32[$216>>2];
    $218 = $217 >= 0.0;
    if (!($218)) {
     label = 12;
     break L1;
    }
    $219 = $wB;
    $220 = $cp1;
    $221 = ((($220)) + 8|0);
    __Z7b2CrossfRK6b2Vec2($15,$219,$221);
    __ZplRK6b2Vec2S1_($14,$vB,$15);
    __ZmiRK6b2Vec2S1_($13,$14,$vA);
    $222 = $wA;
    $223 = $cp1;
    __Z7b2CrossfRK6b2Vec2($16,$222,$223);
    __ZmiRK6b2Vec2S1_($dv1,$13,$16);
    $224 = $wB;
    $225 = $cp2;
    $226 = ((($225)) + 8|0);
    __Z7b2CrossfRK6b2Vec2($19,$224,$226);
    __ZplRK6b2Vec2S1_($18,$vB,$19);
    __ZmiRK6b2Vec2S1_($17,$18,$vA);
    $227 = $wA;
    $228 = $cp2;
    __Z7b2CrossfRK6b2Vec2($20,$227,$228);
    __ZmiRK6b2Vec2S1_($dv26,$17,$20);
    $229 = (+__Z5b2DotRK6b2Vec2S1_($dv1,$normal));
    $vn1 = $229;
    $230 = (+__Z5b2DotRK6b2Vec2S1_($dv26,$normal));
    $vn2 = $230;
    __ZN6b2Vec2C2Ev($b);
    $231 = $vn1;
    $232 = $cp1;
    $233 = ((($232)) + 32|0);
    $234 = +HEAPF32[$233>>2];
    $235 = $231 - $234;
    HEAPF32[$b>>2] = $235;
    $236 = $vn2;
    $237 = $cp2;
    $238 = ((($237)) + 32|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $236 - $239;
    $241 = ((($b)) + 4|0);
    HEAPF32[$241>>2] = $240;
    $242 = $vc;
    $243 = ((($242)) + 96|0);
    __Z5b2MulRK7b2Mat22RK6b2Vec2($21,$243,$a);
    __ZN6b2Vec2mIERKS_($b,$21);
    $k_errorTol = 0.0010000000474974513;
    $244 = $vc;
    $245 = ((($244)) + 80|0);
    __Z5b2MulRK7b2Mat22RK6b2Vec2($22,$245,$b);
    __ZNK6b2Vec2ngEv($x,$22);
    $246 = +HEAPF32[$x>>2];
    $247 = $246 >= 0.0;
    if ($247) {
     $248 = ((($x)) + 4|0);
     $249 = +HEAPF32[$248>>2];
     $250 = $249 >= 0.0;
     if ($250) {
      __ZmiRK6b2Vec2S1_($d,$x,$a);
      $251 = +HEAPF32[$d>>2];
      __ZmlfRK6b2Vec2($P1,$251,$normal);
      $252 = ((($d)) + 4|0);
      $253 = +HEAPF32[$252>>2];
      __ZmlfRK6b2Vec2($P2,$253,$normal);
      $254 = $mA;
      __ZplRK6b2Vec2S1_($24,$P1,$P2);
      __ZmlfRK6b2Vec2($23,$254,$24);
      __ZN6b2Vec2mIERKS_($vA,$23);
      $255 = $iA;
      $256 = $cp1;
      $257 = (+__Z7b2CrossRK6b2Vec2S1_($256,$P1));
      $258 = $cp2;
      $259 = (+__Z7b2CrossRK6b2Vec2S1_($258,$P2));
      $260 = $257 + $259;
      $261 = $255 * $260;
      $262 = $wA;
      $263 = $262 - $261;
      $wA = $263;
      $264 = $mB;
      __ZplRK6b2Vec2S1_($26,$P1,$P2);
      __ZmlfRK6b2Vec2($25,$264,$26);
      __ZN6b2Vec2pLERKS_($vB,$25);
      $265 = $iB;
      $266 = $cp1;
      $267 = ((($266)) + 8|0);
      $268 = (+__Z7b2CrossRK6b2Vec2S1_($267,$P1));
      $269 = $cp2;
      $270 = ((($269)) + 8|0);
      $271 = (+__Z7b2CrossRK6b2Vec2S1_($270,$P2));
      $272 = $268 + $271;
      $273 = $265 * $272;
      $274 = $wB;
      $275 = $274 + $273;
      $wB = $275;
      $276 = +HEAPF32[$x>>2];
      $277 = $cp1;
      $278 = ((($277)) + 16|0);
      HEAPF32[$278>>2] = $276;
      $279 = ((($x)) + 4|0);
      $280 = +HEAPF32[$279>>2];
      $281 = $cp2;
      $282 = ((($281)) + 16|0);
      HEAPF32[$282>>2] = $280;
      break;
     }
    }
    $283 = $cp1;
    $284 = ((($283)) + 24|0);
    $285 = +HEAPF32[$284>>2];
    $286 = -$285;
    $287 = +HEAPF32[$b>>2];
    $288 = $286 * $287;
    HEAPF32[$x>>2] = $288;
    $289 = ((($x)) + 4|0);
    HEAPF32[$289>>2] = 0.0;
    $vn1 = 0.0;
    $290 = $vc;
    $291 = ((($290)) + 96|0);
    $292 = ((($291)) + 4|0);
    $293 = +HEAPF32[$292>>2];
    $294 = +HEAPF32[$x>>2];
    $295 = $293 * $294;
    $296 = ((($b)) + 4|0);
    $297 = +HEAPF32[$296>>2];
    $298 = $295 + $297;
    $vn2 = $298;
    $299 = +HEAPF32[$x>>2];
    $300 = $299 >= 0.0;
    $301 = $vn2;
    $302 = $301 >= 0.0;
    $or$cond3 = $300 & $302;
    if ($or$cond3) {
     __ZmiRK6b2Vec2S1_($d7,$x,$a);
     $303 = +HEAPF32[$d7>>2];
     __ZmlfRK6b2Vec2($P18,$303,$normal);
     $304 = ((($d7)) + 4|0);
     $305 = +HEAPF32[$304>>2];
     __ZmlfRK6b2Vec2($P29,$305,$normal);
     $306 = $mA;
     __ZplRK6b2Vec2S1_($28,$P18,$P29);
     __ZmlfRK6b2Vec2($27,$306,$28);
     __ZN6b2Vec2mIERKS_($vA,$27);
     $307 = $iA;
     $308 = $cp1;
     $309 = (+__Z7b2CrossRK6b2Vec2S1_($308,$P18));
     $310 = $cp2;
     $311 = (+__Z7b2CrossRK6b2Vec2S1_($310,$P29));
     $312 = $309 + $311;
     $313 = $307 * $312;
     $314 = $wA;
     $315 = $314 - $313;
     $wA = $315;
     $316 = $mB;
     __ZplRK6b2Vec2S1_($30,$P18,$P29);
     __ZmlfRK6b2Vec2($29,$316,$30);
     __ZN6b2Vec2pLERKS_($vB,$29);
     $317 = $iB;
     $318 = $cp1;
     $319 = ((($318)) + 8|0);
     $320 = (+__Z7b2CrossRK6b2Vec2S1_($319,$P18));
     $321 = $cp2;
     $322 = ((($321)) + 8|0);
     $323 = (+__Z7b2CrossRK6b2Vec2S1_($322,$P29));
     $324 = $320 + $323;
     $325 = $317 * $324;
     $326 = $wB;
     $327 = $326 + $325;
     $wB = $327;
     $328 = +HEAPF32[$x>>2];
     $329 = $cp1;
     $330 = ((($329)) + 16|0);
     HEAPF32[$330>>2] = $328;
     $331 = ((($x)) + 4|0);
     $332 = +HEAPF32[$331>>2];
     $333 = $cp2;
     $334 = ((($333)) + 16|0);
     HEAPF32[$334>>2] = $332;
     break;
    }
    HEAPF32[$x>>2] = 0.0;
    $335 = $cp2;
    $336 = ((($335)) + 24|0);
    $337 = +HEAPF32[$336>>2];
    $338 = -$337;
    $339 = ((($b)) + 4|0);
    $340 = +HEAPF32[$339>>2];
    $341 = $338 * $340;
    $342 = ((($x)) + 4|0);
    HEAPF32[$342>>2] = $341;
    $343 = $vc;
    $344 = ((($343)) + 96|0);
    $345 = ((($344)) + 8|0);
    $346 = +HEAPF32[$345>>2];
    $347 = ((($x)) + 4|0);
    $348 = +HEAPF32[$347>>2];
    $349 = $346 * $348;
    $350 = +HEAPF32[$b>>2];
    $351 = $349 + $350;
    $vn1 = $351;
    $vn2 = 0.0;
    $352 = ((($x)) + 4|0);
    $353 = +HEAPF32[$352>>2];
    $354 = $353 >= 0.0;
    $355 = $vn1;
    $356 = $355 >= 0.0;
    $or$cond5 = $354 & $356;
    if ($or$cond5) {
     __ZmiRK6b2Vec2S1_($d10,$x,$a);
     $357 = +HEAPF32[$d10>>2];
     __ZmlfRK6b2Vec2($P111,$357,$normal);
     $358 = ((($d10)) + 4|0);
     $359 = +HEAPF32[$358>>2];
     __ZmlfRK6b2Vec2($P212,$359,$normal);
     $360 = $mA;
     __ZplRK6b2Vec2S1_($32,$P111,$P212);
     __ZmlfRK6b2Vec2($31,$360,$32);
     __ZN6b2Vec2mIERKS_($vA,$31);
     $361 = $iA;
     $362 = $cp1;
     $363 = (+__Z7b2CrossRK6b2Vec2S1_($362,$P111));
     $364 = $cp2;
     $365 = (+__Z7b2CrossRK6b2Vec2S1_($364,$P212));
     $366 = $363 + $365;
     $367 = $361 * $366;
     $368 = $wA;
     $369 = $368 - $367;
     $wA = $369;
     $370 = $mB;
     __ZplRK6b2Vec2S1_($34,$P111,$P212);
     __ZmlfRK6b2Vec2($33,$370,$34);
     __ZN6b2Vec2pLERKS_($vB,$33);
     $371 = $iB;
     $372 = $cp1;
     $373 = ((($372)) + 8|0);
     $374 = (+__Z7b2CrossRK6b2Vec2S1_($373,$P111));
     $375 = $cp2;
     $376 = ((($375)) + 8|0);
     $377 = (+__Z7b2CrossRK6b2Vec2S1_($376,$P212));
     $378 = $374 + $377;
     $379 = $371 * $378;
     $380 = $wB;
     $381 = $380 + $379;
     $wB = $381;
     $382 = +HEAPF32[$x>>2];
     $383 = $cp1;
     $384 = ((($383)) + 16|0);
     HEAPF32[$384>>2] = $382;
     $385 = ((($x)) + 4|0);
     $386 = +HEAPF32[$385>>2];
     $387 = $cp2;
     $388 = ((($387)) + 16|0);
     HEAPF32[$388>>2] = $386;
     break;
    }
    HEAPF32[$x>>2] = 0.0;
    $389 = ((($x)) + 4|0);
    HEAPF32[$389>>2] = 0.0;
    $390 = +HEAPF32[$b>>2];
    $vn1 = $390;
    $391 = ((($b)) + 4|0);
    $392 = +HEAPF32[$391>>2];
    $vn2 = $392;
    $393 = $vn1;
    $394 = $393 >= 0.0;
    $395 = $vn2;
    $396 = $395 >= 0.0;
    $or$cond7 = $394 & $396;
    if ($or$cond7) {
     __ZmiRK6b2Vec2S1_($d13,$x,$a);
     $397 = +HEAPF32[$d13>>2];
     __ZmlfRK6b2Vec2($P114,$397,$normal);
     $398 = ((($d13)) + 4|0);
     $399 = +HEAPF32[$398>>2];
     __ZmlfRK6b2Vec2($P215,$399,$normal);
     $400 = $mA;
     __ZplRK6b2Vec2S1_($36,$P114,$P215);
     __ZmlfRK6b2Vec2($35,$400,$36);
     __ZN6b2Vec2mIERKS_($vA,$35);
     $401 = $iA;
     $402 = $cp1;
     $403 = (+__Z7b2CrossRK6b2Vec2S1_($402,$P114));
     $404 = $cp2;
     $405 = (+__Z7b2CrossRK6b2Vec2S1_($404,$P215));
     $406 = $403 + $405;
     $407 = $401 * $406;
     $408 = $wA;
     $409 = $408 - $407;
     $wA = $409;
     $410 = $mB;
     __ZplRK6b2Vec2S1_($38,$P114,$P215);
     __ZmlfRK6b2Vec2($37,$410,$38);
     __ZN6b2Vec2pLERKS_($vB,$37);
     $411 = $iB;
     $412 = $cp1;
     $413 = ((($412)) + 8|0);
     $414 = (+__Z7b2CrossRK6b2Vec2S1_($413,$P114));
     $415 = $cp2;
     $416 = ((($415)) + 8|0);
     $417 = (+__Z7b2CrossRK6b2Vec2S1_($416,$P215));
     $418 = $414 + $417;
     $419 = $411 * $418;
     $420 = $wB;
     $421 = $420 + $419;
     $wB = $421;
     $422 = +HEAPF32[$x>>2];
     $423 = $cp1;
     $424 = ((($423)) + 16|0);
     HEAPF32[$424>>2] = $422;
     $425 = ((($x)) + 4|0);
     $426 = +HEAPF32[$425>>2];
     $427 = $cp2;
     $428 = ((($427)) + 16|0);
     HEAPF32[$428>>2] = $426;
    }
   }
  } while(0);
  $429 = $indexA;
  $430 = ((($39)) + 28|0);
  $431 = HEAP32[$430>>2]|0;
  $432 = (($431) + (($429*12)|0)|0);
  ;HEAP32[$432>>2]=HEAP32[$vA>>2]|0;HEAP32[$432+4>>2]=HEAP32[$vA+4>>2]|0;
  $433 = $wA;
  $434 = $indexA;
  $435 = ((($39)) + 28|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = (($436) + (($434*12)|0)|0);
  $438 = ((($437)) + 8|0);
  HEAPF32[$438>>2] = $433;
  $439 = $indexB;
  $440 = ((($39)) + 28|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = (($441) + (($439*12)|0)|0);
  ;HEAP32[$442>>2]=HEAP32[$vB>>2]|0;HEAP32[$442+4>>2]=HEAP32[$vB+4>>2]|0;
  $443 = $wB;
  $444 = $indexB;
  $445 = ((($39)) + 28|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = (($446) + (($444*12)|0)|0);
  $448 = ((($447)) + 8|0);
  HEAPF32[$448>>2] = $443;
  $449 = $i;
  $450 = (($449) + 1)|0;
  $i = $450;
 }
 if ((label|0) == 4) {
  ___assert_fail((23425|0),(23261|0),311,(23460|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  ___assert_fail((23485|0),(23261|0),406,(23460|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function __Z5b2MulRK7b2Mat22RK6b2Vec2($agg$result,$A,$v) {
 $agg$result = $agg$result|0;
 $A = $A|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $v;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $1;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $20 + $28;
 __ZN6b2Vec2C2Eff($agg$result,$14,$29);
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $manifold = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = ((($1)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = (($7) + (($8*152)|0)|0);
  $vc = $9;
  $10 = $vc;
  $11 = ((($10)) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN9b2Contact11GetManifoldEv($16)|0);
  $manifold = $17;
  $j = 0;
  while(1) {
   $18 = $j;
   $19 = $vc;
   $20 = ((($19)) + 144|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $j;
   $24 = $vc;
   $25 = (($24) + (($23*36)|0)|0);
   $26 = ((($25)) + 16|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $j;
   $29 = $manifold;
   $30 = (($29) + (($28*20)|0)|0);
   $31 = ((($30)) + 8|0);
   HEAPF32[$31>>2] = $27;
   $32 = $j;
   $33 = $vc;
   $34 = (($33) + (($32*36)|0)|0);
   $35 = ((($34)) + 20|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $j;
   $38 = $manifold;
   $39 = (($38) + (($37*20)|0)|0);
   $40 = ((($39)) + 12|0);
   HEAPF32[$40>>2] = $36;
   $41 = $j;
   $42 = (($41) + 1)|0;
   $j = $42;
  }
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0, $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0;
 var $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0, $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 240|0;
 $localCenterB = sp + 224|0;
 $cA = sp + 200|0;
 $cB = sp + 184|0;
 $xfA = sp + 160|0;
 $xfB = sp + 144|0;
 $1 = sp + 136|0;
 $2 = sp + 128|0;
 $3 = sp + 120|0;
 $4 = sp + 112|0;
 $psm = sp + 88|0;
 $normal = sp + 80|0;
 $point = sp + 72|0;
 $rA = sp + 56|0;
 $rB = sp + 48|0;
 $P = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $0 = $this;
 $7 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ((($7)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = ((($7)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $i;
  $15 = (($13) + (($14*88)|0)|0);
  $pc = $15;
  $16 = $pc;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $indexA = $18;
  $19 = $pc;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $indexB = $21;
  $22 = $pc;
  $23 = ((($22)) + 48|0);
  ;HEAP32[$localCenterA>>2]=HEAP32[$23>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$23+4>>2]|0;
  $24 = $pc;
  $25 = ((($24)) + 40|0);
  $26 = +HEAPF32[$25>>2];
  $mA = $26;
  $27 = $pc;
  $28 = ((($27)) + 64|0);
  $29 = +HEAPF32[$28>>2];
  $iA = $29;
  $30 = $pc;
  $31 = ((($30)) + 56|0);
  ;HEAP32[$localCenterB>>2]=HEAP32[$31>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $pc;
  $33 = ((($32)) + 44|0);
  $34 = +HEAPF32[$33>>2];
  $mB = $34;
  $35 = $pc;
  $36 = ((($35)) + 68|0);
  $37 = +HEAPF32[$36>>2];
  $iB = $37;
  $38 = $pc;
  $39 = ((($38)) + 84|0);
  $40 = HEAP32[$39>>2]|0;
  $pointCount = $40;
  $41 = $indexA;
  $42 = ((($7)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + (($41*12)|0)|0);
  ;HEAP32[$cA>>2]=HEAP32[$44>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$44+4>>2]|0;
  $45 = $indexA;
  $46 = ((($7)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($45*12)|0)|0);
  $49 = ((($48)) + 8|0);
  $50 = +HEAPF32[$49>>2];
  $aA = $50;
  $51 = $indexB;
  $52 = ((($7)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($51*12)|0)|0);
  ;HEAP32[$cB>>2]=HEAP32[$54>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$54+4>>2]|0;
  $55 = $indexB;
  $56 = ((($7)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + (($55*12)|0)|0);
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $aB = $60;
  $j = 0;
  while(1) {
   $61 = $j;
   $62 = $pointCount;
   $63 = ($61|0)<($62|0);
   if (!($63)) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $64 = ((($xfA)) + 8|0);
   $65 = $aA;
   __ZN5b2Rot3SetEf($64,$65);
   $66 = ((($xfB)) + 8|0);
   $67 = $aB;
   __ZN5b2Rot3SetEf($66,$67);
   $68 = ((($xfA)) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($2,$68,$localCenterA);
   __ZmiRK6b2Vec2S1_($1,$cA,$2);
   ;HEAP32[$xfA>>2]=HEAP32[$1>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$1+4>>2]|0;
   $69 = ((($xfB)) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($4,$69,$localCenterB);
   __ZmiRK6b2Vec2S1_($3,$cB,$4);
   ;HEAP32[$xfB>>2]=HEAP32[$3>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$3+4>>2]|0;
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $70 = $pc;
   $71 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm,$70,$xfA,$xfB,$71);
   ;HEAP32[$normal>>2]=HEAP32[$psm>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$psm+4>>2]|0;
   $72 = ((($psm)) + 8|0);
   ;HEAP32[$point>>2]=HEAP32[$72>>2]|0;HEAP32[$point+4>>2]=HEAP32[$72+4>>2]|0;
   $73 = ((($psm)) + 16|0);
   $74 = +HEAPF32[$73>>2];
   $separation = $74;
   __ZmiRK6b2Vec2S1_($rA,$point,$cA);
   __ZmiRK6b2Vec2S1_($rB,$point,$cB);
   $75 = $minSeparation;
   $76 = $separation;
   $77 = (+__Z5b2MinIfET_S0_S0_($75,$76));
   $minSeparation = $77;
   $78 = $separation;
   $79 = $78 + 0.004999999888241291;
   $80 = 0.20000000298023224 * $79;
   $81 = (+__Z7b2ClampIfET_S0_S0_S0_($80,-0.20000000298023224,0.0));
   $C = $81;
   $82 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$normal));
   $rnA = $82;
   $83 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$normal));
   $rnB = $83;
   $84 = $mA;
   $85 = $mB;
   $86 = $84 + $85;
   $87 = $iA;
   $88 = $rnA;
   $89 = $87 * $88;
   $90 = $rnA;
   $91 = $89 * $90;
   $92 = $86 + $91;
   $93 = $iB;
   $94 = $rnB;
   $95 = $93 * $94;
   $96 = $rnB;
   $97 = $95 * $96;
   $98 = $92 + $97;
   $K = $98;
   $99 = $K;
   $100 = $99 > 0.0;
   if ($100) {
    $101 = $C;
    $102 = -$101;
    $103 = $K;
    $104 = $102 / $103;
    $105 = $104;
   } else {
    $105 = 0.0;
   }
   $impulse = $105;
   $106 = $impulse;
   __ZmlfRK6b2Vec2($P,$106,$normal);
   $107 = $mA;
   __ZmlfRK6b2Vec2($5,$107,$P);
   __ZN6b2Vec2mIERKS_($cA,$5);
   $108 = $iA;
   $109 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$P));
   $110 = $108 * $109;
   $111 = $aA;
   $112 = $111 - $110;
   $aA = $112;
   $113 = $mB;
   __ZmlfRK6b2Vec2($6,$113,$P);
   __ZN6b2Vec2pLERKS_($cB,$6);
   $114 = $iB;
   $115 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$P));
   $116 = $114 * $115;
   $117 = $aB;
   $118 = $117 + $116;
   $aB = $118;
   $119 = $j;
   $120 = (($119) + 1)|0;
   $j = $120;
  }
  $121 = $indexA;
  $122 = ((($7)) + 24|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($121*12)|0)|0);
  ;HEAP32[$124>>2]=HEAP32[$cA>>2]|0;HEAP32[$124+4>>2]=HEAP32[$cA+4>>2]|0;
  $125 = $aA;
  $126 = $indexA;
  $127 = ((($7)) + 24|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + (($126*12)|0)|0);
  $130 = ((($129)) + 8|0);
  HEAPF32[$130>>2] = $125;
  $131 = $indexB;
  $132 = ((($7)) + 24|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($131*12)|0)|0);
  ;HEAP32[$134>>2]=HEAP32[$cB>>2]|0;HEAP32[$134+4>>2]=HEAP32[$cB+4>>2]|0;
  $135 = $aB;
  $136 = $indexB;
  $137 = ((($7)) + 24|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + (($136*12)|0)|0);
  $140 = ((($139)) + 8|0);
  HEAPF32[$140>>2] = $135;
  $141 = $i;
  $142 = (($141) + 1)|0;
  $i = $142;
 }
 $143 = $minSeparation;
 $144 = $143 >= -0.014999999664723873;
 STACKTOP = sp;return ($144|0);
}
function __ZN24b2PositionSolverManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = ((($1)) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this,$pc,$xfA,$xfB,$index) {
 $this = $this|0;
 $pc = $pc|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $clipPoint = 0, $clipPoint2 = 0, $planePoint = 0, $planePoint1 = 0, $pointA = 0, $pointB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pointA = sp + 112|0;
 $pointB = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 88|0;
 $7 = sp + 80|0;
 $8 = sp + 72|0;
 $9 = sp + 64|0;
 $planePoint = sp + 56|0;
 $clipPoint = sp + 48|0;
 $10 = sp + 40|0;
 $11 = sp + 32|0;
 $planePoint1 = sp + 24|0;
 $clipPoint2 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp;
 $0 = $this;
 $1 = $pc;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $index;
 $14 = $0;
 $15 = $1;
 $16 = ((($15)) + 84|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if (!($18)) {
  ___assert_fail((23512|0),(23261|0),617,(23531|0));
  // unreachable;
 }
 $19 = $1;
 $20 = ((($19)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 switch ($21|0) {
 case 0:  {
  $22 = $2;
  $23 = $1;
  $24 = ((($23)) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$22,$24);
  $25 = $3;
  $26 = $1;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$25,$26);
  __ZmiRK6b2Vec2S1_($5,$pointB,$pointA);
  ;HEAP32[$14>>2]=HEAP32[$5>>2]|0;HEAP32[$14+4>>2]=HEAP32[$5+4>>2]|0;
  (+__ZN6b2Vec29NormalizeEv($14));
  $27 = ((($14)) + 8|0);
  __ZplRK6b2Vec2S1_($7,$pointA,$pointB);
  __ZmlfRK6b2Vec2($6,0.5,$7);
  ;HEAP32[$27>>2]=HEAP32[$6>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
  __ZmiRK6b2Vec2S1_($8,$pointB,$pointA);
  $28 = (+__Z5b2DotRK6b2Vec2S1_($8,$14));
  $29 = $1;
  $30 = ((($29)) + 76|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $28 - $31;
  $33 = $1;
  $34 = ((($33)) + 80|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $32 - $35;
  $37 = ((($14)) + 16|0);
  HEAPF32[$37>>2] = $36;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $38 = $2;
  $39 = ((($38)) + 8|0);
  $40 = $1;
  $41 = ((($40)) + 16|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($9,$39,$41);
  ;HEAP32[$14>>2]=HEAP32[$9>>2]|0;HEAP32[$14+4>>2]=HEAP32[$9+4>>2]|0;
  $42 = $2;
  $43 = $1;
  $44 = ((($43)) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint,$42,$44);
  $45 = $3;
  $46 = $4;
  $47 = $1;
  $48 = (($47) + ($46<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint,$45,$48);
  __ZmiRK6b2Vec2S1_($10,$clipPoint,$planePoint);
  $49 = (+__Z5b2DotRK6b2Vec2S1_($10,$14));
  $50 = $1;
  $51 = ((($50)) + 76|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 - $52;
  $54 = $1;
  $55 = ((($54)) + 80|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $53 - $56;
  $58 = ((($14)) + 16|0);
  HEAPF32[$58>>2] = $57;
  $59 = ((($14)) + 8|0);
  ;HEAP32[$59>>2]=HEAP32[$clipPoint>>2]|0;HEAP32[$59+4>>2]=HEAP32[$clipPoint+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $60 = $3;
  $61 = ((($60)) + 8|0);
  $62 = $1;
  $63 = ((($62)) + 16|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($11,$61,$63);
  ;HEAP32[$14>>2]=HEAP32[$11>>2]|0;HEAP32[$14+4>>2]=HEAP32[$11+4>>2]|0;
  $64 = $3;
  $65 = $1;
  $66 = ((($65)) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint1,$64,$66);
  $67 = $2;
  $68 = $4;
  $69 = $1;
  $70 = (($69) + ($68<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint2,$67,$70);
  __ZmiRK6b2Vec2S1_($12,$clipPoint2,$planePoint1);
  $71 = (+__Z5b2DotRK6b2Vec2S1_($12,$14));
  $72 = $1;
  $73 = ((($72)) + 76|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $71 - $74;
  $76 = $1;
  $77 = ((($76)) + 80|0);
  $78 = +HEAPF32[$77>>2];
  $79 = $75 - $78;
  $80 = ((($14)) + 16|0);
  HEAPF32[$80>>2] = $79;
  $81 = ((($14)) + 8|0);
  ;HEAP32[$81>>2]=HEAP32[$clipPoint2>>2]|0;HEAP32[$81+4>>2]=HEAP32[$clipPoint2+4>>2]|0;
  __ZNK6b2Vec2ngEv($13,$14);
  ;HEAP32[$14>>2]=HEAP32[$13>>2]|0;HEAP32[$14+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this,$toiIndexA,$toiIndexB) {
 $this = $this|0;
 $toiIndexA = $toiIndexA|0;
 $toiIndexB = $toiIndexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0, $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0;
 var $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0, $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 240|0;
 $localCenterB = sp + 232|0;
 $cA = sp + 200|0;
 $cB = sp + 184|0;
 $xfA = sp + 160|0;
 $xfB = sp + 144|0;
 $3 = sp + 136|0;
 $4 = sp + 128|0;
 $5 = sp + 120|0;
 $6 = sp + 112|0;
 $psm = sp + 88|0;
 $normal = sp + 80|0;
 $point = sp + 72|0;
 $rA = sp + 56|0;
 $rB = sp + 48|0;
 $P = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $0 = $this;
 $1 = $toiIndexA;
 $2 = $toiIndexB;
 $9 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ((($9)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = ((($9)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $i;
  $17 = (($15) + (($16*88)|0)|0);
  $pc = $17;
  $18 = $pc;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $indexA = $20;
  $21 = $pc;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $indexB = $23;
  $24 = $pc;
  $25 = ((($24)) + 48|0);
  ;HEAP32[$localCenterA>>2]=HEAP32[$25>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$25+4>>2]|0;
  $26 = $pc;
  $27 = ((($26)) + 56|0);
  ;HEAP32[$localCenterB>>2]=HEAP32[$27>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$27+4>>2]|0;
  $28 = $pc;
  $29 = ((($28)) + 84|0);
  $30 = HEAP32[$29>>2]|0;
  $pointCount = $30;
  $mA = 0.0;
  $iA = 0.0;
  $31 = $indexA;
  $32 = $1;
  $33 = ($31|0)==($32|0);
  if ($33) {
   label = 5;
  } else {
   $34 = $indexA;
   $35 = $2;
   $36 = ($34|0)==($35|0);
   if ($36) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $37 = $pc;
   $38 = ((($37)) + 40|0);
   $39 = +HEAPF32[$38>>2];
   $mA = $39;
   $40 = $pc;
   $41 = ((($40)) + 64|0);
   $42 = +HEAPF32[$41>>2];
   $iA = $42;
  }
  $43 = $pc;
  $44 = ((($43)) + 44|0);
  $45 = +HEAPF32[$44>>2];
  $mB = $45;
  $46 = $pc;
  $47 = ((($46)) + 68|0);
  $48 = +HEAPF32[$47>>2];
  $iB = $48;
  $49 = $indexB;
  $50 = $1;
  $51 = ($49|0)==($50|0);
  if ($51) {
   label = 8;
  } else {
   $52 = $indexB;
   $53 = $2;
   $54 = ($52|0)==($53|0);
   if ($54) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $55 = $pc;
   $56 = ((($55)) + 44|0);
   $57 = +HEAPF32[$56>>2];
   $mB = $57;
   $58 = $pc;
   $59 = ((($58)) + 68|0);
   $60 = +HEAPF32[$59>>2];
   $iB = $60;
  }
  $61 = $indexA;
  $62 = ((($9)) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + (($61*12)|0)|0);
  ;HEAP32[$cA>>2]=HEAP32[$64>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$64+4>>2]|0;
  $65 = $indexA;
  $66 = ((($9)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($65*12)|0)|0);
  $69 = ((($68)) + 8|0);
  $70 = +HEAPF32[$69>>2];
  $aA = $70;
  $71 = $indexB;
  $72 = ((($9)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + (($71*12)|0)|0);
  ;HEAP32[$cB>>2]=HEAP32[$74>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$74+4>>2]|0;
  $75 = $indexB;
  $76 = ((($9)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + (($75*12)|0)|0);
  $79 = ((($78)) + 8|0);
  $80 = +HEAPF32[$79>>2];
  $aB = $80;
  $j = 0;
  while(1) {
   $81 = $j;
   $82 = $pointCount;
   $83 = ($81|0)<($82|0);
   if (!($83)) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $84 = ((($xfA)) + 8|0);
   $85 = $aA;
   __ZN5b2Rot3SetEf($84,$85);
   $86 = ((($xfB)) + 8|0);
   $87 = $aB;
   __ZN5b2Rot3SetEf($86,$87);
   $88 = ((($xfA)) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($4,$88,$localCenterA);
   __ZmiRK6b2Vec2S1_($3,$cA,$4);
   ;HEAP32[$xfA>>2]=HEAP32[$3>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$3+4>>2]|0;
   $89 = ((($xfB)) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($6,$89,$localCenterB);
   __ZmiRK6b2Vec2S1_($5,$cB,$6);
   ;HEAP32[$xfB>>2]=HEAP32[$5>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$5+4>>2]|0;
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $90 = $pc;
   $91 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm,$90,$xfA,$xfB,$91);
   ;HEAP32[$normal>>2]=HEAP32[$psm>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$psm+4>>2]|0;
   $92 = ((($psm)) + 8|0);
   ;HEAP32[$point>>2]=HEAP32[$92>>2]|0;HEAP32[$point+4>>2]=HEAP32[$92+4>>2]|0;
   $93 = ((($psm)) + 16|0);
   $94 = +HEAPF32[$93>>2];
   $separation = $94;
   __ZmiRK6b2Vec2S1_($rA,$point,$cA);
   __ZmiRK6b2Vec2S1_($rB,$point,$cB);
   $95 = $minSeparation;
   $96 = $separation;
   $97 = (+__Z5b2MinIfET_S0_S0_($95,$96));
   $minSeparation = $97;
   $98 = $separation;
   $99 = $98 + 0.004999999888241291;
   $100 = 0.75 * $99;
   $101 = (+__Z7b2ClampIfET_S0_S0_S0_($100,-0.20000000298023224,0.0));
   $C = $101;
   $102 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$normal));
   $rnA = $102;
   $103 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$normal));
   $rnB = $103;
   $104 = $mA;
   $105 = $mB;
   $106 = $104 + $105;
   $107 = $iA;
   $108 = $rnA;
   $109 = $107 * $108;
   $110 = $rnA;
   $111 = $109 * $110;
   $112 = $106 + $111;
   $113 = $iB;
   $114 = $rnB;
   $115 = $113 * $114;
   $116 = $rnB;
   $117 = $115 * $116;
   $118 = $112 + $117;
   $K = $118;
   $119 = $K;
   $120 = $119 > 0.0;
   if ($120) {
    $121 = $C;
    $122 = -$121;
    $123 = $K;
    $124 = $122 / $123;
    $125 = $124;
   } else {
    $125 = 0.0;
   }
   $impulse = $125;
   $126 = $impulse;
   __ZmlfRK6b2Vec2($P,$126,$normal);
   $127 = $mA;
   __ZmlfRK6b2Vec2($7,$127,$P);
   __ZN6b2Vec2mIERKS_($cA,$7);
   $128 = $iA;
   $129 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$P));
   $130 = $128 * $129;
   $131 = $aA;
   $132 = $131 - $130;
   $aA = $132;
   $133 = $mB;
   __ZmlfRK6b2Vec2($8,$133,$P);
   __ZN6b2Vec2pLERKS_($cB,$8);
   $134 = $iB;
   $135 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$P));
   $136 = $134 * $135;
   $137 = $aB;
   $138 = $137 + $136;
   $aB = $138;
   $139 = $j;
   $140 = (($139) + 1)|0;
   $j = $140;
  }
  $141 = $indexA;
  $142 = ((($9)) + 24|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + (($141*12)|0)|0);
  ;HEAP32[$144>>2]=HEAP32[$cA>>2]|0;HEAP32[$144+4>>2]=HEAP32[$cA+4>>2]|0;
  $145 = $aA;
  $146 = $indexA;
  $147 = ((($9)) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($146*12)|0)|0);
  $150 = ((($149)) + 8|0);
  HEAPF32[$150>>2] = $145;
  $151 = $indexB;
  $152 = ((($9)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + (($151*12)|0)|0);
  ;HEAP32[$154>>2]=HEAP32[$cB>>2]|0;HEAP32[$154+4>>2]=HEAP32[$cB+4>>2]|0;
  $155 = $aB;
  $156 = $indexB;
  $157 = ((($9)) + 24|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($156*12)|0)|0);
  $160 = ((($159)) + 8|0);
  HEAPF32[$160>>2] = $155;
  $161 = $i;
  $162 = (($161) + 1)|0;
  $i = $162;
 }
 $163 = $minSeparation;
 $164 = $163 >= -0.0074999998323619366;
 STACKTOP = sp;return ($164|0);
}
function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = ((($4)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(63,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($9,$10,$11);
 STACKTOP = sp;return ($9|0);
}
function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = 2200;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(507,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(1);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(424,(23716|0),(23567|0),41,(23667|0));
    $15 = __THREW__; __THREW__ = 0;
    break;
   }
   $20 = ((($5)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(507,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ($22|0)==(0);
    if ($25) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24039|0),(23567|0),42,(23667|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = ((($4)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(66,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($9,$10,$11);
 STACKTOP = sp;return ($9|0);
}
function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = 2220;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(507,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(1);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(424,(23716|0),(23757|0),41,(23858|0));
    $15 = __THREW__; __THREW__ = 0;
    break;
   }
   $20 = ((($5)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(507,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ($22|0)==(2);
    if ($25) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24256|0),(23757|0),42,(23858|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = ((($4)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(69,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($9,$10,$11);
 STACKTOP = sp;return ($9|0);
}
function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = 2240;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(507,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(2);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(424,(24101|0),(23910|0),41,(24013|0));
    $15 = __THREW__; __THREW__ = 0;
    break;
   }
   $20 = ((($5)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(507,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ($22|0)==(0);
    if ($25) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24039|0),(23910|0),42,(24013|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = ((($4)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(72,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN16b2PolygonContactC2EP9b2FixtureS1_($9,$10,$11);
 STACKTOP = sp;return ($9|0);
}
function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = 2260;
 HEAP32[$5>>2] = $8;
 $9 = ((($5)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(507,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(2);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(424,(24101|0),(24145|0),44,(24239|0));
    $15 = __THREW__; __THREW__ = 0;
    break;
   }
   $20 = ((($5)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(507,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ($22|0)==(2);
    if ($25) {
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(424,(24256|0),(24145|0),45,(24239|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch_3(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZNK6b2Body8GetAngleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = ((($2)) + 28|0);
 $4 = +HEAPF32[$3>>2];
 STACKTOP = sp;return (+$4);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $angle = 0.0, $body = 0, $bodyDef = 0, $dynamicBox = 0, $fixtureDef = 0, $gravity = 0, $groundBody = 0, $groundBodyDef = 0, $groundBox = 0, $i = 0, $position = 0, $positionIterations = 0, $timeStep = 0.0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $velocityIterations = 0, $world = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 104016|0;
 $gravity = sp + 104528|0;
 $world = sp;
 $groundBodyDef = sp + 104476|0;
 $groundBox = sp + 104312|0;
 $bodyDef = sp + 104260|0;
 $dynamicBox = sp + 104104|0;
 $fixtureDef = sp + 104072|0;
 $position = sp + 104048|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 __ZN6b2Vec2C2Eff($gravity,0.0,-10.0);
 __ZN7b2WorldC2ERK6b2Vec2($world,$gravity);
 __THREW__ = 0;
 invoke_vi(523,($groundBodyDef|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if ($6) {
   label = 21;
  } else {
   $7 = ((($groundBodyDef)) + 4|0);
   __THREW__ = 0;
   invoke_vidd(524,($7|0),0.0,-10.0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    label = 21;
   } else {
    __THREW__ = 0;
    $10 = (invoke_iii(525,($world|0),($groundBodyDef|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     label = 21;
    } else {
     $groundBody = $10;
     __THREW__ = 0;
     invoke_vi(526,($groundBox|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      label = 21;
     } else {
      __THREW__ = 0;
      invoke_vidd(527,($groundBox|0),50.0,10.0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      L6: do {
       if ($16) {
        label = 22;
       } else {
        $17 = $groundBody;
        __THREW__ = 0;
        (invoke_iiid(528,($17|0),($groundBox|0),0.0)|0);
        $18 = __THREW__; __THREW__ = 0;
        $19 = $18&1;
        if ($19) {
         label = 22;
        } else {
         __THREW__ = 0;
         invoke_vi(523,($bodyDef|0));
         $20 = __THREW__; __THREW__ = 0;
         $21 = $20&1;
         if ($21) {
          label = 22;
         } else {
          HEAP32[$bodyDef>>2] = 2;
          $22 = ((($bodyDef)) + 4|0);
          __THREW__ = 0;
          invoke_vidd(524,($22|0),0.0,4.0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if ($24) {
           label = 22;
          } else {
           __THREW__ = 0;
           $25 = (invoke_iii(525,($world|0),($bodyDef|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if ($27) {
            label = 22;
           } else {
            $body = $25;
            __THREW__ = 0;
            invoke_vi(526,($dynamicBox|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if ($29) {
             label = 22;
            } else {
             __THREW__ = 0;
             invoke_vidd(527,($dynamicBox|0),1.0,1.0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             L13: do {
              if (!($31)) {
               __THREW__ = 0;
               invoke_vi(529,($fixtureDef|0));
               $32 = __THREW__; __THREW__ = 0;
               $33 = $32&1;
               if (!($33)) {
                HEAP32[$fixtureDef>>2] = $dynamicBox;
                $34 = ((($fixtureDef)) + 16|0);
                HEAPF32[$34>>2] = 1.0;
                $35 = ((($fixtureDef)) + 8|0);
                HEAPF32[$35>>2] = 0.30000001192092896;
                $36 = $body;
                __THREW__ = 0;
                (invoke_iii(530,($36|0),($fixtureDef|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 $timeStep = 0.01666666753590107;
                 $velocityIterations = 6;
                 $positionIterations = 2;
                 $i = 0;
                 while(1) {
                  $39 = $i;
                  $40 = ($39|0)<(60);
                  if (!($40)) {
                   break;
                  }
                  $41 = $timeStep;
                  $42 = $velocityIterations;
                  $43 = $positionIterations;
                  __THREW__ = 0;
                  invoke_vidii(531,($world|0),(+$41),($42|0),($43|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break L13;
                  }
                  $46 = $body;
                  __THREW__ = 0;
                  $47 = (invoke_ii(532,($46|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break L13;
                  }
                  ;HEAP32[$position>>2]=HEAP32[$47>>2]|0;HEAP32[$position+4>>2]=HEAP32[$47+4>>2]|0;
                  $50 = $body;
                  __THREW__ = 0;
                  $51 = (+invoke_di(533,($50|0)));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break L13;
                  }
                  $angle = $51;
                  $54 = +HEAPF32[$position>>2];
                  $55 = $54;
                  $56 = ((($position)) + 4|0);
                  $57 = +HEAPF32[$56>>2];
                  $58 = $57;
                  $59 = $angle;
                  $60 = $59;
                  __THREW__ = 0;
                  HEAPF64[$vararg_buffer>>3] = $55;
                  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
                  HEAPF64[$vararg_ptr1>>3] = $58;
                  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
                  HEAPF64[$vararg_ptr2>>3] = $60;
                  (invoke_iii(423,(24300|0),($vararg_buffer|0))|0);
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   break L13;
                  }
                  $63 = $i;
                  $64 = (($63) + 1)|0;
                  $i = $64;
                 }
                 $0 = 0;
                 __THREW__ = 0;
                 invoke_vi(12,($dynamicBox|0));
                 $73 = __THREW__; __THREW__ = 0;
                 $74 = $73&1;
                 if ($74) {
                  label = 22;
                  break L6;
                 }
                 __THREW__ = 0;
                 invoke_vi(12,($groundBox|0));
                 $75 = __THREW__; __THREW__ = 0;
                 $76 = $75&1;
                 if ($76) {
                  label = 21;
                  break L1;
                 }
                 __ZN7b2WorldD2Ev($world);
                 $77 = $0;
                 STACKTOP = sp;return ($77|0);
                }
               }
              }
             } while(0);
             $69 = ___cxa_find_matching_catch_2()|0;
             $70 = tempRet0;
             $3 = $69;
             $4 = $70;
             __THREW__ = 0;
             invoke_vi(12,($dynamicBox|0));
             $71 = __THREW__; __THREW__ = 0;
             $72 = $71&1;
             if ($72) {
              $84 = ___cxa_find_matching_catch_3(0|0)|0;
              $85 = tempRet0;
              ___clang_call_terminate($84);
              // unreachable;
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 22) {
       $67 = ___cxa_find_matching_catch_2()|0;
       $68 = tempRet0;
       $3 = $67;
       $4 = $68;
      }
      __THREW__ = 0;
      invoke_vi(12,($groundBox|0));
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if ($79) {
       $84 = ___cxa_find_matching_catch_3(0|0)|0;
       $85 = tempRet0;
       ___clang_call_terminate($84);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $3 = $65;
  $4 = $66;
 }
 __THREW__ = 0;
 invoke_vi(534,($world|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $84 = ___cxa_find_matching_catch_3(0|0)|0;
  $85 = tempRet0;
  ___clang_call_terminate($84);
  // unreachable;
 } else {
  $82 = $3;
  $83 = $4;
  ___resumeException($82|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN9b2BodyDefC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = ((($1)) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = ((($1)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 4|0);
 __ZN6b2Vec23SetEff($5,0.0,0.0);
 $6 = ((($1)) + 12|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($1)) + 16|0);
 __ZN6b2Vec23SetEff($7,0.0,0.0);
 $8 = ((($1)) + 24|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($1)) + 28|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($1)) + 32|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = ((($1)) + 36|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($1)) + 37|0);
 HEAP8[$12>>0] = 1;
 $13 = ((($1)) + 38|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($1)) + 39|0);
 HEAP8[$14>>0] = 0;
 HEAP32[$1>>2] = 0;
 $15 = ((($1)) + 40|0);
 HEAP8[$15>>0] = 1;
 $16 = ((($1)) + 48|0);
 HEAPF32[$16>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZNK6b2Body11GetPositionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8220]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 32924;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[8220]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((535|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[8220]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((536|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_382($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 75;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_519($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtox_519($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((24320) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((24320) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$90 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $89 = ($90|0)<(0);
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($90|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$90 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $260 = $291;$262 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;$262 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (24576 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((24320) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((24320) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$155 = 0;$157 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$155 = 0;$157 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $154 = ($155>>>0)>($150>>>0);
      $156 = ($157>>>0)>($149>>>0);
      $158 = ($155|0)==($150|0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $157;$293 = $155;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;$162 = $155;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((24320) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((24320) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((24320) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $206 = $295;$208 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $205 = ($206>>>0)>($204>>>0);
       $207 = ($208>>>0)>($203>>>0);
       $209 = ($206|0)==($204|0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$115 = $$116;$292 = $208;$293 = $206;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($208|0),($206|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $208;$293 = $206;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((24320) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $206 = $223;$208 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((24320) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((24320) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;$262 = $0;$neg$1 = $neg$0$;
    } else {
     $260 = $293;$262 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $259 = ($260>>>0)<($1>>>0);
   $261 = ($262>>>0)<($0>>>0);
   $263 = ($260|0)==($1|0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($260>>>0)>($1>>>0);
    $275 = ($262>>>0)>($0>>>0);
    $276 = ($260|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $26 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $26 = $41;
   }
   $25 = ($26|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($25) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $26;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_519($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=2712; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $67 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $67 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $67 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $66 = ($67<<24>>24)==(42);
  do {
   if ($66) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $67 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((24585 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 25065;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 25065;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 25065;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 25065 : (25067);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (25066);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 25065;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 25065;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 26967;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 26974;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (26975) : (26980);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (26977);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (25049 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$478 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$478 = $$pre185$i;
      }
      $477 = ($478|0)<(0);
      $$33$i = $477 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $488 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $487 = ($488|0)>(29);
        $489 = $487 ? 29 : $488;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $488 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(27005,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(27005,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 26993 : 26997;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 27016 : 27001;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 25065;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 25065;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (25049 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 25065;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (25065 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 25065;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $794 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $793 = ($794|0)<(10);
       if ($793) {
        $i$389 = $794;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (25075 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 25163;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 25163;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 25163;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2824|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2828|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4368|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (27007 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (27016 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $77 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $77 = $75;
      }
      $76 = ($77|0)==(40);
      if ($76) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $169 = 0;$171 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $159 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $159 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $158 = ($159|0)==(48);
           if ($158) {
            $154 = $156;$155 = $157;
           } else {
            $169 = 0;$171 = 0;$693 = $156;$694 = $157;$c$2$i = $159;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $169 = 0;$171 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $213 = $171;$214 = $693;$216 = $169;$217 = $694;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $171;$696 = $169;$697 = $171;$698 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $213 = $171;$214 = $693;$216 = $169;$217 = $694;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $168 = ($169|0)<(0);
          $170 = ($171>>>0)<(8);
          $172 = ($169|0)==(0);
          $173 = $172 & $170;
          $174 = $168 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($169|0)<(0);
            $178 = ($171>>>0)<(14);
            $179 = ($169|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($171|0),($169|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $169 = $698;$171 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $169 = $698;$171 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $212 = $211 ? $213 : $214;
        $215 = $211 ? $216 : $217;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($212|0),($215|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$394 = $707;$395 = $705;$397 = $708;$398 = $706;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$394 = 0;$395 = $699;$397 = 0;$398 = $700;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $393 = $392 ? $394 : $395;
        $396 = $392 ? $397 : $398;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $393;$716 = $396;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $393;$722 = $396;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($393|0),($396|0))|0);
        $415 = tempRet0;
        $427 = $414;$428 = $394;$430 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $427 = $715;$428 = $713;$430 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $427 = $721;$428 = $718;$430 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $426 = ($427|0)==($428|0);
        $429 = ($430|0)==($431|0);
        $432 = $426 & $429;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($430|0)>($446|0);
        $448 = ($427>>>0)>($444>>>0);
        $449 = ($430|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($430|0)<($458|0);
        $460 = ($427>>>0)<($456>>>0);
        $461 = ($430|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($427|0);
         $477 = ($427|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($427|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($427|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($427))|0;
           $489 = (5908 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($427, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($427) + -10)|0;
           $501 = (5908 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($427|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $427;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($427|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (5908 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $427;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $427;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $603 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $602 = ($603|0)==($a$6$i$lcssa|0);
          if (!($602)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($603) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $603;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$96 = $84;$98 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $95 = ($96|0)==($86|0);
        $97 = ($98|0)==($87|0);
        $99 = $95 & $97;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $96;$102 = $98;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$96 = $103;$98 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$115 = $103;$117 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$115 = $84;$117 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($115|0)==($86|0);
     $116 = ($117|0)==($87|0);
     $118 = $114 & $116;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $120 = $157;$122 = $156;
     }
    } else {
     $120 = $117;$122 = $115;
    }
    $119 = ($120>>>0)<(1048576);
    $121 = ($122>>>0)<(0);
    $123 = ($120|0)==(1048576);
    $124 = $123 & $121;
    $125 = $119 | $124;
    if ($125) {
     $127 = $122;$128 = $120;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $122;$139 = $120;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$151 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$151 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $149;$152 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 32928 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (2272 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,27526)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,27020)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 do {
  if ((label|0) == 4) {
   $6 = ($base|0)==(0|0);
   if ($6) {
    $7 = HEAP32[8233]|0;
    $8 = ($7|0)==(0);
    if ($8) {
     HEAP32[8233] = 1;
     $$01 = 32936;
     break;
    } else {
     $9 = (_calloc(1,4)|0);
     $$01 = $9;
     break;
    }
   } else {
    $$01 = $base;
   }
  }
 } while(0);
 return ($$01|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 180|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (2272 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(27026,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(27026,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 537;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 75;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 76;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 74;
   $34 = HEAP32[(32884)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((32908)|0));
   $37 = HEAP32[(32904)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(32904)>>2] = $4;
   ___unlock(((32908)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((32908)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(32904)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(32904)>>2] = $14;
  }
  ___unlock(((32908)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[677]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[677]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((32908)|0));
   $$012 = HEAP32[(32904)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((32908)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre173 = 0, $$pre175 = 0, $$pre177 = 0, $$pre179 = 0, $$pre180 = 0, $$pre181 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0;
 var $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0;
 var $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit897 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp796 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0;
 var $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0;
 var $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0106 = 0;
 var $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $327 = $4;
 } else {
  $327 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp796 = (($93) + -48)|0;
        $isdigit897 = ($isdigittmp796>>>0)<(10);
        if ($isdigit897) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre173 = HEAP8[$104>>0]|0;
         $107 = $$pre173;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre175 = HEAP32[$7>>2]|0;
          $148 = $$pre175;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $157 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre177 = HEAP32[$8>>2]|0;
         $157 = $$pre177;
        }
        $156 = ($157|0)==(0|0);
        if (!($156)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ | 16;
          $162 = ($161|0)==(115);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $p$6 = $166 ? $167 : $164;
            $168 = $166&1;
            _memset(($scanset|0),($168|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $169 = HEAP8[$p$6>>0]|0;
            switch ($169<<24>>24) {
            case 45:  {
             $170 = ((($p$6)) + 1|0);
             $171 = $invert$0 ^ 1;
             $172 = $171&255;
             HEAP8[$14>>0] = $172;
             $$pre$phi184Z2D = $172;$p$7$ph = $170;
             break;
            }
            case 93:  {
             $173 = ((($p$6)) + 1|0);
             $174 = $invert$0 ^ 1;
             $175 = $174&255;
             HEAP8[$15>>0] = $175;
             $$pre$phi184Z2D = $175;$p$7$ph = $173;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $176 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($176<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $177 = ((($p$7)) + 1|0);
               $178 = HEAP8[$177>>0]|0;
               switch ($178<<24>>24) {
               case 93: case 0:  {
                $189 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $179 = ((($p$7)) + -1|0);
               $180 = HEAP8[$179>>0]|0;
               $181 = ($180&255)<($178&255);
               if ($181) {
                $182 = $180&255;
                $c$0102 = $182;
                while(1) {
                 $183 = (($c$0102) + 1)|0;
                 $184 = (($scanset) + ($183)|0);
                 HEAP8[$184>>0] = $$pre$phi184Z2D;
                 $185 = HEAP8[$177>>0]|0;
                 $186 = $185&255;
                 $187 = ($183|0)<($186|0);
                 if ($187) {
                  $c$0102 = $183;
                 } else {
                  $189 = $185;$p$8 = $177;
                  break;
                 }
                }
               } else {
                $189 = $178;$p$8 = $177;
               }
               break;
              }
              default: {
               $189 = $176;$p$8 = $p$7;
              }
              }
             } while(0);
             $188 = $189&255;
             $190 = (($188) + 1)|0;
             $191 = (($scanset) + ($190)|0);
             HEAP8[$191>>0] = $$pre$phi184Z2D;
             $192 = ((($p$8)) + 1|0);
             $p$7 = $192;
            }
           }
          } while(0);
          $193 = (($width$1) + 1)|0;
          $194 = $160 ? $193 : 31;
          $195 = ($$size$0|0)==(1);
          $196 = ($alloc$0|0)!=(0);
          L89: do {
           if ($195) {
            if ($196) {
             $197 = $194 << 2;
             $198 = (_malloc($197)|0);
             $199 = ($198|0)==(0|0);
             if ($199) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $198;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $198;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $194;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $200 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $201 = HEAP32[$7>>2]|0;
               $202 = HEAP32[$8>>2]|0;
               $203 = ($201>>>0)<($202>>>0);
               if ($203) {
                $204 = ((($201)) + 1|0);
                HEAP32[$7>>2] = $204;
                $205 = HEAP8[$201>>0]|0;
                $206 = $205&255;
                $209 = $206;
               } else {
                $207 = (___shgetc($f)|0);
                $209 = $207;
               }
               $208 = (($209) + 1)|0;
               $210 = (($scanset) + ($208)|0);
               $211 = HEAP8[$210>>0]|0;
               $212 = ($211<<24>>24)==(0);
               if ($212) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $213 = $209&255;
               HEAP8[$0>>0] = $213;
               $214 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($214|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($200) {
               $i$1 = $i$0$ph22;
              } else {
               $215 = HEAP32[$wc>>2]|0;
               $216 = (($i$0$ph22) + 1)|0;
               $217 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$217>>2] = $215;
               $i$1 = $216;
              }
              $218 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $196 & $218;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $219 = $factor | 1;
             $220 = $219 << 2;
             $221 = (_realloc($wcs$3$ph,$220)|0);
             $222 = ($221|0)==(0|0);
             if ($222) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $219;$wcs$3$ph = $221;$i$0$ph = $i$0$ph$phi;
             }
            }
            $223 = (_mbsinit($st)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($196) {
             $225 = (_malloc($194)|0);
             $226 = ($225|0)==(0|0);
             if ($226) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $194;$s$2$ph = $225;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $228 = HEAP32[$8>>2]|0;
               $229 = ($227>>>0)<($228>>>0);
               if ($229) {
                $230 = ((($227)) + 1|0);
                HEAP32[$7>>2] = $230;
                $231 = HEAP8[$227>>0]|0;
                $232 = $231&255;
                $235 = $232;
               } else {
                $233 = (___shgetc($f)|0);
                $235 = $233;
               }
               $234 = (($235) + 1)|0;
               $236 = (($scanset) + ($234)|0);
               $237 = HEAP8[$236>>0]|0;
               $238 = ($237<<24>>24)==(0);
               if ($238) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $239 = $235&255;
               $240 = (($i$2) + 1)|0;
               $241 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$241>>0] = $239;
               $242 = ($240|0)==($k$1$ph|0);
               if ($242) {
                break;
               } else {
                $i$2 = $240;
               }
              }
              $factor18 = $k$1$ph << 1;
              $243 = $factor18 | 1;
              $244 = (_realloc($s$2$ph,$243)|0);
              $245 = ($244|0)==(0|0);
              if ($245) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $243;$s$2$ph = $244;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $246 = ($dest$0|0)==(0|0);
            if ($246) {
             $264 = $157;
             while(1) {
              $262 = HEAP32[$7>>2]|0;
              $263 = ($262>>>0)<($264>>>0);
              if ($263) {
               $265 = ((($262)) + 1|0);
               HEAP32[$7>>2] = $265;
               $266 = HEAP8[$262>>0]|0;
               $267 = $266&255;
               $270 = $267;
              } else {
               $268 = (___shgetc($f)|0);
               $270 = $268;
              }
              $269 = (($270) + 1)|0;
              $271 = (($scanset) + ($269)|0);
              $272 = HEAP8[$271>>0]|0;
              $273 = ($272<<24>>24)==(0);
              if ($273) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre180 = HEAP32[$8>>2]|0;
              $264 = $$pre180;
             }
            } else {
             $249 = $157;$i$3 = 0;
             while(1) {
              $247 = HEAP32[$7>>2]|0;
              $248 = ($247>>>0)<($249>>>0);
              if ($248) {
               $250 = ((($247)) + 1|0);
               HEAP32[$7>>2] = $250;
               $251 = HEAP8[$247>>0]|0;
               $252 = $251&255;
               $255 = $252;
              } else {
               $253 = (___shgetc($f)|0);
               $255 = $253;
              }
              $254 = (($255) + 1)|0;
              $256 = (($scanset) + ($254)|0);
              $257 = HEAP8[$256>>0]|0;
              $258 = ($257<<24>>24)==(0);
              if ($258) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $259 = $255&255;
              $260 = (($i$3) + 1)|0;
              $261 = (($dest$0) + ($i$3)|0);
              HEAP8[$261>>0] = $259;
              $$pre179 = HEAP32[$8>>2]|0;
              $249 = $$pre179;$i$3 = $260;
             }
            }
           }
          } while(0);
          $274 = HEAP32[$8>>2]|0;
          $275 = ($274|0)==(0|0);
          if ($275) {
           $$pre181 = HEAP32[$7>>2]|0;
           $282 = $$pre181;
          } else {
           $276 = HEAP32[$7>>2]|0;
           $277 = ((($276)) + -1|0);
           HEAP32[$7>>2] = $277;
           $278 = $277;
           $282 = $278;
          }
          $279 = HEAP32[$9>>2]|0;
          $280 = HEAP32[$10>>2]|0;
          $281 = (($282) - ($280))|0;
          $283 = (($281) + ($279))|0;
          $284 = ($283|0)==(0);
          if ($284) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $285 = ($283|0)==($width$1|0);
          $or$cond10 = $285 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($196) {
            if ($195) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $286 = ($wcs$5|0)==(0|0);
           if (!($286)) {
            $287 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$287>>2] = 0;
           }
           $288 = ($s$4|0)==(0|0);
           if ($288) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $289 = (($s$4) + ($i$4)|0);
           HEAP8[$289>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $307 = (+___floatscan($f,$$size$0,0));
          $308 = HEAP32[$9>>2]|0;
          $309 = HEAP32[$7>>2]|0;
          $310 = HEAP32[$10>>2]|0;
          $311 = (($310) - ($309))|0;
          $312 = ($308|0)==($311|0);
          if ($312) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $313 = ($dest$0|0)==(0|0);
          if ($313) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $314 = $307;
            HEAPF32[$dest$0>>2] = $314;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $290 = (___intscan($f,$base$0,0,-1,-1)|0);
          $291 = tempRet0;
          $292 = HEAP32[$9>>2]|0;
          $293 = HEAP32[$7>>2]|0;
          $294 = HEAP32[$10>>2]|0;
          $295 = (($294) - ($293))|0;
          $296 = ($292|0)==($295|0);
          if ($296) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $297 = ($$|0)==(112);
          $298 = ($dest$0|0)!=(0|0);
          $or$cond3 = $298 & $297;
          if ($or$cond3) {
           $299 = $290;
           HEAP32[$dest$0>>2] = $299;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $300 = ($dest$0|0)==(0|0);
          if ($300) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $301 = $290&255;
            HEAP8[$dest$0>>0] = $301;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $302 = $290&65535;
            HEAP16[$dest$0>>1] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $303 = $dest$0;
            $304 = $303;
            HEAP32[$304>>2] = $290;
            $305 = (($303) + 4)|0;
            $306 = $305;
            HEAP32[$306>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $315 = HEAP32[$9>>2]|0;
        $316 = HEAP32[$7>>2]|0;
        $317 = HEAP32[$10>>2]|0;
        $318 = (($315) + ($pos$1))|0;
        $319 = (($318) + ($316))|0;
        $320 = (($319) - ($317))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $321 = $not$&1;
        $matches$0$ = (($321) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $320;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $62 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $62 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $61 = ($62|0)==($60|0);
      if (!($61)) {
       $$lcssa386 = $62;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $322 = ((($p$11)) + 1|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = ($323<<24>>24)==(0);
    if ($324) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $323;$matches$0107 = $matches$1;$p$0110 = $322;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $325 = ($alloc$2|0)==(0);
   if ($325) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $326 = ($327|0)==(0);
 if (!($326)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 538;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 1023]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 32940;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$019 = 0, $$02$ = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$010 = 0, $ws$021 = 0, $ws$021$lcssa56 = 0, $ws$1 = 0, $ws$216 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$019 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$020 = 0;$ws$021 = $wcs$;
   while(1) {
    $4 = $$019 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$019>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$019;$$24 = $$0218;$19 = $37;$cnt$1 = $cnt$020;$ws$010 = $ws$021;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$019) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$021,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$021$lcssa56 = $ws$021;
     break;
    }
    $11 = ($ws$021|0)==($wbuf|0);
    $12 = (($ws$021) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$021 : $12;
    $14 = (($9) + ($cnt$020))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$019 = $8;$$0218 = $$13;$37 = $15;$cnt$020 = $14;$ws$021 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$19 = $15;$cnt$1 = $14;$ws$010 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$19 = $$pr$pre;$cnt$1 = -1;$ws$010 = $ws$021$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$19 = $$cast;$cnt$1 = 0;$ws$010 = $wcs$;
  }
 } while(0);
 $18 = ($19|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$214 = $$1;$$313 = $$24;$23 = $19;$cnt$215 = $cnt$1;$ws$216 = $ws$010;
    while(1) {
     $24 = (_mbrtowc($ws$216,$23,$$214,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$214) - ($24))|0;
     $30 = ((($ws$216)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$215) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$214|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$214 = $29;$$313 = $31;$23 = $28;$cnt$215 = $32;$ws$216 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0;
 var $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0;
 var $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $64 = HEAP8[$s$520>>0]|0;
    $65 = $64&255;
    $66 = (($65) + -1)|0;
    $67 = ($66>>>0)<(127);
    do {
     if ($67) {
      $68 = $s$520;
      $69 = $68 & 3;
      $70 = ($69|0)==(0);
      $71 = ($$4718>>>0)>(4);
      $or$cond = $71 & $70;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $72 = HEAP32[$s$6>>2]|0;
        $73 = (($72) + -16843009)|0;
        $74 = $73 | $72;
        $75 = $74 & -2139062144;
        $76 = ($75|0)==(0);
        if (!($76)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $72;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $77 = ((($s$6)) + 1|0);
        $78 = $72 & 255;
        $79 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = ((($s$6)) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = ((($$1)) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = ((($s$6)) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = ((($$1)) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = ((($s$6)) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = ((($$1)) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         $$lcssa96 = $88;$$lcssa97 = $91;$$lcssa98 = $92;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$95 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $93 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$95 = $93;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$95 = $64;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$95 = $64;$s$7 = $s$520;
     }
    } while(0);
    $94 = $95&255;
    $96 = (($94) + -1)|0;
    $97 = ($96>>>0)<(127);
    if (!($97)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $94;$s$7$lcssa = $s$7;
     break;
    }
    $98 = ((($s$7)) + 1|0);
    $99 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $94;
    $100 = (($$6) + -1)|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $s$5$lcssa = $98;
     label = 26;
     break L7;
    } else {
     $$0219 = $99;$$4718 = $100;$s$520 = $98;
    }
   }
   $102 = (($$lcssa102) + -194)|0;
   $103 = ($102>>>0)>(50);
   if ($103) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $104 = ((($s$7$lcssa)) + 1|0);
   $105 = (2272 + ($102<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $106;$s$8 = $104;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     $19 = $14&255;
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $20 = ((($s$116)) + 4|0);
       $21 = (($$1415) + -4)|0;
       $22 = HEAP32[$20>>2]|0;
       $23 = (($22) + -16843009)|0;
       $24 = $23 | $22;
       $25 = $24 & -2139062144;
       $26 = ($25|0)==(0);
       if ($26) {
        $$1415 = $21;$s$116 = $20;
       } else {
        $$lcssa = $20;$$lcssa88 = $21;$$lcssa89 = $22;
        break;
       }
      }
      $27 = $$lcssa89&255;
      $$25 = $$lcssa88;$29 = $27;$s$2 = $$lcssa;
     } else {
      $$25 = $$03;$29 = $19;$s$2 = $s$0;
     }
    } else {
     $$25 = $$03;$29 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$29 = $7;$s$2 = $s$0;
   }
   $28 = $29&255;
   $30 = (($28) + -1)|0;
   $31 = ($30>>>0)<(127);
   if ($31) {
    $32 = ((($s$2)) + 1|0);
    $33 = (($$25) + -1)|0;
    $$03 = $33;$s$0 = $32;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $28;$s$2$lcssa = $s$2;
   }
   $34 = (($$lcssa90) + -194)|0;
   $35 = ($34>>>0)>(50);
   if ($35) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $36 = ((($s$2$lcssa)) + 1|0);
   $37 = (2272 + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $38;$s$3 = $36;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $39 = HEAP8[$s$3>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 3;
   $42 = (($41) + -16)|0;
   $43 = $c$2 >> 26;
   $44 = (($41) + ($43))|0;
   $45 = $42 | $44;
   $46 = ($45>>>0)>(7);
   if ($46) {
    label = 17;
    break;
   }
   $48 = ((($s$3)) + 1|0);
   $49 = $c$2 & 33554432;
   $50 = ($49|0)==(0);
   if ($50) {
    $s$4 = $48;
   } else {
    $51 = HEAP8[$48>>0]|0;
    $52 = $51 & -64;
    $53 = ($52<<24>>24)==(-128);
    if (!($53)) {
     label = 20;
     break;
    }
    $55 = ((($s$3)) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58 & -64;
     $60 = ($59<<24>>24)==(-128);
     if (!($60)) {
      label = 23;
      break;
     }
     $62 = ((($s$3)) + 3|0);
     $s$4 = $62;
    }
   }
   $63 = (($$36) + -1)|0;
   $$03 = $63;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $107 = HEAP8[$s$8>>0]|0;
   $108 = $107&255;
   $109 = $108 >>> 3;
   $110 = (($109) + -16)|0;
   $111 = $c$4 >> 26;
   $112 = (($109) + ($111))|0;
   $113 = $110 | $112;
   $114 = ($113>>>0)>(7);
   if ($114) {
    label = 38;
    break;
   }
   $116 = $c$4 << 6;
   $117 = ((($s$8)) + 1|0);
   $118 = (($108) + -128)|0;
   $119 = $118 | $116;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = HEAP8[$117>>0]|0;
    $122 = $121&255;
    $123 = $122 & 192;
    $124 = ($123|0)==(128);
    if (!($124)) {
     label = 41;
     break;
    }
    $126 = $119 << 6;
    $127 = ((($s$8)) + 2|0);
    $128 = (($122) + -128)|0;
    $129 = $128 | $126;
    $130 = ($129|0)<(0);
    if ($130) {
     $131 = HEAP8[$127>>0]|0;
     $132 = $131&255;
     $133 = $132 & 192;
     $134 = ($133|0)==(128);
     if (!($134)) {
      label = 44;
      break;
     }
     $136 = $129 << 6;
     $137 = ((($s$8)) + 3|0);
     $138 = (($132) + -128)|0;
     $139 = $138 | $136;
     $c$5 = $139;$s$9 = $137;
    } else {
     $c$5 = $129;$s$9 = $127;
    }
   } else {
    $c$5 = $119;$s$9 = $117;
   }
   $140 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$02$ph = $140;$$47$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $47 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $47;
  label = 47;
 }
 else if ((label|0) == 20) {
  $54 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $54;
  label = 47;
 }
 else if ((label|0) == 23) {
  $61 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $61;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $115 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $115;
  label = 47;
 }
 else if ((label|0) == 41) {
  $125 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $125;
  label = 52;
 }
 else if ((label|0) == 44) {
  $135 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $135;
  label = 52;
 }
 if ((label|0) == 47) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $143 = HEAP8[$s$1035>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$434|0)==(0|0);
   if (!($145)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$833))|0;
   $$0 = $146;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $147 = (___errno_location()|0);
  HEAP32[$147>>2] = 84;
  $148 = ($$48|0)==(0|0);
  if ($148) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$019 = 0, $$02$$0 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$010 = 0, $s$021 = 0, $s$021$lcssa56 = 0, $s$1 = 0, $s$216 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$019 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$020 = 0;$s$021 = $dst$;
   while(1) {
    $4 = ($$019>>>0)>=($$0218>>>0);
    $5 = ($$019>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$019;$$24 = $$0218;$18 = $38;$cnt$1 = $cnt$020;$s$010 = $s$021;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$019;
    $7 = (($$019) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$021,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$021$lcssa56 = $s$021;
     break;
    }
    $10 = ($s$021|0)==($buf|0);
    $11 = (($s$021) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$021 : $11;
    $13 = (($8) + ($cnt$020))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$019 = $7;$$0218 = $$13;$38 = $14;$cnt$020 = $13;$s$021 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$18 = $14;$cnt$1 = $13;$s$010 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$s$010 = $s$021$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$18 = $$cast;$cnt$1 = 0;$s$010 = $dst$;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L8: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$214 = $$1;$$313 = $$24;$23 = $18;$cnt$215 = $cnt$1;$s$216 = $s$010;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$216,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$214) + -1)|0;
     $31 = (($s$216) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$215) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$214 = $30;$$313 = $32;$23 = $29;$cnt$215 = $33;$s$216 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa83 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$6 = $3;$ws2$019 = $2;
    while(1) {
     $5 = ($6>>>0)>(127);
     if ($5) {
      $7 = (_wcrtomb($buf,$6,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$6 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre44 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre44;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre45 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre45;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa83 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre46 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre46;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa83))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $8 = $4;
 }
 $7 = ($8|0)==($0|0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = (($8>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 1023]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $30 = ($31|0)==(0);
   if (!($30)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($31|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[648]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _vprintf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[648]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($6))|0;
 $11 = ($p|0)==(0|0);
 if (!($11)) {
  $12 = ($10|0)!=(0);
  $13 = (($s) + ($10)|0);
  $14 = $12 ? $13 : $s;
  HEAP32[$p>>2] = $14;
 }
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0;
 var $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0;
 var $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0;
 var $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0;
 var $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0;
 var $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic$i$i = sp;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[8236]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (32984 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[8236] = $22;
     } else {
      $23 = HEAP32[(32960)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = HEAP32[(32952)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (32984 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[8236] = $75;
       $90 = $35;
      } else {
       $76 = HEAP32[(32960)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(32952)>>2]|0;
        $90 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $89 = ($90|0)==(0);
     if (!($89)) {
      $91 = HEAP32[(32964)>>2]|0;
      $92 = $90 >>> 3;
      $93 = $92 << 1;
      $94 = (32984 + ($93<<2)|0);
      $95 = HEAP32[8236]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[8236] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(32960)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(32952)>>2] = $82;
     HEAP32[(32964)>>2] = $85;
     $$0 = $70;
     STACKTOP = sp;return ($$0|0);
    }
    $107 = HEAP32[(32948)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (33248 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(32960)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (33248 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(32948)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(32948)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(32960)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(32960)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(32960)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(32952)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(32964)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (32984 + ($231<<2)|0);
       $233 = HEAP32[8236]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[8236] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(32960)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(32952)>>2] = $rsize$0$i$lcssa;
      HEAP32[(32964)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(32948)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (33248 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (33248 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(32952)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(32960)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (33248 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(32948)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(32948)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(32960)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(32960)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(32960)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (32984 + ($428<<2)|0);
          $430 = HEAP32[8236]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[8236] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(32960)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (33248 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(32948)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(32948)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(32960)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(32960)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       STACKTOP = sp;return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(32952)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(32964)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(32964)>>2] = $514;
   HEAP32[(32952)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(32952)>>2] = 0;
   HEAP32[(32964)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  STACKTOP = sp;return ($$0|0);
 }
 $527 = HEAP32[(32956)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(32956)>>2] = $529;
  $530 = HEAP32[(32968)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(32968)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  STACKTOP = sp;return ($$0|0);
 }
 $537 = HEAP32[8354]|0;
 $538 = ($537|0)==(0);
 if ($538) {
  HEAP32[(33424)>>2] = 4096;
  HEAP32[(33420)>>2] = 4096;
  HEAP32[(33428)>>2] = -1;
  HEAP32[(33432)>>2] = -1;
  HEAP32[(33436)>>2] = 0;
  HEAP32[(33388)>>2] = 0;
  $539 = $magic$i$i;
  $540 = $539 & -16;
  $541 = $540 ^ 1431655768;
  HEAP32[$magic$i$i>>2] = $541;
  HEAP32[8354] = $541;
 }
 $542 = (($nb$0) + 48)|0;
 $543 = HEAP32[(33424)>>2]|0;
 $544 = (($nb$0) + 47)|0;
 $545 = (($543) + ($544))|0;
 $546 = (0 - ($543))|0;
 $547 = $545 & $546;
 $548 = ($547>>>0)>($nb$0>>>0);
 if (!($548)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $549 = HEAP32[(33384)>>2]|0;
 $550 = ($549|0)==(0);
 if (!($550)) {
  $551 = HEAP32[(33376)>>2]|0;
  $552 = (($551) + ($547))|0;
  $553 = ($552>>>0)<=($551>>>0);
  $554 = ($552>>>0)>($549>>>0);
  $or$cond1$i16 = $553 | $554;
  if ($or$cond1$i16) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $555 = HEAP32[(33388)>>2]|0;
 $556 = $555 & 4;
 $557 = ($556|0)==(0);
 L254: do {
  if ($557) {
   $558 = HEAP32[(32968)>>2]|0;
   $559 = ($558|0)==(0|0);
   L256: do {
    if ($559) {
     label = 171;
    } else {
     $sp$0$i$i = (33392);
     while(1) {
      $560 = HEAP32[$sp$0$i$i>>2]|0;
      $561 = ($560>>>0)>($558>>>0);
      if (!($561)) {
       $562 = ((($sp$0$i$i)) + 4|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = (($560) + ($563)|0);
       $565 = ($564>>>0)>($558>>>0);
       if ($565) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $562;
        break;
       }
      }
      $566 = ((($sp$0$i$i)) + 8|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = ($567|0)==(0|0);
      if ($568) {
       label = 171;
       break L256;
      } else {
       $sp$0$i$i = $567;
      }
     }
     $591 = HEAP32[(32956)>>2]|0;
     $592 = (($545) - ($591))|0;
     $593 = $592 & $546;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = (_sbrk(($593|0))|0);
      $596 = HEAP32[$$lcssa153>>2]|0;
      $597 = HEAP32[$$lcssa155>>2]|0;
      $598 = (($596) + ($597)|0);
      $599 = ($595|0)==($598|0);
      if ($599) {
       $600 = ($595|0)==((-1)|0);
       if (!($600)) {
        $tbase$746$i = $595;$tsize$745$i = $593;
        label = 191;
        break L254;
       }
      } else {
       $br$2$ph$i = $595;$ssize$2$ph$i = $593;
       label = 181;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $569 = (_sbrk(0)|0);
     $570 = ($569|0)==((-1)|0);
     if (!($570)) {
      $571 = $569;
      $572 = HEAP32[(33420)>>2]|0;
      $573 = (($572) + -1)|0;
      $574 = $573 & $571;
      $575 = ($574|0)==(0);
      if ($575) {
       $ssize$0$i = $547;
      } else {
       $576 = (($573) + ($571))|0;
       $577 = (0 - ($572))|0;
       $578 = $576 & $577;
       $579 = (($547) - ($571))|0;
       $580 = (($579) + ($578))|0;
       $ssize$0$i = $580;
      }
      $581 = HEAP32[(33376)>>2]|0;
      $582 = (($581) + ($ssize$0$i))|0;
      $583 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $584 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $583 & $584;
      if ($or$cond$i17) {
       $585 = HEAP32[(33384)>>2]|0;
       $586 = ($585|0)==(0);
       if (!($586)) {
        $587 = ($582>>>0)<=($581>>>0);
        $588 = ($582>>>0)>($585>>>0);
        $or$cond2$i = $587 | $588;
        if ($or$cond2$i) {
         break;
        }
       }
       $589 = (_sbrk(($ssize$0$i|0))|0);
       $590 = ($589|0)==($569|0);
       if ($590) {
        $tbase$746$i = $569;$tsize$745$i = $ssize$0$i;
        label = 191;
        break L254;
       } else {
        $br$2$ph$i = $589;$ssize$2$ph$i = $ssize$0$i;
        label = 181;
       }
      }
     }
    }
   } while(0);
   L276: do {
    if ((label|0) == 181) {
     $601 = (0 - ($ssize$2$ph$i))|0;
     $602 = ($br$2$ph$i|0)!=((-1)|0);
     $603 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $603 & $602;
     $604 = ($542>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $604 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $605 = HEAP32[(33424)>>2]|0;
       $606 = (($544) - ($ssize$2$ph$i))|0;
       $607 = (($606) + ($605))|0;
       $608 = (0 - ($605))|0;
       $609 = $607 & $608;
       $610 = ($609>>>0)<(2147483647);
       if ($610) {
        $611 = (_sbrk(($609|0))|0);
        $612 = ($611|0)==((-1)|0);
        if ($612) {
         (_sbrk(($601|0))|0);
         break L276;
        } else {
         $613 = (($609) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $613;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $614 = ($br$2$ph$i|0)==((-1)|0);
     if (!($614)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 191;
      break L254;
     }
    }
   } while(0);
   $615 = HEAP32[(33388)>>2]|0;
   $616 = $615 | 4;
   HEAP32[(33388)>>2] = $616;
   label = 188;
  } else {
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $617 = ($547>>>0)<(2147483647);
  if ($617) {
   $618 = (_sbrk(($547|0))|0);
   $619 = (_sbrk(0)|0);
   $620 = ($618|0)!=((-1)|0);
   $621 = ($619|0)!=((-1)|0);
   $or$cond5$i = $620 & $621;
   $622 = ($618>>>0)<($619>>>0);
   $or$cond10$i = $622 & $or$cond5$i;
   if ($or$cond10$i) {
    $623 = $619;
    $624 = $618;
    $625 = (($623) - ($624))|0;
    $626 = (($nb$0) + 40)|0;
    $$not$i = ($625>>>0)>($626>>>0);
    if ($$not$i) {
     $tbase$746$i = $618;$tsize$745$i = $625;
     label = 191;
    }
   }
  }
 }
 if ((label|0) == 191) {
  $627 = HEAP32[(33376)>>2]|0;
  $628 = (($627) + ($tsize$745$i))|0;
  HEAP32[(33376)>>2] = $628;
  $629 = HEAP32[(33380)>>2]|0;
  $630 = ($628>>>0)>($629>>>0);
  if ($630) {
   HEAP32[(33380)>>2] = $628;
  }
  $631 = HEAP32[(32968)>>2]|0;
  $632 = ($631|0)==(0|0);
  do {
   if ($632) {
    $633 = HEAP32[(32960)>>2]|0;
    $634 = ($633|0)==(0|0);
    $635 = ($tbase$746$i>>>0)<($633>>>0);
    $or$cond11$i = $634 | $635;
    if ($or$cond11$i) {
     HEAP32[(32960)>>2] = $tbase$746$i;
    }
    HEAP32[(33392)>>2] = $tbase$746$i;
    HEAP32[(33396)>>2] = $tsize$745$i;
    HEAP32[(33404)>>2] = 0;
    $636 = HEAP32[8354]|0;
    HEAP32[(32980)>>2] = $636;
    HEAP32[(32976)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $637 = $i$01$i$i << 1;
     $638 = (32984 + ($637<<2)|0);
     $639 = ((($638)) + 12|0);
     HEAP32[$639>>2] = $638;
     $640 = ((($638)) + 8|0);
     HEAP32[$640>>2] = $638;
     $641 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($641|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $641;
     }
    }
    $642 = (($tsize$745$i) + -40)|0;
    $643 = ((($tbase$746$i)) + 8|0);
    $644 = $643;
    $645 = $644 & 7;
    $646 = ($645|0)==(0);
    $647 = (0 - ($644))|0;
    $648 = $647 & 7;
    $649 = $646 ? 0 : $648;
    $650 = (($tbase$746$i) + ($649)|0);
    $651 = (($642) - ($649))|0;
    HEAP32[(32968)>>2] = $650;
    HEAP32[(32956)>>2] = $651;
    $652 = $651 | 1;
    $653 = ((($650)) + 4|0);
    HEAP32[$653>>2] = $652;
    $654 = (($650) + ($651)|0);
    $655 = ((($654)) + 4|0);
    HEAP32[$655>>2] = 40;
    $656 = HEAP32[(33432)>>2]|0;
    HEAP32[(32972)>>2] = $656;
   } else {
    $sp$068$i = (33392);
    while(1) {
     $657 = HEAP32[$sp$068$i>>2]|0;
     $658 = ((($sp$068$i)) + 4|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = (($657) + ($659)|0);
     $661 = ($tbase$746$i|0)==($660|0);
     if ($661) {
      $$lcssa147 = $657;$$lcssa149 = $658;$$lcssa151 = $659;$sp$068$i$lcssa = $sp$068$i;
      label = 201;
      break;
     }
     $662 = ((($sp$068$i)) + 8|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = ($663|0)==(0|0);
     if ($664) {
      break;
     } else {
      $sp$068$i = $663;
     }
    }
    if ((label|0) == 201) {
     $665 = ((($sp$068$i$lcssa)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($631>>>0)>=($$lcssa147>>>0);
      $670 = ($631>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $670 & $669;
      if ($or$cond48$i) {
       $671 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $671;
       $672 = HEAP32[(32956)>>2]|0;
       $673 = ((($631)) + 8|0);
       $674 = $673;
       $675 = $674 & 7;
       $676 = ($675|0)==(0);
       $677 = (0 - ($674))|0;
       $678 = $677 & 7;
       $679 = $676 ? 0 : $678;
       $680 = (($631) + ($679)|0);
       $681 = (($tsize$745$i) - ($679))|0;
       $682 = (($681) + ($672))|0;
       HEAP32[(32968)>>2] = $680;
       HEAP32[(32956)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($680)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($680) + ($682)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(33432)>>2]|0;
       HEAP32[(32972)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(32960)>>2]|0;
    $689 = ($tbase$746$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(32960)>>2] = $tbase$746$i;
     $753 = $tbase$746$i;
    } else {
     $753 = $688;
    }
    $690 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (33392);
    while(1) {
     $691 = HEAP32[$sp$167$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 209;
      break;
     }
     $693 = ((($sp$167$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      $sp$0$i$i$i = (33392);
      break;
     } else {
      $sp$167$i = $694;
     }
    }
    if ((label|0) == 209) {
     $696 = ((($sp$167$i$lcssa)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $700 = ((($sp$167$i$lcssa)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($tsize$745$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($tbase$746$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($tbase$746$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($nb$0)|0);
      $723 = (($721) - ($nb$0))|0;
      $724 = $nb$0 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($718|0)==($631|0);
      do {
       if ($726) {
        $727 = HEAP32[(32956)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(32956)>>2] = $728;
        HEAP32[(32968)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(32964)>>2]|0;
        $732 = ($718|0)==($731|0);
        if ($732) {
         $733 = HEAP32[(32952)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(32952)>>2] = $734;
         HEAP32[(32964)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L328: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (32984 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $752 = ($746>>>0)<($753>>>0);
             if ($752) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[8236]|0;
            $761 = $760 & $759;
            HEAP32[8236] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre9$i$i = ((($748)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $763 = ($748>>>0)<($753>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi10$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $786;$RP$1$i$i = $782;
              }
             } else {
              $R$1$i$i = $784;$RP$1$i$i = $783;
             }
             while(1) {
              $788 = ((($R$1$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if (!($790)) {
               $R$1$i$i = $789;$RP$1$i$i = $788;
               continue;
              }
              $791 = ((($R$1$i$i)) + 16|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $792;$RP$1$i$i = $791;
              }
             }
             $794 = ($RP$1$i$i$lcssa>>>0)<($753>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($774>>>0)<($753>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $R$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (33248 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($718|0)==($799|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(32948)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(32948)>>2] = $804;
             break L328;
            } else {
             $805 = HEAP32[(32960)>>2]|0;
             $806 = ($769>>>0)<($805>>>0);
             if ($806) {
              _abort();
              // unreachable;
             }
             $807 = ((($769)) + 16|0);
             $808 = HEAP32[$807>>2]|0;
             $809 = ($808|0)==($718|0);
             if ($809) {
              HEAP32[$807>>2] = $R$3$i$i;
             } else {
              $810 = ((($769)) + 20|0);
              HEAP32[$810>>2] = $R$3$i$i;
             }
             $811 = ($R$3$i$i|0)==(0|0);
             if ($811) {
              break L328;
             }
            }
           } while(0);
           $812 = HEAP32[(32960)>>2]|0;
           $813 = ($R$3$i$i>>>0)<($812>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($R$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($816>>>0)<($812>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($R$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(32960)>>2]|0;
           $825 = ($822>>>0)<($824>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($R$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $oldfirst$0$i$i = $828;$qsize$0$i$i = $829;
        } else {
         $oldfirst$0$i$i = $718;$qsize$0$i$i = $723;
        }
        $830 = ((($oldfirst$0$i$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $qsize$0$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($qsize$0$i$i)|0);
        HEAP32[$835>>2] = $qsize$0$i$i;
        $836 = $qsize$0$i$i >>> 3;
        $837 = ($qsize$0$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (32984 + ($838<<2)|0);
         $840 = HEAP32[8236]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[8236] = $844;
           $$pre$i16$i = ((($839)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $839;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(32960)>>2]|0;
           $848 = ($846>>>0)<($847>>>0);
           if (!($848)) {
            $$pre$phi$i17$iZ2D = $845;$F4$0$i$i = $846;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $722;
         $849 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $F4$0$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $qsize$0$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $I7$0$i$i = 0;
         } else {
          $854 = ($qsize$0$i$i>>>0)>(16777215);
          if ($854) {
           $I7$0$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $qsize$0$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $I7$0$i$i = $876;
         }
        } while(0);
        $877 = (33248 + ($I7$0$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $I7$0$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(32948)>>2]|0;
        $882 = 1 << $I7$0$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(32948)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ($I7$0$i$i|0)==(31);
        $891 = $I7$0$i$i >>> 1;
        $892 = (25 - ($891))|0;
        $893 = $890 ? 0 : $892;
        $894 = $qsize$0$i$i << $893;
        $K8$0$i$i = $894;$T$0$i18$i = $889;
        while(1) {
         $895 = ((($T$0$i18$i)) + 4|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & -8;
         $898 = ($897|0)==($qsize$0$i$i|0);
         if ($898) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 279;
          break;
         }
         $899 = $K8$0$i$i >>> 31;
         $900 = (((($T$0$i18$i)) + 16|0) + ($899<<2)|0);
         $901 = $K8$0$i$i << 1;
         $902 = HEAP32[$900>>2]|0;
         $903 = ($902|0)==(0|0);
         if ($903) {
          $$lcssa = $900;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 276;
          break;
         } else {
          $K8$0$i$i = $901;$T$0$i18$i = $902;
         }
        }
        if ((label|0) == 276) {
         $904 = HEAP32[(32960)>>2]|0;
         $905 = ($$lcssa>>>0)<($904>>>0);
         if ($905) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $722;
          $906 = ((($722)) + 24|0);
          HEAP32[$906>>2] = $T$0$i18$i$lcssa139;
          $907 = ((($722)) + 12|0);
          HEAP32[$907>>2] = $722;
          $908 = ((($722)) + 8|0);
          HEAP32[$908>>2] = $722;
          break;
         }
        }
        else if ((label|0) == 279) {
         $909 = ((($T$0$i18$i$lcssa)) + 8|0);
         $910 = HEAP32[$909>>2]|0;
         $911 = HEAP32[(32960)>>2]|0;
         $912 = ($910>>>0)>=($911>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($911>>>0);
         $913 = $912 & $not$$i20$i;
         if ($913) {
          $914 = ((($910)) + 12|0);
          HEAP32[$914>>2] = $722;
          HEAP32[$909>>2] = $722;
          $915 = ((($722)) + 8|0);
          HEAP32[$915>>2] = $910;
          $916 = ((($722)) + 12|0);
          HEAP32[$916>>2] = $T$0$i18$i$lcssa;
          $917 = ((($722)) + 24|0);
          HEAP32[$917>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1048 = ((($710)) + 8|0);
      $$0 = $1048;
      STACKTOP = sp;return ($$0|0);
     } else {
      $sp$0$i$i$i = (33392);
     }
    }
    while(1) {
     $918 = HEAP32[$sp$0$i$i$i>>2]|0;
     $919 = ($918>>>0)>($631>>>0);
     if (!($919)) {
      $920 = ((($sp$0$i$i$i)) + 4|0);
      $921 = HEAP32[$920>>2]|0;
      $922 = (($918) + ($921)|0);
      $923 = ($922>>>0)>($631>>>0);
      if ($923) {
       $$lcssa142 = $922;
       break;
      }
     }
     $924 = ((($sp$0$i$i$i)) + 8|0);
     $925 = HEAP32[$924>>2]|0;
     $sp$0$i$i$i = $925;
    }
    $926 = ((($$lcssa142)) + -47|0);
    $927 = ((($926)) + 8|0);
    $928 = $927;
    $929 = $928 & 7;
    $930 = ($929|0)==(0);
    $931 = (0 - ($928))|0;
    $932 = $931 & 7;
    $933 = $930 ? 0 : $932;
    $934 = (($926) + ($933)|0);
    $935 = ((($631)) + 16|0);
    $936 = ($934>>>0)<($935>>>0);
    $937 = $936 ? $631 : $934;
    $938 = ((($937)) + 8|0);
    $939 = ((($937)) + 24|0);
    $940 = (($tsize$745$i) + -40)|0;
    $941 = ((($tbase$746$i)) + 8|0);
    $942 = $941;
    $943 = $942 & 7;
    $944 = ($943|0)==(0);
    $945 = (0 - ($942))|0;
    $946 = $945 & 7;
    $947 = $944 ? 0 : $946;
    $948 = (($tbase$746$i) + ($947)|0);
    $949 = (($940) - ($947))|0;
    HEAP32[(32968)>>2] = $948;
    HEAP32[(32956)>>2] = $949;
    $950 = $949 | 1;
    $951 = ((($948)) + 4|0);
    HEAP32[$951>>2] = $950;
    $952 = (($948) + ($949)|0);
    $953 = ((($952)) + 4|0);
    HEAP32[$953>>2] = 40;
    $954 = HEAP32[(33432)>>2]|0;
    HEAP32[(32972)>>2] = $954;
    $955 = ((($937)) + 4|0);
    HEAP32[$955>>2] = 27;
    ;HEAP32[$938>>2]=HEAP32[(33392)>>2]|0;HEAP32[$938+4>>2]=HEAP32[(33392)+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[(33392)+8>>2]|0;HEAP32[$938+12>>2]=HEAP32[(33392)+12>>2]|0;
    HEAP32[(33392)>>2] = $tbase$746$i;
    HEAP32[(33396)>>2] = $tsize$745$i;
    HEAP32[(33404)>>2] = 0;
    HEAP32[(33400)>>2] = $938;
    $p$0$i$i = $939;
    while(1) {
     $956 = ((($p$0$i$i)) + 4|0);
     HEAP32[$956>>2] = 7;
     $957 = ((($956)) + 4|0);
     $958 = ($957>>>0)<($$lcssa142>>>0);
     if ($958) {
      $p$0$i$i = $956;
     } else {
      break;
     }
    }
    $959 = ($937|0)==($631|0);
    if (!($959)) {
     $960 = $937;
     $961 = $631;
     $962 = (($960) - ($961))|0;
     $963 = HEAP32[$955>>2]|0;
     $964 = $963 & -2;
     HEAP32[$955>>2] = $964;
     $965 = $962 | 1;
     $966 = ((($631)) + 4|0);
     HEAP32[$966>>2] = $965;
     HEAP32[$937>>2] = $962;
     $967 = $962 >>> 3;
     $968 = ($962>>>0)<(256);
     if ($968) {
      $969 = $967 << 1;
      $970 = (32984 + ($969<<2)|0);
      $971 = HEAP32[8236]|0;
      $972 = 1 << $967;
      $973 = $971 & $972;
      $974 = ($973|0)==(0);
      if ($974) {
       $975 = $971 | $972;
       HEAP32[8236] = $975;
       $$pre$i$i = ((($970)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $970;
      } else {
       $976 = ((($970)) + 8|0);
       $977 = HEAP32[$976>>2]|0;
       $978 = HEAP32[(32960)>>2]|0;
       $979 = ($977>>>0)<($978>>>0);
       if ($979) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $976;$F$0$i$i = $977;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $631;
      $980 = ((($F$0$i$i)) + 12|0);
      HEAP32[$980>>2] = $631;
      $981 = ((($631)) + 8|0);
      HEAP32[$981>>2] = $F$0$i$i;
      $982 = ((($631)) + 12|0);
      HEAP32[$982>>2] = $970;
      break;
     }
     $983 = $962 >>> 8;
     $984 = ($983|0)==(0);
     if ($984) {
      $I1$0$i$i = 0;
     } else {
      $985 = ($962>>>0)>(16777215);
      if ($985) {
       $I1$0$i$i = 31;
      } else {
       $986 = (($983) + 1048320)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 8;
       $989 = $983 << $988;
       $990 = (($989) + 520192)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 4;
       $993 = $992 | $988;
       $994 = $989 << $992;
       $995 = (($994) + 245760)|0;
       $996 = $995 >>> 16;
       $997 = $996 & 2;
       $998 = $993 | $997;
       $999 = (14 - ($998))|0;
       $1000 = $994 << $997;
       $1001 = $1000 >>> 15;
       $1002 = (($999) + ($1001))|0;
       $1003 = $1002 << 1;
       $1004 = (($1002) + 7)|0;
       $1005 = $962 >>> $1004;
       $1006 = $1005 & 1;
       $1007 = $1006 | $1003;
       $I1$0$i$i = $1007;
      }
     }
     $1008 = (33248 + ($I1$0$i$i<<2)|0);
     $1009 = ((($631)) + 28|0);
     HEAP32[$1009>>2] = $I1$0$i$i;
     $1010 = ((($631)) + 20|0);
     HEAP32[$1010>>2] = 0;
     HEAP32[$935>>2] = 0;
     $1011 = HEAP32[(32948)>>2]|0;
     $1012 = 1 << $I1$0$i$i;
     $1013 = $1011 & $1012;
     $1014 = ($1013|0)==(0);
     if ($1014) {
      $1015 = $1011 | $1012;
      HEAP32[(32948)>>2] = $1015;
      HEAP32[$1008>>2] = $631;
      $1016 = ((($631)) + 24|0);
      HEAP32[$1016>>2] = $1008;
      $1017 = ((($631)) + 12|0);
      HEAP32[$1017>>2] = $631;
      $1018 = ((($631)) + 8|0);
      HEAP32[$1018>>2] = $631;
      break;
     }
     $1019 = HEAP32[$1008>>2]|0;
     $1020 = ($I1$0$i$i|0)==(31);
     $1021 = $I1$0$i$i >>> 1;
     $1022 = (25 - ($1021))|0;
     $1023 = $1020 ? 0 : $1022;
     $1024 = $962 << $1023;
     $K2$0$i$i = $1024;$T$0$i$i = $1019;
     while(1) {
      $1025 = ((($T$0$i$i)) + 4|0);
      $1026 = HEAP32[$1025>>2]|0;
      $1027 = $1026 & -8;
      $1028 = ($1027|0)==($962|0);
      if ($1028) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 305;
       break;
      }
      $1029 = $K2$0$i$i >>> 31;
      $1030 = (((($T$0$i$i)) + 16|0) + ($1029<<2)|0);
      $1031 = $K2$0$i$i << 1;
      $1032 = HEAP32[$1030>>2]|0;
      $1033 = ($1032|0)==(0|0);
      if ($1033) {
       $$lcssa141 = $1030;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 302;
       break;
      } else {
       $K2$0$i$i = $1031;$T$0$i$i = $1032;
      }
     }
     if ((label|0) == 302) {
      $1034 = HEAP32[(32960)>>2]|0;
      $1035 = ($$lcssa141>>>0)<($1034>>>0);
      if ($1035) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $631;
       $1036 = ((($631)) + 24|0);
       HEAP32[$1036>>2] = $T$0$i$i$lcssa140;
       $1037 = ((($631)) + 12|0);
       HEAP32[$1037>>2] = $631;
       $1038 = ((($631)) + 8|0);
       HEAP32[$1038>>2] = $631;
       break;
      }
     }
     else if ((label|0) == 305) {
      $1039 = ((($T$0$i$i$lcssa)) + 8|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = HEAP32[(32960)>>2]|0;
      $1042 = ($1040>>>0)>=($1041>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1041>>>0);
      $1043 = $1042 & $not$$i$i;
      if ($1043) {
       $1044 = ((($1040)) + 12|0);
       HEAP32[$1044>>2] = $631;
       HEAP32[$1039>>2] = $631;
       $1045 = ((($631)) + 8|0);
       HEAP32[$1045>>2] = $1040;
       $1046 = ((($631)) + 12|0);
       HEAP32[$1046>>2] = $T$0$i$i$lcssa;
       $1047 = ((($631)) + 24|0);
       HEAP32[$1047>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1049 = HEAP32[(32956)>>2]|0;
  $1050 = ($1049>>>0)>($nb$0>>>0);
  if ($1050) {
   $1051 = (($1049) - ($nb$0))|0;
   HEAP32[(32956)>>2] = $1051;
   $1052 = HEAP32[(32968)>>2]|0;
   $1053 = (($1052) + ($nb$0)|0);
   HEAP32[(32968)>>2] = $1053;
   $1054 = $1051 | 1;
   $1055 = ((($1053)) + 4|0);
   HEAP32[$1055>>2] = $1054;
   $1056 = $nb$0 | 3;
   $1057 = ((($1052)) + 4|0);
   HEAP32[$1057>>2] = $1056;
   $1058 = ((($1052)) + 8|0);
   $$0 = $1058;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1059 = (___errno_location()|0);
 HEAP32[$1059>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(32960)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(32964)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(32952)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (32984 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[8236]|0;
     $37 = $36 & $35;
     HEAP32[8236] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (33248 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(32948)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(32948)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(32960)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(32960)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(32960)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(32968)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(32956)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(32956)>>2] = $122;
   HEAP32[(32968)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(32964)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(32964)>>2] = 0;
   HEAP32[(32952)>>2] = 0;
   return;
  }
  $127 = HEAP32[(32964)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(32952)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(32952)>>2] = $130;
   HEAP32[(32964)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (32984 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(32960)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[8236]|0;
     $154 = $153 & $152;
     HEAP32[8236] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(32960)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(32960)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(32960)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (33248 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(32948)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(32948)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(32960)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(32960)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(32960)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(32964)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(32952)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (32984 + ($235<<2)|0);
  $237 = HEAP32[8236]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[8236] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(32960)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (33248 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(32948)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(32948)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(32960)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(32960)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(32976)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(32976)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (33400);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(32976)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(32960)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(33424)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(32968)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(32956)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(32968)>>2] = $38;
  HEAP32[(32956)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(32964)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(32952)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(32952)>>2] = $storemerge1;
  HEAP32[(32964)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (32984 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[8236]|0;
    $91 = $90 & $89;
    HEAP32[8236] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (33248 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(32948)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(32948)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(32960)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(32960)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(32960)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(32960)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(32964)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(32952)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (32984 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[8236]|0;
     $32 = $31 & $30;
     HEAP32[8236] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (33248 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(32948)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(32948)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(32960)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(32960)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(32960)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(32960)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(32968)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(32956)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(32956)>>2] = $116;
   HEAP32[(32968)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(32964)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(32964)>>2] = 0;
   HEAP32[(32952)>>2] = 0;
   return;
  }
  $121 = HEAP32[(32964)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(32952)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(32952)>>2] = $124;
   HEAP32[(32964)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (32984 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[8236]|0;
     $147 = $146 & $145;
     HEAP32[8236] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (33248 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(32948)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(32948)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(32960)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(32960)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(32960)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(32964)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(32952)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (32984 + ($225<<2)|0);
  $227 = HEAP32[8236]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[8236] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(32960)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (33248 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(32948)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(32948)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(32960)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(32960)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(539,($0|0),(27030|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (9032);
  ___cxa_throw(($0|0),(1584|0),(362|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = ((($this)) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = ((($this)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = ((($this)) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $16 = ($$0|0)==($__last|0);
  if ($16) {
   break;
  }
  $17 = HEAP8[$$0>>0]|0;
  HEAP8[$__p$0>>0] = $17;
  $18 = ((($$0)) + 1|0);
  $19 = ((($__p$0)) + 1|0);
  $$0 = $18;$__p$0 = $19;
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  __ZdlPv($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = (($21) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(376,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($21) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $15;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $15 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 do {
  if ($7) {
   $9 = (($__n) - ($8))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $24 = (($18) + ($__n_copy)|0);
  $25 = (($24) + ($__n_add)|0);
  $26 = (($20) + ($__n_copy)|0);
  $27 = (($26) + ($__n_del)|0);
  _memcpy(($25|0),($27|0),($23|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = ((($__p$0)) + 1|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $19 = ($$0|0)==($__last|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$$0>>2]|0;
  HEAP32[$__p$0>>2] = $20;
  $21 = ((($$0)) + 4|0);
  $22 = ((($__p$0)) + 4|0);
  $$0 = $21;$__p$0 = $22;
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $27 = (($19) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_add<<2)|0);
  $29 = (($21) + ($__n_copy<<2)|0);
  $30 = (($29) + ($__n_del<<2)|0);
  (_wmemcpy($28,$30,$26)|0);
 }
 $31 = ($__old_cap|0)==(1);
 if (!($31)) {
  __ZdlPv($21);
 }
 $32 = ((($this)) + 8|0);
 HEAP32[$32>>2] = $19;
 $33 = $18 | 1;
 HEAP32[$this>>2] = $33;
 $34 = (($24) + ($__n_add))|0;
 $35 = ((($this)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = (($19) + ($34<<2)|0);
 HEAP32[$36>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = $21 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(376,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch_3(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($21) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $15;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $15 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $25 = (($19) + ($__n_copy<<2)|0);
  $26 = (($25) + ($__n_add<<2)|0);
  $27 = (($21) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_del<<2)|0);
  (_wmemcpy($26,$28,$24)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = ((($__p$0)) + 4|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5964);
 __THREW__ = 0;
 invoke_vii(540,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $i$0 = $1;
 while(1) {
  $4 = ($i$0|0)==(0);
  if ($4) {
   break;
  }
  $5 = (($i$0) + -1)|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $i$0 = $5;
 }
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5980);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5980);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$0>>0] = $storemerge;
  $14 = (($__i$0) + 1)|0;
  $15 = ((($$0)) + 1|0);
  $$0 = $15;$__i$0 = $14;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$0>>0]|0;
   $7 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$0>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$0;
    break;
   }
  }
  $15 = ((($$0)) + 1|0);
  $16 = (($__i$0) + 1)|0;
  $$0 = $15;$__i$0 = $16;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($4);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27255|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,27264,35);
 }
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 HEAP32[$0>>2] = 1;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = (33440);
 __THREW__ = 0;
 invoke_viii(541,($12|0),(27300|0),($0|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($16|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(272|0),(93|0));
  // unreachable;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30480]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(30480)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[8360] = (6064);
   (___cxa_atexit((96|0),(33440|0),(___dso_handle|0))|0);
  }
 }
 return (33440|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (6044);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5980);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$0$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__i$sroa$0$113 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__is) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  do {
   if (!($__noskipws)) {
    $11 = HEAP32[$__is>>2]|0;
    $12 = ((($11)) + -12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($__is) + ($13)|0);
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 4096;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $19 = (__ZNKSt3__18ios_base6getlocEv($14)|0);
     HEAP32[$0>>2] = $19;
     __THREW__ = 0;
     $20 = (invoke_iii(388,($0|0),(33460|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $64 = ___cxa_find_matching_catch_2()|0;
      $65 = tempRet0;
      __ZNSt3__16localeD2Ev($0);
      ___resumeException($64|0);
      // unreachable;
     }
     __ZNSt3__16localeD2Ev($0);
     $23 = HEAP32[$__is>>2]|0;
     $24 = ((($23)) + -12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($__is) + ($25)|0);
     $27 = ((($26)) + 24|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($20)) + 8|0);
     $30 = $28;
     $31 = ($28|0)==(0);
     $32 = ((($30)) + 12|0);
     $33 = ((($30)) + 16|0);
     $34 = $28;
     $35 = $28;
     $36 = ((($35)) + 12|0);
     $37 = ((($35)) + 16|0);
     $38 = $28;
     $39 = $28;
     while(1) {
      if ($31) {
       $$pre$phiZ2D = 0;$__i$sroa$0$113 = 0;
       break;
      }
      $40 = HEAP32[$32>>2]|0;
      $41 = HEAP32[$33>>2]|0;
      $42 = ($40|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$34>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (FUNCTION_TABLE_ii[$45 & 1023]($30)|0);
       $47 = ($46|0)==(-1);
       if ($47) {
        $$pre$phiZ2D = 0;$__i$sroa$0$113 = 0;
        break;
       }
      }
      $48 = HEAP32[$36>>2]|0;
      $49 = HEAP32[$37>>2]|0;
      $50 = ($48|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$38>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (FUNCTION_TABLE_ii[$53 & 1023]($35)|0);
       $$0$i$i = $54;
      } else {
       $55 = HEAP8[$48>>0]|0;
       $56 = $55&255;
       $$0$i$i = $56;
      }
      $57 = $$0$i$i&255;
      $isascii1$i = ($57<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $$pre$phiZ2D = $35;$__i$sroa$0$113 = $28;
       break;
      }
      $sext = $$0$i$i << 24;
      $58 = $sext >> 24;
      $59 = HEAP32[$29>>2]|0;
      $60 = (($59) + ($58<<1)|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61 & 8192;
      $63 = ($62<<16>>16)==(0);
      if ($63) {
       $$pre$phiZ2D = $35;$__i$sroa$0$113 = $28;
       break;
      }
      $66 = HEAP32[$36>>2]|0;
      $67 = HEAP32[$37>>2]|0;
      $68 = ($66|0)==($67|0);
      if ($68) {
       $69 = HEAP32[$39>>2]|0;
       $70 = ((($69)) + 40|0);
       $71 = HEAP32[$70>>2]|0;
       (FUNCTION_TABLE_ii[$71 & 1023]($35)|0);
       continue;
      } else {
       $72 = ((($66)) + 1|0);
       HEAP32[$36>>2] = $72;
       continue;
      }
     }
     $73 = ($__i$sroa$0$113|0)==(0);
     if (!($73)) {
      $74 = ((($$pre$phiZ2D)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($$pre$phiZ2D)) + 16|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75|0)==($77|0);
      if (!($78)) {
       break;
      }
      $79 = $__i$sroa$0$113;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_ii[$82 & 1023]($$pre$phiZ2D)|0);
      $84 = ($83|0)==(-1);
      if (!($84)) {
       break;
      }
     }
     $85 = HEAP32[$__is>>2]|0;
     $86 = ((($85)) + -12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($__is) + ($87)|0);
     $89 = ((($88)) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 | 6;
     __ZNSt3__18ios_base5clearEj($88,$91);
    }
   }
  } while(0);
  $92 = HEAP32[$__is>>2]|0;
  $93 = ((($92)) + -12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($__is) + ($94)|0);
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0);
  $99 = $98&1;
  HEAP8[$this>>0] = $99;
 } else {
  $100 = $6 | 4;
  __ZNSt3__18ios_base5clearEj($4,$100);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   __THREW__ = 0;
   invoke_vii(542,($__s|0),($this|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L3: do {
    if ($8) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     $$0 = $33;
    } else {
     $9 = HEAP8[$__s>>0]|0;
     $10 = ($9<<24>>24)==(0);
     do {
      if (!($10)) {
       $11 = HEAP32[$this>>2]|0;
       $12 = ((($11)) + -12|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($this) + ($13)|0);
       $15 = ((($14)) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$16>>2]|0;
       $18 = ((($17)) + 24|0);
       $19 = HEAP32[$18>>2]|0;
       __THREW__ = 0;
       $20 = (invoke_ii($19|0,($16|0))|0);
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if (!($22)) {
        $23 = ($20|0)==(-1);
        if (!($23)) {
         break;
        }
        $24 = HEAP32[$this>>2]|0;
        $25 = ((($24)) + -12|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($this) + ($26)|0);
        $28 = ((($27)) + 16|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = $29 | 1;
        __THREW__ = 0;
        invoke_vii(386,($27|0),($30|0));
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         break;
        }
       }
       $35 = ___cxa_find_matching_catch_3(0|0)|0;
       $36 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $35;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = ((($37)) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($this) + ($39)|0);
   __THREW__ = 0;
   invoke_vi(543,($40|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    ___cxa_end_catch();
    break;
   }
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   __THREW__ = 0;
   invoke_v(394);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $47 = ___cxa_find_matching_catch_3(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   } else {
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__os) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($5)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 8192;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = (__ZSt18uncaught_exceptionv()|0);
     if (!($16)) {
      $17 = HEAP32[$0>>2]|0;
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = HEAP32[$23>>2]|0;
      $25 = ((($24)) + 24|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      $27 = (invoke_ii($26|0,($23|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if (!($29)) {
       $30 = ($27|0)==(-1);
       if (!($30)) {
        break;
       }
       $31 = HEAP32[$0>>2]|0;
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + -12|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($31) + ($34)|0);
       $36 = ((($35)) + 16|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 | 1;
       __THREW__ = 0;
       invoke_vii(386,($35|0),($38|0));
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if (!($40)) {
        break;
       }
      }
      $41 = ___cxa_find_matching_catch_3(0|0)|0;
      $42 = tempRet0;
      (___cxa_begin_catch(($41|0))|0);
      __THREW__ = 0;
      invoke_v(394);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch_3(0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($this,$__s,$__n,$__dlm) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 $__dlm = $__dlm|0;
 var $$0 = 0, $$0$i8 = 0, $$0$lcssa35 = 0, $$036 = 0, $$__err$2 = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $__err$2$ph = 0, $__sen = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sen = sp;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 __THREW__ = 0;
 invoke_viii(544,($__sen|0),($this|0),1);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   label = 9;
  } else {
   $3 = HEAP8[$__sen>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($__n) + -1)|0;
    $$0 = $__s;
    while(1) {
     $6 = HEAP32[$this>>2]|0;
     $7 = ((($6)) + -12|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($this) + ($8)|0);
     $10 = ((($9)) + 24|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($11)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($11)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $17 = HEAP32[$11>>2]|0;
      $18 = ((($17)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      __THREW__ = 0;
      $20 = (invoke_ii($19|0,($11|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 8;
       break;
      }
      $25 = ($20|0)==(-1);
      if ($25) {
       $$036 = $$0;$__err$2$ph = 2;
       break;
      } else {
       $$0$i8 = $20;
      }
     } else {
      $23 = HEAP8[$13>>0]|0;
      $24 = $23&255;
      $$0$i8 = $24;
     }
     $36 = $$0$i8&255;
     $37 = ($36<<24>>24)==($__dlm<<24>>24);
     if ($37) {
      $$0$lcssa35 = $$0;
      label = 14;
      break;
     }
     $57 = HEAP32[$0>>2]|0;
     $58 = ($57|0)<($5|0);
     if (!($58)) {
      $$036 = $$0;$__err$2$ph = 4;
      break;
     }
     $59 = ((($$0)) + 1|0);
     HEAP8[$$0>>0] = $36;
     $60 = HEAP32[$this>>2]|0;
     $61 = ((($60)) + -12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($this) + ($62)|0);
     $64 = ((($63)) + 24|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      __THREW__ = 0;
      (invoke_ii($73|0,($65|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       label = 8;
       break;
      }
     } else {
      $76 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $76;
     }
     $77 = HEAP32[$0>>2]|0;
     $78 = (($77) + 1)|0;
     HEAP32[$0>>2] = $78;
     $$0 = $59;
    }
    if ((label|0) == 8) {
     $26 = ___cxa_find_matching_catch_3(0|0)|0;
     $27 = tempRet0;
     $$pre$phi24Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $26;
     label = 10;
     break;
    }
    if ((label|0) == 14) {
     $38 = HEAP32[$this>>2]|0;
     $39 = ((($38)) + -12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($this) + ($40)|0);
     $42 = ((($41)) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($43)) + 12|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($43)) + 16|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($45|0)==($47|0);
     if ($48) {
      $49 = HEAP32[$43>>2]|0;
      $50 = ((($49)) + 40|0);
      $51 = HEAP32[$50>>2]|0;
      __THREW__ = 0;
      (invoke_ii($51|0,($43|0))|0);
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       label = 9;
       break;
      }
     } else {
      $54 = ((($45)) + 1|0);
      HEAP32[$44>>2] = $54;
     }
     $55 = HEAP32[$0>>2]|0;
     $56 = (($55) + 1)|0;
     HEAP32[$0>>2] = $56;
     $$036 = $$0$lcssa35;$__err$2$ph = 0;
    }
    $79 = ($__n|0)>(0);
    if ($79) {
     HEAP8[$$036>>0] = 0;
    }
    $80 = HEAP32[$0>>2]|0;
    $81 = ($80|0)==(0);
    $82 = $__err$2$ph | 4;
    $$__err$2 = $81 ? $82 : $__err$2$ph;
    $83 = HEAP32[$this>>2]|0;
    $84 = ((($83)) + -12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($this) + ($85)|0);
    $87 = ((($86)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 | $$__err$2;
    __THREW__ = 0;
    invoke_vii(386,($86|0),($89|0));
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     label = 9;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  $$pre$phi24Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $28;
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   (___cxa_begin_catch(($lpad$phi$index|0))|0);
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $31 = ((($30)) + -12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($$pre$phi24Z2D) + ($32)|0);
   __THREW__ = 0;
   invoke_vi(543,($33|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    ___cxa_end_catch();
    break;
   }
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   __THREW__ = 0;
   invoke_v(394);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $96 = ___cxa_find_matching_catch_3(0|0)|0;
    $97 = tempRet0;
    ___clang_call_terminate($96);
    // unreachable;
   } else {
    ___resumeException($92|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02>>0]|0;
  $3 = HEAP8[$$01>>0]|0;
  $4 = ($2<<24>>24)<($3<<24>>24);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3<<24>>24)<($2<<24>>24);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 1|0);
  $7 = ((($$01)) + 1|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP8[$__p$0>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = ((($__p$0)) + 1|0);
  $__h$0 = $8;$__p$0 = $9;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02>>2]|0;
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($2|0)<($3|0);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3|0)<($2|0);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 4|0);
  $7 = ((($$01)) + 4|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP32[$__p$0>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = ((($__p$0)) + 4|0);
  $__h$0 = $7;$__p$0 = $8;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(388,($2|0),(33460|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch_2()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(388,($3|0),(33472|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(545,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (546);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,547);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8367]|0;HEAP32[8367] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$elt$i$i$i$i = 0, $$elt1$i$i$i$i = 0, $$unpack$i$i$i$i = 0, $$unpack2$i$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$elt$i$i$i$i = ((($__vp)) + 4|0);
 $$unpack$i$i$i$i = HEAP32[$$elt$i$i$i$i>>2]|0;
 $$elt1$i$i$i$i = ((($__vp)) + 8|0);
 $$unpack2$i$i$i$i = HEAP32[$$elt1$i$i$i$i>>2]|0;
 $0 = HEAP32[$__vp>>2]|0;
 $1 = $$unpack2$i$i$i$i >> 1;
 $2 = (($0) + ($1)|0);
 $3 = $$unpack2$i$i$i$i & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $$unpack$i$i$i$i;
  $9 = $8;
 } else {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + ($$unpack$i$i$i$i)|0);
  $7 = HEAP32[$6>>2]|0;
  $9 = $7;
 }
 FUNCTION_TABLE_vi[$9 & 1023]($2);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(1600|0),(368|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 if ($6) {
  $7 = $3;
  $8 = (($7) + ($id<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = $10;
 } else {
  $11 = 0;
 }
 return ($11|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$041 = 0, $$lcssa = 0, $$lcssa99 = 0, $$pre$i$i$i = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i11$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0;
 var $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0;
 var $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__stat_hold$sroa$0$0$ph$ph = 0, $__stat_hold$sroa$0$1 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(548);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__stat_hold$sroa$0$0$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $17 = $5;
   $__stat_hold$sroa$0$1 = $17;$__status$0 = $5;
   label = 11;
  } else {
   $__stat_hold$sroa$0$1 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $18 = ($__ky$0|0)==($__ke|0);
    if ($18) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $19 = HEAP8[$__ky$0>>0]|0;
    $20 = $19 & 1;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $19&255;
     $25 = $24 >>> 1;
     $27 = $25;
    } else {
     $22 = ((($__ky$0)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $27 = $23;
    }
    $26 = ($27|0)==(0);
    if ($26) {
     HEAP8[$__st$0>>0] = 2;
     $28 = (($__n_might_match$0) + -1)|0;
     $29 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $29;$__n_might_match$1 = $28;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $30 = ((($__ky$0)) + 12|0);
    $31 = ((($__st$0)) + 1|0);
    $__ky$0 = $30;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $31;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $32 = HEAP32[$__b>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      $47 = 0;
     } else {
      $34 = ((($32)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($32)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = ((($39)) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 5;
        break L20;
       }
       $45 = ($42|0)==(-1);
       if ($45) {
        HEAP32[$__b>>2] = 0;
        $47 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $47 = $$pre$i$i$i;
        break;
       }
      } else {
       $47 = $32;
      }
     }
    } while(0);
    $46 = ($47|0)==(0|0);
    $48 = HEAP32[$__e>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $$pre$i2$i$i11 = 0;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 5;
       break;
      }
      $61 = ($58|0)==(-1);
      if ($61) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i11 = 0;
      } else {
       $$pre$i2$i$i11 = $48;
      }
     } else {
      $$pre$i2$i$i11 = $48;
     }
    }
    $62 = ($$pre$i2$i$i11|0)==(0|0);
    $tmp$i$i = $46 ^ $62;
    $63 = ($__n_might_match$2|0)!=(0);
    $64 = $63 & $tmp$i$i;
    $65 = HEAP32[$__b>>2]|0;
    if (!($64)) {
     $$lcssa = $62;$$lcssa99 = $65;$$pre$i2$i$i11$lcssa = $$pre$i2$i$i11;
     label = 33;
     break;
    }
    $93 = ((($65)) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($65)) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$65>>2]|0;
     $99 = ((($98)) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($65|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 5;
      break;
     } else {
      $$0$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i = $105;
    }
    $106 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $106;
    } else {
     $107 = HEAP32[$__ct>>2]|0;
     $108 = ((($107)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($__ct|0),($106|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 5;
      break;
     } else {
      $__c$0 = $110;
     }
    }
    $113 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $114 = ($__ky1$0|0)==($__ke|0);
     if ($114) {
      break;
     }
     $115 = HEAP8[$__st$1>>0]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$0>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = ((($__ky1$0)) + 1|0);
        $124 = $122;
       } else {
        $120 = ((($__ky1$0)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0)|0);
       $125 = HEAP8[$123>>0]|0;
       if ($__case_sensitive) {
        $__kc$0 = $125;
       } else {
        $126 = HEAP32[$__ct>>2]|0;
        $127 = ((($126)) + 12|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $129;
        }
       }
       $132 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
       if (!($132)) {
        HEAP8[$__st$1>>0] = 0;
        $144 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$0>>0]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $141 = $139;
       } else {
        $136 = ((($__ky1$0)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $141 = $137;
       }
       $140 = ($141|0)==($113|0);
       if ($140) {
        HEAP8[$__st$1>>0] = 2;
        $142 = (($__n_might_match$3) + -1)|0;
        $143 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $143;$__n_might_match$5 = $142;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $145 = ((($__ky1$0)) + 12|0);
     $146 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $145;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $146;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $147 = HEAP32[$__b>>2]|0;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($147)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149|0)==($151|0);
    if ($152) {
     $153 = HEAP32[$147>>2]|0;
     $154 = ((($153)) + 40|0);
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     (invoke_ii($155|0,($147|0))|0);
     $156 = __THREW__; __THREW__ = 0;
     $157 = $156&1;
     if ($157) {
      label = 5;
      break;
     }
    } else {
     $158 = ((($149)) + 1|0);
     HEAP32[$148>>2] = $158;
    }
    $159 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $160 = ($159>>>0)>(1);
    if ($160) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $161 = ($__ky2$0|0)==($__ke|0);
     if ($161) {
      $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $162 = HEAP8[$__st$2>>0]|0;
     $163 = ($162<<24>>24)==(2);
     if ($163) {
      $164 = HEAP8[$__ky2$0>>0]|0;
      $165 = $164 & 1;
      $166 = ($165<<24>>24)==(0);
      if ($166) {
       $169 = $164&255;
       $170 = $169 >>> 1;
       $172 = $170;
      } else {
       $167 = ((($__ky2$0)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $172 = $168;
      }
      $171 = ($172|0)==($113|0);
      if ($171) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $173 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $173;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $174 = ((($__ky2$0)) + 12|0);
     $175 = ((($__st$2)) + 1|0);
     $__ky2$0 = $174;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $175;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 33) {
    $66 = ($$lcssa99|0)==(0|0);
    do {
     if ($66) {
      $80 = 0;
     } else {
      $67 = ((($$lcssa99)) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($$lcssa99)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$$lcssa99>>2]|0;
       $73 = ((($72)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_ii($74|0,($$lcssa99|0))|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       }
       $78 = ($75|0)==(-1);
       if ($78) {
        HEAP32[$__b>>2] = 0;
        $80 = 0;
        break;
       } else {
        $$pre$i$i$i7 = HEAP32[$__b>>2]|0;
        $80 = $$pre$i$i$i7;
        break;
       }
      } else {
       $80 = $$lcssa99;
      }
     }
    } while(0);
    $79 = ($80|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 79;
     } else {
      $81 = ((($$pre$i2$i$i11$lcssa)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($$pre$i2$i$i11$lcssa)) + 16|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82|0)==($84|0);
      if ($85) {
       $86 = HEAP32[$$pre$i2$i$i11$lcssa>>2]|0;
       $87 = ((($86)) + 36|0);
       $88 = HEAP32[$87>>2]|0;
       __THREW__ = 0;
       $89 = (invoke_ii($88|0,($$pre$i2$i$i11$lcssa|0))|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       }
       $92 = ($89|0)==(-1);
       if ($92) {
        HEAP32[$__e>>2] = 0;
        label = 79;
        break;
       }
      }
      if ($79) {
       $$0 = $__kb;$__st$3 = $__status$0;
      } else {
       label = 80;
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($79) {
      label = 80;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 80) {
     $176 = HEAP32[$__err>>2]|0;
     $177 = $176 | 2;
     HEAP32[$__err>>2] = $177;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $178 = ($$0|0)==($__ke|0);
     if ($178) {
      label = 84;
      break;
     }
     $179 = HEAP8[$__st$3>>0]|0;
     $180 = ($179<<24>>24)==(2);
     if ($180) {
      $$041 = $$0;
      break;
     }
     $181 = ((($$0)) + 12|0);
     $182 = ((($__st$3)) + 1|0);
     $$0 = $181;$__st$3 = $182;
    }
    if ((label|0) == 84) {
     $183 = HEAP32[$__err>>2]|0;
     $184 = $183 | 4;
     HEAP32[$__err>>2] = $184;
     $$041 = $__ke;
    }
    $185 = ($__stat_hold$sroa$0$1|0)==(0);
    if (!($185)) {
     $186 = $__stat_hold$sroa$0$1;
     _free($186);
    }
    STACKTOP = sp;return ($$041|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$0$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($__stat_hold$sroa$0$0|0)==(0);
 if (!($15)) {
  $16 = $__stat_hold$sroa$0$0;
  _free($16);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(550,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($140)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($140) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(388,($__loc|0),(33460|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(27493|0),((27519)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(388,($__loc|0),(33472|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP8[$$0$i>>0]|0;
    $30 = ($29<<24>>24)==($__ct<<24>>24);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 1|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$1 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (27493 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (27493 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  L7: do {
   if ($9) {
    $10 = ($6|0)==(34);
    do {
     if ($10) {
      HEAP32[$__err>>2] = 4;
      $21 = ($5|0)>(0);
      $22 = ($4>>>0)>(0);
      $23 = ($5|0)==(0);
      $24 = $23 & $22;
      $25 = $21 | $24;
      if ($25) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $11 = ($5|0)<(-1);
      $12 = ($4>>>0)<(2147483648);
      $13 = ($5|0)==(-1);
      $14 = $13 & $12;
      $15 = $11 | $14;
      if ($15) {
       HEAP32[$__err>>2] = 4;
       break;
      }
      $16 = ($5|0)>(0);
      $17 = ($4>>>0)>(2147483647);
      $18 = ($5|0)==(0);
      $19 = $18 & $17;
      $20 = $16 | $19;
      if ($20) {
       HEAP32[$__err>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $4;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30488]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30488)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(551,2147483647,(27526|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[8370] = $4;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[8370]|0;
 return ($7|0);
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$0$i$i = 0, $$01$i$i = 0, $$__ig$0 = 0, $$not = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $16 = $0;$25 = $4;
   } else {
    $$0$i$i = $__g_end;$$01$i$i = $__g;
    while(1) {
     $10 = ((($$0$i$i)) + -4|0);
     $11 = ($$01$i$i>>>0)<($10>>>0);
     if (!($11)) {
      break;
     }
     $12 = HEAP32[$$01$i$i>>2]|0;
     $13 = HEAP32[$10>>2]|0;
     HEAP32[$$01$i$i>>2] = $13;
     HEAP32[$10>>2] = $12;
     $14 = ((($$01$i$i)) + 4|0);
     $$0$i$i = $10;$$01$i$i = $14;
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $16 = $$pre;$25 = $$pre11;
   }
   $15 = $16 & 1;
   $17 = ($15<<24>>24)==(0);
   $18 = ((($__grouping)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($__grouping)) + 1|0);
   $21 = $17 ? $20 : $19;
   $22 = $16&255;
   $23 = $22 >>> 1;
   $24 = $17 ? $23 : $25;
   $26 = (($21) + ($24)|0);
   $27 = ((($__g_end)) + -4|0);
   $28 = $26;
   $__ig$0 = $21;$__r$0 = $__g;
   while(1) {
    $29 = ($__r$0>>>0)<($27>>>0);
    $30 = HEAP8[$__ig$0>>0]|0;
    $$not = ($30<<24>>24)<(1);
    $31 = ($30<<24>>24)==(127);
    $or$cond2 = $$not | $31;
    if (!($29)) {
     break;
    }
    if (!($or$cond2)) {
     $32 = $30 << 24 >> 24;
     $33 = HEAP32[$__r$0>>2]|0;
     $34 = ($32|0)==($33|0);
     if (!($34)) {
      label = 10;
      break;
     }
    }
    $35 = $__ig$0;
    $36 = (($28) - ($35))|0;
    $37 = ($36|0)>(1);
    $38 = ((($__ig$0)) + 1|0);
    $$__ig$0 = $37 ? $38 : $__ig$0;
    $39 = ((($__r$0)) + 4|0);
    $__ig$0 = $$__ig$0;$__r$0 = $39;
   }
   if ((label|0) == 10) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if (!($or$cond2)) {
    $40 = $30 << 24 >> 24;
    $41 = HEAP32[$27>>2]|0;
    $42 = (($41) + -1)|0;
    $43 = ($42>>>0)<($40>>>0);
    if (!($43)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(552,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = tempRet0;
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    label = 32;
   } else {
    $127 = $__v;
    $128 = $127;
    HEAP32[$128>>2] = $123;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = $124;
    $131 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$131,$__err);
    $132 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($132) {
     $146 = 0;
    } else {
     $133 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $139 = ((($138)) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      __THREW__ = 0;
      $141 = (invoke_ii($140|0,($$pre$i$i$i$lcssa|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       label = 32;
       break;
      }
      $144 = ($141|0)==(-1);
      if ($144) {
       HEAP32[$__b>>2] = 0;
       $146 = 0;
      } else {
       $146 = $$pre$i$i$i$lcssa;
      }
     } else {
      $146 = $$pre$i$i$i$lcssa;
     }
    }
    $145 = ($146|0)==(0|0);
    $147 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 56;
     } else {
      $148 = ((($$pre$i2$i$i)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ((($$pre$i2$i$i)) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i2$i$i>>2]|0;
       $154 = ((($153)) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i2$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        label = 32;
        break L13;
       }
       $159 = ($156|0)==(-1);
       if ($159) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($145)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($145) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $160 = HEAP32[$__err>>2]|0;
     $161 = $160 | 2;
     HEAP32[$__err>>2] = $161;
    }
    $162 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($162|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  if ($9) {
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    $20 = $16;$21 = $17;
   } else {
    $20 = $4;$21 = $5;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $20 = 0;$21 = 0;
  }
  $18 = $21;$19 = $20;
 }
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(553,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP16[$__v>>1] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($140)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($140) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(65535);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $18 = $6&65535;
      $$0 = $18;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(554,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($140)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($140) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(555,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($140)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($140) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(556,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = tempRet0;
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    label = 32;
   } else {
    $127 = $__v;
    $128 = $127;
    HEAP32[$128>>2] = $123;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = $124;
    $131 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$131,$__err);
    $132 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($132) {
     $146 = 0;
    } else {
     $133 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $139 = ((($138)) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      __THREW__ = 0;
      $141 = (invoke_ii($140|0,($$pre$i$i$i$lcssa|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       label = 32;
       break;
      }
      $144 = ($141|0)==(-1);
      if ($144) {
       HEAP32[$__b>>2] = 0;
       $146 = 0;
      } else {
       $146 = $$pre$i$i$i$lcssa;
      }
     } else {
      $146 = $$pre$i$i$i$lcssa;
     }
    }
    $145 = ($146|0)==(0|0);
    $147 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 56;
     } else {
      $148 = ((($$pre$i2$i$i)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ((($$pre$i2$i$i)) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i2$i$i>>2]|0;
       $154 = ((($153)) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i2$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        label = 32;
        break L13;
       }
       $159 = ($156|0)==(-1);
       if ($159) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($145)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($145) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $160 = HEAP32[$__err>>2]|0;
     $161 = $160 | 2;
     HEAP32[$__err>>2] = $161;
    }
    $162 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($162|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if ($11) {
    $12 = ($8|0)==(34);
    if ($12) {
     HEAP32[$__err>>2] = 4;
     $15 = -1;$16 = -1;
    } else {
     $15 = $6;$16 = $7;
    }
   } else {
    HEAP32[$__err>>2] = 4;
    $15 = 0;$16 = 0;
   }
   $13 = $16;$14 = $15;
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(557,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($140)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($140) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(388,($__loc|0),(33460|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(27493|0),((27525)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(388,($__loc|0),(33472|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP8[$$0$i>>0]|0;
    $43 = ($42<<24>>24)==($__ct<<24>>24);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 1|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$2 = -1;
   } else {
    $49 = (27493 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$2 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$2 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(558,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($140)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($140) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(559,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$pre$i$i$i$lcssa;
      }
     } else {
      $141 = $$pre$i$i$i$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($140)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($140) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i5 = 0, $exitcond$i$i = 0, $exitcond$i$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(387,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(388,($0|0),(33460|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(27493|0),((27519)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i5 = 0;
     while(1) {
      $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
      if ($exitcond$i$i6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i5) + 1)|0;
      $__i$0$i$i5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 36;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 35;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 25;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 35;
           break L20;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(549,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 35;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i26 = (($77) + -1)|0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(549,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 35;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 35;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 35;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 35) {
        $91 = ___cxa_find_matching_catch_2()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(549,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 36;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(560)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 36;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(561,($132|0),($127|0),(27528|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 36;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $151 = 0;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 36;
             break;
            }
            $149 = ($146|0)==(-1);
            if ($149) {
             HEAP32[$__b>>2] = 0;
             $151 = 0;
            } else {
             $151 = $$pre$i$i$i$lcssa;
            }
           } else {
            $151 = $$pre$i$i$i$lcssa;
           }
          }
          $150 = ($151|0)==(0|0);
          $152 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($152) {
            label = 61;
           } else {
            $153 = ((($$pre$i2$i$i)) + 12|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ((($$pre$i2$i$i)) + 16|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($154|0)==($156|0);
            if ($157) {
             $158 = HEAP32[$$pre$i2$i$i>>2]|0;
             $159 = ((($158)) + 36|0);
             $160 = HEAP32[$159>>2]|0;
             __THREW__ = 0;
             $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
             $162 = __THREW__; __THREW__ = 0;
             $163 = $162&1;
             if ($163) {
              label = 36;
              break L18;
             }
             $164 = ($161|0)==(-1);
             if ($164) {
              HEAP32[$__e>>2] = 0;
              label = 61;
              break;
             }
            }
            if (!($150)) {
             label = 62;
            }
           }
          } while(0);
          if ((label|0) == 61) {
           if ($150) {
            label = 62;
           }
          }
          if ((label|0) == 62) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 36) {
      $93 = ___cxa_find_matching_catch_2()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(562,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch_3(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 1023]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(388,($2|0),(33492|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch_2()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(388,($3|0),(33500|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(563,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i12 = 0, $$045 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i14 = 0, $$pre$i3$i$i14$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0;
 var $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__stat_hold$sroa$0$0$ph$ph = 0, $__stat_hold$sroa$0$1 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i9 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(548);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__stat_hold$sroa$0$0$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $17 = $5;
   $__stat_hold$sroa$0$1 = $17;$__status$0 = $5;
   label = 11;
  } else {
   $__stat_hold$sroa$0$1 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $18 = ($__ky$0|0)==($__ke|0);
    if ($18) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $19 = HEAP8[$__ky$0>>0]|0;
    $20 = $19 & 1;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $19&255;
     $25 = $24 >>> 1;
     $27 = $25;
    } else {
     $22 = ((($__ky$0)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $27 = $23;
    }
    $26 = ($27|0)==(0);
    if ($26) {
     HEAP8[$__st$0>>0] = 2;
     $28 = (($__n_might_match$0) + -1)|0;
     $29 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $29;$__n_might_match$1 = $28;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $30 = ((($__ky$0)) + 12|0);
    $31 = ((($__st$0)) + 1|0);
    $__ky$0 = $30;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $31;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $32 = HEAP32[$__b>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      $62 = 1;
     } else {
      $34 = ((($32)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($32)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = ((($39)) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $42;
       }
      } else {
       $45 = HEAP32[$35>>2]|0;
       $$0$i$i$i$i = $45;
      }
      $46 = ($$0$i$i$i$i|0)==(-1);
      if ($46) {
       HEAP32[$__b>>2] = 0;
       $62 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $62 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $47 = HEAP32[$__e>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     $$pre$i3$i$i14 = 0;$63 = 1;
    } else {
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($47)) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($50|0)==($52|0);
     if ($53) {
      $54 = HEAP32[$47>>2]|0;
      $55 = ((($54)) + 36|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_ii($56|0,($47|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $57;
      }
     } else {
      $60 = HEAP32[$50>>2]|0;
      $$0$i$i1$i$i = $60;
     }
     $61 = ($$0$i$i1$i$i|0)==(-1);
     if ($61) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i14 = 0;$63 = 1;
     } else {
      $$pre$i3$i$i14 = $47;$63 = 0;
     }
    }
    $tmp$i$i = $62 ^ $63;
    $64 = ($__n_might_match$2|0)!=(0);
    $65 = $64 & $tmp$i$i;
    $66 = HEAP32[$__b>>2]|0;
    if (!($65)) {
     $$lcssa = $66;$$pre$i3$i$i14$lcssa = $$pre$i3$i$i14;
     label = 35;
     break;
    }
    $95 = ((($66)) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ((($66)) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$66>>2]|0;
     $101 = ((($100)) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($66|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 5;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP32[$96>>2]|0;
     $$0$i$i = $106;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $107 = HEAP32[$__ct>>2]|0;
     $108 = ((($107)) + 28|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($__ct|0),($$0$i$i|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 5;
      break;
     } else {
      $__c$0 = $110;
     }
    }
    $113 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $114 = ($__ky1$0|0)==($__ke|0);
     if ($114) {
      break;
     }
     $115 = HEAP8[$__st$1>>0]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$0>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = ((($__ky1$0)) + 4|0);
        $124 = $122;
       } else {
        $120 = ((($__ky1$0)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0<<2)|0);
       $125 = HEAP32[$123>>2]|0;
       if ($__case_sensitive) {
        $__kc$0 = $125;
       } else {
        $126 = HEAP32[$__ct>>2]|0;
        $127 = ((($126)) + 28|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $129;
        }
       }
       $132 = ($__c$0|0)==($__kc$0|0);
       if (!($132)) {
        HEAP8[$__st$1>>0] = 0;
        $144 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$0>>0]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $141 = $139;
       } else {
        $136 = ((($__ky1$0)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $141 = $137;
       }
       $140 = ($141|0)==($113|0);
       if ($140) {
        HEAP8[$__st$1>>0] = 2;
        $142 = (($__n_might_match$3) + -1)|0;
        $143 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $143;$__n_might_match$5 = $142;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $145 = ((($__ky1$0)) + 12|0);
     $146 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $145;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $146;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $147 = HEAP32[$__b>>2]|0;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($147)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149|0)==($151|0);
    if ($152) {
     $153 = HEAP32[$147>>2]|0;
     $154 = ((($153)) + 40|0);
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     (invoke_ii($155|0,($147|0))|0);
     $156 = __THREW__; __THREW__ = 0;
     $157 = $156&1;
     if ($157) {
      label = 5;
      break;
     }
    } else {
     $158 = ((($149)) + 4|0);
     HEAP32[$148>>2] = $158;
    }
    $159 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $160 = ($159>>>0)>(1);
    if ($160) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $161 = ($__ky2$0|0)==($__ke|0);
     if ($161) {
      $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $162 = HEAP8[$__st$2>>0]|0;
     $163 = ($162<<24>>24)==(2);
     if ($163) {
      $164 = HEAP8[$__ky2$0>>0]|0;
      $165 = $164 & 1;
      $166 = ($165<<24>>24)==(0);
      if ($166) {
       $169 = $164&255;
       $170 = $169 >>> 1;
       $172 = $170;
      } else {
       $167 = ((($__ky2$0)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $172 = $168;
      }
      $171 = ($172|0)==($113|0);
      if ($171) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $173 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $173;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $174 = ((($__ky2$0)) + 12|0);
     $175 = ((($__st$2)) + 1|0);
     $__ky2$0 = $174;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $175;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 35) {
    $67 = ($$lcssa|0)==(0|0);
    do {
     if ($67) {
      $187 = 1;
     } else {
      $68 = ((($$lcssa)) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ((($$lcssa)) + 16|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($69|0)==($71|0);
      if ($72) {
       $73 = HEAP32[$$lcssa>>2]|0;
       $74 = ((($73)) + 36|0);
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       $76 = (invoke_ii($75|0,($$lcssa|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i6 = $76;
       }
      } else {
       $79 = HEAP32[$69>>2]|0;
       $$0$i$i$i$i6 = $79;
      }
      $80 = ($$0$i$i$i$i6|0)==(-1);
      if ($80) {
       HEAP32[$__b>>2] = 0;
       $187 = 1;
       break;
      } else {
       $$pre$i$i$i8 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i9 = ($$pre$i$i$i8|0)==(0|0);
       $187 = $phitmp$i$i$i9;
       break;
      }
     }
    } while(0);
    $81 = ($$pre$i3$i$i14$lcssa|0)==(0|0);
    do {
     if ($81) {
      label = 82;
     } else {
      $82 = ((($$pre$i3$i$i14$lcssa)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i3$i$i14$lcssa)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i3$i$i14$lcssa>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       __THREW__ = 0;
       $90 = (invoke_ii($89|0,($$pre$i3$i$i14$lcssa|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i12 = $90;
       }
      } else {
       $93 = HEAP32[$83>>2]|0;
       $$0$i$i1$i$i12 = $93;
      }
      $94 = ($$0$i$i1$i$i12|0)==(-1);
      if ($94) {
       HEAP32[$__e>>2] = 0;
       label = 82;
       break;
      } else {
       if ($187) {
        $$0 = $__kb;$__st$3 = $__status$0;
        break;
       } else {
        label = 84;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 82) {
     if ($187) {
      label = 84;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 84) {
     $176 = HEAP32[$__err>>2]|0;
     $177 = $176 | 2;
     HEAP32[$__err>>2] = $177;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $178 = ($$0|0)==($__ke|0);
     if ($178) {
      label = 88;
      break;
     }
     $179 = HEAP8[$__st$3>>0]|0;
     $180 = ($179<<24>>24)==(2);
     if ($180) {
      $$045 = $$0;
      break;
     }
     $181 = ((($$0)) + 12|0);
     $182 = ((($__st$3)) + 1|0);
     $$0 = $181;$__st$3 = $182;
    }
    if ((label|0) == 88) {
     $183 = HEAP32[$__err>>2]|0;
     $184 = $183 | 4;
     HEAP32[$__err>>2] = $184;
     $$045 = $__ke;
    }
    $185 = ($__stat_hold$sroa$0$1|0)==(0);
    if (!($185)) {
     $186 = $__stat_hold$sroa$0$1;
     _free($186);
    }
    STACKTOP = sp;return ($$045|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$0$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($__stat_hold$sroa$0$0|0)==(0);
 if (!($15)) {
  $16 = $__stat_hold$sroa$0$0;
  _free($16);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(550,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(388,($__loc|0),(33492|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(27493|0),((27519)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(388,($__loc|0),(33500|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP32[$$0$i>>2]|0;
    $30 = ($29|0)==($__ct|0);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 4|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$1 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (27493 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (27493 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$162 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$162 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$162 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($162) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($162) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(552,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = tempRet0;
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 33;
   } else {
    $126 = $__v;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $123;
    $130 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$130,$__err);
    $131 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($131) {
     $164 = 1;
    } else {
     $132 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $137 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $138 = ((($137)) + 36|0);
      $139 = HEAP32[$138>>2]|0;
      __THREW__ = 0;
      $140 = (invoke_ii($139|0,($$pre$i$i$i$lcssa|0))|0);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      if ($142) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $140;
      }
     } else {
      $143 = HEAP32[$133>>2]|0;
      $$0$i$i$i$i = $143;
     }
     $144 = ($$0$i$i$i$i|0)==(-1);
     if ($144) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;
     } else {
      $164 = 0;
     }
    }
    $145 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 58;
     } else {
      $146 = ((($$pre$i3$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i3$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i3$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i3$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i1$i$i = $157;
      }
      $158 = ($$0$i$i1$i$i|0)==(-1);
      if ($158) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($164) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($164) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    $161 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($161|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(553,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP16[$__v>>1] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(554,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(555,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$162 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$162 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$162 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($162) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($162) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(556,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = tempRet0;
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 33;
   } else {
    $126 = $__v;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $123;
    $130 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$130,$__err);
    $131 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($131) {
     $164 = 1;
    } else {
     $132 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $137 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $138 = ((($137)) + 36|0);
      $139 = HEAP32[$138>>2]|0;
      __THREW__ = 0;
      $140 = (invoke_ii($139|0,($$pre$i$i$i$lcssa|0))|0);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      if ($142) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $140;
      }
     } else {
      $143 = HEAP32[$133>>2]|0;
      $$0$i$i$i$i = $143;
     }
     $144 = ($$0$i$i$i$i|0)==(-1);
     if ($144) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;
     } else {
      $164 = 0;
     }
    }
    $145 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 58;
     } else {
      $146 = ((($$pre$i3$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i3$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i3$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i3$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i1$i$i = $157;
      }
      $158 = ($$0$i$i1$i$i|0)==(-1);
      if ($158) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($164) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($164) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    $161 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($161|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(557,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(388,($__loc|0),(33492|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(27493|0),((27525)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(388,($__loc|0),(33500|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP32[$$0$i>>2]|0;
    $43 = ($42|0)==($__ct|0);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 4|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$2 = -1;
   } else {
    $50 = (27493 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$2 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$2 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(558,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(549,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(559,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i5 = 0, $exitcond$i$i = 0, $exitcond$i$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(387,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(388,($0|0),(33492|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(27493|0),((27519)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i5 = 0;
     while(1) {
      $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
      if ($exitcond$i$i6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i5) + 1)|0;
      $__i$0$i$i5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(549,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 37;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i11 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$167 = 1;
        } else {
         $33 = ((($$pre$i$i$i11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 36;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$167 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;$167 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 26;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 36;
            break L20;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($167) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($167) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(549,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 36;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i30 = (($78) + -1)|0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(549,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 36;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 36;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 36;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 36) {
        $92 = ___cxa_find_matching_catch_2()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $__a$2;
       $121 = (($119) - ($120))|0;
       __THREW__ = 0;
       invoke_viii(549,($__buf|0),($121|0),0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 37;
       } else {
        $124 = HEAP8[$__buf>>0]|0;
        $125 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $126 = (invoke_i(560)|0);
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if ($128) {
         label = 37;
        } else {
         $129 = $124 & 1;
         $130 = ($129<<24>>24)==(0);
         $131 = $130 ? $29 : $125;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $132 = (invoke_iiiii(561,($131|0),($126|0),(27528|0),($vararg_buffer|0))|0);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          label = 37;
         } else {
          $135 = ($132|0)==(1);
          if (!($135)) {
           HEAP32[$__err>>2] = 4;
          }
          $136 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($136) {
           $169 = 1;
          } else {
           $137 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ($138|0)==($140|0);
           if ($141) {
            $142 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $143 = ((($142)) + 36|0);
            $144 = HEAP32[$143>>2]|0;
            __THREW__ = 0;
            $145 = (invoke_ii($144|0,($$pre$i$i$i$lcssa|0))|0);
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 37;
             break;
            } else {
             $$0$i$i$i$i = $145;
            }
           } else {
            $148 = HEAP32[$138>>2]|0;
            $$0$i$i$i$i = $148;
           }
           $149 = ($$0$i$i$i$i|0)==(-1);
           if ($149) {
            HEAP32[$__b>>2] = 0;
            $169 = 1;
           } else {
            $169 = 0;
           }
          }
          $150 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($150) {
            label = 63;
           } else {
            $151 = ((($$pre$i3$i$i)) + 12|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = ((($$pre$i3$i$i)) + 16|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($152|0)==($154|0);
            if ($155) {
             $156 = HEAP32[$$pre$i3$i$i>>2]|0;
             $157 = ((($156)) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              label = 37;
              break L18;
             } else {
              $$0$i$i1$i$i = $159;
             }
            } else {
             $162 = HEAP32[$152>>2]|0;
             $$0$i$i1$i$i = $162;
            }
            $163 = ($$0$i$i1$i$i|0)==(-1);
            if ($163) {
             HEAP32[$__e>>2] = 0;
             label = 63;
             break;
            } else {
             if ($169) {
              break;
             } else {
              label = 65;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 63) {
           if ($169) {
            label = 65;
           }
          }
          if ((label|0) == 65) {
           $164 = HEAP32[$__err>>2]|0;
           $165 = $164 | 2;
           HEAP32[$__err>>2] = $165;
          }
          $166 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($166|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      $94 = ___cxa_find_matching_catch_2()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$pre = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(388,($1|0),(33472|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $40 = ___cxa_find_matching_catch_2()|0;
     $41 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $41;$$01 = $40;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 1|0);
     $25 = ((($__nm)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__i$sroa$0$0$ph = $23 ? $24 : $26;
     $27 = ((($__nm)) + 4|0);
     $29 = $21;$35 = $26;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
     L11: while(1) {
      $28 = $29 & 1;
      $30 = ($28<<24>>24)==(0);
      $31 = HEAP32[$27>>2]|0;
      $32 = $29&255;
      $33 = $32 >>> 1;
      $34 = $30 ? $24 : $35;
      $36 = $30 ? $33 : $31;
      $37 = (($34) + ($36)|0);
      $38 = ($__i$sroa$0$0|0)==($37|0);
      if ($38) {
       label = 9;
       break;
      }
      $42 = HEAP8[$__i$sroa$0$0>>0]|0;
      $43 = HEAP32[$__s>>2]|0;
      $44 = ($43|0)==(0|0);
      do {
       if (!($44)) {
        $45 = ((($43)) + 24|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($43)) + 28|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if (!($49)) {
         $50 = ((($46)) + 1|0);
         HEAP32[$45>>2] = $50;
         HEAP8[$46>>0] = $42;
         break;
        }
        $51 = HEAP32[$43>>2]|0;
        $52 = ((($51)) + 52|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $42&255;
        __THREW__ = 0;
        $55 = (invoke_iii($53|0,($43|0),($54|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 18;
         break L11;
        }
        $58 = ($55|0)==(-1);
        if ($58) {
         HEAP32[$__s>>2] = 0;
        }
       }
      } while(0);
      $59 = ((($__i$sroa$0$0)) + 1|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $$pre3 = HEAP32[$25>>2]|0;
      $29 = $$pre;$35 = $$pre3;$__i$sroa$0$0 = $59;
     }
     if ((label|0) == 9) {
      $39 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$sroa$0$0 = $39;
      break L1;
     }
     else if ((label|0) == 18) {
      $60 = ___cxa_find_matching_catch_2()|0;
      $61 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$0 = $61;$$01 = $60;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27736>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27736+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27736+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27736+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27736+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27736+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,27742,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(564,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$01 = $__len;$$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$01 = $__len;$$1 = $5;
 }
 while(1) {
  $6 = HEAP8[$$01>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$1$lcssa = $$1;
   break;
  }
  $8 = ((($$01)) + 1|0);
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $6;
  $$01 = $8;$$1 = $9;
 }
 $10 = $__flags & 74;
 L10: do {
  switch ($10|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $11 = $__flags & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L10;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L10;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(562,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch_3(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33460)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33472)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 30;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99>>0] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 28|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 1|0);
     HEAP32[$__oe>>2] = $119;
     HEAP8[$118>>0] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch_2()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 30;
    } else {
     $$0$i$i6 = $82;$$01$i$i5 = $81;
     while(1) {
      $84 = ((($$0$i$i6)) + -1|0);
      $85 = ($$01$i$i5>>>0)<($84>>>0);
      if (!($85)) {
       break;
      }
      $86 = HEAP8[$$01$i$i5>>0]|0;
      $87 = HEAP8[$84>>0]|0;
      HEAP8[$$01$i$i5>>0] = $87;
      HEAP8[$84>>0] = $86;
      $88 = ((($$01$i$i5)) + 1|0);
      $$0$i$i6 = $84;$$01$i$i5 = $88;
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $79;$126 = $$pre;
     label = 30;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 30) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = ((($__iob)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>($4|0);
   $8 = (($6) - ($4))|0;
   $__ns$0 = $7 ? $8 : 0;
   $9 = $__op;
   $10 = (($9) - ($3))|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$0>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
    $16 = ($15|0)==($10|0);
    if (!($16)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $17 = ($__ns$0|0)>(0);
   do {
    if ($17) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
     $18 = HEAP8[$__sp>>0]|0;
     $19 = $18 & 1;
     $20 = ($19<<24>>24)==(0);
     $21 = ((($__sp)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($__sp)) + 1|0);
     $24 = $20 ? $23 : $22;
     $25 = HEAP32[$0>>2]|0;
     $26 = ((($25)) + 48|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     $28 = (invoke_iiii($27|0,($0|0),($24|0),($__ns$0|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $32 = ___cxa_find_matching_catch_2()|0;
      $33 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      ___resumeException($32|0);
      // unreachable;
     }
     $31 = ($28|0)==($__ns$0|0);
     if ($31) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $34 = (($2) - ($9))|0;
   $35 = ($34|0)>(0);
   if ($35) {
    $36 = HEAP32[$0>>2]|0;
    $37 = ((($36)) + 48|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
    $40 = ($39|0)==($34|0);
    if (!($40)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$5>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,27744,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(564,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27736>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27736+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27736+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27736+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27736+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27736+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,27742,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(564,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,27744,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(564,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,43215,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(560)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(565,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(560)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($__iob)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $31 = (invoke_iiiii(565,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = $34;
     $$pre1012 = $34;$__nbh$sroa$0$0 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(548);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $39 = $$pre;
     $$pre1012 = $39;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $40 = (($$pre1012) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$40,$__iob)|0);
  $42 = ($$pre1012|0)==($__nar|0);
  do {
   if ($42) {
    $54 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $43 = $__nc$2 << 1;
    $44 = (_malloc($43)|0);
    $45 = ($44|0)==(0|0);
    if ($45) {
     __THREW__ = 0;
     invoke_v(548);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $50 = $44;
    $54 = $$pre10;$__ob$0 = $44;$__obh$sroa$0$1 = $50;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $51 = (invoke_ii(387,($__iob|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $51;
     __THREW__ = 0;
     invoke_viiiiiii(566,($54|0),($41|0),($40|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
      $$0 = $67;$$02 = $68;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
     $57 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $57;
     $58 = HEAP32[$__op>>2]|0;
     $59 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $60 = (invoke_iiiiiii(567,($$byval_copy|0),($__ob$0|0),($58|0),($59|0),($__iob|0),($__fl|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $60;
      $63 = ($__obh$sroa$0$1|0)==(0);
      if (!($63)) {
       $64 = $__obh$sroa$0$1;
       _free($64);
      }
      $65 = ($__nbh$sroa$0$0|0)==(0);
      if (!($65)) {
       $66 = $__nbh$sroa$0$0;
       _free($66);
      }
      STACKTOP = sp;return ($60|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$0 = $48;$$02 = $49;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $69 = ($__obh$sroa$0$2|0)==(0);
  if (!($69)) {
   $70 = $__obh$sroa$0$2;
   _free($70);
  }
  $71 = ($__nbh$sroa$0$0|0)==(0);
  if ($71) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $72 = $__nbh$sroa$0$0;
   _free($72);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;$$2 = $$2$ph;
 while(1) {
  $11 = HEAP8[$$01>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $$2$lcssa = $$2;
   break;
  }
  $13 = ((($$01)) + 1|0);
  $14 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $11;
  $$01 = $13;$$2 = $14;
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $15 = $7 & 1;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $17 = $7 & 1;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $19 = $7 & 1;
   $20 = ($19|0)!=(0);
   if ($8) {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(568,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(562,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(562,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch_3(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa46 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33460)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33472)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 1|0);
      HEAP32[$__oe>>2] = $40;
      HEAP8[$39>>0] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 1|0);
      HEAP32[$__oe>>2] = $50;
      HEAP8[$49>>0] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(560)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(569,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(560)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(570,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch_2()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 32|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$__oe>>2] = $130;
       HEAP8[$129>>0] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 28|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 1|0);
      HEAP32[$__oe>>2] = $149;
      HEAP8[$148>>0] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;
     } else {
      $$0$i$i6 = $112;$$01$i$i5 = $111;
      while(1) {
       $114 = ((($$0$i$i6)) + -1|0);
       $115 = ($$01$i$i5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;
        break L28;
       }
       $116 = HEAP8[$$01$i$i5>>0]|0;
       $117 = HEAP8[$114>>0]|0;
       HEAP8[$$01$i$i5>>0] = $117;
       HEAP8[$114>>0] = $116;
       $118 = ((($$01$i$i5)) + 1|0);
       $$0$i$i6 = $114;$$01$i$i5 = $118;
      }
     }
    }
   } while(0);
   $__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa46 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 1|0);
    HEAP32[$__oe>>2] = $171;
    HEAP8[$170>>0] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 1|0);
    HEAP32[$__oe>>2] = $162;
    HEAP8[$161>>0] = $158;
    $163 = ((($__nf$2$lcssa46)) + 1|0);
    $__nf$3 = $163;
   }
   $173 = HEAP32[$__oe>>2]|0;
   $174 = HEAP32[$0>>2]|0;
   $175 = ((($174)) + 32|0);
   $176 = HEAP32[$175>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($176|0,($0|0),($__nf$3|0),($__ne|0),($173|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,27747,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(560)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(565,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(560)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $29 = (invoke_iiiii(565,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = $32;
     $$pre1012 = $32;$__nbh$sroa$0$0 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(548);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $37 = $$pre;
     $$pre1012 = $37;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $38 = (($$pre1012) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$38,$__iob)|0);
  $40 = ($$pre1012|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(548);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $48 = $42;
    $52 = $$pre10;$__ob$0 = $42;$__obh$sroa$0$1 = $48;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(387,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(566,($52|0),($39|0),($38|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $65;$$02 = $66;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(567,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($__obh$sroa$0$1|0)==(0);
      if (!($61)) {
       $62 = $__obh$sroa$0$1;
       _free($62);
      }
      $63 = ($__nbh$sroa$0$0|0)==(0);
      if (!($63)) {
       $64 = $__nbh$sroa$0$0;
       _free($64);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $67 = ($__obh$sroa$0$2|0)==(0);
  if (!($67)) {
   $68 = $__obh$sroa$0$2;
   _free($68);
  }
  $69 = ($__nbh$sroa$0$0|0)==(0);
  if ($69) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $70 = $__nbh$sroa$0$0;
   _free($70);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27749>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27749+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27749+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27749+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27749+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27749+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(388,($0|0),(33460|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$pre = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(388,($1|0),(33500|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $40;$$01 = $39;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 4|0);
     $25 = ((($__nm)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__i$sroa$0$0$ph = $23 ? $24 : $26;
     $28 = $21;$34 = $26;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
     while(1) {
      $27 = $28 & 1;
      $29 = ($27<<24>>24)==(0);
      $30 = HEAP32[$24>>2]|0;
      $31 = $28&255;
      $32 = $31 >>> 1;
      $33 = $29 ? $24 : $34;
      $35 = $29 ? $32 : $30;
      $36 = (($33) + ($35<<2)|0);
      $37 = ($__i$sroa$0$0|0)==($36|0);
      if ($37) {
       label = 9;
       break;
      }
      $41 = HEAP32[$__i$sroa$0$0>>2]|0;
      $42 = HEAP32[$__s>>2]|0;
      $43 = ($42|0)==(0|0);
      if (!($43)) {
       $44 = ((($42)) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($42)) + 28|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45|0)==($47|0);
       if ($48) {
        $49 = HEAP32[$42>>2]|0;
        $50 = ((($49)) + 52|0);
        $51 = HEAP32[$50>>2]|0;
        __THREW__ = 0;
        $52 = (invoke_iii($51|0,($42|0),($41|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         label = 18;
         break;
        } else {
         $$0$i$i = $52;
        }
       } else {
        $55 = ((($45)) + 4|0);
        HEAP32[$44>>2] = $55;
        HEAP32[$45>>2] = $41;
        $$0$i$i = $41;
       }
       $56 = ($$0$i$i|0)==(-1);
       if ($56) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $57 = ((($__i$sroa$0$0)) + 4|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $$pre3 = HEAP32[$25>>2]|0;
      $28 = $$pre;$34 = $$pre3;$__i$sroa$0$0 = $57;
     }
     if ((label|0) == 9) {
      $38 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$sroa$0$0 = $38;
      break L1;
     }
     else if ((label|0) == 18) {
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$0 = $59;$$01 = $58;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27736>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27736+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27736+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27736+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27736+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27736+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,27742,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(571,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0;
 var $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33492)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33500)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 4|0);
     HEAP32[$__oe>>2] = $119;
     HEAP32[$118>>2] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch_2()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80<<2)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 29;
    } else {
     $$0$i$i6 = $82;$$01$i$i5 = $81;
     while(1) {
      $84 = ((($$0$i$i6)) + -4|0);
      $85 = ($$01$i$i5>>>0)<($84>>>0);
      if (!($85)) {
       $$pre$phiZ2D = $79;$126 = $82;
       label = 29;
       break L1;
      }
      $86 = HEAP32[$$01$i$i5>>2]|0;
      $87 = HEAP32[$84>>2]|0;
      HEAP32[$$01$i$i5>>2] = $87;
      HEAP32[$84>>2] = $86;
      $88 = ((($$01$i$i5)) + 4|0);
      $$0$i$i6 = $84;$$01$i$i5 = $88;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124<<2)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch_2()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,27744,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(571,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27736>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27736+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27736+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27736+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27736+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27736+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,27742,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(571,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,27744,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(571,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,43215,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(560)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(565,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(560)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($__iob)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $31 = (invoke_iiiii(565,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = $34;
     $$pre810 = $34;$__nbh$sroa$0$0 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(548);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $39 = $$pre;
     $$pre810 = $39;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $40 = (($$pre810) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$40,$__iob)|0);
  $42 = ($$pre810|0)==($__nar|0);
  do {
   if ($42) {
    $54 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $43 = $__nc$2 << 3;
    $44 = (_malloc($43)|0);
    $45 = ($44|0)==(0|0);
    if ($45) {
     __THREW__ = 0;
     invoke_v(548);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $50 = $44;
    $54 = $$pre8;$__ob$0 = $44;$__obh$sroa$0$1 = $50;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $51 = (invoke_ii(387,($__iob|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $51;
     __THREW__ = 0;
     invoke_viiiiiii(572,($54|0),($41|0),($40|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
      $$0 = $67;$$02 = $68;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
     $57 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $57;
     $58 = HEAP32[$__op>>2]|0;
     $59 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $60 = (invoke_iiiiiii(573,($$byval_copy|0),($__ob$0|0),($58|0),($59|0),($__iob|0),($__fl|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $60;
      $63 = ($__obh$sroa$0$1|0)==(0);
      if (!($63)) {
       $64 = $__obh$sroa$0$1;
       _free($64);
      }
      $65 = ($__nbh$sroa$0$0|0)==(0);
      if (!($65)) {
       $66 = $__nbh$sroa$0$0;
       _free($66);
      }
      STACKTOP = sp;return ($60|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$0 = $48;$$02 = $49;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $69 = ($__obh$sroa$0$2|0)==(0);
  if (!($69)) {
   $70 = $__obh$sroa$0$2;
   _free($70);
  }
  $71 = ($__nbh$sroa$0$0|0)==(0);
  if ($71) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $72 = $__nbh$sroa$0$0;
   _free($72);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0;
 var $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa53 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33492)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,33500)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 4|0);
      HEAP32[$__oe>>2] = $40;
      HEAP32[$39>>2] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 44|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 4|0);
      HEAP32[$__oe>>2] = $50;
      HEAP32[$49>>2] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(560)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(569,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(560)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(570,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch_2()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 48|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90<<2)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;$188 = $92;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 4|0);
       HEAP32[$__oe>>2] = $130;
       HEAP32[$129>>2] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 44|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 4|0);
      HEAP32[$__oe>>2] = $149;
      HEAP32[$148>>2] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110<<2)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;$188 = $111;
     } else {
      $$0$i$i6 = $112;$$01$i$i5 = $111;
      while(1) {
       $114 = ((($$0$i$i6)) + -4|0);
       $115 = ($$01$i$i5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;$188 = $112;
        break L28;
       }
       $116 = HEAP32[$$01$i$i5>>2]|0;
       $117 = HEAP32[$114>>2]|0;
       HEAP32[$$01$i$i5>>2] = $117;
       HEAP32[$114>>2] = $116;
       $118 = ((($$01$i$i5)) + 4|0);
       $$0$i$i6 = $114;$$01$i$i5 = $118;
      }
     }
    }
   } while(0);
   $189 = $188;$__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $176 = $189;$__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa53 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 44|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 4|0);
    HEAP32[$__oe>>2] = $171;
    HEAP32[$170>>2] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $189 = $171;$__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 4|0);
    HEAP32[$__oe>>2] = $162;
    HEAP32[$161>>2] = $158;
    $163 = ((($__nf$2$lcssa53)) + 1|0);
    $176 = $162;$__nf$3 = $163;
   }
   $173 = HEAP32[$0>>2]|0;
   $174 = ((($173)) + 48|0);
   $175 = HEAP32[$174>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($175|0,($0|0),($__nf$3|0),($__ne|0),($176|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180<<2)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186<<2)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,27747,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(560)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(565,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(560)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $29 = (invoke_iiiii(565,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = $32;
     $$pre810 = $32;$__nbh$sroa$0$0 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(548);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $37 = $$pre;
     $$pre810 = $37;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $38 = (($$pre810) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$38,$__iob)|0);
  $40 = ($$pre810|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(548);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $48 = $42;
    $52 = $$pre8;$__ob$0 = $42;$__obh$sroa$0$1 = $48;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(387,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(572,($52|0),($39|0),($38|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $65;$$02 = $66;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(573,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($__obh$sroa$0$1|0)==(0);
      if (!($61)) {
       $62 = $__obh$sroa$0$1;
       _free($62);
      }
      $63 = ($__nbh$sroa$0$0|0)==(0);
      if (!($63)) {
       $64 = $__nbh$sroa$0$0;
       _free($64);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $67 = ($__obh$sroa$0$2|0)==(0);
  if (!($67)) {
   $68 = $__obh$sroa$0$2;
   _free($68);
  }
  $69 = ($__nbh$sroa$0$0|0)==(0);
  if ($69) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $70 = $__nbh$sroa$0$0;
   _free($70);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[27749>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[27749+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[27749+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[27749+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[27749+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[27749+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(388,($0|0),(33492|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,27967,(27975))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i27 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa116$lcssa = 0, $$lcssa116$lcssa119 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa121 = 0, $$lcssa123 = 0, $$lcssa126 = 0, $$lcssa127 = 0;
 var $$lcssa128 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i9 = 0, $$pre$i2$i$i22 = 0, $$pre$i2$i$i2240 = 0, $$pre$i2$i$i2241 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i25 = 0, $isascii1$i6 = 0, $or$cond = 0, $sext = 0, $tmp$i$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(388,($0|0),(33460|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($39|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $8 = ($$0$ph|0)!=($__fmte|0);
  $10 = $$pre;
  while(1) {
   $9 = ($10|0)==(0);
   $or$cond = $8 & $9;
   $11 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i9 = $11;
    break L4;
   }
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $189 = $13;$25 = 0;
   } else {
    $14 = ((($11)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($11)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15|0)==($17|0);
    if ($18) {
     $19 = HEAP32[$11>>2]|0;
     $20 = ((($19)) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (FUNCTION_TABLE_ii[$21 & 1023]($11)|0);
     $23 = ($22|0)==(-1);
     if ($23) {
      HEAP32[$__b>>2] = 0;
      $189 = 0;$25 = 0;
     } else {
      $189 = $13;$25 = $11;
     }
    } else {
     $189 = $13;$25 = $11;
    }
   }
   $24 = ($25|0)==(0|0);
   $26 = HEAP32[$__e>>2]|0;
   $27 = ($26|0)==(0|0);
   $28 = $26;
   do {
    if ($27) {
     $190 = $28;
     label = 14;
    } else {
     $29 = ((($26)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($26)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$26>>2]|0;
      $35 = ((($34)) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($26)|0);
      $38 = ($37|0)==(-1);
      if ($38) {
       HEAP32[$__e>>2] = 0;
       $190 = 0;
       label = 14;
       break;
      }
     }
     if ($24) {
      $191 = $26;$192 = $28;
     } else {
      $$lcssa115 = $25;
      label = 15;
      break L4;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    if ($24) {
     $$lcssa115 = $25;
     label = 15;
     break L4;
    } else {
     $191 = 0;$192 = $190;
    }
   }
   $41 = HEAP8[$$0$ph>>0]|0;
   $42 = HEAP32[$4>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
   $46 = ($45<<24>>24)==(37);
   if ($46) {
    $$lcssa112 = $189;$$lcssa116 = $25;$$lcssa123 = $192;
    label = 18;
    break;
   }
   $67 = HEAP8[$$0$ph>>0]|0;
   $isascii1$i = ($67<<24>>24)>(-1);
   if ($isascii1$i) {
    $68 = $67 << 24 >> 24;
    $69 = HEAP32[$7>>2]|0;
    $70 = (($69) + ($68<<1)|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71 & 8192;
    $73 = ($72<<16>>16)==(0);
    if (!($73)) {
     $$lcssa117 = $25;$$lcssa121 = $191;$$lcssa126 = $69;
     label = 27;
     break;
    }
   }
   $132 = ((($25)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($25)) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = HEAP32[$25>>2]|0;
    $138 = ((($137)) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_ii[$139 & 1023]($25)|0);
    $$0$i$i27 = $140;
   } else {
    $141 = HEAP8[$133>>0]|0;
    $142 = $141&255;
    $$0$i$i27 = $142;
   }
   $143 = $$0$i$i27&255;
   $144 = HEAP32[$4>>2]|0;
   $145 = ((($144)) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (FUNCTION_TABLE_iii[$146 & 1023]($4,$143)|0);
   $148 = HEAP8[$$0$ph>>0]|0;
   $149 = HEAP32[$4>>2]|0;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (FUNCTION_TABLE_iii[$151 & 1023]($4,$148)|0);
   $153 = ($147<<24>>24)==($152<<24>>24);
   if ($153) {
    $$lcssa118 = $25;$$lcssa127 = $132;$$lcssa128 = $134;
    label = 55;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $10 = 4;
  }
  L32: do {
   if ((label|0) == 18) {
    label = 0;
    $47 = ((($$0$ph)) + 1|0);
    $48 = ($47|0)==($__fmte|0);
    if ($48) {
     $$lcssa116$lcssa = $$lcssa116;
     label = 19;
     break L4;
    }
    $49 = HEAP8[$47>>0]|0;
    $50 = HEAP32[$4>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
    switch ($53<<24>>24) {
    case 48: case 69:  {
     $54 = ((($$0$ph)) + 2|0);
     $55 = ($54|0)==($__fmte|0);
     if ($55) {
      $$lcssa116$lcssa119 = $$lcssa116;
      label = 24;
      break L4;
     }
     $56 = HEAP8[$54>>0]|0;
     $57 = HEAP32[$4>>2]|0;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
     $66 = $47;$__cmd$0 = $60;$__opt$0 = $53;
     break;
    }
    default: {
     $66 = $$0$ph;$__cmd$0 = $53;$__opt$0 = 0;
    }
    }
    $61 = HEAP32[$this>>2]|0;
    $62 = ((($61)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$1>>2] = $$lcssa112;
    HEAP32[$2>>2] = $$lcssa123;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
    $64 = (FUNCTION_TABLE_iiiiiiiii[$63 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $64;
    $65 = ((($66)) + 2|0);
    $$0$ph$be = $65;
   }
   else if ((label|0) == 27) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 1|0);
     $74 = ($$3|0)==($__fmte|0);
     if ($74) {
      $$3$lcssa = $__fmte;
      break;
     }
     $75 = HEAP8[$$3>>0]|0;
     $isascii1$i6 = ($75<<24>>24)>(-1);
     if (!($isascii1$i6)) {
      $$3$lcssa = $$3;
      break;
     }
     $76 = $75 << 24 >> 24;
     $77 = (($$lcssa126) + ($76<<1)|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78 & 8192;
     $80 = ($79<<16>>16)==(0);
     if ($80) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
     }
    }
    $$pre$i$i$i18 = $$lcssa117;$$pre$i2$i$i22 = $$lcssa121;$95 = $$lcssa121;
    while(1) {
     $81 = ($$pre$i$i$i18|0)==(0|0);
     if ($81) {
      $93 = 0;
     } else {
      $82 = ((($$pre$i$i$i18)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i$i$i18)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i$i$i18>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i18)|0);
       $91 = ($90|0)==(-1);
       if ($91) {
        HEAP32[$__b>>2] = 0;
        $93 = 0;
       } else {
        $93 = $$pre$i$i$i18;
       }
      } else {
       $93 = $$pre$i$i$i18;
      }
     }
     $92 = ($93|0)==(0|0);
     $94 = ($95|0)==(0|0);
     do {
      if ($94) {
       $$pre$i2$i$i2241 = $$pre$i2$i$i22;
       label = 41;
      } else {
       $96 = ((($95)) + 12|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($95)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($97|0)==($99|0);
       if (!($100)) {
        if ($92) {
         $$pre$i2$i$i2240 = $$pre$i2$i$i22;$193 = $95;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $105 = ($104|0)==(-1);
       if ($105) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i2241 = 0;
        label = 41;
        break;
       } else {
        $106 = ($$pre$i2$i$i22|0)==(0|0);
        $tmp$i$i24 = $92 ^ $106;
        if ($tmp$i$i24) {
         $$pre$i2$i$i2240 = $$pre$i2$i$i22;$193 = $$pre$i2$i$i22;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
      }
     } while(0);
     if ((label|0) == 41) {
      label = 0;
      if ($92) {
       $$0$ph$be = $$3$lcssa;
       break L32;
      } else {
       $$pre$i2$i$i2240 = $$pre$i2$i$i2241;$193 = 0;
      }
     }
     $107 = ((($93)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($93)) + 16|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($108|0)==($110|0);
     if ($111) {
      $112 = HEAP32[$93>>2]|0;
      $113 = ((($112)) + 36|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (FUNCTION_TABLE_ii[$114 & 1023]($93)|0);
      $$0$i$i = $115;
     } else {
      $116 = HEAP8[$108>>0]|0;
      $117 = $116&255;
      $$0$i$i = $117;
     }
     $118 = $$0$i$i&255;
     $isascii1$i25 = ($118<<24>>24)>(-1);
     if (!($isascii1$i25)) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $sext = $$0$i$i << 24;
     $119 = $sext >> 24;
     $120 = HEAP32[$7>>2]|0;
     $121 = (($120) + ($119<<1)|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $122 & 8192;
     $124 = ($123<<16>>16)==(0);
     if ($124) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $125 = HEAP32[$107>>2]|0;
     $126 = HEAP32[$109>>2]|0;
     $127 = ($125|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$93>>2]|0;
      $129 = ((($128)) + 40|0);
      $130 = HEAP32[$129>>2]|0;
      (FUNCTION_TABLE_ii[$130 & 1023]($93)|0);
      $$pre$i$i$i18 = $93;$$pre$i2$i$i22 = $$pre$i2$i$i2240;$95 = $193;
      continue;
     } else {
      $131 = ((($125)) + 1|0);
      HEAP32[$107>>2] = $131;
      $$pre$i$i$i18 = $93;$$pre$i2$i$i22 = $$pre$i2$i$i2240;$95 = $193;
      continue;
     }
    }
   }
   else if ((label|0) == 55) {
    label = 0;
    $154 = HEAP32[$$lcssa127>>2]|0;
    $155 = HEAP32[$$lcssa128>>2]|0;
    $156 = ($154|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$$lcssa118>>2]|0;
     $158 = ((($157)) + 40|0);
     $159 = HEAP32[$158>>2]|0;
     (FUNCTION_TABLE_ii[$159 & 1023]($$lcssa118)|0);
    } else {
     $160 = ((($154)) + 1|0);
     HEAP32[$$lcssa127>>2] = $160;
    }
    $161 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $161;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 15) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa115;
 }
 else if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa;
 }
 else if ((label|0) == 24) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa119;
 }
 $162 = ($$pre$i$i$i9|0)==(0|0);
 if ($162) {
  $174 = 0;
 } else {
  $163 = ((($$pre$i$i$i9)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($$pre$i$i$i9)) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($164|0)==($166|0);
  if ($167) {
   $168 = HEAP32[$$pre$i$i$i9>>2]|0;
   $169 = ((($168)) + 36|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i$i$i9)|0);
   $172 = ($171|0)==(-1);
   if ($172) {
    HEAP32[$__b>>2] = 0;
    $174 = 0;
   } else {
    $174 = $$pre$i$i$i9;
   }
  } else {
   $174 = $$pre$i$i$i9;
  }
 }
 $173 = ($174|0)==(0|0);
 $175 = HEAP32[$__e>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if ($176) {
   label = 70;
  } else {
   $177 = ((($175)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ((($175)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($178|0)==($180|0);
   if ($181) {
    $182 = HEAP32[$175>>2]|0;
    $183 = ((($182)) + 36|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (FUNCTION_TABLE_ii[$184 & 1023]($175)|0);
    $186 = ($185|0)==(-1);
    if ($186) {
     HEAP32[$__e>>2] = 0;
     label = 70;
     break;
    }
   }
   if (!($173)) {
    label = 71;
   }
  }
 } while(0);
 if ((label|0) == 70) {
  if ($173) {
   label = 71;
  }
 }
 if ((label|0) == 71) {
  $187 = HEAP32[$__err>>2]|0;
  $188 = $187 | 2;
  HEAP32[$__err>>2] = $188;
 }
 STACKTOP = sp;return ($174|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33460|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33460|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33460|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$80 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$80 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $78 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $78 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $78 = $$pre$i$i$i3;
          break;
         }
        } else {
         $78 = $65;
        }
       }
      } while(0);
      $77 = ($78|0)==(0|0);
      $79 = ($80|0)==(0|0);
      if ($79) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
      } else {
       $81 = ((($80)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($80)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$80>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$92 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
       }
      }
      $91 = ($92|0)==(0|0);
      $tmp$i$i9 = $77 ^ $91;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10&255;
      $isascii1$i12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$2 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$2 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $143 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $143 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $143 = $$pre$i$i$i16;
         break;
        }
       } else {
        $143 = $$lcssa;
       }
      }
     } while(0);
     $142 = ($143|0)==(0|0);
     $144 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i2$i$i20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i2$i$i20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($142) {
        $$2 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($142)) {
       $$2 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(388,($1|0),(33460|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,27975,(27983))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,27983,(27991))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,27991,(28002))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,28002,(28007))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,28007,(28015))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i2$i$i6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i2$i$i6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($68)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($68) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $71 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $71 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $71 = $$pre$i$i$i2;
       break;
      }
     } else {
      $71 = $60;
     }
    }
   } while(0);
   $70 = ($71|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i2$i$i611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i2$i$i611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($70) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($70)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30496]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30496)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30504]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30504)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 33532;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((33700)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((574|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(575,(33532|0),(28015|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(575,((33544)|0),(28022|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(575,((33556)|0),(28029|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(575,((33568)|0),(28037|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(575,((33580)|0),(28047|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(575,((33592)|0),(28056|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(575,((33604)|0),(28063|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(575,((33616)|0),(28072|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(575,((33628)|0),(28076|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(575,((33640)|0),(28080|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(575,((33652)|0),(28084|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(575,((33664)|0),(28088|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(575,((33676)|0),(28092|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(575,((33688)|0),(28096|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[8425] = 33532;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[8425]|0;
 return ($41|0);
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33688));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33676));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33664));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33652));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33640));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33628));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33616));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33604));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33592));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33580));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33568));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33556));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33544));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33532);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30512]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30512)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30520]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30520)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 33704;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((33992)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((576|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(575,(33704|0),(28100|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(575,((33716)|0),(28108|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(575,((33728)|0),(28117|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(575,((33740)|0),(28123|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(575,((33752)|0),(28129|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(575,((33764)|0),(28133|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(575,((33776)|0),(28138|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(575,((33788)|0),(28143|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(575,((33800)|0),(28150|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(575,((33812)|0),(28160|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(575,((33824)|0),(28168|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(575,((33836)|0),(28177|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(575,((33848)|0),(28186|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(575,((33860)|0),(28190|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(575,((33872)|0),(28194|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(575,((33884)|0),(28198|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33896)|0),(28129|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33908)|0),(28202|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33920)|0),(28206|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33932)|0),(28210|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33944)|0),(28214|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33956)|0),(28218|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33968)|0),(28222|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(575,((33980)|0),(28226|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[8498] = 33704;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[8498]|0;
 return ($61|0);
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33980));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33968));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33956));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33944));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33932));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33920));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33908));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33896));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33884));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33872));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33860));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33848));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33836));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33824));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33812));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33800));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33788));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33776));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33764));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33752));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33740));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33728));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((33716));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33704);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30528]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30528)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30536]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30536)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 33996;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((34284)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((577|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(575,(33996|0),(28230|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(575,((34008)|0),(28233|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[8571] = 33996;
      break;
     }
    }
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[8571]|0;
 return ($17|0);
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34272));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34260));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34248));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34236));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34224));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34212));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34200));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34188));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34176));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34164));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34152));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34140));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34128));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34116));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34104));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34092));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34080));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34068));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34056));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34044));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34032));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34020));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((34008));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33996);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30544]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30544)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(578,(34288|0),(28236|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((382|0),(34288|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (34288|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30552]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30552)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(578,(34300|0),(28257|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((382|0),(34300|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (34300|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30560]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30560)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(578,(34312|0),(28269|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((382|0),(34312|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (34312|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30568]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30568)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(578,(34324|0),(28278|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((382|0),(34324|0),(___dso_handle|0))|0);
     break;
    }
   }
  }
 } while(0);
 return (34324|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,6556,(6588))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i21 = 0, $$0$i$i$i$i6 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i12 = 0, $$0$i$i1$i$i27 = 0, $$0$i$i18 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa118$lcssa = 0, $$lcssa118$lcssa121 = 0;
 var $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i14 = 0, $$pre$i3$i$i1445 = 0, $$pre$i3$i$i1446 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond = 0, $phitmp$i4$i$i15 = 0, $tmp$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(388,($0|0),(33492|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $7 = ($$0$ph|0)!=($__fmte|0);
  $9 = $$pre;
  while(1) {
   $8 = ($9|0)==(0);
   $or$cond = $7 & $8;
   $10 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i23 = $10;
    break L4;
   }
   $11 = ($10|0)==(0|0);
   $12 = $10;
   if ($11) {
    $126 = 0;$182 = $12;$183 = 1;
   } else {
    $13 = ((($10)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($10)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)==($16|0);
    if ($17) {
     $18 = HEAP32[$10>>2]|0;
     $19 = ((($18)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (FUNCTION_TABLE_ii[$20 & 1023]($10)|0);
     $$0$i$i$i$i = $21;
    } else {
     $22 = HEAP32[$14>>2]|0;
     $$0$i$i$i$i = $22;
    }
    $23 = ($$0$i$i$i$i|0)==(-1);
    if ($23) {
     HEAP32[$__b>>2] = 0;
     $126 = 0;$182 = 0;$183 = 1;
    } else {
     $126 = $10;$182 = $12;$183 = 0;
    }
   }
   $24 = HEAP32[$__e>>2]|0;
   $25 = ($24|0)==(0|0);
   $26 = $24;
   do {
    if ($25) {
     $$ph = $26;
     label = 17;
    } else {
     $27 = ((($24)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($24)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28|0)==($30|0);
     if ($31) {
      $32 = HEAP32[$24>>2]|0;
      $33 = ((($32)) + 36|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_ii[$34 & 1023]($24)|0);
      $$0$i$i1$i$i = $35;
     } else {
      $36 = HEAP32[$28>>2]|0;
      $$0$i$i1$i$i = $36;
     }
     $37 = ($$0$i$i1$i$i|0)==(-1);
     if ($37) {
      HEAP32[$__e>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($183) {
       $184 = $24;$185 = $26;
       break;
      } else {
       $$lcssa117 = $126;
       label = 19;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($183) {
     $$lcssa117 = $126;
     label = 19;
     break L4;
    } else {
     $184 = 0;$185 = $$ph;
    }
   }
   $40 = HEAP32[$$0$ph>>2]|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ((($41)) + 52|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if ($45) {
    $$lcssa114 = $182;$$lcssa118 = $126;$$lcssa125 = $185;
    label = 22;
    break;
   }
   $66 = HEAP32[$$0$ph>>2]|0;
   $67 = HEAP32[$4>>2]|0;
   $68 = ((($67)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($4,8192,$66)|0);
   if ($70) {
    $$lcssa119 = $126;$$lcssa123 = $184;
    label = 30;
    break;
   }
   $125 = ((($126)) + 12|0);
   $127 = HEAP32[$125>>2]|0;
   $128 = ((($126)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$126>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 1023]($126)|0);
    $$0$i$i18 = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i18 = $135;
   }
   $136 = HEAP32[$4>>2]|0;
   $137 = ((($136)) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_iii[$138 & 1023]($4,$$0$i$i18)|0);
   $140 = HEAP32[$$0$ph>>2]|0;
   $141 = HEAP32[$4>>2]|0;
   $142 = ((($141)) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (FUNCTION_TABLE_iii[$143 & 1023]($4,$140)|0);
   $145 = ($139|0)==($144|0);
   if ($145) {
    $$lcssa120 = $126;$$lcssa128 = $125;$$lcssa129 = $128;
    label = 59;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $9 = 4;
  }
  L36: do {
   if ((label|0) == 22) {
    label = 0;
    $46 = ((($$0$ph)) + 4|0);
    $47 = ($46|0)==($__fmte|0);
    if ($47) {
     $$lcssa118$lcssa = $$lcssa118;
     label = 23;
     break L4;
    }
    $48 = HEAP32[$46>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ((($49)) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
    switch ($52<<24>>24) {
    case 48: case 69:  {
     $53 = ((($$0$ph)) + 8|0);
     $54 = ($53|0)==($__fmte|0);
     if ($54) {
      $$lcssa118$lcssa121 = $$lcssa118;
      label = 28;
      break L4;
     }
     $55 = HEAP32[$53>>2]|0;
     $56 = HEAP32[$4>>2]|0;
     $57 = ((($56)) + 52|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
     $65 = $46;$__cmd$0 = $59;$__opt$0 = $52;
     break;
    }
    default: {
     $65 = $$0$ph;$__cmd$0 = $52;$__opt$0 = 0;
    }
    }
    $60 = HEAP32[$this>>2]|0;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$1>>2] = $$lcssa114;
    HEAP32[$2>>2] = $$lcssa125;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
    $63 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $63;
    $64 = ((($65)) + 8|0);
    $$0$ph$be = $64;
   }
   else if ((label|0) == 30) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 4|0);
     $71 = ($$3|0)==($__fmte|0);
     if ($71) {
      $$3$lcssa = $__fmte;
      break;
     }
     $72 = HEAP32[$$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($4,8192,$72)|0);
     if ($76) {
      $$0$pn = $$3;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$i$i8 = $$lcssa119;$$pre$i3$i$i14 = $$lcssa123;$90 = $$lcssa123;
    while(1) {
     $77 = ($$pre$i$i$i8|0)==(0|0);
     if ($77) {
      $102 = 1;$104 = 0;
     } else {
      $78 = ((($$pre$i$i$i8)) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($$pre$i$i$i8)) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$$pre$i$i$i8>>2]|0;
       $84 = ((($83)) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$i$i$i8)|0);
       $$0$i$i$i$i6 = $86;
      } else {
       $87 = HEAP32[$79>>2]|0;
       $$0$i$i$i$i6 = $87;
      }
      $88 = ($$0$i$i$i$i6|0)==(-1);
      if ($88) {
       HEAP32[$__b>>2] = 0;
       $102 = 1;$104 = 0;
      } else {
       $102 = 0;$104 = $$pre$i$i$i8;
      }
     }
     $89 = ($90|0)==(0|0);
     do {
      if ($89) {
       $$pre$i3$i$i1446 = $$pre$i3$i$i14;
       label = 46;
      } else {
       $91 = ((($90)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($90)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$90>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
        $$0$i$i1$i$i12 = $99;
       } else {
        $100 = HEAP32[$92>>2]|0;
        $$0$i$i1$i$i12 = $100;
       }
       $101 = ($$0$i$i1$i$i12|0)==(-1);
       if ($101) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i1446 = 0;
        label = 46;
        break;
       } else {
        $phitmp$i4$i$i15 = ($$pre$i3$i$i14|0)==(0|0);
        $tmp$i$i17 = $102 ^ $phitmp$i4$i$i15;
        if ($tmp$i$i17) {
         $$pre$i3$i$i1445 = $$pre$i3$i$i14;$186 = $$pre$i3$i$i14;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 46) {
      label = 0;
      if ($102) {
       $$0$ph$be = $$3$lcssa;
       break L36;
      } else {
       $$pre$i3$i$i1445 = $$pre$i3$i$i1446;$186 = 0;
      }
     }
     $103 = ((($104)) + 12|0);
     $105 = HEAP32[$103>>2]|0;
     $106 = ((($104)) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     if ($108) {
      $109 = HEAP32[$104>>2]|0;
      $110 = ((($109)) + 36|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (FUNCTION_TABLE_ii[$111 & 1023]($104)|0);
      $$0$i$i = $112;
     } else {
      $113 = HEAP32[$105>>2]|0;
      $$0$i$i = $113;
     }
     $114 = HEAP32[$4>>2]|0;
     $115 = ((($114)) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($4,8192,$$0$i$i)|0);
     if (!($117)) {
      $$0$ph$be = $$3$lcssa;
      break L36;
     }
     $118 = HEAP32[$103>>2]|0;
     $119 = HEAP32[$106>>2]|0;
     $120 = ($118|0)==($119|0);
     if ($120) {
      $121 = HEAP32[$104>>2]|0;
      $122 = ((($121)) + 40|0);
      $123 = HEAP32[$122>>2]|0;
      (FUNCTION_TABLE_ii[$123 & 1023]($104)|0);
      $$pre$i$i$i8 = $104;$$pre$i3$i$i14 = $$pre$i3$i$i1445;$90 = $186;
      continue;
     } else {
      $124 = ((($118)) + 4|0);
      HEAP32[$103>>2] = $124;
      $$pre$i$i$i8 = $104;$$pre$i3$i$i14 = $$pre$i3$i$i1445;$90 = $186;
      continue;
     }
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    $146 = HEAP32[$$lcssa128>>2]|0;
    $147 = HEAP32[$$lcssa129>>2]|0;
    $148 = ($146|0)==($147|0);
    if ($148) {
     $149 = HEAP32[$$lcssa120>>2]|0;
     $150 = ((($149)) + 40|0);
     $151 = HEAP32[$150>>2]|0;
     (FUNCTION_TABLE_ii[$151 & 1023]($$lcssa120)|0);
    } else {
     $152 = ((($146)) + 4|0);
     HEAP32[$$lcssa128>>2] = $152;
    }
    $153 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $153;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa117;
 }
 else if ((label|0) == 23) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa;
 }
 else if ((label|0) == 28) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa121;
 }
 $154 = ($$pre$i$i$i23|0)==(0|0);
 if ($154) {
  $181 = 0;$187 = 1;
 } else {
  $155 = ((($$pre$i$i$i23)) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($$pre$i$i$i23)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = HEAP32[$$pre$i$i$i23>>2]|0;
   $161 = ((($160)) + 36|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (FUNCTION_TABLE_ii[$162 & 1023]($$pre$i$i$i23)|0);
   $$0$i$i$i$i21 = $163;
  } else {
   $164 = HEAP32[$156>>2]|0;
   $$0$i$i$i$i21 = $164;
  }
  $165 = ($$0$i$i$i$i21|0)==(-1);
  if ($165) {
   HEAP32[$__b>>2] = 0;
   $181 = 0;$187 = 1;
  } else {
   $181 = $$pre$i$i$i23;$187 = 0;
  }
 }
 $166 = HEAP32[$__e>>2]|0;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   label = 77;
  } else {
   $168 = ((($166)) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($166)) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($169|0)==($171|0);
   if ($172) {
    $173 = HEAP32[$166>>2]|0;
    $174 = ((($173)) + 36|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_ii[$175 & 1023]($166)|0);
    $$0$i$i1$i$i27 = $176;
   } else {
    $177 = HEAP32[$169>>2]|0;
    $$0$i$i1$i$i27 = $177;
   }
   $178 = ($$0$i$i1$i$i27|0)==(-1);
   if ($178) {
    HEAP32[$__e>>2] = 0;
    label = 77;
    break;
   } else {
    if ($187) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 77) {
  if ($187) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $179 = HEAP32[$__err>>2]|0;
  $180 = $179 | 2;
  HEAP32[$__err>>2] = $180;
 }
 STACKTOP = sp;return ($181|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33492|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33492|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(388,($0|0),(33492|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$2 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$74 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$74 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $73 = ($74|0)==(0|0);
    do {
     if ($73) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = 0;$87 = 1;
     } else {
      $75 = ((($74)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($74)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$74>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$150 = 0;$87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($104)) {
     $$2 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i3$i$i25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i3$i$i25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$2 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$2 = $__r$0$lcssa;
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(388,($1|0),(33492|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,6588,(6620))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,6620,(6652))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,6652,(6696))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,6696,(6716))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,6716,(6748))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 1023]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i3$i$i9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i3$i$i9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i3$i$i915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i3$i$i915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30576]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30576)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30584]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30584)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 34344;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((34512)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((579|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(580,(34344|0),(6748|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(580,((34356)|0),(6776|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(580,((34368)|0),(6804|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(580,((34380)|0),(6836|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(580,((34392)|0),(6876|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(580,((34404)|0),(6912|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(580,((34416)|0),(6940|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(580,((34428)|0),(6976|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(580,((34440)|0),(6992|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(580,((34452)|0),(7008|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(580,((34464)|0),(7024|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(580,((34476)|0),(7040|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(580,((34488)|0),(7056|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(580,((34500)|0),(7072|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[8628] = 34344;
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[8628]|0;
 return ($41|0);
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34500));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34488));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34476));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34464));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34452));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34440));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34428));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34416));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34404));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34392));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34380));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34368));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34356));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(34344);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30592]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30592)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30600]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30600)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 34516;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((34804)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((581|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(580,(34516|0),(7088|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(580,((34528)|0),(7120|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(580,((34540)|0),(7156|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(580,((34552)|0),(7180|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(580,((34564)|0),(7204|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(580,((34576)|0),(7220|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(580,((34588)|0),(7240|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(580,((34600)|0),(7260|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(580,((34612)|0),(7288|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(580,((34624)|0),(7328|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(580,((34636)|0),(7360|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(580,((34648)|0),(7396|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(580,((34660)|0),(7432|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(580,((34672)|0),(7448|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(580,((34684)|0),(7464|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(580,((34696)|0),(7480|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34708)|0),(7204|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34720)|0),(7496|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34732)|0),(7512|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34744)|0),(7528|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34756)|0),(7544|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34768)|0),(7560|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34780)|0),(7576|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(580,((34792)|0),(7592|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[8701] = 34516;
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[8701]|0;
 return ($61|0);
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34792));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34780));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34768));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34756));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34744));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34732));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34720));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34708));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34696));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34684));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34672));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34660));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34648));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34636));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34624));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34612));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34600));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34588));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34576));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34564));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34552));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34540));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34528));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(34516);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30608]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30608)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[30616]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire(30616)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 34808;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((35096)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((582|0),(0|0),(___dso_handle|0))|0);
     }
    }
    __THREW__ = 0;
    (invoke_iii(580,(34808|0),(7608|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(580,((34820)|0),(7620|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[8774] = 34808;
      break;
     }
    }
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[8774]|0;
 return ($17|0);
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35084));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35072));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35060));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35048));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35036));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35024));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35012));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((35000));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34988));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34976));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34964));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34952));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34940));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34928));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34916));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34904));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34892));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34880));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34868));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34856));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34844));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34832));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((34820));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(34808);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30624]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30624)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(583,(7632|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(584,(35100|0),(7632|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((585|0),(35100|0),(___dso_handle|0))|0);
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (35100|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30632]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30632)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(583,(7716|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(584,(35112|0),(7716|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((585|0),(35112|0),(___dso_handle|0))|0);
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (35112|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30640]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30640)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(583,(7764|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(584,(35124|0),(7764|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((585|0),(35124|0),(___dso_handle|0))|0);
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (35124|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30648]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30648)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(583,(7800|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(584,(35136|0),(7800|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((585|0),(35136|0),(___dso_handle|0))|0);
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (35136|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(560)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(586,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch_3(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$sroa$02$0$i = 0, $$0$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$$sroa$02$0$i = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP8[$$0$i$i>>0]|0;
  $8 = ($$sroa$02$0$i|0)==(0|0);
  do {
   if ($8) {
    $$sroa$02$1$i = 0;
   } else {
    $9 = ((($$sroa$02$0$i)) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($$sroa$02$0$i)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10|0)==($12|0);
    if ($13) {
     $15 = HEAP32[$$sroa$02$0$i>>2]|0;
     $16 = ((($15)) + 52|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $7&255;
     $19 = (FUNCTION_TABLE_iii[$17 & 1023]($$sroa$02$0$i,$18)|0);
     $20 = ($19|0)==(-1);
     $$$sroa$02$0$i = $20 ? 0 : $$sroa$02$0$i;
     $$sroa$02$1$i = $$$sroa$02$0$i;
     break;
    } else {
     $14 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $14;
     HEAP8[$10>>0] = $7;
     $$sroa$02$1$i = $$sroa$02$0$i;
     break;
    }
   }
  } while(0);
  $21 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $21;$$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;return ($$sroa$02$0$i$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $__nb;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$this>>2]|0;
 $8 = (_strftime_l(($__nb|0),($6|0),($fmt|0),($__tm|0),($7|0))|0);
 $9 = (($__nb) + ($8)|0);
 HEAP32[$__ne>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$sroa$02$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$$sroa$02$0$i = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP32[$$0$i$i>>2]|0;
  $8 = ($$sroa$02$0$i|0)==(0|0);
  if ($8) {
   $$sroa$02$1$i = 0;
  } else {
   $9 = ((($$sroa$02$0$i)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($$sroa$02$0$i)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $14 = HEAP32[$$sroa$02$0$i>>2]|0;
    $15 = ((($14)) + 52|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iii[$16 & 1023]($$sroa$02$0$i,$7)|0);
    $$0$i$i$i$i = $17;
   } else {
    $18 = ((($10)) + 4|0);
    HEAP32[$9>>2] = $18;
    HEAP32[$10>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $19 = ($$0$i$i$i$i|0)==(-1);
   $$$sroa$02$0$i = $19 ? 0 : $$sroa$02$0$i;
   $$sroa$02$1$i = $$$sroa$02$0$i;
  }
  $20 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $20;$$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;return ($$sroa$02$0$i$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $__wb;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$this>>2]|0;
 $10 = (_uselocale($9)|0);
 __THREW__ = 0;
 $11 = (invoke_iiiii(587,($__wb|0),($__nb|0),($8|0),($mb|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $21 = ($10|0)==(0|0);
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(562,($10|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
  }
  ___resumeException($19|0);
  // unreachable;
 }
 $14 = ($10|0)==(0|0);
 if (!($14)) {
  __THREW__ = 0;
  (invoke_ii(562,($10|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  }
 }
 $26 = ($11|0)==(-1);
 if ($26) {
  __ZNSt3__121__throw_runtime_errorEPKc(28549);
  // unreachable;
 } else {
  $27 = (($__wb) + ($11<<2)|0);
  HEAP32[$__we>>2] = $27;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(588,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(1568|0),(365|0));
  // unreachable;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre16 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (589);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(387,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$114 = $33;$$1212 = $34;$108 = 589;$109 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(388,($__loc|0),(33460|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(590,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(28798|0),((28808)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = (($23) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(548);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $__h$sroa$0$0 = $29;
         } else {
          $__h$sroa$0$1 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $__h$sroa$0$1 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $41 = HEAP8[$__neg>>0]|0;
         $42 = ($41<<24>>24)==(0);
         if ($42) {
          $__nc$1 = $__nc$0;
         } else {
          $43 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $43;
         }
         $44 = ((($__atoms)) + 10|0);
         $45 = $__atoms;
         $47 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $46 = ($__w$0>>>0)<($47>>>0);
          if (!($46)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $50 = HEAP8[$__w$0>>0]|0;
          $$0$i = $__atoms;
          while(1) {
           $51 = ($$0$i|0)==($44|0);
           if ($51) {
            $$0$lcssa$i = $44;
            break;
           }
           $52 = HEAP8[$$0$i>>0]|0;
           $53 = ($52<<24>>24)==($50<<24>>24);
           if ($53) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $54 = ((($$0$i)) + 1|0);
           $$0$i = $54;
          }
          $55 = $$0$lcssa$i;
          $56 = (($55) - ($45))|0;
          $57 = (28798 + ($56)|0);
          $58 = HEAP8[$57>>0]|0;
          HEAP8[$__nc$2>>0] = $58;
          $59 = ((($__w$0)) + 1|0);
          $60 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $47 = $$pre;$__nc$2 = $60;$__w$0 = $59;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $48 = (_sscanf($__nbuf,28809,$vararg_buffer)|0);
         $49 = ($48|0)==(1);
         if (!($49)) {
          __THREW__ = 0;
          invoke_vi(591,(28813|0));
          $61 = __THREW__; __THREW__ = 0;
          $62 = $61&1;
          if ($62) {
           $__h$sroa$0$0 = $__h$sroa$0$1;
           break;
          }
         }
         $63 = ($__h$sroa$0$1|0)==(0);
         if (!($63)) {
          $64 = $__h$sroa$0$1;
          _free($64);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch_2()|0;
       $38 = tempRet0;
       $39 = ($__h$sroa$0$0|0)==(0);
       if ($39) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $40 = $__h$sroa$0$0;
       _free($40);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $65 = HEAP32[$__b>>2]|0;
     $66 = ($65|0)==(0|0);
     do {
      if ($66) {
       $80 = 0;
      } else {
       $67 = ((($65)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($65)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = HEAP32[$65>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($65|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 10;
         break L4;
        }
        $78 = ($75|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $80 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $80 = $$pre$i$i$i;
         break;
        }
       } else {
        $80 = $65;
       }
      }
     } while(0);
     $79 = ($80|0)==(0|0);
     $81 = HEAP32[$__e>>2]|0;
     $82 = ($81|0)==(0|0);
     do {
      if ($82) {
       label = 39;
      } else {
       $83 = ((($81)) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($81)) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)==($86|0);
       if ($87) {
        $88 = HEAP32[$81>>2]|0;
        $89 = ((($88)) + 36|0);
        $90 = HEAP32[$89>>2]|0;
        __THREW__ = 0;
        $91 = (invoke_ii($90|0,($81|0))|0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         label = 10;
         break L4;
        }
        $94 = ($91|0)==(-1);
        if ($94) {
         HEAP32[$__e>>2] = 0;
         label = 39;
         break;
        }
       }
       if (!($79)) {
        label = 40;
       }
      }
     } while(0);
     if ((label|0) == 39) {
      if ($79) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $95 = HEAP32[$__err>>2]|0;
      $96 = $95 | 2;
      HEAP32[$__err>>2] = $96;
     }
     $97 = HEAP32[$__b>>2]|0;
     $98 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($98)|0);
     $99 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $100 = ($99|0)==(0|0);
     if (!($100)) {
      $101 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($101|0,($99|0));
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       $104 = ___cxa_find_matching_catch_3(0|0)|0;
       $105 = tempRet0;
       ___clang_call_terminate($104);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($97|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $106 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
  $$pre8 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $107 = ($$pre8|0)==(0|0);
  if ($107) {
   $$115 = $$0;$$1213 = $$01;
  } else {
   $$pre16 = HEAP32[$2>>2]|0;
   $$114 = $$0;$$1212 = $$01;$108 = $$pre16;$109 = $$pre8;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($108|0,($109|0));
  $110 = __THREW__; __THREW__ = 0;
  $111 = $110&1;
  if ($111) {
   $112 = ___cxa_find_matching_catch_3(0|0)|0;
   $113 = tempRet0;
   ___clang_call_terminate($112);
   // unreachable;
  } else {
   $$115 = $$114;$$1213 = $$1212;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i109 = 0, $$0$i$i112 = 0, $$0$i$i129 = 0, $$0$i$i136 = 0, $$0$i$i145 = 0, $$0$i$i155 = 0, $$0$i$i172 = 0, $$0$i$i57 = 0, $$0$i$i60 = 0, $$0$i$i73 = 0, $$0$i$i80 = 0, $$0$i$i83 = 0, $$0$i$i90 = 0, $$10 = 0, $$lcssa = 0, $$lcssa392 = 0, $$lcssa394 = 0, $$phi$trans$insert = 0, $$phi$trans$insert301 = 0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0, $$pre$i$i$i159 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i47 = 0, $$pre$i$i$i63 = 0, $$pre$i$i$i95 = 0, $$pre$i2$i$i123 = 0, $$pre$i2$i$i163 = 0, $$pre$i2$i$i163283 = 0, $$pre$i2$i$i163285 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180295 = 0, $$pre$i2$i$i180296 = 0, $$pre$i2$i$i67 = 0, $$pre$i2$i$i67305 = 0, $$pre$i2$i$i67307 = 0, $$pre$i2$i$i99 = 0, $$pre$i2$i$i99291$ph = 0;
 var $$pre$i2$i$i99291310 = 0, $$pre288 = 0, $$pre290 = 0, $$pre293 = 0, $$pre294 = 0, $$pre298 = 0, $$pre299 = 0, $$pre300 = 0, $$pre302 = 0, $$pre303 = 0, $$pre304 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i29 = 0;
 var $__i$0$i$i32 = 0, $__i$0$i$i36 = 0, $__i$0$i$i41 = 0, $__ng$0 = 0, $__ng$0$lcssa393 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa = 0, $__trailing_sign$0 = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i30 = 0, $exitcond$i$i33 = 0, $exitcond$i$i37 = 0, $exitcond$i$i42 = 0, $isascii1$i = 0, $isascii1$i153 = 0, $isascii1$i186 = 0, $isascii1$i76 = 0, $isascii1$i88 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0;
 var $or$cond25 = 0, $sext = 0, $sext239 = 0, $sext240 = 0, $sext241 = 0, $switch = 0, $tmp$i$i101 = 0, $tmp$i$i165 = 0, $tmp$i$i182 = 0, $tmp$i$i69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (589);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($__i$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i29) + 1)|0;
  $__i$0$i$i29 = $7;
 }
 $__i$0$i$i32 = 0;
 while(1) {
  $exitcond$i$i33 = ($__i$0$i$i32|0)==(3);
  if ($exitcond$i$i33) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i32<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i32) + 1)|0;
  $__i$0$i$i32 = $9;
 }
 $__i$0$i$i36 = 0;
 while(1) {
  $exitcond$i$i37 = ($__i$0$i$i36|0)==(3);
  if ($exitcond$i$i37) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i36<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i36) + 1)|0;
  $__i$0$i$i36 = $11;
 }
 $__i$0$i$i41 = 0;
 while(1) {
  $exitcond$i$i42 = ($__i$0$i$i41|0)==(3);
  if ($exitcond$i$i42) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i41<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i41) + 1)|0;
  $__i$0$i$i41 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(592,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch_2()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index7 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $867 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $34 = ($__p$0>>>0)<(4);
    if (!($34)) {
     $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 251;
     break;
    }
    $35 = HEAP32[$__b>>2]|0;
    $36 = ($35|0)==(0|0);
    do {
     if ($36) {
      $50 = 0;
     } else {
      $37 = ((($35)) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($35)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38|0)==($40|0);
      if ($41) {
       $42 = HEAP32[$35>>2]|0;
       $43 = ((($42)) + 36|0);
       $44 = HEAP32[$43>>2]|0;
       __THREW__ = 0;
       $45 = (invoke_ii($44|0,($35|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 38;
        break L24;
       }
       $48 = ($45|0)==(-1);
       if ($48) {
        HEAP32[$__b>>2] = 0;
        $50 = 0;
        break;
       } else {
        $$pre$i$i$i47 = HEAP32[$__b>>2]|0;
        $50 = $$pre$i$i$i47;
        break;
       }
      } else {
       $50 = $35;
      }
     }
    } while(0);
    $49 = ($50|0)==(0|0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    do {
     if ($52) {
      label = 31;
     } else {
      $53 = ((($51)) + 12|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($51)) + 16|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($54|0)==($56|0);
      if (!($57)) {
       if ($49) {
        $868 = $51;
        break;
       } else {
        $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 38;
       break L24;
      }
      $64 = ($61|0)==(-1);
      if ($64) {
       HEAP32[$__e>>2] = 0;
       label = 31;
       break;
      } else {
       if ($49) {
        $868 = $51;
        break;
       } else {
        $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     if ($49) {
      $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 251;
      break;
     } else {
      $868 = 0;
     }
    }
    $86 = (($__pat) + ($__p$0)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87 << 24 >> 24;
    L47: do {
     switch ($88|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $90 = HEAP32[$__b>>2]|0;
       $91 = ((($90)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($90)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$90>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        __THREW__ = 0;
        $99 = (invoke_ii($98|0,($90|0))|0);
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         label = 38;
         break L24;
        } else {
         $$0$i$i57 = $99;
        }
       } else {
        $102 = HEAP8[$92>>0]|0;
        $103 = $102&255;
        $$0$i$i57 = $103;
       }
       $104 = $$0$i$i57&255;
       $isascii1$i = ($104<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 56;
        break L24;
       }
       $sext241 = $$0$i$i57 << 24;
       $105 = $sext241 >> 24;
       $106 = HEAP32[$17>>2]|0;
       $107 = (($106) + ($105<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108 & 8192;
       $110 = ($109<<16>>16)==(0);
       if ($110) {
        label = 56;
        break L24;
       }
       $111 = HEAP32[$__b>>2]|0;
       $112 = ((($111)) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ((($111)) + 16|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($113|0)==($115|0);
       if ($116) {
        $117 = HEAP32[$111>>2]|0;
        $118 = ((($117)) + 40|0);
        $119 = HEAP32[$118>>2]|0;
        __THREW__ = 0;
        $120 = (invoke_ii($119|0,($111|0))|0);
        $121 = __THREW__; __THREW__ = 0;
        $122 = $121&1;
        if ($122) {
         label = 38;
         break L24;
        } else {
         $$0$i$i60 = $120;
        }
       } else {
        $123 = ((($113)) + 1|0);
        HEAP32[$112>>2] = $123;
        $124 = HEAP8[$113>>0]|0;
        $125 = $124&255;
        $$0$i$i60 = $125;
       }
       $126 = $$0$i$i60&255;
       __THREW__ = 0;
       invoke_vii(593,($__spaces|0),($126|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        label = 38;
        break L24;
       } else {
        $$pre$i2$i$i67 = $868;$149 = $868;
        label = 58;
       }
      }
      break;
     }
     case 0:  {
      $131 = ($__p$0|0)==(3);
      if ($131) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i2$i$i67 = $868;$149 = $868;
       label = 58;
      }
      break;
     }
     case 3:  {
      $202 = HEAP8[$__psn>>0]|0;
      $203 = $202 & 1;
      $204 = ($203<<24>>24)==(0);
      $205 = HEAP32[$18>>2]|0;
      $206 = $202&255;
      $207 = $206 >>> 1;
      $208 = $204 ? $207 : $205;
      $209 = HEAP8[$__nsn>>0]|0;
      $210 = $209 & 1;
      $211 = ($210<<24>>24)==(0);
      $212 = HEAP32[$19>>2]|0;
      $213 = $209&255;
      $214 = $213 >>> 1;
      $215 = $211 ? $214 : $212;
      $216 = (0 - ($215))|0;
      $217 = ($208|0)==($216|0);
      if ($217) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $218 = ($208|0)==(0);
       if ($218) {
        $262 = HEAP32[$__b>>2]|0;
        $263 = ((($262)) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = ((($262)) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = ((($268)) + 36|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         $271 = (invoke_ii($270|0,($262|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if ($273) {
          label = 38;
          break L24;
         }
         $$pre304 = HEAP8[$__nsn>>0]|0;
         $$0$i$i129 = $271;$278 = $$pre304;
        } else {
         $274 = HEAP8[$264>>0]|0;
         $275 = $274&255;
         $$0$i$i129 = $275;$278 = $209;
        }
        $276 = $$0$i$i129&255;
        $277 = $278 & 1;
        $279 = ($277<<24>>24)==(0);
        $280 = HEAP32[$20>>2]|0;
        $281 = $279 ? $21 : $280;
        $282 = HEAP8[$281>>0]|0;
        $283 = ($276<<24>>24)==($282<<24>>24);
        if (!($283)) {
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $284 = HEAP32[$__b>>2]|0;
        $285 = ((($284)) + 12|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ((($284)) + 16|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = ($286|0)==($288|0);
        if ($289) {
         $290 = HEAP32[$284>>2]|0;
         $291 = ((($290)) + 40|0);
         $292 = HEAP32[$291>>2]|0;
         __THREW__ = 0;
         (invoke_ii($292|0,($284|0))|0);
         $293 = __THREW__; __THREW__ = 0;
         $294 = $293&1;
         if ($294) {
          label = 38;
          break L24;
         }
        } else {
         $295 = ((($286)) + 1|0);
         HEAP32[$285>>2] = $295;
        }
        HEAP8[$__neg>>0] = 1;
        $296 = HEAP8[$__nsn>>0]|0;
        $297 = $296 & 1;
        $298 = ($297<<24>>24)==(0);
        $299 = HEAP32[$19>>2]|0;
        $300 = $296&255;
        $301 = $300 >>> 1;
        $302 = $298 ? $301 : $299;
        $303 = ($302>>>0)>(1);
        $__nsn$__trailing_sign$0 = $303 ? $__nsn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L47;
       }
       $219 = ($215|0)==(0);
       $220 = HEAP32[$__b>>2]|0;
       $221 = ((($220)) + 12|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ((($220)) + 16|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($222|0)==($224|0);
       if ($219) {
        if ($225) {
         $226 = HEAP32[$220>>2]|0;
         $227 = ((($226)) + 36|0);
         $228 = HEAP32[$227>>2]|0;
         __THREW__ = 0;
         $229 = (invoke_ii($228|0,($220|0))|0);
         $230 = __THREW__; __THREW__ = 0;
         $231 = $230&1;
         if ($231) {
          label = 38;
          break L24;
         }
         $$pre303 = HEAP8[$__psn>>0]|0;
         $$0$i$i109 = $229;$236 = $$pre303;
        } else {
         $232 = HEAP8[$222>>0]|0;
         $233 = $232&255;
         $$0$i$i109 = $233;$236 = $202;
        }
        $234 = $$0$i$i109&255;
        $235 = $236 & 1;
        $237 = ($235<<24>>24)==(0);
        $238 = HEAP32[$22>>2]|0;
        $239 = $237 ? $23 : $238;
        $240 = HEAP8[$239>>0]|0;
        $241 = ($234<<24>>24)==($240<<24>>24);
        if (!($241)) {
         HEAP8[$__neg>>0] = 1;
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $242 = HEAP32[$__b>>2]|0;
        $243 = ((($242)) + 12|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = ((($242)) + 16|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = ($244|0)==($246|0);
        if ($247) {
         $248 = HEAP32[$242>>2]|0;
         $249 = ((($248)) + 40|0);
         $250 = HEAP32[$249>>2]|0;
         __THREW__ = 0;
         (invoke_ii($250|0,($242|0))|0);
         $251 = __THREW__; __THREW__ = 0;
         $252 = $251&1;
         if ($252) {
          label = 38;
          break L24;
         }
        } else {
         $253 = ((($244)) + 1|0);
         HEAP32[$243>>2] = $253;
        }
        $254 = HEAP8[$__psn>>0]|0;
        $255 = $254 & 1;
        $256 = ($255<<24>>24)==(0);
        $257 = HEAP32[$18>>2]|0;
        $258 = $254&255;
        $259 = $258 >>> 1;
        $260 = $256 ? $259 : $257;
        $261 = ($260>>>0)>(1);
        $__psn$__trailing_sign$0 = $261 ? $__psn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L47;
       }
       if ($225) {
        $304 = HEAP32[$220>>2]|0;
        $305 = ((($304)) + 36|0);
        $306 = HEAP32[$305>>2]|0;
        __THREW__ = 0;
        $307 = (invoke_ii($306|0,($220|0))|0);
        $308 = __THREW__; __THREW__ = 0;
        $309 = $308&1;
        if ($309) {
         label = 38;
         break L24;
        }
        $$pre298 = HEAP8[$__psn>>0]|0;
        $$pre299 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre299)) + 12|0);
        $$pre300 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert301 = ((($$pre299)) + 16|0);
        $$pre302 = HEAP32[$$phi$trans$insert301>>2]|0;
        $$0$i$i136 = $307;$314 = $$pre298;$321 = $$pre299;$323 = $$pre300;$324 = $$pre302;
       } else {
        $310 = HEAP8[$222>>0]|0;
        $311 = $310&255;
        $$0$i$i136 = $311;$314 = $202;$321 = $220;$323 = $222;$324 = $224;
       }
       $312 = $$0$i$i136&255;
       $313 = $314 & 1;
       $315 = ($313<<24>>24)==(0);
       $316 = HEAP32[$22>>2]|0;
       $317 = $315 ? $23 : $316;
       $318 = HEAP8[$317>>0]|0;
       $319 = ($312<<24>>24)==($318<<24>>24);
       $320 = ((($321)) + 12|0);
       $322 = ($323|0)==($324|0);
       if ($319) {
        if ($322) {
         $325 = HEAP32[$321>>2]|0;
         $326 = ((($325)) + 40|0);
         $327 = HEAP32[$326>>2]|0;
         __THREW__ = 0;
         (invoke_ii($327|0,($321|0))|0);
         $328 = __THREW__; __THREW__ = 0;
         $329 = $328&1;
         if ($329) {
          label = 38;
          break L24;
         }
        } else {
         $330 = ((($323)) + 1|0);
         HEAP32[$320>>2] = $330;
        }
        $331 = HEAP8[$__psn>>0]|0;
        $332 = $331 & 1;
        $333 = ($332<<24>>24)==(0);
        $334 = HEAP32[$18>>2]|0;
        $335 = $331&255;
        $336 = $335 >>> 1;
        $337 = $333 ? $336 : $334;
        $338 = ($337>>>0)>(1);
        $__psn$__trailing_sign$022 = $338 ? $__psn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L47;
       }
       if ($322) {
        $339 = HEAP32[$321>>2]|0;
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        __THREW__ = 0;
        $342 = (invoke_ii($341|0,($321|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 38;
         break L24;
        } else {
         $$0$i$i145 = $342;
        }
       } else {
        $345 = HEAP8[$323>>0]|0;
        $346 = $345&255;
        $$0$i$i145 = $346;
       }
       $347 = $$0$i$i145&255;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$20>>2]|0;
       $352 = $350 ? $21 : $351;
       $353 = HEAP8[$352>>0]|0;
       $354 = ($347<<24>>24)==($353<<24>>24);
       if (!($354)) {
        label = 120;
        break L24;
       }
       $355 = HEAP32[$__b>>2]|0;
       $356 = ((($355)) + 12|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ((($355)) + 16|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = ($357|0)==($359|0);
       if ($360) {
        $361 = HEAP32[$355>>2]|0;
        $362 = ((($361)) + 40|0);
        $363 = HEAP32[$362>>2]|0;
        __THREW__ = 0;
        (invoke_ii($363|0,($355|0))|0);
        $364 = __THREW__; __THREW__ = 0;
        $365 = $364&1;
        if ($365) {
         label = 38;
         break L24;
        }
       } else {
        $366 = ((($357)) + 1|0);
        HEAP32[$356>>2] = $366;
       }
       HEAP8[$__neg>>0] = 1;
       $367 = HEAP8[$__nsn>>0]|0;
       $368 = $367 & 1;
       $369 = ($368<<24>>24)==(0);
       $370 = HEAP32[$19>>2]|0;
       $371 = $367&255;
       $372 = $371 >>> 1;
       $373 = $369 ? $372 : $370;
       $374 = ($373>>>0)>(1);
       $__nsn$__trailing_sign$023 = $374 ? $__nsn : $__trailing_sign$0;
       $869 = $867;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $377 = ($__trailing_sign$0|0)!=(0|0);
      $378 = ($__p$0>>>0)<(2);
      $or$cond = $378 | $377;
      if (!($or$cond)) {
       $379 = ($__p$0|0)==(2);
       $380 = HEAP8[$32>>0]|0;
       $381 = ($380<<24>>24)!=(0);
       $382 = $379 & $381;
       $brmerge = $25 | $382;
       if (!($brmerge)) {
        $869 = $867;$__trailing_sign$1 = 0;
        break L47;
       }
      }
      $383 = HEAP8[$__sym>>0]|0;
      $384 = $383 & 1;
      $385 = ($384<<24>>24)==(0);
      $386 = HEAP32[$26>>2]|0;
      $387 = $385 ? $27 : $386;
      $388 = $387;
      $389 = ($__p$0|0)==(0);
      L116: do {
       if ($389) {
        $$pre$i2$i$i180 = $868;$431 = $383;$437 = $386;$459 = $868;$__sym_curr_char$sroa$0$0 = $388;
       } else {
        $390 = (($__p$0) + -1)|0;
        $391 = (($__pat) + ($390)|0);
        $392 = HEAP8[$391>>0]|0;
        $switch = ($392&255)<(2);
        if ($switch) {
         $393 = HEAP32[$28>>2]|0;
         $394 = $383&255;
         $395 = $394 >>> 1;
         $396 = $385 ? $395 : $393;
         $397 = (($387) + ($396)|0);
         $__sym_space_end$sroa$0$0 = $388;
         while(1) {
          $398 = $__sym_space_end$sroa$0$0;
          $399 = ($398|0)==($397|0);
          if ($399) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $400 = HEAP8[$398>>0]|0;
          $isascii1$i186 = ($400<<24>>24)>(-1);
          if (!($isascii1$i186)) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $401 = $400 << 24 >> 24;
          $402 = HEAP32[$17>>2]|0;
          $403 = (($402) + ($401<<1)|0);
          $404 = HEAP16[$403>>1]|0;
          $405 = $404 & 8192;
          $406 = ($405<<16>>16)==(0);
          if ($406) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $407 = ((($398)) + 1|0);
          $408 = $407;
          $__sym_space_end$sroa$0$0 = $408;
         }
         $409 = (($__sym_space_end$sroa$0$0$lcssa) - ($388))|0;
         $410 = HEAP8[$__spaces>>0]|0;
         $411 = $410 & 1;
         $412 = ($411<<24>>24)==(0);
         $413 = HEAP32[$29>>2]|0;
         $414 = $410&255;
         $415 = $414 >>> 1;
         $416 = $412 ? $415 : $413;
         $417 = ($409>>>0)>($416>>>0);
         if ($417) {
          $$pre$i2$i$i180 = $868;$431 = $383;$437 = $386;$459 = $868;$__sym_curr_char$sroa$0$0 = $388;
         } else {
          $418 = HEAP32[$30>>2]|0;
          $419 = $412 ? $31 : $418;
          $420 = (($419) + ($416)|0);
          $421 = (0 - ($409))|0;
          $422 = (($420) + ($421)|0);
          $$sink = $387;$424 = $422;
          while(1) {
           $423 = ($424|0)==($420|0);
           if ($423) {
            $$pre$i2$i$i180 = $868;$431 = $383;$437 = $386;$459 = $868;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0$lcssa;
            break L116;
           }
           $425 = HEAP8[$424>>0]|0;
           $426 = HEAP8[$$sink>>0]|0;
           $427 = ($425<<24>>24)==($426<<24>>24);
           if (!($427)) {
            $$pre$i2$i$i180 = $868;$431 = $383;$437 = $386;$459 = $868;$__sym_curr_char$sroa$0$0 = $388;
            break L116;
           }
           $428 = ((($424)) + 1|0);
           $429 = ((($$sink)) + 1|0);
           $$sink = $429;$424 = $428;
          }
         }
        } else {
         $$pre$i2$i$i180 = $868;$431 = $383;$437 = $386;$459 = $868;$__sym_curr_char$sroa$0$0 = $388;
        }
       }
      } while(0);
      L130: while(1) {
       $430 = $431 & 1;
       $432 = ($430<<24>>24)==(0);
       $433 = HEAP32[$28>>2]|0;
       $434 = $431&255;
       $435 = $434 >>> 1;
       $436 = $432 ? $27 : $437;
       $438 = $432 ? $435 : $433;
       $439 = (($436) + ($438)|0);
       $440 = $__sym_curr_char$sroa$0$0;
       $441 = ($440|0)==($439|0);
       if ($441) {
        $$lcssa = $439;
        break;
       }
       $442 = HEAP32[$__b>>2]|0;
       $443 = ($442|0)==(0|0);
       do {
        if ($443) {
         $457 = 0;
        } else {
         $444 = ((($442)) + 12|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ((($442)) + 16|0);
         $447 = HEAP32[$446>>2]|0;
         $448 = ($445|0)==($447|0);
         if ($448) {
          $449 = HEAP32[$442>>2]|0;
          $450 = ((($449)) + 36|0);
          $451 = HEAP32[$450>>2]|0;
          __THREW__ = 0;
          $452 = (invoke_ii($451|0,($442|0))|0);
          $453 = __THREW__; __THREW__ = 0;
          $454 = $453&1;
          if ($454) {
           label = 35;
           break L24;
          }
          $455 = ($452|0)==(-1);
          if ($455) {
           HEAP32[$__b>>2] = 0;
           $457 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $457 = $$pre$i$i$i176;
           break;
          }
         } else {
          $457 = $442;
         }
        }
       } while(0);
       $456 = ($457|0)==(0|0);
       $458 = ($459|0)==(0|0);
       do {
        if ($458) {
         $$pre$i2$i$i180296 = $$pre$i2$i$i180;
         label = 148;
        } else {
         $460 = ((($459)) + 12|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ((($459)) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = ($461|0)==($463|0);
         if (!($464)) {
          if ($456) {
           $$pre$i2$i$i180295 = $$pre$i2$i$i180;$871 = $459;
           break;
          } else {
           $$lcssa = $440;
           break L130;
          }
         }
         $465 = HEAP32[$459>>2]|0;
         $466 = ((($465)) + 36|0);
         $467 = HEAP32[$466>>2]|0;
         __THREW__ = 0;
         $468 = (invoke_ii($467|0,($459|0))|0);
         $469 = __THREW__; __THREW__ = 0;
         $470 = $469&1;
         if ($470) {
          label = 35;
          break L24;
         }
         $471 = ($468|0)==(-1);
         if ($471) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i180296 = 0;
          label = 148;
          break;
         } else {
          $472 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $456 ^ $472;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180295 = $$pre$i2$i$i180;$871 = $$pre$i2$i$i180;
           break;
          } else {
           $$lcssa = $440;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 148) {
        label = 0;
        if ($456) {
         $$lcssa = $440;
         break;
        } else {
         $$pre$i2$i$i180295 = $$pre$i2$i$i180296;$871 = 0;
        }
       }
       $473 = HEAP32[$__b>>2]|0;
       $474 = ((($473)) + 12|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ((($473)) + 16|0);
       $477 = HEAP32[$476>>2]|0;
       $478 = ($475|0)==($477|0);
       if ($478) {
        $479 = HEAP32[$473>>2]|0;
        $480 = ((($479)) + 36|0);
        $481 = HEAP32[$480>>2]|0;
        __THREW__ = 0;
        $482 = (invoke_ii($481|0,($473|0))|0);
        $483 = __THREW__; __THREW__ = 0;
        $484 = $483&1;
        if ($484) {
         label = 35;
         break L24;
        } else {
         $$0$i$i172 = $482;
        }
       } else {
        $485 = HEAP8[$475>>0]|0;
        $486 = $485&255;
        $$0$i$i172 = $486;
       }
       $487 = $$0$i$i172&255;
       $488 = HEAP8[$440>>0]|0;
       $489 = ($487<<24>>24)==($488<<24>>24);
       if (!($489)) {
        $$lcssa = $440;
        break;
       }
       $490 = HEAP32[$__b>>2]|0;
       $491 = ((($490)) + 12|0);
       $492 = HEAP32[$491>>2]|0;
       $493 = ((($490)) + 16|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ($492|0)==($494|0);
       if ($495) {
        $496 = HEAP32[$490>>2]|0;
        $497 = ((($496)) + 40|0);
        $498 = HEAP32[$497>>2]|0;
        __THREW__ = 0;
        (invoke_ii($498|0,($490|0))|0);
        $499 = __THREW__; __THREW__ = 0;
        $500 = $499&1;
        if ($500) {
         label = 35;
         break L24;
        }
       } else {
        $501 = ((($492)) + 1|0);
        HEAP32[$491>>2] = $501;
       }
       $502 = ((($440)) + 1|0);
       $503 = $502;
       $$pre293 = HEAP8[$__sym>>0]|0;
       $$pre294 = HEAP32[$26>>2]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180295;$431 = $$pre293;$437 = $$pre294;$459 = $871;$__sym_curr_char$sroa$0$0 = $503;
      }
      if ($25) {
       $504 = HEAP8[$__sym>>0]|0;
       $505 = $504 & 1;
       $506 = ($505<<24>>24)==(0);
       $507 = HEAP32[$26>>2]|0;
       $508 = HEAP32[$28>>2]|0;
       $509 = $504&255;
       $510 = $509 >>> 1;
       $511 = $506 ? $27 : $507;
       $512 = $506 ? $510 : $508;
       $513 = (($511) + ($512)|0);
       $514 = ($$lcssa|0)==($513|0);
       if ($514) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 160;
        break L24;
       }
      } else {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $89 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i163 = $868;$534 = $868;$589 = $867;$__ng$0 = 0;
      L165: while(1) {
       $517 = HEAP32[$__b>>2]|0;
       $518 = ($517|0)==(0|0);
       do {
        if ($518) {
         $532 = 0;
        } else {
         $519 = ((($517)) + 12|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ((($517)) + 16|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = ($520|0)==($522|0);
         if ($523) {
          $524 = HEAP32[$517>>2]|0;
          $525 = ((($524)) + 36|0);
          $526 = HEAP32[$525>>2]|0;
          __THREW__ = 0;
          $527 = (invoke_ii($526|0,($517|0))|0);
          $528 = __THREW__; __THREW__ = 0;
          $529 = $528&1;
          if ($529) {
           label = 37;
           break L24;
          }
          $530 = ($527|0)==(-1);
          if ($530) {
           HEAP32[$__b>>2] = 0;
           $532 = 0;
           break;
          } else {
           $$pre$i$i$i159 = HEAP32[$__b>>2]|0;
           $532 = $$pre$i$i$i159;
           break;
          }
         } else {
          $532 = $517;
         }
        }
       } while(0);
       $531 = ($532|0)==(0|0);
       $533 = ($534|0)==(0|0);
       do {
        if ($533) {
         $$pre$i2$i$i163283 = $$pre$i2$i$i163;
         label = 173;
        } else {
         $535 = ((($534)) + 12|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ((($534)) + 16|0);
         $538 = HEAP32[$537>>2]|0;
         $539 = ($536|0)==($538|0);
         if (!($539)) {
          if ($531) {
           $$pre$i2$i$i163285 = $$pre$i2$i$i163;$872 = $534;
           break;
          } else {
           $$lcssa392 = $589;$$pre$i2$i$i123 = $$pre$i2$i$i163;$__ng$0$lcssa393 = $__ng$0;
           break L165;
          }
         }
         $540 = HEAP32[$534>>2]|0;
         $541 = ((($540)) + 36|0);
         $542 = HEAP32[$541>>2]|0;
         __THREW__ = 0;
         $543 = (invoke_ii($542|0,($534|0))|0);
         $544 = __THREW__; __THREW__ = 0;
         $545 = $544&1;
         if ($545) {
          label = 37;
          break L24;
         }
         $546 = ($543|0)==(-1);
         if ($546) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i163283 = 0;
          label = 173;
          break;
         } else {
          $547 = ($$pre$i2$i$i163|0)==(0|0);
          $tmp$i$i165 = $531 ^ $547;
          if ($tmp$i$i165) {
           $$pre$i2$i$i163285 = $$pre$i2$i$i163;$872 = $$pre$i2$i$i163;
           break;
          } else {
           $$lcssa392 = $589;$$pre$i2$i$i123 = $$pre$i2$i$i163;$__ng$0$lcssa393 = $__ng$0;
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 173) {
        label = 0;
        if ($531) {
         $$lcssa392 = $589;$$pre$i2$i$i123 = $$pre$i2$i$i163283;$__ng$0$lcssa393 = $__ng$0;
         break;
        } else {
         $$pre$i2$i$i163285 = $$pre$i2$i$i163283;$872 = 0;
        }
       }
       $548 = HEAP32[$__b>>2]|0;
       $549 = ((($548)) + 12|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = ((($548)) + 16|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = ($550|0)==($552|0);
       if ($553) {
        $554 = HEAP32[$548>>2]|0;
        $555 = ((($554)) + 36|0);
        $556 = HEAP32[$555>>2]|0;
        __THREW__ = 0;
        $557 = (invoke_ii($556|0,($548|0))|0);
        $558 = __THREW__; __THREW__ = 0;
        $559 = $558&1;
        if ($559) {
         label = 37;
         break L24;
        } else {
         $$0$i$i155 = $557;
        }
       } else {
        $560 = HEAP8[$550>>0]|0;
        $561 = $560&255;
        $$0$i$i155 = $561;
       }
       $562 = $$0$i$i155&255;
       $isascii1$i153 = ($562<<24>>24)>(-1);
       if ($isascii1$i153) {
        $sext239 = $$0$i$i155 << 24;
        $563 = $sext239 >> 24;
        $564 = HEAP32[$17>>2]|0;
        $565 = (($564) + ($563<<1)|0);
        $566 = HEAP16[$565>>1]|0;
        $567 = $566 & 2048;
        $568 = ($567<<16>>16)==(0);
        if ($568) {
         label = 184;
        } else {
         $569 = HEAP32[$__wn>>2]|0;
         $570 = HEAP32[$0>>2]|0;
         $571 = ($569|0)==($570|0);
         if ($571) {
          __THREW__ = 0;
          invoke_viii(594,($__wb|0),($__wn|0),($0|0));
          $572 = __THREW__; __THREW__ = 0;
          $573 = $572&1;
          if ($573) {
           label = 37;
           break L24;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $575 = $$pre;
         } else {
          $575 = $569;
         }
         $574 = ((($575)) + 1|0);
         HEAP32[$__wn>>2] = $574;
         HEAP8[$575>>0] = $562;
         $576 = (($__ng$0) + 1)|0;
         $873 = $589;$__ng$2$ph = $576;
        }
       } else {
        label = 184;
       }
       if ((label|0) == 184) {
        label = 0;
        $577 = HEAP8[$__grp>>0]|0;
        $578 = $577 & 1;
        $579 = ($578<<24>>24)==(0);
        $580 = HEAP32[$33>>2]|0;
        $581 = $577&255;
        $582 = $581 >>> 1;
        $583 = $579 ? $582 : $580;
        $584 = ($583|0)!=(0);
        $585 = ($__ng$0|0)!=(0);
        $or$cond12 = $585 & $584;
        $586 = ($562<<24>>24)==($89<<24>>24);
        $or$cond25 = $586 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa392 = $589;$$pre$i2$i$i123 = $$pre$i2$i$i163285;$__ng$0$lcssa393 = $__ng$0;
         break;
        }
        $587 = HEAP32[$__ge>>2]|0;
        $588 = ($589|0)==($587|0);
        if ($588) {
         __THREW__ = 0;
         invoke_viii(595,($__gb|0),($__gn|0),($__ge|0));
         $590 = __THREW__; __THREW__ = 0;
         $591 = $590&1;
         if ($591) {
          label = 37;
          break L24;
         }
         $$pre288 = HEAP32[$__gn>>2]|0;
         $593 = $$pre288;
        } else {
         $593 = $589;
        }
        $592 = ((($593)) + 4|0);
        HEAP32[$__gn>>2] = $592;
        HEAP32[$593>>2] = $__ng$0;
        $873 = $592;$__ng$2$ph = 0;
       }
       $594 = HEAP32[$__b>>2]|0;
       $595 = ((($594)) + 12|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = ((($594)) + 16|0);
       $598 = HEAP32[$597>>2]|0;
       $599 = ($596|0)==($598|0);
       if ($599) {
        $600 = HEAP32[$594>>2]|0;
        $601 = ((($600)) + 40|0);
        $602 = HEAP32[$601>>2]|0;
        __THREW__ = 0;
        (invoke_ii($602|0,($594|0))|0);
        $603 = __THREW__; __THREW__ = 0;
        $604 = $603&1;
        if ($604) {
         label = 37;
         break L24;
        } else {
         $$pre$i2$i$i163 = $$pre$i2$i$i163285;$534 = $872;$589 = $873;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $605 = ((($596)) + 1|0);
        HEAP32[$595>>2] = $605;
        $$pre$i2$i$i163 = $$pre$i2$i$i163285;$534 = $872;$589 = $873;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $606 = HEAP32[$__gb>>2]|0;
      $607 = ($606|0)!=($$lcssa392|0);
      $608 = ($__ng$0$lcssa393|0)!=(0);
      $or$cond14 = $608 & $607;
      if ($or$cond14) {
       $609 = HEAP32[$__ge>>2]|0;
       $610 = ($$lcssa392|0)==($609|0);
       if ($610) {
        __THREW__ = 0;
        invoke_viii(595,($__gb|0),($__gn|0),($__ge|0));
        $611 = __THREW__; __THREW__ = 0;
        $612 = $611&1;
        if ($612) {
         label = 38;
         break L24;
        }
        $$pre290 = HEAP32[$__gn>>2]|0;
        $614 = $$pre290;
       } else {
        $614 = $$lcssa392;
       }
       $613 = ((($614)) + 4|0);
       HEAP32[$__gn>>2] = $613;
       HEAP32[$614>>2] = $__ng$0$lcssa393;
       $874 = $613;
      } else {
       $874 = $$lcssa392;
      }
      $615 = HEAP32[$__fd>>2]|0;
      $616 = ($615|0)>(0);
      L217: do {
       if ($616) {
        $617 = HEAP32[$__b>>2]|0;
        $618 = ($617|0)==(0|0);
        do {
         if ($618) {
          $632 = 0;
         } else {
          $619 = ((($617)) + 12|0);
          $620 = HEAP32[$619>>2]|0;
          $621 = ((($617)) + 16|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = ($620|0)==($622|0);
          if ($623) {
           $624 = HEAP32[$617>>2]|0;
           $625 = ((($624)) + 36|0);
           $626 = HEAP32[$625>>2]|0;
           __THREW__ = 0;
           $627 = (invoke_ii($626|0,($617|0))|0);
           $628 = __THREW__; __THREW__ = 0;
           $629 = $628&1;
           if ($629) {
            label = 38;
            break L24;
           }
           $630 = ($627|0)==(-1);
           if ($630) {
            HEAP32[$__b>>2] = 0;
            $632 = 0;
            break;
           } else {
            $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
            $632 = $$pre$i$i$i119;
            break;
           }
          } else {
           $632 = $617;
          }
         }
        } while(0);
        $631 = ($632|0)==(0|0);
        $633 = ($$pre$i2$i$i123|0)==(0|0);
        do {
         if ($633) {
          label = 210;
         } else {
          $634 = ((($$pre$i2$i$i123)) + 12|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ((($$pre$i2$i$i123)) + 16|0);
          $637 = HEAP32[$636>>2]|0;
          $638 = ($635|0)==($637|0);
          if ($638) {
           $639 = HEAP32[$$pre$i2$i$i123>>2]|0;
           $640 = ((($639)) + 36|0);
           $641 = HEAP32[$640>>2]|0;
           __THREW__ = 0;
           $642 = (invoke_ii($641|0,($$pre$i2$i$i123|0))|0);
           $643 = __THREW__; __THREW__ = 0;
           $644 = $643&1;
           if ($644) {
            label = 38;
            break L24;
           }
           $645 = ($642|0)==(-1);
           if ($645) {
            HEAP32[$__e>>2] = 0;
            label = 210;
            break;
           }
          }
          if ($631) {
           $875 = $$pre$i2$i$i123;
          } else {
           label = 215;
           break L24;
          }
         }
        } while(0);
        if ((label|0) == 210) {
         label = 0;
         if ($631) {
          label = 215;
          break L24;
         } else {
          $875 = 0;
         }
        }
        $646 = HEAP32[$__b>>2]|0;
        $647 = ((($646)) + 12|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = ((($646)) + 16|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ($648|0)==($650|0);
        if ($651) {
         $652 = HEAP32[$646>>2]|0;
         $653 = ((($652)) + 36|0);
         $654 = HEAP32[$653>>2]|0;
         __THREW__ = 0;
         $655 = (invoke_ii($654|0,($646|0))|0);
         $656 = __THREW__; __THREW__ = 0;
         $657 = $656&1;
         if ($657) {
          label = 38;
          break L24;
         } else {
          $$0$i$i112 = $655;
         }
        } else {
         $658 = HEAP8[$648>>0]|0;
         $659 = $658&255;
         $$0$i$i112 = $659;
        }
        $660 = $$0$i$i112&255;
        $661 = HEAP8[$__dp>>0]|0;
        $662 = ($660<<24>>24)==($661<<24>>24);
        if (!($662)) {
         label = 215;
         break L24;
        }
        $665 = HEAP32[$__b>>2]|0;
        $666 = ((($665)) + 12|0);
        $667 = HEAP32[$666>>2]|0;
        $668 = ((($665)) + 16|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = ($667|0)==($669|0);
        if ($670) {
         $671 = HEAP32[$665>>2]|0;
         $672 = ((($671)) + 40|0);
         $673 = HEAP32[$672>>2]|0;
         __THREW__ = 0;
         (invoke_ii($673|0,($665|0))|0);
         $674 = __THREW__; __THREW__ = 0;
         $675 = $674&1;
         if ($675) {
          label = 38;
          break L24;
         } else {
          $$pre$i2$i$i99 = $875;$678 = $615;$696 = $875;
         }
        } else {
         $676 = ((($667)) + 1|0);
         HEAP32[$666>>2] = $676;
         $$pre$i2$i$i99 = $875;$678 = $615;$696 = $875;
        }
        while(1) {
         $677 = ($678|0)>(0);
         if (!($677)) {
          break L217;
         }
         $679 = HEAP32[$__b>>2]|0;
         $680 = ($679|0)==(0|0);
         do {
          if ($680) {
           $694 = 0;
          } else {
           $681 = ((($679)) + 12|0);
           $682 = HEAP32[$681>>2]|0;
           $683 = ((($679)) + 16|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ($682|0)==($684|0);
           if ($685) {
            $686 = HEAP32[$679>>2]|0;
            $687 = ((($686)) + 36|0);
            $688 = HEAP32[$687>>2]|0;
            __THREW__ = 0;
            $689 = (invoke_ii($688|0,($679|0))|0);
            $690 = __THREW__; __THREW__ = 0;
            $691 = $690&1;
            if ($691) {
             label = 36;
             break L24;
            }
            $692 = ($689|0)==(-1);
            if ($692) {
             HEAP32[$__b>>2] = 0;
             $694 = 0;
             break;
            } else {
             $$pre$i$i$i95 = HEAP32[$__b>>2]|0;
             $694 = $$pre$i$i$i95;
             break;
            }
           } else {
            $694 = $679;
           }
          }
         } while(0);
         $693 = ($694|0)==(0|0);
         $695 = ($696|0)==(0|0);
         do {
          if ($695) {
           $$pre$i2$i$i99291$ph = $$pre$i2$i$i99;
           label = 232;
          } else {
           $697 = ((($696)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ((($696)) + 16|0);
           $700 = HEAP32[$699>>2]|0;
           $701 = ($698|0)==($700|0);
           if (!($701)) {
            if ($693) {
             $$pre$i2$i$i99291310 = $$pre$i2$i$i99;$876 = $696;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
           $702 = HEAP32[$696>>2]|0;
           $703 = ((($702)) + 36|0);
           $704 = HEAP32[$703>>2]|0;
           __THREW__ = 0;
           $705 = (invoke_ii($704|0,($696|0))|0);
           $706 = __THREW__; __THREW__ = 0;
           $707 = $706&1;
           if ($707) {
            label = 36;
            break L24;
           }
           $708 = ($705|0)==(-1);
           if ($708) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i99291$ph = 0;
            label = 232;
            break;
           } else {
            $709 = ($$pre$i2$i$i99|0)==(0|0);
            $tmp$i$i101 = $693 ^ $709;
            if ($tmp$i$i101) {
             $$pre$i2$i$i99291310 = $$pre$i2$i$i99;$876 = $$pre$i2$i$i99;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 232) {
          label = 0;
          if ($693) {
           label = 239;
           break L24;
          } else {
           $$pre$i2$i$i99291310 = $$pre$i2$i$i99291$ph;$876 = 0;
          }
         }
         $710 = HEAP32[$__b>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         $713 = ((($710)) + 16|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ($712|0)==($714|0);
         if ($715) {
          $716 = HEAP32[$710>>2]|0;
          $717 = ((($716)) + 36|0);
          $718 = HEAP32[$717>>2]|0;
          __THREW__ = 0;
          $719 = (invoke_ii($718|0,($710|0))|0);
          $720 = __THREW__; __THREW__ = 0;
          $721 = $720&1;
          if ($721) {
           label = 36;
           break L24;
          } else {
           $$0$i$i90 = $719;
          }
         } else {
          $722 = HEAP8[$712>>0]|0;
          $723 = $722&255;
          $$0$i$i90 = $723;
         }
         $724 = $$0$i$i90&255;
         $isascii1$i88 = ($724<<24>>24)>(-1);
         if (!($isascii1$i88)) {
          label = 239;
          break L24;
         }
         $sext = $$0$i$i90 << 24;
         $725 = $sext >> 24;
         $726 = HEAP32[$17>>2]|0;
         $727 = (($726) + ($725<<1)|0);
         $728 = HEAP16[$727>>1]|0;
         $729 = $728 & 2048;
         $730 = ($729<<16>>16)==(0);
         if ($730) {
          label = 239;
          break L24;
         }
         $733 = HEAP32[$__wn>>2]|0;
         $734 = HEAP32[$0>>2]|0;
         $735 = ($733|0)==($734|0);
         if ($735) {
          __THREW__ = 0;
          invoke_viii(594,($__wb|0),($__wn|0),($0|0));
          $736 = __THREW__; __THREW__ = 0;
          $737 = $736&1;
          if ($737) {
           label = 36;
           break L24;
          }
         }
         $738 = HEAP32[$__b>>2]|0;
         $739 = ((($738)) + 12|0);
         $740 = HEAP32[$739>>2]|0;
         $741 = ((($738)) + 16|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = ($740|0)==($742|0);
         if ($743) {
          $744 = HEAP32[$738>>2]|0;
          $745 = ((($744)) + 36|0);
          $746 = HEAP32[$745>>2]|0;
          __THREW__ = 0;
          $747 = (invoke_ii($746|0,($738|0))|0);
          $748 = __THREW__; __THREW__ = 0;
          $749 = $748&1;
          if ($749) {
           label = 36;
           break L24;
          } else {
           $$0$i$i83 = $747;
          }
         } else {
          $750 = HEAP8[$740>>0]|0;
          $751 = $750&255;
          $$0$i$i83 = $751;
         }
         $752 = $$0$i$i83&255;
         $753 = HEAP32[$__wn>>2]|0;
         $754 = ((($753)) + 1|0);
         HEAP32[$__wn>>2] = $754;
         HEAP8[$753>>0] = $752;
         $755 = (($678) + -1)|0;
         HEAP32[$__fd>>2] = $755;
         $756 = HEAP32[$__b>>2]|0;
         $757 = ((($756)) + 12|0);
         $758 = HEAP32[$757>>2]|0;
         $759 = ((($756)) + 16|0);
         $760 = HEAP32[$759>>2]|0;
         $761 = ($758|0)==($760|0);
         if ($761) {
          $762 = HEAP32[$756>>2]|0;
          $763 = ((($762)) + 40|0);
          $764 = HEAP32[$763>>2]|0;
          __THREW__ = 0;
          (invoke_ii($764|0,($756|0))|0);
          $765 = __THREW__; __THREW__ = 0;
          $766 = $765&1;
          if ($766) {
           label = 36;
           break L24;
          } else {
           $$pre$i2$i$i99 = $$pre$i2$i$i99291310;$678 = $755;$696 = $876;
           continue;
          }
         } else {
          $767 = ((($758)) + 1|0);
          HEAP32[$757>>2] = $767;
          $$pre$i2$i$i99 = $$pre$i2$i$i99291310;$678 = $755;$696 = $876;
          continue;
         }
        }
       }
      } while(0);
      $768 = HEAP32[$__wn>>2]|0;
      $769 = HEAP32[$__wb>>2]|0;
      $770 = ($768|0)==($769|0);
      if ($770) {
       label = 249;
       break L24;
      } else {
       $869 = $874;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L285: do {
     if ((label|0) == 58) {
      while(1) {
       label = 0;
       $132 = HEAP32[$__b>>2]|0;
       $133 = ($132|0)==(0|0);
       do {
        if ($133) {
         $147 = 0;
        } else {
         $134 = ((($132)) + 12|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ((($132)) + 16|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = ($135|0)==($137|0);
         if ($138) {
          $139 = HEAP32[$132>>2]|0;
          $140 = ((($139)) + 36|0);
          $141 = HEAP32[$140>>2]|0;
          __THREW__ = 0;
          $142 = (invoke_ii($141|0,($132|0))|0);
          $143 = __THREW__; __THREW__ = 0;
          $144 = $143&1;
          if ($144) {
           label = 34;
           break L24;
          }
          $145 = ($142|0)==(-1);
          if ($145) {
           HEAP32[$__b>>2] = 0;
           $147 = 0;
           break;
          } else {
           $$pre$i$i$i63 = HEAP32[$__b>>2]|0;
           $147 = $$pre$i$i$i63;
           break;
          }
         } else {
          $147 = $132;
         }
        }
       } while(0);
       $146 = ($147|0)==(0|0);
       $148 = ($149|0)==(0|0);
       do {
        if ($148) {
         $$pre$i2$i$i67305 = $$pre$i2$i$i67;
         label = 70;
        } else {
         $150 = ((($149)) + 12|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ((($149)) + 16|0);
         $153 = HEAP32[$152>>2]|0;
         $154 = ($151|0)==($153|0);
         if (!($154)) {
          if ($146) {
           $$pre$i2$i$i67307 = $$pre$i2$i$i67;$870 = $149;
           break;
          } else {
           $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
         $155 = HEAP32[$149>>2]|0;
         $156 = ((($155)) + 36|0);
         $157 = HEAP32[$156>>2]|0;
         __THREW__ = 0;
         $158 = (invoke_ii($157|0,($149|0))|0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if ($160) {
          label = 34;
          break L24;
         }
         $161 = ($158|0)==(-1);
         if ($161) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i67305 = 0;
          label = 70;
          break;
         } else {
          $162 = ($$pre$i2$i$i67|0)==(0|0);
          $tmp$i$i69 = $146 ^ $162;
          if ($tmp$i$i69) {
           $$pre$i2$i$i67307 = $$pre$i2$i$i67;$870 = $$pre$i2$i$i67;
           break;
          } else {
           $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
        }
       } while(0);
       if ((label|0) == 70) {
        label = 0;
        if ($146) {
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L285;
        } else {
         $$pre$i2$i$i67307 = $$pre$i2$i$i67305;$870 = 0;
        }
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = ((($163)) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ((($163)) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = ((($169)) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 34;
         break L24;
        } else {
         $$0$i$i73 = $172;
        }
       } else {
        $175 = HEAP8[$165>>0]|0;
        $176 = $175&255;
        $$0$i$i73 = $176;
       }
       $177 = $$0$i$i73&255;
       $isascii1$i76 = ($177<<24>>24)>(-1);
       if (!($isascii1$i76)) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $sext240 = $$0$i$i73 << 24;
       $178 = $sext240 >> 24;
       $179 = HEAP32[$17>>2]|0;
       $180 = (($179) + ($178<<1)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $181 & 8192;
       $183 = ($182<<16>>16)==(0);
       if ($183) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $184 = HEAP32[$__b>>2]|0;
       $185 = ((($184)) + 12|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ((($184)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($186|0)==($188|0);
       if ($189) {
        $190 = HEAP32[$184>>2]|0;
        $191 = ((($190)) + 40|0);
        $192 = HEAP32[$191>>2]|0;
        __THREW__ = 0;
        $193 = (invoke_ii($192|0,($184|0))|0);
        $194 = __THREW__; __THREW__ = 0;
        $195 = $194&1;
        if ($195) {
         label = 34;
         break L24;
        } else {
         $$0$i$i80 = $193;
        }
       } else {
        $196 = ((($186)) + 1|0);
        HEAP32[$185>>2] = $196;
        $197 = HEAP8[$186>>0]|0;
        $198 = $197&255;
        $$0$i$i80 = $198;
       }
       $199 = $$0$i$i80&255;
       __THREW__ = 0;
       invoke_vii(593,($__spaces|0),($199|0));
       $200 = __THREW__; __THREW__ = 0;
       $201 = $200&1;
       if ($201) {
        label = 34;
        break L24;
       } else {
        $$pre$i2$i$i67 = $$pre$i2$i$i67307;$149 = $870;
        label = 58;
       }
      }
     }
    } while(0);
    $773 = (($__p$0) + 1)|0;
    $867 = $869;$__p$0 = $773;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L319:    switch (label|0) {
    case 34: {
     $67 = ___cxa_find_matching_catch_2()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L21;
     break;
    }
    case 35: {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index7 = $70;
     break L21;
     break;
    }
    case 36: {
     $71 = ___cxa_find_matching_catch_2()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index7 = $72;
     break L21;
     break;
    }
    case 37: {
     $73 = ___cxa_find_matching_catch_2()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index7 = $74;
     break L21;
     break;
    }
    case 38: {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index7 = $76;
     break L21;
     break;
    }
    case 56: {
     $129 = HEAP32[$__err>>2]|0;
     $130 = $129 | 4;
     HEAP32[$__err>>2] = $130;
     $$10 = 0;
     break;
    }
    case 120: {
     $375 = HEAP32[$__err>>2]|0;
     $376 = $375 | 4;
     HEAP32[$__err>>2] = $376;
     $$10 = 0;
     break;
    }
    case 160: {
     $515 = HEAP32[$__err>>2]|0;
     $516 = $515 | 4;
     HEAP32[$__err>>2] = $516;
     $$10 = 0;
     break;
    }
    case 215: {
     $663 = HEAP32[$__err>>2]|0;
     $664 = $663 | 4;
     HEAP32[$__err>>2] = $664;
     $$10 = 0;
     break;
    }
    case 239: {
     $731 = HEAP32[$__err>>2]|0;
     $732 = $731 | 4;
     HEAP32[$__err>>2] = $732;
     $$10 = 0;
     break;
    }
    case 249: {
     $771 = HEAP32[$__err>>2]|0;
     $772 = $771 | 4;
     HEAP32[$__err>>2] = $772;
     $$10 = 0;
     break;
    }
    case 251: {
     $774 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L321: do {
      if (!($774)) {
       $775 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $776 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $777 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L323: while(1) {
        $778 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $779 = $778 & 1;
        $780 = ($779<<24>>24)==(0);
        if ($780) {
         $782 = $778&255;
         $783 = $782 >>> 1;
         $785 = $783;
        } else {
         $781 = HEAP32[$777>>2]|0;
         $785 = $781;
        }
        $784 = ($__i$0>>>0)<($785>>>0);
        if (!($784)) {
         break L321;
        }
        $786 = HEAP32[$__b>>2]|0;
        $787 = ($786|0)==(0|0);
        do {
         if ($787) {
          $801 = 0;
         } else {
          $788 = ((($786)) + 12|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ((($786)) + 16|0);
          $791 = HEAP32[$790>>2]|0;
          $792 = ($789|0)==($791|0);
          if ($792) {
           $793 = HEAP32[$786>>2]|0;
           $794 = ((($793)) + 36|0);
           $795 = HEAP32[$794>>2]|0;
           __THREW__ = 0;
           $796 = (invoke_ii($795|0,($786|0))|0);
           $797 = __THREW__; __THREW__ = 0;
           $798 = $797&1;
           if ($798) {
            label = 33;
            break L323;
           }
           $799 = ($796|0)==(-1);
           if ($799) {
            HEAP32[$__b>>2] = 0;
            $801 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $801 = $$pre$i$i$i;
            break;
           }
          } else {
           $801 = $786;
          }
         }
        } while(0);
        $800 = ($801|0)==(0|0);
        $802 = HEAP32[$__e>>2]|0;
        $803 = ($802|0)==(0|0);
        do {
         if ($803) {
          label = 269;
         } else {
          $804 = ((($802)) + 12|0);
          $805 = HEAP32[$804>>2]|0;
          $806 = ((($802)) + 16|0);
          $807 = HEAP32[$806>>2]|0;
          $808 = ($805|0)==($807|0);
          if ($808) {
           $809 = HEAP32[$802>>2]|0;
           $810 = ((($809)) + 36|0);
           $811 = HEAP32[$810>>2]|0;
           __THREW__ = 0;
           $812 = (invoke_ii($811|0,($802|0))|0);
           $813 = __THREW__; __THREW__ = 0;
           $814 = $813&1;
           if ($814) {
            label = 33;
            break L323;
           }
           $815 = ($812|0)==(-1);
           if ($815) {
            HEAP32[$__e>>2] = 0;
            label = 269;
            break;
           }
          }
          if (!($800)) {
           label = 276;
           break L323;
          }
         }
        } while(0);
        if ((label|0) == 269) {
         label = 0;
         if ($800) {
          label = 276;
          break;
         }
        }
        $816 = HEAP32[$__b>>2]|0;
        $817 = ((($816)) + 12|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ((($816)) + 16|0);
        $820 = HEAP32[$819>>2]|0;
        $821 = ($818|0)==($820|0);
        if ($821) {
         $822 = HEAP32[$816>>2]|0;
         $823 = ((($822)) + 36|0);
         $824 = HEAP32[$823>>2]|0;
         __THREW__ = 0;
         $825 = (invoke_ii($824|0,($816|0))|0);
         $826 = __THREW__; __THREW__ = 0;
         $827 = $826&1;
         if ($827) {
          label = 33;
          break;
         } else {
          $$0$i$i = $825;
         }
        } else {
         $828 = HEAP8[$818>>0]|0;
         $829 = $828&255;
         $$0$i$i = $829;
        }
        $830 = $$0$i$i&255;
        $831 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $832 = $831 & 1;
        $833 = ($832<<24>>24)==(0);
        if ($833) {
         $836 = $775;
        } else {
         $834 = HEAP32[$776>>2]|0;
         $836 = $834;
        }
        $835 = (($836) + ($__i$0)|0);
        $837 = HEAP8[$835>>0]|0;
        $838 = ($830<<24>>24)==($837<<24>>24);
        if (!($838)) {
         label = 276;
         break;
        }
        $841 = (($__i$0) + 1)|0;
        $842 = HEAP32[$__b>>2]|0;
        $843 = ((($842)) + 12|0);
        $844 = HEAP32[$843>>2]|0;
        $845 = ((($842)) + 16|0);
        $846 = HEAP32[$845>>2]|0;
        $847 = ($844|0)==($846|0);
        if ($847) {
         $848 = HEAP32[$842>>2]|0;
         $849 = ((($848)) + 40|0);
         $850 = HEAP32[$849>>2]|0;
         __THREW__ = 0;
         (invoke_ii($850|0,($842|0))|0);
         $851 = __THREW__; __THREW__ = 0;
         $852 = $851&1;
         if ($852) {
          label = 33;
          break;
         } else {
          $__i$0 = $841;
          continue;
         }
        } else {
         $853 = ((($844)) + 1|0);
         HEAP32[$843>>2] = $853;
         $__i$0 = $841;
         continue;
        }
       }
       if ((label|0) == 33) {
        $65 = ___cxa_find_matching_catch_2()|0;
        $66 = tempRet0;
        $lpad$phi$index = $65;$lpad$phi$index7 = $66;
        break L21;
       }
       else if ((label|0) == 276) {
        $839 = HEAP32[$__err>>2]|0;
        $840 = $839 | 4;
        HEAP32[$__err>>2] = $840;
        $$10 = 0;
        break L319;
       }
      }
     } while(0);
     $854 = HEAP32[$__gb>>2]|0;
     $855 = ($854|0)==($$lcssa394|0);
     if ($855) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$854,$$lcssa394,$__et);
      $856 = HEAP32[$__et>>2]|0;
      $857 = ($856|0)==(0);
      if ($857) {
       $$10 = 1;
       break;
      } else {
       $858 = HEAP32[$__err>>2]|0;
       $859 = $858 | 4;
       HEAP32[$__err>>2] = $859;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $860 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $861 = ($860|0)==(0|0);
   if (!($861)) {
    $862 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($862|0,($860|0));
    $863 = __THREW__; __THREW__ = 0;
    $864 = $863&1;
    if ($864) {
     $865 = ___cxa_find_matching_catch_3(0|0)|0;
     $866 = tempRet0;
     ___clang_call_terminate($865);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch_3(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i14 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i24 = 0, $__i$0$i$i$i29 = 0, $__i$0$i$i$i34 = 0, $__i$0$i$i$i4 = 0, $__i$0$i$i$i9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i15 = 0, $exitcond$i$i$i20 = 0, $exitcond$i$i$i25 = 0, $exitcond$i$i$i30 = 0, $exitcond$i$i$i35 = 0, $exitcond$i$i$i5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35180)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = ((($__nsn)) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $29 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$29>>2] = 0;
   $30 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $30;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $31 = HEAP32[$10>>2]|0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
  $34 = HEAP8[$__psn>>0]|0;
  $35 = $34 & 1;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $40 = ((($__psn)) + 1|0);
   HEAP8[$40>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $37 = ((($__psn)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP8[$38>>0] = 0;
   $39 = ((($__psn)) + 4|0);
   HEAP32[$39>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__psn|0),0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i4 = 0;
  while(1) {
   $exitcond$i$i$i5 = ($__i$0$i$i$i4|0)==(3);
   if ($exitcond$i$i$i5) {
    break;
   }
   $45 = (($2) + ($__i$0$i$i$i4<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = (($__i$0$i$i$i4) + 1)|0;
   $__i$0$i$i$i4 = $46;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $47 = HEAP32[$10>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = ((($51)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $54;
  $55 = HEAP32[$10>>2]|0;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
  $58 = HEAP8[$__grp>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $64 = ((($__grp)) + 1|0);
   HEAP8[$64>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $61 = ((($__grp)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP8[$62>>0] = 0;
   $63 = ((($__grp)) + 4|0);
   HEAP32[$63>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $69 = (($3) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $70;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $71 = HEAP32[$10>>2]|0;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
  $74 = HEAP8[$__sym>>0]|0;
  $75 = $74 & 1;
  $76 = ($75<<24>>24)==(0);
  if ($76) {
   $80 = ((($__sym)) + 1|0);
   HEAP8[$80>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $77 = ((($__sym)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP8[$78>>0] = 0;
   $79 = ((($__sym)) + 4|0);
   HEAP32[$79>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__sym|0),0);
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   $83 = ___cxa_find_matching_catch_3(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i14 = 0;
  while(1) {
   $exitcond$i$i$i15 = ($__i$0$i$i$i14|0)==(3);
   if ($exitcond$i$i$i15) {
    break;
   }
   $85 = (($4) + ($__i$0$i$i$i14<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($__i$0$i$i$i14) + 1)|0;
   $__i$0$i$i$i14 = $86;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $87 = HEAP32[$10>>2]|0;
  $88 = ((($87)) + 36|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
  $storemerge = $90;
 } else {
  $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35172)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 44|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
  $95 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
  $96 = HEAP32[$91>>2]|0;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
  $99 = HEAP8[$__nsn>>0]|0;
  $100 = $99 & 1;
  $101 = ($100<<24>>24)==(0);
  if ($101) {
   $105 = ((($__nsn)) + 1|0);
   HEAP8[$105>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $102 = ((($__nsn)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP8[$103>>0] = 0;
   $104 = ((($__nsn)) + 4|0);
   HEAP32[$104>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__nsn|0),0);
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   $108 = ___cxa_find_matching_catch_3(0|0)|0;
   $109 = tempRet0;
   ___clang_call_terminate($108);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i19 = 0;
  while(1) {
   $exitcond$i$i$i20 = ($__i$0$i$i$i19|0)==(3);
   if ($exitcond$i$i$i20) {
    break;
   }
   $110 = (($6) + ($__i$0$i$i$i19<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($__i$0$i$i$i19) + 1)|0;
   $__i$0$i$i$i19 = $111;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  $112 = HEAP32[$91>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
  $115 = HEAP8[$__psn>>0]|0;
  $116 = $115 & 1;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   $121 = ((($__psn)) + 1|0);
   HEAP8[$121>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $118 = ((($__psn)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP8[$119>>0] = 0;
   $120 = ((($__psn)) + 4|0);
   HEAP32[$120>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__psn|0),0);
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if ($123) {
   $124 = ___cxa_find_matching_catch_3(0|0)|0;
   $125 = tempRet0;
   ___clang_call_terminate($124);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i24 = 0;
  while(1) {
   $exitcond$i$i$i25 = ($__i$0$i$i$i24|0)==(3);
   if ($exitcond$i$i$i25) {
    break;
   }
   $126 = (($7) + ($__i$0$i$i$i24<<2)|0);
   HEAP32[$126>>2] = 0;
   $127 = (($__i$0$i$i$i24) + 1)|0;
   $__i$0$i$i$i24 = $127;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $128 = HEAP32[$91>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
  HEAP8[$__dp>>0] = $131;
  $132 = HEAP32[$91>>2]|0;
  $133 = ((($132)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
  HEAP8[$__ts>>0] = $135;
  $136 = HEAP32[$91>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
  $139 = HEAP8[$__grp>>0]|0;
  $140 = $139 & 1;
  $141 = ($140<<24>>24)==(0);
  if ($141) {
   $145 = ((($__grp)) + 1|0);
   HEAP8[$145>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $142 = ((($__grp)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   HEAP8[$143>>0] = 0;
   $144 = ((($__grp)) + 4|0);
   HEAP32[$144>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $146 = __THREW__; __THREW__ = 0;
  $147 = $146&1;
  if ($147) {
   $148 = ___cxa_find_matching_catch_3(0|0)|0;
   $149 = tempRet0;
   ___clang_call_terminate($148);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i29 = 0;
  while(1) {
   $exitcond$i$i$i30 = ($__i$0$i$i$i29|0)==(3);
   if ($exitcond$i$i$i30) {
    break;
   }
   $150 = (($8) + ($__i$0$i$i$i29<<2)|0);
   HEAP32[$150>>2] = 0;
   $151 = (($__i$0$i$i$i29) + 1)|0;
   $__i$0$i$i$i29 = $151;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $152 = HEAP32[$91>>2]|0;
  $153 = ((($152)) + 24|0);
  $154 = HEAP32[$153>>2]|0;
  FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
  $155 = HEAP8[$__sym>>0]|0;
  $156 = $155 & 1;
  $157 = ($156<<24>>24)==(0);
  if ($157) {
   $161 = ((($__sym)) + 1|0);
   HEAP8[$161>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $158 = ((($__sym)) + 8|0);
   $159 = HEAP32[$158>>2]|0;
   HEAP8[$159>>0] = 0;
   $160 = ((($__sym)) + 4|0);
   HEAP32[$160>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__sym|0),0);
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch_3(0|0)|0;
   $165 = tempRet0;
   ___clang_call_terminate($164);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i34 = 0;
  while(1) {
   $exitcond$i$i$i35 = ($__i$0$i$i$i34|0)==(3);
   if ($exitcond$i$i$i35) {
    break;
   }
   $166 = (($9) + ($__i$0$i$i$i34<<2)|0);
   HEAP32[$166>>2] = 0;
   $167 = (($__i$0$i$i$i34) + 1)|0;
   $__i$0$i$i$i34 = $167;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $168 = HEAP32[$91>>2]|0;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
  $storemerge = $171;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(589|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = $4;
 $10 = (($8) - ($4))|0;
 $11 = $2 ? $9 : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $23 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (597);
 $22 = (($23) + ($10)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(589|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (597);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (589);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(387,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$95 = $__wbuf;
  label = 37;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(388,($__loc|0),(33460|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(590,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(593,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $__w$0 = $42;
      while(1) {
       $45 = ($__w$0>>>0)<($44>>>0);
       if (!($45)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $46 = HEAP8[$__w$0>>0]|0;
       $47 = ($46<<24>>24)==($39<<24>>24);
       if (!($47)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $48 = ((($__w$0)) + 1|0);
       $__w$0 = $48;
      }
      __THREW__ = 0;
      (invoke_iiii(598,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $66 = 0;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        }
        $64 = ($61|0)==(-1);
        if ($64) {
         HEAP32[$__b>>2] = 0;
         $66 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $66 = $$pre$i$i$i;
         break;
        }
       } else {
        $66 = $51;
       }
      }
     } while(0);
     $65 = ($66|0)==(0|0);
     $67 = ($10|0)==(0);
     do {
      if ($67) {
       label = 30;
      } else {
       $68 = ((($13)) + 12|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ((($13)) + 16|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($69|0)==($71|0);
       if ($72) {
        $73 = $10;
        $74 = HEAP32[$73>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($13|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         break L4;
        }
        $80 = ($77|0)==(-1);
        if ($80) {
         HEAP32[$__e>>2] = 0;
         label = 30;
         break;
        }
       }
       if (!($65)) {
        label = 31;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($65) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch_3(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch_3(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $27 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($16)|0);
   $28 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $__first;$__p$0 = $26;
   while(1) {
    $29 = ($$0|0)==($__last|0);
    if ($29) {
     break;
    }
    $30 = HEAP8[$$0>>0]|0;
    HEAP8[$__p$0>>0] = $30;
    $31 = ((($__p$0)) + 1|0);
    $32 = ((($$0)) + 1|0);
    $$0 = $32;$__p$0 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $33 = (($16) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = ((($this)) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (589);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(387,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $34;$$1211 = $35;$110 = 589;$111 = $__wbuf;
  label = 49;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(388,($__loc|0),(33492|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(599,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(28924|0),((28934)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = $23 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(548);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $__h$sroa$0$0 = $30;
         } else {
          $__h$sroa$0$1 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $__h$sroa$0$1 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 40|0);
         $46 = $__atoms;
         $48 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $47 = ($__w$0>>>0)<($48>>>0);
          if (!($47)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $51 = HEAP32[$__w$0>>2]|0;
          $$0$i = $__atoms;
          while(1) {
           $52 = ($$0$i|0)==($45|0);
           if ($52) {
            $$0$lcssa$i = $45;
            break;
           }
           $53 = HEAP32[$$0$i>>2]|0;
           $54 = ($53|0)==($51|0);
           if ($54) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $55 = ((($$0$i)) + 4|0);
           $$0$i = $55;
          }
          $56 = $$0$lcssa$i;
          $57 = (($56) - ($46))|0;
          $58 = $57 >> 2;
          $59 = (28924 + ($58)|0);
          $60 = HEAP8[$59>>0]|0;
          HEAP8[$__nc$2>>0] = $60;
          $61 = ((($__w$0)) + 4|0);
          $62 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $48 = $$pre;$__nc$2 = $62;$__w$0 = $61;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $49 = (_sscanf($__nbuf,28809,$vararg_buffer)|0);
         $50 = ($49|0)==(1);
         if (!($50)) {
          __THREW__ = 0;
          invoke_vi(591,(28813|0));
          $63 = __THREW__; __THREW__ = 0;
          $64 = $63&1;
          if ($64) {
           $__h$sroa$0$0 = $__h$sroa$0$1;
           break;
          }
         }
         $65 = ($__h$sroa$0$1|0)==(0);
         if (!($65)) {
          $66 = $__h$sroa$0$1;
          _free($66);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch_2()|0;
       $39 = tempRet0;
       $40 = ($__h$sroa$0$0|0)==(0);
       if ($40) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $__h$sroa$0$0;
       _free($41);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__b>>2]|0;
     $68 = ($67|0)==(0|0);
     do {
      if ($68) {
       $116 = 1;
      } else {
       $69 = ((($67)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($67)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = HEAP32[$67>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($67|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $77;
        }
       } else {
        $80 = HEAP32[$70>>2]|0;
        $$0$i$i$i$i = $80;
       }
       $81 = ($$0$i$i$i$i|0)==(-1);
       if ($81) {
        HEAP32[$__b>>2] = 0;
        $116 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $116 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $82 = HEAP32[$__e>>2]|0;
     $83 = ($82|0)==(0|0);
     do {
      if ($83) {
       label = 40;
      } else {
       $84 = ((($82)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($82)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ((($89)) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($82|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $92;
        }
       } else {
        $95 = HEAP32[$85>>2]|0;
        $$0$i$i1$i$i = $95;
       }
       $96 = ($$0$i$i1$i$i|0)==(-1);
       if ($96) {
        HEAP32[$__e>>2] = 0;
        label = 40;
        break;
       } else {
        if ($116) {
         break;
        } else {
         label = 42;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      if ($116) {
       label = 42;
      }
     }
     if ((label|0) == 42) {
      $97 = HEAP32[$__err>>2]|0;
      $98 = $97 | 2;
      HEAP32[$__err>>2] = $98;
     }
     $99 = HEAP32[$__b>>2]|0;
     $100 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
     $101 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $102 = ($101|0)==(0|0);
     if (!($102)) {
      $103 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($103|0,($101|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $106 = ___cxa_find_matching_catch_3(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($99|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $108 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($108)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $109 = ($$pre7|0)==(0|0);
  if ($109) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$110 = $$pre15;$111 = $$pre7;
   label = 49;
  }
 }
 if ((label|0) == 49) {
  __THREW__ = 0;
  invoke_vi($110|0,($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i107 = 0, $$0$i$i$i$i141 = 0, $$0$i$i$i$i173 = 0, $$0$i$i$i$i198 = 0, $$0$i$i$i$i45 = 0, $$0$i$i$i$i66 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i113 = 0, $$0$i$i1$i$i147 = 0, $$0$i$i1$i$i179 = 0, $$0$i$i1$i$i204 = 0, $$0$i$i1$i$i51 = 0, $$0$i$i1$i$i72 = 0, $$0$i$i101 = 0, $$0$i$i104 = 0, $$0$i$i125 = 0, $$0$i$i134 = 0, $$0$i$i137 = 0;
 var $$0$i$i159 = 0, $$0$i$i170 = 0, $$0$i$i194 = 0, $$0$i$i60 = 0, $$0$i$i64 = 0, $$0$i$i81 = 0, $$0$i$i88 = 0, $$0$i$i93 = 0, $$10 = 0, $$lcssa = 0, $$lcssa450 = 0, $$lcssa461 = 0, $$phi$trans$insert = 0, $$phi$trans$insert323 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i109 = 0, $$pre$i$i$i143 = 0, $$pre$i$i$i175 = 0, $$pre$i$i$i200 = 0;
 var $$pre$i$i$i47 = 0, $$pre$i$i$i68 = 0, $$pre$i3$i$i115 = 0, $$pre$i3$i$i115309$ph = 0, $$pre$i3$i$i115309333 = 0, $$pre$i3$i$i149 = 0, $$pre$i3$i$i181 = 0, $$pre$i3$i$i181302 = 0, $$pre$i3$i$i181304 = 0, $$pre$i3$i$i206 = 0, $$pre$i3$i$i206317 = 0, $$pre$i3$i$i206318 = 0, $$pre$i3$i$i74 = 0, $$pre$i3$i$i74327 = 0, $$pre$i3$i$i74329 = 0, $$pre306 = 0, $$pre308 = 0, $$pre311 = 0, $$pre312 = 0, $$pre313 = 0;
 var $$pre314 = 0, $$pre315 = 0, $$pre316 = 0, $$pre320 = 0, $$pre321 = 0, $$pre322 = 0, $$pre324 = 0, $$pre325 = 0, $$pre326 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0;
 var $__i$0$i$i29 = 0, $__i$0$i$i31 = 0, $__i$0$i$i35 = 0, $__i$0$i$i40 = 0, $__ng$0 = 0, $__ng$0$lcssa451 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa459 = 0;
 var $__sym_space_end$sroa$0$0460 = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i30 = 0, $exitcond$i$i32 = 0, $exitcond$i$i36 = 0, $exitcond$i$i41 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond25 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i110 = 0;
 var $phitmp$i$i$i144 = 0, $phitmp$i$i$i176 = 0, $phitmp$i$i$i201 = 0, $phitmp$i$i$i48 = 0, $phitmp$i$i$i69 = 0, $phitmp$i4$i$i116 = 0, $phitmp$i4$i$i182 = 0, $phitmp$i4$i$i207 = 0, $phitmp$i4$i$i75 = 0, $switch = 0, $tmp$i$i118 = 0, $tmp$i$i184 = 0, $tmp$i$i209 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (589);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($__i$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i29) + 1)|0;
  $__i$0$i$i29 = $7;
 }
 $__i$0$i$i31 = 0;
 while(1) {
  $exitcond$i$i32 = ($__i$0$i$i31|0)==(3);
  if ($exitcond$i$i32) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i31<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i31) + 1)|0;
  $__i$0$i$i31 = $9;
 }
 $__i$0$i$i35 = 0;
 while(1) {
  $exitcond$i$i36 = ($__i$0$i$i35|0)==(3);
  if ($exitcond$i$i36) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i35<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i35) + 1)|0;
  $__i$0$i$i35 = $11;
 }
 $__i$0$i$i40 = 0;
 while(1) {
  $exitcond$i$i41 = ($__i$0$i$i40|0)==(3);
  if ($exitcond$i$i41) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i40<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i40) + 1)|0;
  $__i$0$i$i40 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(600,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $74 = ___cxa_find_matching_catch_2()|0;
   $75 = tempRet0;
   $lpad$phi$index = $74;$lpad$phi$index8 = $75;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $847 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $29 = ($__p$0>>>0)<(4);
    if (!($29)) {
     $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 259;
     break;
    }
    $30 = HEAP32[$__b>>2]|0;
    $31 = ($30|0)==(0|0);
    do {
     if ($31) {
      $848 = 1;
     } else {
      $32 = ((($30)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($30)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if ($36) {
       $37 = HEAP32[$30>>2]|0;
       $38 = ((($37)) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_ii($39|0,($30|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 40;
        break L24;
       } else {
        $$0$i$i$i$i45 = $40;
       }
      } else {
       $43 = HEAP32[$33>>2]|0;
       $$0$i$i$i$i45 = $43;
      }
      $44 = ($$0$i$i$i$i45|0)==(-1);
      if ($44) {
       HEAP32[$__b>>2] = 0;
       $848 = 1;
       break;
      } else {
       $$pre$i$i$i47 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i48 = ($$pre$i$i$i47|0)==(0|0);
       $848 = $phitmp$i$i$i48;
       break;
      }
     }
    } while(0);
    $45 = HEAP32[$__e>>2]|0;
    $46 = ($45|0)==(0|0);
    do {
     if ($46) {
      label = 32;
     } else {
      $47 = ((($45)) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($45)) + 16|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)==($50|0);
      if ($51) {
       $52 = HEAP32[$45>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       __THREW__ = 0;
       $55 = (invoke_ii($54|0,($45|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        label = 40;
        break L24;
       } else {
        $$0$i$i1$i$i51 = $55;
       }
      } else {
       $58 = HEAP32[$48>>2]|0;
       $$0$i$i1$i$i51 = $58;
      }
      $59 = ($$0$i$i1$i$i51|0)==(-1);
      if ($59) {
       HEAP32[$__e>>2] = 0;
       label = 32;
       break;
      } else {
       if ($848) {
        $849 = $45;
        break;
       } else {
        $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 259;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($848) {
      $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 259;
      break;
     } else {
      $849 = 0;
     }
    }
    $83 = (($__pat) + ($__p$0)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    L49: do {
     switch ($85|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $87 = HEAP32[$__b>>2]|0;
       $88 = ((($87)) + 12|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($87)) + 16|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($89|0)==($91|0);
       if ($92) {
        $93 = HEAP32[$87>>2]|0;
        $94 = ((($93)) + 36|0);
        $95 = HEAP32[$94>>2]|0;
        __THREW__ = 0;
        $96 = (invoke_ii($95|0,($87|0))|0);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         label = 40;
         break L24;
        } else {
         $$0$i$i60 = $96;
        }
       } else {
        $99 = HEAP32[$89>>2]|0;
        $$0$i$i60 = $99;
       }
       $100 = HEAP32[$__ct>>2]|0;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_iiii($102|0,($__ct|0),8192,($$0$i$i60|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 40;
        break L24;
       }
       if (!($103)) {
        label = 58;
        break L24;
       }
       $106 = HEAP32[$__b>>2]|0;
       $107 = ((($106)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($106)) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108|0)==($110|0);
       if ($111) {
        $112 = HEAP32[$106>>2]|0;
        $113 = ((($112)) + 40|0);
        $114 = HEAP32[$113>>2]|0;
        __THREW__ = 0;
        $115 = (invoke_ii($114|0,($106|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 40;
         break L24;
        } else {
         $$0$i$i64 = $115;
        }
       } else {
        $118 = ((($108)) + 4|0);
        HEAP32[$107>>2] = $118;
        $119 = HEAP32[$108>>2]|0;
        $$0$i$i64 = $119;
       }
       __THREW__ = 0;
       invoke_vii(601,($__spaces|0),($$0$i$i64|0));
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 40;
        break L24;
       } else {
        $$pre$i3$i$i74 = $849;$141 = $849;
        label = 60;
       }
      }
      break;
     }
     case 0:  {
      $124 = ($__p$0|0)==(3);
      if ($124) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i3$i$i74 = $849;$141 = $849;
       label = 60;
      }
      break;
     }
     case 3:  {
      $191 = HEAP8[$__psn>>0]|0;
      $192 = $191 & 1;
      $193 = ($192<<24>>24)==(0);
      $194 = HEAP32[$17>>2]|0;
      $195 = $191&255;
      $196 = $195 >>> 1;
      $197 = $193 ? $196 : $194;
      $198 = HEAP8[$__nsn>>0]|0;
      $199 = $198 & 1;
      $200 = ($199<<24>>24)==(0);
      $201 = HEAP32[$18>>2]|0;
      $202 = $198&255;
      $203 = $202 >>> 1;
      $204 = $200 ? $203 : $201;
      $205 = (0 - ($204))|0;
      $206 = ($197|0)==($205|0);
      if ($206) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $207 = ($197|0)==(0);
       if ($207) {
        $249 = HEAP32[$__b>>2]|0;
        $250 = ((($249)) + 12|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ((($249)) + 16|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = ($251|0)==($253|0);
        if ($254) {
         $255 = HEAP32[$249>>2]|0;
         $256 = ((($255)) + 36|0);
         $257 = HEAP32[$256>>2]|0;
         __THREW__ = 0;
         $258 = (invoke_ii($257|0,($249|0))|0);
         $259 = __THREW__; __THREW__ = 0;
         $260 = $259&1;
         if ($260) {
          label = 40;
          break L24;
         }
         $$pre326 = HEAP8[$__nsn>>0]|0;
         $$0$i$i125 = $258;$263 = $$pre326;
        } else {
         $261 = HEAP32[$251>>2]|0;
         $$0$i$i125 = $261;$263 = $198;
        }
        $262 = $263 & 1;
        $264 = ($262<<24>>24)==(0);
        $265 = HEAP32[$19>>2]|0;
        $266 = $264 ? $18 : $265;
        $267 = HEAP32[$266>>2]|0;
        $268 = ($$0$i$i125|0)==($267|0);
        if (!($268)) {
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $269 = HEAP32[$__b>>2]|0;
        $270 = ((($269)) + 12|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($269)) + 16|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($271|0)==($273|0);
        if ($274) {
         $275 = HEAP32[$269>>2]|0;
         $276 = ((($275)) + 40|0);
         $277 = HEAP32[$276>>2]|0;
         __THREW__ = 0;
         (invoke_ii($277|0,($269|0))|0);
         $278 = __THREW__; __THREW__ = 0;
         $279 = $278&1;
         if ($279) {
          label = 40;
          break L24;
         }
        } else {
         $280 = ((($271)) + 4|0);
         HEAP32[$270>>2] = $280;
        }
        HEAP8[$__neg>>0] = 1;
        $281 = HEAP8[$__nsn>>0]|0;
        $282 = $281 & 1;
        $283 = ($282<<24>>24)==(0);
        $284 = HEAP32[$18>>2]|0;
        $285 = $281&255;
        $286 = $285 >>> 1;
        $287 = $283 ? $286 : $284;
        $288 = ($287>>>0)>(1);
        $__nsn$__trailing_sign$0 = $288 ? $__nsn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L49;
       }
       $208 = ($204|0)==(0);
       $209 = HEAP32[$__b>>2]|0;
       $210 = ((($209)) + 12|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ((($209)) + 16|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($211|0)==($213|0);
       if ($208) {
        if ($214) {
         $215 = HEAP32[$209>>2]|0;
         $216 = ((($215)) + 36|0);
         $217 = HEAP32[$216>>2]|0;
         __THREW__ = 0;
         $218 = (invoke_ii($217|0,($209|0))|0);
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         if ($220) {
          label = 40;
          break L24;
         }
         $$pre325 = HEAP8[$__psn>>0]|0;
         $$0$i$i104 = $218;$223 = $$pre325;
        } else {
         $221 = HEAP32[$211>>2]|0;
         $$0$i$i104 = $221;$223 = $191;
        }
        $222 = $223 & 1;
        $224 = ($222<<24>>24)==(0);
        $225 = HEAP32[$20>>2]|0;
        $226 = $224 ? $17 : $225;
        $227 = HEAP32[$226>>2]|0;
        $228 = ($$0$i$i104|0)==($227|0);
        if (!($228)) {
         HEAP8[$__neg>>0] = 1;
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $229 = HEAP32[$__b>>2]|0;
        $230 = ((($229)) + 12|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = ((($229)) + 16|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = ($231|0)==($233|0);
        if ($234) {
         $235 = HEAP32[$229>>2]|0;
         $236 = ((($235)) + 40|0);
         $237 = HEAP32[$236>>2]|0;
         __THREW__ = 0;
         (invoke_ii($237|0,($229|0))|0);
         $238 = __THREW__; __THREW__ = 0;
         $239 = $238&1;
         if ($239) {
          label = 40;
          break L24;
         }
        } else {
         $240 = ((($231)) + 4|0);
         HEAP32[$230>>2] = $240;
        }
        $241 = HEAP8[$__psn>>0]|0;
        $242 = $241 & 1;
        $243 = ($242<<24>>24)==(0);
        $244 = HEAP32[$17>>2]|0;
        $245 = $241&255;
        $246 = $245 >>> 1;
        $247 = $243 ? $246 : $244;
        $248 = ($247>>>0)>(1);
        $__psn$__trailing_sign$0 = $248 ? $__psn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L49;
       }
       if ($214) {
        $289 = HEAP32[$209>>2]|0;
        $290 = ((($289)) + 36|0);
        $291 = HEAP32[$290>>2]|0;
        __THREW__ = 0;
        $292 = (invoke_ii($291|0,($209|0))|0);
        $293 = __THREW__; __THREW__ = 0;
        $294 = $293&1;
        if ($294) {
         label = 40;
         break L24;
        }
        $$pre320 = HEAP8[$__psn>>0]|0;
        $$pre321 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre321)) + 12|0);
        $$pre322 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert323 = ((($$pre321)) + 16|0);
        $$pre324 = HEAP32[$$phi$trans$insert323>>2]|0;
        $$0$i$i137 = $292;$297 = $$pre320;$304 = $$pre321;$306 = $$pre322;$307 = $$pre324;
       } else {
        $295 = HEAP32[$211>>2]|0;
        $$0$i$i137 = $295;$297 = $191;$304 = $209;$306 = $211;$307 = $213;
       }
       $296 = $297 & 1;
       $298 = ($296<<24>>24)==(0);
       $299 = HEAP32[$20>>2]|0;
       $300 = $298 ? $17 : $299;
       $301 = HEAP32[$300>>2]|0;
       $302 = ($$0$i$i137|0)==($301|0);
       $303 = ((($304)) + 12|0);
       $305 = ($306|0)==($307|0);
       if ($302) {
        if ($305) {
         $308 = HEAP32[$304>>2]|0;
         $309 = ((($308)) + 40|0);
         $310 = HEAP32[$309>>2]|0;
         __THREW__ = 0;
         (invoke_ii($310|0,($304|0))|0);
         $311 = __THREW__; __THREW__ = 0;
         $312 = $311&1;
         if ($312) {
          label = 40;
          break L24;
         }
        } else {
         $313 = ((($306)) + 4|0);
         HEAP32[$303>>2] = $313;
        }
        $314 = HEAP8[$__psn>>0]|0;
        $315 = $314 & 1;
        $316 = ($315<<24>>24)==(0);
        $317 = HEAP32[$17>>2]|0;
        $318 = $314&255;
        $319 = $318 >>> 1;
        $320 = $316 ? $319 : $317;
        $321 = ($320>>>0)>(1);
        $__psn$__trailing_sign$022 = $321 ? $__psn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L49;
       }
       if ($305) {
        $322 = HEAP32[$304>>2]|0;
        $323 = ((($322)) + 36|0);
        $324 = HEAP32[$323>>2]|0;
        __THREW__ = 0;
        $325 = (invoke_ii($324|0,($304|0))|0);
        $326 = __THREW__; __THREW__ = 0;
        $327 = $326&1;
        if ($327) {
         label = 40;
         break L24;
        } else {
         $$0$i$i159 = $325;
        }
       } else {
        $328 = HEAP32[$306>>2]|0;
        $$0$i$i159 = $328;
       }
       $329 = HEAP8[$__nsn>>0]|0;
       $330 = $329 & 1;
       $331 = ($330<<24>>24)==(0);
       $332 = HEAP32[$19>>2]|0;
       $333 = $331 ? $18 : $332;
       $334 = HEAP32[$333>>2]|0;
       $335 = ($$0$i$i159|0)==($334|0);
       if (!($335)) {
        label = 123;
        break L24;
       }
       $336 = HEAP32[$__b>>2]|0;
       $337 = ((($336)) + 12|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ((($336)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($338|0)==($340|0);
       if ($341) {
        $342 = HEAP32[$336>>2]|0;
        $343 = ((($342)) + 40|0);
        $344 = HEAP32[$343>>2]|0;
        __THREW__ = 0;
        (invoke_ii($344|0,($336|0))|0);
        $345 = __THREW__; __THREW__ = 0;
        $346 = $345&1;
        if ($346) {
         label = 40;
         break L24;
        }
       } else {
        $347 = ((($338)) + 4|0);
        HEAP32[$337>>2] = $347;
       }
       HEAP8[$__neg>>0] = 1;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$18>>2]|0;
       $352 = $348&255;
       $353 = $352 >>> 1;
       $354 = $350 ? $353 : $351;
       $355 = ($354>>>0)>(1);
       $__nsn$__trailing_sign$023 = $355 ? $__nsn : $__trailing_sign$0;
       $850 = $847;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $358 = ($__trailing_sign$0|0)!=(0|0);
      $359 = ($__p$0>>>0)<(2);
      $or$cond = $359 | $358;
      if (!($or$cond)) {
       $360 = ($__p$0|0)==(2);
       $361 = HEAP8[$27>>0]|0;
       $362 = ($361<<24>>24)!=(0);
       $363 = $360 & $362;
       $brmerge = $22 | $363;
       if (!($brmerge)) {
        $850 = $847;$__trailing_sign$1 = 0;
        break L49;
       }
      }
      $364 = HEAP8[$__sym>>0]|0;
      $365 = $364 & 1;
      $366 = ($365<<24>>24)==(0);
      $367 = HEAP32[$23>>2]|0;
      $368 = $366 ? $24 : $367;
      $369 = $368;
      $370 = ($__p$0|0)==(0);
      L118: do {
       if ($370) {
        $$pre$i3$i$i206 = $849;$424 = $364;$430 = $367;$451 = $849;$__sym_curr_char$sroa$0$0 = $369;
       } else {
        $371 = (($__p$0) + -1)|0;
        $372 = (($__pat) + ($371)|0);
        $373 = HEAP8[$372>>0]|0;
        $switch = ($373&255)<(2);
        if ($switch) {
         $375 = $364;$381 = $367;$__sym_space_end$sroa$0$0 = $369;
         while(1) {
          $374 = $375 & 1;
          $376 = ($374<<24>>24)==(0);
          $377 = HEAP32[$24>>2]|0;
          $378 = $375&255;
          $379 = $378 >>> 1;
          $380 = $376 ? $24 : $381;
          $382 = $376 ? $379 : $377;
          $383 = (($380) + ($382<<2)|0);
          $384 = $__sym_space_end$sroa$0$0;
          $385 = ($384|0)==($383|0);
          if ($385) {
           $396 = $375;$399 = $381;$__sym_space_end$sroa$0$0460 = $__sym_space_end$sroa$0$0;
           break;
          }
          $386 = HEAP32[$384>>2]|0;
          $387 = HEAP32[$__ct>>2]|0;
          $388 = ((($387)) + 12|0);
          $389 = HEAP32[$388>>2]|0;
          __THREW__ = 0;
          $390 = (invoke_iiii($389|0,($__ct|0),8192,($386|0))|0);
          $391 = __THREW__; __THREW__ = 0;
          $392 = $391&1;
          if ($392) {
           label = 37;
           break L24;
          }
          if (!($390)) {
           $__sym_space_end$sroa$0$0$lcssa459 = $__sym_space_end$sroa$0$0;
           label = 131;
           break;
          }
          $393 = ((($384)) + 4|0);
          $394 = $393;
          $$pre311 = HEAP8[$__sym>>0]|0;
          $$pre312 = HEAP32[$23>>2]|0;
          $375 = $$pre311;$381 = $$pre312;$__sym_space_end$sroa$0$0 = $394;
         }
         if ((label|0) == 131) {
          label = 0;
          $$pre313 = HEAP8[$__sym>>0]|0;
          $$pre314 = HEAP32[$23>>2]|0;
          $396 = $$pre313;$399 = $$pre314;$__sym_space_end$sroa$0$0460 = $__sym_space_end$sroa$0$0$lcssa459;
         }
         $395 = $396 & 1;
         $397 = ($395<<24>>24)==(0);
         $398 = $397 ? $24 : $399;
         $400 = $398;
         $401 = (($__sym_space_end$sroa$0$0460) - ($400))|0;
         $402 = $401 >> 2;
         $403 = HEAP8[$__spaces>>0]|0;
         $404 = $403 & 1;
         $405 = ($404<<24>>24)==(0);
         $406 = HEAP32[$25>>2]|0;
         $407 = $403&255;
         $408 = $407 >>> 1;
         $409 = $405 ? $408 : $406;
         $410 = ($402>>>0)>($409>>>0);
         if ($410) {
          $$pre$i3$i$i206 = $849;$424 = $396;$430 = $399;$451 = $849;$__sym_curr_char$sroa$0$0 = $400;
         } else {
          $411 = HEAP32[$26>>2]|0;
          $412 = $405 ? $25 : $411;
          $413 = (($412) + ($409<<2)|0);
          $414 = (0 - ($402))|0;
          $415 = (($413) + ($414<<2)|0);
          $$sink = $398;$417 = $415;
          while(1) {
           $416 = ($417|0)==($413|0);
           if ($416) {
            $$pre$i3$i$i206 = $849;$424 = $396;$430 = $399;$451 = $849;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0460;
            break L118;
           }
           $418 = HEAP32[$417>>2]|0;
           $419 = HEAP32[$$sink>>2]|0;
           $420 = ($418|0)==($419|0);
           if (!($420)) {
            $$pre$i3$i$i206 = $849;$424 = $396;$430 = $399;$451 = $849;$__sym_curr_char$sroa$0$0 = $400;
            break L118;
           }
           $421 = ((($417)) + 4|0);
           $422 = ((($$sink)) + 4|0);
           $$sink = $422;$417 = $421;
          }
         }
        } else {
         $$pre$i3$i$i206 = $849;$424 = $364;$430 = $367;$451 = $849;$__sym_curr_char$sroa$0$0 = $369;
        }
       }
      } while(0);
      L133: while(1) {
       $423 = $424 & 1;
       $425 = ($423<<24>>24)==(0);
       $426 = HEAP32[$24>>2]|0;
       $427 = $424&255;
       $428 = $427 >>> 1;
       $429 = $425 ? $24 : $430;
       $431 = $425 ? $428 : $426;
       $432 = (($429) + ($431<<2)|0);
       $433 = $__sym_curr_char$sroa$0$0;
       $434 = ($433|0)==($432|0);
       if ($434) {
        $$lcssa = $432;
        break;
       }
       $435 = HEAP32[$__b>>2]|0;
       $436 = ($435|0)==(0|0);
       do {
        if ($436) {
         $465 = 1;
        } else {
         $437 = ((($435)) + 12|0);
         $438 = HEAP32[$437>>2]|0;
         $439 = ((($435)) + 16|0);
         $440 = HEAP32[$439>>2]|0;
         $441 = ($438|0)==($440|0);
         if ($441) {
          $442 = HEAP32[$435>>2]|0;
          $443 = ((($442)) + 36|0);
          $444 = HEAP32[$443>>2]|0;
          __THREW__ = 0;
          $445 = (invoke_ii($444|0,($435|0))|0);
          $446 = __THREW__; __THREW__ = 0;
          $447 = $446&1;
          if ($447) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$i$i198 = $445;
          }
         } else {
          $448 = HEAP32[$438>>2]|0;
          $$0$i$i$i$i198 = $448;
         }
         $449 = ($$0$i$i$i$i198|0)==(-1);
         if ($449) {
          HEAP32[$__b>>2] = 0;
          $465 = 1;
          break;
         } else {
          $$pre$i$i$i200 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i201 = ($$pre$i$i$i200|0)==(0|0);
          $465 = $phitmp$i$i$i201;
          break;
         }
        }
       } while(0);
       $450 = ($451|0)==(0|0);
       do {
        if ($450) {
         $$pre$i3$i$i206318 = $$pre$i3$i$i206;
         label = 152;
        } else {
         $452 = ((($451)) + 12|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ((($451)) + 16|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = ($453|0)==($455|0);
         if ($456) {
          $457 = HEAP32[$451>>2]|0;
          $458 = ((($457)) + 36|0);
          $459 = HEAP32[$458>>2]|0;
          __THREW__ = 0;
          $460 = (invoke_ii($459|0,($451|0))|0);
          $461 = __THREW__; __THREW__ = 0;
          $462 = $461&1;
          if ($462) {
           label = 36;
           break L24;
          } else {
           $$0$i$i1$i$i204 = $460;
          }
         } else {
          $463 = HEAP32[$453>>2]|0;
          $$0$i$i1$i$i204 = $463;
         }
         $464 = ($$0$i$i1$i$i204|0)==(-1);
         if ($464) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i206318 = 0;
          label = 152;
          break;
         } else {
          $phitmp$i4$i$i207 = ($$pre$i3$i$i206|0)==(0|0);
          $tmp$i$i209 = $465 ^ $phitmp$i4$i$i207;
          if ($tmp$i$i209) {
           $$pre$i3$i$i206317 = $$pre$i3$i$i206;$852 = $$pre$i3$i$i206;
           break;
          } else {
           $$lcssa = $433;
           break L133;
          }
         }
        }
       } while(0);
       if ((label|0) == 152) {
        label = 0;
        if ($465) {
         $$lcssa = $433;
         break;
        } else {
         $$pre$i3$i$i206317 = $$pre$i3$i$i206318;$852 = 0;
        }
       }
       $466 = HEAP32[$__b>>2]|0;
       $467 = ((($466)) + 12|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = ((($466)) + 16|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = ($468|0)==($470|0);
       if ($471) {
        $472 = HEAP32[$466>>2]|0;
        $473 = ((($472)) + 36|0);
        $474 = HEAP32[$473>>2]|0;
        __THREW__ = 0;
        $475 = (invoke_ii($474|0,($466|0))|0);
        $476 = __THREW__; __THREW__ = 0;
        $477 = $476&1;
        if ($477) {
         label = 36;
         break L24;
        } else {
         $$0$i$i194 = $475;
        }
       } else {
        $478 = HEAP32[$468>>2]|0;
        $$0$i$i194 = $478;
       }
       $479 = HEAP32[$433>>2]|0;
       $480 = ($$0$i$i194|0)==($479|0);
       if (!($480)) {
        $$lcssa = $433;
        break;
       }
       $481 = HEAP32[$__b>>2]|0;
       $482 = ((($481)) + 12|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ((($481)) + 16|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = ($483|0)==($485|0);
       if ($486) {
        $487 = HEAP32[$481>>2]|0;
        $488 = ((($487)) + 40|0);
        $489 = HEAP32[$488>>2]|0;
        __THREW__ = 0;
        (invoke_ii($489|0,($481|0))|0);
        $490 = __THREW__; __THREW__ = 0;
        $491 = $490&1;
        if ($491) {
         label = 36;
         break L24;
        }
       } else {
        $492 = ((($483)) + 4|0);
        HEAP32[$482>>2] = $492;
       }
       $493 = ((($433)) + 4|0);
       $494 = $493;
       $$pre315 = HEAP8[$__sym>>0]|0;
       $$pre316 = HEAP32[$23>>2]|0;
       $$pre$i3$i$i206 = $$pre$i3$i$i206317;$424 = $$pre315;$430 = $$pre316;$451 = $852;$__sym_curr_char$sroa$0$0 = $494;
      }
      if ($22) {
       $495 = HEAP8[$__sym>>0]|0;
       $496 = $495 & 1;
       $497 = ($496<<24>>24)==(0);
       $498 = HEAP32[$23>>2]|0;
       $499 = HEAP32[$24>>2]|0;
       $500 = $495&255;
       $501 = $500 >>> 1;
       $502 = $497 ? $24 : $498;
       $503 = $497 ? $501 : $499;
       $504 = (($502) + ($503<<2)|0);
       $505 = ($$lcssa|0)==($504|0);
       if ($505) {
        $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 164;
        break L24;
       }
      } else {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $86 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i181 = $849;$524 = $849;$578 = $847;$__ng$0 = 0;
      L170: while(1) {
       $508 = HEAP32[$__b>>2]|0;
       $509 = ($508|0)==(0|0);
       do {
        if ($509) {
         $538 = 1;
        } else {
         $510 = ((($508)) + 12|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = ((($508)) + 16|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($511|0)==($513|0);
         if ($514) {
          $515 = HEAP32[$508>>2]|0;
          $516 = ((($515)) + 36|0);
          $517 = HEAP32[$516>>2]|0;
          __THREW__ = 0;
          $518 = (invoke_ii($517|0,($508|0))|0);
          $519 = __THREW__; __THREW__ = 0;
          $520 = $519&1;
          if ($520) {
           label = 39;
           break L24;
          } else {
           $$0$i$i$i$i173 = $518;
          }
         } else {
          $521 = HEAP32[$511>>2]|0;
          $$0$i$i$i$i173 = $521;
         }
         $522 = ($$0$i$i$i$i173|0)==(-1);
         if ($522) {
          HEAP32[$__b>>2] = 0;
          $538 = 1;
          break;
         } else {
          $$pre$i$i$i175 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i176 = ($$pre$i$i$i175|0)==(0|0);
          $538 = $phitmp$i$i$i176;
          break;
         }
        }
       } while(0);
       $523 = ($524|0)==(0|0);
       do {
        if ($523) {
         $$pre$i3$i$i181302 = $$pre$i3$i$i181;
         label = 178;
        } else {
         $525 = ((($524)) + 12|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = ((($524)) + 16|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = ($526|0)==($528|0);
         if ($529) {
          $530 = HEAP32[$524>>2]|0;
          $531 = ((($530)) + 36|0);
          $532 = HEAP32[$531>>2]|0;
          __THREW__ = 0;
          $533 = (invoke_ii($532|0,($524|0))|0);
          $534 = __THREW__; __THREW__ = 0;
          $535 = $534&1;
          if ($535) {
           label = 39;
           break L24;
          } else {
           $$0$i$i1$i$i179 = $533;
          }
         } else {
          $536 = HEAP32[$526>>2]|0;
          $$0$i$i1$i$i179 = $536;
         }
         $537 = ($$0$i$i1$i$i179|0)==(-1);
         if ($537) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i181302 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i182 = ($$pre$i3$i$i181|0)==(0|0);
          $tmp$i$i184 = $538 ^ $phitmp$i4$i$i182;
          if ($tmp$i$i184) {
           $$pre$i3$i$i181304 = $$pre$i3$i$i181;$853 = $$pre$i3$i$i181;
           break;
          } else {
           $$lcssa450 = $578;$$pre$i3$i$i149 = $$pre$i3$i$i181;$__ng$0$lcssa451 = $__ng$0;
           break L170;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($538) {
         $$lcssa450 = $578;$$pre$i3$i$i149 = $$pre$i3$i$i181302;$__ng$0$lcssa451 = $__ng$0;
         break;
        } else {
         $$pre$i3$i$i181304 = $$pre$i3$i$i181302;$853 = 0;
        }
       }
       $539 = HEAP32[$__b>>2]|0;
       $540 = ((($539)) + 12|0);
       $541 = HEAP32[$540>>2]|0;
       $542 = ((($539)) + 16|0);
       $543 = HEAP32[$542>>2]|0;
       $544 = ($541|0)==($543|0);
       if ($544) {
        $545 = HEAP32[$539>>2]|0;
        $546 = ((($545)) + 36|0);
        $547 = HEAP32[$546>>2]|0;
        __THREW__ = 0;
        $548 = (invoke_ii($547|0,($539|0))|0);
        $549 = __THREW__; __THREW__ = 0;
        $550 = $549&1;
        if ($550) {
         label = 39;
         break L24;
        } else {
         $$0$i$i170 = $548;
        }
       } else {
        $551 = HEAP32[$541>>2]|0;
        $$0$i$i170 = $551;
       }
       $552 = HEAP32[$__ct>>2]|0;
       $553 = ((($552)) + 12|0);
       $554 = HEAP32[$553>>2]|0;
       __THREW__ = 0;
       $555 = (invoke_iiii($554|0,($__ct|0),2048,($$0$i$i170|0))|0);
       $556 = __THREW__; __THREW__ = 0;
       $557 = $556&1;
       if ($557) {
        label = 39;
        break L24;
       }
       if ($555) {
        $558 = HEAP32[$__wn>>2]|0;
        $559 = HEAP32[$0>>2]|0;
        $560 = ($558|0)==($559|0);
        if ($560) {
         __THREW__ = 0;
         invoke_viii(602,($__wb|0),($__wn|0),($0|0));
         $561 = __THREW__; __THREW__ = 0;
         $562 = $561&1;
         if ($562) {
          label = 39;
          break L24;
         }
         $$pre306 = HEAP32[$__wn>>2]|0;
         $564 = $$pre306;
        } else {
         $564 = $558;
        }
        $563 = ((($564)) + 4|0);
        HEAP32[$__wn>>2] = $563;
        HEAP32[$564>>2] = $$0$i$i170;
        $565 = (($__ng$0) + 1)|0;
        $854 = $578;$__ng$2$ph = $565;
       } else {
        $566 = HEAP8[$__grp>>0]|0;
        $567 = $566 & 1;
        $568 = ($567<<24>>24)==(0);
        $569 = HEAP32[$28>>2]|0;
        $570 = $566&255;
        $571 = $570 >>> 1;
        $572 = $568 ? $571 : $569;
        $573 = ($572|0)!=(0);
        $574 = ($__ng$0|0)!=(0);
        $or$cond12 = $574 & $573;
        $575 = ($$0$i$i170|0)==($86|0);
        $or$cond25 = $575 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa450 = $578;$$pre$i3$i$i149 = $$pre$i3$i$i181304;$__ng$0$lcssa451 = $__ng$0;
         break;
        }
        $576 = HEAP32[$__ge>>2]|0;
        $577 = ($578|0)==($576|0);
        if ($577) {
         __THREW__ = 0;
         invoke_viii(595,($__gb|0),($__gn|0),($__ge|0));
         $579 = __THREW__; __THREW__ = 0;
         $580 = $579&1;
         if ($580) {
          label = 39;
          break L24;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $582 = $$pre;
        } else {
         $582 = $578;
        }
        $581 = ((($582)) + 4|0);
        HEAP32[$__gn>>2] = $581;
        HEAP32[$582>>2] = $__ng$0;
        $854 = $581;$__ng$2$ph = 0;
       }
       $583 = HEAP32[$__b>>2]|0;
       $584 = ((($583)) + 12|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ((($583)) + 16|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = ($585|0)==($587|0);
       if ($588) {
        $589 = HEAP32[$583>>2]|0;
        $590 = ((($589)) + 40|0);
        $591 = HEAP32[$590>>2]|0;
        __THREW__ = 0;
        (invoke_ii($591|0,($583|0))|0);
        $592 = __THREW__; __THREW__ = 0;
        $593 = $592&1;
        if ($593) {
         label = 39;
         break L24;
        } else {
         $$pre$i3$i$i181 = $$pre$i3$i$i181304;$524 = $853;$578 = $854;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $594 = ((($585)) + 4|0);
        HEAP32[$584>>2] = $594;
        $$pre$i3$i$i181 = $$pre$i3$i$i181304;$524 = $853;$578 = $854;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $595 = HEAP32[$__gb>>2]|0;
      $596 = ($595|0)!=($$lcssa450|0);
      $597 = ($__ng$0$lcssa451|0)!=(0);
      $or$cond14 = $597 & $596;
      if ($or$cond14) {
       $598 = HEAP32[$__ge>>2]|0;
       $599 = ($$lcssa450|0)==($598|0);
       if ($599) {
        __THREW__ = 0;
        invoke_viii(595,($__gb|0),($__gn|0),($__ge|0));
        $600 = __THREW__; __THREW__ = 0;
        $601 = $600&1;
        if ($601) {
         label = 40;
         break L24;
        }
        $$pre308 = HEAP32[$__gn>>2]|0;
        $603 = $$pre308;
       } else {
        $603 = $$lcssa450;
       }
       $602 = ((($603)) + 4|0);
       HEAP32[$__gn>>2] = $602;
       HEAP32[$603>>2] = $__ng$0$lcssa451;
       $855 = $602;
      } else {
       $855 = $$lcssa450;
      }
      $604 = HEAP32[$__fd>>2]|0;
      $605 = ($604|0)>(0);
      L223: do {
       if ($605) {
        $606 = HEAP32[$__b>>2]|0;
        $607 = ($606|0)==(0|0);
        do {
         if ($607) {
          $856 = 1;
         } else {
          $608 = ((($606)) + 12|0);
          $609 = HEAP32[$608>>2]|0;
          $610 = ((($606)) + 16|0);
          $611 = HEAP32[$610>>2]|0;
          $612 = ($609|0)==($611|0);
          if ($612) {
           $613 = HEAP32[$606>>2]|0;
           $614 = ((($613)) + 36|0);
           $615 = HEAP32[$614>>2]|0;
           __THREW__ = 0;
           $616 = (invoke_ii($615|0,($606|0))|0);
           $617 = __THREW__; __THREW__ = 0;
           $618 = $617&1;
           if ($618) {
            label = 40;
            break L24;
           } else {
            $$0$i$i$i$i141 = $616;
           }
          } else {
           $619 = HEAP32[$609>>2]|0;
           $$0$i$i$i$i141 = $619;
          }
          $620 = ($$0$i$i$i$i141|0)==(-1);
          if ($620) {
           HEAP32[$__b>>2] = 0;
           $856 = 1;
           break;
          } else {
           $$pre$i$i$i143 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i144 = ($$pre$i$i$i143|0)==(0|0);
           $856 = $phitmp$i$i$i144;
           break;
          }
         }
        } while(0);
        $621 = ($$pre$i3$i$i149|0)==(0|0);
        do {
         if ($621) {
          label = 216;
         } else {
          $622 = ((($$pre$i3$i$i149)) + 12|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = ((($$pre$i3$i$i149)) + 16|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = ($623|0)==($625|0);
          if ($626) {
           $627 = HEAP32[$$pre$i3$i$i149>>2]|0;
           $628 = ((($627)) + 36|0);
           $629 = HEAP32[$628>>2]|0;
           __THREW__ = 0;
           $630 = (invoke_ii($629|0,($$pre$i3$i$i149|0))|0);
           $631 = __THREW__; __THREW__ = 0;
           $632 = $631&1;
           if ($632) {
            label = 40;
            break L24;
           } else {
            $$0$i$i1$i$i147 = $630;
           }
          } else {
           $633 = HEAP32[$623>>2]|0;
           $$0$i$i1$i$i147 = $633;
          }
          $634 = ($$0$i$i1$i$i147|0)==(-1);
          if ($634) {
           HEAP32[$__e>>2] = 0;
           label = 216;
           break;
          } else {
           if ($856) {
            $857 = $$pre$i3$i$i149;
            break;
           } else {
            label = 222;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 216) {
         label = 0;
         if ($856) {
          label = 222;
          break L24;
         } else {
          $857 = 0;
         }
        }
        $635 = HEAP32[$__b>>2]|0;
        $636 = ((($635)) + 12|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = ((($635)) + 16|0);
        $639 = HEAP32[$638>>2]|0;
        $640 = ($637|0)==($639|0);
        if ($640) {
         $641 = HEAP32[$635>>2]|0;
         $642 = ((($641)) + 36|0);
         $643 = HEAP32[$642>>2]|0;
         __THREW__ = 0;
         $644 = (invoke_ii($643|0,($635|0))|0);
         $645 = __THREW__; __THREW__ = 0;
         $646 = $645&1;
         if ($646) {
          label = 40;
          break L24;
         } else {
          $$0$i$i134 = $644;
         }
        } else {
         $647 = HEAP32[$637>>2]|0;
         $$0$i$i134 = $647;
        }
        $648 = HEAP32[$__dp>>2]|0;
        $649 = ($$0$i$i134|0)==($648|0);
        if (!($649)) {
         label = 222;
         break L24;
        }
        $652 = HEAP32[$__b>>2]|0;
        $653 = ((($652)) + 12|0);
        $654 = HEAP32[$653>>2]|0;
        $655 = ((($652)) + 16|0);
        $656 = HEAP32[$655>>2]|0;
        $657 = ($654|0)==($656|0);
        if ($657) {
         $658 = HEAP32[$652>>2]|0;
         $659 = ((($658)) + 40|0);
         $660 = HEAP32[$659>>2]|0;
         __THREW__ = 0;
         (invoke_ii($660|0,($652|0))|0);
         $661 = __THREW__; __THREW__ = 0;
         $662 = $661&1;
         if ($662) {
          label = 40;
          break L24;
         } else {
          $$pre$i3$i$i115 = $857;$665 = $604;$682 = $857;
         }
        } else {
         $663 = ((($654)) + 4|0);
         HEAP32[$653>>2] = $663;
         $$pre$i3$i$i115 = $857;$665 = $604;$682 = $857;
        }
        while(1) {
         $664 = ($665|0)>(0);
         if (!($664)) {
          break L223;
         }
         $666 = HEAP32[$__b>>2]|0;
         $667 = ($666|0)==(0|0);
         do {
          if ($667) {
           $696 = 1;
          } else {
           $668 = ((($666)) + 12|0);
           $669 = HEAP32[$668>>2]|0;
           $670 = ((($666)) + 16|0);
           $671 = HEAP32[$670>>2]|0;
           $672 = ($669|0)==($671|0);
           if ($672) {
            $673 = HEAP32[$666>>2]|0;
            $674 = ((($673)) + 36|0);
            $675 = HEAP32[$674>>2]|0;
            __THREW__ = 0;
            $676 = (invoke_ii($675|0,($666|0))|0);
            $677 = __THREW__; __THREW__ = 0;
            $678 = $677&1;
            if ($678) {
             label = 38;
             break L24;
            } else {
             $$0$i$i$i$i107 = $676;
            }
           } else {
            $679 = HEAP32[$669>>2]|0;
            $$0$i$i$i$i107 = $679;
           }
           $680 = ($$0$i$i$i$i107|0)==(-1);
           if ($680) {
            HEAP32[$__b>>2] = 0;
            $696 = 1;
            break;
           } else {
            $$pre$i$i$i109 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i110 = ($$pre$i$i$i109|0)==(0|0);
            $696 = $phitmp$i$i$i110;
            break;
           }
          }
         } while(0);
         $681 = ($682|0)==(0|0);
         do {
          if ($681) {
           $$pre$i3$i$i115309$ph = $$pre$i3$i$i115;
           label = 240;
          } else {
           $683 = ((($682)) + 12|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ((($682)) + 16|0);
           $686 = HEAP32[$685>>2]|0;
           $687 = ($684|0)==($686|0);
           if ($687) {
            $688 = HEAP32[$682>>2]|0;
            $689 = ((($688)) + 36|0);
            $690 = HEAP32[$689>>2]|0;
            __THREW__ = 0;
            $691 = (invoke_ii($690|0,($682|0))|0);
            $692 = __THREW__; __THREW__ = 0;
            $693 = $692&1;
            if ($693) {
             label = 38;
             break L24;
            } else {
             $$0$i$i1$i$i113 = $691;
            }
           } else {
            $694 = HEAP32[$684>>2]|0;
            $$0$i$i1$i$i113 = $694;
           }
           $695 = ($$0$i$i1$i$i113|0)==(-1);
           if ($695) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i115309$ph = 0;
            label = 240;
            break;
           } else {
            $phitmp$i4$i$i116 = ($$pre$i3$i$i115|0)==(0|0);
            $tmp$i$i118 = $696 ^ $phitmp$i4$i$i116;
            if ($tmp$i$i118) {
             $$pre$i3$i$i115309333 = $$pre$i3$i$i115;$858 = $$pre$i3$i$i115;
             break;
            } else {
             label = 247;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 240) {
          label = 0;
          if ($696) {
           label = 247;
           break L24;
          } else {
           $$pre$i3$i$i115309333 = $$pre$i3$i$i115309$ph;$858 = 0;
          }
         }
         $697 = HEAP32[$__b>>2]|0;
         $698 = ((($697)) + 12|0);
         $699 = HEAP32[$698>>2]|0;
         $700 = ((($697)) + 16|0);
         $701 = HEAP32[$700>>2]|0;
         $702 = ($699|0)==($701|0);
         if ($702) {
          $703 = HEAP32[$697>>2]|0;
          $704 = ((($703)) + 36|0);
          $705 = HEAP32[$704>>2]|0;
          __THREW__ = 0;
          $706 = (invoke_ii($705|0,($697|0))|0);
          $707 = __THREW__; __THREW__ = 0;
          $708 = $707&1;
          if ($708) {
           label = 38;
           break L24;
          } else {
           $$0$i$i101 = $706;
          }
         } else {
          $709 = HEAP32[$699>>2]|0;
          $$0$i$i101 = $709;
         }
         $710 = HEAP32[$__ct>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         __THREW__ = 0;
         $713 = (invoke_iiii($712|0,($__ct|0),2048,($$0$i$i101|0))|0);
         $714 = __THREW__; __THREW__ = 0;
         $715 = $714&1;
         if ($715) {
          label = 38;
          break L24;
         }
         if (!($713)) {
          label = 247;
          break L24;
         }
         $718 = HEAP32[$__wn>>2]|0;
         $719 = HEAP32[$0>>2]|0;
         $720 = ($718|0)==($719|0);
         if ($720) {
          __THREW__ = 0;
          invoke_viii(602,($__wb|0),($__wn|0),($0|0));
          $721 = __THREW__; __THREW__ = 0;
          $722 = $721&1;
          if ($722) {
           label = 38;
           break L24;
          }
         }
         $723 = HEAP32[$__b>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         $726 = ((($723)) + 16|0);
         $727 = HEAP32[$726>>2]|0;
         $728 = ($725|0)==($727|0);
         if ($728) {
          $729 = HEAP32[$723>>2]|0;
          $730 = ((($729)) + 36|0);
          $731 = HEAP32[$730>>2]|0;
          __THREW__ = 0;
          $732 = (invoke_ii($731|0,($723|0))|0);
          $733 = __THREW__; __THREW__ = 0;
          $734 = $733&1;
          if ($734) {
           label = 38;
           break L24;
          } else {
           $$0$i$i93 = $732;
          }
         } else {
          $735 = HEAP32[$725>>2]|0;
          $$0$i$i93 = $735;
         }
         $736 = HEAP32[$__wn>>2]|0;
         $737 = ((($736)) + 4|0);
         HEAP32[$__wn>>2] = $737;
         HEAP32[$736>>2] = $$0$i$i93;
         $738 = (($665) + -1)|0;
         HEAP32[$__fd>>2] = $738;
         $739 = HEAP32[$__b>>2]|0;
         $740 = ((($739)) + 12|0);
         $741 = HEAP32[$740>>2]|0;
         $742 = ((($739)) + 16|0);
         $743 = HEAP32[$742>>2]|0;
         $744 = ($741|0)==($743|0);
         if ($744) {
          $745 = HEAP32[$739>>2]|0;
          $746 = ((($745)) + 40|0);
          $747 = HEAP32[$746>>2]|0;
          __THREW__ = 0;
          (invoke_ii($747|0,($739|0))|0);
          $748 = __THREW__; __THREW__ = 0;
          $749 = $748&1;
          if ($749) {
           label = 38;
           break L24;
          } else {
           $$pre$i3$i$i115 = $$pre$i3$i$i115309333;$665 = $738;$682 = $858;
           continue;
          }
         } else {
          $750 = ((($741)) + 4|0);
          HEAP32[$740>>2] = $750;
          $$pre$i3$i$i115 = $$pre$i3$i$i115309333;$665 = $738;$682 = $858;
          continue;
         }
        }
       }
      } while(0);
      $751 = HEAP32[$__wn>>2]|0;
      $752 = HEAP32[$__wb>>2]|0;
      $753 = ($751|0)==($752|0);
      if ($753) {
       label = 257;
       break L24;
      } else {
       $850 = $855;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L297: do {
     if ((label|0) == 60) {
      while(1) {
       label = 0;
       $125 = HEAP32[$__b>>2]|0;
       $126 = ($125|0)==(0|0);
       do {
        if ($126) {
         $155 = 1;
        } else {
         $127 = ((($125)) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = ((($125)) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$125>>2]|0;
          $133 = ((($132)) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($125|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i66 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i$i$i66 = $138;
         }
         $139 = ($$0$i$i$i$i66|0)==(-1);
         if ($139) {
          HEAP32[$__b>>2] = 0;
          $155 = 1;
          break;
         } else {
          $$pre$i$i$i68 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i69 = ($$pre$i$i$i68|0)==(0|0);
          $155 = $phitmp$i$i$i69;
          break;
         }
        }
       } while(0);
       $140 = ($141|0)==(0|0);
       do {
        if ($140) {
         $$pre$i3$i$i74327 = $$pre$i3$i$i74;
         label = 73;
        } else {
         $142 = ((($141)) + 12|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ((($141)) + 16|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ($143|0)==($145|0);
         if ($146) {
          $147 = HEAP32[$141>>2]|0;
          $148 = ((($147)) + 36|0);
          $149 = HEAP32[$148>>2]|0;
          __THREW__ = 0;
          $150 = (invoke_ii($149|0,($141|0))|0);
          $151 = __THREW__; __THREW__ = 0;
          $152 = $151&1;
          if ($152) {
           label = 35;
           break L24;
          } else {
           $$0$i$i1$i$i72 = $150;
          }
         } else {
          $153 = HEAP32[$143>>2]|0;
          $$0$i$i1$i$i72 = $153;
         }
         $154 = ($$0$i$i1$i$i72|0)==(-1);
         if ($154) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i74327 = 0;
          label = 73;
          break;
         } else {
          $phitmp$i4$i$i75 = ($$pre$i3$i$i74|0)==(0|0);
          $tmp$i$i77 = $155 ^ $phitmp$i4$i$i75;
          if ($tmp$i$i77) {
           $$pre$i3$i$i74329 = $$pre$i3$i$i74;$851 = $$pre$i3$i$i74;
           break;
          } else {
           $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
           break L297;
          }
         }
        }
       } while(0);
       if ((label|0) == 73) {
        label = 0;
        if ($155) {
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L297;
        } else {
         $$pre$i3$i$i74329 = $$pre$i3$i$i74327;$851 = 0;
        }
       }
       $156 = HEAP32[$__b>>2]|0;
       $157 = ((($156)) + 12|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ((($156)) + 16|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($158|0)==($160|0);
       if ($161) {
        $162 = HEAP32[$156>>2]|0;
        $163 = ((($162)) + 36|0);
        $164 = HEAP32[$163>>2]|0;
        __THREW__ = 0;
        $165 = (invoke_ii($164|0,($156|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 35;
         break L24;
        } else {
         $$0$i$i81 = $165;
        }
       } else {
        $168 = HEAP32[$158>>2]|0;
        $$0$i$i81 = $168;
       }
       $169 = HEAP32[$__ct>>2]|0;
       $170 = ((($169)) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       __THREW__ = 0;
       $172 = (invoke_iiii($171|0,($__ct|0),8192,($$0$i$i81|0))|0);
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       if ($174) {
        label = 35;
        break L24;
       }
       if (!($172)) {
        $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
        break L297;
       }
       $175 = HEAP32[$__b>>2]|0;
       $176 = ((($175)) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ((($175)) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($177|0)==($179|0);
       if ($180) {
        $181 = HEAP32[$175>>2]|0;
        $182 = ((($181)) + 40|0);
        $183 = HEAP32[$182>>2]|0;
        __THREW__ = 0;
        $184 = (invoke_ii($183|0,($175|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         label = 35;
         break L24;
        } else {
         $$0$i$i88 = $184;
        }
       } else {
        $187 = ((($177)) + 4|0);
        HEAP32[$176>>2] = $187;
        $188 = HEAP32[$177>>2]|0;
        $$0$i$i88 = $188;
       }
       __THREW__ = 0;
       invoke_vii(601,($__spaces|0),($$0$i$i88|0));
       $189 = __THREW__; __THREW__ = 0;
       $190 = $189&1;
       if ($190) {
        label = 35;
        break L24;
       } else {
        $$pre$i3$i$i74 = $$pre$i3$i$i74329;$141 = $851;
        label = 60;
       }
      }
     }
    } while(0);
    $756 = (($__p$0) + 1)|0;
    $847 = $850;$__p$0 = $756;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L333:    switch (label|0) {
    case 35: {
     $62 = ___cxa_find_matching_catch_2()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L21;
     break;
    }
    case 36: {
     $64 = ___cxa_find_matching_catch_2()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L21;
     break;
    }
    case 37: {
     $66 = ___cxa_find_matching_catch_2()|0;
     $67 = tempRet0;
     $lpad$phi$index = $66;$lpad$phi$index8 = $67;
     break L21;
     break;
    }
    case 38: {
     $68 = ___cxa_find_matching_catch_2()|0;
     $69 = tempRet0;
     $lpad$phi$index = $68;$lpad$phi$index8 = $69;
     break L21;
     break;
    }
    case 39: {
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index8 = $71;
     break L21;
     break;
    }
    case 40: {
     $72 = ___cxa_find_matching_catch_2()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index8 = $73;
     break L21;
     break;
    }
    case 58: {
     $122 = HEAP32[$__err>>2]|0;
     $123 = $122 | 4;
     HEAP32[$__err>>2] = $123;
     $$10 = 0;
     break;
    }
    case 123: {
     $356 = HEAP32[$__err>>2]|0;
     $357 = $356 | 4;
     HEAP32[$__err>>2] = $357;
     $$10 = 0;
     break;
    }
    case 164: {
     $506 = HEAP32[$__err>>2]|0;
     $507 = $506 | 4;
     HEAP32[$__err>>2] = $507;
     $$10 = 0;
     break;
    }
    case 222: {
     $650 = HEAP32[$__err>>2]|0;
     $651 = $650 | 4;
     HEAP32[$__err>>2] = $651;
     $$10 = 0;
     break;
    }
    case 247: {
     $716 = HEAP32[$__err>>2]|0;
     $717 = $716 | 4;
     HEAP32[$__err>>2] = $717;
     $$10 = 0;
     break;
    }
    case 257: {
     $754 = HEAP32[$__err>>2]|0;
     $755 = $754 | 4;
     HEAP32[$__err>>2] = $755;
     $$10 = 0;
     break;
    }
    case 259: {
     $757 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L335: do {
      if (!($757)) {
       $758 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $759 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L337: while(1) {
        $760 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $761 = $760 & 1;
        $762 = ($761<<24>>24)==(0);
        if ($762) {
         $764 = $760&255;
         $765 = $764 >>> 1;
         $767 = $765;
        } else {
         $763 = HEAP32[$758>>2]|0;
         $767 = $763;
        }
        $766 = ($__i$0>>>0)<($767>>>0);
        if (!($766)) {
         break L335;
        }
        $768 = HEAP32[$__b>>2]|0;
        $769 = ($768|0)==(0|0);
        do {
         if ($769) {
          $859 = 1;
         } else {
          $770 = ((($768)) + 12|0);
          $771 = HEAP32[$770>>2]|0;
          $772 = ((($768)) + 16|0);
          $773 = HEAP32[$772>>2]|0;
          $774 = ($771|0)==($773|0);
          if ($774) {
           $775 = HEAP32[$768>>2]|0;
           $776 = ((($775)) + 36|0);
           $777 = HEAP32[$776>>2]|0;
           __THREW__ = 0;
           $778 = (invoke_ii($777|0,($768|0))|0);
           $779 = __THREW__; __THREW__ = 0;
           $780 = $779&1;
           if ($780) {
            label = 34;
            break L337;
           } else {
            $$0$i$i$i$i = $778;
           }
          } else {
           $781 = HEAP32[$771>>2]|0;
           $$0$i$i$i$i = $781;
          }
          $782 = ($$0$i$i$i$i|0)==(-1);
          if ($782) {
           HEAP32[$__b>>2] = 0;
           $859 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $859 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $783 = HEAP32[$__e>>2]|0;
        $784 = ($783|0)==(0|0);
        do {
         if ($784) {
          label = 278;
         } else {
          $785 = ((($783)) + 12|0);
          $786 = HEAP32[$785>>2]|0;
          $787 = ((($783)) + 16|0);
          $788 = HEAP32[$787>>2]|0;
          $789 = ($786|0)==($788|0);
          if ($789) {
           $790 = HEAP32[$783>>2]|0;
           $791 = ((($790)) + 36|0);
           $792 = HEAP32[$791>>2]|0;
           __THREW__ = 0;
           $793 = (invoke_ii($792|0,($783|0))|0);
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 34;
            break L337;
           } else {
            $$0$i$i1$i$i = $793;
           }
          } else {
           $796 = HEAP32[$786>>2]|0;
           $$0$i$i1$i$i = $796;
          }
          $797 = ($$0$i$i1$i$i|0)==(-1);
          if ($797) {
           HEAP32[$__e>>2] = 0;
           label = 278;
           break;
          } else {
           if ($859) {
            break;
           } else {
            label = 286;
            break L337;
           }
          }
         }
        } while(0);
        if ((label|0) == 278) {
         label = 0;
         if ($859) {
          label = 286;
          break;
         }
        }
        $798 = HEAP32[$__b>>2]|0;
        $799 = ((($798)) + 12|0);
        $800 = HEAP32[$799>>2]|0;
        $801 = ((($798)) + 16|0);
        $802 = HEAP32[$801>>2]|0;
        $803 = ($800|0)==($802|0);
        if ($803) {
         $804 = HEAP32[$798>>2]|0;
         $805 = ((($804)) + 36|0);
         $806 = HEAP32[$805>>2]|0;
         __THREW__ = 0;
         $807 = (invoke_ii($806|0,($798|0))|0);
         $808 = __THREW__; __THREW__ = 0;
         $809 = $808&1;
         if ($809) {
          label = 34;
          break;
         } else {
          $$0$i$i = $807;
         }
        } else {
         $810 = HEAP32[$800>>2]|0;
         $$0$i$i = $810;
        }
        $811 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $812 = $811 & 1;
        $813 = ($812<<24>>24)==(0);
        if ($813) {
         $816 = $758;
        } else {
         $814 = HEAP32[$759>>2]|0;
         $816 = $814;
        }
        $815 = (($816) + ($__i$0<<2)|0);
        $817 = HEAP32[$815>>2]|0;
        $818 = ($$0$i$i|0)==($817|0);
        if (!($818)) {
         label = 286;
         break;
        }
        $821 = (($__i$0) + 1)|0;
        $822 = HEAP32[$__b>>2]|0;
        $823 = ((($822)) + 12|0);
        $824 = HEAP32[$823>>2]|0;
        $825 = ((($822)) + 16|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = ($824|0)==($826|0);
        if ($827) {
         $828 = HEAP32[$822>>2]|0;
         $829 = ((($828)) + 40|0);
         $830 = HEAP32[$829>>2]|0;
         __THREW__ = 0;
         (invoke_ii($830|0,($822|0))|0);
         $831 = __THREW__; __THREW__ = 0;
         $832 = $831&1;
         if ($832) {
          label = 34;
          break;
         } else {
          $__i$0 = $821;
          continue;
         }
        } else {
         $833 = ((($824)) + 4|0);
         HEAP32[$823>>2] = $833;
         $__i$0 = $821;
         continue;
        }
       }
       if ((label|0) == 34) {
        $60 = ___cxa_find_matching_catch_2()|0;
        $61 = tempRet0;
        $lpad$phi$index = $60;$lpad$phi$index8 = $61;
        break L21;
       }
       else if ((label|0) == 286) {
        $819 = HEAP32[$__err>>2]|0;
        $820 = $819 | 4;
        HEAP32[$__err>>2] = $820;
        $$10 = 0;
        break L333;
       }
      }
     } while(0);
     $834 = HEAP32[$__gb>>2]|0;
     $835 = ($834|0)==($$lcssa461|0);
     if ($835) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$834,$$lcssa461,$__et);
      $836 = HEAP32[$__et>>2]|0;
      $837 = ($836|0)==(0);
      if ($837) {
       $$10 = 1;
       break;
      } else {
       $838 = HEAP32[$__err>>2]|0;
       $839 = $838 | 4;
       HEAP32[$__err>>2] = $839;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $840 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $841 = ($840|0)==(0|0);
   if (!($841)) {
    $842 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($842|0,($840|0));
    $843 = __THREW__; __THREW__ = 0;
    $844 = $843&1;
    if ($844) {
     $845 = ___cxa_find_matching_catch_3(0|0)|0;
     $846 = tempRet0;
     ___clang_call_terminate($845);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $76 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $77 = ($76|0)==(0|0);
 if (!($77)) {
  $78 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($78|0,($76|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i16 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i26 = 0, $__i$0$i$i$i31 = 0, $__i$0$i$i$i4 = 0, $__i$0$i$i$i7 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i17 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i27 = 0, $exitcond$i$i$i32 = 0;
 var $exitcond$i$i$i5 = 0, $exitcond$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35196)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
  }
  $23 = ((($__nsn)) + 4|0);
  HEAP32[$23>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__nsn|0),0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $28 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$28>>2] = 0;
   $29 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $29;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $30 = HEAP32[$10>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
  $33 = HEAP8[$__psn>>0]|0;
  $34 = $33 & 1;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $36 = ((($__psn)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$37>>2] = 0;
  }
  $38 = ((($__psn)) + 4|0);
  HEAP32[$38>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i4 = 0;
  while(1) {
   $exitcond$i$i$i5 = ($__i$0$i$i$i4|0)==(3);
   if ($exitcond$i$i$i5) {
    break;
   }
   $43 = (($2) + ($__i$0$i$i$i4<<2)|0);
   HEAP32[$43>>2] = 0;
   $44 = (($__i$0$i$i$i4) + 1)|0;
   $__i$0$i$i$i4 = $44;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $45 = HEAP32[$10>>2]|0;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $48;
  $49 = HEAP32[$10>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $52;
  $53 = HEAP32[$10>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
  $56 = HEAP8[$__grp>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $62 = ((($__grp)) + 1|0);
   HEAP8[$62>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $59 = ((($__grp)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP8[$60>>0] = 0;
   $61 = ((($__grp)) + 4|0);
   HEAP32[$61>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch_3(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i7 = 0;
  while(1) {
   $exitcond$i$i$i8 = ($__i$0$i$i$i7|0)==(3);
   if ($exitcond$i$i$i8) {
    break;
   }
   $67 = (($3) + ($__i$0$i$i$i7<<2)|0);
   HEAP32[$67>>2] = 0;
   $68 = (($__i$0$i$i$i7) + 1)|0;
   $__i$0$i$i$i7 = $68;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $69 = HEAP32[$10>>2]|0;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
  $72 = HEAP8[$__sym>>0]|0;
  $73 = $72 & 1;
  $74 = ($73<<24>>24)==(0);
  if ($74) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $75 = ((($__sym)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$76>>2] = 0;
  }
  $77 = ((($__sym)) + 4|0);
  HEAP32[$77>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__sym|0),0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch_3(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $82 = (($4) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$82>>2] = 0;
   $83 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $83;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
  $storemerge = $87;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35188)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 44|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
  $92 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
  $93 = HEAP32[$88>>2]|0;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
  $96 = HEAP8[$__nsn>>0]|0;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)==(0);
  if ($98) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $99 = ((($__nsn)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$100>>2] = 0;
  }
  $101 = ((($__nsn)) + 4|0);
  HEAP32[$101>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__nsn|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch_3(0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i16 = 0;
  while(1) {
   $exitcond$i$i$i17 = ($__i$0$i$i$i16|0)==(3);
   if ($exitcond$i$i$i17) {
    break;
   }
   $106 = (($6) + ($__i$0$i$i$i16<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($__i$0$i$i$i16) + 1)|0;
   $__i$0$i$i$i16 = $107;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  $108 = HEAP32[$88>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
  $111 = HEAP8[$__psn>>0]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $114 = ((($__psn)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = 0;
  }
  $116 = ((($__psn)) + 4|0);
  HEAP32[$116>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__psn|0),0);
  $117 = __THREW__; __THREW__ = 0;
  $118 = $117&1;
  if ($118) {
   $119 = ___cxa_find_matching_catch_3(0|0)|0;
   $120 = tempRet0;
   ___clang_call_terminate($119);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i21 = 0;
  while(1) {
   $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
   if ($exitcond$i$i$i22) {
    break;
   }
   $121 = (($7) + ($__i$0$i$i$i21<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($__i$0$i$i$i21) + 1)|0;
   $__i$0$i$i$i21 = $122;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $123 = HEAP32[$88>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $126;
  $127 = HEAP32[$88>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $130;
  $131 = HEAP32[$88>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
  $134 = HEAP8[$__grp>>0]|0;
  $135 = $134 & 1;
  $136 = ($135<<24>>24)==(0);
  if ($136) {
   $140 = ((($__grp)) + 1|0);
   HEAP8[$140>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $137 = ((($__grp)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   HEAP8[$138>>0] = 0;
   $139 = ((($__grp)) + 4|0);
   HEAP32[$139>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   $143 = ___cxa_find_matching_catch_3(0|0)|0;
   $144 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i26 = 0;
  while(1) {
   $exitcond$i$i$i27 = ($__i$0$i$i$i26|0)==(3);
   if ($exitcond$i$i$i27) {
    break;
   }
   $145 = (($8) + ($__i$0$i$i$i26<<2)|0);
   HEAP32[$145>>2] = 0;
   $146 = (($__i$0$i$i$i26) + 1)|0;
   $__i$0$i$i$i26 = $146;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $147 = HEAP32[$88>>2]|0;
  $148 = ((($147)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
  $150 = HEAP8[$__sym>>0]|0;
  $151 = $150 & 1;
  $152 = ($151<<24>>24)==(0);
  if ($152) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $153 = ((($__sym)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   HEAP32[$154>>2] = 0;
  }
  $155 = ((($__sym)) + 4|0);
  HEAP32[$155>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch_3(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i31 = 0;
  while(1) {
   $exitcond$i$i$i32 = ($__i$0$i$i$i31|0)==(3);
   if ($exitcond$i$i$i32) {
    break;
   }
   $160 = (($9) + ($__i$0$i$i$i31<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($__i$0$i$i$i31) + 1)|0;
   $__i$0$i$i$i31 = $161;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $162 = HEAP32[$88>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
  $storemerge = $165;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(589|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (597);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (589);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(387,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$94 = $__wbuf;
  label = 39;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(388,($__loc|0),(33492|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(599,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(601,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $__w$0 = $41;
      while(1) {
       $44 = ($__w$0>>>0)<($43>>>0);
       if (!($44)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $45 = HEAP32[$__w$0>>2]|0;
       $46 = ($45|0)==($38|0);
       if (!($46)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $47 = ((($__w$0)) + 4|0);
       $__w$0 = $47;
      }
      __THREW__ = 0;
      (invoke_iiii(604,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       break;
      }
     }
     $50 = HEAP32[$__b>>2]|0;
     $51 = ($50|0)==(0|0);
     do {
      if ($51) {
       $99 = 1;
      } else {
       $52 = ((($50)) + 12|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($50)) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($53|0)==($55|0);
       if ($56) {
        $57 = HEAP32[$50>>2]|0;
        $58 = ((($57)) + 36|0);
        $59 = HEAP32[$58>>2]|0;
        __THREW__ = 0;
        $60 = (invoke_ii($59|0,($50|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break L4;
        } else {
         $$0$i$i$i$i = $60;
        }
       } else {
        $63 = HEAP32[$53>>2]|0;
        $$0$i$i$i$i = $63;
       }
       $64 = ($$0$i$i$i$i|0)==(-1);
       if ($64) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $65 = ($10|0)==(0);
     do {
      if ($65) {
       label = 31;
      } else {
       $66 = ((($13)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($13)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = $10;
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($13|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         break L4;
        } else {
         $$0$i$i1$i$i = $75;
        }
       } else {
        $78 = HEAP32[$67>>2]|0;
        $$0$i$i1$i$i = $78;
       }
       $79 = ($$0$i$i1$i$i|0)==(-1);
       if ($79) {
        HEAP32[$__e>>2] = 0;
        label = 31;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 33;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      if ($99) {
       label = 33;
      }
     }
     if ((label|0) == 33) {
      $80 = HEAP32[$__err>>2]|0;
      $81 = $80 | 2;
      HEAP32[$__err>>2] = $81;
     }
     $82 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if (!($84)) {
      $85 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($85|0,($83|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch_3(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($82|0);
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0110 = $91;$$012 = $90;
  } else {
   $$011 = $90;$$019 = $91;$94 = $$pre;
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $93 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($93|0,($94|0));
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $97 = ___cxa_find_matching_catch_3(0|0)|0;
   $98 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$44 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$44 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($16) - ($17))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($17) + ($13))|0;
    $20 = (($19) - ($16))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $44;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $28 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($17<<2)|0);
   $29 = $__last;
   $30 = (($29) - ($0))|0;
   $31 = $30 >>> 2;
   $32 = (($17) + ($31))|0;
   $$0 = $__first;$__p$0 = $27;
   while(1) {
    $33 = ($$0|0)==($__last|0);
    if ($33) {
     break;
    }
    $34 = HEAP32[$$0>>2]|0;
    HEAP32[$__p$0>>2] = $34;
    $35 = ((($__p$0)) + 4|0);
    $36 = ((($$0)) + 4|0);
    $$0 = $36;$__p$0 = $35;
   }
   $scevgep = (($28) + ($32<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $37 = (($17) + ($13))|0;
   $38 = HEAP8[$this>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $37 << 1;
    $43 = $42&255;
    HEAP8[$this>>0] = $43;
    break;
   } else {
    $41 = ((($this)) + 4|0);
    HEAP32[$41>>2] = $37;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre23 = 0, $$pre23$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0, $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i6 = 0, $__i$0$i$i9 = 0;
 var $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i10 = 0, $exitcond$i$i7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,29030,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(560)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(565,($__bb|0),($3|0),(29030|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(548);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $130 = $$pre;
     } else {
      $11 = $9;
      $130 = $11;
     }
     $16 = (_malloc($6)|0);
     $17 = $16;
     $18 = ($16|0)==(0|0);
     if ($18) {
      __THREW__ = 0;
      invoke_v(548);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $__hd$sroa$0$0 = $17;$__hn$sroa$0$0 = $130;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $17;$__hn$sroa$0$1 = $130;$__n$0 = $6;
       label = 11;
      }
     } else {
      $__db$0 = $16;$__hd$sroa$0$1 = $17;$__hn$sroa$0$1 = $130;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $21 = (invoke_ii(387,($__iob|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $21;
   __THREW__ = 0;
   $24 = (invoke_iii(388,($__loc|0),(33460|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 32;
   } else {
    $27 = HEAP32[$__bb>>2]|0;
    $28 = (($27) + ($__n$0)|0);
    $29 = HEAP32[$24>>2]|0;
    $30 = ((($29)) + 32|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($31|0,($24|0),($27|0),($28|0),($__db$0|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 32;
    } else {
     $34 = ($__n$0|0)==(0);
     if ($34) {
      $44 = 0;
     } else {
      $35 = HEAP32[$__bb>>2]|0;
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(45);
      $44 = $37;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $38 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $39 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $39;
     }
     $__i$0$i$i6 = 0;
     while(1) {
      $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
      if ($exitcond$i$i7) {
       break;
      }
      $40 = (($__sym) + ($__i$0$i$i6<<2)|0);
      HEAP32[$40>>2] = 0;
      $41 = (($__i$0$i$i6) + 1)|0;
      $__i$0$i$i6 = $41;
     }
     $__i$0$i$i9 = 0;
     while(1) {
      $exitcond$i$i10 = ($__i$0$i$i9|0)==(3);
      if ($exitcond$i$i10) {
       break;
      }
      $42 = (($__sn) + ($__i$0$i$i9<<2)|0);
      HEAP32[$42>>2] = 0;
      $43 = (($__i$0$i$i9) + 1)|0;
      $__i$0$i$i9 = $43;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(605,($__intl|0),($44|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $99 = ___cxa_find_matching_catch_2()|0;
      $100 = tempRet0;
      $$0 = $99;$$01 = $100;$$pre23 = $21;
     } else {
      $47 = HEAP32[$__fd>>2]|0;
      $48 = ($__n$0|0)>($47|0);
      if ($48) {
       $49 = (($__n$0) - ($47))|0;
       $50 = $49 << 1;
       $51 = HEAP8[$__sn>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       $54 = ((($__sn)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $51&255;
       $57 = $56 >>> 1;
       $58 = $53 ? $57 : $55;
       $59 = HEAP8[$__sym>>0]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       $62 = ((($__sym)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $59&255;
       $65 = $64 >>> 1;
       $66 = $61 ? $65 : $63;
       $67 = $50 | 1;
       $68 = (($67) + ($47))|0;
       $69 = (($68) + ($58))|0;
       $70 = (($69) + ($66))|0;
       $91 = $70;
      } else {
       $71 = HEAP8[$__sn>>0]|0;
       $72 = $71 & 1;
       $73 = ($72<<24>>24)==(0);
       $74 = ((($__sn)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $71&255;
       $77 = $76 >>> 1;
       $78 = $73 ? $77 : $75;
       $79 = HEAP8[$__sym>>0]|0;
       $80 = $79 & 1;
       $81 = ($80<<24>>24)==(0);
       $82 = ((($__sym)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $79&255;
       $85 = $84 >>> 1;
       $86 = $81 ? $85 : $83;
       $87 = (($47) + 2)|0;
       $88 = (($87) + ($78))|0;
       $89 = (($88) + ($86))|0;
       $91 = $89;
      }
      $90 = ($91>>>0)>(100);
      if ($90) {
       $92 = (_malloc($91)|0);
       $93 = $92;
       $94 = ($92|0)==(0|0);
       if ($94) {
        __THREW__ = 0;
        invoke_v(548);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $__hw$sroa$0$0 = $93;
        } else {
         $__hw$sroa$0$1 = $93;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $__hw$sroa$0$1 = $93;$__mb$0 = $92;
        label = 36;
       }
      } else {
       $__hw$sroa$0$1 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $105 = ((($__iob)) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($__db$0) + ($__n$0)|0);
       $108 = HEAP8[$__dp>>0]|0;
       $109 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(606,($__mb$0|0),($__mi|0),($__me|0),($106|0),($__db$0|0),($107|0),($24|0),($44|0),($__pat|0),($108|0),($109|0),($__grp|0),($__sym|0),($__sn|0),($47|0));
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $__hw$sroa$0$0 = $__hw$sroa$0$1;
       } else {
        $112 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $112;
        $113 = HEAP32[$__mi>>2]|0;
        $114 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $115 = (invoke_iiiiiii(567,($$byval_copy|0),($__mb$0|0),($113|0),($114|0),($__iob|0),($__fl|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         $__hw$sroa$0$0 = $__hw$sroa$0$1;
        } else {
         $118 = ($__hw$sroa$0$1|0)==(0);
         if ($118) {
          $120 = $21;
         } else {
          $119 = $__hw$sroa$0$1;
          _free($119);
          $$pre25 = HEAP32[$__loc>>2]|0;
          $120 = $$pre25;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($120)|0);
         $121 = ($__hd$sroa$0$1|0)==(0);
         if (!($121)) {
          $122 = $__hd$sroa$0$1;
          _free($122);
         }
         $123 = ($__hn$sroa$0$1|0)==(0);
         if (!($123)) {
          $124 = $__hn$sroa$0$1;
          _free($124);
         }
         STACKTOP = sp;return ($115|0);
        }
       }
      }
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      $103 = ($__hw$sroa$0$0|0)==(0);
      if ($103) {
       $$0 = $101;$$01 = $102;$$pre23 = $21;
      } else {
       $104 = $__hw$sroa$0$0;
       _free($104);
       $$pre23$pre = HEAP32[$__loc>>2]|0;
       $$0 = $101;$$01 = $102;$$pre23 = $$pre23$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$125 = $$pre23;
    }
   }
   if ((label|0) == 32) {
    $97 = ___cxa_find_matching_catch_2()|0;
    $98 = tempRet0;
    $$1 = $97;$$12 = $98;$125 = $21;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   $$2 = $$1;$$23 = $$12;$__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;
 }
 $126 = ($__hd$sroa$0$2|0)==(0);
 if (!($126)) {
  $127 = $__hd$sroa$0$2;
  _free($127);
 }
 $128 = ($__hn$sroa$0$2|0)==(0);
 if (!($128)) {
  $129 = $__hn$sroa$0$2;
  _free($129);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i16 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i26 = 0, $__i$0$i$i$i31 = 0, $__i$0$i$i$i36 = 0, $__i$0$i$i$i6 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i17 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i27 = 0, $exitcond$i$i$i32 = 0, $exitcond$i$i$i37 = 0, $exitcond$i$i$i7 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35180)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = ((($__sn)) + 1|0);
    HEAP8[$26>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP8[$24>>0] = 0;
    $25 = ((($__sn)) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(596,($__sn|0),0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $31 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$31>>2] = 0;
    $32 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $32;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $$pre$phiZ2D = $12;
  } else {
   $33 = ((($13)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
   $35 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
   $36 = HEAP32[$12>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
   $39 = HEAP8[$__sn>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $45 = ((($__sn)) + 1|0);
    HEAP8[$45>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $42 = ((($__sn)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP8[$43>>0] = 0;
    $44 = ((($__sn)) + 4|0);
    HEAP32[$44>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(596,($__sn|0),0);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $48 = ___cxa_find_matching_catch_3(0|0)|0;
    $49 = tempRet0;
    ___clang_call_terminate($48);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i6 = 0;
   while(1) {
    $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
    if ($exitcond$i$i$i7) {
     break;
    }
    $50 = (($3) + ($__i$0$i$i$i6<<2)|0);
    HEAP32[$50>>2] = 0;
    $51 = (($__i$0$i$i$i6) + 1)|0;
    $__i$0$i$i$i6 = $51;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$pre$phiZ2D = $12;
  }
  $52 = HEAP32[$12>>2]|0;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $59;
  $60 = HEAP32[$$pre$phiZ2D>>2]|0;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
  $63 = HEAP8[$__grp>>0]|0;
  $64 = $63 & 1;
  $65 = ($64<<24>>24)==(0);
  if ($65) {
   $69 = ((($__grp)) + 1|0);
   HEAP8[$69>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $66 = ((($__grp)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP8[$67>>0] = 0;
   $68 = ((($__grp)) + 4|0);
   HEAP32[$68>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  if ($71) {
   $72 = ___cxa_find_matching_catch_3(0|0)|0;
   $73 = tempRet0;
   ___clang_call_terminate($72);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $74 = (($4) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$74>>2] = 0;
   $75 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $75;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $76 = HEAP32[$$pre$phiZ2D>>2]|0;
  $77 = ((($76)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
  $79 = HEAP8[$__sym>>0]|0;
  $80 = $79 & 1;
  $81 = ($80<<24>>24)==(0);
  if ($81) {
   $85 = ((($__sym)) + 1|0);
   HEAP8[$85>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $82 = ((($__sym)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   HEAP8[$83>>0] = 0;
   $84 = ((($__sym)) + 4|0);
   HEAP32[$84>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__sym|0),0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i16 = 0;
  while(1) {
   $exitcond$i$i$i17 = ($__i$0$i$i$i16|0)==(3);
   if ($exitcond$i$i$i17) {
    break;
   }
   $90 = (($5) + ($__i$0$i$i$i16<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($__i$0$i$i$i16) + 1)|0;
   $__i$0$i$i$i16 = $91;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $92 = HEAP32[$12>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35172)|0);
  $97 = HEAP32[$96>>2]|0;
  if ($__neg) {
   $98 = ((($97)) + 44|0);
   $99 = HEAP32[$98>>2]|0;
   FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
   $100 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
   $101 = HEAP32[$96>>2]|0;
   $102 = ((($101)) + 32|0);
   $103 = HEAP32[$102>>2]|0;
   FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
   $104 = HEAP8[$__sn>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $110 = ((($__sn)) + 1|0);
    HEAP8[$110>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $107 = ((($__sn)) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    HEAP8[$108>>0] = 0;
    $109 = ((($__sn)) + 4|0);
    HEAP32[$109>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(596,($__sn|0),0);
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $113 = ___cxa_find_matching_catch_3(0|0)|0;
    $114 = tempRet0;
    ___clang_call_terminate($113);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i21 = 0;
   while(1) {
    $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
    if ($exitcond$i$i$i22) {
     break;
    }
    $115 = (($7) + ($__i$0$i$i$i21<<2)|0);
    HEAP32[$115>>2] = 0;
    $116 = (($__i$0$i$i$i21) + 1)|0;
    $__i$0$i$i$i21 = $116;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$pre$phi39Z2D = $96;
  } else {
   $117 = ((($97)) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
   $119 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
   $120 = HEAP32[$96>>2]|0;
   $121 = ((($120)) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
   $123 = HEAP8[$__sn>>0]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $129 = ((($__sn)) + 1|0);
    HEAP8[$129>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $126 = ((($__sn)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    HEAP8[$127>>0] = 0;
    $128 = ((($__sn)) + 4|0);
    HEAP32[$128>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(596,($__sn|0),0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    $132 = ___cxa_find_matching_catch_3(0|0)|0;
    $133 = tempRet0;
    ___clang_call_terminate($132);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i26 = 0;
   while(1) {
    $exitcond$i$i$i27 = ($__i$0$i$i$i26|0)==(3);
    if ($exitcond$i$i$i27) {
     break;
    }
    $134 = (($9) + ($__i$0$i$i$i26<<2)|0);
    HEAP32[$134>>2] = 0;
    $135 = (($__i$0$i$i$i26) + 1)|0;
    $__i$0$i$i$i26 = $135;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
   $$pre$phi39Z2D = $96;
  }
  $136 = HEAP32[$96>>2]|0;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
  HEAP8[$__dp>>0] = $139;
  $140 = HEAP32[$96>>2]|0;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
  HEAP8[$__ts>>0] = $143;
  $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $145 = ((($144)) + 20|0);
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
  $147 = HEAP8[$__grp>>0]|0;
  $148 = $147 & 1;
  $149 = ($148<<24>>24)==(0);
  if ($149) {
   $153 = ((($__grp)) + 1|0);
   HEAP8[$153>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $150 = ((($__grp)) + 8|0);
   $151 = HEAP32[$150>>2]|0;
   HEAP8[$151>>0] = 0;
   $152 = ((($__grp)) + 4|0);
   HEAP32[$152>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if ($155) {
   $156 = ___cxa_find_matching_catch_3(0|0)|0;
   $157 = tempRet0;
   ___clang_call_terminate($156);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i31 = 0;
  while(1) {
   $exitcond$i$i$i32 = ($__i$0$i$i$i31|0)==(3);
   if ($exitcond$i$i$i32) {
    break;
   }
   $158 = (($10) + ($__i$0$i$i$i31<<2)|0);
   HEAP32[$158>>2] = 0;
   $159 = (($__i$0$i$i$i31) + 1)|0;
   $__i$0$i$i$i31 = $159;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $161 = ((($160)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
  $163 = HEAP8[$__sym>>0]|0;
  $164 = $163 & 1;
  $165 = ($164<<24>>24)==(0);
  if ($165) {
   $169 = ((($__sym)) + 1|0);
   HEAP8[$169>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $166 = ((($__sym)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   HEAP8[$167>>0] = 0;
   $168 = ((($__sym)) + 4|0);
   HEAP32[$168>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__sym|0),0);
  $170 = __THREW__; __THREW__ = 0;
  $171 = $170&1;
  if ($171) {
   $172 = ___cxa_find_matching_catch_3(0|0)|0;
   $173 = tempRet0;
   ___clang_call_terminate($172);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i36 = 0;
  while(1) {
   $exitcond$i$i$i37 = ($__i$0$i$i$i36|0)==(3);
   if ($exitcond$i$i$i37) {
    break;
   }
   $174 = (($11) + ($__i$0$i$i$i36<<2)|0);
   HEAP32[$174>>2] = 0;
   $175 = (($__i$0$i$i$i36) + 1)|0;
   $__i$0$i$i$i36 = $175;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $176 = HEAP32[$96>>2]|0;
  $177 = ((($176)) + 36|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
  $storemerge = $179;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$lcssa = 0, $$0$i$i2 = 0, $$0$i$i9 = 0, $$0$i$i9$lcssa = 0, $$01$i$i = 0, $$2 = 0, $$lcssa36 = 0, $$pn = 0, $$sroa$04$0$i = 0, $$sroa$04$0$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $21 = (($__pat) + ($__p$0)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  L4: do {
   switch ($23|0) {
   case 0:  {
    $24 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $24;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $25 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $25;
    $26 = HEAP32[$__ct>>2]|0;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iii[$28 & 1023]($__ct,32)|0);
    $30 = HEAP32[$__me>>2]|0;
    $31 = ((($30)) + 1|0);
    HEAP32[$__me>>2] = $31;
    HEAP8[$30>>0] = $29;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $32 = HEAP8[$__sn>>0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    $35 = HEAP32[$0>>2]|0;
    $36 = $32&255;
    $37 = $36 >>> 1;
    $38 = $34 ? $37 : $35;
    $39 = ($38|0)==(0);
    if ($39) {
     $$2 = $$0;
    } else {
     $40 = HEAP32[$1>>2]|0;
     $41 = $34 ? $2 : $40;
     $42 = HEAP8[$41>>0]|0;
     $43 = HEAP32[$__me>>2]|0;
     $44 = ((($43)) + 1|0);
     HEAP32[$__me>>2] = $44;
     HEAP8[$43>>0] = $42;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $45 = HEAP8[$__sym>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    $48 = HEAP32[$3>>2]|0;
    $49 = $45&255;
    $50 = $49 >>> 1;
    $51 = $47 ? $50 : $48;
    $52 = ($51|0)==(0);
    $or$cond = $5 | $52;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $53 = HEAP32[$6>>2]|0;
     $54 = $47 ? $7 : $53;
     $55 = (($54) + ($51)|0);
     $56 = HEAP32[$__me>>2]|0;
     $$0$i$i9 = $56;$$sroa$04$0$i8 = $54;
     while(1) {
      $57 = ($$sroa$04$0$i8|0)==($55|0);
      if ($57) {
       $$0$i$i9$lcssa = $$0$i$i9;
       break;
      }
      $58 = HEAP8[$$sroa$04$0$i8>>0]|0;
      HEAP8[$$0$i$i9>>0] = $58;
      $59 = ((($$sroa$04$0$i8)) + 1|0);
      $60 = ((($$0$i$i9)) + 1|0);
      $$0$i$i9 = $60;$$sroa$04$0$i8 = $59;
     }
     HEAP32[$__me>>2] = $$0$i$i9$lcssa;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $61 = HEAP32[$__me>>2]|0;
    $62 = ((($$0)) + 1|0);
    $$$0 = $__neg ? $62 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $63 = ($__d$0>>>0)<($__de>>>0);
     if (!($63)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $64 = HEAP8[$__d$0>>0]|0;
     $isascii1$i = ($64<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $65 = $64 << 24 >> 24;
     $66 = HEAP32[$8>>2]|0;
     $67 = (($66) + ($65<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 & 2048;
     $70 = ($69<<16>>16)==(0);
     if ($70) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $71 = ((($__d$0)) + 1|0);
     $__d$0 = $71;
    }
    if ($9) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $72 = ($__d$1>>>0)>($$$0>>>0);
      $73 = ($__f$0|0)>(0);
      $74 = $72 & $73;
      if (!($74)) {
       break;
      }
      $75 = ((($__d$1)) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = HEAP32[$__me>>2]|0;
      $78 = ((($77)) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$77>>0] = $76;
      $79 = (($__f$0) + -1)|0;
      $__d$1 = $75;$__f$0 = $79;
     }
     if ($73) {
      $80 = HEAP32[$__ct>>2]|0;
      $81 = ((($80)) + 28|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_iii[$82 & 1023]($__ct,48)|0);
      $87 = $83;
     } else {
      $87 = 0;
     }
     $__f$1 = $__f$0;
     while(1) {
      $84 = ($__f$1|0)>(0);
      $85 = HEAP32[$__me>>2]|0;
      $86 = ((($85)) + 1|0);
      HEAP32[$__me>>2] = $86;
      if (!($84)) {
       $$lcssa36 = $85;
       break;
      }
      HEAP8[$85>>0] = $87;
      $88 = (($__f$1) + -1)|0;
      $__f$1 = $88;
     }
     HEAP8[$$lcssa36>>0] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $89 = ($__d$2|0)==($$$0|0);
    L35: do {
     if ($89) {
      $90 = HEAP32[$__ct>>2]|0;
      $91 = ((($90)) + 28|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (FUNCTION_TABLE_iii[$92 & 1023]($__ct,48)|0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = ((($94)) + 1|0);
      HEAP32[$__me>>2] = $95;
      HEAP8[$94>>0] = $93;
     } else {
      $96 = HEAP8[$__grp>>0]|0;
      $97 = $96 & 1;
      $98 = ($97<<24>>24)==(0);
      $99 = HEAP32[$10>>2]|0;
      $100 = $96&255;
      $101 = $100 >>> 1;
      $102 = $98 ? $101 : $99;
      $103 = ($102|0)==(0);
      if ($103) {
       $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
      } else {
       $104 = HEAP32[$11>>2]|0;
       $105 = $98 ? $12 : $104;
       $106 = HEAP8[$105>>0]|0;
       $107 = $106 << 24 >> 24;
       $__d$3 = $__d$2;$__gl$0 = $107;$__ig$0 = 0;$__ng$0 = 0;
      }
      while(1) {
       $108 = ($__d$3|0)==($$$0|0);
       if ($108) {
        break L35;
       }
       $109 = ($__ng$0|0)==($__gl$0|0);
       if ($109) {
        $110 = HEAP32[$__me>>2]|0;
        $111 = ((($110)) + 1|0);
        HEAP32[$__me>>2] = $111;
        HEAP8[$110>>0] = $__ts;
        $112 = (($__ig$0) + 1)|0;
        $113 = HEAP8[$__grp>>0]|0;
        $114 = $113 & 1;
        $115 = ($114<<24>>24)==(0);
        $116 = HEAP32[$10>>2]|0;
        $117 = $113&255;
        $118 = $117 >>> 1;
        $119 = $115 ? $118 : $116;
        $120 = ($112>>>0)<($119>>>0);
        if ($120) {
         $121 = HEAP32[$11>>2]|0;
         $122 = $115 ? $12 : $121;
         $123 = (($122) + ($112)|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = ($124<<24>>24)==(127);
         $126 = $124 << 24 >> 24;
         $$ = $125 ? -1 : $126;
         $__gl$1 = $$;$__ig$1 = $112;$__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $112;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $127 = ((($__d$3)) + -1|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = HEAP32[$__me>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$__me>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = (($__ng$1) + 1)|0;
       $__d$3 = $127;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $131;
      }
     }
    } while(0);
    $132 = HEAP32[$__me>>2]|0;
    $133 = ($61|0)==($132|0);
    if ($133) {
     $$2 = $$$0;
    } else {
     $$0$i$i2 = $132;$$01$i$i = $61;
     while(1) {
      $134 = ((($$0$i$i2)) + -1|0);
      $135 = ($$01$i$i>>>0)<($134>>>0);
      if (!($135)) {
       $$2 = $$$0;
       break L4;
      }
      $136 = HEAP8[$$01$i$i>>0]|0;
      $137 = HEAP8[$134>>0]|0;
      HEAP8[$$01$i$i>>0] = $137;
      HEAP8[$134>>0] = $136;
      $138 = ((($$01$i$i)) + 1|0);
      $$0$i$i2 = $134;$$01$i$i = $138;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $139 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $139;
 }
 $13 = HEAP8[$__sn>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 $16 = HEAP32[$0>>2]|0;
 $17 = $13&255;
 $18 = $17 >>> 1;
 $19 = $15 ? $18 : $16;
 $20 = ($19>>>0)>(1);
 if ($20) {
  $140 = HEAP32[$1>>2]|0;
  $141 = $15 ? $2 : $140;
  $142 = (($141) + ($19)|0);
  $143 = HEAP32[$__me>>2]|0;
  $$0$i$i = $143;$$pn = $141;
  while(1) {
   $$sroa$04$0$i = ((($$pn)) + 1|0);
   $144 = ($$sroa$04$0$i|0)==($142|0);
   if ($144) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   $145 = HEAP8[$$sroa$04$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $145;
   $146 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $146;$$pn = $$sroa$04$0$i;
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $147 = $__flags & 176;
 switch ($147|0) {
 case 32:  {
  $148 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $148;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0;
 var $__grp = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i3 = 0, $__i$0$i$i6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, $exitcond$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(388,($__loc|0),(33460|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 22;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $26 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$26>>2] = 0;
    $27 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $27;
   }
   $__i$0$i$i3 = 0;
   while(1) {
    $exitcond$i$i4 = ($__i$0$i$i3|0)==(3);
    if ($exitcond$i$i4) {
     break;
    }
    $28 = (($__sym) + ($__i$0$i$i3<<2)|0);
    HEAP32[$28>>2] = 0;
    $29 = (($__i$0$i$i3) + 1)|0;
    $__i$0$i$i3 = $29;
   }
   $__i$0$i$i6 = 0;
   while(1) {
    $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
    if ($exitcond$i$i7) {
     break;
    }
    $30 = (($__sn) + ($__i$0$i$i6<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i6) + 1)|0;
    $__i$0$i$i6 = $31;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(605,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $86 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $86 = $84;
    }
    $85 = ($86>>>0)>(100);
    if ($85) {
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(548);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $__h$sroa$0$0 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $103 = $$pre;$112 = $$pre18;$__h$sroa$0$1 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $103 = $35;$112 = $38;$__h$sroa$0$1 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $103 = $35;$112 = $38;$__h$sroa$0$1 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $100 = ((($__iob)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $103 & 1;
     $104 = ($102<<24>>24)==(0);
     $105 = ((($__digits)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($__digits)) + 1|0);
     $108 = $104 ? $107 : $106;
     $109 = $103&255;
     $110 = $109 >>> 1;
     $111 = $104 ? $110 : $112;
     $113 = (($108) + ($111)|0);
     $114 = HEAP8[$__dp>>0]|0;
     $115 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(606,($__mb$0|0),($__mi|0),($__me|0),($101|0),($108|0),($113|0),($2|0),($32|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $__h$sroa$0$0 = $__h$sroa$0$1;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(567,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $__h$sroa$0$0 = $__h$sroa$0$1;
      } else {
       $124 = ($__h$sroa$0$1|0)==(0);
       if ($124) {
        $126 = $1;
       } else {
        $125 = $__h$sroa$0$1;
        _free($125);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $126 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($126)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $98 = ($__h$sroa$0$0|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $99 = $__h$sroa$0$0;
     _free($99);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$127 = $$pre19;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch_2()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$127 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0, $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0;
 var $__i$0$i$i4 = 0, $__i$0$i$i6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i5 = 0, $exitcond$i$i7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,29030,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(560)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(565,($__bb|0),($3|0),(29030|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(548);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $132 = $$pre;
     } else {
      $11 = $9;
      $132 = $11;
     }
     $16 = $6 << 2;
     $17 = (_malloc($16)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(548);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $__hd$sroa$0$0 = $18;$__hn$sroa$0$0 = $132;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $18;$__hn$sroa$0$1 = $132;$__n$0 = $6;
       label = 11;
      }
     } else {
      $__db$0 = $17;$__hd$sroa$0$1 = $18;$__hn$sroa$0$1 = $132;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $22 = (invoke_ii(387,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(388,($__loc|0),(33492|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 32;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 48|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 32;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $39 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$39>>2] = 0;
      $40 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $40;
     }
     $__i$0$i$i4 = 0;
     while(1) {
      $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
      if ($exitcond$i$i5) {
       break;
      }
      $41 = (($__sym) + ($__i$0$i$i4<<2)|0);
      HEAP32[$41>>2] = 0;
      $42 = (($__i$0$i$i4) + 1)|0;
      $__i$0$i$i4 = $42;
     }
     $__i$0$i$i6 = 0;
     while(1) {
      $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
      if ($exitcond$i$i7) {
       break;
      }
      $43 = (($__sn) + ($__i$0$i$i6<<2)|0);
      HEAP32[$43>>2] = 0;
      $44 = (($__i$0$i$i6) + 1)|0;
      $__i$0$i$i6 = $44;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(607,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      $$0 = $101;$$01 = $102;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $92 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $92 = $90;
      }
      $91 = ($92>>>0)>(100);
      if ($91) {
       $93 = $92 << 2;
       $94 = (_malloc($93)|0);
       $95 = $94;
       $96 = ($94|0)==(0|0);
       if ($96) {
        __THREW__ = 0;
        invoke_v(548);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         $__hw$sroa$0$0 = $95;
        } else {
         $__hw$sroa$0$1 = $95;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $__hw$sroa$0$1 = $95;$__mb$0 = $94;
        label = 36;
       }
      } else {
       $__hw$sroa$0$1 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $107 = ((($__iob)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($__db$0) + ($__n$0<<2)|0);
       $110 = HEAP32[$__dp>>2]|0;
       $111 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(608,($__mb$0|0),($__mi|0),($__me|0),($108|0),($__db$0|0),($109|0),($25|0),($45|0),($__pat|0),($110|0),($111|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $__hw$sroa$0$0 = $__hw$sroa$0$1;
       } else {
        $114 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $114;
        $115 = HEAP32[$__mi>>2]|0;
        $116 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $117 = (invoke_iiiiiii(573,($$byval_copy|0),($__mb$0|0),($115|0),($116|0),($__iob|0),($__fl|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $__hw$sroa$0$0 = $__hw$sroa$0$1;
        } else {
         $120 = ($__hw$sroa$0$1|0)==(0);
         if ($120) {
          $122 = $22;
         } else {
          $121 = $__hw$sroa$0$1;
          _free($121);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $122 = $$pre22;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
         $123 = ($__hd$sroa$0$1|0)==(0);
         if (!($123)) {
          $124 = $__hd$sroa$0$1;
          _free($124);
         }
         $125 = ($__hn$sroa$0$1|0)==(0);
         if (!($125)) {
          $126 = $__hn$sroa$0$1;
          _free($126);
         }
         STACKTOP = sp;return ($117|0);
        }
       }
      }
      $103 = ___cxa_find_matching_catch_2()|0;
      $104 = tempRet0;
      $105 = ($__hw$sroa$0$0|0)==(0);
      if ($105) {
       $$0 = $103;$$01 = $104;$$pre20 = $22;
      } else {
       $106 = $__hw$sroa$0$0;
       _free($106);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $103;$$01 = $104;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$127 = $$pre20;
    }
   }
   if ((label|0) == 32) {
    $99 = ___cxa_find_matching_catch_2()|0;
    $100 = tempRet0;
    $$1 = $99;$$12 = $100;$127 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
   $$2 = $$1;$$23 = $$12;$__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;
 }
 $128 = ($__hd$sroa$0$2|0)==(0);
 if (!($128)) {
  $129 = $__hd$sroa$0$2;
  _free($129);
 }
 $130 = ($__hn$sroa$0$2|0)==(0);
 if (!($130)) {
  $131 = $__hn$sroa$0$2;
  _free($131);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i18 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i28 = 0, $__i$0$i$i$i33 = 0;
 var $__i$0$i$i$i6 = 0, $__i$0$i$i$i9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i14 = 0, $exitcond$i$i$i19 = 0, $exitcond$i$i$i24 = 0, $exitcond$i$i$i29 = 0, $exitcond$i$i$i34 = 0, $exitcond$i$i$i7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35196)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$24>>2] = 0;
   }
   $25 = ((($__sn)) + 4|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_vii(603,($__sn|0),0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch_3(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $30 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $31;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   $32 = ((($13)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
   $34 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
   $38 = HEAP8[$__sn>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $41 = ((($__sn)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$42>>2] = 0;
   }
   $43 = ((($__sn)) + 4|0);
   HEAP32[$43>>2] = 0;
   __THREW__ = 0;
   invoke_vii(603,($__sn|0),0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $46 = ___cxa_find_matching_catch_3(0|0)|0;
    $47 = tempRet0;
    ___clang_call_terminate($46);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i6 = 0;
   while(1) {
    $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
    if ($exitcond$i$i$i7) {
     break;
    }
    $48 = (($3) + ($__i$0$i$i$i6<<2)|0);
    HEAP32[$48>>2] = 0;
    $49 = (($__i$0$i$i$i6) + 1)|0;
    $__i$0$i$i$i6 = $49;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  $50 = HEAP32[$12>>2]|0;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $53;
  $54 = HEAP32[$12>>2]|0;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $57;
  $58 = HEAP32[$12>>2]|0;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
  $61 = HEAP8[$__grp>>0]|0;
  $62 = $61 & 1;
  $63 = ($62<<24>>24)==(0);
  if ($63) {
   $67 = ((($__grp)) + 1|0);
   HEAP8[$67>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $64 = ((($__grp)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP8[$65>>0] = 0;
   $66 = ((($__grp)) + 4|0);
   HEAP32[$66>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   $70 = ___cxa_find_matching_catch_3(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $72 = (($4) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$72>>2] = 0;
   $73 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $73;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $74 = HEAP32[$12>>2]|0;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
  $77 = HEAP8[$__sym>>0]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $80 = ((($__sym)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP32[$81>>2] = 0;
  }
  $82 = ((($__sym)) + 4|0);
  HEAP32[$82>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__sym|0),0);
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $85 = ___cxa_find_matching_catch_3(0|0)|0;
   $86 = tempRet0;
   ___clang_call_terminate($85);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i13 = 0;
  while(1) {
   $exitcond$i$i$i14 = ($__i$0$i$i$i13|0)==(3);
   if ($exitcond$i$i$i14) {
    break;
   }
   $87 = (($5) + ($__i$0$i$i$i13<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($__i$0$i$i$i13) + 1)|0;
   $__i$0$i$i$i13 = $88;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $89 = HEAP32[$12>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,35188)|0);
  $94 = HEAP32[$93>>2]|0;
  if ($__neg) {
   $95 = ((($94)) + 44|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
   $97 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
   $98 = HEAP32[$93>>2]|0;
   $99 = ((($98)) + 32|0);
   $100 = HEAP32[$99>>2]|0;
   FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
   $101 = HEAP8[$__sn>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $104 = ((($__sn)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$105>>2] = 0;
   }
   $106 = ((($__sn)) + 4|0);
   HEAP32[$106>>2] = 0;
   __THREW__ = 0;
   invoke_vii(603,($__sn|0),0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch_3(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i18 = 0;
   while(1) {
    $exitcond$i$i$i19 = ($__i$0$i$i$i18|0)==(3);
    if ($exitcond$i$i$i19) {
     break;
    }
    $111 = (($7) + ($__i$0$i$i$i18<<2)|0);
    HEAP32[$111>>2] = 0;
    $112 = (($__i$0$i$i$i18) + 1)|0;
    $__i$0$i$i$i18 = $112;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   $113 = ((($94)) + 40|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
   $115 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
   $116 = HEAP32[$93>>2]|0;
   $117 = ((($116)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
   $119 = HEAP8[$__sn>>0]|0;
   $120 = $119 & 1;
   $121 = ($120<<24>>24)==(0);
   if ($121) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $122 = ((($__sn)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    HEAP32[$123>>2] = 0;
   }
   $124 = ((($__sn)) + 4|0);
   HEAP32[$124>>2] = 0;
   __THREW__ = 0;
   invoke_vii(603,($__sn|0),0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    $127 = ___cxa_find_matching_catch_3(0|0)|0;
    $128 = tempRet0;
    ___clang_call_terminate($127);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i23 = 0;
   while(1) {
    $exitcond$i$i$i24 = ($__i$0$i$i$i23|0)==(3);
    if ($exitcond$i$i$i24) {
     break;
    }
    $129 = (($9) + ($__i$0$i$i$i23<<2)|0);
    HEAP32[$129>>2] = 0;
    $130 = (($__i$0$i$i$i23) + 1)|0;
    $__i$0$i$i$i23 = $130;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  $131 = HEAP32[$93>>2]|0;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
  HEAP32[$__dp>>2] = $134;
  $135 = HEAP32[$93>>2]|0;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
  HEAP32[$__ts>>2] = $138;
  $139 = HEAP32[$93>>2]|0;
  $140 = ((($139)) + 20|0);
  $141 = HEAP32[$140>>2]|0;
  FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
  $142 = HEAP8[$__grp>>0]|0;
  $143 = $142 & 1;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $148 = ((($__grp)) + 1|0);
   HEAP8[$148>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $145 = ((($__grp)) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP8[$146>>0] = 0;
   $147 = ((($__grp)) + 4|0);
   HEAP32[$147>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(596,($__grp|0),0);
  $149 = __THREW__; __THREW__ = 0;
  $150 = $149&1;
  if ($150) {
   $151 = ___cxa_find_matching_catch_3(0|0)|0;
   $152 = tempRet0;
   ___clang_call_terminate($151);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i28 = 0;
  while(1) {
   $exitcond$i$i$i29 = ($__i$0$i$i$i28|0)==(3);
   if ($exitcond$i$i$i29) {
    break;
   }
   $153 = (($10) + ($__i$0$i$i$i28<<2)|0);
   HEAP32[$153>>2] = 0;
   $154 = (($__i$0$i$i$i28) + 1)|0;
   $__i$0$i$i$i28 = $154;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $155 = HEAP32[$93>>2]|0;
  $156 = ((($155)) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
  $158 = HEAP8[$__sym>>0]|0;
  $159 = $158 & 1;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $161 = ((($__sym)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   HEAP32[$162>>2] = 0;
  }
  $163 = ((($__sym)) + 4|0);
  HEAP32[$163>>2] = 0;
  __THREW__ = 0;
  invoke_vii(603,($__sym|0),0);
  $164 = __THREW__; __THREW__ = 0;
  $165 = $164&1;
  if ($165) {
   $166 = ___cxa_find_matching_catch_3(0|0)|0;
   $167 = tempRet0;
   ___clang_call_terminate($166);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i33 = 0;
  while(1) {
   $exitcond$i$i$i34 = ($__i$0$i$i$i33|0)==(3);
   if ($exitcond$i$i$i34) {
    break;
   }
   $168 = (($11) + ($__i$0$i$i$i33<<2)|0);
   HEAP32[$168>>2] = 0;
   $169 = (($__i$0$i$i$i33) + 1)|0;
   $__i$0$i$i$i33 = $169;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $170 = HEAP32[$93>>2]|0;
  $171 = ((($170)) + 36|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
  $storemerge = $173;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0;
 var $scevgep$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $18 = (($__pat) + ($__p$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  L4: do {
   switch ($20|0) {
   case 0:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $22 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $22;
    $23 = HEAP32[$__ct>>2]|0;
    $24 = ((($23)) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 1023]($__ct,32)|0);
    $27 = HEAP32[$__me>>2]|0;
    $28 = ((($27)) + 4|0);
    HEAP32[$__me>>2] = $28;
    HEAP32[$27>>2] = $26;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $29 = HEAP8[$__sn>>0]|0;
    $30 = $29 & 1;
    $31 = ($30<<24>>24)==(0);
    $32 = HEAP32[$0>>2]|0;
    $33 = $29&255;
    $34 = $33 >>> 1;
    $35 = $31 ? $34 : $32;
    $36 = ($35|0)==(0);
    if ($36) {
     $$2 = $$0;
    } else {
     $37 = HEAP32[$1>>2]|0;
     $38 = $31 ? $0 : $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$__me>>2]|0;
     $41 = ((($40)) + 4|0);
     HEAP32[$__me>>2] = $41;
     HEAP32[$40>>2] = $39;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $42 = HEAP8[$__sym>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    $45 = HEAP32[$2>>2]|0;
    $46 = $42&255;
    $47 = $46 >>> 1;
    $48 = $44 ? $47 : $45;
    $49 = ($48|0)==(0);
    $or$cond = $4 | $49;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $50 = HEAP32[$5>>2]|0;
     $51 = $44 ? $2 : $50;
     $52 = (($51) + ($48<<2)|0);
     $53 = HEAP32[$__me>>2]|0;
     $$0$i$i6 = $53;$55 = $51;
     while(1) {
      $54 = ($55|0)==($52|0);
      if ($54) {
       break;
      }
      $56 = HEAP32[$55>>2]|0;
      HEAP32[$$0$i$i6>>2] = $56;
      $57 = ((($55)) + 4|0);
      $58 = ((($$0$i$i6)) + 4|0);
      $$0$i$i6 = $58;$55 = $57;
     }
     $scevgep$i7 = (($53) + ($48<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i7;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $59 = HEAP32[$__me>>2]|0;
    $60 = ((($$0)) + 4|0);
    $$$0 = $__neg ? $60 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $61 = ($__d$0>>>0)<($__de>>>0);
     if (!($61)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $62 = HEAP32[$__d$0>>2]|0;
     $63 = HEAP32[$__ct>>2]|0;
     $64 = ((($63)) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiii[$65 & 1023]($__ct,2048,$62)|0);
     if (!($66)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $67 = ((($__d$0)) + 4|0);
     $__d$0 = $67;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $68 = ($__d$1>>>0)>($$$0>>>0);
      $69 = ($__f$0|0)>(0);
      $70 = $68 & $69;
      if (!($70)) {
       break;
      }
      $71 = ((($__d$1)) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = HEAP32[$__me>>2]|0;
      $74 = ((($73)) + 4|0);
      HEAP32[$__me>>2] = $74;
      HEAP32[$73>>2] = $72;
      $75 = (($__f$0) + -1)|0;
      $__d$1 = $71;$__f$0 = $75;
     }
     if ($69) {
      $76 = HEAP32[$__ct>>2]|0;
      $77 = ((($76)) + 44|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (FUNCTION_TABLE_iii[$78 & 1023]($__ct,48)|0);
      $83 = $79;
     } else {
      $83 = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $82 = $__me$promoted;$__f$1 = $__f$0;
     while(1) {
      $80 = ($__f$1|0)>(0);
      $81 = ((($82)) + 4|0);
      if (!($80)) {
       $$lcssa34 = $82;$$lcssa35 = $81;
       break;
      }
      HEAP32[$82>>2] = $83;
      $84 = (($__f$1) + -1)|0;
      $82 = $81;$__f$1 = $84;
     }
     HEAP32[$__me>>2] = $$lcssa35;
     HEAP32[$$lcssa34>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $85 = ($__d$2|0)==($$$0|0);
    if ($85) {
     $86 = HEAP32[$__ct>>2]|0;
     $87 = ((($86)) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_iii[$88 & 1023]($__ct,48)|0);
     $90 = HEAP32[$__me>>2]|0;
     $91 = ((($90)) + 4|0);
     HEAP32[$__me>>2] = $91;
     HEAP32[$90>>2] = $89;
     $128 = $91;
    } else {
     $92 = HEAP8[$__grp>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     $95 = HEAP32[$7>>2]|0;
     $96 = $92&255;
     $97 = $96 >>> 1;
     $98 = $94 ? $97 : $95;
     $99 = ($98|0)==(0);
     if ($99) {
      $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
     } else {
      $100 = HEAP32[$8>>2]|0;
      $101 = $94 ? $9 : $100;
      $102 = HEAP8[$101>>0]|0;
      $103 = $102 << 24 >> 24;
      $__d$3 = $__d$2;$__gl$0 = $103;$__ig$0 = 0;$__ng$0 = 0;
     }
     while(1) {
      $104 = ($__d$3|0)==($$$0|0);
      if ($104) {
       break;
      }
      $105 = ($__ng$0|0)==($__gl$0|0);
      $106 = HEAP32[$__me>>2]|0;
      if ($105) {
       $107 = ((($106)) + 4|0);
       HEAP32[$__me>>2] = $107;
       HEAP32[$106>>2] = $__ts;
       $108 = (($__ig$0) + 1)|0;
       $109 = HEAP8[$__grp>>0]|0;
       $110 = $109 & 1;
       $111 = ($110<<24>>24)==(0);
       $112 = $109&255;
       $113 = $112 >>> 1;
       $114 = $111 ? $113 : $95;
       $115 = ($108>>>0)<($114>>>0);
       if ($115) {
        $116 = HEAP32[$8>>2]|0;
        $117 = $111 ? $9 : $116;
        $118 = (($117) + ($108)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = ($119<<24>>24)==(127);
        $121 = $119 << 24 >> 24;
        $$ = $120 ? -1 : $121;
        $125 = $107;$__gl$1 = $$;$__ig$1 = $108;$__ng$1 = 0;
       } else {
        $125 = $107;$__gl$1 = $__ng$0;$__ig$1 = $108;$__ng$1 = 0;
       }
      } else {
       $125 = $106;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $122 = ((($__d$3)) + -4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($125)) + 4|0);
      HEAP32[$__me>>2] = $124;
      HEAP32[$125>>2] = $123;
      $126 = (($__ng$1) + 1)|0;
      $__d$3 = $122;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $126;
     }
     $$pre27 = HEAP32[$__me>>2]|0;
     $128 = $$pre27;
    }
    $127 = ($59|0)==($128|0);
    if ($127) {
     $$2 = $$$0;
    } else {
     $$0$i$i2 = $128;$$01$i$i = $59;
     while(1) {
      $129 = ((($$0$i$i2)) + -4|0);
      $130 = ($$01$i$i>>>0)<($129>>>0);
      if (!($130)) {
       $$2 = $$$0;
       break L4;
      }
      $131 = HEAP32[$$01$i$i>>2]|0;
      $132 = HEAP32[$129>>2]|0;
      HEAP32[$$01$i$i>>2] = $132;
      HEAP32[$129>>2] = $131;
      $133 = ((($$01$i$i)) + 4|0);
      $$0$i$i2 = $129;$$01$i$i = $133;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $134 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $134;
 }
 $10 = HEAP8[$__sn>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 $13 = HEAP32[$0>>2]|0;
 $14 = $10&255;
 $15 = $14 >>> 1;
 $16 = $12 ? $15 : $13;
 $17 = ($16>>>0)>(1);
 if ($17) {
  $135 = HEAP32[$1>>2]|0;
  $136 = $12 ? $0 : $135;
  $137 = ((($136)) + 4|0);
  $138 = (($136) + ($16<<2)|0);
  $139 = HEAP32[$__me>>2]|0;
  $140 = $137;
  $141 = $138;
  $142 = (($141) - ($140))|0;
  $$0$i$i = $139;$144 = $137;
  while(1) {
   $143 = ($144|0)==($138|0);
   if ($143) {
    break;
   }
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$$0$i$i>>2] = $145;
   $146 = ((($144)) + 4|0);
   $147 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $147;$144 = $146;
  }
  $148 = $142 >>> 2;
  $scevgep$i = (($139) + ($148<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $149 = $__flags & 176;
 switch ($149|0) {
 case 32:  {
  $150 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0;
 var $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i3 = 0, $__i$0$i$i5 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, $exitcond$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(388,($__loc|0),(33492|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 22;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $25 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$25>>2] = 0;
    $26 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $26;
   }
   $__i$0$i$i3 = 0;
   while(1) {
    $exitcond$i$i4 = ($__i$0$i$i3|0)==(3);
    if ($exitcond$i$i4) {
     break;
    }
    $27 = (($__sym) + ($__i$0$i$i3<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($__i$0$i$i3) + 1)|0;
    $__i$0$i$i3 = $28;
   }
   $__i$0$i$i5 = 0;
   while(1) {
    $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
    if ($exitcond$i$i6) {
     break;
    }
    $29 = (($__sn) + ($__i$0$i$i5<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = (($__i$0$i$i5) + 1)|0;
    $__i$0$i$i5 = $30;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(607,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $85 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $85 = $83;
    }
    $84 = ($85>>>0)>(100);
    if ($84) {
     $86 = $85 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(548);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $__h$sroa$0$0 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $103 = $$pre;$111 = $$pre17;$__h$sroa$0$1 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $103 = $34;$111 = $37;$__h$sroa$0$1 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $103 = $34;$111 = $37;$__h$sroa$0$1 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $100 = ((($__iob)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $103 & 1;
     $104 = ($102<<24>>24)==(0);
     $105 = ((($__digits)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $104 ? $8 : $106;
     $108 = $103&255;
     $109 = $108 >>> 1;
     $110 = $104 ? $109 : $111;
     $112 = (($107) + ($110<<2)|0);
     $113 = HEAP32[$__dp>>2]|0;
     $114 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(608,($__mb$0|0),($__mi|0),($__me|0),($101|0),($107|0),($112|0),($2|0),($31|0),($__pat|0),($113|0),($114|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $__h$sroa$0$0 = $__h$sroa$0$1;
     } else {
      $117 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $117;
      $118 = HEAP32[$__mi>>2]|0;
      $119 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $120 = (invoke_iiiiiii(573,($$byval_copy|0),($__mb$0|0),($118|0),($119|0),($__iob|0),($__fl|0))|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if ($122) {
       $__h$sroa$0$0 = $__h$sroa$0$1;
      } else {
       $123 = ($__h$sroa$0$1|0)==(0);
       if ($123) {
        $125 = $1;
       } else {
        $124 = $__h$sroa$0$1;
        _free($124);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $125 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
       STACKTOP = sp;return ($120|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $98 = ($__h$sroa$0$0|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $99 = $__h$sroa$0$0;
     _free($99);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$126 = $$pre18;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch_2()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$126 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($126)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i8 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $__i$0$i$i4 = 0, $__ndflt = 0, $exitcond$i$i = 0, $exitcond$i$i5 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $$0$i8 = $8;
 while(1) {
  $15 = ($$0$i8>>>0)<($14>>>0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = HEAP8[$$0$i8>>0]|0;
  __THREW__ = 0;
  invoke_vii(593,($__ndflt|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   label = 9;
   break;
  }
  $19 = ((($$0$i8)) + 1|0);
  $$0$i8 = $19;
 }
 do {
  if ((label|0) == 8) {
   $20 = ($__c|0)==(-1);
   $21 = $__c << 1;
   $22 = $21;
   $23 = $20 ? (-1) : $22;
   $24 = HEAP8[$__ndflt>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   $27 = ((($__ndflt)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($__ndflt)) + 1|0);
   $30 = $26 ? $29 : $28;
   __THREW__ = 0;
   $31 = (invoke_iiiii(609,($23|0),($__set|0),($__msgid|0),($30|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $36 = ___cxa_find_matching_catch_2()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 11;
    break;
   }
   $__i$0$i$i4 = 0;
   while(1) {
    $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
    if ($exitcond$i$i5) {
     break;
    }
    $38 = (($agg$result) + ($__i$0$i$i4<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($__i$0$i$i4) + 1)|0;
    $__i$0$i$i4 = $39;
   }
   $40 = (_strlen($31)|0);
   $41 = (($31) + ($40)|0);
   $$0$i = $31;
   while(1) {
    $42 = ($$0$i>>>0)<($41>>>0);
    if (!($42)) {
     label = 20;
     break;
    }
    $43 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(593,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 19;
     break;
    }
    $46 = ((($$0$i)) + 1|0);
    $$0$i = $46;
   }
   if ((label|0) == 19) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
    $$02 = $47;$$03 = $48;
    break;
   }
   else if ((label|0) == 20) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $lpad$phi$index = $34;$lpad$phi$index2 = $35;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i14 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__i$0$i$i = 0, $__i$0$i$i8 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i16 = 0, $__r$0$i = 0, $__r$0$i13 = 0, $__wn$i = 0, $exitcond$i$i = 0, $exitcond$i$i9 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i10 = sp + 184|0;
 $__buf$i11 = sp + 192|0;
 $__bn$i12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $3;
 }
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (8292);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i11)) + 32|0);
 $$0$i14 = $11;$__r$0$i13 = 0;
 L5: while(1) {
  $18 = ($$0$i14>>>0)<($16>>>0);
  $19 = ($__r$0$i13|0)!=(2);
  $20 = $19 & $18;
  if (!($20)) {
   label = 13;
   break;
  }
  HEAP32[$__wn$i>>2] = $$0$i14;
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  $24 = (invoke_iiiiiiiii($23|0,($0|0),($__mb$i10|0),($$0$i14|0),($16|0),($__wn$i|0),($__buf$i11|0),($17|0),($__bn$i12|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 16;
   break;
  }
  $27 = ($24|0)==(2);
  $28 = HEAP32[$__wn$i>>2]|0;
  $29 = ($28|0)==($$0$i14|0);
  $or$cond$i15 = $27 | $29;
  if ($or$cond$i15) {
   label = 8;
   break;
  } else {
   $__p$0$i16 = $__buf$i11;
  }
  while(1) {
   $33 = HEAP32[$__bn$i12>>2]|0;
   $34 = ($__p$0$i16>>>0)<($33>>>0);
   if (!($34)) {
    break;
   }
   $36 = HEAP8[$__p$0$i16>>0]|0;
   __THREW__ = 0;
   invoke_vii(593,($__ndflt|0),($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    label = 15;
    break L5;
   }
   $39 = ((($__p$0$i16)) + 1|0);
   $__p$0$i16 = $39;
  }
  $35 = HEAP32[$__wn$i>>2]|0;
  $$0$i14 = $35;$__r$0$i13 = $24;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(591,(28549|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   label = 17;
  }
  else if ((label|0) == 13) {
   $40 = ($__c|0)==(-1);
   $41 = $__c << 1;
   $42 = $41;
   $43 = $40 ? (-1) : $42;
   $44 = HEAP8[$__ndflt>>0]|0;
   $45 = $44 & 1;
   $46 = ($45<<24>>24)==(0);
   $47 = ((($__ndflt)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($__ndflt)) + 1|0);
   $50 = $46 ? $49 : $48;
   __THREW__ = 0;
   $51 = (invoke_iiiii(609,($43|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch_2()|0;
    $55 = tempRet0;
    $$1 = $54;$$14 = $55;
    break;
   }
   $__i$0$i$i8 = 0;
   while(1) {
    $exitcond$i$i9 = ($__i$0$i$i8|0)==(3);
    if ($exitcond$i$i9) {
     break;
    }
    $60 = (($agg$result) + ($__i$0$i$i8<<2)|0);
    HEAP32[$60>>2] = 0;
    $61 = (($__i$0$i$i8) + 1)|0;
    $__i$0$i$i8 = $61;
   }
   $62 = ((($1)) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP32[$1>>2] = (8340);
   $63 = (_strlen($51)|0);
   $64 = (($51) + ($63)|0);
   $65 = $64;
   $66 = ((($__buf$i)) + 128|0);
   $$0$i = $51;$__r$0$i = 0;
   L23: while(1) {
    $67 = ($$0$i>>>0)<($64>>>0);
    $68 = ($__r$0$i|0)!=(2);
    $69 = $68 & $67;
    if (!($69)) {
     label = 30;
     break;
    }
    HEAP32[$__nn$i>>2] = $$0$i;
    $70 = HEAP32[$1>>2]|0;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $$0$i;
    $74 = (($65) - ($73))|0;
    $75 = ($74|0)>(32);
    $76 = ((($$0$i)) + 32|0);
    $77 = $75 ? $76 : $64;
    __THREW__ = 0;
    $78 = (invoke_iiiiiiiii($72|0,($1|0),($__mb$i|0),($$0$i|0),($77|0),($__nn$i|0),($__buf$i|0),($66|0),($__bn$i|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 32;
     break;
    }
    $81 = ($78|0)==(2);
    $82 = HEAP32[$__nn$i>>2]|0;
    $83 = ($82|0)==($$0$i|0);
    $or$cond$i = $81 | $83;
    if ($or$cond$i) {
     label = 25;
     break;
    } else {
     $__p$0$i = $__buf$i;
    }
    while(1) {
     $87 = HEAP32[$__bn$i>>2]|0;
     $88 = ($__p$0$i>>>0)<($87>>>0);
     if (!($88)) {
      break;
     }
     $90 = HEAP32[$__p$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(601,($agg$result|0),($90|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 31;
      break L23;
     }
     $93 = ((($__p$0$i)) + 4|0);
     $__p$0$i = $93;
    }
    $89 = HEAP32[$__nn$i>>2]|0;
    $$0$i = $89;$__r$0$i = $78;
   }
   if ((label|0) == 25) {
    __THREW__ = 0;
    invoke_vi(591,(28549|0));
    $84 = __THREW__; __THREW__ = 0;
    $85 = ___cxa_find_matching_catch_2()|0;
    $86 = tempRet0;
    $lpad$phi$index = $85;$lpad$phi$index10 = $86;
   }
   else if ((label|0) == 30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 31) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $lpad$phi$index = $94;$lpad$phi$index10 = $95;
   }
   else if ((label|0) == 32) {
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $lpad$phi$index = $96;$lpad$phi$index10 = $97;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
   $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
  }
  else if ((label|0) == 15) {
   $56 = ___cxa_find_matching_catch_2()|0;
   $57 = tempRet0;
   $lpad$phi30$index = $56;$lpad$phi30$index3 = $57;
   label = 17;
  }
  else if ((label|0) == 16) {
   $58 = ___cxa_find_matching_catch_2()|0;
   $59 = tempRet0;
   $lpad$phi30$index = $58;$lpad$phi30$index3 = $59;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$2 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre2 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre2) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$2 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = $$pre;
   while(1) {
    $10 = ($11>>>0)<($frm_end>>>0);
    if (!($10)) {
     $$2 = 0;
     break L4;
    }
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & -2048;
    $14 = ($13|0)==(55296);
    $15 = ($12>>>0)>($Maxcode>>>0);
    $or$cond = $15 | $14;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $16 = ($12>>>0)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre2) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$2 = 1;
       break L4;
      }
      $21 = $12&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($12>>>0)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre2) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$2 = 1;
        break L4;
       }
       $28 = $12 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $12 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($12>>>0)<(65536);
      $38 = HEAP32[$to_nxt>>2]|0;
      $39 = $38;
      $40 = (($$pre2) - ($39))|0;
      if ($37) {
       $41 = ($40|0)<(3);
       if ($41) {
        $$2 = 1;
        break L4;
       }
       $42 = $12 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $12 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $12 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      } else {
       $57 = ($40|0)<(4);
       if ($57) {
        $$2 = 1;
        break L4;
       }
       $58 = $12 >>> 18;
       $59 = $58 | 240;
       $60 = $59&255;
       $61 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $61;
       HEAP8[$38>>0] = $60;
       $62 = $12 >>> 12;
       $63 = $62 & 63;
       $64 = $63 | 128;
       $65 = $64&255;
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = ((($66)) + 1|0);
       HEAP32[$to_nxt>>2] = $67;
       HEAP8[$66>>0] = $65;
       $68 = $12 >>> 6;
       $69 = $68 & 63;
       $70 = $69 | 128;
       $71 = $70&255;
       $72 = HEAP32[$to_nxt>>2]|0;
       $73 = ((($72)) + 1|0);
       HEAP32[$to_nxt>>2] = $73;
       HEAP8[$72>>0] = $71;
       $74 = $12 & 63;
       $75 = $74 | 128;
       $76 = $75&255;
       $77 = HEAP32[$to_nxt>>2]|0;
       $78 = ((($77)) + 1|0);
       HEAP32[$to_nxt>>2] = $78;
       HEAP8[$77>>0] = $76;
       break;
      }
     }
    } while(0);
    $79 = HEAP32[$frm_nxt>>2]|0;
    $80 = ((($79)) + 4|0);
    HEAP32[$frm_nxt>>2] = $80;
    $11 = $80;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$9 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 L9: while(1) {
  $16 = HEAP32[$frm_nxt>>2]|0;
  $17 = ($16>>>0)<($frm_end>>>0);
  if (!($17)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt>>2]|0;
  $19 = ($18>>>0)<($to_end>>>0);
  if (!($19)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)>(-1);
  do {
   if ($22) {
    $23 = ($21>>>0)>($Maxcode>>>0);
    if ($23) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $21;
    $24 = ((($16)) + 1|0);
    HEAP32[$frm_nxt>>2] = $24;
   } else {
    $25 = ($20&255)<(194);
    if ($25) {
     $$9 = 2;
     break L9;
    }
    $26 = ($20&255)<(224);
    if ($26) {
     $27 = $16;
     $28 = (($$pre$phiZ2D) - ($27))|0;
     $29 = ($28|0)<(2);
     if ($29) {
      $$9 = 1;
      break L9;
     }
     $30 = ((($16)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 192;
     $34 = ($33|0)==(128);
     if (!($34)) {
      $$9 = 2;
      break L9;
     }
     $35 = $21 << 6;
     $36 = $35 & 1984;
     $37 = $32 & 63;
     $38 = $37 | $36;
     $39 = ($38>>>0)>($Maxcode>>>0);
     if ($39) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $38;
     $40 = ((($16)) + 2|0);
     HEAP32[$frm_nxt>>2] = $40;
     break;
    }
    $41 = ($20&255)<(240);
    if ($41) {
     $42 = $16;
     $43 = (($$pre$phiZ2D) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$9 = 1;
      break L9;
     }
     $45 = ((($16)) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = ((($16)) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     switch ($21|0) {
     case 224:  {
      $49 = $46 & -32;
      $50 = ($49<<24>>24)==(-96);
      if (!($50)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $51 = $46 & -32;
      $52 = ($51<<24>>24)==(-128);
      if (!($52)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $53 = $46 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $55 = $48&255;
     $56 = $55 & 192;
     $57 = ($56|0)==(128);
     if (!($57)) {
      $$9 = 2;
      break L9;
     }
     $58 = $21 << 12;
     $59 = $58 & 61440;
     $60 = $46&255;
     $61 = $60 << 6;
     $62 = $61 & 4032;
     $63 = $62 | $59;
     $64 = $55 & 63;
     $65 = $63 | $64;
     $66 = ($65>>>0)>($Maxcode>>>0);
     if ($66) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $65;
     $67 = ((($16)) + 3|0);
     HEAP32[$frm_nxt>>2] = $67;
     break;
    }
    $68 = ($20&255)<(245);
    if (!($68)) {
     $$9 = 2;
     break L9;
    }
    $69 = $16;
    $70 = (($$pre$phiZ2D) - ($69))|0;
    $71 = ($70|0)<(4);
    if ($71) {
     $$9 = 1;
     break L9;
    }
    $72 = ((($16)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ((($16)) + 2|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($16)) + 3|0);
    $77 = HEAP8[$76>>0]|0;
    switch ($21|0) {
    case 240:  {
     $$off = (($73) + 112)<<24>>24;
     $78 = ($$off&255)<(48);
     if (!($78)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $79 = $73 & -16;
     $80 = ($79<<24>>24)==(-128);
     if (!($80)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $81 = $73 & -64;
     $82 = ($81<<24>>24)==(-128);
     if (!($82)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $83 = $75&255;
    $84 = $83 & 192;
    $85 = ($84|0)==(128);
    if (!($85)) {
     $$9 = 2;
     break L9;
    }
    $86 = $77&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     $$9 = 2;
     break L9;
    }
    $89 = $21 << 18;
    $90 = $89 & 1835008;
    $91 = $73&255;
    $92 = $91 << 12;
    $93 = $92 & 258048;
    $94 = $93 | $90;
    $95 = $83 << 6;
    $96 = $95 & 4032;
    $97 = $94 | $96;
    $98 = $86 & 63;
    $99 = $97 | $98;
    $100 = ($99>>>0)>($Maxcode>>>0);
    if ($100) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $99;
    $101 = ((($16)) + 4|0);
    HEAP32[$frm_nxt>>2] = $101;
   }
  } while(0);
  $102 = HEAP32[$to_nxt>>2]|0;
  $103 = ((($102)) + 4|0);
  HEAP32[$to_nxt>>2] = $103;
 }
 if ((label|0) == 40) {
  $104 = $$lcssa&1;
  $$9 = $104;
 }
 return ($$9|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$37 = 0, $$frm = 0, $$lcssa = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$off = 0, $$pre = 0, $$pre43 = 0, $$pre45 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre47 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre47) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar32_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($16<<24>>24)>(-1);
  do {
   if ($18) {
    $19 = ($17>>>0)>($Maxcode>>>0);
    if ($19) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $20;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre47) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $36 = ((($frm_nxt$1)) + 2|0);
     $frm_nxt$5 = $36;
     break;
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre47) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa91 = $38;
       label = 20;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa90 = $38;
       label = 22;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa92 = $38;
       label = 24;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $69;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre47) - ($71))|0;
    $73 = ($72|0)<(4);
    if ($73) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $74 = ((($frm_nxt$1)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($frm_nxt$1)) + 2|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 3|0);
    $79 = HEAP8[$78>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($75) + 112)<<24>>24;
     $80 = ($$off&255)<(48);
     if (!($80)) {
      $$lcssa88 = $71;
      label = 31;
      break L6;
     }
     break;
    }
    case 244:  {
     $83 = $75 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$lcssa = $71;
      label = 33;
      break L6;
     }
     break;
    }
    default: {
     $87 = $75 & -64;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$lcssa89 = $71;
      label = 35;
      break L6;
     }
    }
    }
    $91 = $77&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $94 = $79&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $97 = $17 << 18;
    $98 = $97 & 1835008;
    $99 = $75&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($Maxcode>>>0);
    $109 = ((($frm_nxt$1)) + 4|0);
    if ($108) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $109;
    }
   }
  } while(0);
  $110 = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar32_t$0 = $110;
 }
 if ((label|0) == 20) {
  $47 = $frm;
  $48 = (($$lcssa91) - ($47))|0;
  $$37 = $48;
 }
 else if ((label|0) == 22) {
  $51 = $frm;
  $52 = (($$lcssa90) - ($51))|0;
  $$37 = $52;
 }
 else if ((label|0) == 24) {
  $55 = $frm;
  $56 = (($$lcssa92) - ($55))|0;
  $$37 = $56;
 }
 else if ((label|0) == 31) {
  $81 = $frm;
  $82 = (($$lcssa88) - ($81))|0;
  $$37 = $82;
 }
 else if ((label|0) == 33) {
  $85 = $frm;
  $86 = (($$lcssa) - ($85))|0;
  $$37 = $86;
 }
 else if ((label|0) == 35) {
  $89 = $frm;
  $90 = (($$lcssa89) - ($89))|0;
  $$37 = $90;
 }
 else if ((label|0) == 40) {
  $$pre = $frm_nxt$1$lcssa;
  $$pre43 = $frm;
  $$pre45 = (($$pre) - ($$pre43))|0;
  $$37 = $$pre45;
 }
 return ($$37|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8388);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(560)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(586,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch_3(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$03 = 0, $$03$lcssa201 = 0, $$05 = 0, $$05$lcssa193 = 0, $$12 = 0, $$14 = 0, $$14$lcssa = 0, $$3$ph = 0, $$4 = 0, $$lcssa = 0, $$lcssa207 = 0, $$lcssa215 = 0, $$pre = 0, $$pre96 = 0, $$pre97 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph13 = 0, $n$0 = 0, $not$ = 0, $or$cond = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP32[$fend$0>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 4|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$03 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$03|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $103 = $$03;
   label = 53;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$03;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = $$05;
  $23 = (($4) - ($22))|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(610,($$05|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa207 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(562,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$03$lcssa201 = $$03;$$05$lcssa193 = $$05;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$3$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $66 = HEAP32[$to_nxt>>2]|0;
  $67 = (($66) + ($26)|0);
  HEAP32[$to_nxt>>2] = $67;
  $68 = ($67|0)==($to_end|0);
  if ($68) {
   label = 51;
   break;
  }
  $69 = ($fend$1|0)==($frm_end|0);
  if ($69) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $105 = $67;$106 = $$pre;$fend$5$ph13 = $frm_end;
  } else {
   $70 = HEAP32[$5>>2]|0;
   $71 = (_uselocale($70)|0);
   __THREW__ = 0;
   $72 = (invoke_iiii(611,($tmp|0),0,($st|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    $$lcssa215 = $71;
    label = 36;
    break;
   }
   $75 = ($71|0)==(0|0);
   if (!($75)) {
    __THREW__ = 0;
    (invoke_ii(562,($71|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 35;
     break;
    }
   }
   $87 = ($72|0)==(-1);
   if ($87) {
    $$12 = 2;
    label = 49;
    break;
   }
   $88 = HEAP32[$to_nxt>>2]|0;
   $89 = (($4) - ($88))|0;
   $90 = ($72>>>0)>($89>>>0);
   if ($90) {
    $$12 = 1;
    label = 49;
    break;
   } else {
    $n$0 = $72;$p$0 = $tmp;
   }
   while(1) {
    $91 = ($n$0|0)==(0);
    if ($91) {
     break;
    }
    $94 = ((($p$0)) + 1|0);
    $95 = HEAP8[$p$0>>0]|0;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = (($n$0) + -1)|0;
    $n$0 = $98;$p$0 = $94;
   }
   $92 = HEAP32[$frm_nxt>>2]|0;
   $93 = ((($92)) + 4|0);
   HEAP32[$frm_nxt>>2] = $93;
   $fend$2 = $93;
   while(1) {
    $99 = ($fend$2|0)==($frm_end|0);
    if ($99) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $100 = HEAP32[$fend$2>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $102 = ((($fend$2)) + 4|0);
    $fend$2 = $102;
   }
   $$pre96 = HEAP32[$to_nxt>>2]|0;
   $105 = $$pre96;$106 = $93;$fend$5$ph13 = $fend$2$lcssa;
  }
  $$03 = $106;$$05 = $105;$fend$1 = $fend$5$ph13;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ($$lcssa207|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(562,($$lcssa207|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch_3(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$to_nxt>>2] = $$05$lcssa193;
   $$14 = $$03$lcssa201;$46 = $$05$lcssa193;
   while(1) {
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$14|0)==($41|0);
    if ($42) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $43 = HEAP32[$$14>>2]|0;
    $44 = HEAP32[$5>>2]|0;
    $45 = (_uselocale($44)|0);
    __THREW__ = 0;
    $47 = (invoke_iiii(611,($46|0),($43|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $45;
     label = 22;
     break;
    }
    $50 = ($45|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(562,($45|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    $62 = ($47|0)==(-1);
    if ($62) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $63 = HEAP32[$to_nxt>>2]|0;
    $64 = (($63) + ($47)|0);
    HEAP32[$to_nxt>>2] = $64;
    $65 = ((($$14)) + 4|0);
    $$14 = $65;$46 = $64;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(562,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$14$lcssa;
    $$3$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $78 = ___cxa_find_matching_catch_3(0|0)|0;
   $79 = tempRet0;
   ___clang_call_terminate($78);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $80 = ___cxa_find_matching_catch_2()|0;
   $81 = tempRet0;
   $82 = ($$lcssa215|0)==(0|0);
   if (!($82)) {
    __THREW__ = 0;
    (invoke_ii(562,($$lcssa215|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch_3(0|0)|0;
     $86 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    }
   }
   ___resumeException($80|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$3$ph = $$12;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre97 = HEAP32[$frm_nxt>>2]|0;
   $103 = $$pre97;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $$4 = $$3$ph;
 }
 else if ((label|0) == 53) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$4 = $104;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$02 = 0, $$02$lcssa231 = 0, $$05 = 0, $$05$lcssa224 = 0, $$1$ph = 0, $$13 = 0, $$13$lcssa = 0, $$13$lcssa217 = 0, $$13$lcssa218 = 0, $$2 = 0, $$24 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa243 = 0, $$lcssa250 = 0, $$pre = 0, $$pre102 = 0, $$pre103 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0 = 0;
 var $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $not$ = 0, $not$6 = 0, $or$cond = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP8[$fend$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 1|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$02 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$02|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $97 = $$02;
   label = 52;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$02;
  $20 = (($18) - ($19))|0;
  $21 = $$05;
  $22 = (($4) - ($21))|0;
  $23 = $22 >> 2;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(612,($$05|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa243 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(562,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$02$lcssa231 = $$02;$$05$lcssa224 = $$05;$$lcssa238 = $18;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$1$ph = 2;
   label = 48;
   break L6;
   break;
  }
  default: {
  }
  }
  $67 = HEAP32[$to_nxt>>2]|0;
  $68 = (($67) + ($26<<2)|0);
  HEAP32[$to_nxt>>2] = $68;
  $69 = ($68|0)==($to_end|0);
  if ($69) {
   label = 49;
   break;
  }
  $70 = ($fend$1|0)==($frm_end|0);
  $$pre = HEAP32[$frm_nxt>>2]|0;
  if ($70) {
   $100 = $$pre;$99 = $68;$fend$4$ph = $frm_end;
  } else {
   $71 = HEAP32[$5>>2]|0;
   $72 = (_uselocale($71)|0);
   __THREW__ = 0;
   $73 = (invoke_iiiii(613,($68|0),($$pre|0),1,($st|0))|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $$lcssa250 = $72;
    label = 39;
    break;
   }
   $76 = ($72|0)==(0|0);
   if (!($76)) {
    __THREW__ = 0;
    (invoke_ii(562,($72|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 38;
     break;
    }
   }
   $88 = ($73|0)==(0);
   if (!($88)) {
    $$1$ph = 2;
    label = 48;
    break;
   }
   $89 = HEAP32[$to_nxt>>2]|0;
   $90 = ((($89)) + 4|0);
   HEAP32[$to_nxt>>2] = $90;
   $91 = HEAP32[$frm_nxt>>2]|0;
   $92 = ((($91)) + 1|0);
   HEAP32[$frm_nxt>>2] = $92;
   $fend$2 = $92;
   while(1) {
    $93 = ($fend$2|0)==($frm_end|0);
    if ($93) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $94 = HEAP8[$fend$2>>0]|0;
    $95 = ($94<<24>>24)==(0);
    if ($95) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $96 = ((($fend$2)) + 1|0);
    $fend$2 = $96;
   }
   $$pre102 = HEAP32[$to_nxt>>2]|0;
   $100 = $92;$99 = $$pre102;$fend$4$ph = $fend$2$lcssa;
  }
  $$02 = $100;$$05 = $99;$fend$1 = $fend$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ($$lcssa243|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(562,($$lcssa243|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch_3(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   $$13 = $$02$lcssa231;$storemerge = $$05$lcssa224;
   L31: while(1) {
    HEAP32[$to_nxt>>2] = $storemerge;
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$13|0)==($41|0);
    if ($42) {
     $$13$lcssa = $$13;
     label = 32;
     break;
    }
    $43 = $$13;
    $44 = (($$lcssa238) - ($43))|0;
    $45 = HEAP32[$5>>2]|0;
    $46 = (_uselocale($45)|0);
    __THREW__ = 0;
    $47 = (invoke_iiiii(613,($storemerge|0),($$13|0),($44|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $46;
     label = 22;
     break;
    }
    $50 = ($46|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(562,($46|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    switch ($47|0) {
    case -1:  {
     $$13$lcssa217 = $$13;
     label = 28;
     break L31;
     break;
    }
    case -2:  {
     $$13$lcssa218 = $$13;
     label = 29;
     break L31;
     break;
    }
    case 0:  {
     $62 = ((($$13)) + 1|0);
     $$24 = $62;
     break;
    }
    default: {
     $63 = (($$13) + ($47)|0);
     $$24 = $63;
    }
    }
    $64 = HEAP32[$to_nxt>>2]|0;
    $65 = ((($64)) + 4|0);
    $$13 = $$24;$storemerge = $65;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(562,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa217;
    $$1$ph = 2;
    label = 48;
    break;
   }
   else if ((label|0) == 29) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa218;
    $$1$ph = 1;
    label = 48;
    break;
   }
   else if ((label|0) == 32) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa;
    $not$6 = ($$13$lcssa|0)!=($frm_end|0);
    $66 = $not$6&1;
    $$1$ph = $66;
    label = 48;
    break;
   }
  }
  else if ((label|0) == 38) {
   $79 = ___cxa_find_matching_catch_3(0|0)|0;
   $80 = tempRet0;
   ___clang_call_terminate($79);
   // unreachable;
  }
  else if ((label|0) == 39) {
   $81 = ___cxa_find_matching_catch_2()|0;
   $82 = tempRet0;
   $83 = ($$lcssa250|0)==(0|0);
   if (!($83)) {
    __THREW__ = 0;
    (invoke_ii(562,($$lcssa250|0))|0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     $86 = ___cxa_find_matching_catch_3(0|0)|0;
     $87 = tempRet0;
     ___clang_call_terminate($86);
     // unreachable;
    }
   }
   ___resumeException($81|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$pre103 = HEAP32[$frm_nxt>>2]|0;
   $97 = $$pre103;
   label = 52;
  }
 } while(0);
 if ((label|0) == 48) {
  $$2 = $$1$ph;
 }
 else if ((label|0) == 52) {
  $not$ = ($97|0)!=($frm_end|0);
  $98 = $not$&1;
  $$2 = $98;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $p$0 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale($1)|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(611,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(562,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(562,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch_3(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 L12: do {
  switch ($3|0) {
  case 0: case -1:  {
   $$0 = 2;
   break;
  }
  default: {
   $18 = (($3) + -1)|0;
   $19 = HEAP32[$to_nxt>>2]|0;
   $20 = $to_end;
   $21 = (($20) - ($19))|0;
   $22 = ($18>>>0)>($21>>>0);
   if ($22) {
    $$0 = 1;
   } else {
    $n$0 = $18;$p$0 = $tmp;
    while(1) {
     $23 = ($n$0|0)==(0);
     if ($23) {
      $$0 = 0;
      break L12;
     }
     $24 = ((($p$0)) + 1|0);
     $25 = HEAP8[$p$0>>0]|0;
     $26 = HEAP32[$to_nxt>>2]|0;
     $27 = ((($26)) + 1|0);
     HEAP32[$to_nxt>>2] = $27;
     HEAP8[$26>>0] = $25;
     $28 = (($n$0) + -1)|0;
     $n$0 = $28;$p$0 = $24;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(562,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(614,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch_3(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(562,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(562,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch_3(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(562,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(562,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch_3(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch_3(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$04 = 0, $$15 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nbytes$1 = 0, $nwchar_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $$04 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 L1: while(1) {
  $2 = ($nwchar_t$0>>>0)>=($mx>>>0);
  $3 = ($$04|0)==($frm_end|0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break;
  }
  $4 = $$04;
  $5 = (($0) - ($4))|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (_uselocale($6)|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(615,($$04|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $$lcssa = $7;
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(562,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  switch ($8|0) {
  case -2: case -1:  {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   $23 = ((($$04)) + 1|0);
   $$15 = $23;$$pn = 1;
   break;
  }
  default: {
   $24 = (($$04) + ($8)|0);
   $$15 = $24;$$pn = $8;
  }
  }
  $nbytes$1 = (($$pn) + ($nbytes$0))|0;
  $25 = (($nwchar_t$0) + 1)|0;
  $$04 = $$15;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $25;
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = ($$lcssa|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   (invoke_ii(562,($$lcssa|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_3(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   }
  }
  ___resumeException($16|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  return ($nbytes$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(562,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch_3(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(562,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch_3(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$4 = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre7 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre7) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$4 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $12 = $$pre;
   while(1) {
    $11 = ($12>>>0)<($frm_end>>>0);
    if (!($11)) {
     $$4 = 0;
     break L4;
    }
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    $15 = ($14>>>0)>($Maxcode>>>0);
    if ($15) {
     $$4 = 2;
     break L4;
    }
    $16 = ($13&65535)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre7) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$4 = 1;
       break L4;
      }
      $21 = $13&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($13&65535)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre7) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$4 = 1;
        break L4;
       }
       $28 = $14 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $14 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($13&65535)<(55296);
      if ($37) {
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre7) - ($39))|0;
       $41 = ($40|0)<(3);
       if ($41) {
        $$4 = 1;
        break L4;
       }
       $42 = $14 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $14 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $14 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      }
      $57 = ($13&65535)<(56320);
      if (!($57)) {
       $108 = ($13&65535)<(57344);
       if ($108) {
        $$4 = 2;
        break L4;
       }
       $109 = HEAP32[$to_nxt>>2]|0;
       $110 = $109;
       $111 = (($$pre7) - ($110))|0;
       $112 = ($111|0)<(3);
       if ($112) {
        $$4 = 1;
        break L4;
       }
       $113 = $14 >>> 12;
       $114 = $113 | 224;
       $115 = $114&255;
       $116 = ((($109)) + 1|0);
       HEAP32[$to_nxt>>2] = $116;
       HEAP8[$109>>0] = $115;
       $117 = $14 >>> 6;
       $118 = $117 & 63;
       $119 = $118 | 128;
       $120 = $119&255;
       $121 = HEAP32[$to_nxt>>2]|0;
       $122 = ((($121)) + 1|0);
       HEAP32[$to_nxt>>2] = $122;
       HEAP8[$121>>0] = $120;
       $123 = $14 & 63;
       $124 = $123 | 128;
       $125 = $124&255;
       $126 = HEAP32[$to_nxt>>2]|0;
       $127 = ((($126)) + 1|0);
       HEAP32[$to_nxt>>2] = $127;
       HEAP8[$126>>0] = $125;
       break;
      }
      $58 = $12;
      $59 = (($10) - ($58))|0;
      $60 = ($59|0)<(4);
      if ($60) {
       $$4 = 1;
       break L4;
      }
      $61 = ((($12)) + 2|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62&65535;
      $64 = $63 & 64512;
      $65 = ($64|0)==(56320);
      if (!($65)) {
       $$4 = 2;
       break L4;
      }
      $66 = HEAP32[$to_nxt>>2]|0;
      $67 = (($$pre7) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = $14 & 960;
      $70 = $69 << 10;
      $71 = (($70) + 65536)|0;
      $72 = $14 << 10;
      $73 = $72 & 64512;
      $74 = $71 | $73;
      $75 = $63 & 1023;
      $76 = $74 | $75;
      $77 = ($76>>>0)>($Maxcode>>>0);
      if ($77) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $61;
      $78 = $69 >>> 6;
      $79 = (($78) + 1)|0;
      $80 = $79 >>> 2;
      $81 = $80 | 240;
      $82 = $81&255;
      $83 = HEAP32[$to_nxt>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$to_nxt>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = $79 << 4;
      $86 = $85 & 48;
      $87 = $14 >>> 2;
      $88 = $87 & 15;
      $89 = $88 | $86;
      $90 = $89 | 128;
      $91 = $90&255;
      $92 = HEAP32[$to_nxt>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$to_nxt>>2] = $93;
      HEAP8[$92>>0] = $91;
      $94 = $14 << 4;
      $95 = $94 & 48;
      $96 = $63 >>> 6;
      $97 = $96 & 15;
      $98 = $95 | $97;
      $99 = $98 | 128;
      $100 = $99&255;
      $101 = HEAP32[$to_nxt>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$to_nxt>>2] = $102;
      HEAP8[$101>>0] = $100;
      $103 = $63 & 63;
      $104 = $103 | 128;
      $105 = $104&255;
      $106 = HEAP32[$to_nxt>>2]|0;
      $107 = ((($106)) + 1|0);
      HEAP32[$to_nxt>>2] = $107;
      HEAP8[$106>>0] = $105;
     }
    } while(0);
    $128 = HEAP32[$frm_nxt>>2]|0;
    $129 = ((($128)) + 2|0);
    HEAP32[$frm_nxt>>2] = $129;
    $12 = $129;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$8 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 L9: while(1) {
  $17 = HEAP32[$frm_nxt>>2]|0;
  $18 = ($17>>>0)<($frm_end>>>0);
  if (!($18)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = ($19>>>0)<($to_end>>>0);
  if (!($20)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($Maxcode>>>0);
  if ($23) {
   $$8 = 2;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = $21&255;
    HEAP16[$19>>1] = $25;
    $26 = ((($17)) + 1|0);
    HEAP32[$frm_nxt>>2] = $26;
   } else {
    $27 = ($21&255)<(194);
    if ($27) {
     $$8 = 2;
     break L9;
    }
    $28 = ($21&255)<(224);
    if ($28) {
     $29 = $17;
     $30 = (($$pre$phiZ2D) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$8 = 1;
      break L9;
     }
     $32 = ((($17)) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      $$8 = 2;
      break L9;
     }
     $37 = $22 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($Maxcode>>>0);
     if ($41) {
      $$8 = 2;
      break L9;
     }
     $42 = $40&65535;
     HEAP16[$19>>1] = $42;
     $43 = ((($17)) + 2|0);
     HEAP32[$frm_nxt>>2] = $43;
     break;
    }
    $44 = ($21&255)<(240);
    if ($44) {
     $45 = $17;
     $46 = (($$pre$phiZ2D) - ($45))|0;
     $47 = ($46|0)<(3);
     if ($47) {
      $$8 = 1;
      break L9;
     }
     $48 = ((($17)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ((($17)) + 2|0);
     $51 = HEAP8[$50>>0]|0;
     switch ($22|0) {
     case 224:  {
      $52 = $49 & -32;
      $53 = ($52<<24>>24)==(-96);
      if (!($53)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $54 = $49 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $56 = $49 & -64;
      $57 = ($56<<24>>24)==(-128);
      if (!($57)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $58 = $51&255;
     $59 = $58 & 192;
     $60 = ($59|0)==(128);
     if (!($60)) {
      $$8 = 2;
      break L9;
     }
     $61 = $22 << 12;
     $62 = $49&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $58 & 63;
     $67 = $65 | $66;
     $68 = $67 & 65535;
     $69 = ($68>>>0)>($Maxcode>>>0);
     if ($69) {
      $$8 = 2;
      break L9;
     }
     $70 = $67&65535;
     HEAP16[$19>>1] = $70;
     $71 = ((($17)) + 3|0);
     HEAP32[$frm_nxt>>2] = $71;
     break;
    }
    $72 = ($21&255)<(245);
    if (!($72)) {
     $$8 = 2;
     break L9;
    }
    $73 = $17;
    $74 = (($$pre$phiZ2D) - ($73))|0;
    $75 = ($74|0)<(4);
    if ($75) {
     $$8 = 1;
     break L9;
    }
    $76 = ((($17)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($17)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($17)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($22|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $83 = $77 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $85 = $77 & -64;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $87 = $79&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     $$8 = 2;
     break L9;
    }
    $90 = $81&255;
    $91 = $90 & 192;
    $92 = ($91|0)==(128);
    if (!($92)) {
     $$8 = 2;
     break L9;
    }
    $93 = $19;
    $94 = (($16) - ($93))|0;
    $95 = ($94|0)<(4);
    if ($95) {
     $$8 = 1;
     break L9;
    }
    $96 = $22 & 7;
    $97 = $96 << 18;
    $98 = $77&255;
    $99 = $98 << 12;
    $100 = $99 & 258048;
    $101 = $100 | $97;
    $102 = $87 << 6;
    $103 = $102 & 4032;
    $104 = $101 | $103;
    $105 = $90 & 63;
    $106 = $104 | $105;
    $107 = ($106>>>0)>($Maxcode>>>0);
    if ($107) {
     $$8 = 2;
     break L9;
    }
    $108 = $96 << 2;
    $109 = $98 >>> 4;
    $110 = $109 & 3;
    $111 = $110 | $108;
    $112 = $111 << 6;
    $113 = (($112) + 16320)|0;
    $114 = $98 << 2;
    $115 = $114 & 60;
    $116 = $87 >>> 4;
    $117 = $116 & 3;
    $118 = $115 | $117;
    $119 = $118 | $113;
    $120 = $119 | 55296;
    $121 = $120&65535;
    HEAP16[$19>>1] = $121;
    $122 = $102 & 960;
    $123 = $105 | $122;
    $124 = $123 | 56320;
    $125 = $124&65535;
    $126 = ((($19)) + 2|0);
    HEAP32[$to_nxt>>2] = $126;
    HEAP16[$126>>1] = $125;
    $127 = HEAP32[$frm_nxt>>2]|0;
    $128 = ((($127)) + 4|0);
    HEAP32[$frm_nxt>>2] = $128;
   }
  } while(0);
  $129 = HEAP32[$to_nxt>>2]|0;
  $130 = ((($129)) + 2|0);
  HEAP32[$to_nxt>>2] = $130;
 }
 if ((label|0) == 41) {
  $131 = $$lcssa&1;
  $$8 = $131;
 }
 return ($$8|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$frm = 0, $$lcssa = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$off = 0, $$pre = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0, $or$cond = 0, $or$cond11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre42 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre42) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar16_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $19 = ($16<<24>>24)>(-1);
  do {
   if ($19) {
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $20;$nchar16_t$2 = $nchar16_t$0;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre42) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     $36 = ((($frm_nxt$1)) + 2|0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $36;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre42) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa86 = $38;
       label = 19;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa85 = $38;
       label = 21;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa87 = $38;
       label = 23;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $69;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre42) - ($71))|0;
    $73 = ($72|0)<(4);
    $74 = (($mx) - ($nchar16_t$0))|0;
    $75 = ($74>>>0)<(2);
    $or$cond11 = $75 | $73;
    if ($or$cond11) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $76 = ((($frm_nxt$1)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($frm_nxt$1)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$lcssa83 = $71;
      label = 30;
      break L6;
     }
     break;
    }
    case 244:  {
     $85 = $77 & -16;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$lcssa = $71;
      label = 32;
      break L6;
     }
     break;
    }
    default: {
     $89 = $77 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$lcssa84 = $71;
      label = 34;
      break L6;
     }
    }
    }
    $93 = $79&255;
    $94 = $93 & 192;
    $95 = ($94|0)==(128);
    if (!($95)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $96 = $81&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $99 = $17 << 18;
    $100 = $99 & 1835008;
    $101 = $77&255;
    $102 = $101 << 12;
    $103 = $102 & 258048;
    $104 = $103 | $100;
    $105 = $93 << 6;
    $106 = $105 & 4032;
    $107 = $104 | $106;
    $108 = $96 & 63;
    $109 = $107 | $108;
    $110 = ($109>>>0)>($Maxcode>>>0);
    if ($110) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $111 = (($nchar16_t$0) + 1)|0;
    $112 = ((($frm_nxt$1)) + 4|0);
    $frm_nxt$5 = $112;$nchar16_t$2 = $111;
   }
  } while(0);
  $113 = (($nchar16_t$2) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar16_t$0 = $113;
 }
 if ((label|0) == 19) {
  $47 = $frm;
  $48 = (($$lcssa86) - ($47))|0;
  $116 = $48;
 }
 else if ((label|0) == 21) {
  $51 = $frm;
  $52 = (($$lcssa85) - ($51))|0;
  $116 = $52;
 }
 else if ((label|0) == 23) {
  $55 = $frm;
  $56 = (($$lcssa87) - ($55))|0;
  $116 = $56;
 }
 else if ((label|0) == 30) {
  $83 = $frm;
  $84 = (($$lcssa83) - ($83))|0;
  $116 = $84;
 }
 else if ((label|0) == 32) {
  $87 = $frm;
  $88 = (($$lcssa) - ($87))|0;
  $116 = $88;
 }
 else if ((label|0) == 34) {
  $91 = $frm;
  $92 = (($$lcssa84) - ($91))|0;
  $116 = $92;
 }
 else if ((label|0) == 40) {
  $$pre = $frm;
  $114 = $frm_nxt$1$lcssa;
  $115 = (($114) - ($$pre))|0;
  $116 = $115;
 }
 return ($116|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8436);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $i$0 = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $4 = (($2) - ($3))|0;
  $5 = $4 >> 2;
  $6 = ($i$0>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $8 = $3;
  $9 = (($8) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   (__ZNSt3__114__shared_count16__release_sharedEv($10)|0);
  }
  $12 = (($i$0) + 1)|0;
  $i$0 = $12;
 }
 $7 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $4 = $$pre$i$i;
   while(1) {
    $3 = ($4|0)==($0|0);
    if ($3) {
     break;
    }
    $5 = ((($4)) + -4|0);
    HEAP32[$2>>2] = $5;
    $4 = $5;
   }
   $6 = ((($this)) + 16|0);
   $7 = ($6|0)==($0|0);
   if ($7) {
    $8 = ((($this)) + 128|0);
    HEAP8[$8>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8456);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(616)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(617)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  HEAP8[$$0>>0] = $1;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(618)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8508);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,29527,4);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,29532,5);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8548);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8580)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8580,$0);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8600)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8600,$0);
 return;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $vec;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $6 = (($5) + ($4<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $10 = $8;
  } else {
   $10 = 0;
  }
  $9 = $10&65535;
  HEAP16[$$0>>1] = $9;
  $11 = ((($$01)) + 4|0);
  $12 = ((($$0)) + 2|0);
  $$0 = $12;$$01 = $11;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $3 = (($2) + ($1<<1)|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = $4 & $m;
   $6 = ($5<<16>>16)==(0);
   if (!($6)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $3 = (($2) + ($1<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & $m;
  $6 = ($5<<16>>16)==(0);
  if ($6) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$0>>2] = $2;
  $3 = ((($$01)) + 1|0);
  $4 = ((($$0)) + 4|0);
  $$0 = $4;$$01 = $3;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $6 = ((($$01)) + 4|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$01 = $6;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(539,($0|0),(29559|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (9032);
  ___cxa_throw(($0|0),(1584|0),(362|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8436);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(619,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $82 = ___cxa_find_matching_catch_2()|0;
  $83 = tempRet0;
  $$1 = $83;$$12 = $82;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(578,($5|0),(27526|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $84 = ___cxa_find_matching_catch_2()|0;
   $85 = tempRet0;
   $$0 = $85;$$01 = $84;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $11 = $$pre$i$i$i;
   while(1) {
    $10 = ($11|0)==($8|0);
    if ($10) {
     break;
    }
    $12 = ((($11)) + -4|0);
    HEAP32[$9>>2] = $12;
    $11 = $12;
   }
   HEAP32[(30660)>>2] = 0;
   HEAP32[7664] = (6100);
   __THREW__ = 0;
   invoke_vii(620,($this|0),(30656|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if ($14) {
     label = 42;
    } else {
     HEAP32[(30668)>>2] = 0;
     HEAP32[7666] = (6132);
     __THREW__ = 0;
     invoke_vii(621,($this|0),(30664|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      label = 42;
     } else {
      HEAP32[(30676)>>2] = 0;
      HEAP32[7668] = (8456);
      HEAP32[(30680)>>2] = 0;
      HEAP8[(30684)>>0] = 0;
      $17 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(30680)>>2] = $17;
      __THREW__ = 0;
      invoke_vii(622,($this|0),(30672|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 42;
      } else {
       HEAP32[(30692)>>2] = 0;
       HEAP32[7672] = (8652);
       __THREW__ = 0;
       invoke_vii(623,($this|0),(30688|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        label = 42;
       } else {
        HEAP32[(30700)>>2] = 0;
        HEAP32[7674] = (8720);
        __THREW__ = 0;
        invoke_vii(624,($this|0),(30696|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(625,(30704|0),1);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(626,($this|0),(30704|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if ($27) {
           label = 42;
          } else {
           HEAP32[(30724)>>2] = 0;
           HEAP32[7680] = (8768);
           __THREW__ = 0;
           invoke_vii(627,($this|0),(30720|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if ($29) {
            label = 42;
           } else {
            HEAP32[(30732)>>2] = 0;
            HEAP32[7682] = (8816);
            __THREW__ = 0;
            invoke_vii(628,($this|0),(30728|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if ($31) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(30736,1);
             __THREW__ = 0;
             invoke_vii(629,($this|0),(30736|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if ($33) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(30760,1);
              __THREW__ = 0;
              invoke_vii(630,($this|0),(30760|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if ($35) {
               label = 42;
              } else {
               HEAP32[(30796)>>2] = 0;
               HEAP32[7698] = (6164);
               __THREW__ = 0;
               invoke_vii(631,($this|0),(30792|0));
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if ($37) {
                label = 42;
               } else {
                HEAP32[(30804)>>2] = 0;
                HEAP32[7700] = (6228);
                __THREW__ = 0;
                invoke_vii(632,($this|0),(30800|0));
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if ($39) {
                 label = 42;
                } else {
                 HEAP32[(30812)>>2] = 0;
                 HEAP32[7702] = (6292);
                 __THREW__ = 0;
                 invoke_vii(633,($this|0),(30808|0));
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if ($41) {
                  label = 42;
                 } else {
                  HEAP32[(30820)>>2] = 0;
                  HEAP32[7704] = (6344);
                  __THREW__ = 0;
                  invoke_vii(634,($this|0),(30816|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   label = 42;
                  } else {
                   HEAP32[(30828)>>2] = 0;
                   HEAP32[7706] = (7892);
                   __THREW__ = 0;
                   invoke_vii(635,($this|0),(30824|0));
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if ($45) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30836)>>2] = 0;
                   HEAP32[7708] = (7948);
                   __THREW__ = 0;
                   invoke_vii(636,($this|0),(30832|0));
                   $46 = __THREW__; __THREW__ = 0;
                   $47 = $46&1;
                   if ($47) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30844)>>2] = 0;
                   HEAP32[7710] = (8004);
                   __THREW__ = 0;
                   invoke_vii(637,($this|0),(30840|0));
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30852)>>2] = 0;
                   HEAP32[7712] = (8060);
                   __THREW__ = 0;
                   invoke_vii(638,($this|0),(30848|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30860)>>2] = 0;
                   HEAP32[7714] = (8116);
                   __THREW__ = 0;
                   invoke_vii(639,($this|0),(30856|0));
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30868)>>2] = 0;
                   HEAP32[7716] = (8144);
                   __THREW__ = 0;
                   invoke_vii(640,($this|0),(30864|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30876)>>2] = 0;
                   HEAP32[7718] = (8172);
                   __THREW__ = 0;
                   invoke_vii(641,($this|0),(30872|0));
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30884)>>2] = 0;
                   HEAP32[7720] = (8200);
                   __THREW__ = 0;
                   invoke_vii(642,($this|0),(30880|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30892)>>2] = 0;
                   HEAP32[7722] = (6396);
                   HEAP32[(30896)>>2] = (6444);
                   __THREW__ = 0;
                   invoke_vii(643,($this|0),(30888|0));
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30908)>>2] = 0;
                   HEAP32[7726] = (6480);
                   HEAP32[(30912)>>2] = (6528);
                   __THREW__ = 0;
                   invoke_vii(644,($this|0),(30904|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30924)>>2] = 0;
                   HEAP32[7730] = (8632);
                   __THREW__ = 0;
                   $64 = (invoke_i(560)|0);
                   $65 = __THREW__; __THREW__ = 0;
                   $66 = $65&1;
                   if ($66) {
                    $67 = ___cxa_find_matching_catch_2()|0;
                    $68 = tempRet0;
                    $eh$lpad$body$index3Z2D = $68;$eh$lpad$body$indexZ2D = $67;
                    break;
                   }
                   HEAP32[(30928)>>2] = $64;
                   HEAP32[7730] = (7844);
                   __THREW__ = 0;
                   invoke_vii(645,($this|0),(30920|0));
                   $69 = __THREW__; __THREW__ = 0;
                   $70 = $69&1;
                   if ($70) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30940)>>2] = 0;
                   HEAP32[7734] = (8632);
                   __THREW__ = 0;
                   $71 = (invoke_i(560)|0);
                   $72 = __THREW__; __THREW__ = 0;
                   $73 = $72&1;
                   if ($73) {
                    $74 = ___cxa_find_matching_catch_2()|0;
                    $75 = tempRet0;
                    $eh$lpad$body$index3Z2D = $75;$eh$lpad$body$indexZ2D = $74;
                    break;
                   }
                   HEAP32[(30944)>>2] = $71;
                   HEAP32[7734] = (7868);
                   __THREW__ = 0;
                   invoke_vii(646,($this|0),(30936|0));
                   $76 = __THREW__; __THREW__ = 0;
                   $77 = $76&1;
                   if ($77) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30956)>>2] = 0;
                   HEAP32[7738] = (8228);
                   __THREW__ = 0;
                   invoke_vii(647,($this|0),(30952|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    label = 42;
                    break;
                   }
                   HEAP32[(30964)>>2] = 0;
                   HEAP32[7740] = (8260);
                   __THREW__ = 0;
                   invoke_vii(648,($this|0),(30960|0));
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    label = 42;
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $86 = ___cxa_find_matching_catch_2()|0;
    $87 = tempRet0;
    $eh$lpad$body$index3Z2D = $87;$eh$lpad$body$indexZ2D = $86;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(649,($this|0),($__n|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
   ___resumeException($11|0);
   // unreachable;
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$0$i = $__n;$6 = $$pre$i;
  while(1) {
   HEAP32[$6>>2] = 0;
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 4|0);
   HEAP32[$0>>2] = $8;
   $9 = (($$0$i) + -1)|0;
   $10 = ($9|0)==(0);
   if ($10) {
    break;
   } else {
    $$0$i = $9;$6 = $8;
   }
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33444)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 do {
  if ($6) {
   $7 = $3;
   $$pre$phiZ2D = $0;$15 = $7;
  } else {
   $8 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(650,($0|0),($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $$pre = HEAP32[$0>>2]|0;
    $$pre$phiZ2D = $0;$15 = $$pre;
    break;
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $13 = ($f|0)==(0|0);
   if (!($13)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($11|0);
   // unreachable;
  }
 } while(0);
 $14 = (($15) + ($id<<2)|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $19 = $15;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
  $$pre2 = HEAP32[$$pre$phiZ2D>>2]|0;
  $19 = $$pre2;
 }
 $18 = (($19) + ($id<<2)|0);
 HEAP32[$18>>2] = $f;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)<($__sz>>>0);
 $6 = $2;
 $7 = $1;
 L1: do {
  if ($5) {
   $8 = (($__sz) - ($4))|0;
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  } else {
   $9 = ($4>>>0)>($__sz>>>0);
   if ($9) {
    $10 = (($6) + ($__sz<<2)|0);
    $12 = $7;
    while(1) {
     $11 = ($12|0)==($10|0);
     if ($11) {
      break L1;
     }
     $13 = ((($12)) + -4|0);
     HEAP32[$0>>2] = $13;
     $12 = $13;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i3 = 0, $$pre$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)<($__n>>>0);
 if ($6) {
  $13 = ((($this)) + 16|0);
  $14 = HEAP32[$this>>2]|0;
  $15 = (($3) - ($14))|0;
  $16 = $15 >> 2;
  $17 = (($16) + ($__n))|0;
  $18 = ($17>>>0)>(1073741823);
  if ($18) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $19 = (($1) - ($14))|0;
  $20 = $19 >> 2;
  $21 = ($20>>>0)<(536870911);
  if ($21) {
   $22 = $19 >> 1;
   $23 = ($22>>>0)<($17>>>0);
   $24 = $23 ? $17 : $22;
   $$0$i3 = $24;
  } else {
   $$0$i3 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i3,$16,$13);
  $25 = ((($__v)) + 8|0);
  $$pre$i1 = HEAP32[$25>>2]|0;
  $26 = $__n << 2;
  _memset(($$pre$i1|0),0,($26|0))|0;
  $scevgep = (($$pre$i1) + ($__n<<2)|0);
  HEAP32[$25>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  $7 = $3;
  $$0$i = $__n;$8 = $7;
  while(1) {
   HEAP32[$8>>2] = 0;
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 4|0);
   HEAP32[$2>>2] = $10;
   $11 = (($$0$i) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    break;
   } else {
    $$0$i = $11;$8 = $10;
   }
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $0;
 $5 = (($2) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP32[$3>>2]|0;
 $8 = (0 - ($6))|0;
 $9 = (($7) + ($8<<2)|0);
 HEAP32[$3>>2] = $9;
 _memcpy(($9|0),($0|0),($5|0))|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = ((($__v)) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = ((($this)) + 8|0);
 $16 = ((($__v)) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $4 = $$pre$i$i$i;
 while(1) {
  $3 = ($4|0)==($1|0);
  if ($3) {
   break;
  }
  $5 = ((($4)) + -4|0);
  HEAP32[$2>>2] = $5;
  $4 = $5;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $8 = ((($this)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($6|0);
   if ($10) {
    $11 = ((($9)) + 112|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($6);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33452)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33460)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33492)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35252)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8388);
 __THREW__ = 0;
 $2 = (invoke_i(560)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35260)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35268)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35276)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8508);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33472)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8548);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33500)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33484)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33508)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33516)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(33524)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35172)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35180)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35188)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35196)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35204)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35212)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35220)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35228)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(34336)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35148)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35156)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35164)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35236)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(35244)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30968]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(30968)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(651)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[8822] = 35284;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[8822]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(30976,1);
 HEAP32[8821] = 30976;
 return (35284|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[8823] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (35292|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[31136]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(31136)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(652)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[8824] = 35292;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[8824]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(653)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8992);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(654,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9012);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(654,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9012);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(654,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($ev)|0);
 $1 = (_strlen($0)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,29662)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(655,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $34 = (($what_arg) + ($__i$0$i$i<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $35;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen($what_arg)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(656,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(657,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (8864);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((35300|0))|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $1 = ($0|0)==(1);
  if (!($1)) {
   break;
  }
  (_pthread_cond_wait((35328|0),(35300|0))|0);
 }
 $2 = HEAP32[$flag>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(658,(35300|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     (invoke_ii(659,(35300|0))|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(658,(35300|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_ii(660,(35328|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        break;
       }
      }
     }
    }
   }
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   (___cxa_begin_catch(($14|0))|0);
   __THREW__ = 0;
   (invoke_ii(659,(35300|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(658,(35300|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     __THREW__ = 0;
     (invoke_ii(660,(35328|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      __THREW__ = 0;
      invoke_v(661);
      $22 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   __THREW__ = 0;
   invoke_v(394);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    ___resumeException($23|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((35300|0))|0);
  }
 } while(0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[2240]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(30042,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[368]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](1472,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[2240]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(29956,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[2240]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(30001,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(30080,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((35376|0),(662|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[8845]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(29768,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((35380|0),(663|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(29718,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[8845]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(29665,$vararg_buffer);
  // unreachable;
 }
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[619]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,1512,1480,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 511]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 511]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 511]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_i(664)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $45 = ___cxa_find_matching_catch_3(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_v($18|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_vii(665,(30092|0),($vararg_buffer|0));
     $21 = __THREW__; __THREW__ = 0;
    }
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    (___cxa_begin_catch(($22|0))|0);
    __THREW__ = 0;
    invoke_vii(665,(30132|0),($vararg_buffer1|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    __THREW__ = 0;
    invoke_v(394);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch_3(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ___clang_call_terminate($25);
     // unreachable;
    }
   }
  }
 }
 $31 = HEAP32[2219]|0;HEAP32[2219] = (($31+0)|0);
 $32 = $31;
 __THREW__ = 0;
 invoke_v($32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  __THREW__ = 0;
  invoke_vii(665,(30092|0),($vararg_buffer3|0));
  $35 = __THREW__; __THREW__ = 0;
 }
 $36 = ___cxa_find_matching_catch_3(0|0)|0;
 $37 = tempRet0;
 (___cxa_begin_catch(($36|0))|0);
 __THREW__ = 0;
 invoke_vii(665,(30132|0),($vararg_buffer5|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = ___cxa_find_matching_catch_3(0|0)|0;
 $40 = tempRet0;
 __THREW__ = 0;
 invoke_v(394);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___clang_call_terminate($39);
  // unreachable;
 }
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (30195|0);
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8992);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9012);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (30273|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&255;
  $6 = ((($info)) + 53|0);
  $7 = ($4&65535) >>> 8;
  $8 = $7&255;
  $9 = ((($this)) + 16|0);
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($this)) + 16|0) + ($11<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$6>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($9,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $13 = ($11|0)>(1);
  L4: do {
   if ($13) {
    $14 = ((($this)) + 24|0);
    $15 = ((($info)) + 24|0);
    $16 = ((($this)) + 8|0);
    $17 = ((($info)) + 54|0);
    $p$0 = $14;
    while(1) {
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      break L4;
     }
     $20 = HEAP16[$3>>1]|0;
     $21 = $20&255;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $28 = ($20&65535)<(256);
      if (!($28)) {
       $29 = HEAP32[$16>>2]|0;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        break L4;
       }
      }
     } else {
      $23 = HEAP32[$15>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       break L4;
      }
      $25 = HEAP32[$16>>2]|0;
      $26 = $25 & 2;
      $27 = ($26|0)==(0);
      if ($27) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$6>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $32 = ((($p$0)) + 8|0);
     $33 = ($32>>>0)<($12>>>0);
     if ($33) {
      $p$0 = $32;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $5;
  HEAP8[$6>>0] = $8;
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 16|0);
     $24 = ((($this)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (((($this)) + 16|0) + ($25<<3)|0);
     $27 = ((($info)) + 52|0);
     $28 = ((($info)) + 53|0);
     $29 = ((($info)) + 54|0);
     $30 = ((($this)) + 8|0);
     $31 = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type$0$off0 = 0;$p$0 = $23;
     L34: while(1) {
      $32 = ($p$0>>>0)<($26>>>0);
      if (!($32)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      HEAP8[$27>>0] = 0;
      HEAP8[$28>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$29>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      $35 = HEAP8[$28>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
       } else {
        $37 = HEAP8[$27>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$30>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = 1;
          label = 20;
          break L34;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$31>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L34;
        }
        $41 = HEAP32[$30>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L34;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;$p$0 = $47;
     }
     do {
      if ((label|0) == 20) {
       if (!($does_dst_type_point_to_our_static_type$0$off0$lcssa)) {
        HEAP32[$14>>2] = $current_ptr;
        $48 = ((($info)) + 40|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (($49) + 1)|0;
        HEAP32[$48>>2] = $50;
        $51 = ((($info)) + 36|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)==(1);
        if ($53) {
         $54 = HEAP32[$31>>2]|0;
         $55 = ($54|0)==(2);
         if ($55) {
          HEAP8[$29>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           label = 25;
           break;
          } else {
           $56 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$2$off0) {
        label = 25;
       } else {
        $56 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $56 = 3;
     }
     HEAP32[$20>>2] = $56;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9052);
 return;
}
function ___cxa_guard_acquire($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = ($0<<24>>24)==(1);
 if ($1) {
  $$0 = 0;
 } else {
  HEAP8[$p>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (8972);
  ___cxa_throw(($5|0),(1536|0),(359|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8846]|0;HEAP32[8846] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8972);
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,1512,1632,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(1536|0),(359|0));
 // unreachable;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_vidii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_vidii[index&1023](a1|0,+a2,a3|0,a4|0);
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_vidi(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0;
  FUNCTION_TABLE_vidi[index&511](a1|0,+a2,a3|0);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&1023](a1|0,a2|0,+a3)|0;
}


function dynCall_ddd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  return +FUNCTION_TABLE_ddd[index&511](+a1,+a2);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1023](a1|0);
}


function dynCall_dd(index,a1) {
  index = index|0;
  a1=+a1;
  return +FUNCTION_TABLE_dd[index&511](+a1);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&31](a1|0,a2|0,+a3);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function b3(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_vidii(8);
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(9);return 0;
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_vidi(10);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(11);
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(13);
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(14);
}
function b15(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b16(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(16);return 0;
}
function b17(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_ddd(17);return +0;
}
function b18(p0) {
 p0 = p0|0; nullFunc_di(18);return +0;
}
function b19(p0) {
 p0 = +p0; nullFunc_dd(19);return +0;
}
function b20(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(20);
}
function b21(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(21);
}
function b22(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(22);
}
function b23(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0;
}
function b24(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(24);return 0;
}
function b25(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(25);return +0;
}
function b26(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(26);return +0;
}
function b27() {
 ; nullFunc_i(27);return 0;
}
function b28(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(28);return 0;
}
function b29(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(29);
}
function b30() {
 ; nullFunc_v(30);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b31(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(31);return 0;
}
function b32(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(32);return 0;
}
function b33(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b1,b1,b1,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,__ZN6b2Vec2mLEf,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN7b2Sweep7AdvanceEf,b2,b2,b2,b2,b2,b2,b2,__ZN6b2Body7AdvanceEf,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_,b3,__Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,__ZN7b2ShapeD2Ev,__ZN7b2ShapeD0Ev,b4,__ZN11b2EdgeShapeD2Ev,__ZN11b2EdgeShapeD0Ev,b4,b4,b4,b4,b4,b4,__ZN14b2PolygonShapeD2Ev,__ZN14b2PolygonShapeD0Ev,b4,b4,b4,b4,b4,b4,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev
,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN17b2ContactListenerD2Ev,__ZN17b2ContactListenerD0Ev,b4,b4,b4,b4,__ZN15b2ContactFilterD2Ev,__ZN15b2ContactFilterD0Ev,b4,b4,__ZN23b2ChainAndCircleContactD2Ev,__ZN23b2ChainAndCircleContactD0Ev,b4,__ZN24b2ChainAndPolygonContactD2Ev,__ZN24b2ChainAndPolygonContactD0Ev,b4,__ZN15b2CircleContactD2Ev
,__ZN15b2CircleContactD0Ev,__ZN9b2ContactD2Ev,__ZN9b2ContactD0Ev,b4,__ZN22b2EdgeAndCircleContactD2Ev,__ZN22b2EdgeAndCircleContactD0Ev,b4,__ZN23b2EdgeAndPolygonContactD2Ev,__ZN23b2EdgeAndPolygonContactD0Ev,b4,__ZN25b2PolygonAndCircleContactD2Ev,__ZN25b2PolygonAndCircleContactD0Ev,b4,__ZN16b2PolygonContactD2Ev,__ZN16b2PolygonContactD0Ev,b4,b4,b4,b4,b4,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b4,b4,b4,b4
,b4,b4,b4,b4,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,b4,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b4,b4,b4,b4,b4,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b4,b4,b4,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b4,b4,b4,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4
,b4,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b4,b4,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b4,b4,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b4,b4,b4,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b4,b4,b4,__ZNSt3__16locale5facetD2Ev
,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b4,b4,b4,b4,b4,b4,b4,b4
,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b4,b4,b4,b4,b4,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b4,b4,b4,b4,b4,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b4
,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4
,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b4,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b4,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b4,b4,b4,b4,b4,__ZN14b2CLBroadPhaseC2Ev,__ZN13b2DynamicTreeD2Ev,__Z6b2FreePv,__ZN6b2Vec2C2Ev,__ZN6b2Vec27SetZeroEv,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b4,b4,b4,b4
,__ZNSt3__16localeD2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev,__ZN14b2CLCommonData25initReadLastJointImpulsesEv,__ZN14b2CLCommonDataC2Ev,__ZN14b2CLCommonDataD2Ev,__ZN14b2CLCommonData12DeleteJointsEv,b4,b4,__ZN11b2EdgeShapeC2Ev,b4,b4
,__ZN9QuadrupleC2Ev,b4,__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev,b4,b4,b4,b4,b4,__ZN10b2CLDeviceC2Ev,__ZN10b2CLDeviceD2Ev,__ZN8b2CLScanC2Ev,__ZN8b2CLScanD2Ev,__ZN12clb2ManifoldC2Ev,__ZN8b2CLSortC2Ev,__ZN8b2CLSortD2Ev,b4,__ZN15b2CLNarrowPhaseC2Ev,b4,__ZN15b2CLNarrowPhaseD2Ev,__ZN12b2BroadPhaseD2Ev,b4,b4,b4,b4,__ZN15b2GrowableStackIiLi256EED2Ev,b4,b4,b4,b4,__ZN15b2ContactSolverD2Ev
,b4,__ZN15b2ContactSolver29InitializeVelocityConstraintsEv,__ZN15b2ContactSolver24SolveVelocityConstraintsEv,b4,b4,b4,b4,b4,b4,__ZN6b2Body20SynchronizeTransformEv,b4,__ZN16b2StackAllocatorC2Ev,__ZN16b2ContactManagerC2Ev,__ZN10b2CLSolverC2Ev,__ZN12b2CLSolveTOIC2Ev,b4,__ZN12b2CLSolveTOID2Ev,__ZN10b2CLSolverD2Ev,__ZN16b2ContactManagerD2Ev,__ZN16b2StackAllocatorD2Ev,__ZN16b2BlockAllocatorD2Ev,b4,b4,__ZN8b2IslandD2Ev,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZN10b2TOIInputC2Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN8b2Island5ClearEv,b4,b4,b4,__ZN6b2Body19SynchronizeFixturesEv,b4,__ZN16b2ContactManager18cpuFindNewContactsEv,b4,__ZN16b2ContactManager15FindNewContactsEv,__ZN10b2CLDevice18finishCommandQueueEv,b4,__ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9b2BodyDefC2Ev,b4,b4,__ZN14b2PolygonShapeC2Ev,b4,b4,__ZN12b2FixtureDefC2Ev,b4,b4,b4,b4,__ZN7b2WorldD2Ev,_cleanup_387,_cleanup_382,b4,b4
,b4,b4,b4,b4,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b4,b4,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,___cxx_global_array_dtor,b4,___cxx_global_array_dtor_69,___cxx_global_array_dtor_117,b4,___cxx_global_array_dtor_54,b4,___cxx_global_array_dtor_93,___cxx_global_array_dtor_120,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_freelocale,b4,b4,__ZNSt3__112__do_nothingEPv,b4,__ZNSt3__121__throw_runtime_errorEPKc,b4,b4,b4,b4,b4,_free,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN17b2ContactListener12BeginContactEP9b2Contact,__ZN17b2ContactListener10EndContactEP9b2Contact,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv
,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b5,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
,b5,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18messagesIcE8do_closeEi,b5,b5,b5,b5,__ZNKSt3__18messagesIwE8do_closeEi,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__18ios_base4initEPv,b5,b5,__ZNSt3__18ios_base5clearEj,b5,b5
,b5,b5,b5,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev,b5,b5,b5,b5,__ZN14b2CLCommonData17CopyRevoluteJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData18CopyPrismaticJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData17CopyDistanceJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData15CopyPulleyJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData14CopyMouseJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData13CopyGearJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData14CopyWheelJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData13CopyWeldJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData17CopyFrictionJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData13CopyRopeJointEPK7b2JointP9b2clJoint,b5,b5,b5,b5,b5,b5,b5,__ZN10b2CLDevice9freeArrayEP7_cl_mem,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN15b2GrowableStackIiLi256EE4PushERKi,b5,b5,b5,b5,b5,b5,__ZN15b2ContactSolverC2EP18b2ContactSolverDef,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN6b2Vec2pLERKS_,b5,__ZN8b2Island6ReportEPK27b2ContactVelocityConstraint,b5,b5,b5,b5,__ZN16b2ContactManager15SetWorldPointerEP7b2World,b5,b5,b5,b5,b5,__ZN9b2Fixture7DestroyEP16b2BlockAllocator,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput,b5,b5,__ZN9b2Contact6UpdateEP17b2ContactListener,b5,__ZN9b2Contact10SetEnabledEb,__ZN6b2Body8SetAwakeEb,b5,__ZN8b2Island3AddEP6b2Body,__ZN8b2Island3AddEP9b2Contact,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZNSt11logic_errorC2EPKc,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,b5,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt13runtime_errorC2EPKc,b5,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b5,b5
,b5,b5,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b5,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b5,b5,b5,__ZNSt3__118__libcpp_refstringC2EPKc,b5,b5,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5
,b5,b5,b5,b5,b5,b5,_abort_message,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx
,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b6,b6,b6,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b6,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b6,b6
,b6,b6,b6,b6,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b6,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b6,b6,b6,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6
,b6,b6,b6,b6,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,b7,b7,b7,b7,b7,b7,__ZNK11b2EdgeShape13GetChildCountEv,b7,b7,b7,b7,b7,b7,b7,__ZNK14b2PolygonShape13GetChildCountEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b7,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,___stdio_close,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b7,b7,b7,b7,__ZNKSt13runtime_error4whatEv,b7,b7,__ZNKSt3__119__iostream_category4nameEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b7,b7,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
,b7,b7,b7,b7,b7,b7,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b7,b7
,b7,b7,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b7,b7,b7,b7,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b7,b7,b7,b7
,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,b7,b7,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b7,b7,b7,b7,b7,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b7,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZNKSt9bad_alloc4whatEv,b7,b7,__ZNKSt11logic_error4whatEv,b7,b7,b7,b7,b7,__ZNKSt8bad_cast4whatEv,b7,b7,b7,b7,__Z7b2Alloci,__Znwj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18ios_base6getlocEv,b7
,b7,b7,b7,b7,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b7,_fclose,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK6b2Body8IsBulletEv,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Znaj,b7,b7,b7,b7,__ZN15b2GrowableStackIiLi256EE8GetCountEv,__ZN15b2GrowableStackIiLi256EE3PopEv,b7,b7,__ZNK10b2TreeNode6IsLeafEv,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK9b2Contact9IsEnabledEv,__ZN9b2Contact11GetFixtureAEv,__ZN9b2Contact11GetFixtureBEv,__ZNK9b2Fixture8IsSensorEv,__ZN9b2Fixture7GetBodyEv,__ZNK6b2Body7IsAwakeEv
,b7,__ZNK9b2Contact14GetChildIndexAEv,__ZNK9b2Contact14GetChildIndexBEv,b7,__ZN9b2Fixture8GetShapeEv,b7,b7,b7,b7,b7,__ZNK9b2Contact10IsTouchingEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK9b2Fixture7GetTypeEv,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK6b2Body11GetPositionEv,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_uselocale,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_wcslen,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_vidii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN7b2World4StepEfii,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b9,b9,b9,b9,b9,b9,b9,b9
,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_vidi = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZmlfRK6b2Vec2,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_vidd = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN6b2Vec23SetEff,b11,b11,__ZN14b2PolygonShape8SetAsBoxEff,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiii = [b12,b12,b12,b12,b12,b12,b12,b12,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,b12,b12,b12,b12,b12,b12,b12,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b12,b12,b12,b12,b12,b12,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b12,b12,b12,b12,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b12,b12,b12,b12,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b12,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b12,b12,__ZNKSt3__15ctypeIcE9do_narrowEcc,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__15ctypeIwE5do_isEtw,b12,b12,b12,b12,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b12,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b12,b12,__ZNKSt3__15ctypeIwE9do_narrowEwc,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10b2CLDevice13allocateArrayEjb,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,___stdio_read,_do_read
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_newlocale,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_vasprintf
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_
,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b12,b12,b12,b12,b12,b12,_wcrtomb,b12,b12,_mbtowc,_mbrlen,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b13,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListenerP7b2WorldP10b2CLSolver,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_viiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b15,b15,b15,b15,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_iiid = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN6b2Body13CreateFixtureEPK7b2Shapef,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_ddd = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,__Z5b2MinIfET_S0_S0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_di = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,__ZNK6b2Vec26LengthEv,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK7b2Timer15GetMillisecondsEv,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK6b2Body8GetAngleEv,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_dd = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,__Z5b2AbsIfET_S0_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19];
var FUNCTION_TABLE_viid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,b20,b20,b20,b20,b20,b20,b20,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_viiiiiii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b21,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b21,b21
,b21,b21,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_viiiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b22,b22,b22,b22,b22,b22
,b22,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b22,b22,b22,b22,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b22,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_iii = [b23,b23,b23,b23,b23,b23,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,b23,b23,b23,b23,b23,b23,b23,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,b23,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__15ctypeIcE10do_toupperEc,b23,__ZNKSt3__15ctypeIcE10do_tolowerEc,b23,__ZNKSt3__15ctypeIcE8do_widenEc,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__15ctypeIwE10do_toupperEw,b23,__ZNKSt3__15ctypeIwE10do_tolowerEw,b23,__ZNKSt3__15ctypeIwE8do_widenEc,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__16locale9use_facetERNS0_2idE
,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b23,b23,b23,b23,__ZNKSt3__16locale9has_facetERNS0_2idE,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE4findIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_
,b23,b23,b23,__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEEixERS9_,_printf,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__Z22CompareElementsForSortRK12element_typeS1_,b23,b23,b23,b23,__Z14b2PairLessThanRK6b2PairS1_,b23,b23,b23,b23,__Z13b2TestOverlapRK6b2AABBS1_,b23,__ZN12b2BroadPhase13QueryCallbackEi,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN7b2World10CreateBodyEPK9b2BodyDef,b23,b23,b23,b23,__ZN6b2Body13CreateFixtureEPK12b2FixtureDef,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,_isxdigit_l,_isdigit_l,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b23,b23,b23,b23,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_iiiiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b24,b24,b24,b24,b24,b24,b24,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b24,b24,b24,b24,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b24,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b24,b24,b24
,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b24,b24,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b24,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b24,b24,b24,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b24,b24,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b24,b24,b24,b24,b24,b24,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b24,b24,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b24,b24
,b24,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b24,b24,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b24,b24,b24,b24,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b24,b24,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_wcsnrtombs,b24,_mbsnrtowcs,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_diii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_dii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,__Z5b2DotRK6b2Vec2S1_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26];
var FUNCTION_TABLE_i = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN10b2CLDevice8instanceEv,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__16__clocEv,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,___ctype_toupper_loc,___ctype_tolower_loc,___ctype_b_loc,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZNSt3__16locale5__imp12make_classicEv,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,___cxa_get_globals_fast,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_iiiii = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b28,b28,b28,b28,b28,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,b28,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b28,b28,b28,b28,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b28,b28,b28,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,_mbsrtowcs,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,_catgets,b28,b28,b28,_mbrtowc,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_viii = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNKSt3__114error_category23default_error_conditionEi,b29,b29,__ZNKSt3__119__iostream_category7messageEi,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE15__insert_uniqueERKS6_,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,__ZN15b2DistanceProxy3SetEPK7b2Shapei,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_,b29,__ZN12b2CLSolveTOI21syncMovedBodytoDeviceERNSt3__13setIP6b2BodyNS0_4lessIS3_EENS0_9allocatorIS3_EEEEP10b2CLSolver,b29,b29,b29,b29,b29,__ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b29,b29,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b29,b29,b29,b29,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b29,b29,b29,b29,b29,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b29,b29,b29
,b29,b29,b29,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_v = [b30,b30,b30,___cxa_pure_virtual__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZL25default_terminate_handlerv,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,___cxa_end_catch__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZSt17__throw_bad_allocv,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,___cxa_rethrow__wrapper,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_iiiiiiiii = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b31,b31,b31,b31,b31,b31,b31,b31,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_
,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b31,b31,b31,b31,b31,b31,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31];
var FUNCTION_TABLE_iiiiid = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce
,b32,b32,b32,b32,b32,b32,b32,b32,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32];
var FUNCTION_TABLE_viiii = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,b33,b33,b33,b33,b33,b33,b33,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33
,b33,b33,b33,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b33,b33,b33,b33,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSG_SG_,b33,b33,b33
,b33,b33,b33,b33,b33,___assert_fail__wrapper,b33,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSH_SH_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN8b2Island8SolveTOIERK10b2TimeStepii,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_,b33,b33,b33,b33
,b33,b33,b33];

  return { _main: _main, _memset: _memset, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_self: _pthread_self, _pthread_mutex_unlock: _pthread_mutex_unlock, _pthread_cond_broadcast: _pthread_cond_broadcast, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, __GLOBAL__sub_I_b2Math_cpp: __GLOBAL__sub_I_b2Math_cpp, __GLOBAL__sub_I_b2ContactManager_cpp: __GLOBAL__sub_I_b2ContactManager_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_vidii: dynCall_vidii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidi: dynCall_vidi, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_ddd: dynCall_ddd, dynCall_di: dynCall_di, dynCall_dd: dynCall_dd, dynCall_viid: dynCall_viid, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real___GLOBAL__sub_I_b2ContactManager_cpp = asm["__GLOBAL__sub_I_b2ContactManager_cpp"]; asm["__GLOBAL__sub_I_b2ContactManager_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_b2ContactManager_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real___GLOBAL__sub_I_b2Math_cpp = asm["__GLOBAL__sub_I_b2Math_cpp"]; asm["__GLOBAL__sub_I_b2Math_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_b2Math_cpp.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var _memset = Module["_memset"] = asm["_memset"];
var __GLOBAL__sub_I_b2ContactManager_cpp = Module["__GLOBAL__sub_I_b2ContactManager_cpp"] = asm["__GLOBAL__sub_I_b2ContactManager_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var __GLOBAL__sub_I_b2Math_cpp = Module["__GLOBAL__sub_I_b2Math_cpp"] = asm["__GLOBAL__sub_I_b2Math_cpp"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_ddd = Module["dynCall_ddd"] = asm["dynCall_ddd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



