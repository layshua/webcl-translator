
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "BitonicSort" :
                {
                    "keyArray" :
                        {
                            "index" : 0,
                            "type" : "uint4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_keyArray_size"
                        },
                    "_wcl_keyArray_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "valueArray" :
                        {
                            "index" : 2,
                            "type" : "uint4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_valueArray_size"
                        },
                    "_wcl_valueArray_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "stage" :
                        {
                            "index" : 4,
                            "type" : "uint"
                        },
                    "passOfStage" :
                        {
                            "index" : 5,
                            "type" : "uint"
                        },
                    "dir" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "numWorkItems" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    uint4 _wcl_srcLeft;
    uint4 _wcl_srcRight;
    uint4 _wcl_mask;
    uint4 _wcl_srcValueLeft;
    uint4 _wcl_srcValueRight;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    __global uint4 *BitonicSort__keyArray_min;
    __global uint4 *BitonicSort__keyArray_max;
    __global uint4 *BitonicSort__valueArray_min;
    __global uint4 *BitonicSort__valueArray_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_2__u_uglobal__uint4__Ptr(__global uint4 *addr, unsigned size, __global uint4 * min0, __global uint4 * max0, __global uint4 * min1, __global uint4 * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max1)) );
}
__global uint4 *_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr(__global uint4 *addr, unsigned size, __global uint4 * min0, __global uint4 * max0, __global uint4 * min1, __global uint4 * max1, __global uint4 * asnull)
{
     return _wcl_addr_check_global_2__u_uglobal__uint4__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
// Copyright (c) 2009-2011 Intel Corporation
// All rights reserved.
// 
// WARRANTY DISCLAIMER
// 
// THESE MATERIALS ARE PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INTEL OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THESE
// MATERIALS, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// Intel Corporation is the author of the Materials, and requests that all
// problem reports or change requests be submitted to it directly

__kernel void __attribute__((vec_type_hint(uint4))) BitonicSort(
       __global uint4 * keyArray, ulong _wcl_keyArray_size,
       __global uint4 * valueArray, ulong _wcl_valueArray_size,
       const uint stage,
       const uint passOfStage,
       const uint dir,
       const uint numWorkItems)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &keyArray[0], &keyArray[_wcl_keyArray_size],&valueArray[0], &valueArray[_wcl_valueArray_size] },
        0,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BitonicSort__keyArray_min, _wcl_allocs->gl.BitonicSort__keyArray_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BitonicSort__valueArray_min, _wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint*)0));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

 uint i = get_global_id(0);

 if (i>=numWorkItems)
  return;

 uint4 srcLeft, srcRight;
 uint4 mask;
 uint4 srcValueLeft, srcValueRight;
 //int4 imask10 = (int4)(0,  0, -1, -1);
 //int4 imask11 = (int4)(0, -1,  0, -1);
 uint4 imask10 = (uint4)(0, 0, 0xFFFFFFFF, 0xFFFFFFFF);
 uint4 imask11 = (uint4)(0, 0xFFFFFFFF, 0, 0xFFFFFFFF);

 if(stage > 0)
 {
  if(passOfStage > 0) //upper level pass, exchange between two fours
  {
   uint r = 1 << (passOfStage - 1);
   uint lmask = r - 1;
   uint left = ((i>>(passOfStage-1)) << passOfStage) + (i & lmask);
   uint right = left + r;

   _wcl_allocs->pa._wcl_srcLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_srcRight = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_srcValueLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_srcValueRight = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);

   uint4 imin = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
   uint4 imax = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
   uint4 vmin = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
   uint4 vmax = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);

   if( ((i>>(stage-1)) & 1) ^ dir )
   {
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = imin;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = imax;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = vmin;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = vmax;
   }
   else
   {
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = imin;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = imax;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(right), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = vmin;
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(left), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = vmax;
   }
  }
  else //last pass, sort inside one four
  {
   _wcl_allocs->pa._wcl_srcLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.zwxy;
   _wcl_allocs->pa._wcl_srcValueLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
   _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.zwxy;
   //mask = as_uint4(srcLeft < srcRight) ^ imask10;
   _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
   _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xyxy;

   if(((i >> stage) & 1) ^ dir)
   {
    _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
    _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.yxwz;
    _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
    _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.yxwz;

    //mask = as_uint4(srcLeft < srcRight) ^ imask11;
    _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
    _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xxzz;

    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
   }
   else
   {
    _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
    _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.yxwz;
    _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);
    _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.yxwz;

    //mask = as_uint4(srcLeft < srcRight) ^ imask11;
    _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
    _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xxzz;

    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
    (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);
   }
  }
 }
 else //first stage, sort inside one four
 {
  //int4 imask0 = (int4)(0, -1, -1,  0);
  uint4 imask0 = (uint4)(0, 0xFFFFFFFF, 0xFFFFFFFF, 0);
  _wcl_allocs->pa._wcl_srcLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
  _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.yxwz;
  _wcl_allocs->pa._wcl_srcValueLeft = (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn)));
  _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.yxwz;
  //mask = as_uint4(srcLeft < srcRight) ^ imask0;
  _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
  _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xxww;
  if( dir )
  {
   _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
  }
  else
  {
   _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);
  }

  _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.zwxy;
  _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.zwxy;
  //mask = as_uint4(srcLeft < srcRight) ^ imask10;
  _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
  _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xyxy;

  if((i & 1) ^ dir)
  {
   _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.yxwz;
   _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.yxwz;

   //mask = as_uint4(srcLeft < srcRight) ^ imask11;
   _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
   _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xxzz;

   (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & ~_wcl_allocs->pa._wcl_mask);
   (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcValueLeft & _wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & ~_wcl_allocs->pa._wcl_mask);
  }
  else
  {
   _wcl_allocs->pa._wcl_srcLeft = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcRight = _wcl_allocs->pa._wcl_srcLeft.yxwz;
   _wcl_allocs->pa._wcl_srcValueLeft = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);
   _wcl_allocs->pa._wcl_srcValueRight = _wcl_allocs->pa._wcl_srcValueLeft.yxwz;

   //mask = as_uint4(srcLeft < srcRight) ^ imask11;
   _wcl_allocs->pa._wcl_mask = as_uint4(_wcl_allocs->pa._wcl_srcLeft < _wcl_allocs->pa._wcl_srcRight);
   _wcl_allocs->pa._wcl_mask = _wcl_allocs->pa._wcl_mask.xxzz;

   (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((keyArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcRight & _wcl_allocs->pa._wcl_mask);
   (*(_wcl_addr_clamp_global_2__u_uglobal__uint4__Ptr((valueArray)+(i), 1, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__keyArray_max, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_min, (__global uint4 *)_wcl_allocs->gl.BitonicSort__valueArray_max, (__global uint4 *)_wcl_allocs->gn))) = (_wcl_allocs->pa._wcl_srcValueLeft & ~_wcl_allocs->pa._wcl_mask) | (_wcl_allocs->pa._wcl_srcValueRight & _wcl_allocs->pa._wcl_mask);
  }
 }
}

/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "bitonicSortLocal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "sortDir" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "bitonicSortLocal1" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        }
                },
            "bitonicMergeGlobal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "size" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "stride" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "sortDir" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "bitonicMergeLocal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "stride" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "size" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "sortDir" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    uint _wcl_t;
    uint _wcl_2_t;
    uint _wcl_keyA;
    uint _wcl_valA;
    uint _wcl_keyB;
    uint _wcl_valB;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    uint _wcl_l_key[512];
    uint _wcl_l_val[512];
    uint _wcl_2_l_key[512];
    uint _wcl_2_l_val[512];
    uint _wcl_3_l_key[512];
    uint _wcl_3_l_val[512];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global uint *bitonicSortLocal__d_DstKey_min;
    __global uint *bitonicSortLocal__d_DstKey_max;
    __global uint *bitonicSortLocal__d_DstVal_min;
    __global uint *bitonicSortLocal__d_DstVal_max;
    __global uint *bitonicSortLocal__d_SrcKey_min;
    __global uint *bitonicSortLocal__d_SrcKey_max;
    __global uint *bitonicSortLocal__d_SrcVal_min;
    __global uint *bitonicSortLocal__d_SrcVal_max;
    __global uint *bitonicSortLocal1__d_DstKey_min;
    __global uint *bitonicSortLocal1__d_DstKey_max;
    __global uint *bitonicSortLocal1__d_DstVal_min;
    __global uint *bitonicSortLocal1__d_DstVal_max;
    __global uint *bitonicSortLocal1__d_SrcKey_min;
    __global uint *bitonicSortLocal1__d_SrcKey_max;
    __global uint *bitonicSortLocal1__d_SrcVal_min;
    __global uint *bitonicSortLocal1__d_SrcVal_max;
    __global uint *bitonicMergeGlobal__d_DstKey_min;
    __global uint *bitonicMergeGlobal__d_DstKey_max;
    __global uint *bitonicMergeGlobal__d_DstVal_min;
    __global uint *bitonicMergeGlobal__d_DstVal_max;
    __global uint *bitonicMergeGlobal__d_SrcKey_min;
    __global uint *bitonicMergeGlobal__d_SrcKey_max;
    __global uint *bitonicMergeGlobal__d_SrcVal_min;
    __global uint *bitonicMergeGlobal__d_SrcVal_max;
    __global uint *bitonicMergeLocal__d_DstKey_min;
    __global uint *bitonicMergeLocal__d_DstKey_max;
    __global uint *bitonicMergeLocal__d_DstVal_min;
    __global uint *bitonicMergeLocal__d_DstVal_max;
    __global uint *bitonicMergeLocal__d_SrcKey_min;
    __global uint *bitonicMergeLocal__d_SrcKey_max;
    __global uint *bitonicMergeLocal__d_SrcVal_min;
    __global uint *bitonicMergeLocal__d_SrcVal_max;
} _WclGlobalLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(uint *, max0)) );
}
uint *_wcl_addr_clamp_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0, uint * asnull)
{
     return _wcl_addr_check_private_1_uint__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_global_16__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max15)) );
}
__global uint *_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15, __global uint * asnull)
{
     return _wcl_addr_check_global_16__u_uglobal__uint__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local uint *, max0)) );
}
__local uint *_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0, __local uint * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__uint__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */



//Passed down by clBuildProgram




inline void ComparatorPrivate(_WclProgramAllocations *_wcl_allocs, 
    uint *keyA,
    uint *valA,
    uint *keyB,
    uint *valB,
    uint arrowDir
){
    if( ((*(_wcl_addr_clamp_private_1_uint__Ptr((keyA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) > (*(_wcl_addr_clamp_private_1_uint__Ptr((keyB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn)))) == arrowDir ){
        uint t;
        _wcl_allocs->pa._wcl_t = (*(_wcl_addr_clamp_private_1_uint__Ptr((keyA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((keyA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_uint__Ptr((keyB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((keyB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = _wcl_allocs->pa._wcl_t;
        _wcl_allocs->pa._wcl_t = (*(_wcl_addr_clamp_private_1_uint__Ptr((valA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((valA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_uint__Ptr((valB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((valB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = _wcl_allocs->pa._wcl_t;
    }
}

inline void ComparatorLocal(_WclProgramAllocations *_wcl_allocs, 
    __local uint *keyA,
    __local uint *valA,
    __local uint *keyB,
    __local uint *valB,
    uint arrowDir
){
    if( ((*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) > (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)))) == arrowDir ){
        uint t;
        _wcl_allocs->pa._wcl_2_t = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((keyB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = _wcl_allocs->pa._wcl_2_t;
        _wcl_allocs->pa._wcl_2_t = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = _wcl_allocs->pa._wcl_2_t;
    }
}

////////////////////////////////////////////////////////////////////////////////
// Monolithic bitonic sort kernel for short arrays fitting into local memory
////////////////////////////////////////////////////////////////////////////////
__kernel __attribute__((reqd_work_group_size(512U / 2, 1, 1)))
void bitonicSortLocal(
    __global uint *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global uint *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint sortDir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local uint l_key[512U];
    __local uint l_val[512U];

    //Offset to the beginning of subbatch and load data
    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    for(uint size = 2; size < arrayLength; size <<= 1){
        //Bitonic merge
        uint dir = ( (get_local_id(0) & (size / 2)) != 0 );
        for(uint stride = size / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                dir
            );
        }
    }

    //dir == sortDir for the last bitonic merge step
    {
        for(uint stride = arrayLength / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                sortDir
            );
        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////
// Bitonic sort kernel for large arrays (not fitting into local memory)
////////////////////////////////////////////////////////////////////////////////
//Bottom-level bitonic sort
//Almost the same as bitonicSortLocal with the only exception
//of even / odd subarrays (of LOCAL_SIZE_LIMIT points) being
//sorted in opposite directions
__kernel __attribute__((reqd_work_group_size(512U / 2, 1, 1)))
void bitonicSortLocal1(
    __global uint *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global uint *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local uint l_key[512U];
    __local uint l_val[512U];

    //Offset to the beginning of subarray and load data
    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    uint comparatorI = get_global_id(0) & ((512U / 2) - 1);

    for(uint size = 2; size < 512U; size <<= 1){
        //Bitonic merge
        uint dir = (comparatorI & (size / 2)) != 0;
        for(uint stride = size / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                dir
            );
        }
    }

    //Odd / even arrays of LOCAL_SIZE_LIMIT elements
    //sorted in opposite directions
    {
        uint dir = (get_group_id(0) & 1);
        for(uint stride = 512U / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
               dir
            );
        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}

//Bitonic merge iteration for 'stride' >= LOCAL_SIZE_LIMIT
__kernel void bitonicMergeGlobal(
    __global uint *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global uint *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint size,
    uint stride,
    uint sortDir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    uint global_comparatorI = get_global_id(0);
    uint comparatorI = global_comparatorI & (arrayLength / 2 - 1);

    //Bitonic merge
    uint dir = sortDir ^ ( (comparatorI & (size / 2)) != 0 );
    uint pos = 2 * global_comparatorI - (global_comparatorI & (stride - 1));

    uint keyA = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_keyA = keyA;
    uint valA = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_valA = valA;
    uint keyB = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_keyB = keyB;
    uint valB = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_valB = valB;

    ComparatorPrivate(_wcl_allocs, 
        &_wcl_allocs->pa._wcl_keyA, &_wcl_allocs->pa._wcl_valA,
        &_wcl_allocs->pa._wcl_keyB, &_wcl_allocs->pa._wcl_valB,
        dir
    );

    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_keyA;
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_valA;
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_keyB;
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_valB;
}

//Combined bitonic merge steps for
//'size' > LOCAL_SIZE_LIMIT and 'stride' = [1 .. LOCAL_SIZE_LIMIT / 2]
__kernel __attribute__((reqd_work_group_size(512U / 2, 1, 1)))
void bitonicMergeLocal(
    __global uint *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global uint *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint stride,
    uint size,
    uint sortDir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size] },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local uint l_key[512U];
    __local uint l_val[512U];

    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    //Bitonic merge
    uint comparatorI = get_global_id(0) & ((arrayLength / 2) - 1);
    uint dir = sortDir ^ ( (comparatorI & (size / 2)) != 0 );
    for(; stride > 0; stride >>= 1){
        barrier(CLK_LOCAL_MEM_FENCE);
        uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
        ComparatorLocal(_wcl_allocs, 
            &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
            &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
            dir
        );
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstKey)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}

/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "LocalScanKernel" :
                {
                    "dst" :
                        {
                            "index" : 0,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_dst_size"
                        },
                    "_wcl_dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "src" :
                        {
                            "index" : 2,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_src_size"
                        },
                    "_wcl_src_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "sumBuffer" :
                        {
                            "index" : 4,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_sumBuffer_size"
                        },
                    "_wcl_sumBuffer_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "cb" :
                        {
                            "index" : 6,
                            "type" : "uint4"
                        }
                },
            "AddOffsetKernel" :
                {
                    "dst" :
                        {
                            "index" : 0,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_dst_size"
                        },
                    "_wcl_dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "blockSum" :
                        {
                            "index" : 2,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_blockSum_size"
                        },
                    "_wcl_blockSum_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "cb" :
                        {
                            "index" : 4,
                            "type" : "uint4"
                        }
                },
            "TopLevelScanKernel" :
                {
                    "dst" :
                        {
                            "index" : 0,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_dst_size"
                        },
                    "_wcl_dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "cb" :
                        {
                            "index" : 2,
                            "type" : "uint4"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef unsigned int u32;

typedef struct {
    float4 _wcl_blocksum;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    float4 _wcl_ldsData[256];
    float4 _wcl_2_ldsData[2048];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global float4 *LocalScanKernel__dst_min;
    __global float4 *LocalScanKernel__dst_max;
    __global float4 *LocalScanKernel__src_min;
    __global float4 *LocalScanKernel__src_max;
    __global float4 *LocalScanKernel__sumBuffer_min;
    __global float4 *LocalScanKernel__sumBuffer_max;
    __global float4 *AddOffsetKernel__dst_min;
    __global float4 *AddOffsetKernel__dst_max;
    __global float4 *AddOffsetKernel__blockSum_min;
    __global float4 *AddOffsetKernel__blockSum_max;
    __global float4 *TopLevelScanKernel__dst_min;
    __global float4 *TopLevelScanKernel__dst_max;
} _WclGlobalLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_6__u_uglobal__float4__Ptr(__global float4 *addr, unsigned size, __global float4 * min0, __global float4 * max0, __global float4 * min1, __global float4 * max1, __global float4 * min2, __global float4 * max2, __global float4 * min3, __global float4 * max3, __global float4 * min4, __global float4 * max4, __global float4 * min5, __global float4 * max5)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global float4 *, max5)) );
}
__global float4 *_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr(__global float4 *addr, unsigned size, __global float4 * min0, __global float4 * max0, __global float4 * min1, __global float4 * max1, __global float4 * min2, __global float4 * max2, __global float4 * min3, __global float4 * max3, __global float4 * min4, __global float4 * max4, __global float4 * min5, __global float4 * max5, __global float4 * asnull)
{
     return _wcl_addr_check_global_6__u_uglobal__float4__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float4__Ptr(__local float4 *addr, unsigned size, __local float4 * min0, __local float4 * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float4 *, max0)) );
}
__local float4 *_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr(__local float4 *addr, unsigned size, __local float4 * min0, __local float4 * max0, __local float4 * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float4__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
Copyright (c) 2012 Advanced Micro Devices, Inc.  

This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the use of this software.
Permission is granted to anyone to use this software for any purpose, 
including commercial applications, and to alter it and redistribute it freely, 
subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
*/
//Originally written by Takahiro Harada


;






// takahiro end





/*typedef struct
{
	uint m_numElems;
	uint m_numBlocks;
	uint m_numScanBlocks;
	uint m_padding[1];
} ConstBuffer;
*/

float4 ScanExclusiveFloat4(_WclProgramAllocations *_wcl_allocs, __local float4* data, u32 n, int lIdx, int lSize)
{
 float4 blocksum;

    int offset = 1;
    for(int nActive=n>>1; nActive>0; nActive>>=1, offset<<=1)
    {
        barrier(CLK_LOCAL_MEM_FENCE);
        for(int iIdx=lIdx; iIdx<nActive; iIdx+=lSize)
        {
            int ai = offset*(2*iIdx+1)-1;
            int bi = offset*(2*iIdx+2)-1;
            (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(bi), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) += (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(ai), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
        }
 }

    barrier(CLK_LOCAL_MEM_FENCE);

    if( lIdx == 0 )
 {
  _wcl_allocs->pa._wcl_blocksum = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(n-1), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(n-1), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = 0;
 }

 barrier(CLK_LOCAL_MEM_FENCE);

 offset >>= 1;
    for(int nActive=1; nActive<n; nActive<<=1, offset>>=1 )
    {
        barrier(CLK_LOCAL_MEM_FENCE);
        for( int iIdx = lIdx; iIdx<nActive; iIdx += lSize )
        {
            int ai = offset*(2*iIdx+1)-1;
            int bi = offset*(2*iIdx+2)-1;
            float4 temp = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(ai), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(ai), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(bi), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((data)+(bi), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) += temp;
        }
 }
 barrier(CLK_LOCAL_MEM_FENCE);

 return _wcl_allocs->pa._wcl_blocksum;
}

__attribute__((reqd_work_group_size(128,1,1)))
__kernel
void LocalScanKernel(__global float4* dst, ulong _wcl_dst_size, __global float4* src, ulong _wcl_src_size, __global float4* sumBuffer, ulong _wcl_sumBuffer_size, uint4 cb)
{

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &dst[0], &dst[_wcl_dst_size],&src[0], &src[_wcl_src_size],&sumBuffer[0], &sumBuffer[_wcl_sumBuffer_size],0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__dst_min, _wcl_allocs->gl.LocalScanKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__src_min, _wcl_allocs->gl.LocalScanKernel__src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, _wcl_allocs->gl.LocalScanKernel__sumBuffer_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__dst_min, _wcl_allocs->gl.AddOffsetKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__blockSum_min, _wcl_allocs->gl.AddOffsetKernel__blockSum_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.TopLevelScanKernel__dst_min, _wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global uint*)0))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

 __local float4 ldsData[128*2];

 int gIdx = get_global_id(0);
 int lIdx = get_local_id(0);

//	ldsData[2*lIdx]     = ( 2*gIdx < cb.m_numElems )? src[2*gIdx]: 0;
//	ldsData[2*lIdx + 1] = ( 2*gIdx+1 < cb.m_numElems )? src[2*gIdx + 1]: 0;

    if ( 2*gIdx < cb.x )
        (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((src)+(2*gIdx), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn)));
    else
        (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = 0;

    if ( 2*gIdx+1 < cb.x )
        (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx + 1), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((src)+(2*gIdx + 1), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn)));
    else
        (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx + 1), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = 0;

 float4 sum = ScanExclusiveFloat4(_wcl_allocs, _wcl_locals._wcl_ldsData, 128*2, get_local_id(0), get_local_size(0));

 if( lIdx == 0 )
  (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((sumBuffer)+(get_group_id(0)), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) = sum;

 if( (2*gIdx) < cb.x )
    {
        (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(2*gIdx), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
 }
 if( (2*gIdx + 1) < cb.x )
 {
        (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(2*gIdx + 1), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_ldsData)+(2*lIdx + 1), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
    }
}

__attribute__((reqd_work_group_size(128,1,1)))
__kernel
void AddOffsetKernel(__global float4* dst, ulong _wcl_dst_size, __global float4* blockSum, ulong _wcl_blockSum_size, uint4 cb)
{

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,&dst[0], &dst[_wcl_dst_size],&blockSum[0], &blockSum[_wcl_blockSum_size],0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__dst_min, _wcl_allocs->gl.LocalScanKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__src_min, _wcl_allocs->gl.LocalScanKernel__src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, _wcl_allocs->gl.LocalScanKernel__sumBuffer_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__dst_min, _wcl_allocs->gl.AddOffsetKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__blockSum_min, _wcl_allocs->gl.AddOffsetKernel__blockSum_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.TopLevelScanKernel__dst_min, _wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global uint*)0))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

 const u32 blockSize = 128*2;

 int myIdx = get_group_id(0)+1;
 int lIdx = get_local_id(0);

 float4 iBlockSum = (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((blockSum)+(myIdx), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn)));

 int endValue = min((myIdx+1)*(blockSize), cb.x);
 for(int i=myIdx*blockSize+lIdx; i<endValue; i+=get_local_size(0))
 {
  (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(i), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) += iBlockSum;
 }
}

__attribute__((reqd_work_group_size(128,1,1)))
__kernel
void TopLevelScanKernel(__global float4* dst, ulong _wcl_dst_size, uint4 cb)
{

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,&dst[0], &dst[_wcl_dst_size] },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__dst_min, _wcl_allocs->gl.LocalScanKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__src_min, _wcl_allocs->gl.LocalScanKernel__src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, _wcl_allocs->gl.LocalScanKernel__sumBuffer_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__dst_min, _wcl_allocs->gl.AddOffsetKernel__dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.AddOffsetKernel__blockSum_min, _wcl_allocs->gl.AddOffsetKernel__blockSum_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.TopLevelScanKernel__dst_min, _wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global uint*)0))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

 __local float4 ldsData[2048];
 int gIdx = get_global_id(0);
 int lIdx = get_local_id(0);
 int lSize = get_local_size(0);

 for(int i=lIdx; i<cb.z; i+=lSize )
 {
//		ldsData[i] = (i<cb.m_numBlocks)? dst[i]:0;
        if (i<cb.y)
            (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_2_ldsData)+(i), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(i), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn)));
        else
            (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_2_ldsData)+(i), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln))) = 0;
 }

 barrier(CLK_LOCAL_MEM_FENCE);

 float4 sum = ScanExclusiveFloat4(_wcl_allocs, _wcl_locals._wcl_2_ldsData, cb.z, get_local_id(0), get_local_size(0));

 for(int i=lIdx; i<cb.y; i+=lSize )
 {
  (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(i), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float4__Ptr((_wcl_locals._wcl_2_ldsData)+(i), 1, (__local float4 *)_wcl_allocs->ll._wcl_locals_min, (__local float4 *)_wcl_allocs->ll._wcl_locals_max, (__local float4 *)_wcl_allocs->ln)));
 }

 if( gIdx == 0 )
 {
  (*(_wcl_addr_clamp_global_6__u_uglobal__float4__Ptr((dst)+(cb.y), 1, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__dst_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__src_max, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_min, (__global float4 *)_wcl_allocs->gl.LocalScanKernel__sumBuffer_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__dst_max, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_min, (__global float4 *)_wcl_allocs->gl.AddOffsetKernel__blockSum_max, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_min, (__global float4 *)_wcl_allocs->gl.TopLevelScanKernel__dst_max, (__global float4 *)_wcl_allocs->gn))) = sum;
 }

}

/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "PreScanKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumNonPowerOfTwoKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        }
                },
            "PreScanNonPowerOfTwoKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        }
                },
            "UniformAddKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_offset" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        }
                },
            "ParallelCompactKernel" :
                {
                    "CompactOut_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactOut_data_size"
                        },
                    "_wcl_CompactOut_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "CompactIn_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactIn_data_size"
                        },
                    "_wcl_CompactIn_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "ScanResult_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_ScanResult_data_size"
                        },
                    "_wcl_ScanResult_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "numValidData" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_numValidData_size"
                        },
                    "_wcl_numValidData_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        }
                },
            "ParallelCompactIndicesKernel" :
                {
                    "CompactOut_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactOut_data_size"
                        },
                    "_wcl_CompactOut_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "CompactIn_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactIn_data_size"
                        },
                    "_wcl_CompactIn_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "ScanResult_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_ScanResult_data_size"
                        },
                    "_wcl_ScanResult_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "numValidData" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_numValidData_size"
                        },
                    "_wcl_numValidData_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        }
                },
            "ParallelCompactGeneralKernel" :
                {
                    "CompactOut_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactOut_data_size"
                        },
                    "_wcl_CompactOut_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "CompactIn_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactIn_data_size"
                        },
                    "_wcl_CompactIn_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "Bit_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_Bit_data_size"
                        },
                    "_wcl_Bit_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "ScanResult_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_ScanResult_data_size"
                        },
                    "_wcl_ScanResult_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "numValidData" :
                        {
                            "index" : 8,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_numValidData_size"
                        },
                    "_wcl_numValidData_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    uint2 _wcl_global_index;
    uint2 _wcl_local_index;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    __global int *PreScanKernel__output_data_min;
    __global int *PreScanKernel__output_data_max;
    const __global int *PreScanKernel__input_data_min;
    const __global int *PreScanKernel__input_data_max;
    __global int *PreScanStoreSumKernel__output_data_min;
    __global int *PreScanStoreSumKernel__output_data_max;
    const __global int *PreScanStoreSumKernel__input_data_min;
    const __global int *PreScanStoreSumKernel__input_data_max;
    __global int *PreScanStoreSumKernel__partial_sums_min;
    __global int *PreScanStoreSumKernel__partial_sums_max;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__output_data_min;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__output_data_max;
    const __global int *PreScanStoreSumNonPowerOfTwoKernel__input_data_min;
    const __global int *PreScanStoreSumNonPowerOfTwoKernel__input_data_max;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max;
    __global int *PreScanNonPowerOfTwoKernel__output_data_min;
    __global int *PreScanNonPowerOfTwoKernel__output_data_max;
    const __global int *PreScanNonPowerOfTwoKernel__input_data_min;
    const __global int *PreScanNonPowerOfTwoKernel__input_data_max;
    __global int *UniformAddKernel__output_data_min;
    __global int *UniformAddKernel__output_data_max;
    __global int *UniformAddKernel__input_data_min;
    __global int *UniformAddKernel__input_data_max;
    __global int *ParallelCompactKernel__CompactOut_data_min;
    __global int *ParallelCompactKernel__CompactOut_data_max;
    __global int *ParallelCompactKernel__CompactIn_data_min;
    __global int *ParallelCompactKernel__CompactIn_data_max;
    __global int *ParallelCompactKernel__ScanResult_data_min;
    __global int *ParallelCompactKernel__ScanResult_data_max;
    __global int *ParallelCompactKernel__numValidData_min;
    __global int *ParallelCompactKernel__numValidData_max;
    __global int *ParallelCompactIndicesKernel__CompactOut_data_min;
    __global int *ParallelCompactIndicesKernel__CompactOut_data_max;
    __global int *ParallelCompactIndicesKernel__CompactIn_data_min;
    __global int *ParallelCompactIndicesKernel__CompactIn_data_max;
    __global int *ParallelCompactIndicesKernel__ScanResult_data_min;
    __global int *ParallelCompactIndicesKernel__ScanResult_data_max;
    __global int *ParallelCompactIndicesKernel__numValidData_min;
    __global int *ParallelCompactIndicesKernel__numValidData_max;
    __global int *ParallelCompactGeneralKernel__CompactOut_data_min;
    __global int *ParallelCompactGeneralKernel__CompactOut_data_max;
    __global int *ParallelCompactGeneralKernel__CompactIn_data_min;
    __global int *ParallelCompactGeneralKernel__CompactIn_data_max;
    __global int *ParallelCompactGeneralKernel__Bit_data_min;
    __global int *ParallelCompactGeneralKernel__Bit_data_max;
    __global int *ParallelCompactGeneralKernel__ScanResult_data_min;
    __global int *ParallelCompactGeneralKernel__ScanResult_data_max;
    __global int *ParallelCompactGeneralKernel__numValidData_min;
    __global int *ParallelCompactGeneralKernel__numValidData_max;
} _WclGlobalLimits;

typedef struct {
    __local int *PreScanKernel__shared_data_min;
    __local int *PreScanKernel__shared_data_max;
    __local int *PreScanStoreSumKernel__shared_data_min;
    __local int *PreScanStoreSumKernel__shared_data_max;
    __local int *PreScanStoreSumNonPowerOfTwoKernel__shared_data_min;
    __local int *PreScanStoreSumNonPowerOfTwoKernel__shared_data_max;
    __local int *PreScanNonPowerOfTwoKernel__shared_data_min;
    __local int *PreScanNonPowerOfTwoKernel__shared_data_max;
    __local int *UniformAddKernel__shared_data_min;
    __local int *UniformAddKernel__shared_data_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_25__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2, __global int * min3, __global int * max3, __global int * min4, __global int * max4, __global int * min5, __global int * max5, __global int * min6, __global int * max6, __global int * min7, __global int * max7, __global int * min8, __global int * max8, __global int * min9, __global int * max9, __global int * min10, __global int * max10, __global int * min11, __global int * max11, __global int * min12, __global int * max12, __global int * min13, __global int * max13, __global int * min14, __global int * max14, __global int * min15, __global int * max15, __global int * min16, __global int * max16, __global int * min17, __global int * max17, __global int * min18, __global int * max18, __global int * min19, __global int * max19, __global int * min20, __global int * max20, __global int * min21, __global int * max21, __global int * min22, __global int * max22, __global int * min23, __global int * max23, __global int * min24, __global int * max24)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max15)) )
        || ( ((addr) >= (min16)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max16)) )
        || ( ((addr) >= (min17)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max17)) )
        || ( ((addr) >= (min18)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max18)) )
        || ( ((addr) >= (min19)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max19)) )
        || ( ((addr) >= (min20)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max20)) )
        || ( ((addr) >= (min21)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max21)) )
        || ( ((addr) >= (min22)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max22)) )
        || ( ((addr) >= (min23)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max23)) )
        || ( ((addr) >= (min24)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max24)) );
}
__global int *_wcl_addr_clamp_global_25__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2, __global int * min3, __global int * max3, __global int * min4, __global int * max4, __global int * min5, __global int * max5, __global int * min6, __global int * max6, __global int * min7, __global int * max7, __global int * min8, __global int * max8, __global int * min9, __global int * max9, __global int * min10, __global int * max10, __global int * min11, __global int * max11, __global int * min12, __global int * max12, __global int * min13, __global int * max13, __global int * min14, __global int * max14, __global int * min15, __global int * max15, __global int * min16, __global int * max16, __global int * min17, __global int * max17, __global int * min18, __global int * max18, __global int * min19, __global int * max19, __global int * min20, __global int * max20, __global int * min21, __global int * max21, __global int * min22, __global int * max22, __global int * min23, __global int * max23, __global int * min24, __global int * max24, __global int * asnull)
{
     return _wcl_addr_check_global_25__u_uglobal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15, min16, max16, min17, max17, min18, max18, min19, max19, min20, max20, min21, max21, min22, max22, min23, max23, min24, max24) ? addr : asnull;
}

bool _wcl_addr_check_global_25_const___u_uglobal__int__Ptr(const __global int *addr, unsigned size, const __global int * min0, const __global int * max0, const __global int * min1, const __global int * max1, const __global int * min2, const __global int * max2, const __global int * min3, const __global int * max3, const __global int * min4, const __global int * max4, const __global int * min5, const __global int * max5, const __global int * min6, const __global int * max6, const __global int * min7, const __global int * max7, const __global int * min8, const __global int * max8, const __global int * min9, const __global int * max9, const __global int * min10, const __global int * max10, const __global int * min11, const __global int * max11, const __global int * min12, const __global int * max12, const __global int * min13, const __global int * max13, const __global int * min14, const __global int * max14, const __global int * min15, const __global int * max15, const __global int * min16, const __global int * max16, const __global int * min17, const __global int * max17, const __global int * min18, const __global int * max18, const __global int * min19, const __global int * max19, const __global int * min20, const __global int * max20, const __global int * min21, const __global int * max21, const __global int * min22, const __global int * max22, const __global int * min23, const __global int * max23, const __global int * min24, const __global int * max24)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max15)) )
        || ( ((addr) >= (min16)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max16)) )
        || ( ((addr) >= (min17)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max17)) )
        || ( ((addr) >= (min18)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max18)) )
        || ( ((addr) >= (min19)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max19)) )
        || ( ((addr) >= (min20)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max20)) )
        || ( ((addr) >= (min21)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max21)) )
        || ( ((addr) >= (min22)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max22)) )
        || ( ((addr) >= (min23)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max23)) )
        || ( ((addr) >= (min24)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max24)) );
}
const __global int *_wcl_addr_clamp_global_25_const___u_uglobal__int__Ptr(const __global int *addr, unsigned size, const __global int * min0, const __global int * max0, const __global int * min1, const __global int * max1, const __global int * min2, const __global int * max2, const __global int * min3, const __global int * max3, const __global int * min4, const __global int * max4, const __global int * min5, const __global int * max5, const __global int * min6, const __global int * max6, const __global int * min7, const __global int * max7, const __global int * min8, const __global int * max8, const __global int * min9, const __global int * max9, const __global int * min10, const __global int * max10, const __global int * min11, const __global int * max11, const __global int * min12, const __global int * max12, const __global int * min13, const __global int * max13, const __global int * min14, const __global int * max14, const __global int * min15, const __global int * max15, const __global int * min16, const __global int * max16, const __global int * min17, const __global int * max17, const __global int * min18, const __global int * max18, const __global int * min19, const __global int * max19, const __global int * min20, const __global int * max20, const __global int * min21, const __global int * max21, const __global int * min22, const __global int * max22, const __global int * min23, const __global int * max23, const __global int * min24, const __global int * max24, const __global int * asnull)
{
     return _wcl_addr_check_global_25_const___u_uglobal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15, min16, max16, min17, max17, min18, max18, min19, max19, min20, max20, min21, max21, min22, max22, min23, max23, min24, max24) ? addr : asnull;
}

bool _wcl_addr_check_local_5__u_ulocal__int__Ptr(__local int *addr, unsigned size, __local int * min0, __local int * max0, __local int * min1, __local int * max1, __local int * min2, __local int * max2, __local int * min3, __local int * max3, __local int * min4, __local int * max4)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max4)) );
}
__local int *_wcl_addr_clamp_local_5__u_ulocal__int__Ptr(__local int *addr, unsigned size, __local int * min0, __local int * max0, __local int * min1, __local int * max1, __local int * min2, __local int * max2, __local int * min3, __local int * max3, __local int * min4, __local int * max4, __local int * asnull)
{
     return _wcl_addr_check_local_5__u_ulocal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4) ? addr : asnull;
}

bool _wcl_addr_check_local_5_const___u_ulocal__int__Ptr(const __local int *addr, unsigned size, const __local int * min0, const __local int * max0, const __local int * min1, const __local int * max1, const __local int * min2, const __local int * max2, const __local int * min3, const __local int * max3, const __local int * min4, const __local int * max4)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max4)) );
}
const __local int *_wcl_addr_clamp_local_5_const___u_ulocal__int__Ptr(const __local int *addr, unsigned size, const __local int * min0, const __local int * max0, const __local int * min1, const __local int * max1, const __local int * min2, const __local int * max2, const __local int * min3, const __local int * max3, const __local int * min4, const __local int * max4, const __local int * asnull)
{
     return _wcl_addr_check_local_5_const___u_ulocal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
//
// File:       scan_kernel.cl
//
// Abstract:   This example shows how to perform an efficient parallel prefix sum (aka Scan)
//             using OpenCL.  Scan is a common data parallel primitive which can be used for 
//             variety of different operations -- this example uses local memory for storing
//             partial sums and avoids memory bank conflicts on architectures which serialize
//             memory operations that are serviced on the same memory bank by offsetting the
//             loads and stores based on the size of the local group and the number of
//             memory banks (see appropriate macro definition).  As a result, this example
//             requires that the local group size > 1.
//
// Version:    <1.0>
//
// Disclaimer: IMPORTANT:  This Apple software is supplied to you by Apple Inc. ("Apple")
//             in consideration of your agreement to the following terms, and your use,
//             installation, modification or redistribution of this Apple software
//             constitutes acceptance of these terms.  If you do not agree with these
//             terms, please do not use, install, modify or redistribute this Apple
//             software.
//
//             In consideration of your agreement to abide by the following terms, and
//             subject to these terms, Apple grants you a personal, non - exclusive
//             license, under Apple's copyrights in this original Apple software ( the
//             "Apple Software" ), to use, reproduce, modify and redistribute the Apple
//             Software, with or without modifications, in source and / or binary forms;
//             provided that if you redistribute the Apple Software in its entirety and
//             without modifications, you must retain this notice and the following text
//             and disclaimers in all such redistributions of the Apple Software. Neither
//             the name, trademarks, service marks or logos of Apple Inc. may be used to
//             endorse or promote products derived from the Apple Software without specific
//             prior written permission from Apple.  Except as expressly stated in this
//             notice, no other rights or licenses, express or implied, are granted by
//             Apple herein, including but not limited to any patent rights that may be
//             infringed by your derivative works or by other works in which the Apple
//             Software may be incorporated.
//
//             The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO
//             WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
//             WARRANTIES OF NON - INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
//             PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION
//             ALONE OR IN COMBINATION WITH YOUR PRODUCTS.
//
//             IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR
//             CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//             SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//             INTERRUPTION ) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION
//             AND / OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER
//             UNDER THEORY OF CONTRACT, TORT ( INCLUDING NEGLIGENCE ), STRICT LIABILITY OR
//             OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Copyright ( C ) 2008 Apple Inc. All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////////////

uint4
GetAddressMapping(_WclProgramAllocations *_wcl_allocs, int index)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint2 global_index;
    _wcl_allocs->pa._wcl_global_index.x = index + local_id;
    _wcl_allocs->pa._wcl_global_index.y = _wcl_allocs->pa._wcl_global_index.x + group_size;

    uint2 local_index;
    _wcl_allocs->pa._wcl_local_index.x = local_id;
    _wcl_allocs->pa._wcl_local_index.y = local_id + group_size;

    return (uint4)(_wcl_allocs->pa._wcl_global_index.x, _wcl_allocs->pa._wcl_global_index.y, _wcl_allocs->pa._wcl_local_index.x, _wcl_allocs->pa._wcl_local_index.y);
}

void
LoadLocalFromGlobal(_WclProgramAllocations *_wcl_allocs, 
    __local int *shared_data,
    __global const int *input_data,
    const uint4 address_pair,
    const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_25_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (const __global int *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_25_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (const __global int *)_wcl_allocs->gn)));
}

void
LoadLocalFromGlobalNonPowerOfTwo(_WclProgramAllocations *_wcl_allocs, 
    __local int *shared_data,
    __global const int *input_data,
    const uint4 address_pair,
    const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_25_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (const __global int *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (local_index_b < n) ? (*(_wcl_addr_clamp_global_25_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (const __global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (const __global int *)_wcl_allocs->gn))) : 0;

 barrier(CLK_LOCAL_MEM_FENCE);
}

void
StoreLocalToGlobal(_WclProgramAllocations *_wcl_allocs, 
    __global int* output_data,
    __local const int* shared_data,
    const uint4 address_pair,
    const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_5_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_5_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

void
StoreLocalToGlobalNonPowerOfTwo(_WclProgramAllocations *_wcl_allocs, 
    __global int* output_data,
    __local const int* shared_data,
    const uint4 address_pair,
    const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_5_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    if(local_index_b < n)
        (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_5_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
ClearLastElement(_WclProgramAllocations *_wcl_allocs, 
    __local int* shared_data,
    int group_index)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    if (local_id == 0)
    {
        int index = (group_size << 1) - 1;
        index += ((index) >> (4));
        (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = 0;
    }
}

void
ClearLastElementStoreSum(_WclProgramAllocations *_wcl_allocs, 
    __local int* shared_data,
    __global int *partial_sums,
    int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);
    const uint local_id = get_local_id(0);

    if (local_id == 0)
    {
        int index = (group_size << 1) - 1;
        index += ((index) >> (4));
        (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((partial_sums)+(group_index), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
        (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = 0;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

uint
BuildPartialSum(_WclProgramAllocations *_wcl_allocs, 
    __local int *shared_data)
{
    const uint local_id = get_local_id(0);
    const uint group_size = get_local_size(0);
    const uint two = 2;
    uint stride = 1;

    for (uint j = group_size; j > 0; j >>= 1)
    {
        barrier(CLK_LOCAL_MEM_FENCE);

        if (local_id < j)
        {
            int i = mul24(mul24(two, stride), local_id);

            uint local_index_a = i + stride - 1;
            uint local_index_b = local_index_a + stride;

            local_index_a += ((local_index_a) >> (4));
            local_index_b += ((local_index_b) >> (4));

            (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) += (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
        }

        stride *= two;
    }

    return stride;
}

void
ScanRootToLeaves(_WclProgramAllocations *_wcl_allocs, 
    __local int *shared_data,
    uint stride)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);
    const uint two = 2;

    for (uint j = 1; j <= group_size; j *= two)
    {
        stride >>= 1;

        barrier(CLK_LOCAL_MEM_FENCE);

        if (local_id < j)
        {
            int i = mul24(mul24(two, stride), local_id);

            uint local_index_a = i + stride - 1;
            uint local_index_b = local_index_a + stride;

            local_index_a += ((local_index_a) >> (4));
            local_index_b += ((local_index_b) >> (4));

            int t = (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) += t;
        }
    }
}

void
PreScanGroup(_WclProgramAllocations *_wcl_allocs, 
    __local int *shared_data,
    int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);

    int stride = BuildPartialSum(_wcl_allocs, shared_data);
    ClearLastElement(_wcl_allocs, shared_data, (group_index == 0) ? group_id : group_index);
    ScanRootToLeaves(_wcl_allocs, shared_data, stride);
}

void
PreScanGroupStoreSum(_WclProgramAllocations *_wcl_allocs, 
    __global int *partial_sums,
    __local int *shared_data,
    int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);

    int stride = BuildPartialSum(_wcl_allocs, shared_data);
    ClearLastElementStoreSum(_wcl_allocs, shared_data, partial_sums, (group_index == 0) ? group_id : group_index);
    ScanRootToLeaves(_wcl_allocs, shared_data, stride);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void
PreScanKernel(
    __global int *output_data, ulong _wcl_output_data_size,
    __global const int *input_data, ulong _wcl_input_data_size,
    __local int* shared_data, ulong _wcl_shared_data_size,
    const uint group_index,
    const uint base_index,
    const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobal(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobal(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumKernel(
    __global int *output_data, ulong _wcl_output_data_size,
    __global const int *input_data, ulong _wcl_input_data_size,
    __global int *partial_sums, ulong _wcl_partial_sums_size,
    __local int* shared_data, ulong _wcl_shared_data_size,
    const uint group_index,
    const uint base_index,
    const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobal(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobal(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumNonPowerOfTwoKernel(
    __global int *output_data, ulong _wcl_output_data_size,
    __global const int *input_data, ulong _wcl_input_data_size,
    __global int *partial_sums, ulong _wcl_partial_sums_size,
    __local int* shared_data, ulong _wcl_shared_data_size,
    const uint group_index,
    const uint base_index,
    const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwo(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwo(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanNonPowerOfTwoKernel(
    __global int *output_data, ulong _wcl_output_data_size,
    __global const int *input_data, ulong _wcl_input_data_size,
    __local int* shared_data, ulong _wcl_shared_data_size,
    const uint group_index,
    const uint base_index,
    const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwo(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwo(_wcl_allocs, output_data, shared_data, address_pair, n);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void UniformAddKernel(
    __global int *output_data, ulong _wcl_output_data_size,
    __global int *input_data, ulong _wcl_input_data_size,
    __local int *shared_data, ulong _wcl_shared_data_size,
    const uint group_offset,
    const uint base_index,
    const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    if (local_id == 0)
        (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((input_data)+(group_id + group_offset), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));

    barrier(CLK_LOCAL_MEM_FENCE);

    uint address = mul24(group_id, (group_size << 1)) + base_index + local_id;

    (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(address), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) += (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
 if( (local_id + group_size) < n)
  (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((output_data)+(address + group_size), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) += (*(_wcl_addr_clamp_local_5__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void ParallelCompactKernel( __global int *CompactOut_data, ulong _wcl_CompactOut_data_size, // output
                              __global int *CompactIn_data, ulong _wcl_CompactIn_data_size,
                              __global int *ScanResult_data, ulong _wcl_ScanResult_data_size,
                              __global int *numValidData, ulong _wcl_numValidData_size, // output
                              const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&CompactOut_data[0], &CompactOut_data[_wcl_CompactOut_data_size],&CompactIn_data[0], &CompactIn_data[_wcl_CompactIn_data_size],&ScanResult_data[0], &ScanResult_data[_wcl_ScanResult_data_size],&numValidData[0], &numValidData[_wcl_numValidData_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint i = get_global_id(0);

    if(n==0 && i==0)
  (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = 0;
 else if (i<n)
 {
  int data = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactIn_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  uint addr = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((ScanResult_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  if (data>-1)
  {
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactOut_data)+(addr), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = data;
   addr++;
  }
  if (i==n-1)
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = addr;
 }
}

__kernel void ParallelCompactIndicesKernel( __global int *CompactOut_data, ulong _wcl_CompactOut_data_size, // output
            __global int *CompactIn_data, ulong _wcl_CompactIn_data_size,
            __global int *ScanResult_data, ulong _wcl_ScanResult_data_size,
            __global int *numValidData, ulong _wcl_numValidData_size, // output
            const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&CompactOut_data[0], &CompactOut_data[_wcl_CompactOut_data_size],&CompactIn_data[0], &CompactIn_data[_wcl_CompactIn_data_size],&ScanResult_data[0], &ScanResult_data[_wcl_ScanResult_data_size],&numValidData[0], &numValidData[_wcl_numValidData_size],0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint i = get_global_id(0);

    if(n==0 && i==0)
  (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = 0;
 else if (i<n)
 {
  int data = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactIn_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  uint addr = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((ScanResult_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  if (data>0)
  {
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactOut_data)+(addr), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = i;
   addr++;
  }
  if (i==n-1)
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = addr;
 }
}

__kernel void ParallelCompactGeneralKernel( __global int *CompactOut_data, ulong _wcl_CompactOut_data_size, // output
            __global int *CompactIn_data, ulong _wcl_CompactIn_data_size,
            __global int *Bit_data, ulong _wcl_Bit_data_size,
            __global int *ScanResult_data, ulong _wcl_ScanResult_data_size,
            __global int *numValidData, ulong _wcl_numValidData_size, // output
            const uint n)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&CompactOut_data[0], &CompactOut_data[_wcl_CompactOut_data_size],&CompactIn_data[0], &CompactIn_data[_wcl_CompactIn_data_size],&Bit_data[0], &Bit_data[_wcl_Bit_data_size],&ScanResult_data[0], &ScanResult_data[_wcl_ScanResult_data_size],&numValidData[0], &numValidData[_wcl_numValidData_size] },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, _wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global uint*)0)))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint i = get_global_id(0);

    if(n==0 && i==0)
  (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = 0;
 else if (i<n)
 {
  int data = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactIn_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  int bit = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((Bit_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  uint addr = (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((ScanResult_data)+(i), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn)));
  if (bit>0)
  {
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((CompactOut_data)+(addr), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = data;
   addr++;
  }
  if (i==n-1)
   (*(_wcl_addr_clamp_global_25__u_uglobal__int__Ptr((numValidData), 1, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactIndicesKernel__numValidData_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__Bit_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_min, (__global int *)_wcl_allocs->gl.ParallelCompactGeneralKernel__numValidData_max, (__global int *)_wcl_allocs->gn))) = addr;
 }
}

/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "PreScanKernelFirstLevel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "PreScanKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumFirstLevelKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumNonPowerOfTwoFirstLevelKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "PreScanStoreSumNonPowerOfTwoKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "partial_sums" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_partial_sums_size"
                        },
                    "_wcl_partial_sums_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "PreScanNonPowerOfTwoKernelFirstLevel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "PreScanNonPowerOfTwoKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_index" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "UniformAddKernel" :
                {
                    "output_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_data_size"
                        },
                    "_wcl_output_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_data_size"
                        },
                    "_wcl_input_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "shared_data" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_shared_data_size"
                        },
                    "_wcl_shared_data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "group_offset" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        },
                    "base_index" :
                        {
                            "index" : 7,
                            "type" : "uint"
                        },
                    "n" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "addr_offset" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "ParallelCompact" :
                {
                    "CompactIn_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactIn_data_size"
                        },
                    "_wcl_CompactIn_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "CompactOut_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactOut_data_size"
                        },
                    "_wcl_CompactOut_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "numUsefulNodes" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_numUsefulNodes_size"
                        },
                    "_wcl_numUsefulNodes_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "ScanResult_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_ScanResult_data_size"
                        },
                    "_wcl_ScanResult_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "LevelLength_data" :
                        {
                            "index" : 8,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_LevelLength_data_size"
                        },
                    "_wcl_LevelLength_data_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "max_level_length" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        }
                },
            "ParallelCompactFinal" :
                {
                    "CompactIn_data" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactIn_data_size"
                        },
                    "_wcl_CompactIn_data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "CompactOut_data" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_CompactOut_data_size"
                        },
                    "_wcl_CompactOut_data_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "numUsefulNodes" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_numUsefulNodes_size"
                        },
                    "_wcl_numUsefulNodes_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "ScanResult_data" :
                        {
                            "index" : 6,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_ScanResult_data_size"
                        },
                    "_wcl_ScanResult_data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "LevelLength_data" :
                        {
                            "index" : 8,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_LevelLength_data_size"
                        },
                    "_wcl_LevelLength_data_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "max_level_length" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    uint2 _wcl_global_index;
    uint2 _wcl_local_index;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    __global int *PreScanKernelFirstLevel__output_data_min;
    __global int *PreScanKernelFirstLevel__output_data_max;
    const __global int *PreScanKernelFirstLevel__input_data_min;
    const __global int *PreScanKernelFirstLevel__input_data_max;
    __global int *PreScanKernel__output_data_min;
    __global int *PreScanKernel__output_data_max;
    const __global int *PreScanKernel__input_data_min;
    const __global int *PreScanKernel__input_data_max;
    __global int *PreScanStoreSumFirstLevelKernel__output_data_min;
    __global int *PreScanStoreSumFirstLevelKernel__output_data_max;
    const __global int *PreScanStoreSumFirstLevelKernel__input_data_min;
    const __global int *PreScanStoreSumFirstLevelKernel__input_data_max;
    __global int *PreScanStoreSumFirstLevelKernel__partial_sums_min;
    __global int *PreScanStoreSumFirstLevelKernel__partial_sums_max;
    __global int *PreScanStoreSumKernel__output_data_min;
    __global int *PreScanStoreSumKernel__output_data_max;
    const __global int *PreScanStoreSumKernel__input_data_min;
    const __global int *PreScanStoreSumKernel__input_data_max;
    __global int *PreScanStoreSumKernel__partial_sums_min;
    __global int *PreScanStoreSumKernel__partial_sums_max;
    __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min;
    __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max;
    const __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min;
    const __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max;
    __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min;
    __global int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__output_data_min;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__output_data_max;
    const __global int *PreScanStoreSumNonPowerOfTwoKernel__input_data_min;
    const __global int *PreScanStoreSumNonPowerOfTwoKernel__input_data_max;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min;
    __global int *PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max;
    __global int *PreScanNonPowerOfTwoKernelFirstLevel__output_data_min;
    __global int *PreScanNonPowerOfTwoKernelFirstLevel__output_data_max;
    const __global int *PreScanNonPowerOfTwoKernelFirstLevel__input_data_min;
    const __global int *PreScanNonPowerOfTwoKernelFirstLevel__input_data_max;
    __global int *PreScanNonPowerOfTwoKernel__output_data_min;
    __global int *PreScanNonPowerOfTwoKernel__output_data_max;
    const __global int *PreScanNonPowerOfTwoKernel__input_data_min;
    const __global int *PreScanNonPowerOfTwoKernel__input_data_max;
    __global int *UniformAddKernel__output_data_min;
    __global int *UniformAddKernel__output_data_max;
    __global int *UniformAddKernel__input_data_min;
    __global int *UniformAddKernel__input_data_max;
    __global int *ParallelCompact__CompactIn_data_min;
    __global int *ParallelCompact__CompactIn_data_max;
    __global int *ParallelCompact__CompactOut_data_min;
    __global int *ParallelCompact__CompactOut_data_max;
    __global int *ParallelCompact__numUsefulNodes_min;
    __global int *ParallelCompact__numUsefulNodes_max;
    __global int *ParallelCompact__ScanResult_data_min;
    __global int *ParallelCompact__ScanResult_data_max;
    __global uint *ParallelCompact__LevelLength_data_min;
    __global uint *ParallelCompact__LevelLength_data_max;
    __global int *ParallelCompactFinal__CompactIn_data_min;
    __global int *ParallelCompactFinal__CompactIn_data_max;
    __global int *ParallelCompactFinal__CompactOut_data_min;
    __global int *ParallelCompactFinal__CompactOut_data_max;
    __global int *ParallelCompactFinal__numUsefulNodes_min;
    __global int *ParallelCompactFinal__numUsefulNodes_max;
    __global int *ParallelCompactFinal__ScanResult_data_min;
    __global int *ParallelCompactFinal__ScanResult_data_max;
    __global uint *ParallelCompactFinal__LevelLength_data_min;
    __global uint *ParallelCompactFinal__LevelLength_data_max;
} _WclGlobalLimits;

typedef struct {
    __local int *PreScanKernelFirstLevel__shared_data_min;
    __local int *PreScanKernelFirstLevel__shared_data_max;
    __local int *PreScanKernel__shared_data_min;
    __local int *PreScanKernel__shared_data_max;
    __local int *PreScanStoreSumFirstLevelKernel__shared_data_min;
    __local int *PreScanStoreSumFirstLevelKernel__shared_data_max;
    __local int *PreScanStoreSumKernel__shared_data_min;
    __local int *PreScanStoreSumKernel__shared_data_max;
    __local int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min;
    __local int *PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max;
    __local int *PreScanStoreSumNonPowerOfTwoKernel__shared_data_min;
    __local int *PreScanStoreSumNonPowerOfTwoKernel__shared_data_max;
    __local int *PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min;
    __local int *PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max;
    __local int *PreScanNonPowerOfTwoKernel__shared_data_min;
    __local int *PreScanNonPowerOfTwoKernel__shared_data_max;
    __local int *UniformAddKernel__shared_data_min;
    __local int *UniformAddKernel__shared_data_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_32__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2, __global int * min3, __global int * max3, __global int * min4, __global int * max4, __global int * min5, __global int * max5, __global int * min6, __global int * max6, __global int * min7, __global int * max7, __global int * min8, __global int * max8, __global int * min9, __global int * max9, __global int * min10, __global int * max10, __global int * min11, __global int * max11, __global int * min12, __global int * max12, __global int * min13, __global int * max13, __global int * min14, __global int * max14, __global int * min15, __global int * max15, __global int * min16, __global int * max16, __global int * min17, __global int * max17, __global int * min18, __global int * max18, __global int * min19, __global int * max19, __global int * min20, __global int * max20, __global int * min21, __global int * max21, __global int * min22, __global int * max22, __global int * min23, __global int * max23, __global int * min24, __global int * max24, __global int * min25, __global int * max25, __global int * min26, __global int * max26, __global int * min27, __global int * max27, __global int * min28, __global int * max28, __global int * min29, __global int * max29, __global int * min30, __global int * max30, __global int * min31, __global int * max31)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max15)) )
        || ( ((addr) >= (min16)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max16)) )
        || ( ((addr) >= (min17)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max17)) )
        || ( ((addr) >= (min18)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max18)) )
        || ( ((addr) >= (min19)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max19)) )
        || ( ((addr) >= (min20)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max20)) )
        || ( ((addr) >= (min21)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max21)) )
        || ( ((addr) >= (min22)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max22)) )
        || ( ((addr) >= (min23)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max23)) )
        || ( ((addr) >= (min24)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max24)) )
        || ( ((addr) >= (min25)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max25)) )
        || ( ((addr) >= (min26)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max26)) )
        || ( ((addr) >= (min27)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max27)) )
        || ( ((addr) >= (min28)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max28)) )
        || ( ((addr) >= (min29)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max29)) )
        || ( ((addr) >= (min30)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max30)) )
        || ( ((addr) >= (min31)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max31)) );
}
__global int *_wcl_addr_clamp_global_32__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2, __global int * min3, __global int * max3, __global int * min4, __global int * max4, __global int * min5, __global int * max5, __global int * min6, __global int * max6, __global int * min7, __global int * max7, __global int * min8, __global int * max8, __global int * min9, __global int * max9, __global int * min10, __global int * max10, __global int * min11, __global int * max11, __global int * min12, __global int * max12, __global int * min13, __global int * max13, __global int * min14, __global int * max14, __global int * min15, __global int * max15, __global int * min16, __global int * max16, __global int * min17, __global int * max17, __global int * min18, __global int * max18, __global int * min19, __global int * max19, __global int * min20, __global int * max20, __global int * min21, __global int * max21, __global int * min22, __global int * max22, __global int * min23, __global int * max23, __global int * min24, __global int * max24, __global int * min25, __global int * max25, __global int * min26, __global int * max26, __global int * min27, __global int * max27, __global int * min28, __global int * max28, __global int * min29, __global int * max29, __global int * min30, __global int * max30, __global int * min31, __global int * max31, __global int * asnull)
{
     return _wcl_addr_check_global_32__u_uglobal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15, min16, max16, min17, max17, min18, max18, min19, max19, min20, max20, min21, max21, min22, max22, min23, max23, min24, max24, min25, max25, min26, max26, min27, max27, min28, max28, min29, max29, min30, max30, min31, max31) ? addr : asnull;
}

bool _wcl_addr_check_global_32__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15, __global uint * min16, __global uint * max16, __global uint * min17, __global uint * max17, __global uint * min18, __global uint * max18, __global uint * min19, __global uint * max19, __global uint * min20, __global uint * max20, __global uint * min21, __global uint * max21, __global uint * min22, __global uint * max22, __global uint * min23, __global uint * max23, __global uint * min24, __global uint * max24, __global uint * min25, __global uint * max25, __global uint * min26, __global uint * max26, __global uint * min27, __global uint * max27, __global uint * min28, __global uint * max28, __global uint * min29, __global uint * max29, __global uint * min30, __global uint * max30, __global uint * min31, __global uint * max31)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max15)) )
        || ( ((addr) >= (min16)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max16)) )
        || ( ((addr) >= (min17)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max17)) )
        || ( ((addr) >= (min18)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max18)) )
        || ( ((addr) >= (min19)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max19)) )
        || ( ((addr) >= (min20)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max20)) )
        || ( ((addr) >= (min21)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max21)) )
        || ( ((addr) >= (min22)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max22)) )
        || ( ((addr) >= (min23)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max23)) )
        || ( ((addr) >= (min24)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max24)) )
        || ( ((addr) >= (min25)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max25)) )
        || ( ((addr) >= (min26)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max26)) )
        || ( ((addr) >= (min27)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max27)) )
        || ( ((addr) >= (min28)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max28)) )
        || ( ((addr) >= (min29)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max29)) )
        || ( ((addr) >= (min30)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max30)) )
        || ( ((addr) >= (min31)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max31)) );
}
__global uint *_wcl_addr_clamp_global_32__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15, __global uint * min16, __global uint * max16, __global uint * min17, __global uint * max17, __global uint * min18, __global uint * max18, __global uint * min19, __global uint * max19, __global uint * min20, __global uint * max20, __global uint * min21, __global uint * max21, __global uint * min22, __global uint * max22, __global uint * min23, __global uint * max23, __global uint * min24, __global uint * max24, __global uint * min25, __global uint * max25, __global uint * min26, __global uint * max26, __global uint * min27, __global uint * max27, __global uint * min28, __global uint * max28, __global uint * min29, __global uint * max29, __global uint * min30, __global uint * max30, __global uint * min31, __global uint * max31, __global uint * asnull)
{
     return _wcl_addr_check_global_32__u_uglobal__uint__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15, min16, max16, min17, max17, min18, max18, min19, max19, min20, max20, min21, max21, min22, max22, min23, max23, min24, max24, min25, max25, min26, max26, min27, max27, min28, max28, min29, max29, min30, max30, min31, max31) ? addr : asnull;
}

bool _wcl_addr_check_global_32_const___u_uglobal__int__Ptr(const __global int *addr, unsigned size, const __global int * min0, const __global int * max0, const __global int * min1, const __global int * max1, const __global int * min2, const __global int * max2, const __global int * min3, const __global int * max3, const __global int * min4, const __global int * max4, const __global int * min5, const __global int * max5, const __global int * min6, const __global int * max6, const __global int * min7, const __global int * max7, const __global int * min8, const __global int * max8, const __global int * min9, const __global int * max9, const __global int * min10, const __global int * max10, const __global int * min11, const __global int * max11, const __global int * min12, const __global int * max12, const __global int * min13, const __global int * max13, const __global int * min14, const __global int * max14, const __global int * min15, const __global int * max15, const __global int * min16, const __global int * max16, const __global int * min17, const __global int * max17, const __global int * min18, const __global int * max18, const __global int * min19, const __global int * max19, const __global int * min20, const __global int * max20, const __global int * min21, const __global int * max21, const __global int * min22, const __global int * max22, const __global int * min23, const __global int * max23, const __global int * min24, const __global int * max24, const __global int * min25, const __global int * max25, const __global int * min26, const __global int * max26, const __global int * min27, const __global int * max27, const __global int * min28, const __global int * max28, const __global int * min29, const __global int * max29, const __global int * min30, const __global int * max30, const __global int * min31, const __global int * max31)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max15)) )
        || ( ((addr) >= (min16)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max16)) )
        || ( ((addr) >= (min17)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max17)) )
        || ( ((addr) >= (min18)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max18)) )
        || ( ((addr) >= (min19)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max19)) )
        || ( ((addr) >= (min20)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max20)) )
        || ( ((addr) >= (min21)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max21)) )
        || ( ((addr) >= (min22)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max22)) )
        || ( ((addr) >= (min23)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max23)) )
        || ( ((addr) >= (min24)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max24)) )
        || ( ((addr) >= (min25)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max25)) )
        || ( ((addr) >= (min26)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max26)) )
        || ( ((addr) >= (min27)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max27)) )
        || ( ((addr) >= (min28)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max28)) )
        || ( ((addr) >= (min29)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max29)) )
        || ( ((addr) >= (min30)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max30)) )
        || ( ((addr) >= (min31)) && ((addr + size - 1) <= _WCL_LAST(const __global int *, max31)) );
}
const __global int *_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr(const __global int *addr, unsigned size, const __global int * min0, const __global int * max0, const __global int * min1, const __global int * max1, const __global int * min2, const __global int * max2, const __global int * min3, const __global int * max3, const __global int * min4, const __global int * max4, const __global int * min5, const __global int * max5, const __global int * min6, const __global int * max6, const __global int * min7, const __global int * max7, const __global int * min8, const __global int * max8, const __global int * min9, const __global int * max9, const __global int * min10, const __global int * max10, const __global int * min11, const __global int * max11, const __global int * min12, const __global int * max12, const __global int * min13, const __global int * max13, const __global int * min14, const __global int * max14, const __global int * min15, const __global int * max15, const __global int * min16, const __global int * max16, const __global int * min17, const __global int * max17, const __global int * min18, const __global int * max18, const __global int * min19, const __global int * max19, const __global int * min20, const __global int * max20, const __global int * min21, const __global int * max21, const __global int * min22, const __global int * max22, const __global int * min23, const __global int * max23, const __global int * min24, const __global int * max24, const __global int * min25, const __global int * max25, const __global int * min26, const __global int * max26, const __global int * min27, const __global int * max27, const __global int * min28, const __global int * max28, const __global int * min29, const __global int * max29, const __global int * min30, const __global int * max30, const __global int * min31, const __global int * max31, const __global int * asnull)
{
     return _wcl_addr_check_global_32_const___u_uglobal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15, min16, max16, min17, max17, min18, max18, min19, max19, min20, max20, min21, max21, min22, max22, min23, max23, min24, max24, min25, max25, min26, max26, min27, max27, min28, max28, min29, max29, min30, max30, min31, max31) ? addr : asnull;
}

bool _wcl_addr_check_local_9__u_ulocal__int__Ptr(__local int *addr, unsigned size, __local int * min0, __local int * max0, __local int * min1, __local int * max1, __local int * min2, __local int * max2, __local int * min3, __local int * max3, __local int * min4, __local int * max4, __local int * min5, __local int * max5, __local int * min6, __local int * max6, __local int * min7, __local int * max7, __local int * min8, __local int * max8)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__local int *, max8)) );
}
__local int *_wcl_addr_clamp_local_9__u_ulocal__int__Ptr(__local int *addr, unsigned size, __local int * min0, __local int * max0, __local int * min1, __local int * max1, __local int * min2, __local int * max2, __local int * min3, __local int * max3, __local int * min4, __local int * max4, __local int * min5, __local int * max5, __local int * min6, __local int * max6, __local int * min7, __local int * max7, __local int * min8, __local int * max8, __local int * asnull)
{
     return _wcl_addr_check_local_9__u_ulocal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8) ? addr : asnull;
}

bool _wcl_addr_check_local_9_const___u_ulocal__int__Ptr(const __local int *addr, unsigned size, const __local int * min0, const __local int * max0, const __local int * min1, const __local int * max1, const __local int * min2, const __local int * max2, const __local int * min3, const __local int * max3, const __local int * min4, const __local int * max4, const __local int * min5, const __local int * max5, const __local int * min6, const __local int * max6, const __local int * min7, const __local int * max7, const __local int * min8, const __local int * max8)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(const __local int *, max8)) );
}
const __local int *_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr(const __local int *addr, unsigned size, const __local int * min0, const __local int * max0, const __local int * min1, const __local int * max1, const __local int * min2, const __local int * max2, const __local int * min3, const __local int * max3, const __local int * min4, const __local int * max4, const __local int * min5, const __local int * max5, const __local int * min6, const __local int * max6, const __local int * min7, const __local int * max7, const __local int * min8, const __local int * max8, const __local int * asnull)
{
     return _wcl_addr_check_local_9_const___u_ulocal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
//
// File:       scan_kernel.cl
//
// Abstract:   This example shows how to perform an efficient parallel prefix sum (aka Scan)
//             using OpenCL.  Scan is a common data parallel primitive which can be used for 
//             variety of different operations -- this example uses local memory for storing
//             partial sums and avoids memory bank conflicts on architectures which serialize
//             memory operations that are serviced on the same memory bank by offsetting the
//             loads and stores based on the size of the local group and the number of
//             memory banks (see appropriate macro definition).  As a result, this example
//             requires that the local group size > 1.
//
// Version:    <1.0>
//
// Disclaimer: IMPORTANT:  This Apple software is supplied to you by Apple Inc. ("Apple")
//             in consideration of your agreement to the following terms, and your use,
//             installation, modification or redistribution of this Apple software
//             constitutes acceptance of these terms.  If you do not agree with these
//             terms, please do not use, install, modify or redistribute this Apple
//             software.
//
//             In consideration of your agreement to abide by the following terms, and
//             subject to these terms, Apple grants you a personal, non - exclusive
//             license, under Apple's copyrights in this original Apple software ( the
//             "Apple Software" ), to use, reproduce, modify and redistribute the Apple
//             Software, with or without modifications, in source and / or binary forms;
//             provided that if you redistribute the Apple Software in its entirety and
//             without modifications, you must retain this notice and the following text
//             and disclaimers in all such redistributions of the Apple Software. Neither
//             the name, trademarks, service marks or logos of Apple Inc. may be used to
//             endorse or promote products derived from the Apple Software without specific
//             prior written permission from Apple.  Except as expressly stated in this
//             notice, no other rights or licenses, express or implied, are granted by
//             Apple herein, including but not limited to any patent rights that may be
//             infringed by your derivative works or by other works in which the Apple
//             Software may be incorporated.
//
//             The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO
//             WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
//             WARRANTIES OF NON - INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
//             PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION
//             ALONE OR IN COMBINATION WITH YOUR PRODUCTS.
//
//             IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR
//             CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//             SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//             INTERRUPTION ) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION
//             AND / OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER
//             UNDER THEORY OF CONTRACT, TORT ( INCLUDING NEGLIGENCE ), STRICT LIABILITY OR
//             OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Copyright ( C ) 2008 Apple Inc. All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////////////

uint4
GetAddressMapping(_WclProgramAllocations *_wcl_allocs, int index)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint2 global_index;
    _wcl_allocs->pa._wcl_global_index.x = index + local_id;
    _wcl_allocs->pa._wcl_global_index.y = _wcl_allocs->pa._wcl_global_index.x + group_size;

    uint2 local_index;
    _wcl_allocs->pa._wcl_local_index.x = local_id;
    _wcl_allocs->pa._wcl_local_index.y = local_id + group_size;

    return (uint4)(_wcl_allocs->pa._wcl_global_index.x, _wcl_allocs->pa._wcl_global_index.y, _wcl_allocs->pa._wcl_local_index.x, _wcl_allocs->pa._wcl_local_index.y);
}

void
LoadLocalFromGlobal(_WclProgramAllocations *_wcl_allocs, 
                    __local int *shared_data,
                    __global const int *input_data,
                    const uint4 address_pair,
                    const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));
}

void
LoadLocalFromGlobalFirstLevel(_WclProgramAllocations *_wcl_allocs, 
                              __local int *shared_data,
                              __global const int *input_data,
                              const uint4 address_pair,
                              const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    int input_data_a = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));
    int input_data_b = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));

 (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = input_data_a>-1 ? 1 : 0;
    (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = input_data_b>-1 ? 1 : 0;
}

void
LoadLocalFromGlobalNonPowerOfTwo(_WclProgramAllocations *_wcl_allocs, 
                                 __local int *shared_data,
                                 __global const int *input_data,
                                 const uint4 address_pair,
                                 const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (local_index_b < n) ? (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn))) : 0;

 barrier(CLK_LOCAL_MEM_FENCE);
}

void
LoadLocalFromGlobalNonPowerOfTwoFirstLevel(_WclProgramAllocations *_wcl_allocs, 
                                           __local int *shared_data,
                                           __global const int *input_data,
                                           const uint4 address_pair,
                                           const uint n)
{
    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    int input_data_a = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_a), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));

 (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = input_data_a>-1 ? 1 : 0;
 if (local_index_b<n)
 {
     int input_data_b = (*(_wcl_addr_clamp_global_32_const___u_uglobal__int__Ptr((input_data)+(global_index_b), 1, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (const __global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (const __global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (const __global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (const __global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (const __global int *)_wcl_allocs->gn)));
  (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = input_data_b>-1 ? 1 : 0;
 }
 else
  (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = 0;

 barrier(CLK_LOCAL_MEM_FENCE);
}

void
StoreLocalToGlobal(_WclProgramAllocations *_wcl_allocs, 
                   __global int* output_data,
                   __local const int* shared_data,
                   const uint4 address_pair,
                   const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

void
StoreLocalToGlobalFirstLevel(_WclProgramAllocations *_wcl_allocs, 
                             __global int* output_data,
                             __local const int* shared_data,
                             const uint4 address_pair,
                             const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

void
StoreLocalToGlobalNonPowerOfTwo(_WclProgramAllocations *_wcl_allocs, 
                                __global int* output_data,
                                __local const int* shared_data,
                                const uint4 address_pair,
                                const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    if(local_index_b < n)
        (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

void
StoreLocalToGlobalNonPowerOfTwoFirstLevel(_WclProgramAllocations *_wcl_allocs, 
                                          __global int* output_data,
                                          __local const int* shared_data,
                                          const uint4 address_pair,
                                          const uint n)
{
    barrier(CLK_LOCAL_MEM_FENCE);

    const uint global_index_a = address_pair.x;
    const uint global_index_b = address_pair.y;

    const uint local_index_a = address_pair.z;
    const uint local_index_b = address_pair.w;

    const uint bank_offset_a = ((local_index_a) >> (4));
    const uint bank_offset_b = ((local_index_b) >> (4));

    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_a), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_a + bank_offset_a), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
    if(local_index_b < n)
        (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(global_index_b), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9_const___u_ulocal__int__Ptr((shared_data)+(local_index_b + bank_offset_b), 1, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (const __local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (const __local int *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void
ClearLastElement(_WclProgramAllocations *_wcl_allocs, 
                 __local int* shared_data,
                 int group_index)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    if (local_id == 0)
    {
        int index = (group_size << 1) - 1;
        index += ((index) >> (4));
        (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = 0;
    }
}

void
ClearLastElementStoreSum(_WclProgramAllocations *_wcl_allocs, 
                         __local int* shared_data,
                         __global int *partial_sums,
                         int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);
    const uint local_id = get_local_id(0);

    if (local_id == 0)
    {
        int index = (group_size << 1) - 1;
        index += ((index) >> (4));
        (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((partial_sums)+(group_index), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
        (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(index), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = 0;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

uint
BuildPartialSum(_WclProgramAllocations *_wcl_allocs, 
                __local int *shared_data)
{
    const uint local_id = get_local_id(0);
    const uint group_size = get_local_size(0);
    const uint two = 2;
    uint stride = 1;

    for (uint j = group_size; j > 0; j >>= 1)
    {
        barrier(CLK_LOCAL_MEM_FENCE);

        if (local_id < j)
        {
            int i = mul24(mul24(two, stride), local_id);

            uint local_index_a = i + stride - 1;
            uint local_index_b = local_index_a + stride;

            local_index_a += ((local_index_a) >> (4));
            local_index_b += ((local_index_b) >> (4));

            (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) += (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
        }

        stride *= two;
    }

    return stride;
}

void
ScanRootToLeaves(_WclProgramAllocations *_wcl_allocs, 
                 __local int *shared_data,
                 uint stride)
{
    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);
    const uint two = 2;

    for (uint j = 1; j <= group_size; j *= two)
    {
        stride >>= 1;

        barrier(CLK_LOCAL_MEM_FENCE);

        if (local_id < j)
        {
            int i = mul24(mul24(two, stride), local_id);

            uint local_index_a = i + stride - 1;
            uint local_index_b = local_index_a + stride;

            local_index_a += ((local_index_a) >> (4));
            local_index_b += ((local_index_b) >> (4));

            int t = (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_a), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
            (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(local_index_b), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) += t;
        }
    }
}

void
PreScanGroup(_WclProgramAllocations *_wcl_allocs, 
             __local int *shared_data,
             int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);

    int stride = BuildPartialSum(_wcl_allocs, shared_data);
    ClearLastElement(_wcl_allocs, shared_data, (group_index == 0) ? group_id : group_index);
    ScanRootToLeaves(_wcl_allocs, shared_data, stride);
}

void
PreScanGroupStoreSum(_WclProgramAllocations *_wcl_allocs, 
                     __global int *partial_sums,
                     __local int *shared_data,
                     int group_index)
{
    const uint group_id = get_global_id(0) / get_local_size(0);

    int stride = BuildPartialSum(_wcl_allocs, shared_data);
    ClearLastElementStoreSum(_wcl_allocs, shared_data, partial_sums, (group_index == 0) ? group_id : group_index);
    ScanRootToLeaves(_wcl_allocs, shared_data, stride);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void
PreScanKernelFirstLevel(
                        __global int *output_data, ulong _wcl_output_data_size,
                        __global const int *input_data, ulong _wcl_input_data_size,
                        __local int* shared_data, ulong _wcl_shared_data_size,
                        const uint group_index,
                        const uint base_index,
                        const uint n,
                        const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalFirstLevel(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobalFirstLevel(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanKernel(
              __global int *output_data, ulong _wcl_output_data_size,
              __global const int *input_data, ulong _wcl_input_data_size,
              __local int* shared_data, ulong _wcl_shared_data_size,
              const uint group_index,
              const uint base_index,
              const uint n,
              const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobal(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobal(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumFirstLevelKernel(
                                __global int *output_data, ulong _wcl_output_data_size,
                                __global const int *input_data, ulong _wcl_input_data_size,
                                __global int *partial_sums, ulong _wcl_partial_sums_size,
                                __local int* shared_data, ulong _wcl_shared_data_size,
                                const uint group_index,
                                const uint base_index,
                                const uint n,
                                const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalFirstLevel(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobalFirstLevel(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumKernel(
                      __global int *output_data, ulong _wcl_output_data_size,
                      __global const int *input_data, ulong _wcl_input_data_size,
                      __global int *partial_sums, ulong _wcl_partial_sums_size,
                      __local int* shared_data, ulong _wcl_shared_data_size,
                      const uint group_index,
                      const uint base_index,
                      const uint n,
                      const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobal(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobal(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumNonPowerOfTwoFirstLevelKernel(
                                             __global int *output_data, ulong _wcl_output_data_size,
                                             __global const int *input_data, ulong _wcl_input_data_size,
                                             __global int *partial_sums, ulong _wcl_partial_sums_size,
                                             __local int* shared_data, ulong _wcl_shared_data_size,
                                             const uint group_index,
                                             const uint base_index,
                                             const uint n,
                                             const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwoFirstLevel(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwoFirstLevel(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanStoreSumNonPowerOfTwoKernel(
                                   __global int *output_data, ulong _wcl_output_data_size,
                                   __global const int *input_data, ulong _wcl_input_data_size,
                                   __global int *partial_sums, ulong _wcl_partial_sums_size,
                                   __local int* shared_data, ulong _wcl_shared_data_size,
                                   const uint group_index,
                                   const uint base_index,
                                   const uint n,
                                   const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],&partial_sums[0], &partial_sums[_wcl_partial_sums_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwo(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroupStoreSum(_wcl_allocs, partial_sums, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwo(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanNonPowerOfTwoKernelFirstLevel(
                                     __global int *output_data, ulong _wcl_output_data_size,
                                     __global const int *input_data, ulong _wcl_input_data_size,
                                     __local int* shared_data, ulong _wcl_shared_data_size,
                                     const uint group_index,
                                     const uint base_index,
                                     const uint n,
                                     const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwoFirstLevel(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwoFirstLevel(_wcl_allocs, output_data, shared_data, address_pair, n);
}

__kernel void
PreScanNonPowerOfTwoKernel(
                           __global int *output_data, ulong _wcl_output_data_size,
                           __global const int *input_data, ulong _wcl_input_data_size,
                           __local int* shared_data, ulong _wcl_shared_data_size,
                           const uint group_index,
                           const uint base_index,
                           const uint n,
                           const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size],0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    uint local_index = (base_index == 0) ? mul24(group_id, (group_size << 1)) : base_index;
 local_index += addr_offset;
    uint4 address_pair = GetAddressMapping(_wcl_allocs, local_index);

    LoadLocalFromGlobalNonPowerOfTwo(_wcl_allocs, shared_data, input_data, address_pair, n);
    PreScanGroup(_wcl_allocs, shared_data, group_index);
    StoreLocalToGlobalNonPowerOfTwo(_wcl_allocs, output_data, shared_data, address_pair, n);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void UniformAddKernel(
                               __global int *output_data, ulong _wcl_output_data_size,
                               __global int *input_data, ulong _wcl_input_data_size,
                               __local int *shared_data, ulong _wcl_shared_data_size,
                               const uint group_offset,
                               const uint base_index,
                               const uint n,
                               const uint addr_offset)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&output_data[0], &output_data[_wcl_output_data_size],&input_data[0], &input_data[_wcl_input_data_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&shared_data[0], &shared_data[_wcl_shared_data_size] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint local_id = get_local_id(0);
    const uint group_id = get_global_id(0) / get_local_size(0);
    const uint group_size = get_local_size(0);

    if (local_id == 0)
        (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((input_data)+(group_id + group_offset), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn)));

    barrier(CLK_LOCAL_MEM_FENCE);

    uint address = mul24(group_id, (group_size << 1)) + base_index + local_id + addr_offset;

    (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(address), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) += (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
 if( (local_id + group_size) < n)
  (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((output_data)+(address + group_size), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) += (*(_wcl_addr_clamp_local_9__u_ulocal__int__Ptr((shared_data)+(0), 1, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, (__local int *)_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_min, (__local int *)_wcl_allocs->ll.UniformAddKernel__shared_data_max, (__local int *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void ParallelCompact( __global int *CompactIn_data, ulong _wcl_CompactIn_data_size,
                              __global int *CompactOut_data, ulong _wcl_CompactOut_data_size,
                              __global int *numUsefulNodes, ulong _wcl_numUsefulNodes_size,
                              __global int *ScanResult_data, ulong _wcl_ScanResult_data_size,
                              __global uint *LevelLength_data, ulong _wcl_LevelLength_data_size,
                              const uint max_level_length)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&CompactIn_data[0], &CompactIn_data[_wcl_CompactIn_data_size],&CompactOut_data[0], &CompactOut_data[_wcl_CompactOut_data_size],&numUsefulNodes[0], &numUsefulNodes[_wcl_numUsefulNodes_size],&ScanResult_data[0], &ScanResult_data[_wcl_ScanResult_data_size],&LevelLength_data[0], &LevelLength_data[_wcl_LevelLength_data_size],0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint node_id = get_global_id(0);
 const uint move_id = get_global_id(1);

    int n=(*(_wcl_addr_clamp_global_32__u_uglobal__uint__Ptr((LevelLength_data)+(move_id), 1, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global uint *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global uint *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global uint *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global uint *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint *)_wcl_allocs->gn)))*2;

    if(n==0 && node_id==0) (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((numUsefulNodes)+(move_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = 0;

 if (node_id<n)
 {
  const uint offset = move_id * max_level_length;

  int data = (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((CompactIn_data)+(offset + node_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn)));
  uint addr = (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((ScanResult_data)+(offset + node_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn)));
  if (data>-1)
  {
   (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((CompactOut_data)+(offset + addr), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = data;
   addr++;
  }
  if (node_id==n-1)
   (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((numUsefulNodes)+(move_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = addr;
 }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

__kernel void ParallelCompactFinal( __global int *CompactIn_data, ulong _wcl_CompactIn_data_size,
                              __global int *CompactOut_data, ulong _wcl_CompactOut_data_size,
                              __global int *numUsefulNodes, ulong _wcl_numUsefulNodes_size,
                              __global int *ScanResult_data, ulong _wcl_ScanResult_data_size,
                              __global uint *LevelLength_data, ulong _wcl_LevelLength_data_size,
                              const uint max_level_length)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&CompactIn_data[0], &CompactIn_data[_wcl_CompactIn_data_size],&CompactOut_data[0], &CompactOut_data[_wcl_CompactOut_data_size],&numUsefulNodes[0], &numUsefulNodes[_wcl_numUsefulNodes_size],&ScanResult_data[0], &ScanResult_data[_wcl_ScanResult_data_size],&LevelLength_data[0], &LevelLength_data[_wcl_LevelLength_data_size] },
        0,
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__output_data_min, _wcl_allocs->gl.PreScanKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanKernel__input_data_min, _wcl_allocs->gl.PreScanKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, _wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, _wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__output_data_min, _wcl_allocs->gl.UniformAddKernel__output_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.UniformAddKernel__input_data_min, _wcl_allocs->gl.UniformAddKernel__input_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, _wcl_allocs->gl.ParallelCompact__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, _wcl_allocs->gl.ParallelCompact__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, _wcl_allocs->gl.ParallelCompact__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, _wcl_allocs->gl.ParallelCompact__LevelLength_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, _wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, _wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, _wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, _wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint*)0))))))))))))))))))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanKernel__shared_data_min, _wcl_allocs->ll.PreScanKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanStoreSumNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernelFirstLevel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_min, _wcl_allocs->ll.PreScanNonPowerOfTwoKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.UniformAddKernel__shared_data_min, _wcl_allocs->ll.UniformAddKernel__shared_data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    const uint node_id = get_global_id(0);
 const uint move_id = get_global_id(1);

    int n=(*(_wcl_addr_clamp_global_32__u_uglobal__uint__Ptr((LevelLength_data)+(move_id), 1, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global uint *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global uint *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global uint *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global uint *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global uint *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global uint *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global uint *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global uint *)_wcl_allocs->gn)));

    if(n==0 && node_id==0) (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((numUsefulNodes)+(move_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = 0;

 if (node_id<n)
 {
  const uint offset = move_id * max_level_length;

  int data = (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((CompactIn_data)+(offset + node_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn)));
  uint addr = (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((ScanResult_data)+(offset + node_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn)));
  if (data>-1)
  {
   (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((CompactOut_data)+(offset + addr), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = data;
   addr++;
  }
  if (node_id==n-1)
   (*(_wcl_addr_clamp_global_32__u_uglobal__int__Ptr((numUsefulNodes)+(move_id), 1, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoFirstLevelKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_min, (__global int *)_wcl_allocs->gl.PreScanStoreSumNonPowerOfTwoKernel__partial_sums_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernelFirstLevel__input_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__output_data_max, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_min, (__global int *)_wcl_allocs->gl.PreScanNonPowerOfTwoKernel__input_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__output_data_max, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_min, (__global int *)_wcl_allocs->gl.UniformAddKernel__input_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompact__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompact__LevelLength_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactIn_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__CompactOut_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__numUsefulNodes_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__ScanResult_data_max, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_min, (__global int *)_wcl_allocs->gl.ParallelCompactFinal__LevelLength_data_max, (__global int *)_wcl_allocs->gn))) = addr;
 }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "bitonicSortLocal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "dir" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "bitonicSortLocal1" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        }
                },
            "bitonicMergeGlobal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "size" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "stride" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "dir" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                },
            "bitonicMergeLocal" :
                {
                    "d_DstKey" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstKey_size"
                        },
                    "_wcl_d_DstKey_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_DstVal" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_DstVal_size"
                        },
                    "_wcl_d_DstVal_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_SrcKey" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcKey_size"
                        },
                    "_wcl_d_SrcKey_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_SrcVal" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_SrcVal_size"
                        },
                    "_wcl_d_SrcVal_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "arrayLength" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "stride" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        },
                    "size" :
                        {
                            "index" : 10,
                            "type" : "uint"
                        },
                    "dir" :
                        {
                            "index" : 11,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    float _wcl_t;
    float _wcl_2_t;
    float _wcl_keyA;
    uint _wcl_valA;
    float _wcl_keyB;
    uint _wcl_valB;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    float _wcl_l_key[512];
    uint _wcl_l_val[512];
    float _wcl_2_l_key[512];
    uint _wcl_2_l_val[512];
    float _wcl_3_l_key[512];
    uint _wcl_3_l_val[512];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global float *bitonicSortLocal__d_DstKey_min;
    __global float *bitonicSortLocal__d_DstKey_max;
    __global uint *bitonicSortLocal__d_DstVal_min;
    __global uint *bitonicSortLocal__d_DstVal_max;
    __global float *bitonicSortLocal__d_SrcKey_min;
    __global float *bitonicSortLocal__d_SrcKey_max;
    __global uint *bitonicSortLocal__d_SrcVal_min;
    __global uint *bitonicSortLocal__d_SrcVal_max;
    __global float *bitonicSortLocal1__d_DstKey_min;
    __global float *bitonicSortLocal1__d_DstKey_max;
    __global uint *bitonicSortLocal1__d_DstVal_min;
    __global uint *bitonicSortLocal1__d_DstVal_max;
    __global float *bitonicSortLocal1__d_SrcKey_min;
    __global float *bitonicSortLocal1__d_SrcKey_max;
    __global uint *bitonicSortLocal1__d_SrcVal_min;
    __global uint *bitonicSortLocal1__d_SrcVal_max;
    __global float *bitonicMergeGlobal__d_DstKey_min;
    __global float *bitonicMergeGlobal__d_DstKey_max;
    __global uint *bitonicMergeGlobal__d_DstVal_min;
    __global uint *bitonicMergeGlobal__d_DstVal_max;
    __global float *bitonicMergeGlobal__d_SrcKey_min;
    __global float *bitonicMergeGlobal__d_SrcKey_max;
    __global uint *bitonicMergeGlobal__d_SrcVal_min;
    __global uint *bitonicMergeGlobal__d_SrcVal_max;
    __global float *bitonicMergeLocal__d_DstKey_min;
    __global float *bitonicMergeLocal__d_DstKey_max;
    __global uint *bitonicMergeLocal__d_DstVal_min;
    __global uint *bitonicMergeLocal__d_DstVal_max;
    __global float *bitonicMergeLocal__d_SrcKey_min;
    __global float *bitonicMergeLocal__d_SrcKey_max;
    __global uint *bitonicMergeLocal__d_SrcVal_min;
    __global uint *bitonicMergeLocal__d_SrcVal_max;
} _WclGlobalLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(float *, max0)) );
}
float *_wcl_addr_clamp_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0, float * asnull)
{
     return _wcl_addr_check_private_1_float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(uint *, max0)) );
}
uint *_wcl_addr_clamp_private_1_uint__Ptr(uint *addr, unsigned size, uint * min0, uint * max0, uint * asnull)
{
     return _wcl_addr_check_private_1_uint__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_global_16__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4, __global float * min5, __global float * max5, __global float * min6, __global float * max6, __global float * min7, __global float * max7, __global float * min8, __global float * max8, __global float * min9, __global float * max9, __global float * min10, __global float * max10, __global float * min11, __global float * max11, __global float * min12, __global float * max12, __global float * min13, __global float * max13, __global float * min14, __global float * max14, __global float * min15, __global float * max15)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max15)) );
}
__global float *_wcl_addr_clamp_global_16__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4, __global float * min5, __global float * max5, __global float * min6, __global float * max6, __global float * min7, __global float * max7, __global float * min8, __global float * max8, __global float * min9, __global float * max9, __global float * min10, __global float * max10, __global float * min11, __global float * max11, __global float * min12, __global float * max12, __global float * min13, __global float * max13, __global float * min14, __global float * max14, __global float * min15, __global float * max15, __global float * asnull)
{
     return _wcl_addr_check_global_16__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15) ? addr : asnull;
}

bool _wcl_addr_check_global_16__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max9)) )
        || ( ((addr) >= (min10)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max10)) )
        || ( ((addr) >= (min11)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max11)) )
        || ( ((addr) >= (min12)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max12)) )
        || ( ((addr) >= (min13)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max13)) )
        || ( ((addr) >= (min14)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max14)) )
        || ( ((addr) >= (min15)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max15)) );
}
__global uint *_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * min7, __global uint * max7, __global uint * min8, __global uint * max8, __global uint * min9, __global uint * max9, __global uint * min10, __global uint * max10, __global uint * min11, __global uint * max11, __global uint * min12, __global uint * max12, __global uint * min13, __global uint * max13, __global uint * min14, __global uint * max14, __global uint * min15, __global uint * max15, __global uint * asnull)
{
     return _wcl_addr_check_global_16__u_uglobal__uint__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9, min10, max10, min11, max11, min12, max12, min13, max13, min14, max14, min15, max15) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float *, max0)) );
}
__local float *_wcl_addr_clamp_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0, __local float * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local uint *, max0)) );
}
__local uint *_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0, __local uint * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__uint__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */



inline void ComparatorPrivate(_WclProgramAllocations *_wcl_allocs, 
    float *keyA,
    uint *valA,
    float *keyB,
    uint *valB,
    uint dir
){
    if( ((*(_wcl_addr_clamp_private_1_float__Ptr((keyA), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) > (*(_wcl_addr_clamp_private_1_float__Ptr((keyB), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)))) == dir ){
        float t;
        _wcl_allocs->pa._wcl_t = (*(_wcl_addr_clamp_private_1_float__Ptr((keyA), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_float__Ptr((keyA), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_float__Ptr((keyB), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_float__Ptr((keyB), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = _wcl_allocs->pa._wcl_t;
        _wcl_allocs->pa._wcl_t = (*(_wcl_addr_clamp_private_1_uint__Ptr((valA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((valA), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_uint__Ptr((valB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))); (*(_wcl_addr_clamp_private_1_uint__Ptr((valB), 1, (uint *)&_wcl_allocs->pa, (uint *)(&_wcl_allocs->pa + 1), (uint *)_wcl_allocs->pn))) = _wcl_allocs->pa._wcl_t;
    }
}

inline void ComparatorLocal(_WclProgramAllocations *_wcl_allocs, 
    __local float *keyA,
    __local uint *valA,
    __local float *keyB,
    __local uint *valB,
    uint dir
){
    if( ((*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyA), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) > (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyB), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)))) == dir ){
        float t;
        _wcl_allocs->pa._wcl_2_t = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyA), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyA), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyB), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((keyB), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = _wcl_allocs->pa._wcl_2_t;
        _wcl_allocs->pa._wcl_2_t = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valA), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))); (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((valB), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = _wcl_allocs->pa._wcl_2_t;
    }
}

////////////////////////////////////////////////////////////////////////////////
// Monolithic bitonic sort kernel for short arrays fitting into local memory
////////////////////////////////////////////////////////////////////////////////
__kernel void bitonicSortLocal(
    __global float *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global float *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint dir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local float l_key[512U];
    __local uint l_val[512U];

    //Offset to the beginning of subbatch and load data
    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    for(uint size = 2; size < arrayLength; size <<= 1){
        //Bitonic merge
        uint ddd = dir ^ ( (get_local_id(0) & (size / 2)) != 0 );
        for(uint stride = size / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(pos + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(pos + stride), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                ddd
            );
        }
    }

    //ddd == dir for the last bitonic merge step
    {
        for(uint stride = arrayLength / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(pos + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(pos + stride), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                dir
            );
        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}

////////////////////////////////////////////////////////////////////////////////
// Bitonic sort kernel for large arrays (not fitting into local memory)
////////////////////////////////////////////////////////////////////////////////
//Bottom-level bitonic sort
//Almost the same as bitonicSortLocal with the only exception
//of even / odd subarrays (of LOCAL_SIZE_LIMIT points) being
//sorted in opposite directions
__kernel void bitonicSortLocal1(
    __global float *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global float *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local float l_key[512U];
    __local uint l_val[512U];

    //Offset to the beginning of subarray and load data
    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    uint comparatorI = get_global_id(0) & ((512U / 2) - 1);

    for(uint size = 2; size < 512U; size <<= 1){
        //Bitonic merge
        uint ddd = (comparatorI & (size / 2)) != 0;
        for(uint stride = size / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(pos + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(pos + stride), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                ddd
            );
        }
    }

    //Odd / even arrays of LOCAL_SIZE_LIMIT elements
    //sorted in opposite directions
    {
        uint ddd = (get_group_id(0) & 1);
        for(uint stride = 512U / 2; stride > 0; stride >>= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
            ComparatorLocal(_wcl_allocs, 
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(pos + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
                &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(pos + stride), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
               ddd
            );
        }
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_2_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_2_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}

//Bitonic merge iteration for 'stride' >= LOCAL_SIZE_LIMIT
__kernel void bitonicMergeGlobal(
    __global float *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global float *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint size,
    uint stride,
    uint dir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size],0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    uint global_comparatorI = get_global_id(0);
    uint comparatorI = global_comparatorI & (arrayLength / 2 - 1);

    //Bitonic merge
    uint ddd = dir ^ ( (comparatorI & (size / 2)) != 0 );
    uint pos = 2 * global_comparatorI - (global_comparatorI & (stride - 1));

    float keyA = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+(pos + 0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_keyA = keyA;
    uint valA = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_valA = valA;
    float keyB = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+(pos + stride), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_keyB = keyB;
    uint valB = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));;_wcl_allocs->pa._wcl_valB = valB;

    ComparatorPrivate(_wcl_allocs, 
        &_wcl_allocs->pa._wcl_keyA, &_wcl_allocs->pa._wcl_valA,
        &_wcl_allocs->pa._wcl_keyB, &_wcl_allocs->pa._wcl_valB,
        ddd
    );

    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+(pos + 0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_keyA;
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(pos + 0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_valA;
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+(pos + stride), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_keyB;
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(pos + stride), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = _wcl_allocs->pa._wcl_valB;
}

//Combined bitonic merge steps for
//'size' > LOCAL_SIZE_LIMIT and 'stride' = [1 .. LOCAL_SIZE_LIMIT / 2]
__kernel void bitonicMergeLocal(
    __global float *d_DstKey, ulong _wcl_d_DstKey_size,
    __global uint *d_DstVal, ulong _wcl_d_DstVal_size,
    __global float *d_SrcKey, ulong _wcl_d_SrcKey_size,
    __global uint *d_SrcVal, ulong _wcl_d_SrcVal_size,
    uint arrayLength,
    uint stride,
    uint size,
    uint dir
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&d_DstKey[0], &d_DstKey[_wcl_d_DstKey_size],&d_DstVal[0], &d_DstVal[_wcl_d_DstVal_size],&d_SrcKey[0], &d_SrcKey[_wcl_d_SrcKey_size],&d_SrcVal[0], &d_SrcVal[_wcl_d_SrcVal_size] },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, _wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, _wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint*)0))))))))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local float l_key[512U];
    __local uint l_val[512U];

    d_SrcKey += get_group_id(0) * 512U + get_local_id(0);
    d_SrcVal += get_group_id(0) * 512U + get_local_id(0);
    d_DstKey += get_group_id(0) * 512U + get_local_id(0);
    d_DstVal += get_group_id(0) * 512U + get_local_id(0);
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_SrcKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn)));
    (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_SrcVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn)));

    //Bitonic merge
    uint comparatorI = get_global_id(0) & ((arrayLength / 2) - 1);
    uint ddd = dir ^ ( (comparatorI & (size / 2)) != 0 );
    for(; stride > 0; stride >>= 1){
        barrier(CLK_LOCAL_MEM_FENCE);
        uint pos = 2 * get_local_id(0) - (get_local_id(0) & (stride - 1));
        ComparatorLocal(_wcl_allocs, 
            &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(pos + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(pos + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
            &(*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(pos + stride), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))), &(*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(pos + stride), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln))),
            ddd
        );
    }

    barrier(CLK_LOCAL_MEM_FENCE);
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+(0), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + 0), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+(0), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + 0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__float__Ptr((d_DstKey)+((512U / 2)), 1, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global float *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_locals._wcl_3_l_key)+(get_local_id(0) + (512U / 2)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_16__u_uglobal__uint__Ptr((d_DstVal)+((512U / 2)), 1, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicSortLocal1__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeGlobal__d_SrcVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_DstVal_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcKey_max, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_min, (__global uint *)_wcl_allocs->gl.bitonicMergeLocal__d_SrcVal_max, (__global uint *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__uint__Ptr((_wcl_locals._wcl_3_l_val)+(get_local_id(0) + (512U / 2)), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ln)));
}
