
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/helloworld.data';
    var REMOTE_PACKAGE_BASE = 'helloworld.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 695568;
    var PACKAGE_UUID = 'b0b10819-60df-4729-b1a7-53ec2b8f64d7';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'Common', true, true);
Module['FS_createPath']('/Common', 'OpenCL', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 5515, 0, 0).open('GET', '/Common/OpenCL/b2CLBitonicSort_Intel.cl');
    new DataRequest(5515, 15053, 0, 0).open('GET', '/Common/OpenCL/b2CLBitonicSort_NV.cl');
    new DataRequest(15053, 75475, 0, 0).open('GET', '/Common/OpenCL/b2CLBroadPhase.cl');
    new DataRequest(75475, 105999, 0, 0).open('GET', '/Common/OpenCL/b2CLCommonData.cl');
    new DataRequest(105999, 146860, 0, 0).open('GET', '/Common/OpenCL/b2CLNarrowPhase_Alone.cl');
    new DataRequest(146860, 211085, 0, 0).open('GET', '/Common/OpenCL/b2CLNarrowPhase.cl');
    new DataRequest(211085, 215485, 0, 0).open('GET', '/Common/OpenCL/b2CLPrefixScanFloat4.cl');
    new DataRequest(215485, 226455, 0, 0).open('GET', '/Common/OpenCL/b2CLScan_CLPP.cl');
    new DataRequest(226455, 243152, 0, 0).open('GET', '/Common/OpenCL/b2CLScan.cl');
    new DataRequest(243152, 269719, 0, 0).open('GET', '/Common/OpenCL/b2CLScanKernel.cl');
    new DataRequest(269719, 383968, 0, 0).open('GET', '/Common/OpenCL/b2CLSolvePositionConstraint.cl');
    new DataRequest(383968, 449172, 0, 0).open('GET', '/Common/OpenCL/b2CLSolveTOI.cl');
    new DataRequest(449172, 485676, 0, 0).open('GET', '/Common/OpenCL/b2CLSolveVelocityConstraint_Alone.cl');
    new DataRequest(485676, 686287, 0, 0).open('GET', '/Common/OpenCL/b2CLSolveVelocityConstraint.cl');
    new DataRequest(686287, 695568, 0, 0).open('GET', '/Common/OpenCL/BitonicSort_b.cl');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/Common/OpenCL/b2CLBitonicSort_Intel.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLBitonicSort_NV.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLBroadPhase.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLCommonData.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLNarrowPhase_Alone.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLNarrowPhase.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLPrefixScanFloat4.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLScan_CLPP.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLScan.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLScanKernel.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLSolvePositionConstraint.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLSolveTOI.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLSolveVelocityConstraint_Alone.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/b2CLSolveVelocityConstraint.cl"].onload();
          DataRequest.prototype.requests["/Common/OpenCL/BitonicSort_b.cl"].onload();
          Module['removeRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/helloworld.data');

    };
    Module['addRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-box2d/js/helloworld.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 42672;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a492() } }, { func: function() { __GLOBAL__I_a1034() } });
  

/* memory initializer */ allocate([100,101,110,32,62,32,48,46,48,102,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,0,0,0,0,0,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,118,101,114,116,101,120,67,111,117,110,116,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,0,0,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,0,0,0,0,0,0,98,50,69,100,103,101,83,101,112,97,114,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,83,101,116,0,0,0,0,0,102,97,108,115,101,0,0,0,98,50,68,105,115,116,97,110,99,101,0,0,0,0,0,0,71,101,116,77,101,116,114,105,99,0,0,0,0,0,0,0,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,0,0,71,101,116,86,101,114,116,101,120,0,0,0,0,0,0,0,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,0,0,0,0,0,0,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,0,99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0,0,0,0,0,0,0,82,101,97,100,67,97,99,104,101,0,0,0,0,0,0,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,0,0,0,0,0,65,108,108,111,99,97,116,101,78,111,100,101,0,0,0,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,70,114,101,101,78,111,100,101,0,0,0,0,0,0,0,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,0,0,0,0,0,0,77,111,118,101,80,114,111,120,121,0,0,0,0,0,0,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,0,0,73,110,115,101,114,116,76,101,97,102,0,0,0,0,0,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,0,105,65,32,33,61,32,40,45,49,41,0,0,0,0,0,0,66,97,108,97,110,99,101,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,0,0,0,0,98,50,84,105,109,101,79,102,73,109,112,97,99,116,0,0,102,97,108,115,101,0,0,0,69,118,97,108,117,97,116,101,0,0,0,0,0,0,0,0,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,0,0,0,0,0,0,0,48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0,0,73,110,105,116,105,97,108,105,122,101,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,0,0,0,0,0,0,71,101,116,67,104,105,108,100,69,100,103,101,0,0,0,0,55,98,50,83,104,97,112,101,0,0,0,0,0,0,0,0,216,159,0,0,248,6,0,0,0,0,0,0,8,7,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,112,7,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,49,49,98,50,69,100,103,101,83,104,97,112,101,0,0,0,0,160,0,0,96,7,0,0,8,7,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,0,0,0,0,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0,0,0,0,0,82,97,121,67,97,115,116,0,109,95,118,101,114,116,101,120,67,111,117,110,116,32,62,61,32,51,0,0,0,0,0,0,67,111,109,112,117,116,101,77,97,115,115,0,0,0,0,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,0,160,8,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,0,0,0,0,0,0,0,0,160,0,0,136,8,0,0,8,7,0,0,0,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,0,0,0,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,0,48,32,60,32,115,105,122,101,0,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,0,0,98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,0,70,114,101,101,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,109,95,105,110,100,101,120,32,61,61,32,48,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,0,0,0,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,0,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,70,114,101,101,0,0,0,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,10,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,0,0,0,0,0,0,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,66,114,111,97,100,80,104,97,115,101,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,67,111,109,112,117,116,101,65,65,66,66,115,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,67,111,109,112,117,116,101,65,65,66,66,115,84,79,73,0,80,114,101,112,97,114,101,83,117,109,86,97,114,105,97,110,99,101,0,0,0,0,0,0,73,110,105,116,83,111,114,116,105,110,103,75,101,121,115,0,67,111,109,112,117,116,101,80,97,105,114,115,0,0,0,0,67,111,109,112,117,116,101,80,97,105,114,115,78,111,65,116,111,109,105,99,0,0,0,0,67,111,109,112,117,116,101,65,65,66,66,73,110,116,101,114,115,101,99,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,65,65,66,66,32,105,110,116,101,114,115,101,99,116,105,111,110,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,82,97,121,67,105,114,99,108,101,73,110,116,101,114,115,101,99,116,105,111,110,0,0,0,82,97,121,69,100,103,101,73,110,116,101,114,115,101,99,116,105,111,110,0,0,0,0,0,82,97,121,80,111,108,121,103,111,110,73,110,116,101,114,115,101,99,116,105,111,110,0,0,82,97,121,67,104,97,105,110,73,110,116,101,114,115,101,99,116,105,111,110,0,0,0,0,184,15,0,0,208,15,0,0,232,15,0,0,0,16,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,114,97,121,32,115,104,97,112,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,107,101,114,110,101,108,33,10,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,0,0,0,0,99,111,109,112,117,116,101,65,65,66,66,115,75,101,114,110,101,108,0,0,0,0,0,0,69,114,114,111,114,58,32,67,111,109,112,117,116,101,32,65,65,66,66,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,112,114,101,112,97,114,101,83,117,109,86,97,114,105,97,110,99,101,75,101,114,110,101,108,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,67,111,109,112,117,116,101,32,80,97,105,114,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,240,21,0,0,20,0,0,0,21,0,0,0,148,255,255,255,148,255,255,255,240,21,0,0,22,0,0,0,23,0,0,0,108,21,0,0,164,21,0,0,184,21,0,0,128,21,0,0,108,0,0,0,0,0,0,0,40,117,0,0,24,0,0,0,25,0,0,0,148,255,255,255,148,255,255,255,40,117,0,0,26,0,0,0,27,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,160,0,0,192,21,0,0,40,117,0,0,0,0,0,0,0,0,0,0,112,22,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,160,0,0,64,22,0,0,176,116,0,0,0,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,97,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5456);
/* memory initializer */ allocate([102,105,120,116,117,114,101,95,105,110,100,101,120,60,61,109,95,112,87,111,114,108,100,45,62,109,95,112,114,111,120,121,67,111,117,110,116,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,112,112,0,67,111,112,121,83,116,97,116,105,99,70,105,120,116,117,114,101,65,116,116,114,105,98,117,116,101,115,0,0,0,0,0,99,111,110,110,101,99,116,101,100,65,114,114,97,121,80,111,115,58,32,37,100,10,0,0,102,97,108,115,101,0,0,0,67,111,112,121,83,116,97,116,105,99,66,111,100,121,65,116,116,114,105,98,117,116,101,115,0,0,0,0,0,0,0,0,112,74,111,105,110,116,45,62,71,101,116,84,121,112,101,40,41,32,60,32,110,117,109,74,111,105,110,116,84,121,112,101,115,0,0,0,0,0,0,0,67,111,112,121,74,111,105,110,116,115,0,0,0,0,0,0,99,111,112,121,74,111,105,110,116,70,117,110,99,91,106,111,105,110,116,84,121,112,101,93,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,111,105,110,116,32,99,111,108,111,114,32,118,97,108,117,101,32,101,120,99,101,101,100,115,32,109,97,120,32,99,111,110,116,97,99,116,32,110,117,109,98,101,114,32,112,101,114,32,98,111,100,121,32,10,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,0,0,0,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,110,117,109,84,111,116,97,108,74,111,105,110,116,115,32,62,61,32,48,0,0,0,0,0,83,116,111,114,101,74,111,105,110,116,73,109,112,117,108,115,101,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,46,46,10,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,10,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,0,0,0,0,0,0,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,67,111,109,109,111,110,68,97,116,97,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,82,101,97,100,76,97,115,116,74,111,105,110,116,73,109,112,117,108,115,101,115,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,108,32,61,61,32,114,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,68,101,118,105,99,101,46,104,0,0,0,0,0,0,0,98,50,99,108,67,104,101,99,107,69,114,114,111,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7080);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,46,46,46,10,0,0,0,0,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,112,108,97,116,102,111,114,109,115,58,32,37,100,10,0,0,80,108,97,116,102,111,114,109,32,37,100,32,118,101,110,100,111,114,58,32,37,115,10,0,80,108,97,116,102,111,114,109,32,37,100,32,110,97,109,101,58,32,37,115,10,10,0,0,85,115,105,110,103,32,80,108,97,116,102,111,114,109,32,37,117,44,32,0,0,0,0,0,99,108,71,101,116,68,101,118,105,99,101,73,68,115,46,46,46,10,10,0,0,0,0,0,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,101,118,105,99,101,115,58,32,37,100,10,0,0,0,0,68,101,118,105,99,101,32,35,37,100,32,105,115,32,0,0,67,80,85,10,9,0,0,0,71,80,85,10,9,0,0,0,68,101,118,105,99,101,32,118,101,110,100,111,114,58,32,37,115,10,9,0,0,0,0,0,68,101,118,105,99,101,32,110,97,109,101,58,32,37,115,10,9,0,0,0,0,0,0,0,83,117,112,112,111,114,116,101,100,32,79,112,101,110,67,76,32,118,101,114,115,105,111,110,58,32,37,115,10,9,0,0,77,97,120,32,119,111,114,107,32,103,114,111,117,112,32,115,105,122,101,58,32,37,100,10,9,0,0,0,0,0,0,0,77,97,120,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,117,116,101,32,117,110,105,116,115,58,32,37,100,10,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,102,105,114,115,116,67,80,85,62,61,48,32,124,124,32,102,105,114,115,116,71,80,85,62,61,48,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,68,101,118,105,99,101,46,99,112,112,0,0,0,0,0,115,116,97,114,116,117,112,79,112,101,110,67,76,0,0,0,84,104,101,32,112,108,97,116,102,111,114,109,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,79,112,101,110,67,76,32,111,110,32,67,80,85,33,10,0,0,0,85,115,105,110,103,32,68,101,118,105,99,101,32,37,117,44,32,0,0,0,0,0,0,0,10,10,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,46,46,46,10,10,0,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,46,46,46,10,10,0,0,0,0,0,0,0,32,99,108,67,114,101,97,116,101,66,117,102,102,101,114,32,40,71,80,85,32,71,77,69,77,44,32,37,117,32,98,121,116,101,115,41,46,46,46,10,10,0,0,0,0,0,0,0,118,98,111,32,61,61,32,48,0,0,0,0,0,0,0,0,99,111,112,121,65,114,114,97,121,70,114,111,109,68,101,118,105,99,101,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,68,101,118,105,99,101,46,104,0,0,0,0,0,0,0,98,50,99,108,67,104,101,99,107,69,114,114,111,114,0,0,108,32,61,61,32,114,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,46,46,10,0,0,0,0,0,0,0,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,10,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,0,0,0,0,0,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,98,50,99,108,67,111,108,108,105,100,101,80,111,108,121,103,111,110,115,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,98,50,99,108,67,111,108,108,105,100,101,67,105,114,99,108,101,115,0,0,0,0,0,0,98,50,99,108,67,111,108,108,105,100,101,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,0,0,0,0,0,98,50,99,108,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,0,0,0,0,0,0,0,98,50,99,108,67,111,108,108,105,100,101,69,100,103,101,65,110,100,80,111,108,121,103,111,110,0,0,0,0,0,0,0,98,50,99,108,67,111,109,112,97,99,116,70,111,114,79,110,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,69,114,114,111,114,33,32,85,110,115,117,112,112,111,114,116,101,100,32,99,111,110,116,97,99,116,32,116,121,112,101,58,32,37,100,33,10,0,0,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,0,0,0,0,69,114,114,111,114,58,32,67,111,108,108,105,100,101,32,75,101,114,110,101,108,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,69,114,114,111,114,58,32,67,111,109,112,97,99,116,32,102,111,114,32,79,110,101,32,67,111,110,116,97,99,116,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,46,99,112,112,0,0,0,0,0,0,0,0,101,110,97,98,108,101,66,105,116,65,114,114,97,121,0,0,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,70,111,114,76,105,115,116,101,110,101,114,0,0,0,0,0,0,48,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,101,114,114,111,114,32,105,110,32,98,50,67,76,78,97,114,114,111,119,80,104,97,115,101,58,58,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,70,111,114,76,105,115,116,101,110,101,114,33,33,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+9168);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,80,114,101,83,99,97,110,75,101,114,110,101,108,0,0,0,80,114,101,83,99,97,110,83,116,111,114,101,83,117,109,75,101,114,110,101,108,0,0,0,80,114,101,83,99,97,110,83,116,111,114,101,83,117,109,78,111,110,80,111,119,101,114,79,102,84,119,111,75,101,114,110,101,108,0,0,0,0,0,0,80,114,101,83,99,97,110,78,111,110,80,111,119,101,114,79,102,84,119,111,75,101,114,110,101,108,0,0,0,0,0,0,85,110,105,102,111,114,109,65,100,100,75,101,114,110,101,108,0,0,0,0,0,0,0,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,75,101,114,110,101,108,0,0,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,73,110,100,105,99,101,115,75,101,114,110,101,108,0,0,0,0,80,97,114,97,108,108,101,108,67,111,109,112,97,99,116,71,101,110,101,114,97,108,75,101,114,110,101,108,0,0,0,0,80,47,0,0,96,47,0,0,120,47,0,0,160,47,0,0,192,47,0,0,216,47,0,0,240,47,0,0,16,48,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,99,97,110,46,46,46,10,0,0,0,0,0,0,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,99,97,110,46,99,108,10,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,99,97,110,46,99,108,0,0,0,0,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,99,97,110,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,10,0,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,99,97,110,95,67,76,80,80,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,0,107,101,114,110,101,108,95,95,69,120,99,108,117,115,105,118,101,80,114,101,102,105,120,83,99,97,110,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,107,101,114,110,101,108,95,95,69,120,99,108,117,115,105,118,101,80,114,101,102,105,120,83,99,97,110,33,10,0,0,0,0,107,101,114,110,101,108,95,95,85,110,105,102,111,114,109,65,100,100,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,107,101,114,110,101,108,95,95,85,110,105,102,111,114,109,65,100,100,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,0,0,0,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,107,101,114,110,101,108,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+12096);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,108,118,101,114,46,46,46,10,0,0,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,46,99,108,0,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,83,111,108,118,101,83,112,108,105,116,73,109,112,117,108,115,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,32,10,0,0,0,0,0,0,0,83,111,108,118,101,77,101,114,103,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,67,111,117,110,116,67,111,110,116,97,99,116,78,117,109,52,69,97,99,104,66,111,100,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,10,0,0,0,0,0,0,0,0,83,111,108,118,101,68,105,115,116,97,110,99,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,83,111,108,118,101,82,101,118,111,108,117,116,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,83,111,108,118,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,83,111,108,118,101,71,101,97,114,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,80,117,108,108,101,121,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,83,111,108,118,101,82,111,112,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,87,104,101,101,108,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,83,111,108,118,101,87,101,108,100,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,77,111,117,115,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,83,111,108,118,101,70,114,105,99,116,105,111,110,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,44,32,37,100,32,10,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,68,105,115,116,97,110,99,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,82,101,118,111,108,117,116,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,71,101,97,114,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,73,110,105,116,105,97,108,105,122,101,80,117,108,108,101,121,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,73,110,105,116,105,97,108,105,122,101,82,111,112,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,73,110,105,116,105,97,108,105,122,101,87,104,101,101,108,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,73,110,105,116,105,97,108,105,122,101,87,101,108,100,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,73,110,105,116,105,97,108,105,122,101,77,111,117,115,101,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,73,110,105,116,105,97,108,105,122,101,70,114,105,99,116,105,111,110,74,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,95,72,97,115,83,112,108,105,116,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,33,10,0,0,0,73,110,105,116,105,97,108,105,122,101,66,111,100,121,83,116,97,116,101,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,66,111,100,121,83,116,97,116,101,70,105,114,115,116,70,114,97,109,101,0,0,0,87,97,114,109,83,116,97,114,116,0,0,0,0,0,0,0,87,97,114,109,83,116,97,114,116,87,105,116,104,67,111,108,111,114,105,110,103,0,0,0,87,97,114,109,83,116,97,114,116,83,112,108,105,116,0,0,87,97,114,109,83,116,97,114,116,83,112,108,105,116,87,105,116,104,67,111,108,111,114,105,110,103,0,0,0,0,0,0,83,121,110,99,104,114,111,110,105,122,101,88,102,0,0,0,82,101,97,100,76,97,115,116,73,109,112,117,108,115,101,115,0,0,0,0,0,0,0,0,82,101,97,100,76,97,115,116,73,109,112,117,108,115,101,115,70,105,114,115,116,70,114,97,109,101,0,0,0,0,0,0,83,116,111,114,101,73,109,112,117,108,115,101,115,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,46,99,108,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,73,110,116,101,103,114,97,116,101,80,111,115,105,116,105,111,110,115,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,105,110,105,116,105,97,108,105,122,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,73,110,116,101,103,114,97,116,101,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,115,32,107,101,114,110,101,108,33,10,0,0,0,0,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,83,111,108,118,101,83,112,108,105,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,95,77,101,114,103,101,83,112,108,105,116,116,101,100,77,97,115,115,0,0,0,0,0,0,0,83,111,108,118,101,68,105,115,116,97,110,99,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,83,111,108,118,101,82,101,118,111,108,117,116,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,83,111,108,118,101,80,114,105,115,109,97,116,105,99,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,83,111,108,118,101,71,101,97,114,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,80,117,108,108,101,121,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,83,111,108,118,101,82,111,112,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,87,104,101,101,108,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,83,111,108,118,101,87,101,108,100,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,0,83,111,108,118,101,77,111,117,115,101,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,83,111,108,118,101,70,114,105,99,116,105,111,110,74,111,105,110,116,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,107,101,114,110,101,108,32,83,111,108,118,101,80,111,115,105,116,105,111,110,67,111,110,115,116,114,97,105,110,116,33,10,0,0,0,0,0,0,0,0,67,111,108,108,101,99,116,83,116,97,116,105,99,68,121,110,97,109,105,99,80,97,105,114,75,101,114,110,101,108,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,67,111,108,108,101,99,116,32,83,116,97,116,105,99,32,68,121,110,97,109,105,99,32,80,97,105,114,32,107,101,114,110,101,108,33,10,0,0,0,0,73,110,105,116,83,116,97,116,105,99,68,121,110,97,109,105,99,66,111,100,121,75,101,114,110,101,108,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,83,68,66,111,100,121,75,101,114,110,101,108,32,33,10,0,0,0,0,83,111,108,118,101,83,68,86,101,108,111,99,105,116,121,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,83,111,108,118,101,83,68,86,101,108,111,99,105,116,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,0,83,111,108,118,101,83,68,80,111,115,105,116,105,111,110,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,83,111,108,118,101,83,68,80,111,115,105,116,105,111,110,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,0,115,121,110,99,83,68,66,111,100,121,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,121,110,99,83,68,66,111,100,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,84,101,115,116,75,101,114,110,101,108,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,105,110,105,116,105,97,108,105,122,101,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,107,101,114,110,101,108,33,10,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,106,111,105,110,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,73,110,105,116,105,97,108,105,122,101,75,101,114,110,101,108,91,37,100,93,33,10,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,118,101,108,111,99,105,116,121,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,119,97,114,109,32,115,116,97,114,116,32,119,105,116,104,32,99,111,108,111,114,105,110,103,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,115,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,105,110,116,101,103,114,97,116,101,32,112,111,115,105,116,105,111,110,32,107,101,114,110,101,108,33,10,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,107,101,114,110,101,108,33,10,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,106,111,105,110,116,32,112,111,115,105,116,105,111,110,32,99,111,110,115,116,114,97,105,110,116,32,115,111,108,118,101,114,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,115,121,110,99,104,114,111,110,105,122,101,32,88,102,32,97,114,103,117,109,101,110,116,115,33,32,37,100,10,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,115,121,110,99,104,114,111,110,105,122,101,32,88,102,32,107,101,114,110,101,108,33,10,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,114,101,97,100,32,108,97,115,116,32,105,109,112,117,108,115,101,115,32,107,101,114,110,101,108,33,10,0,0,0,0,48,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,82,101,112,111,114,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+14248);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,108,118,101,84,79,73,46,46,46,10,0,0,0,46,46,46,108,111,97,100,105,110,103,32,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,10,0,0,0,0,0,46,47,67,111,109,109,111,110,47,79,112,101,110,67,76,47,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,0,47,47,32,77,121,32,99,111,109,109,101,110,116,10,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,112,114,111,103,114,97,109,32,115,111,117,114,99,101,44,32,105,115,32,112,97,116,104,32,39,98,50,67,76,83,111,108,118,101,84,79,73,46,99,108,39,32,99,111,114,114,101,99,116,63,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,109,112,117,116,101,32,112,114,111,103,114,97,109,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,98,117,105,108,100,32,112,114,111,103,114,97,109,32,101,120,101,99,117,116,97,98,108,101,33,10,0,0,0,0,0,37,115,10,0,0,0,0,0,98,50,99,108,115,121,110,99,77,111,118,101,100,66,111,100,121,75,101,114,110,101,108,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,115,121,110,99,77,111,118,101,100,66,111,100,121,75,101,114,110,101,108,32,107,101,114,110,101,108,33,10,0,0,0,0,69,114,114,111,114,58,32,37,115,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,107,101,114,110,101,108,32,97,114,103,117,109,101,110,116,115,33,10,0,0,0,0,0,69,114,114,111,114,58,32,70,97,105,108,101,100,32,116,111,32,101,120,101,99,117,116,101,32,98,50,99,108,67,111,109,112,117,116,101,77,105,110,84,79,73,32,107,101,114,110,101,108,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+19432);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,98,50,67,76,83,111,114,116,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,0,0,0,0,0,98,50,66,111,100,121,0,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,0,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,0,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,0,0,109,95,73,32,62,32,48,46,48,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,0,0,0,0,0,0,0,71,101,116,85,115,101,114,68,97,116,97,0,0,0,0,0,109,95,99,111,117,110,116,32,62,32,48,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,80,111,112,0,0,0,0,0,71,101,116,70,97,116,65,65,66,66,0,0,0,0,0,0,0,0,0,0,96,85,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,0,0,0,0,216,159,0,0,72,85,0,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,0,0,68,101,115,116,114,111,121,0,102,97,108,115,101,0,0,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,0,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,0,0,0,83,111,108,118,101,84,79,73,0,0,0,0,0,0,0,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,0,0,0,0,67,114,101,97,116,101,66,111,100,121,0,0,0,0,0,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,83,111,108,118,101,84,79,73,0,0,0,0,0,0,0,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,0,0,47,85,115,101,114,115,47,103,46,114,111,110,103,47,84,105,109,101,100,97,116,97,46,99,115,118,0,0,0,0,0,0,119,0,0,0,0,0,0,0,66,111,100,121,35,44,32,74,111,105,110,116,35,44,32,44,32,84,111,116,97,108,32,115,116,101,112,32,84,105,109,101,44,32,83,116,101,112,32,78,80,32,116,105,109,101,44,32,83,116,101,112,32,83,111,108,118,101,114,32,116,105,109,101,44,32,83,116,101,112,32,66,80,32,84,105,109,101,44,32,0,0,0,0,0,0,0,0,44,32,65,118,101,46,32,71,80,85,32,66,80,32,84,105,109,101,44,32,67,114,101,97,116,101,32,71,80,85,32,66,117,102,102,101,114,44,32,67,111,109,112,117,116,101,32,65,65,66,66,44,32,83,111,114,116,32,65,65,66,66,44,32,67,111,109,112,117,116,101,32,80,97,105,114,44,32,0,0,44,32,65,118,101,46,32,67,111,110,116,97,99,116,35,44,32,65,118,101,46,32,71,80,85,32,78,80,32,84,105,109,101,44,32,73,110,105,116,46,32,71,80,85,32,100,97,116,97,44,32,67,111,109,112,117,116,97,116,105,111,110,44,32,82,101,97,100,98,97,99,107,32,71,80,85,32,100,97,116,97,44,32,0,0,0,0,0,44,32,65,118,101,46,32,86,97,108,105,100,32,67,111,110,116,97,99,116,35,44,32,65,118,101,46,32,71,80,85,32,83,111,108,118,101,114,32,84,105,109,101,44,32,73,110,105,116,46,32,67,80,85,44,32,73,110,105,116,32,71,80,85,44,32,67,111,109,112,117,116,97,116,105,111,110,44,32,70,105,110,97,108,105,122,101,44,32,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,84,111,116,97,108,32,115,116,101,112,32,116,105,109,101,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,9,83,116,101,112,32,78,97,114,114,111,119,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,0,0,9,83,116,101,112,32,83,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,83,116,101,112,32,66,114,111,97,100,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,9,83,116,101,112,32,84,79,73,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,32,10,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,0,0,0,0,0,0,37,100,44,32,37,100,44,32,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,0,0,0,0,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,66,114,111,97,100,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,114,101,97,116,101,71,80,85,66,117,102,102,101,114,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,111,109,112,117,116,101,65,65,66,66,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,83,111,114,116,65,65,66,66,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,67,111,109,112,117,116,101,80,97,105,114,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,0,0,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,0,65,118,101,114,97,103,101,32,99,111,110,116,97,99,116,35,58,32,37,102,46,10,0,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,78,97,114,114,111,119,32,80,104,97,115,101,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,73,110,105,116,105,97,108,105,122,101,71,80,85,68,97,116,97,32,105,115,32,37,102,32,109,115,46,10,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,85,112,100,97,116,101,67,111,110,116,97,99,116,80,97,105,114,115,32,105,115,32,37,102,32,109,115,46,10,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,82,101,97,100,98,97,99,107,71,80,85,68,97,116,97,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,65,118,101,114,97,103,101,32,118,97,108,105,100,32,99,111,110,116,97,99,116,35,58,32,37,102,46,10,0,0,0,0,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,71,80,85,32,67,111,110,115,116,114,97,105,110,116,115,32,83,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,105,110,105,116,105,97,108,105,122,101,32,99,111,110,115,116,114,97,116,105,110,115,32,111,110,32,67,80,85,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,105,110,105,116,105,97,108,105,122,101,32,99,111,110,115,116,114,97,116,105,110,115,32,111,110,32,71,80,85,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,114,32,99,111,109,112,117,116,97,116,105,111,110,32,105,115,32,37,102,32,109,115,46,10,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,102,105,110,97,108,105,122,101,32,115,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,116,101,115,116,32,115,111,108,118,101,114,32,105,115,32,37,102,32,109,115,46,10,0,9,61,61,61,61,61,68,101,98,117,103,32,84,105,109,105,110,103,32,68,97,116,97,61,61,61,61,61,61,61,10,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,32,118,101,108,111,99,105,116,121,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,116,101,115,116,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,0,0,0,9,65,118,101,114,97,103,101,32,116,105,109,101,32,111,102,32,115,111,108,118,101,32,112,111,115,105,116,105,111,110,32,99,111,110,116,114,97,116,105,110,115,32,105,115,32,37,102,32,109,115,46,10,0,0,0,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,37,102,44,32,0,0,0,0,0,0,68,97,116,97,32,111,117,116,112,117,116,32,102,105,110,105,115,104,101,100,46,10,0,0,98,111,100,105,101,115,47,106,111,105,110,116,115,32,61,32,37,100,47,37,100,10,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,0,65,100,118,97,110,99,101,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,0,0,0,0,0,65,100,100,0,0,0,0,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,96,95,0,0,48,0,0,0,49,0,0,0,50,0,0,0,0,0,0,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,0,0,0,0,216,159,0,0,72,95,0,0,0,0,0,0,152,96,0,0,51,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,57,98,50,67,111,110,116,97,99,116,0,0,0,0,0,0,216,159,0,0,128,96,0,0,0,160,0,0,96,96,0,0,144,96,0,0,0,0,0,0,0,0,0,0,200,97,0,0,54,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,160,0,0,168,97,0,0,144,96,0,0,0,0,0,0,0,0,0,0,216,98,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,160,0,0,192,98,0,0,144,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,0,65,100,100,84,121,112,101,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,67,114,101,97,116,101,0,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,0,0,68,101,115,116,114,111,121,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,0,0,0,0,144,96,0,0,3,0,0,0,60,0,0,0,61,0,0,0,0,0,0,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,0,0,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,0,0,0,0,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,0,0,0,0,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,0,0,0,0,0,0,0,0,0,0,72,103,0,0,62,0,0,0,63,0,0,0,64,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,0,160,0,0,40,103,0,0,144,96,0,0,0,0,0,0,0,0,0,0,112,104,0,0,65,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,160,0,0,80,104,0,0,144,96,0,0,0,0,0,0,0,0,0,0,160,105,0,0,68,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,160,0,0,128,105,0,0,144,96,0,0,0,0,0,0,0,0,0,0,184,106,0,0,71,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,47,86,111,108,117,109,101,115,47,65,80,80,76,69,95,77,69,68,73,65,47,87,79,82,75,83,80,65,67,69,47,119,101,98,99,108,47,119,101,98,99,108,45,98,111,120,50,100,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,160,0,0,160,106,0,0,144,96,0,0,0,0,0,0,37,52,46,50,102,32,37,52,46,50,102,32,37,52,46,50,102,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20968);
/* memory initializer */ allocate([104,111,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,0,160,0,0,72,111,0,0,240,116,0,0,0,0,0,0,0,0,0,0,208,111,0,0,74,0,0,0,88,0,0,0,89,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,90,0,0,0,81,0,0,0,82,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,0,160,0,0,184,111,0,0,240,116,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,104,112,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,35,0,0,0,36,0,0,0,103,0,0,0,38,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,0,160,0,0,72,112,0,0,176,116,0,0,0,0,0,0,0,0,0,0,208,112,0,0,96,0,0,0,107,0,0,0,108,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,109,0,0,0,35,0,0,0,36,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,40,0,0,0,113,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,0,160,0,0,184,112,0,0,176,116,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,216,159,0,0,224,112,0,0,58,32,0,0,0,0,0,0,0,0,0,0,64,113,0,0,114,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,0,160,0,0,40,113,0,0,128,158,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,216,159,0,0,80,113,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,0,160,0,0,120,113,0,0,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,40,116,0,0,117,0,0,0,118,0,0,0,0,0,0,0,176,116,0,0,119,0,0,0,120,0,0,0,121,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,109,0,0,0,35,0,0,0,36,0,0,0,103,0,0,0,38,0,0,0,104,0,0,0,40,0,0,0,113,0,0,0,0,0,0,0,240,116,0,0,122,0,0,0,123,0,0,0,124,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,90,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,94,0,0,0,95,0,0,0,8,0,0,0,0,0,0,0,40,117,0,0,24,0,0,0,25,0,0,0,248,255,255,255,248,255,255,255,40,117,0,0,26,0,0,0,27,0,0,0,8,0,0,0,0,0,0,0,112,117,0,0,125,0,0,0,126,0,0,0,248,255,255,255,248,255,255,255,112,117,0,0,127,0,0,0,128,0,0,0,4,0,0,0,0,0,0,0,184,117,0,0,129,0,0,0,130,0,0,0,252,255,255,255,252,255,255,255,184,117,0,0,131,0,0,0,132,0,0,0,4,0,0,0,0,0,0,0,0,118,0,0,133,0,0,0,134,0,0,0,252,255,255,255,252,255,255,255,0,118,0,0,135,0,0,0,136,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,115,0,0,137,0,0,0,138,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,240,115,0,0,139,0,0,0,140,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,0,160,0,0,168,115,0,0,64,113,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,216,159,0,0,216,115,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,160,0,0,248,115,0,0,240,115,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,160,0,0,56,116,0,0,240,115,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,216,159,0,0,120,116,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,216,159,0,0,184,116,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,96,160,0,0,248,116,0,0,0,0,0,0,1,0,0,0,40,116,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,96,160,0,0,64,117,0,0,0,0,0,0,1,0,0,0,104,116,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,96,160,0,0,136,117,0,0,0,0,0,0,1,0,0,0,40,116,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,96,160,0,0,208,117,0,0,0,0,0,0,1,0,0,0,104,116,0,0,3,244,255,255,0,0,0,0,96,118,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,0,160,0,0,64,118,0,0,144,113,0,0,0,0,0,0,0,0,0,0,168,132,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,132,0,0,154,0,0,0,155,0,0,0,150,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,137,0,0,159,0,0,0,160,0,0,0,150,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,24,138,0,0,172,0,0,0,173,0,0,0,150,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,138,0,0,185,0,0,0,186,0,0,0,150,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,112,139,0,0,195,0,0,0,196,0,0,0,150,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,152,134,0,0,205,0,0,0,206,0,0,0,150,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,248,255,255,255,152,134,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,56,135,0,0,221,0,0,0,222,0,0,0,150,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,248,255,255,255,56,135,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,200,135,0,0,237,0,0,0,238,0,0,0,150,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,136,0,0,240,0,0,0,241,0,0,0,150,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,133,0,0,243,0,0,0,244,0,0,0,150,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,133,0,0,254,0,0,0,255,0,0,0,150,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,133,0,0,9,1,0,0,10,1,0,0,150,0,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,133,0,0,20,1,0,0,21,1,0,0,150,0,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,31,1,0,0,32,1,0,0,150,0,0,0,33,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,144,140,0,0,35,1,0,0,36,1,0,0,150,0,0,0,37,1,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,32,141,0,0,39,1,0,0,40,1,0,0,150,0,0,0,41,1,0,0,42,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,176,141,0,0,43,1,0,0,44,1,0,0,150,0,0,0,45,1,0,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,136,0,0,47,1,0,0,48,1,0,0,150,0,0,0,49,1,0,0,50,1,0,0,51,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,136,0,0,52,1,0,0,53,1,0,0,150,0,0,0,54,1,0,0,55,1,0,0,56,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,128,132,0,0,57,1,0,0,58,1,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,129,0,0,59,1,0,0,60,1,0,0,150,0,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,130,0,0,69,1,0,0,70,1,0,0,150,0,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,132,0,0,78,1,0,0,79,1,0,0,150,0,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,0,0,0,0,88,132,0,0,85,1,0,0,86,1,0,0,150,0,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,144,128,0,0,92,1,0,0,93,1,0,0,150,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,0,160,0,0,120,128,0,0,0,113,0,0,0,0,0,0,0,0,0,0,32,129,0,0,92,1,0,0,94,1,0,0,150,0,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,216,159,0,0,0,129,0,0,96,160,0,0,232,128,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,129,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,96,160,0,0,64,129,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,129,0,0,2,0,0,0,0,0,0,0,240,129,0,0,92,1,0,0,107,1,0,0,150,0,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,216,159,0,0,208,129,0,0,96,160,0,0,168,129,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,232,129,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,96,160,0,0,16,130,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,232,129,0,0,2,0,0,0,0,0,0,0,176,130,0,0,92,1,0,0,115,1,0,0,150,0,0,0,116,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,122,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,96,160,0,0,136,130,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,232,129,0,0,2,0,0,0,0,0,0,0,40,131,0,0,92,1,0,0,123,1,0,0,150,0,0,0,124,1,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,96,160,0,0,0,131,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,232,129,0,0,2,0,0,0,0,0,0,0,160,131,0,0,92,1,0,0,131,1,0,0,150,0,0,0,124,1,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,0,160,0,0,120,131,0,0,40,131,0,0,0,0,0,0,0,0,0,0,8,132,0,0,92,1,0,0,132,1,0,0,150,0,0,0,124,1,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,160,0,0,224,131,0,0,40,131,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,0,160,0,0,24,132,0,0,144,128,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,0,160,0,0,64,132,0,0,144,128,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,0,160,0,0,104,132,0,0,144,128,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,0,160,0,0,144,132,0,0,144,128,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,0,160,0,0,184,132,0,0,144,128,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,216,159,0,0,0,133,0,0,96,160,0,0,224,132,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,133,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,96,160,0,0,64,133,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,133,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,96,160,0,0,128,133,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,133,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,96,160,0,0,192,133,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,133,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,216,159,0,0,72,134,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,216,159,0,0,104,134,0,0,96,160,0,0,0,134,0,0,0,0,0,0,3,0,0,0,144,128,0,0,2,0,0,0,96,134,0,0,2,0,0,0,144,134,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,216,159,0,0,8,135,0,0,96,160,0,0,192,134,0,0,0,0,0,0,3,0,0,0,144,128,0,0,2,0,0,0,96,134,0,0,2,0,0,0,48,135,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,216,159,0,0,168,135,0,0,96,160,0,0,96,135,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,192,135,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,96,160,0,0,232,135,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,192,135,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,216,159,0,0,104,136,0,0,96,160,0,0,80,136,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,128,136,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,96,160,0,0,168,136,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,128,136,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,216,159,0,0,64,137,0,0,96,160,0,0,40,137,0,0,0,0,0,0,1,0,0,0,96,137,0,0,0,0,0,0,96,160,0,0,224,136,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,104,137,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,96,160,0,0,232,137,0,0,0,0,0,0,1,0,0,0,96,137,0,0,0,0,0,0,96,160,0,0,160,137,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,0,138,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,216,159,0,0,152,138,0,0,96,160,0,0,128,138,0,0,0,0,0,0,1,0,0,0,184,138,0,0,0,0,0,0,96,160,0,0,56,138,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,192,138,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,96,160,0,0,64,139,0,0,0,0,0,0,1,0,0,0,184,138,0,0,0,0,0,0,96,160,0,0,248,138,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,88,139,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,216,159,0,0,216,139,0,0,96,160,0,0,144,139,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,248,139,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,216,159,0,0,104,140,0,0,96,160,0,0,32,140,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,136,140,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,216,159,0,0,248,140,0,0,96,160,0,0,176,140,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,24,141,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,216,159,0,0,136,141,0,0,96,160,0,0,64,141,0,0,0,0,0,0,2,0,0,0,144,128,0,0,2,0,0,0,168,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28420);
/* memory initializer */ allocate([109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,1,0,0,0,0,0,0,176,155,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,72,157,0,0,134,1,0,0,135,1,0,0,136,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,0,160,0,0,56,157,0,0,208,157,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,216,159,0,0,192,157,0,0,0,0,0,0,24,158,0,0,137,1,0,0,138,1,0,0,139,1,0,0,0,0,0,0,0,0,0,0,128,158,0,0,140,1,0,0,141,1,0,0,116,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,0,160,0,0,8,158,0,0,208,157,0,0,0,0,0,0,0,0,0,0,88,158,0,0,137,1,0,0,142,1,0,0,139,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,0,160,0,0,64,158,0,0,24,158,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,0,160,0,0,104,158,0,0,208,157,0,0,0,0,0,0,0,0,0,0,224,158,0,0,143,1,0,0,144,1,0,0,145,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,216,159,0,0,184,158,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,0,160,0,0,208,158,0,0,208,157,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,0,160,0,0,240,158,0,0,200,158,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,160,0,0,40,159,0,0,24,159,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,160,0,0,136,159,0,0,24,159,0,0,0,0,0,0,0,160,0,0,96,159,0,0,176,159,0,0,0,0,0,0,0,0,0,0,80,159,0,0,146,1,0,0,147,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,151,1,0,0,152,1,0,0,153,1,0,0,0,0,0,0,72,160,0,0,146,1,0,0,154,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,160,0,0,32,160,0,0,80,159,0,0,0,0,0,0,0,0,0,0,168,160,0,0,146,1,0,0,158,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,159,1,0,0,160,1,0,0,161,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,160,0,0,128,160,0,0,80,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+38660);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            internalFormat = GLctx.RGBA;
            break;
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            switch (format) {
              case 0x1903 /* GL_RED */:
                sizePerPixel = 2;
                break;
              case 0x8277 /* GL_RG */:
                sizePerPixel = 2*2;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*2;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['webGLContextAttributes'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = 0;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
   
        GLctx.getSupportedExtensions().forEach(function(ext) {
          ext = ext.replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};var CL={cl_init:0,cl_extensions:["KHR_gl_sharing","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},init:function () {
        if (CL.cl_init == 0) {
  
          if (ENVIRONMENT_IS_NODE) {
            console.log('WebCL-Translator V2.0 !');
            try {
  
              WebCLEvent      = webcl.WebCLEvent;
              WebCLSampler    = webcl.WebCLSampler;
              WebCLContext    = webcl.WebCLContext;
              WebCLProgram    = webcl.WebCLProgram;
              WebCLException  = webcl.WebCLException;
  
            } catch (e) {
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("You are using node, make sure you have node-webcl modules from Motorola.\n");
              console.error("You must define webcl=require('webcl-node'); before require this file.\n");
  
              exit(1);
            }
  
          } else {
            console.log('%c WebCL-Translator V2.0 ! ', 'background: #222; color: #bada55');
            try {
  
              // Add webcl constant for parser
              /*
              Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
              Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
              Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });
              Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
              Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
              Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
              Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
              */
              webcl["SAMPLER"      ] = 0x1300; 
              webcl["IMAGE2D"      ] = 0x1301;
              webcl["IMAGE3D"      ] = 0x1302;
              webcl["UNSIGNED_LONG"] = 0x1304;
              webcl["LONG"         ] = 0x1303;
              webcl["MAP_READ"     ] = 0x1;
              webcl["MAP_WRITE"    ] = 0x2;
  
            } catch (e) {
              alert("Unfortunately your system does not support WebCL. " +
              "Make sure that you have WebKit Samsung or Firefox Nokia plugin. ");
  
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin.\n");
  
              exit(1);
            }
          }
  
          for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
            if (webcl.enableExtension(CL.cl_extensions[i])) {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
            } else {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
            }
          }
          CL.cl_init = 1;
        }
  
        return CL.cl_init;
      },udid:function (obj) {
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
        var _security = 10;
        do {
          //var _uuid = [];
          //_uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
          //for (var i = 1; i < 7; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
          //_id = _uuid.join('');
  
          _id = Math.random() * 9000000 | 0 + 1000000
        } while (_id in CL.cl_objects && --_security > 0)
  
        assert(!(_id in CL.cl_objects), 'UDID not unique !!!!!!');
  
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          //Object.defineProperty(obj, "udid", { value : _id,writable : false });
          obj["udid"] = _id;
          CL.cl_objects[_id]=obj;
        }
  
        return _id;
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
  
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ????
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
  
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(",");
  
          // Get type of the line
          var _type = CL.parseType(_var[i]);
  
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/);
          if (_res != null) _arrayNum = _res;
  
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" ");
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
  
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
  
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 50;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 50 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) {
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
  
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _array = _second_part.split(",");
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
  
            } else if (_type == -1) {
  
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" ");
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
  
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
  
            } else {
              _param.push(_type);
  
            }
          }
  
          CL.cl_kernels_sig[_name] = _param;
  
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          case webcl.HALF_FLOAT:
            _type = webcl.HALF_FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break;
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:
            _sizeOrder = 4;
            break;
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) {
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) {
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getCopyPointerToArrayPowTwo:function (ptr,size,type) {
        var _host_ptr = null
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int8Array(_offset);
              _host_ptr.set( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int16Array(_offset);
              _host_ptr.set( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int32Array(_offset);
              _host_ptr.set( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint8Array(_offset);
              _host_ptr.set( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint16Array(_offset);
              _host_ptr.set( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint32Array(_offset);
              _host_ptr.set( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Float32Array(_offset);
              _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          var _size = size >> 2;
          var _offset = CL.getNextPowOfTwo(_size);
          _host_ptr = new Float32Array(_offset);
          _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getNextPowOfTwo:function (v) {
        // Accept 1 / 2 / 3 / 4
        if (v <= 4) return v;
        // Accept 8 / 16 / 32
        var _v = v;
        _v--;
        _v |= _v >> 1;
        _v |= _v >> 2;
        _v |= _v >> 4;
        _v |= _v >> 8;
        _v |= _v >> 16;
        _v++;
        return _v
      },copyDataToHeap:function (dest, src, size, type) {
  
        // Copy data to Emscripten heap
        //var dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);
        //dataHeap.set( new Uint8Array(_host_ptr.buffer) );
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _data_heap = new Int8Array(Module.HEAP8.buffer, dest, size);
              _data_heap.set( new Int8Array(src) );
              break;
            case webcl.SIGNED_INT16:
              var _data_heap = new Int16Array(Module.HEAP16.buffer, dest, size >> 1);
              _data_heap.set( new Int16Array(src) );
              break;
            case webcl.SIGNED_INT32:
              var _data_heap = new Int32Array(Module.HEAP32.buffer, dest, size >> 2);
              _data_heap.set( new Int32Array(src) );
              break;
            case webcl.UNSIGNED_INT8:
              var _data_heap = new Uint8Array(Module.HEAPU8.buffer, dest, size);
              _data_heap.set( new Uint8Array(src) );
              break;
            case webcl.UNSIGNED_INT16:
              var _data_heap = new Uint16Array(Module.HEAPU16.buffer, dest, size >> 1);
              _data_heap.set( new Uint16Array(src) );
              break;
            case webcl.UNSIGNED_INT32:
              var _data_heap = new Uint32Array(Module.HEAPU32.buffer, dest, size >> 2);
              _data_heap.set( new Uint32Array(src) );
              break;
            default:
              var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
              _data_heap.set( new Float32Array(src) );
              break;
          }
        } else {
          var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
          _data_heap.set( new Float32Array(src) );
        }
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
  
        return _error;
      }};function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
  
          // Call the callback
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try {
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      }
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _floorf=Math_floor;

  var _emscripten_postinvoke=true;


  function _clGetDeviceInfo(device,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var  _info = null;
  
      try {
  
          var _object = CL.cl_objects[device];
  
        switch (param_name) {
          case 0x102B /*CL_DEVICE_NAME*/ :
            var _type = _object.getInfo(webcl.DEVICE_TYPE);
            switch (_type) {
              case webcl.DEVICE_TYPE_CPU:
                _info = "WEBCL_DEVICE_CPU";
              break;
              case webcl.DEVICE_TYPE_GPU:
                _info = "WEBCL_DEVICE_GPU";
              break;
              case webcl.DEVICE_TYPE_ACCELERATOR:
                _info = "WEBCL_DEVICE_ACCELERATOR";
              break;
              case webcl.DEVICE_TYPE_DEFAULT:
                _info = "WEBCL_DEVICE_DEFAULT";
              break;
            }
          break;
          case 0x102C /*CL_DEVICE_VENDOR*/ :
            _info = "WEBCL_DEVICE_VENDOR";
          break;
          case 0x100B /*CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE*/ :
            _info = 0;
          break;
          case 0x1030 /*CL_DEVICE_EXTENSIONS*/ :
            _info = webcl.getSupportedExtensions().join(' ') ;
          break;
          case 0x101A /*CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE*/ :
            _info = _object.getInfo(webcl.DEVICE_MEM_BASE_ADDR_ALIGN) >> 3;
          break;
          default:
            _info = _object.getInfo(param_name);
        }
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value_size == 8) {
          if (param_value != 0) (tempI64 = [_info>>>0,((+(Math_abs(_info))) >= 1.0 ? (_info > 0.0 ? ((Math_min((+(Math_floor((_info)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
        } else {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        }
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
  
        if (param_name != webcl.DEVICE_PROFILE) _info += " ";
        if (param_value != 0) writeStringToMemory(_info, param_value);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else if (_info instanceof WebCLPlatform) {
  
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
      var _local_work_size = (local_work_size != 0) ? [] : null;
  
      var _global_work_offset = [];
      var _global_work_size = [];
  
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        else
          _global_work_offset.push(0);
  
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _clEnqueueWriteBufferRect(command_queue,buffer,blocking_write,buffer_origin,host_origin,region,buffer_row_pitch,buffer_slice_pitch,host_row_pitch,host_slice_pitch,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _block = blocking_write ? true : false;
      var _event = null;
      var _event_wait_list = [];
  
      var _buffer_origin = [];
      var _host_origin = [];
      var _region = [];
  
      for (var i = 0; i < 3; i++) {
        _buffer_origin.push(HEAP32[(((buffer_origin)+(i*4))>>2)]);
        _host_origin.push(HEAP32[(((host_origin)+(i*4))>>2)]);
        _region.push(HEAP32[(((region)+(i*4))>>2)]);
      }
  
      // console.info("/!\\ clEnqueueWriteBufferRect : Check the size of the ptr '"+_region.reduce(function (a, b) { return a * b; })+"'... need to be more tested");
      var _host_ptr = CL.getCopyPointerToArray(ptr,_region.reduce(function (a, b) { return a * b; }),CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
  
        CL.cl_objects[command_queue].enqueueWriteBufferRect(CL.cl_objects[buffer],_block,_buffer_origin,_host_origin,_region,buffer_row_pitch,buffer_slice_pitch,host_row_pitch,host_slice_pitch,_host_ptr,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = arg_index;
  
      var _sig = _kernel.sig[_posarg];
  
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
  
  
          } else {
  
            var _array = CL.getCopyPointerToArrayPowTwo(arg_value,arg_size,[[_sig,1]]);
  
            _kernel.setArg(_posarg,_array);
  
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  function _vprintf(format, va_arg) {
      return _printf(format, HEAP32[((va_arg)>>2)]);
    }


  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

  var _BDtoIHigh=true;

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _block = blocking_read ? true : false;
      var _event = null;
      var _event_wait_list = [];
      var _host_ptr = CL.getHostPtrArray(cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
  
        // Copy array to heap
        CL.copyDataToHeap(ptr,_host_ptr.buffer,cb,CL.cl_pn_type);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueCopyBufferRect(command_queue,src_buffer,dst_buffer,src_origin,dst_origin,region,src_row_pitch,src_slice_pitch,dst_row_pitch,dst_slice_pitch,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = [];
      var _src_origin = [];
      var _dest_origin = [];
      var _region = [];
  
      for (var i = 0; i < 3; i++) {
        _src_origin.push( HEAP32[(((src_origin)+(i*4))>>2)]);
        _dest_origin.push( HEAP32[(((dst_origin)+(i*4))>>2)]);
        _region.push( HEAP32[(((region)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueCopyBufferRect(CL.cl_objects[src_buffer],CL.cl_objects[dst_buffer],_src_origin,_dest_origin,_region,src_row_pitch,src_slice_pitch,dst_row_pitch,dst_slice_pitch,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_landingpad=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  var _emscripten_preinvoke=true;

  function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try {
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var _cosf=Math_cos;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _clGetDeviceIDs(platform,device_type_i64_1,device_type_i64_2,num_entries,devices,num_devices) {
      // Assume the device_type is i32
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && devices != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_devices == 0 && devices == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( platform != 0 && !(platform in CL.cl_objects)) {
        return webcl.INVALID_PLATFORM;
      }
  
      var _device = null;
  
      try {
  
        // If platform is NULL use the first platform found ...
        if (platform == 0) {
          var _platforms = webcl.getPlatforms();
          if (_platforms.length == 0) {
            return webcl.INVALID_PLATFORM;
          }
  
          // Create a new UDID
          platform = CL.udid(_platforms[0]);
        }
  
        var _platform = CL.cl_objects[platform];
  
        // Fix -1 type
        if (device_type_i64_1 == -1) device_type_i64_1 = webcl.DEVICE_TYPE_ALL;
  
  
        _devices = _platform.getDevices(device_type_i64_1);
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_devices != 0) {
        HEAP32[((num_devices)>>2)]=_devices.length /* Num of device */;
      }
  
      if (devices != 0) {
        for (var i = 0; i < Math.min(num_entries,_devices.length); i++) {
          var _id = CL.udid(_devices[i]);
          HEAP32[(((devices)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
  
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _clCreateContext(properties,num_devices,devices,pfn_notify,user_data,cl_errcode_ret) {
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer
      }
  
      var _id = null;
      var _context = null;
  
      try {
  
        var _platform = null;
        var _devices = [];
        var _glclSharedContext = false;
  
        // Verify the device, theorically on OpenCL there are CL_INVALID_VALUE when devices or num_devices is null,
        // WebCL can work using default device / platform, we check only if parameter are set.
        for (var i = 0; i < num_devices; i++) {
          var _idxDevice = HEAP32[(((devices)+(i*4))>>2)];
            _devices.push(CL.cl_objects[_idxDevice]);
        }
  
        // Verify the property
        var _propertiesCounter = 0;
        var _properties = [];
  
        if (properties != 0) {
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200B) /*CL_WGL_HDC_KHR*/:
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:
                _propertiesCounter ++;
                _glclSharedContext = true;
  
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0;
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (num_devices > 0) {
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
  
            _context = webcl.createContext(Module.ctx,_devices);
  
          } else {
  
            _context = webcl.createContext(_devices);
  
          }
        } else if (_platform != null) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx,_platform);
          } else {
            _context = webcl.createContext(_platform);
          }
  
        } else {
          // If no device and no platfomr peek the first one
  
          // Search platform
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLPlatform) {
              _platform = CL.cl_objects[obj];
              break;
            }
          }
          if (_platform == null) {
            var _platforms = webcl.getPlatforms();
  
            _platform = _platforms[0];
  
            CL.udid(_platforms[i]);
          }
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_platform);
          } else {
            _context = webcl.createContext(_platform);
          }
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      //Object.defineProperty(_context, "properties", { value : _properties,writable : false });
      _context["properties"] = _properties;
  
  
      return _id;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
  
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
  
  
        _kernel = CL.cl_objects[program].createKernel(_name);
  
        //Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        //Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
        _kernel["name"] = _name;
        _kernel["sig"] = CL.cl_kernels_sig[_name];
  
  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _clGetKernelWorkGroupInfo(kernel,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      try {
  
        var _info = CL.cl_objects[kernel].getWorkGroupInfo(CL.cl_objects[device], param_name);
  
        if(typeof(_info) == "number") {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Int32Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else {
  
          console.error("clGetKernelWorkGroupInfo: unknow type of info '"+_info+"'")
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try {
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _block = blocking_write ? true : false;
      var _event_wait_list = [];
      var _host_ptr = CL.getCopyPointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32
      assert(flags_i64_2 == 0, 'Invalid flags i64');
  
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
  
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type);
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      }
  
      try {
  
  
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      //Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _buffer["flags"] = flags_i64_1;
      _id = CL.udid(_buffer);
  
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
  
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0;
          }
        }
      }
      **** **** **** **** **** **** **** ****/
  
  
      return _id;
    }


  function _clReleaseEvent(event) {
  
      // If is an object retain don't release it until retains > 0...
      if (event in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[event] - 1;
  
        CL.cl_objects_retains[event] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[event].release();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[event];
  
  
      return webcl.SUCCESS;
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _clGetPlatformInfo(platform,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
  
      var _info = null;
  
      try {
  
  
        switch (param_name) {
          case 0x0902 /*CL_PLATFORM_NAME*/ :
            _info = "WEBCL_PLATFORM_NAME";
          break;
          case 0x0903 /*CL_PLATFORM_VENDOR*/ :
            _info = "WEBCL_PLATFORM_VENDOR";
          break;
            case 0x0904 /*CL_PLATFORM_EXTENSIONS*/ :
            _info = "WEBCL_PLATFORM_EXTENSIONS";
          break;
          default:
            _info = CL.cl_objects[platform].getInfo(param_name);
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
        var _info = "undefined";
  
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
  
        return _error;
      }
  
      if (param_name == webcl.PLATFORM_VERSION) _info += " ";
  
      if (param_value != 0) {
        writeStringToMemory(_info, param_value);
      }
  
      if (param_value_size_ret != 0) {
        HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
      }
  
      return webcl.SUCCESS;
  
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
  
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
  
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }


  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _sinf=Math_sin;

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options);
  
        if (_option) {
          // Add space after -D
          _option = _option.replace(/-D/g, "-D ");
  
          // Remove all the multispace
          _option = _option.replace(/\s{2,}/g, " ");
        }
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          var _num_devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_NUM_DEVICES);
  
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES);
  
          _devices = _devices.slice(0,_num_devices);
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return
           */
          _callback = function() {
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data)
          };
        }
  
  
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidii(x) { Module["printErr"]("Invalid function pointer called with signature 'vidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidi(x) { Module["printErr"]("Invalid function pointer called with signature 'vidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ddd(x) { Module["printErr"]("Invalid function pointer called with signature 'ddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidi(index,a1,a2,a3) {
  try {
    Module["dynCall_vidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ddd(index,a1,a2) {
  try {
    return Module["dynCall_ddd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_vidii": nullFunc_vidii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vidi": nullFunc_vidi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_ddd": nullFunc_ddd, "nullFunc_di": nullFunc_di, "nullFunc_dd": nullFunc_dd, "nullFunc_viid": nullFunc_viid, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_vidii": invoke_vidii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidi": invoke_vidi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_ddd": invoke_ddd, "invoke_di": invoke_di, "invoke_dd": invoke_dd, "invoke_viid": invoke_viid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_sqrtf": _sqrtf, "_fread": _fread, "___cxa_guard_acquire": ___cxa_guard_acquire, "_fmodl": _fmodl, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "_clCreateContext": _clCreateContext, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_fsync": _fsync, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_clCreateCommandQueue": _clCreateCommandQueue, "___cxa_pure_virtual": ___cxa_pure_virtual, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_send": _send, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "___resumeException": ___resumeException, "_clCreateProgramWithSource": _clCreateProgramWithSource, "_freelocale": _freelocale, "_clGetPlatformInfo": _clGetPlatformInfo, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_once": _pthread_once, "_printf": _printf, "_clCreateKernel": _clCreateKernel, "_clSetKernelArg": _clSetKernelArg, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_catopen": _catopen, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "___cxa_guard_abort": ___cxa_guard_abort, "_clReleaseEvent": _clReleaseEvent, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "_vfprintf": _vfprintf, "___cxa_allocate_exception": ___cxa_allocate_exception, "_clEnqueueWriteBufferRect": _clEnqueueWriteBufferRect, "_pwrite": _pwrite, "_clEnqueueCopyBufferRect": _clEnqueueCopyBufferRect, "_open": _open, "_uselocale": _uselocale, "___errno_location": ___errno_location, "___cxa_end_catch": ___cxa_end_catch, "_clGetPlatformIDs": _clGetPlatformIDs, "_strftime": _strftime, "_sinf": _sinf, "_clFinish": _clFinish, "_fseek": _fseek, "_clGetDeviceIDs": _clGetDeviceIDs, "_fclose": _fclose, "_floorf": _floorf, "_pthread_key_create": _pthread_key_create, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_clGetKernelWorkGroupInfo": _clGetKernelWorkGroupInfo, "_clCreateBuffer": _clCreateBuffer, "_recv": _recv, "_fgetc": _fgetc, "_abort": _abort, "_clBuildProgram": _clBuildProgram, "_fopen": _fopen, "_read": _read, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_cosf": _cosf, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_calloc": _calloc, "_clGetDeviceInfo": _clGetDeviceInfo, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "__reallyNegative": __reallyNegative, "_catgets": _catgets, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "_fileno": _fileno, "__exit": __exit, "_vprintf": _vprintf, "__arraySum": __arraySum, "_fseeko": _fseeko, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "_fflush": _fflush, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_exit": _exit, "_clReleaseMemObject": _clReleaseMemObject, "_pthread_setspecific": _pthread_setspecific, "_copysign": _copysign, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_copysignl": _copysignl, "_strerror": _strerror, "_ftello": _ftello, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_vidii=env.nullFunc_vidii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_vidi=env.nullFunc_vidi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_ddd=env.nullFunc_ddd;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_ddd=env.invoke_ddd;
  var invoke_di=env.invoke_di;
  var invoke_dd=env.invoke_dd;
  var invoke_viid=env.invoke_viid;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _sqrtf=env._sqrtf;
  var _fread=env._fread;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _fmodl=env._fmodl;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var _clCreateContext=env._clCreateContext;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var ___resumeException=env.___resumeException;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var _freelocale=env._freelocale;
  var _clGetPlatformInfo=env._clGetPlatformInfo;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_once=env._pthread_once;
  var _printf=env._printf;
  var _clCreateKernel=env._clCreateKernel;
  var _clSetKernelArg=env._clSetKernelArg;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _catopen=env._catopen;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _clReleaseEvent=env._clReleaseEvent;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _clEnqueueWriteBufferRect=env._clEnqueueWriteBufferRect;
  var _pwrite=env._pwrite;
  var _clEnqueueCopyBufferRect=env._clEnqueueCopyBufferRect;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var ___errno_location=env.___errno_location;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _clGetPlatformIDs=env._clGetPlatformIDs;
  var _strftime=env._strftime;
  var _sinf=env._sinf;
  var _clFinish=env._clFinish;
  var _fseek=env._fseek;
  var _clGetDeviceIDs=env._clGetDeviceIDs;
  var _fclose=env._fclose;
  var _floorf=env._floorf;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _clGetKernelWorkGroupInfo=env._clGetKernelWorkGroupInfo;
  var _clCreateBuffer=env._clCreateBuffer;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _abort=env._abort;
  var _clBuildProgram=env._clBuildProgram;
  var _fopen=env._fopen;
  var _read=env._read;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _cosf=env._cosf;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _calloc=env._calloc;
  var _clGetDeviceInfo=env._clGetDeviceInfo;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var __reallyNegative=env.__reallyNegative;
  var _catgets=env._catgets;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var _vprintf=env._vprintf;
  var __arraySum=env.__arraySum;
  var _fseeko=env._fseeko;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var _fflush=env._fflush;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _exit=env._exit;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var _pthread_setspecific=env._pthread_setspecific;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _copysignl=env._copysignl;
  var _strerror=env._strerror;
  var _ftello=env._ftello;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN12b2BroadPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN13b2DynamicTreeC2Ev($3);
 $4 = (($3) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 48|0);
 HEAP32[$5>>2] = 16;
 $6 = (($3) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = (($3) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*12)|0;
 __THREW__ = 0;
 $10 = (invoke_ii(419,($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 6;
  } else {
   $13 = (($3) + 44|0);
   HEAP32[$13>>2] = $10;
   $14 = (($3) + 36|0);
   HEAP32[$14>>2] = 16;
   $15 = (($3) + 40|0);
   HEAP32[$15>>2] = 0;
   $16 = (($3) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17<<2;
   __THREW__ = 0;
   $19 = (invoke_ii(419,($18|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    label = 6;
   } else {
    $22 = (($3) + 32|0);
    HEAP32[$22>>2] = $19;
    $23 = (($3) + 76|0);
    HEAP32[$23>>2] = 0;
    __THREW__ = 0;
    $24 = (invoke_ii(420,124)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     label = 6;
    } else {
     __THREW__ = 0;
     invoke_vi(421,($24|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $32 = ___cxa_find_matching_catch()|0;
      $33 = tempRet0;
      $1 = $32;
      $2 = $33;
      __ZdlPv($24);
      break;
     } else {
      $29 = (($3) + 60|0);
      HEAP32[$29>>2] = $24;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $1 = $30;
  $2 = $31;
 }
 __THREW__ = 0;
 invoke_vi(422,($3|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 }
 $36 = $1;
 $37 = $2;
 ___resumeException($36|0);
 // unreachable;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN12b2BroadPhaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi(423,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = (($3) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  invoke_vi(423,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __ZN13b2DynamicTreeD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __THREW__ = 0;
 invoke_vi(422,($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 }
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this,$aabb,$userData) {
 $this = $this|0;
 $aabb = $aabb|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($3,$4,$5)|0);
 $proxyId = $6;
 $7 = (($3) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $proxyId;
 __ZN12b2BroadPhase10BufferMoveEi($3,$10);
 $11 = $proxyId;
 STACKTOP = sp;return ($11|0);
}
function __ZN12b2BroadPhase10BufferMoveEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = (($2) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = (($2) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $oldBuffer = $9;
  $10 = (($2) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<1;
  HEAP32[$10>>2] = $12;
  $13 = (($2) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14<<2;
  $16 = (__Z7b2Alloci($15)|0);
  $17 = (($2) + 32|0);
  HEAP32[$17>>2] = $16;
  $18 = (($2) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $oldBuffer;
  $21 = (($2) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<2;
  _memcpy(($19|0),($20|0),($23|0))|0;
  $24 = $oldBuffer;
  __Z6b2FreePv($24);
 }
 $25 = $1;
 $26 = (($2) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($2) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27<<2)|0);
 HEAP32[$30>>2] = $25;
 $31 = (($2) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this,$proxyId,$aabb,$displacement) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 $aabb = $aabb|0;
 $displacement = $displacement|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $aabb;
 $3 = $displacement;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (__ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($4,$5,$6,$7)|0);
 $9 = $8&1;
 $buffer = $9;
 $10 = $buffer;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 __ZN12b2BroadPhase10BufferMoveEi($4,$12);
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase13QueryCallbackEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $proxyId;
 $3 = $1;
 $4 = $2;
 $5 = (($3) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $52 = $$pre_trunc&1;
  STACKTOP = sp;return ($52|0);
 }
 $8 = (($3) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($3) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $13 = (($3) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $oldBuffer = $14;
  $15 = (($3) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  HEAP32[$15>>2] = $17;
  $18 = (($3) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*12)|0;
  $21 = (__Z7b2Alloci($20)|0);
  $22 = (($3) + 44|0);
  HEAP32[$22>>2] = $21;
  $23 = (($3) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $oldBuffer;
  $26 = (($3) + 52|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27*12)|0;
  _memcpy(($24|0),($25|0),($28|0))|0;
  $29 = $oldBuffer;
  __Z6b2FreePv($29);
 }
 $30 = $2;
 $31 = (($3) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (__Z5b2MinIiET_S0_S0_($30,$32)|0);
 $34 = (($3) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($3) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + (($35*12)|0)|0);
 HEAP32[$38>>2] = $33;
 $39 = $2;
 $40 = (($3) + 56|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (__Z5b2MaxIiET_S0_S0_($39,$41)|0);
 $43 = (($3) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($3) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($44*12)|0)|0);
 $48 = (($47) + 4|0);
 HEAP32[$48>>2] = $42;
 $49 = (($3) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$49>>2] = $51;
 $$expand_i1_val2 = 1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $52 = $$pre_trunc&1;
 STACKTOP = sp;return ($52|0);
}
function __Z5b2MinIiET_S0_S0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = $0;
  $7 = $5;
 } else {
  $6 = $1;
  $7 = $6;
 }
 STACKTOP = sp;return ($7|0);
}
function __Z5b2MaxIiET_S0_S0_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)>($3|0);
 if ($4) {
  $5 = $0;
  $7 = $5;
 } else {
  $6 = $1;
  $7 = $6;
 }
 STACKTOP = sp;return ($7|0);
}
function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold,$circleA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $circleA = $circleA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $d = 0, $distSqr = 0.0, $pA = 0, $pB = 0, $rA = 0.0, $rB = 0.0, $radius = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pA = sp + 48|0;
 $pB = sp + 56|0;
 $d = sp + 24|0;
 $0 = $manifold;
 $1 = $circleA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $5 = $0;
 $6 = (($5) + 60|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = $1;
 $9 = (($8) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($pA,$7,$9);
 $10 = $4;
 $11 = $3;
 $12 = (($11) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($pB,$10,$12);
 __ZmiRK6b2Vec2S1_($d,$pB,$pA);
 $13 = (+__Z5b2DotRK6b2Vec2S1_($d,$d));
 $distSqr = $13;
 $14 = $1;
 $15 = (($14) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $rA = $16;
 $17 = $3;
 $18 = (($17) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $rB = $19;
 $20 = $rA;
 $21 = $rB;
 $22 = $20 + $21;
 $radius = $22;
 $23 = $distSqr;
 $24 = $radius;
 $25 = $radius;
 $26 = $24 * $25;
 $27 = $23 > $26;
 if ($27) {
  STACKTOP = sp;return;
 } else {
  $28 = $0;
  $29 = (($28) + 56|0);
  HEAP32[$29>>2] = 0;
  $30 = $0;
  $31 = (($30) + 48|0);
  $32 = $1;
  $33 = (($32) + 12|0);
  ;HEAP32[$31+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;
  $34 = $0;
  $35 = (($34) + 40|0);
  __ZN6b2Vec27SetZeroEv($35);
  $36 = $0;
  $37 = (($36) + 60|0);
  HEAP32[$37>>2] = 1;
  $38 = $0;
  $39 = $3;
  $40 = (($39) + 12|0);
  ;HEAP32[$38+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;
  $41 = $0;
  $42 = (($41) + 16|0);
  HEAP32[$42>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold,$polygonA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $polygonA = $polygonA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cLocal = 0, $faceCenter = 0;
 var $i = 0, $normalIndex = 0, $normals = 0, $radius = 0.0, $s = 0.0, $separation = 0.0, $separation1 = 0.0, $u1 = 0.0, $u2 = 0.0, $v1 = 0, $v2 = 0, $vertIndex1 = 0, $vertIndex2 = 0, $vertexCount = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 16|0;
 $cLocal = sp + 24|0;
 $5 = sp + 192|0;
 $v1 = sp + 88|0;
 $v2 = sp + 96|0;
 $6 = sp + 104|0;
 $7 = sp + 112|0;
 $8 = sp + 128|0;
 $9 = sp + 8|0;
 $10 = sp + 152|0;
 $11 = sp + 144|0;
 $12 = sp + 48|0;
 $13 = sp + 56|0;
 $faceCenter = sp + 168|0;
 $14 = sp + 64|0;
 $15 = sp + 72|0;
 $0 = $manifold;
 $1 = $polygonA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $16 = $0;
 $17 = (($16) + 60|0);
 HEAP32[$17>>2] = 0;
 $18 = $4;
 $19 = $3;
 $20 = (($19) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($c,$18,$20);
 $21 = $2;
 __Z6b2MulTRK11b2TransformRK6b2Vec2($cLocal,$21,$c);
 $normalIndex = 0;
 $separation = -3.4028234663852886E+38;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $3;
 $26 = (($25) + 8|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 + $27;
 $radius = $28;
 $29 = $1;
 $30 = (($29) + 148|0);
 $31 = HEAP32[$30>>2]|0;
 $vertexCount = $31;
 $32 = $1;
 $33 = (($32) + 20|0);
 $vertices = $33;
 $34 = $1;
 $35 = (($34) + 84|0);
 $normals = $35;
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = $vertexCount;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = $normals;
  $41 = (($40) + ($39<<3)|0);
  $42 = $i;
  $43 = $vertices;
  $44 = (($43) + ($42<<3)|0);
  __ZmiRK6b2Vec2S1_($5,$cLocal,$44);
  $45 = (+__Z5b2DotRK6b2Vec2S1_($41,$5));
  $s = $45;
  $46 = $s;
  $47 = $radius;
  $48 = $46 > $47;
  if ($48) {
   label = 4;
   break;
  }
  $49 = $s;
  $50 = $separation;
  $51 = $49 > $50;
  if ($51) {
   $52 = $s;
   $separation = $52;
   $53 = $i;
   $normalIndex = $53;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 $56 = $normalIndex;
 $vertIndex1 = $56;
 $57 = $vertIndex1;
 $58 = (($57) + 1)|0;
 $59 = $vertexCount;
 $60 = ($58|0)<($59|0);
 if ($60) {
  $61 = $vertIndex1;
  $62 = (($61) + 1)|0;
  $63 = $62;
 } else {
  $63 = 0;
 }
 $vertIndex2 = $63;
 $64 = $vertIndex1;
 $65 = $vertices;
 $66 = (($65) + ($64<<3)|0);
 ;HEAP32[$v1+0>>2]=HEAP32[$66+0>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$66+4>>2]|0;
 $67 = $vertIndex2;
 $68 = $vertices;
 $69 = (($68) + ($67<<3)|0);
 ;HEAP32[$v2+0>>2]=HEAP32[$69+0>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$69+4>>2]|0;
 $70 = $separation;
 $71 = $70 < 1.1920928955078125E-7;
 if ($71) {
  $72 = $0;
  $73 = (($72) + 60|0);
  HEAP32[$73>>2] = 1;
  $74 = $0;
  $75 = (($74) + 56|0);
  HEAP32[$75>>2] = 1;
  $76 = $0;
  $77 = (($76) + 40|0);
  $78 = $normalIndex;
  $79 = $normals;
  $80 = (($79) + ($78<<3)|0);
  ;HEAP32[$77+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$80+4>>2]|0;
  $81 = $0;
  $82 = (($81) + 48|0);
  __ZplRK6b2Vec2S1_($7,$v1,$v2);
  __ZmlfRK6b2Vec2($6,0.5,$7);
  ;HEAP32[$82+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$82+4>>2]=HEAP32[$6+4>>2]|0;
  $83 = $0;
  $84 = $3;
  $85 = (($84) + 12|0);
  ;HEAP32[$83+0>>2]=HEAP32[$85+0>>2]|0;HEAP32[$83+4>>2]=HEAP32[$85+4>>2]|0;
  $86 = $0;
  $87 = (($86) + 16|0);
  HEAP32[$87>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZmiRK6b2Vec2S1_($8,$cLocal,$v1);
 __ZmiRK6b2Vec2S1_($9,$v2,$v1);
 $88 = (+__Z5b2DotRK6b2Vec2S1_($8,$9));
 $u1 = $88;
 __ZmiRK6b2Vec2S1_($10,$cLocal,$v2);
 __ZmiRK6b2Vec2S1_($11,$v1,$v2);
 $89 = (+__Z5b2DotRK6b2Vec2S1_($10,$11));
 $u2 = $89;
 $90 = $u1;
 $91 = $90 <= 0.0;
 if ($91) {
  $92 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal,$v1));
  $93 = $radius;
  $94 = $radius;
  $95 = $93 * $94;
  $96 = $92 > $95;
  if ($96) {
   STACKTOP = sp;return;
  } else {
   $97 = $0;
   $98 = (($97) + 60|0);
   HEAP32[$98>>2] = 1;
   $99 = $0;
   $100 = (($99) + 56|0);
   HEAP32[$100>>2] = 1;
   $101 = $0;
   $102 = (($101) + 40|0);
   __ZmiRK6b2Vec2S1_($12,$cLocal,$v1);
   ;HEAP32[$102+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$12+4>>2]|0;
   $103 = $0;
   $104 = (($103) + 40|0);
   (+__ZN6b2Vec29NormalizeEv($104));
   $105 = $0;
   $106 = (($105) + 48|0);
   ;HEAP32[$106+0>>2]=HEAP32[$v1+0>>2]|0;HEAP32[$106+4>>2]=HEAP32[$v1+4>>2]|0;
   $107 = $0;
   $108 = $3;
   $109 = (($108) + 12|0);
   ;HEAP32[$107+0>>2]=HEAP32[$109+0>>2]|0;HEAP32[$107+4>>2]=HEAP32[$109+4>>2]|0;
   $110 = $0;
   $111 = (($110) + 16|0);
   HEAP32[$111>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $112 = $u2;
 $113 = $112 <= 0.0;
 do {
  if ($113) {
   $114 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal,$v2));
   $115 = $radius;
   $116 = $radius;
   $117 = $115 * $116;
   $118 = $114 > $117;
   if (!($118)) {
    $119 = $0;
    $120 = (($119) + 60|0);
    HEAP32[$120>>2] = 1;
    $121 = $0;
    $122 = (($121) + 56|0);
    HEAP32[$122>>2] = 1;
    $123 = $0;
    $124 = (($123) + 40|0);
    __ZmiRK6b2Vec2S1_($13,$cLocal,$v2);
    ;HEAP32[$124+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$124+4>>2]=HEAP32[$13+4>>2]|0;
    $125 = $0;
    $126 = (($125) + 40|0);
    (+__ZN6b2Vec29NormalizeEv($126));
    $127 = $0;
    $128 = (($127) + 48|0);
    ;HEAP32[$128+0>>2]=HEAP32[$v2+0>>2]|0;HEAP32[$128+4>>2]=HEAP32[$v2+4>>2]|0;
    $129 = $0;
    $130 = $3;
    $131 = (($130) + 12|0);
    ;HEAP32[$129+0>>2]=HEAP32[$131+0>>2]|0;HEAP32[$129+4>>2]=HEAP32[$131+4>>2]|0;
    $132 = $0;
    $133 = (($132) + 16|0);
    HEAP32[$133>>2] = 0;
    break;
   }
   STACKTOP = sp;return;
  } else {
   __ZplRK6b2Vec2S1_($14,$v1,$v2);
   __ZmlfRK6b2Vec2($faceCenter,0.5,$14);
   __ZmiRK6b2Vec2S1_($15,$cLocal,$faceCenter);
   $134 = $vertIndex1;
   $135 = $normals;
   $136 = (($135) + ($134<<3)|0);
   $137 = (+__Z5b2DotRK6b2Vec2S1_($15,$136));
   $separation1 = $137;
   $138 = $separation1;
   $139 = $radius;
   $140 = $138 > $139;
   if (!($140)) {
    $141 = $0;
    $142 = (($141) + 60|0);
    HEAP32[$142>>2] = 1;
    $143 = $0;
    $144 = (($143) + 56|0);
    HEAP32[$144>>2] = 1;
    $145 = $0;
    $146 = (($145) + 40|0);
    $147 = $vertIndex1;
    $148 = $normals;
    $149 = (($148) + ($147<<3)|0);
    ;HEAP32[$146+0>>2]=HEAP32[$149+0>>2]|0;HEAP32[$146+4>>2]=HEAP32[$149+4>>2]|0;
    $150 = $0;
    $151 = (($150) + 48|0);
    ;HEAP32[$151+0>>2]=HEAP32[$faceCenter+0>>2]|0;HEAP32[$151+4>>2]=HEAP32[$faceCenter+4>>2]|0;
    $152 = $0;
    $153 = $3;
    $154 = (($153) + 12|0);
    ;HEAP32[$152+0>>2]=HEAP32[$154+0>>2]|0;HEAP32[$152+4>>2]=HEAP32[$154+4>>2]|0;
    $155 = $0;
    $156 = (($155) + 16|0);
    HEAP32[$156>>2] = 0;
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __Z5b2MulRK11b2TransformRK6b2Vec2($agg$result,$T,$v) {
 $agg$result = $agg$result|0;
 $T = $T|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = (($3) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 $16 = $8 - $15;
 $17 = $0;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 + $18;
 $x = $19;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = +HEAPF32[$23>>2];
 $25 = $22 * $24;
 $26 = $0;
 $27 = (($26) + 8|0);
 $28 = (($27) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $1;
 $31 = (($30) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $29 * $32;
 $34 = $25 + $33;
 $35 = $0;
 $36 = (($35) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result,$39,$40);
 STACKTOP = sp;return;
}
function __ZmiRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 - $12;
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2DotRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 STACKTOP = sp;return (+$14);
}
function __ZN6b2Vec27SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = (($1) + 4|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK11b2TransformRK6b2Vec2($agg$result,$T,$v) {
 $agg$result = $agg$result|0;
 $T = $T|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0.0, $px = 0.0, $py = 0.0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $px = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 - $12;
 $py = $13;
 $14 = $0;
 $15 = (($14) + 8|0);
 $16 = (($15) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $px;
 $19 = $17 * $18;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $py;
 $24 = $22 * $23;
 $25 = $19 + $24;
 $x = $25;
 $26 = $0;
 $27 = (($26) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = -$28;
 $30 = $px;
 $31 = $29 * $30;
 $32 = $0;
 $33 = (($32) + 8|0);
 $34 = (($33) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $py;
 $37 = $35 * $36;
 $38 = $31 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result,$39,$40);
 STACKTOP = sp;return;
}
function __ZplRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 + $12;
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __ZmlfRK6b2Vec2($agg$result,$s,$a) {
 $agg$result = $agg$result|0;
 $s = +$s;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = $2 * $4;
 $6 = $0;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $6 * $9;
 __ZN6b2Vec2C2Eff($agg$result,$5,$10);
 STACKTOP = sp;return;
}
function __Z17b2DistanceSquaredRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c,$2,$3);
 $4 = (+__Z5b2DotRK6b2Vec2S1_($c,$c));
 STACKTOP = sp;return (+$4);
}
function __ZN6b2Vec29NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $invLength = 0.0, $length = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (+__ZNK6b2Vec26LengthEv($2));
 $length = $3;
 $4 = $length;
 $5 = $4 < 1.1920928955078125E-7;
 if ($5) {
  $0 = 0.0;
  $16 = $0;
  STACKTOP = sp;return (+$16);
 } else {
  $6 = $length;
  $7 = 1.0 / $6;
  $invLength = $7;
  $8 = $invLength;
  $9 = +HEAPF32[$2>>2];
  $10 = $9 * $8;
  HEAPF32[$2>>2] = $10;
  $11 = $invLength;
  $12 = (($2) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13 * $11;
  HEAPF32[$12>>2] = $14;
  $15 = $length;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return (+$16);
 }
 return +0;
}
function __ZN6b2Vec2C2Eff($this,$x,$y) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 $6 = $2;
 HEAPF32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNK6b2Vec26LengthEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 * $4;
 $6 = (($2) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $0 = $11;
 $12 = $0;
 $13 = (+Math_sqrt((+$12)));
 STACKTOP = sp;return (+$13);
}
function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold,$edgeA,$xfA,$circleB,$xfB) {
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $circleB = $circleB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $A = 0, $A1 = 0, $A2 = 0, $B = 0, $B1 = 0, $B2 = 0, $P = 0, $P1 = 0, $P4 = 0, $Q = 0, $cf = 0, $d = 0, $d2 = 0, $d5 = 0, $dd = 0.0, $dd3 = 0.0, $dd6 = 0.0, $den = 0.0, $e = 0;
 var $e1 = 0, $e2 = 0, $n = 0, $radius = 0.0, $u = 0.0, $u1 = 0.0, $v = 0.0, $v2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $Q = sp + 264|0;
 $5 = sp + 16|0;
 $A = sp + 192|0;
 $B = sp + 24|0;
 $e = sp + 32|0;
 $6 = sp + 48|0;
 $7 = sp + 64|0;
 $cf = sp + 304|0;
 $P = sp + 240|0;
 $d = sp + 256|0;
 $A1 = sp + 288|0;
 $B1 = sp + 296|0;
 $e1 = sp + 112|0;
 $8 = sp + 128|0;
 $P1 = sp + 136|0;
 $d2 = sp + 144|0;
 $B2 = sp + 160|0;
 $A2 = sp + 168|0;
 $e2 = sp + 176|0;
 $9 = sp + 208|0;
 $P4 = sp + 80|0;
 $10 = sp + 232|0;
 $11 = sp + 8|0;
 $12 = sp + 88|0;
 $d5 = sp + 248|0;
 $n = sp + 280|0;
 $13 = sp + 224|0;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $14 = $0;
 $15 = (($14) + 60|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = $4;
 $18 = $3;
 $19 = (($18) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($5,$17,$19);
 __Z6b2MulTRK11b2TransformRK6b2Vec2($Q,$16,$5);
 $20 = $1;
 $21 = (($20) + 12|0);
 ;HEAP32[$A+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$A+4>>2]=HEAP32[$21+4>>2]|0;
 $22 = $1;
 $23 = (($22) + 20|0);
 ;HEAP32[$B+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$B+4>>2]=HEAP32[$23+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e,$B,$A);
 __ZmiRK6b2Vec2S1_($6,$B,$Q);
 $24 = (+__Z5b2DotRK6b2Vec2S1_($e,$6));
 $u = $24;
 __ZmiRK6b2Vec2S1_($7,$Q,$A);
 $25 = (+__Z5b2DotRK6b2Vec2S1_($e,$7));
 $v = $25;
 $26 = $1;
 $27 = (($26) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $3;
 $30 = (($29) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $28 + $31;
 $radius = $32;
 $33 = (($cf) + 1|0);
 HEAP8[$33>>0] = 0;
 $34 = (($cf) + 3|0);
 HEAP8[$34>>0] = 0;
 $35 = $v;
 $36 = $35 <= 0.0;
 if ($36) {
  ;HEAP32[$P+0>>2]=HEAP32[$A+0>>2]|0;HEAP32[$P+4>>2]=HEAP32[$A+4>>2]|0;
  __ZmiRK6b2Vec2S1_($d,$Q,$P);
  $37 = (+__Z5b2DotRK6b2Vec2S1_($d,$d));
  $dd = $37;
  $38 = $dd;
  $39 = $radius;
  $40 = $radius;
  $41 = $39 * $40;
  $42 = $38 > $41;
  if ($42) {
   STACKTOP = sp;return;
  }
  $43 = $1;
  $44 = (($43) + 44|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&1;
  do {
   if ($46) {
    $47 = $1;
    $48 = (($47) + 28|0);
    ;HEAP32[$A1+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$A1+4>>2]=HEAP32[$48+4>>2]|0;
    ;HEAP32[$B1+0>>2]=HEAP32[$A+0>>2]|0;HEAP32[$B1+4>>2]=HEAP32[$A+4>>2]|0;
    __ZmiRK6b2Vec2S1_($e1,$B1,$A1);
    __ZmiRK6b2Vec2S1_($8,$B1,$Q);
    $49 = (+__Z5b2DotRK6b2Vec2S1_($e1,$8));
    $u1 = $49;
    $50 = $u1;
    $51 = $50 > 0.0;
    if (!($51)) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
  HEAP8[$cf>>0] = 0;
  $52 = (($cf) + 2|0);
  HEAP8[$52>>0] = 0;
  $53 = $0;
  $54 = (($53) + 60|0);
  HEAP32[$54>>2] = 1;
  $55 = $0;
  $56 = (($55) + 56|0);
  HEAP32[$56>>2] = 0;
  $57 = $0;
  $58 = (($57) + 40|0);
  __ZN6b2Vec27SetZeroEv($58);
  $59 = $0;
  $60 = (($59) + 48|0);
  ;HEAP32[$60+0>>2]=HEAP32[$P+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$P+4>>2]|0;
  $61 = $0;
  $62 = (($61) + 16|0);
  HEAP32[$62>>2] = 0;
  $63 = $0;
  $64 = (($63) + 16|0);
  ;HEAP8[$64+0>>0]=HEAP8[$cf+0>>0]|0;HEAP8[$64+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$cf+3>>0]|0;
  $65 = $0;
  $66 = $3;
  $67 = (($66) + 12|0);
  ;HEAP32[$65+0>>2]=HEAP32[$67+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$67+4>>2]|0;
  STACKTOP = sp;return;
 }
 $68 = $u;
 $69 = $68 <= 0.0;
 if (!($69)) {
  $101 = (+__Z5b2DotRK6b2Vec2S1_($e,$e));
  $den = $101;
  $102 = $den;
  $103 = $102 > 0.0;
  if (!($103)) {
   ___assert_fail((8|0),(24|0),127,(112|0));
   // unreachable;
  }
  $104 = $den;
  $105 = 1.0 / $104;
  $106 = $u;
  __ZmlfRK6b2Vec2($11,$106,$A);
  $107 = $v;
  __ZmlfRK6b2Vec2($12,$107,$B);
  __ZplRK6b2Vec2S1_($10,$11,$12);
  __ZmlfRK6b2Vec2($P4,$105,$10);
  __ZmiRK6b2Vec2S1_($d5,$Q,$P4);
  $108 = (+__Z5b2DotRK6b2Vec2S1_($d5,$d5));
  $dd6 = $108;
  $109 = $dd6;
  $110 = $radius;
  $111 = $radius;
  $112 = $110 * $111;
  $113 = $109 > $112;
  if ($113) {
   STACKTOP = sp;return;
  }
  $114 = (($e) + 4|0);
  $115 = +HEAPF32[$114>>2];
  $116 = -$115;
  $117 = +HEAPF32[$e>>2];
  __ZN6b2Vec2C2Eff($n,$116,$117);
  __ZmiRK6b2Vec2S1_($13,$Q,$A);
  $118 = (+__Z5b2DotRK6b2Vec2S1_($n,$13));
  $119 = $118 < 0.0;
  if ($119) {
   $120 = +HEAPF32[$n>>2];
   $121 = -$120;
   $122 = (($n) + 4|0);
   $123 = +HEAPF32[$122>>2];
   $124 = -$123;
   __ZN6b2Vec23SetEff($n,$121,$124);
  }
  (+__ZN6b2Vec29NormalizeEv($n));
  HEAP8[$cf>>0] = 0;
  $125 = (($cf) + 2|0);
  HEAP8[$125>>0] = 1;
  $126 = $0;
  $127 = (($126) + 60|0);
  HEAP32[$127>>2] = 1;
  $128 = $0;
  $129 = (($128) + 56|0);
  HEAP32[$129>>2] = 1;
  $130 = $0;
  $131 = (($130) + 40|0);
  ;HEAP32[$131+0>>2]=HEAP32[$n+0>>2]|0;HEAP32[$131+4>>2]=HEAP32[$n+4>>2]|0;
  $132 = $0;
  $133 = (($132) + 48|0);
  ;HEAP32[$133+0>>2]=HEAP32[$A+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$A+4>>2]|0;
  $134 = $0;
  $135 = (($134) + 16|0);
  HEAP32[$135>>2] = 0;
  $136 = $0;
  $137 = (($136) + 16|0);
  ;HEAP8[$137+0>>0]=HEAP8[$cf+0>>0]|0;HEAP8[$137+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$137+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$137+3>>0]=HEAP8[$cf+3>>0]|0;
  $138 = $0;
  $139 = $3;
  $140 = (($139) + 12|0);
  ;HEAP32[$138+0>>2]=HEAP32[$140+0>>2]|0;HEAP32[$138+4>>2]=HEAP32[$140+4>>2]|0;
  STACKTOP = sp;return;
 }
 ;HEAP32[$P1+0>>2]=HEAP32[$B+0>>2]|0;HEAP32[$P1+4>>2]=HEAP32[$B+4>>2]|0;
 __ZmiRK6b2Vec2S1_($d2,$Q,$P1);
 $70 = (+__Z5b2DotRK6b2Vec2S1_($d2,$d2));
 $dd3 = $70;
 $71 = $dd3;
 $72 = $radius;
 $73 = $radius;
 $74 = $72 * $73;
 $75 = $71 > $74;
 if ($75) {
  STACKTOP = sp;return;
 }
 $76 = $1;
 $77 = (($76) + 45|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&1;
 do {
  if ($79) {
   $80 = $1;
   $81 = (($80) + 36|0);
   ;HEAP32[$B2+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$B2+4>>2]=HEAP32[$81+4>>2]|0;
   ;HEAP32[$A2+0>>2]=HEAP32[$B+0>>2]|0;HEAP32[$A2+4>>2]=HEAP32[$B+4>>2]|0;
   __ZmiRK6b2Vec2S1_($e2,$B2,$A2);
   __ZmiRK6b2Vec2S1_($9,$Q,$A2);
   $82 = (+__Z5b2DotRK6b2Vec2S1_($e2,$9));
   $v2 = $82;
   $83 = $v2;
   $84 = $83 > 0.0;
   if (!($84)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP8[$cf>>0] = 1;
 $85 = (($cf) + 2|0);
 HEAP8[$85>>0] = 0;
 $86 = $0;
 $87 = (($86) + 60|0);
 HEAP32[$87>>2] = 1;
 $88 = $0;
 $89 = (($88) + 56|0);
 HEAP32[$89>>2] = 0;
 $90 = $0;
 $91 = (($90) + 40|0);
 __ZN6b2Vec27SetZeroEv($91);
 $92 = $0;
 $93 = (($92) + 48|0);
 ;HEAP32[$93+0>>2]=HEAP32[$P1+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$P1+4>>2]|0;
 $94 = $0;
 $95 = (($94) + 16|0);
 HEAP32[$95>>2] = 0;
 $96 = $0;
 $97 = (($96) + 16|0);
 ;HEAP8[$97+0>>0]=HEAP8[$cf+0>>0]|0;HEAP8[$97+1>>0]=HEAP8[$cf+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$cf+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$cf+3>>0]|0;
 $98 = $0;
 $99 = $3;
 $100 = (($99) + 12|0);
 ;HEAP32[$98+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$98+4>>2]=HEAP32[$100+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this,$manifold,$edgeA,$xfA,$polygonB,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $polygonB = $polygonB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0.0, $53 = 0;
 var $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestIndex = 0, $bestValue = 0.0, $clipPoints1 = 0, $clipPoints2 = 0, $convex1 = 0, $convex2 = 0, $cp = 0, $edge0 = 0, $edge1 = 0;
 var $edge2 = 0, $edgeAxis = 0, $hasVertex0 = 0, $hasVertex3 = 0, $i = 0, $i1 = 0, $i12 = 0, $i2 = 0, $i3 = 0, $ie = 0, $k_absoluteTol = 0.0, $k_relativeTol = 0.0, $np = 0, $offset0 = 0.0, $offset1 = 0.0, $offset2 = 0.0, $pointCount = 0, $polygonAxis = 0, $primaryAxis = 0, $rf = 0;
 var $separation = 0.0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 568|0;
 $7 = sp + 40|0;
 $edge1 = sp + 64|0;
 $8 = sp + 80|0;
 $edge0 = sp + 112|0;
 $9 = sp + 120|0;
 $edge2 = sp + 128|0;
 $10 = sp + 136|0;
 $11 = sp + 144|0;
 $12 = sp + 152|0;
 $13 = sp + 160|0;
 $14 = sp + 168|0;
 $15 = sp + 176|0;
 $16 = sp + 184|0;
 $17 = sp + 192|0;
 $18 = sp + 200|0;
 $19 = sp + 208|0;
 $20 = sp + 544|0;
 $21 = sp + 560|0;
 $22 = sp + 584|0;
 $23 = sp + 600|0;
 $24 = sp + 616|0;
 $25 = sp + 624|0;
 $26 = sp + 264|0;
 $27 = sp + 632|0;
 $28 = sp + 280|0;
 $29 = sp + 288|0;
 $30 = sp + 296|0;
 $31 = sp + 304|0;
 $32 = sp + 312|0;
 $33 = sp + 320|0;
 $34 = sp + 328|0;
 $35 = sp + 336|0;
 $36 = sp + 344|0;
 $37 = sp + 352|0;
 $38 = sp + 368|0;
 $39 = sp + 376|0;
 $edgeAxis = sp + 384|0;
 $polygonAxis = sp + 396|0;
 $primaryAxis = sp + 416|0;
 $ie = sp + 432|0;
 $rf = sp + 456|0;
 $40 = sp + 16|0;
 $41 = sp + 8|0;
 $clipPoints1 = sp + 216|0;
 $clipPoints2 = sp + 520|0;
 $42 = sp + 96|0;
 $43 = sp + 48|0;
 $0 = $this;
 $1 = $manifold;
 $2 = $edgeA;
 $3 = $xfA;
 $4 = $polygonB;
 $5 = $xfB;
 $44 = $0;
 $45 = (($44) + 132|0);
 $46 = $3;
 $47 = $5;
 __Z6b2MulTRK11b2TransformS1_($6,$46,$47);
 ;HEAP32[$45+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$45+12>>2]=HEAP32[$6+12>>2]|0;
 $48 = (($44) + 148|0);
 $49 = (($44) + 132|0);
 $50 = $4;
 $51 = (($50) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$49,$51);
 ;HEAP32[$48+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$7+4>>2]|0;
 $52 = (($44) + 156|0);
 $53 = $2;
 $54 = (($53) + 28|0);
 ;HEAP32[$52+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$52+4>>2]=HEAP32[$54+4>>2]|0;
 $55 = (($44) + 164|0);
 $56 = $2;
 $57 = (($56) + 12|0);
 ;HEAP32[$55+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$55+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = (($44) + 172|0);
 $59 = $2;
 $60 = (($59) + 20|0);
 ;HEAP32[$58+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$58+4>>2]=HEAP32[$60+4>>2]|0;
 $61 = (($44) + 180|0);
 $62 = $2;
 $63 = (($62) + 36|0);
 ;HEAP32[$61+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$63+4>>2]|0;
 $64 = $2;
 $65 = (($64) + 44|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&1;
 $68 = $67&1;
 $hasVertex0 = $68;
 $69 = $2;
 $70 = (($69) + 45|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&1;
 $73 = $72&1;
 $hasVertex3 = $73;
 $74 = (($44) + 172|0);
 $75 = (($44) + 164|0);
 __ZmiRK6b2Vec2S1_($edge1,$74,$75);
 (+__ZN6b2Vec29NormalizeEv($edge1));
 $76 = (($44) + 196|0);
 $77 = (($edge1) + 4|0);
 $78 = +HEAPF32[$77>>2];
 $79 = +HEAPF32[$edge1>>2];
 $80 = -$79;
 __ZN6b2Vec23SetEff($76,$78,$80);
 $81 = (($44) + 196|0);
 $82 = (($44) + 148|0);
 $83 = (($44) + 164|0);
 __ZmiRK6b2Vec2S1_($8,$82,$83);
 $84 = (+__Z5b2DotRK6b2Vec2S1_($81,$8));
 $offset1 = $84;
 $offset0 = 0.0;
 $offset2 = 0.0;
 $convex1 = 0;
 $convex2 = 0;
 $85 = $hasVertex0;
 $86 = $85&1;
 if ($86) {
  $87 = (($44) + 164|0);
  $88 = (($44) + 156|0);
  __ZmiRK6b2Vec2S1_($edge0,$87,$88);
  (+__ZN6b2Vec29NormalizeEv($edge0));
  $89 = (($44) + 188|0);
  $90 = (($edge0) + 4|0);
  $91 = +HEAPF32[$90>>2];
  $92 = +HEAPF32[$edge0>>2];
  $93 = -$92;
  __ZN6b2Vec23SetEff($89,$91,$93);
  $94 = (+__Z7b2CrossRK6b2Vec2S1_($edge0,$edge1));
  $95 = $94 >= 0.0;
  $96 = $95&1;
  $convex1 = $96;
  $97 = (($44) + 188|0);
  $98 = (($44) + 148|0);
  $99 = (($44) + 156|0);
  __ZmiRK6b2Vec2S1_($9,$98,$99);
  $100 = (+__Z5b2DotRK6b2Vec2S1_($97,$9));
  $offset0 = $100;
 }
 $101 = $hasVertex3;
 $102 = $101&1;
 if ($102) {
  $103 = (($44) + 180|0);
  $104 = (($44) + 172|0);
  __ZmiRK6b2Vec2S1_($edge2,$103,$104);
  (+__ZN6b2Vec29NormalizeEv($edge2));
  $105 = (($44) + 204|0);
  $106 = (($edge2) + 4|0);
  $107 = +HEAPF32[$106>>2];
  $108 = +HEAPF32[$edge2>>2];
  $109 = -$108;
  __ZN6b2Vec23SetEff($105,$107,$109);
  $110 = (+__Z7b2CrossRK6b2Vec2S1_($edge1,$edge2));
  $111 = $110 > 0.0;
  $112 = $111&1;
  $convex2 = $112;
  $113 = (($44) + 204|0);
  $114 = (($44) + 148|0);
  $115 = (($44) + 172|0);
  __ZmiRK6b2Vec2S1_($10,$114,$115);
  $116 = (+__Z5b2DotRK6b2Vec2S1_($113,$10));
  $offset2 = $116;
 }
 $117 = $hasVertex0;
 $118 = $117&1;
 if ($118) {
  $119 = $hasVertex3;
  $120 = $119&1;
  if ($120) {
   $121 = $convex1;
   $122 = $121&1;
   if ($122) {
    $123 = $convex2;
    $124 = $123&1;
    if ($124) {
     $125 = $offset0;
     $126 = $125 >= 0.0;
     if ($126) {
      $133 = 1;
     } else {
      $127 = $offset1;
      $128 = $127 >= 0.0;
      if ($128) {
       $133 = 1;
      } else {
       $129 = $offset2;
       $130 = $129 >= 0.0;
       $133 = $130;
      }
     }
     $131 = (($44) + 248|0);
     $132 = $133&1;
     HEAP8[$131>>0] = $132;
     $134 = (($44) + 248|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&1;
     if ($136) {
      $137 = (($44) + 212|0);
      $138 = (($44) + 196|0);
      ;HEAP32[$137+0>>2]=HEAP32[$138+0>>2]|0;HEAP32[$137+4>>2]=HEAP32[$138+4>>2]|0;
      $139 = (($44) + 228|0);
      $140 = (($44) + 188|0);
      ;HEAP32[$139+0>>2]=HEAP32[$140+0>>2]|0;HEAP32[$139+4>>2]=HEAP32[$140+4>>2]|0;
      $141 = (($44) + 236|0);
      $142 = (($44) + 204|0);
      ;HEAP32[$141+0>>2]=HEAP32[$142+0>>2]|0;HEAP32[$141+4>>2]=HEAP32[$142+4>>2]|0;
     } else {
      $143 = (($44) + 212|0);
      $144 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($11,$144);
      ;HEAP32[$143+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$11+4>>2]|0;
      $145 = (($44) + 228|0);
      $146 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($12,$146);
      ;HEAP32[$145+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$145+4>>2]=HEAP32[$12+4>>2]|0;
      $147 = (($44) + 236|0);
      $148 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($13,$148);
      ;HEAP32[$147+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$147+4>>2]=HEAP32[$13+4>>2]|0;
     }
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
   if ((label|0) == 16) {
    $149 = $convex1;
    $150 = $149&1;
    if ($150) {
     $151 = $offset0;
     $152 = $151 >= 0.0;
     if ($152) {
      $159 = 1;
     } else {
      $153 = $offset1;
      $154 = $153 >= 0.0;
      if ($154) {
       $155 = $offset2;
       $156 = $155 >= 0.0;
       $649 = $156;
      } else {
       $649 = 0;
      }
      $159 = $649;
     }
     $157 = (($44) + 248|0);
     $158 = $159&1;
     HEAP8[$157>>0] = $158;
     $160 = (($44) + 248|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&1;
     if ($162) {
      $163 = (($44) + 212|0);
      $164 = (($44) + 196|0);
      ;HEAP32[$163+0>>2]=HEAP32[$164+0>>2]|0;HEAP32[$163+4>>2]=HEAP32[$164+4>>2]|0;
      $165 = (($44) + 228|0);
      $166 = (($44) + 188|0);
      ;HEAP32[$165+0>>2]=HEAP32[$166+0>>2]|0;HEAP32[$165+4>>2]=HEAP32[$166+4>>2]|0;
      $167 = (($44) + 236|0);
      $168 = (($44) + 196|0);
      ;HEAP32[$167+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$167+4>>2]=HEAP32[$168+4>>2]|0;
     } else {
      $169 = (($44) + 212|0);
      $170 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($14,$170);
      ;HEAP32[$169+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$169+4>>2]=HEAP32[$14+4>>2]|0;
      $171 = (($44) + 228|0);
      $172 = (($44) + 204|0);
      __ZNK6b2Vec2ngEv($15,$172);
      ;HEAP32[$171+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$171+4>>2]=HEAP32[$15+4>>2]|0;
      $173 = (($44) + 236|0);
      $174 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($16,$174);
      ;HEAP32[$173+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$173+4>>2]=HEAP32[$16+4>>2]|0;
     }
    } else {
     $175 = $convex2;
     $176 = $175&1;
     if ($176) {
      $177 = $offset2;
      $178 = $177 >= 0.0;
      if ($178) {
       $185 = 1;
      } else {
       $179 = $offset0;
       $180 = $179 >= 0.0;
       if ($180) {
        $181 = $offset1;
        $182 = $181 >= 0.0;
        $650 = $182;
       } else {
        $650 = 0;
       }
       $185 = $650;
      }
      $183 = (($44) + 248|0);
      $184 = $185&1;
      HEAP8[$183>>0] = $184;
      $186 = (($44) + 248|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187&1;
      if ($188) {
       $189 = (($44) + 212|0);
       $190 = (($44) + 196|0);
       ;HEAP32[$189+0>>2]=HEAP32[$190+0>>2]|0;HEAP32[$189+4>>2]=HEAP32[$190+4>>2]|0;
       $191 = (($44) + 228|0);
       $192 = (($44) + 196|0);
       ;HEAP32[$191+0>>2]=HEAP32[$192+0>>2]|0;HEAP32[$191+4>>2]=HEAP32[$192+4>>2]|0;
       $193 = (($44) + 236|0);
       $194 = (($44) + 204|0);
       ;HEAP32[$193+0>>2]=HEAP32[$194+0>>2]|0;HEAP32[$193+4>>2]=HEAP32[$194+4>>2]|0;
      } else {
       $195 = (($44) + 212|0);
       $196 = (($44) + 196|0);
       __ZNK6b2Vec2ngEv($17,$196);
       ;HEAP32[$195+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$195+4>>2]=HEAP32[$17+4>>2]|0;
       $197 = (($44) + 228|0);
       $198 = (($44) + 196|0);
       __ZNK6b2Vec2ngEv($18,$198);
       ;HEAP32[$197+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$197+4>>2]=HEAP32[$18+4>>2]|0;
       $199 = (($44) + 236|0);
       $200 = (($44) + 188|0);
       __ZNK6b2Vec2ngEv($19,$200);
       ;HEAP32[$199+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$199+4>>2]=HEAP32[$19+4>>2]|0;
      }
     } else {
      $201 = $offset0;
      $202 = $201 >= 0.0;
      if ($202) {
       $203 = $offset1;
       $204 = $203 >= 0.0;
       if ($204) {
        $205 = $offset2;
        $206 = $205 >= 0.0;
        $209 = $206;
       } else {
        $209 = 0;
       }
      } else {
       $209 = 0;
      }
      $207 = (($44) + 248|0);
      $208 = $209&1;
      HEAP8[$207>>0] = $208;
      $210 = (($44) + 248|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = $211&1;
      if ($212) {
       $213 = (($44) + 212|0);
       $214 = (($44) + 196|0);
       ;HEAP32[$213+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$213+4>>2]=HEAP32[$214+4>>2]|0;
       $215 = (($44) + 228|0);
       $216 = (($44) + 196|0);
       ;HEAP32[$215+0>>2]=HEAP32[$216+0>>2]|0;HEAP32[$215+4>>2]=HEAP32[$216+4>>2]|0;
       $217 = (($44) + 236|0);
       $218 = (($44) + 196|0);
       ;HEAP32[$217+0>>2]=HEAP32[$218+0>>2]|0;HEAP32[$217+4>>2]=HEAP32[$218+4>>2]|0;
      } else {
       $219 = (($44) + 212|0);
       $220 = (($44) + 196|0);
       __ZNK6b2Vec2ngEv($20,$220);
       ;HEAP32[$219+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$219+4>>2]=HEAP32[$20+4>>2]|0;
       $221 = (($44) + 228|0);
       $222 = (($44) + 204|0);
       __ZNK6b2Vec2ngEv($21,$222);
       ;HEAP32[$221+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$21+4>>2]|0;
       $223 = (($44) + 236|0);
       $224 = (($44) + 188|0);
       __ZNK6b2Vec2ngEv($22,$224);
       ;HEAP32[$223+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$223+4>>2]=HEAP32[$22+4>>2]|0;
      }
     }
    }
   }
  } else {
   label = 44;
  }
 } else {
  label = 44;
 }
 if ((label|0) == 44) {
  $225 = $hasVertex0;
  $226 = $225&1;
  if ($226) {
   $227 = $convex1;
   $228 = $227&1;
   if ($228) {
    $229 = $offset0;
    $230 = $229 >= 0.0;
    if ($230) {
     $235 = 1;
    } else {
     $231 = $offset1;
     $232 = $231 >= 0.0;
     $235 = $232;
    }
    $233 = (($44) + 248|0);
    $234 = $235&1;
    HEAP8[$233>>0] = $234;
    $236 = (($44) + 248|0);
    $237 = HEAP8[$236>>0]|0;
    $238 = $237&1;
    if ($238) {
     $239 = (($44) + 212|0);
     $240 = (($44) + 196|0);
     ;HEAP32[$239+0>>2]=HEAP32[$240+0>>2]|0;HEAP32[$239+4>>2]=HEAP32[$240+4>>2]|0;
     $241 = (($44) + 228|0);
     $242 = (($44) + 188|0);
     ;HEAP32[$241+0>>2]=HEAP32[$242+0>>2]|0;HEAP32[$241+4>>2]=HEAP32[$242+4>>2]|0;
     $243 = (($44) + 236|0);
     $244 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($23,$244);
     ;HEAP32[$243+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$243+4>>2]=HEAP32[$23+4>>2]|0;
    } else {
     $245 = (($44) + 212|0);
     $246 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($24,$246);
     ;HEAP32[$245+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$245+4>>2]=HEAP32[$24+4>>2]|0;
     $247 = (($44) + 228|0);
     $248 = (($44) + 196|0);
     ;HEAP32[$247+0>>2]=HEAP32[$248+0>>2]|0;HEAP32[$247+4>>2]=HEAP32[$248+4>>2]|0;
     $249 = (($44) + 236|0);
     $250 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($25,$250);
     ;HEAP32[$249+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$249+4>>2]=HEAP32[$25+4>>2]|0;
    }
   } else {
    $251 = $offset0;
    $252 = $251 >= 0.0;
    if ($252) {
     $253 = $offset1;
     $254 = $253 >= 0.0;
     $257 = $254;
    } else {
     $257 = 0;
    }
    $255 = (($44) + 248|0);
    $256 = $257&1;
    HEAP8[$255>>0] = $256;
    $258 = (($44) + 248|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&1;
    if ($260) {
     $261 = (($44) + 212|0);
     $262 = (($44) + 196|0);
     ;HEAP32[$261+0>>2]=HEAP32[$262+0>>2]|0;HEAP32[$261+4>>2]=HEAP32[$262+4>>2]|0;
     $263 = (($44) + 228|0);
     $264 = (($44) + 196|0);
     ;HEAP32[$263+0>>2]=HEAP32[$264+0>>2]|0;HEAP32[$263+4>>2]=HEAP32[$264+4>>2]|0;
     $265 = (($44) + 236|0);
     $266 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($26,$266);
     ;HEAP32[$265+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$265+4>>2]=HEAP32[$26+4>>2]|0;
    } else {
     $267 = (($44) + 212|0);
     $268 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($27,$268);
     ;HEAP32[$267+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$267+4>>2]=HEAP32[$27+4>>2]|0;
     $269 = (($44) + 228|0);
     $270 = (($44) + 196|0);
     ;HEAP32[$269+0>>2]=HEAP32[$270+0>>2]|0;HEAP32[$269+4>>2]=HEAP32[$270+4>>2]|0;
     $271 = (($44) + 236|0);
     $272 = (($44) + 188|0);
     __ZNK6b2Vec2ngEv($28,$272);
     ;HEAP32[$271+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$271+4>>2]=HEAP32[$28+4>>2]|0;
    }
   }
  } else {
   $273 = $hasVertex3;
   $274 = $273&1;
   if ($274) {
    $275 = $convex2;
    $276 = $275&1;
    if ($276) {
     $277 = $offset1;
     $278 = $277 >= 0.0;
     if ($278) {
      $283 = 1;
     } else {
      $279 = $offset2;
      $280 = $279 >= 0.0;
      $283 = $280;
     }
     $281 = (($44) + 248|0);
     $282 = $283&1;
     HEAP8[$281>>0] = $282;
     $284 = (($44) + 248|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = $285&1;
     if ($286) {
      $287 = (($44) + 212|0);
      $288 = (($44) + 196|0);
      ;HEAP32[$287+0>>2]=HEAP32[$288+0>>2]|0;HEAP32[$287+4>>2]=HEAP32[$288+4>>2]|0;
      $289 = (($44) + 228|0);
      $290 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($29,$290);
      ;HEAP32[$289+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$289+4>>2]=HEAP32[$29+4>>2]|0;
      $291 = (($44) + 236|0);
      $292 = (($44) + 204|0);
      ;HEAP32[$291+0>>2]=HEAP32[$292+0>>2]|0;HEAP32[$291+4>>2]=HEAP32[$292+4>>2]|0;
     } else {
      $293 = (($44) + 212|0);
      $294 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($30,$294);
      ;HEAP32[$293+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$293+4>>2]=HEAP32[$30+4>>2]|0;
      $295 = (($44) + 228|0);
      $296 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($31,$296);
      ;HEAP32[$295+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$295+4>>2]=HEAP32[$31+4>>2]|0;
      $297 = (($44) + 236|0);
      $298 = (($44) + 196|0);
      ;HEAP32[$297+0>>2]=HEAP32[$298+0>>2]|0;HEAP32[$297+4>>2]=HEAP32[$298+4>>2]|0;
     }
    } else {
     $299 = $offset1;
     $300 = $299 >= 0.0;
     if ($300) {
      $301 = $offset2;
      $302 = $301 >= 0.0;
      $305 = $302;
     } else {
      $305 = 0;
     }
     $303 = (($44) + 248|0);
     $304 = $305&1;
     HEAP8[$303>>0] = $304;
     $306 = (($44) + 248|0);
     $307 = HEAP8[$306>>0]|0;
     $308 = $307&1;
     if ($308) {
      $309 = (($44) + 212|0);
      $310 = (($44) + 196|0);
      ;HEAP32[$309+0>>2]=HEAP32[$310+0>>2]|0;HEAP32[$309+4>>2]=HEAP32[$310+4>>2]|0;
      $311 = (($44) + 228|0);
      $312 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($32,$312);
      ;HEAP32[$311+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$311+4>>2]=HEAP32[$32+4>>2]|0;
      $313 = (($44) + 236|0);
      $314 = (($44) + 196|0);
      ;HEAP32[$313+0>>2]=HEAP32[$314+0>>2]|0;HEAP32[$313+4>>2]=HEAP32[$314+4>>2]|0;
     } else {
      $315 = (($44) + 212|0);
      $316 = (($44) + 196|0);
      __ZNK6b2Vec2ngEv($33,$316);
      ;HEAP32[$315+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$315+4>>2]=HEAP32[$33+4>>2]|0;
      $317 = (($44) + 228|0);
      $318 = (($44) + 204|0);
      __ZNK6b2Vec2ngEv($34,$318);
      ;HEAP32[$317+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$317+4>>2]=HEAP32[$34+4>>2]|0;
      $319 = (($44) + 236|0);
      $320 = (($44) + 196|0);
      ;HEAP32[$319+0>>2]=HEAP32[$320+0>>2]|0;HEAP32[$319+4>>2]=HEAP32[$320+4>>2]|0;
     }
    }
   } else {
    $321 = $offset1;
    $322 = $321 >= 0.0;
    $323 = (($44) + 248|0);
    $324 = $322&1;
    HEAP8[$323>>0] = $324;
    $325 = (($44) + 248|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $326&1;
    if ($327) {
     $328 = (($44) + 212|0);
     $329 = (($44) + 196|0);
     ;HEAP32[$328+0>>2]=HEAP32[$329+0>>2]|0;HEAP32[$328+4>>2]=HEAP32[$329+4>>2]|0;
     $330 = (($44) + 228|0);
     $331 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($35,$331);
     ;HEAP32[$330+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$35+4>>2]|0;
     $332 = (($44) + 236|0);
     $333 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($36,$333);
     ;HEAP32[$332+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$332+4>>2]=HEAP32[$36+4>>2]|0;
    } else {
     $334 = (($44) + 212|0);
     $335 = (($44) + 196|0);
     __ZNK6b2Vec2ngEv($37,$335);
     ;HEAP32[$334+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$334+4>>2]=HEAP32[$37+4>>2]|0;
     $336 = (($44) + 228|0);
     $337 = (($44) + 196|0);
     ;HEAP32[$336+0>>2]=HEAP32[$337+0>>2]|0;HEAP32[$336+4>>2]=HEAP32[$337+4>>2]|0;
     $338 = (($44) + 236|0);
     $339 = (($44) + 196|0);
     ;HEAP32[$338+0>>2]=HEAP32[$339+0>>2]|0;HEAP32[$338+4>>2]=HEAP32[$339+4>>2]|0;
    }
   }
  }
 }
 $340 = $4;
 $341 = (($340) + 148|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = (($44) + 128|0);
 HEAP32[$343>>2] = $342;
 $i = 0;
 while(1) {
  $344 = $i;
  $345 = $4;
  $346 = (($345) + 148|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = ($344|0)<($347|0);
  if (!($348)) {
   break;
  }
  $349 = $i;
  $350 = (($44) + ($349<<3)|0);
  $351 = (($44) + 132|0);
  $352 = $i;
  $353 = $4;
  $354 = (($353) + 20|0);
  $355 = (($354) + ($352<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($38,$351,$355);
  ;HEAP32[$350+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$350+4>>2]=HEAP32[$38+4>>2]|0;
  $356 = $i;
  $357 = (($44) + 64|0);
  $358 = (($357) + ($356<<3)|0);
  $359 = (($44) + 132|0);
  $360 = (($359) + 8|0);
  $361 = $i;
  $362 = $4;
  $363 = (($362) + 84|0);
  $364 = (($363) + ($361<<3)|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($39,$360,$364);
  ;HEAP32[$358+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$358+4>>2]=HEAP32[$39+4>>2]|0;
  $365 = $i;
  $366 = (($365) + 1)|0;
  $i = $366;
 }
 $367 = (($44) + 244|0);
 HEAPF32[$367>>2] = 0.019999999552965164;
 $368 = $1;
 $369 = (($368) + 60|0);
 HEAP32[$369>>2] = 0;
 __ZN12b2EPCollider21ComputeEdgeSeparationEv($edgeAxis,$44);
 $370 = HEAP32[$edgeAxis>>2]|0;
 $371 = ($370|0)==(0);
 if ($371) {
  STACKTOP = sp;return;
 }
 $372 = (($edgeAxis) + 8|0);
 $373 = +HEAPF32[$372>>2];
 $374 = (($44) + 244|0);
 $375 = +HEAPF32[$374>>2];
 $376 = $373 > $375;
 if ($376) {
  STACKTOP = sp;return;
 }
 __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis,$44);
 $377 = HEAP32[$polygonAxis>>2]|0;
 $378 = ($377|0)!=(0);
 if ($378) {
  $379 = (($polygonAxis) + 8|0);
  $380 = +HEAPF32[$379>>2];
  $381 = (($44) + 244|0);
  $382 = +HEAPF32[$381>>2];
  $383 = $380 > $382;
  if ($383) {
   STACKTOP = sp;return;
  }
 }
 $k_relativeTol = 0.98000001907348633;
 $k_absoluteTol = 0.0010000000474974513;
 $384 = HEAP32[$polygonAxis>>2]|0;
 $385 = ($384|0)==(0);
 if ($385) {
  ;HEAP32[$primaryAxis+0>>2]=HEAP32[$edgeAxis+0>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$edgeAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$edgeAxis+8>>2]|0;
 } else {
  $386 = (($polygonAxis) + 8|0);
  $387 = +HEAPF32[$386>>2];
  $388 = (($edgeAxis) + 8|0);
  $389 = +HEAPF32[$388>>2];
  $390 = 0.98000001907348633 * $389;
  $391 = $390 + 0.0010000000474974513;
  $392 = $387 > $391;
  if ($392) {
   ;HEAP32[$primaryAxis+0>>2]=HEAP32[$polygonAxis+0>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$polygonAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$polygonAxis+8>>2]|0;
  } else {
   ;HEAP32[$primaryAxis+0>>2]=HEAP32[$edgeAxis+0>>2]|0;HEAP32[$primaryAxis+4>>2]=HEAP32[$edgeAxis+4>>2]|0;HEAP32[$primaryAxis+8>>2]=HEAP32[$edgeAxis+8>>2]|0;
  }
 }
 $393 = (($ie) + 24|0);
 $394 = $ie;
 while(1) {
  __ZN12b2ClipVertexC2Ev($394);
  $395 = (($394) + 12|0);
  $396 = ($395|0)==($393|0);
  if ($396) {
   break;
  } else {
   $394 = $395;
  }
 }
 __ZN15b2ReferenceFaceC2Ev($rf);
 $397 = HEAP32[$primaryAxis>>2]|0;
 $398 = ($397|0)==(1);
 if ($398) {
  $399 = $1;
  $400 = (($399) + 56|0);
  HEAP32[$400>>2] = 1;
  $bestIndex = 0;
  $401 = (($44) + 212|0);
  $402 = (($44) + 64|0);
  $403 = (+__Z5b2DotRK6b2Vec2S1_($401,$402));
  $bestValue = $403;
  $i1 = 1;
  while(1) {
   $404 = $i1;
   $405 = (($44) + 128|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = ($404|0)<($406|0);
   if (!($407)) {
    break;
   }
   $408 = (($44) + 212|0);
   $409 = $i1;
   $410 = (($44) + 64|0);
   $411 = (($410) + ($409<<3)|0);
   $412 = (+__Z5b2DotRK6b2Vec2S1_($408,$411));
   $value = $412;
   $413 = $value;
   $414 = $bestValue;
   $415 = $413 < $414;
   if ($415) {
    $416 = $value;
    $bestValue = $416;
    $417 = $i1;
    $bestIndex = $417;
   }
   $418 = $i1;
   $419 = (($418) + 1)|0;
   $i1 = $419;
  }
  $420 = $bestIndex;
  $i12 = $420;
  $421 = $i12;
  $422 = (($421) + 1)|0;
  $423 = (($44) + 128|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = ($422|0)<($424|0);
  if ($425) {
   $426 = $i12;
   $427 = (($426) + 1)|0;
   $428 = $427;
  } else {
   $428 = 0;
  }
  $i2 = $428;
  $429 = $i12;
  $430 = (($44) + ($429<<3)|0);
  ;HEAP32[$ie+0>>2]=HEAP32[$430+0>>2]|0;HEAP32[$ie+4>>2]=HEAP32[$430+4>>2]|0;
  $431 = (($ie) + 8|0);
  HEAP8[$431>>0] = 0;
  $432 = $i12;
  $433 = $432&255;
  $434 = (($ie) + 8|0);
  $435 = (($434) + 1|0);
  HEAP8[$435>>0] = $433;
  $436 = (($ie) + 8|0);
  $437 = (($436) + 2|0);
  HEAP8[$437>>0] = 1;
  $438 = (($ie) + 8|0);
  $439 = (($438) + 3|0);
  HEAP8[$439>>0] = 0;
  $440 = (($ie) + 12|0);
  $441 = $i2;
  $442 = (($44) + ($441<<3)|0);
  ;HEAP32[$440+0>>2]=HEAP32[$442+0>>2]|0;HEAP32[$440+4>>2]=HEAP32[$442+4>>2]|0;
  $443 = (($ie) + 12|0);
  $444 = (($443) + 8|0);
  HEAP8[$444>>0] = 0;
  $445 = $i2;
  $446 = $445&255;
  $447 = (($ie) + 12|0);
  $448 = (($447) + 8|0);
  $449 = (($448) + 1|0);
  HEAP8[$449>>0] = $446;
  $450 = (($ie) + 12|0);
  $451 = (($450) + 8|0);
  $452 = (($451) + 2|0);
  HEAP8[$452>>0] = 1;
  $453 = (($ie) + 12|0);
  $454 = (($453) + 8|0);
  $455 = (($454) + 3|0);
  HEAP8[$455>>0] = 0;
  $456 = (($44) + 248|0);
  $457 = HEAP8[$456>>0]|0;
  $458 = $457&1;
  if ($458) {
   HEAP32[$rf>>2] = 0;
   $459 = (($rf) + 4|0);
   HEAP32[$459>>2] = 1;
   $460 = (($rf) + 8|0);
   $461 = (($44) + 164|0);
   ;HEAP32[$460+0>>2]=HEAP32[$461+0>>2]|0;HEAP32[$460+4>>2]=HEAP32[$461+4>>2]|0;
   $462 = (($rf) + 16|0);
   $463 = (($44) + 172|0);
   ;HEAP32[$462+0>>2]=HEAP32[$463+0>>2]|0;HEAP32[$462+4>>2]=HEAP32[$463+4>>2]|0;
   $464 = (($rf) + 24|0);
   $465 = (($44) + 196|0);
   ;HEAP32[$464+0>>2]=HEAP32[$465+0>>2]|0;HEAP32[$464+4>>2]=HEAP32[$465+4>>2]|0;
  } else {
   HEAP32[$rf>>2] = 1;
   $466 = (($rf) + 4|0);
   HEAP32[$466>>2] = 0;
   $467 = (($rf) + 8|0);
   $468 = (($44) + 172|0);
   ;HEAP32[$467+0>>2]=HEAP32[$468+0>>2]|0;HEAP32[$467+4>>2]=HEAP32[$468+4>>2]|0;
   $469 = (($rf) + 16|0);
   $470 = (($44) + 164|0);
   ;HEAP32[$469+0>>2]=HEAP32[$470+0>>2]|0;HEAP32[$469+4>>2]=HEAP32[$470+4>>2]|0;
   $471 = (($rf) + 24|0);
   $472 = (($44) + 196|0);
   __ZNK6b2Vec2ngEv($40,$472);
   ;HEAP32[$471+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$471+4>>2]=HEAP32[$40+4>>2]|0;
  }
 } else {
  $473 = $1;
  $474 = (($473) + 56|0);
  HEAP32[$474>>2] = 2;
  $475 = (($44) + 164|0);
  ;HEAP32[$ie+0>>2]=HEAP32[$475+0>>2]|0;HEAP32[$ie+4>>2]=HEAP32[$475+4>>2]|0;
  $476 = (($ie) + 8|0);
  HEAP8[$476>>0] = 0;
  $477 = (($primaryAxis) + 4|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = $478&255;
  $480 = (($ie) + 8|0);
  $481 = (($480) + 1|0);
  HEAP8[$481>>0] = $479;
  $482 = (($ie) + 8|0);
  $483 = (($482) + 2|0);
  HEAP8[$483>>0] = 0;
  $484 = (($ie) + 8|0);
  $485 = (($484) + 3|0);
  HEAP8[$485>>0] = 1;
  $486 = (($ie) + 12|0);
  $487 = (($44) + 172|0);
  ;HEAP32[$486+0>>2]=HEAP32[$487+0>>2]|0;HEAP32[$486+4>>2]=HEAP32[$487+4>>2]|0;
  $488 = (($ie) + 12|0);
  $489 = (($488) + 8|0);
  HEAP8[$489>>0] = 0;
  $490 = (($primaryAxis) + 4|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = $491&255;
  $493 = (($ie) + 12|0);
  $494 = (($493) + 8|0);
  $495 = (($494) + 1|0);
  HEAP8[$495>>0] = $492;
  $496 = (($ie) + 12|0);
  $497 = (($496) + 8|0);
  $498 = (($497) + 2|0);
  HEAP8[$498>>0] = 0;
  $499 = (($ie) + 12|0);
  $500 = (($499) + 8|0);
  $501 = (($500) + 3|0);
  HEAP8[$501>>0] = 1;
  $502 = (($primaryAxis) + 4|0);
  $503 = HEAP32[$502>>2]|0;
  HEAP32[$rf>>2] = $503;
  $504 = HEAP32[$rf>>2]|0;
  $505 = (($504) + 1)|0;
  $506 = (($44) + 128|0);
  $507 = HEAP32[$506>>2]|0;
  $508 = ($505|0)<($507|0);
  if ($508) {
   $509 = HEAP32[$rf>>2]|0;
   $510 = (($509) + 1)|0;
   $512 = $510;
  } else {
   $512 = 0;
  }
  $511 = (($rf) + 4|0);
  HEAP32[$511>>2] = $512;
  $513 = (($rf) + 8|0);
  $514 = HEAP32[$rf>>2]|0;
  $515 = (($44) + ($514<<3)|0);
  ;HEAP32[$513+0>>2]=HEAP32[$515+0>>2]|0;HEAP32[$513+4>>2]=HEAP32[$515+4>>2]|0;
  $516 = (($rf) + 16|0);
  $517 = (($rf) + 4|0);
  $518 = HEAP32[$517>>2]|0;
  $519 = (($44) + ($518<<3)|0);
  ;HEAP32[$516+0>>2]=HEAP32[$519+0>>2]|0;HEAP32[$516+4>>2]=HEAP32[$519+4>>2]|0;
  $520 = (($rf) + 24|0);
  $521 = HEAP32[$rf>>2]|0;
  $522 = (($44) + 64|0);
  $523 = (($522) + ($521<<3)|0);
  ;HEAP32[$520+0>>2]=HEAP32[$523+0>>2]|0;HEAP32[$520+4>>2]=HEAP32[$523+4>>2]|0;
 }
 $524 = (($rf) + 32|0);
 $525 = (($rf) + 24|0);
 $526 = (($525) + 4|0);
 $527 = +HEAPF32[$526>>2];
 $528 = (($rf) + 24|0);
 $529 = +HEAPF32[$528>>2];
 $530 = -$529;
 __ZN6b2Vec23SetEff($524,$527,$530);
 $531 = (($rf) + 44|0);
 $532 = (($rf) + 32|0);
 __ZNK6b2Vec2ngEv($41,$532);
 ;HEAP32[$531+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$531+4>>2]=HEAP32[$41+4>>2]|0;
 $533 = (($rf) + 32|0);
 $534 = (($rf) + 8|0);
 $535 = (+__Z5b2DotRK6b2Vec2S1_($533,$534));
 $536 = (($rf) + 40|0);
 HEAPF32[$536>>2] = $535;
 $537 = (($rf) + 44|0);
 $538 = (($rf) + 16|0);
 $539 = (+__Z5b2DotRK6b2Vec2S1_($537,$538));
 $540 = (($rf) + 52|0);
 HEAPF32[$540>>2] = $539;
 $541 = (($clipPoints1) + 24|0);
 $542 = $clipPoints1;
 while(1) {
  __ZN12b2ClipVertexC2Ev($542);
  $543 = (($542) + 12|0);
  $544 = ($543|0)==($541|0);
  if ($544) {
   break;
  } else {
   $542 = $543;
  }
 }
 $545 = (($clipPoints2) + 24|0);
 $546 = $clipPoints2;
 while(1) {
  __ZN12b2ClipVertexC2Ev($546);
  $547 = (($546) + 12|0);
  $548 = ($547|0)==($545|0);
  if ($548) {
   break;
  } else {
   $546 = $547;
  }
 }
 $549 = (($rf) + 32|0);
 $550 = (($rf) + 40|0);
 $551 = +HEAPF32[$550>>2];
 $552 = HEAP32[$rf>>2]|0;
 $553 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1,$ie,$549,$551,$552)|0);
 $np = $553;
 $554 = $np;
 $555 = ($554|0)<(2);
 if ($555) {
  STACKTOP = sp;return;
 }
 $556 = (($rf) + 44|0);
 $557 = (($rf) + 52|0);
 $558 = +HEAPF32[$557>>2];
 $559 = (($rf) + 4|0);
 $560 = HEAP32[$559>>2]|0;
 $561 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2,$clipPoints1,$556,$558,$560)|0);
 $np = $561;
 $562 = $np;
 $563 = ($562|0)<(2);
 if ($563) {
  STACKTOP = sp;return;
 }
 $564 = HEAP32[$primaryAxis>>2]|0;
 $565 = ($564|0)==(1);
 if ($565) {
  $566 = $1;
  $567 = (($566) + 40|0);
  $568 = (($rf) + 24|0);
  ;HEAP32[$567+0>>2]=HEAP32[$568+0>>2]|0;HEAP32[$567+4>>2]=HEAP32[$568+4>>2]|0;
  $569 = $1;
  $570 = (($569) + 48|0);
  $571 = (($rf) + 8|0);
  ;HEAP32[$570+0>>2]=HEAP32[$571+0>>2]|0;HEAP32[$570+4>>2]=HEAP32[$571+4>>2]|0;
 } else {
  $572 = $1;
  $573 = (($572) + 40|0);
  $574 = HEAP32[$rf>>2]|0;
  $575 = $4;
  $576 = (($575) + 84|0);
  $577 = (($576) + ($574<<3)|0);
  ;HEAP32[$573+0>>2]=HEAP32[$577+0>>2]|0;HEAP32[$573+4>>2]=HEAP32[$577+4>>2]|0;
  $578 = $1;
  $579 = (($578) + 48|0);
  $580 = HEAP32[$rf>>2]|0;
  $581 = $4;
  $582 = (($581) + 20|0);
  $583 = (($582) + ($580<<3)|0);
  ;HEAP32[$579+0>>2]=HEAP32[$583+0>>2]|0;HEAP32[$579+4>>2]=HEAP32[$583+4>>2]|0;
 }
 $pointCount = 0;
 $i3 = 0;
 while(1) {
  $584 = $i3;
  $585 = ($584|0)<(2);
  if (!($585)) {
   break;
  }
  $586 = (($rf) + 24|0);
  $587 = $i3;
  $588 = (($clipPoints2) + (($587*12)|0)|0);
  $589 = (($rf) + 8|0);
  __ZmiRK6b2Vec2S1_($42,$588,$589);
  $590 = (+__Z5b2DotRK6b2Vec2S1_($586,$42));
  $separation = $590;
  $591 = $separation;
  $592 = (($44) + 244|0);
  $593 = +HEAPF32[$592>>2];
  $594 = $591 <= $593;
  if ($594) {
   $595 = $1;
   $596 = $pointCount;
   $597 = (($595) + (($596*20)|0)|0);
   $cp = $597;
   $598 = HEAP32[$primaryAxis>>2]|0;
   $599 = ($598|0)==(1);
   if ($599) {
    $600 = $cp;
    $601 = (($44) + 132|0);
    $602 = $i3;
    $603 = (($clipPoints2) + (($602*12)|0)|0);
    __Z6b2MulTRK11b2TransformRK6b2Vec2($43,$601,$603);
    ;HEAP32[$600+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$600+4>>2]=HEAP32[$43+4>>2]|0;
    $604 = $cp;
    $605 = (($604) + 16|0);
    $606 = $i3;
    $607 = (($clipPoints2) + (($606*12)|0)|0);
    $608 = (($607) + 8|0);
    ;HEAP32[$605+0>>2]=HEAP32[$608+0>>2]|0;
   } else {
    $609 = $cp;
    $610 = $i3;
    $611 = (($clipPoints2) + (($610*12)|0)|0);
    ;HEAP32[$609+0>>2]=HEAP32[$611+0>>2]|0;HEAP32[$609+4>>2]=HEAP32[$611+4>>2]|0;
    $612 = $i3;
    $613 = (($clipPoints2) + (($612*12)|0)|0);
    $614 = (($613) + 8|0);
    $615 = (($614) + 3|0);
    $616 = HEAP8[$615>>0]|0;
    $617 = $cp;
    $618 = (($617) + 16|0);
    $619 = (($618) + 2|0);
    HEAP8[$619>>0] = $616;
    $620 = $i3;
    $621 = (($clipPoints2) + (($620*12)|0)|0);
    $622 = (($621) + 8|0);
    $623 = (($622) + 2|0);
    $624 = HEAP8[$623>>0]|0;
    $625 = $cp;
    $626 = (($625) + 16|0);
    $627 = (($626) + 3|0);
    HEAP8[$627>>0] = $624;
    $628 = $i3;
    $629 = (($clipPoints2) + (($628*12)|0)|0);
    $630 = (($629) + 8|0);
    $631 = (($630) + 1|0);
    $632 = HEAP8[$631>>0]|0;
    $633 = $cp;
    $634 = (($633) + 16|0);
    HEAP8[$634>>0] = $632;
    $635 = $i3;
    $636 = (($clipPoints2) + (($635*12)|0)|0);
    $637 = (($636) + 8|0);
    $638 = HEAP8[$637>>0]|0;
    $639 = $cp;
    $640 = (($639) + 16|0);
    $641 = (($640) + 1|0);
    HEAP8[$641>>0] = $638;
   }
   $642 = $pointCount;
   $643 = (($642) + 1)|0;
   $pointCount = $643;
  }
  $644 = $i3;
  $645 = (($644) + 1)|0;
  $i3 = $645;
 }
 $646 = $pointCount;
 $647 = $1;
 $648 = (($647) + 60|0);
 HEAP32[$648>>2] = $646;
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 HEAP32[$agg$result>>2] = 1;
 $3 = (($2) + 248|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 $6 = $5 ? 0 : 1;
 $7 = (($agg$result) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (($agg$result) + 8|0);
 HEAPF32[$8>>2] = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = (($2) + 128|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = (($2) + 212|0);
  $14 = $i;
  $15 = (($2) + ($14<<3)|0);
  $16 = (($2) + 164|0);
  __ZmiRK6b2Vec2S1_($1,$15,$16);
  $17 = (+__Z5b2DotRK6b2Vec2S1_($13,$1));
  $s = $17;
  $18 = $s;
  $19 = (($agg$result) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $18 < $20;
  if ($21) {
   $22 = $s;
   $23 = (($agg$result) + 8|0);
   HEAPF32[$23>>2] = $22;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 STACKTOP = sp;return;
}
function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $n = 0, $perp = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $perp = sp + 32|0;
 $n = sp + 56|0;
 $1 = sp + 72|0;
 $2 = sp + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $0 = $this;
 $5 = $0;
 HEAP32[$agg$result>>2] = 0;
 $6 = (($agg$result) + 4|0);
 HEAP32[$6>>2] = -1;
 $7 = (($agg$result) + 8|0);
 HEAPF32[$7>>2] = -3.4028234663852886E+38;
 $8 = (($5) + 212|0);
 $9 = (($8) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = -$10;
 $12 = (($5) + 212|0);
 $13 = +HEAPF32[$12>>2];
 __ZN6b2Vec2C2Eff($perp,$11,$13);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = (($5) + 128|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   label = 16;
   break;
  }
  $18 = $i;
  $19 = (($5) + 64|0);
  $20 = (($19) + ($18<<3)|0);
  __ZNK6b2Vec2ngEv($n,$20);
  $21 = $i;
  $22 = (($5) + ($21<<3)|0);
  $23 = (($5) + 164|0);
  __ZmiRK6b2Vec2S1_($1,$22,$23);
  $24 = (+__Z5b2DotRK6b2Vec2S1_($n,$1));
  $s1 = $24;
  $25 = $i;
  $26 = (($5) + ($25<<3)|0);
  $27 = (($5) + 172|0);
  __ZmiRK6b2Vec2S1_($2,$26,$27);
  $28 = (+__Z5b2DotRK6b2Vec2S1_($n,$2));
  $s2 = $28;
  $29 = $s1;
  $30 = $s2;
  $31 = (+__Z5b2MinIfET_S0_S0_($29,$30));
  $s = $31;
  $32 = $s;
  $33 = (($5) + 244|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $32 > $34;
  if ($35) {
   label = 4;
   break;
  }
  $40 = (+__Z5b2DotRK6b2Vec2S1_($n,$perp));
  $41 = $40 >= 0.0;
  do {
   if ($41) {
    $42 = (($5) + 236|0);
    __ZmiRK6b2Vec2S1_($3,$n,$42);
    $43 = (($5) + 212|0);
    $44 = (+__Z5b2DotRK6b2Vec2S1_($3,$43));
    $45 = $44 < -0.034906588494777679;
    if ($45) {
     break;
    } else {
     label = 12;
     break;
    }
   } else {
    $46 = (($5) + 228|0);
    __ZmiRK6b2Vec2S1_($4,$n,$46);
    $47 = (($5) + 212|0);
    $48 = (+__Z5b2DotRK6b2Vec2S1_($4,$47));
    $49 = $48 < -0.034906588494777679;
    if ($49) {
     break;
    } else {
     label = 12;
     break;
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   $50 = $s;
   $51 = (($agg$result) + 8|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $50 > $52;
   if ($53) {
    HEAP32[$agg$result>>2] = 2;
    $54 = $i;
    $55 = (($agg$result) + 4|0);
    HEAP32[$55>>2] = $54;
    $56 = $s;
    $57 = (($agg$result) + 8|0);
    HEAPF32[$57>>2] = $56;
   }
  }
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 if ((label|0) == 4) {
  HEAP32[$agg$result>>2] = 2;
  $36 = $i;
  $37 = (($agg$result) + 4|0);
  HEAP32[$37>>2] = $36;
  $38 = $s;
  $39 = (($agg$result) + 8|0);
  HEAPF32[$39>>2] = $38;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold,$edgeA,$xfA,$polygonB,$xfB) {
 $manifold = $manifold|0;
 $edgeA = $edgeA|0;
 $xfA = $xfA|0;
 $polygonB = $polygonB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collider = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $collider = sp;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $polygonB;
 $4 = $xfB;
 __ZN12b2EPColliderC2Ev($collider);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider,$5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN6b2Vec23SetEff($this,$x_,$y_) {
 $this = $this|0;
 $x_ = +$x_;
 $y_ = +$y_;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x_;
 $2 = $y_;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAPF32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK11b2TransformS1_($agg$result,$A,$B) {
 $agg$result = $agg$result|0;
 $A = $A|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $A;
 $1 = $B;
 __ZN11b2TransformC2Ev($agg$result);
 $5 = (($agg$result) + 8|0);
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = $1;
 $9 = (($8) + 8|0);
 __Z6b2MulTRK5b2RotS1_($2,$7,$9);
 ;HEAP32[$5+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;
 $10 = $0;
 $11 = (($10) + 8|0);
 $12 = $1;
 $13 = $0;
 __ZmiRK6b2Vec2S1_($4,$12,$13);
 __Z6b2MulTRK5b2RotRK6b2Vec2($3,$11,$4);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function __Z7b2CrossRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = (($8) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $7 - $13;
 STACKTOP = sp;return (+$14);
}
function __ZNK6b2Vec2ngEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($agg$result);
 $2 = +HEAPF32[$1>>2];
 $3 = -$2;
 $4 = (($1) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = -$5;
 __ZN6b2Vec23SetEff($agg$result,$3,$6);
 STACKTOP = sp;return;
}
function __Z5b2MulRK5b2RotRK6b2Vec2($agg$result,$q,$v) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 - $13;
 $15 = $0;
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 * $18;
 $20 = $0;
 $21 = (($20) + 4|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = (($23) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 * $25;
 $27 = $19 + $26;
 __ZN6b2Vec2C2Eff($agg$result,$14,$27);
 STACKTOP = sp;return;
}
function __ZN12b2ClipVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;return;
}
function __ZN15b2ReferenceFaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = (($1) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = (($1) + 24|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = (($1) + 32|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = (($1) + 44|0);
 __ZN6b2Vec2C2Ev($6);
 STACKTOP = sp;return;
}
function __Z5b2MinIfET_S0_S0_($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 if ($4) {
  $5 = $0;
  $7 = $5;
 } else {
  $6 = $1;
  $7 = $6;
 }
 STACKTOP = sp;return (+$7);
}
function __ZN12b2EPColliderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13b2TempPolygonC2Ev($1);
 $2 = (($1) + 132|0);
 __ZN11b2TransformC2Ev($2);
 $3 = (($1) + 148|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = (($1) + 156|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = (($1) + 164|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = (($1) + 172|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = (($1) + 180|0);
 __ZN6b2Vec2C2Ev($7);
 $8 = (($1) + 188|0);
 __ZN6b2Vec2C2Ev($8);
 $9 = (($1) + 196|0);
 __ZN6b2Vec2C2Ev($9);
 $10 = (($1) + 204|0);
 __ZN6b2Vec2C2Ev($10);
 $11 = (($1) + 212|0);
 __ZN6b2Vec2C2Ev($11);
 $12 = (($1) + 228|0);
 __ZN6b2Vec2C2Ev($12);
 $13 = (($1) + 236|0);
 __ZN6b2Vec2C2Ev($13);
 STACKTOP = sp;return;
}
function __ZN11b2TransformC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN5b2RotC2Ev($2);
 STACKTOP = sp;return;
}
function __Z6b2MulTRK5b2RotS1_($agg$result,$q,$r) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $r;
 __ZN5b2RotC2Ev($agg$result);
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 - $13;
 HEAPF32[$agg$result>>2] = $14;
 $15 = $0;
 $16 = (($15) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = (($18) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 $22 = $0;
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = +HEAPF32[$24>>2];
 $26 = $23 * $25;
 $27 = $21 + $26;
 $28 = (($agg$result) + 4|0);
 HEAPF32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function __Z6b2MulTRK5b2RotRK6b2Vec2($agg$result,$q,$v) {
 $agg$result = $agg$result|0;
 $q = $q|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $0;
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $7 + $13;
 $15 = $0;
 $16 = +HEAPF32[$15>>2];
 $17 = -$16;
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = $0;
 $22 = (($21) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $1;
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $23 * $26;
 $28 = $20 + $27;
 __ZN6b2Vec2C2Eff($agg$result,$14,$28);
 STACKTOP = sp;return;
}
function __ZN6b2Vec2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN13b2TempPolygonC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 64|0);
 $3 = $1;
 while(1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = (($3) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = (($1) + 64|0);
 $7 = (($6) + 64|0);
 $8 = $6;
 while(1) {
  __ZN6b2Vec2C2Ev($8);
  $9 = (($8) + 8|0);
  $10 = ($9|0)==($7|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5b2RotC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold,$polyA,$xfA,$polyB,$xfB) {
 $manifold = $manifold|0;
 $polyA = $polyA|0;
 $xfA = $xfA|0;
 $polyB = $polyB|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0;
 var $99 = 0, $cf = 0, $clipPoints1 = 0, $clipPoints2 = 0, $count1 = 0, $cp = 0, $edge1 = 0, $edgeA = 0, $edgeB = 0, $flip = 0, $frontOffset = 0.0, $i = 0, $incidentEdge = 0, $iv1 = 0, $iv2 = 0, $k_absoluteTol = 0.0, $k_relativeTol = 0.0, $localNormal = 0, $localTangent = 0, $normal = 0;
 var $np = 0, $planePoint = 0, $pointCount = 0, $poly1 = 0, $poly2 = 0, $separation = 0.0, $separationA = 0.0, $separationB = 0.0, $sideOffset1 = 0.0, $sideOffset2 = 0.0, $tangent = 0, $totalRadius = 0.0, $v11 = 0, $v12 = 0, $vertices1 = 0, $xf1 = 0, $xf2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edgeA = sp + 20|0;
 $edgeB = sp + 28|0;
 $xf1 = sp + 48|0;
 $xf2 = sp + 64|0;
 $incidentEdge = sp + 272|0;
 $v11 = sp + 320|0;
 $v12 = sp + 152|0;
 $localTangent = sp + 160|0;
 $localNormal = sp + 168|0;
 $planePoint = sp + 176|0;
 $5 = sp + 184|0;
 $tangent = sp + 192|0;
 $normal = sp + 200|0;
 $6 = sp + 208|0;
 $7 = sp + 216|0;
 $clipPoints1 = sp + 232|0;
 $clipPoints2 = sp + 104|0;
 $8 = sp + 264|0;
 $9 = sp + 88|0;
 $cf = sp + 328|0;
 $0 = $manifold;
 $1 = $polyA;
 $2 = $xfA;
 $3 = $polyB;
 $4 = $xfB;
 $10 = $0;
 $11 = (($10) + 60|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = (($12) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $3;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 + $17;
 $totalRadius = $18;
 HEAP32[$edgeA>>2] = 0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = (+__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA,$19,$20,$21,$22));
 $separationA = $23;
 $24 = $separationA;
 $25 = $totalRadius;
 $26 = $24 > $25;
 if ($26) {
  STACKTOP = sp;return;
 }
 HEAP32[$edgeB>>2] = 0;
 $27 = $3;
 $28 = $4;
 $29 = $1;
 $30 = $2;
 $31 = (+__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB,$27,$28,$29,$30));
 $separationB = $31;
 $32 = $separationB;
 $33 = $totalRadius;
 $34 = $32 > $33;
 if ($34) {
  STACKTOP = sp;return;
 }
 __ZN11b2TransformC2Ev($xf1);
 __ZN11b2TransformC2Ev($xf2);
 $k_relativeTol = 0.98000001907348633;
 $k_absoluteTol = 0.0010000000474974513;
 $35 = $separationB;
 $36 = $separationA;
 $37 = 0.98000001907348633 * $36;
 $38 = $37 + 0.0010000000474974513;
 $39 = $35 > $38;
 if ($39) {
  $40 = $3;
  $poly1 = $40;
  $41 = $1;
  $poly2 = $41;
  $42 = $4;
  ;HEAP32[$xf1+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$xf1+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$xf1+12>>2]=HEAP32[$42+12>>2]|0;
  $43 = $2;
  ;HEAP32[$xf2+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$xf2+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$xf2+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$xf2+12>>2]=HEAP32[$43+12>>2]|0;
  $44 = HEAP32[$edgeB>>2]|0;
  $edge1 = $44;
  $45 = $0;
  $46 = (($45) + 56|0);
  HEAP32[$46>>2] = 2;
  $flip = 1;
 } else {
  $47 = $1;
  $poly1 = $47;
  $48 = $3;
  $poly2 = $48;
  $49 = $2;
  ;HEAP32[$xf1+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$xf1+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$xf1+12>>2]=HEAP32[$49+12>>2]|0;
  $50 = $4;
  ;HEAP32[$xf2+0>>2]=HEAP32[$50+0>>2]|0;HEAP32[$xf2+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$xf2+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$xf2+12>>2]=HEAP32[$50+12>>2]|0;
  $51 = HEAP32[$edgeA>>2]|0;
  $edge1 = $51;
  $52 = $0;
  $53 = (($52) + 56|0);
  HEAP32[$53>>2] = 1;
  $flip = 0;
 }
 $54 = (($incidentEdge) + 24|0);
 $55 = $incidentEdge;
 while(1) {
  __ZN12b2ClipVertexC2Ev($55);
  $56 = (($55) + 12|0);
  $57 = ($56|0)==($54|0);
  if ($57) {
   break;
  } else {
   $55 = $56;
  }
 }
 $58 = $poly1;
 $59 = $edge1;
 $60 = $poly2;
 __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($incidentEdge,$58,$xf1,$59,$60,$xf2);
 $61 = $poly1;
 $62 = (($61) + 148|0);
 $63 = HEAP32[$62>>2]|0;
 $count1 = $63;
 $64 = $poly1;
 $65 = (($64) + 20|0);
 $vertices1 = $65;
 $66 = $edge1;
 $iv1 = $66;
 $67 = $edge1;
 $68 = (($67) + 1)|0;
 $69 = $count1;
 $70 = ($68|0)<($69|0);
 if ($70) {
  $71 = $edge1;
  $72 = (($71) + 1)|0;
  $73 = $72;
 } else {
  $73 = 0;
 }
 $iv2 = $73;
 $74 = $iv1;
 $75 = $vertices1;
 $76 = (($75) + ($74<<3)|0);
 ;HEAP32[$v11+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$v11+4>>2]=HEAP32[$76+4>>2]|0;
 $77 = $iv2;
 $78 = $vertices1;
 $79 = (($78) + ($77<<3)|0);
 ;HEAP32[$v12+0>>2]=HEAP32[$79+0>>2]|0;HEAP32[$v12+4>>2]=HEAP32[$79+4>>2]|0;
 __ZmiRK6b2Vec2S1_($localTangent,$v12,$v11);
 (+__ZN6b2Vec29NormalizeEv($localTangent));
 __Z7b2CrossRK6b2Vec2f($localNormal,$localTangent,1.0);
 __ZplRK6b2Vec2S1_($5,$v11,$v12);
 __ZmlfRK6b2Vec2($planePoint,0.5,$5);
 $80 = (($xf1) + 8|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($tangent,$80,$localTangent);
 __Z7b2CrossRK6b2Vec2f($normal,$tangent,1.0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($6,$xf1,$v11);
 ;HEAP32[$v11+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$v11+4>>2]=HEAP32[$6+4>>2]|0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$xf1,$v12);
 ;HEAP32[$v12+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$v12+4>>2]=HEAP32[$7+4>>2]|0;
 $81 = (+__Z5b2DotRK6b2Vec2S1_($normal,$v11));
 $frontOffset = $81;
 $82 = (+__Z5b2DotRK6b2Vec2S1_($tangent,$v11));
 $83 = -$82;
 $84 = $totalRadius;
 $85 = $83 + $84;
 $sideOffset1 = $85;
 $86 = (+__Z5b2DotRK6b2Vec2S1_($tangent,$v12));
 $87 = $totalRadius;
 $88 = $86 + $87;
 $sideOffset2 = $88;
 $89 = (($clipPoints1) + 24|0);
 $90 = $clipPoints1;
 while(1) {
  __ZN12b2ClipVertexC2Ev($90);
  $91 = (($90) + 12|0);
  $92 = ($91|0)==($89|0);
  if ($92) {
   break;
  } else {
   $90 = $91;
  }
 }
 $93 = (($clipPoints2) + 24|0);
 $94 = $clipPoints2;
 while(1) {
  __ZN12b2ClipVertexC2Ev($94);
  $95 = (($94) + 12|0);
  $96 = ($95|0)==($93|0);
  if ($96) {
   break;
  } else {
   $94 = $95;
  }
 }
 __ZNK6b2Vec2ngEv($8,$tangent);
 $97 = $sideOffset1;
 $98 = $iv1;
 $99 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1,$incidentEdge,$8,$97,$98)|0);
 $np = $99;
 $100 = $np;
 $101 = ($100|0)<(2);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $sideOffset2;
 $103 = $iv2;
 $104 = (__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2,$clipPoints1,$tangent,$102,$103)|0);
 $np = $104;
 $105 = $np;
 $106 = ($105|0)<(2);
 if ($106) {
  STACKTOP = sp;return;
 }
 $107 = $0;
 $108 = (($107) + 40|0);
 ;HEAP32[$108+0>>2]=HEAP32[$localNormal+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$localNormal+4>>2]|0;
 $109 = $0;
 $110 = (($109) + 48|0);
 ;HEAP32[$110+0>>2]=HEAP32[$planePoint+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$planePoint+4>>2]|0;
 $pointCount = 0;
 $i = 0;
 while(1) {
  $111 = $i;
  $112 = ($111|0)<(2);
  if (!($112)) {
   break;
  }
  $113 = $i;
  $114 = (($clipPoints2) + (($113*12)|0)|0);
  $115 = (+__Z5b2DotRK6b2Vec2S1_($normal,$114));
  $116 = $frontOffset;
  $117 = $115 - $116;
  $separation = $117;
  $118 = $separation;
  $119 = $totalRadius;
  $120 = $118 <= $119;
  if ($120) {
   $121 = $0;
   $122 = $pointCount;
   $123 = (($121) + (($122*20)|0)|0);
   $cp = $123;
   $124 = $cp;
   $125 = $i;
   $126 = (($clipPoints2) + (($125*12)|0)|0);
   __Z6b2MulTRK11b2TransformRK6b2Vec2($9,$xf2,$126);
   ;HEAP32[$124+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$124+4>>2]=HEAP32[$9+4>>2]|0;
   $127 = $cp;
   $128 = (($127) + 16|0);
   $129 = $i;
   $130 = (($clipPoints2) + (($129*12)|0)|0);
   $131 = (($130) + 8|0);
   ;HEAP32[$128+0>>2]=HEAP32[$131+0>>2]|0;
   $132 = $flip;
   $133 = ($132<<24>>24)!=(0);
   if ($133) {
    $134 = $cp;
    $135 = (($134) + 16|0);
    ;HEAP8[$cf+0>>0]=HEAP8[$135+0>>0]|0;HEAP8[$cf+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$cf+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$cf+3>>0]=HEAP8[$135+3>>0]|0;
    $136 = (($cf) + 1|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $cp;
    $139 = (($138) + 16|0);
    HEAP8[$139>>0] = $137;
    $140 = HEAP8[$cf>>0]|0;
    $141 = $cp;
    $142 = (($141) + 16|0);
    $143 = (($142) + 1|0);
    HEAP8[$143>>0] = $140;
    $144 = (($cf) + 3|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $cp;
    $147 = (($146) + 16|0);
    $148 = (($147) + 2|0);
    HEAP8[$148>>0] = $145;
    $149 = (($cf) + 2|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $cp;
    $152 = (($151) + 16|0);
    $153 = (($152) + 3|0);
    HEAP8[$153>>0] = $150;
   }
   $154 = $pointCount;
   $155 = (($154) + 1)|0;
   $pointCount = $155;
  }
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
 }
 $158 = $pointCount;
 $159 = $0;
 $160 = (($159) + 60|0);
 HEAP32[$160>>2] = $158;
 STACKTOP = sp;return;
}
function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex,$poly1,$xf1,$poly2,$xf2) {
 $edgeIndex = $edgeIndex|0;
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestEdge = 0, $bestSeparation = 0.0, $count1 = 0, $d = 0;
 var $dLocal1 = 0, $dot = 0.0, $edge = 0, $i = 0, $increment = 0, $maxDot = 0.0, $nextEdge = 0, $normals1 = 0, $prevEdge = 0, $s = 0.0, $sNext = 0.0, $sPrev = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp + 64|0;
 $6 = sp + 80|0;
 $7 = sp + 96|0;
 $dLocal1 = sp + 112|0;
 $1 = $edgeIndex;
 $2 = $poly1;
 $3 = $xf1;
 $4 = $poly2;
 $5 = $xf2;
 $8 = $2;
 $9 = (($8) + 148|0);
 $10 = HEAP32[$9>>2]|0;
 $count1 = $10;
 $11 = $2;
 $12 = (($11) + 84|0);
 $normals1 = $12;
 $13 = $5;
 $14 = $4;
 $15 = (($14) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($6,$13,$15);
 $16 = $3;
 $17 = $2;
 $18 = (($17) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$16,$18);
 __ZmiRK6b2Vec2S1_($d,$6,$7);
 $19 = $3;
 $20 = (($19) + 8|0);
 __Z6b2MulTRK5b2RotRK6b2Vec2($dLocal1,$20,$d);
 $edge = 0;
 $maxDot = -3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $count1;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $normals1;
  $26 = (($25) + ($24<<3)|0);
  $27 = (+__Z5b2DotRK6b2Vec2S1_($26,$dLocal1));
  $dot = $27;
  $28 = $dot;
  $29 = $maxDot;
  $30 = $28 > $29;
  if ($30) {
   $31 = $dot;
   $maxDot = $31;
   $32 = $i;
   $edge = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $2;
 $36 = $3;
 $37 = $edge;
 $38 = $4;
 $39 = $5;
 $40 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($35,$36,$37,$38,$39));
 $s = $40;
 $41 = $edge;
 $42 = (($41) - 1)|0;
 $43 = ($42|0)>=(0);
 if ($43) {
  $44 = $edge;
  $45 = (($44) - 1)|0;
  $48 = $45;
 } else {
  $46 = $count1;
  $47 = (($46) - 1)|0;
  $48 = $47;
 }
 $prevEdge = $48;
 $49 = $2;
 $50 = $3;
 $51 = $prevEdge;
 $52 = $4;
 $53 = $5;
 $54 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($49,$50,$51,$52,$53));
 $sPrev = $54;
 $55 = $edge;
 $56 = (($55) + 1)|0;
 $57 = $count1;
 $58 = ($56|0)<($57|0);
 if ($58) {
  $59 = $edge;
  $60 = (($59) + 1)|0;
  $61 = $60;
 } else {
  $61 = 0;
 }
 $nextEdge = $61;
 $62 = $2;
 $63 = $3;
 $64 = $nextEdge;
 $65 = $4;
 $66 = $5;
 $67 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($62,$63,$64,$65,$66));
 $sNext = $67;
 $68 = $sPrev;
 $69 = $s;
 $70 = $68 > $69;
 if ($70) {
  $71 = $sPrev;
  $72 = $sNext;
  $73 = $71 > $72;
  if ($73) {
   $increment = -1;
   $74 = $prevEdge;
   $bestEdge = $74;
   $75 = $sPrev;
   $bestSeparation = $75;
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 do {
  if ((label|0) == 16) {
   $76 = $sNext;
   $77 = $s;
   $78 = $76 > $77;
   if ($78) {
    $increment = 1;
    $79 = $nextEdge;
    $bestEdge = $79;
    $80 = $sNext;
    $bestSeparation = $80;
    break;
   } else {
    $81 = $edge;
    $82 = $1;
    HEAP32[$82>>2] = $81;
    $83 = $s;
    $0 = $83;
    $115 = $0;
    STACKTOP = sp;return (+$115);
   }
  }
 } while(0);
 while(1) {
  $84 = $increment;
  $85 = ($84|0)==(-1);
  if ($85) {
   $86 = $bestEdge;
   $87 = (($86) - 1)|0;
   $88 = ($87|0)>=(0);
   if ($88) {
    $89 = $bestEdge;
    $90 = (($89) - 1)|0;
    $93 = $90;
   } else {
    $91 = $count1;
    $92 = (($91) - 1)|0;
    $93 = $92;
   }
   $edge = $93;
  } else {
   $94 = $bestEdge;
   $95 = (($94) + 1)|0;
   $96 = $count1;
   $97 = ($95|0)<($96|0);
   if ($97) {
    $98 = $bestEdge;
    $99 = (($98) + 1)|0;
    $100 = $99;
   } else {
    $100 = 0;
   }
   $edge = $100;
  }
  $101 = $2;
  $102 = $3;
  $103 = $edge;
  $104 = $4;
  $105 = $5;
  $106 = (+__ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($101,$102,$103,$104,$105));
  $s = $106;
  $107 = $s;
  $108 = $bestSeparation;
  $109 = $107 > $108;
  if (!($109)) {
   break;
  }
  $110 = $edge;
  $bestEdge = $110;
  $111 = $s;
  $bestSeparation = $111;
 }
 $112 = $bestEdge;
 $113 = $1;
 HEAP32[$113>>2] = $112;
 $114 = $bestSeparation;
 $0 = $114;
 $115 = $0;
 STACKTOP = sp;return (+$115);
}
function __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($c,$poly1,$xf1,$edge1,$poly2,$xf2) {
 $c = $c|0;
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $edge1 = $edge1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $count2 = 0;
 var $dot = 0.0, $i = 0, $i1 = 0, $i2 = 0, $index = 0, $minDot = 0.0, $normal1 = 0, $normals1 = 0, $normals2 = 0, $vertices2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal1 = sp + 96|0;
 $6 = sp + 48|0;
 $7 = sp + 72|0;
 $8 = sp + 16|0;
 $0 = $c;
 $1 = $poly1;
 $2 = $xf1;
 $3 = $edge1;
 $4 = $poly2;
 $5 = $xf2;
 $9 = $1;
 $10 = (($9) + 84|0);
 $normals1 = $10;
 $11 = $4;
 $12 = (($11) + 148|0);
 $13 = HEAP32[$12>>2]|0;
 $count2 = $13;
 $14 = $4;
 $15 = (($14) + 20|0);
 $vertices2 = $15;
 $16 = $4;
 $17 = (($16) + 84|0);
 $normals2 = $17;
 $18 = $3;
 $19 = (0)<=($18|0);
 if (!($19)) {
  ___assert_fail((136|0),(184|0),151,(272|0));
  // unreachable;
 }
 $20 = $3;
 $21 = $1;
 $22 = (($21) + 148|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)<($23|0);
 if (!($24)) {
  ___assert_fail((136|0),(184|0),151,(272|0));
  // unreachable;
 }
 $25 = $5;
 $26 = (($25) + 8|0);
 $27 = $2;
 $28 = (($27) + 8|0);
 $29 = $3;
 $30 = $normals1;
 $31 = (($30) + ($29<<3)|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($6,$28,$31);
 __Z6b2MulTRK5b2RotRK6b2Vec2($normal1,$26,$6);
 $index = 0;
 $minDot = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $count2;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = $normals2;
  $37 = (($36) + ($35<<3)|0);
  $38 = (+__Z5b2DotRK6b2Vec2S1_($normal1,$37));
  $dot = $38;
  $39 = $dot;
  $40 = $minDot;
  $41 = $39 < $40;
  if ($41) {
   $42 = $dot;
   $minDot = $42;
   $43 = $i;
   $index = $43;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $index;
 $i1 = $46;
 $47 = $i1;
 $48 = (($47) + 1)|0;
 $49 = $count2;
 $50 = ($48|0)<($49|0);
 if ($50) {
  $51 = $i1;
  $52 = (($51) + 1)|0;
  $53 = $52;
 } else {
  $53 = 0;
 }
 $i2 = $53;
 $54 = $0;
 $55 = $5;
 $56 = $i1;
 $57 = $vertices2;
 $58 = (($57) + ($56<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7,$55,$58);
 ;HEAP32[$54+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$7+4>>2]|0;
 $59 = $3;
 $60 = $59&255;
 $61 = $0;
 $62 = (($61) + 8|0);
 HEAP8[$62>>0] = $60;
 $63 = $i1;
 $64 = $63&255;
 $65 = $0;
 $66 = (($65) + 8|0);
 $67 = (($66) + 1|0);
 HEAP8[$67>>0] = $64;
 $68 = $0;
 $69 = (($68) + 8|0);
 $70 = (($69) + 2|0);
 HEAP8[$70>>0] = 1;
 $71 = $0;
 $72 = (($71) + 8|0);
 $73 = (($72) + 3|0);
 HEAP8[$73>>0] = 0;
 $74 = $0;
 $75 = (($74) + 12|0);
 $76 = $5;
 $77 = $i2;
 $78 = $vertices2;
 $79 = (($78) + ($77<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($8,$76,$79);
 ;HEAP32[$75+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$8+4>>2]|0;
 $80 = $3;
 $81 = $80&255;
 $82 = $0;
 $83 = (($82) + 12|0);
 $84 = (($83) + 8|0);
 HEAP8[$84>>0] = $81;
 $85 = $i2;
 $86 = $85&255;
 $87 = $0;
 $88 = (($87) + 12|0);
 $89 = (($88) + 8|0);
 $90 = (($89) + 1|0);
 HEAP8[$90>>0] = $86;
 $91 = $0;
 $92 = (($91) + 12|0);
 $93 = (($92) + 8|0);
 $94 = (($93) + 2|0);
 HEAP8[$94>>0] = 1;
 $95 = $0;
 $96 = (($95) + 12|0);
 $97 = (($96) + 8|0);
 $98 = (($97) + 3|0);
 HEAP8[$98>>0] = 0;
 STACKTOP = sp;return;
}
function __Z7b2CrossRK6b2Vec2f($agg$result,$a,$s) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $s;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2 * $5;
 $7 = $1;
 $8 = -$7;
 $9 = $0;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result,$6,$11);
 STACKTOP = sp;return;
}
function __ZL16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_($poly1,$xf1,$edge1,$poly2,$xf2) {
 $poly1 = $poly1|0;
 $xf1 = $xf1|0;
 $edge1 = $edge1|0;
 $poly2 = $poly2|0;
 $xf2 = $xf2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count2 = 0, $dot = 0.0, $i = 0, $index = 0, $minDot = 0.0, $normal1 = 0, $normal1World = 0;
 var $normals1 = 0, $separation = 0.0, $v1 = 0, $v2 = 0, $vertices1 = 0, $vertices2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal1World = sp + 104|0;
 $normal1 = sp + 48|0;
 $v1 = sp + 24|0;
 $v2 = sp + 72|0;
 $5 = sp + 88|0;
 $0 = $poly1;
 $1 = $xf1;
 $2 = $edge1;
 $3 = $poly2;
 $4 = $xf2;
 $6 = $0;
 $7 = (($6) + 20|0);
 $vertices1 = $7;
 $8 = $0;
 $9 = (($8) + 84|0);
 $normals1 = $9;
 $10 = $3;
 $11 = (($10) + 148|0);
 $12 = HEAP32[$11>>2]|0;
 $count2 = $12;
 $13 = $3;
 $14 = (($13) + 20|0);
 $vertices2 = $14;
 $15 = $2;
 $16 = (0)<=($15|0);
 if (!($16)) {
  ___assert_fail((136|0),(184|0),32,(296|0));
  // unreachable;
 }
 $17 = $2;
 $18 = $0;
 $19 = (($18) + 148|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)<($20|0);
 if (!($21)) {
  ___assert_fail((136|0),(184|0),32,(296|0));
  // unreachable;
 }
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = $2;
 $25 = $normals1;
 $26 = (($25) + ($24<<3)|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($normal1World,$23,$26);
 $27 = $4;
 $28 = (($27) + 8|0);
 __Z6b2MulTRK5b2RotRK6b2Vec2($normal1,$28,$normal1World);
 $index = 0;
 $minDot = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $count2;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  $33 = $vertices2;
  $34 = (($33) + ($32<<3)|0);
  $35 = (+__Z5b2DotRK6b2Vec2S1_($34,$normal1));
  $dot = $35;
  $36 = $dot;
  $37 = $minDot;
  $38 = $36 < $37;
  if ($38) {
   $39 = $dot;
   $minDot = $39;
   $40 = $i;
   $index = $40;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $1;
 $44 = $2;
 $45 = $vertices1;
 $46 = (($45) + ($44<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v1,$43,$46);
 $47 = $4;
 $48 = $index;
 $49 = $vertices2;
 $50 = (($49) + ($48<<3)|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v2,$47,$50);
 __ZmiRK6b2Vec2S1_($5,$v2,$v1);
 $51 = (+__Z5b2DotRK6b2Vec2S1_($5,$normal1World));
 $separation = $51;
 $52 = $separation;
 STACKTOP = sp;return (+$52);
}
function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this,$manifold,$xfA,$radiusA,$xfB,$radiusB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $radiusA = +$radiusA;
 $xfB = $xfB|0;
 $radiusB = +$radiusB;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $cA = 0, $cA1 = 0, $cA7 = 0, $cB = 0, $cB2 = 0, $cB6 = 0, $clipPoint = 0, $clipPoint5 = 0;
 var $i = 0, $i4 = 0, $planePoint = 0, $planePoint3 = 0, $pointA = 0, $pointB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pointA = sp + 16|0;
 $pointB = sp + 176|0;
 $6 = sp + 24|0;
 $cA = sp + 32|0;
 $7 = sp + 40|0;
 $cB = sp + 48|0;
 $8 = sp + 56|0;
 $9 = sp + 64|0;
 $10 = sp + 208|0;
 $11 = sp + 224|0;
 $planePoint = sp + 240|0;
 $clipPoint = sp + 264|0;
 $cA1 = sp + 272|0;
 $12 = sp + 104|0;
 $13 = sp + 112|0;
 $cB2 = sp + 120|0;
 $14 = sp + 128|0;
 $15 = sp + 136|0;
 $16 = sp + 144|0;
 $17 = sp + 152|0;
 $planePoint3 = sp + 160|0;
 $clipPoint5 = sp + 192|0;
 $cB6 = sp + 184|0;
 $18 = sp + 200|0;
 $19 = sp + 216|0;
 $cA7 = sp + 80|0;
 $20 = sp + 232|0;
 $21 = sp + 8|0;
 $22 = sp + 88|0;
 $23 = sp + 248|0;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $radiusA;
 $4 = $xfB;
 $5 = $radiusB;
 $24 = $0;
 $25 = $1;
 $26 = (($25) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = (($29) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 if ((($31|0) == 0)) {
  __ZN6b2Vec23SetEff($24,1.0,0.0);
  $32 = $2;
  $33 = $1;
  $34 = (($33) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$32,$34);
  $35 = $4;
  $36 = $1;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$35,$36);
  $37 = (+__Z17b2DistanceSquaredRK6b2Vec2S1_($pointA,$pointB));
  $38 = $37 > 1.4210854715202004E-14;
  if ($38) {
   __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
   ;HEAP32[$24+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$6+4>>2]|0;
   (+__ZN6b2Vec29NormalizeEv($24));
  }
  $39 = $3;
  __ZmlfRK6b2Vec2($7,$39,$24);
  __ZplRK6b2Vec2S1_($cA,$pointA,$7);
  $40 = $5;
  __ZmlfRK6b2Vec2($8,$40,$24);
  __ZmiRK6b2Vec2S1_($cB,$pointB,$8);
  $41 = (($24) + 8|0);
  __ZplRK6b2Vec2S1_($10,$cA,$cB);
  __ZmlfRK6b2Vec2($9,0.5,$10);
  ;HEAP32[$41+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$9+4>>2]|0;
  STACKTOP = sp;return;
 } else if ((($31|0) == 1)) {
  $42 = $2;
  $43 = (($42) + 8|0);
  $44 = $1;
  $45 = (($44) + 40|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($11,$43,$45);
  ;HEAP32[$24+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$11+4>>2]|0;
  $46 = $2;
  $47 = $1;
  $48 = (($47) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint,$46,$48);
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = $1;
   $51 = (($50) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49|0)<($52|0);
   if (!($53)) {
    break;
   }
   $54 = $4;
   $55 = $i;
   $56 = $1;
   $57 = (($56) + (($55*20)|0)|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint,$54,$57);
   $58 = $3;
   __ZmiRK6b2Vec2S1_($13,$clipPoint,$planePoint);
   $59 = (+__Z5b2DotRK6b2Vec2S1_($13,$24));
   $60 = $58 - $59;
   __ZmlfRK6b2Vec2($12,$60,$24);
   __ZplRK6b2Vec2S1_($cA1,$clipPoint,$12);
   $61 = $5;
   __ZmlfRK6b2Vec2($14,$61,$24);
   __ZmiRK6b2Vec2S1_($cB2,$clipPoint,$14);
   $62 = $i;
   $63 = (($24) + 8|0);
   $64 = (($63) + ($62<<3)|0);
   __ZplRK6b2Vec2S1_($16,$cA1,$cB2);
   __ZmlfRK6b2Vec2($15,0.5,$16);
   ;HEAP32[$64+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$15+4>>2]|0;
   $65 = $i;
   $66 = (($65) + 1)|0;
   $i = $66;
  }
  STACKTOP = sp;return;
 } else if ((($31|0) == 2)) {
  $67 = $4;
  $68 = (($67) + 8|0);
  $69 = $1;
  $70 = (($69) + 40|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($17,$68,$70);
  ;HEAP32[$24+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$17+4>>2]|0;
  $71 = $4;
  $72 = $1;
  $73 = (($72) + 48|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint3,$71,$73);
  $i4 = 0;
  while(1) {
   $74 = $i4;
   $75 = $1;
   $76 = (($75) + 60|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($74|0)<($77|0);
   if (!($78)) {
    break;
   }
   $79 = $2;
   $80 = $i4;
   $81 = $1;
   $82 = (($81) + (($80*20)|0)|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint5,$79,$82);
   $83 = $5;
   __ZmiRK6b2Vec2S1_($19,$clipPoint5,$planePoint3);
   $84 = (+__Z5b2DotRK6b2Vec2S1_($19,$24));
   $85 = $83 - $84;
   __ZmlfRK6b2Vec2($18,$85,$24);
   __ZplRK6b2Vec2S1_($cB6,$clipPoint5,$18);
   $86 = $3;
   __ZmlfRK6b2Vec2($20,$86,$24);
   __ZmiRK6b2Vec2S1_($cA7,$clipPoint5,$20);
   $87 = $i4;
   $88 = (($24) + 8|0);
   $89 = (($88) + ($87<<3)|0);
   __ZplRK6b2Vec2S1_($22,$cA7,$cB6);
   __ZmlfRK6b2Vec2($21,0.5,$22);
   ;HEAP32[$89+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$21+4>>2]|0;
   $90 = $i4;
   $91 = (($90) + 1)|0;
   $i4 = $91;
  }
  __ZNK6b2Vec2ngEv($23,$24);
  ;HEAP32[$24+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$23+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut,$vIn,$normal,$offset,$vertexIndexA) {
 $vOut = $vOut|0;
 $vIn = $vIn|0;
 $normal = $normal|0;
 $offset = +$offset;
 $vertexIndexA = $vertexIndexA|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $distance0 = 0.0;
 var $distance1 = 0.0, $interp = 0.0, $numOut = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp + 48|0;
 $0 = $vOut;
 $1 = $vIn;
 $2 = $normal;
 $3 = $offset;
 $4 = $vertexIndexA;
 $numOut = 0;
 $8 = $2;
 $9 = $1;
 $10 = (+__Z5b2DotRK6b2Vec2S1_($8,$9));
 $11 = $3;
 $12 = $10 - $11;
 $distance0 = $12;
 $13 = $2;
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = (+__Z5b2DotRK6b2Vec2S1_($13,$15));
 $17 = $3;
 $18 = $16 - $17;
 $distance1 = $18;
 $19 = $distance0;
 $20 = $19 <= 0.0;
 if ($20) {
  $21 = $numOut;
  $22 = (($21) + 1)|0;
  $numOut = $22;
  $23 = $0;
  $24 = (($23) + (($21*12)|0)|0);
  $25 = $1;
  ;HEAP32[$24+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;
 }
 $26 = $distance1;
 $27 = $26 <= 0.0;
 if ($27) {
  $28 = $numOut;
  $29 = (($28) + 1)|0;
  $numOut = $29;
  $30 = $0;
  $31 = (($30) + (($28*12)|0)|0);
  $32 = $1;
  $33 = (($32) + 12|0);
  ;HEAP32[$31+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;
 }
 $34 = $distance0;
 $35 = $distance1;
 $36 = $34 * $35;
 $37 = $36 < 0.0;
 if (!($37)) {
  $78 = $numOut;
  STACKTOP = sp;return ($78|0);
 }
 $38 = $distance0;
 $39 = $distance0;
 $40 = $distance1;
 $41 = $39 - $40;
 $42 = $38 / $41;
 $interp = $42;
 $43 = $numOut;
 $44 = $0;
 $45 = (($44) + (($43*12)|0)|0);
 $46 = $1;
 $47 = $interp;
 $48 = $1;
 $49 = (($48) + 12|0);
 $50 = $1;
 __ZmiRK6b2Vec2S1_($7,$49,$50);
 __ZmlfRK6b2Vec2($6,$47,$7);
 __ZplRK6b2Vec2S1_($5,$46,$6);
 ;HEAP32[$45+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$5+4>>2]|0;
 $51 = $4;
 $52 = $51&255;
 $53 = $numOut;
 $54 = $0;
 $55 = (($54) + (($53*12)|0)|0);
 $56 = (($55) + 8|0);
 HEAP8[$56>>0] = $52;
 $57 = $1;
 $58 = (($57) + 8|0);
 $59 = (($58) + 1|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $numOut;
 $62 = $0;
 $63 = (($62) + (($61*12)|0)|0);
 $64 = (($63) + 8|0);
 $65 = (($64) + 1|0);
 HEAP8[$65>>0] = $60;
 $66 = $numOut;
 $67 = $0;
 $68 = (($67) + (($66*12)|0)|0);
 $69 = (($68) + 8|0);
 $70 = (($69) + 2|0);
 HEAP8[$70>>0] = 0;
 $71 = $numOut;
 $72 = $0;
 $73 = (($72) + (($71*12)|0)|0);
 $74 = (($73) + 8|0);
 $75 = (($74) + 3|0);
 HEAP8[$75>>0] = 1;
 $76 = $numOut;
 $77 = (($76) + 1)|0;
 $numOut = $77;
 $78 = $numOut;
 STACKTOP = sp;return ($78|0);
}
function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA,$indexA,$shapeB,$indexB,$xfA,$xfB) {
 $shapeA = $shapeA|0;
 $indexA = $indexA|0;
 $shapeB = $shapeB|0;
 $indexB = $indexB|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cache = 0, $input = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $input = sp + 12|0;
 $cache = sp + 136|0;
 $output = sp + 112|0;
 $0 = $shapeA;
 $1 = $indexA;
 $2 = $shapeB;
 $3 = $indexB;
 $4 = $xfA;
 $5 = $xfB;
 __ZN15b2DistanceInputC2Ev($input);
 $6 = $0;
 $7 = $1;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($input,$6,$7);
 $8 = (($input) + 28|0);
 $9 = $2;
 $10 = $3;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($8,$9,$10);
 $11 = (($input) + 56|0);
 $12 = $4;
 ;HEAP32[$11+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$12+12>>2]|0;
 $13 = (($input) + 72|0);
 $14 = $5;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;
 $15 = (($input) + 88|0);
 HEAP8[$15>>0] = 1;
 $16 = (($cache) + 4|0);
 HEAP16[$16>>1] = 0;
 __ZN16b2DistanceOutputC2Ev($output);
 __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output,$cache,$input);
 $17 = (($output) + 16|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 < 1.1920928955078125E-6;
 STACKTOP = sp;return ($19|0);
}
function __ZN6b2Vec2clEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3<<2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN15b2DistanceInputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = (($1) + 28|0);
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = (($1) + 56|0);
 __ZN11b2TransformC2Ev($3);
 $4 = (($1) + 72|0);
 __ZN11b2TransformC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN16b2DistanceOutputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __Z5b2AbsIfET_S0_($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 > 0.0;
 if ($2) {
  $3 = $0;
  $6 = $3;
 } else {
  $4 = $0;
  $5 = -$4;
  $6 = $5;
 }
 STACKTOP = sp;return (+$6);
}
function __ZN15b2DistanceProxyC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = $1;
 while(1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = (($3) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = (($1) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 20|0);
 HEAP32[$7>>2] = 0;
 $8 = (($1) + 24|0);
 HEAPF32[$8>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this,$shape,$index) {
 $this = $this|0;
 $shape = $shape|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0, $chain = 0, $circle = 0, $edge = 0, $polygon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shape;
 $2 = $index;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK7b2Shape7GetTypeEv($4)|0);
 if ((($5|0) == 0)) {
  $6 = $1;
  $circle = $6;
  $7 = $circle;
  $8 = (($7) + 12|0);
  $9 = (($3) + 16|0);
  HEAP32[$9>>2] = $8;
  $10 = (($3) + 20|0);
  HEAP32[$10>>2] = 1;
  $11 = $circle;
  $12 = (($11) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = (($3) + 24|0);
  HEAPF32[$14>>2] = $13;
  STACKTOP = sp;return;
 } else if ((($5|0) == 2)) {
  $15 = $1;
  $polygon = $15;
  $16 = $polygon;
  $17 = (($16) + 20|0);
  $18 = (($3) + 16|0);
  HEAP32[$18>>2] = $17;
  $19 = $polygon;
  $20 = (($19) + 148|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($3) + 20|0);
  HEAP32[$22>>2] = $21;
  $23 = $polygon;
  $24 = (($23) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = (($3) + 24|0);
  HEAPF32[$26>>2] = $25;
  STACKTOP = sp;return;
 } else if ((($5|0) == 3)) {
  $27 = $1;
  $chain = $27;
  $28 = $2;
  $29 = (0)<=($28|0);
  if (!($29)) {
   ___assert_fail((344|0),(384|0),53,(464|0));
   // unreachable;
  }
  $30 = $2;
  $31 = $chain;
  $32 = (($31) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   ___assert_fail((344|0),(384|0),53,(464|0));
   // unreachable;
  }
  $35 = $2;
  $36 = $chain;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35<<3)|0);
  ;HEAP32[$3+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$39+4>>2]|0;
  $40 = $2;
  $41 = (($40) + 1)|0;
  $42 = $chain;
  $43 = (($42) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if ($45) {
   $46 = (($3) + 8|0);
   $47 = $2;
   $48 = (($47) + 1)|0;
   $49 = $chain;
   $50 = (($49) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<3)|0);
   ;HEAP32[$46+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$52+4>>2]|0;
  } else {
   $53 = (($3) + 8|0);
   $54 = $chain;
   $55 = (($54) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   ;HEAP32[$53+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$56+4>>2]|0;
  }
  $57 = (($3) + 16|0);
  HEAP32[$57>>2] = $3;
  $58 = (($3) + 20|0);
  HEAP32[$58>>2] = 2;
  $59 = $chain;
  $60 = (($59) + 8|0);
  $61 = +HEAPF32[$60>>2];
  $62 = (($3) + 24|0);
  HEAPF32[$62>>2] = $61;
  STACKTOP = sp;return;
 } else if ((($5|0) == 1)) {
  $63 = $1;
  $edge = $63;
  $64 = $edge;
  $65 = (($64) + 12|0);
  $66 = (($3) + 16|0);
  HEAP32[$66>>2] = $65;
  $67 = (($3) + 20|0);
  HEAP32[$67>>2] = 2;
  $68 = $edge;
  $69 = (($68) + 8|0);
  $70 = +HEAPF32[$69>>2];
  $71 = (($3) + 24|0);
  HEAPF32[$71>>2] = $70;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((472|0),(384|0),81,(464|0));
  // unreachable;
 }
}
function __ZN9b2Simplex6Solve2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $d12_1 = 0.0, $d12_2 = 0.0, $e12 = 0, $inv_d12 = 0.0, $w1 = 0, $w2 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w1 = sp + 16|0;
 $w2 = sp + 24|0;
 $e12 = sp + 32|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 ;HEAP32[$w1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$w1+4>>2]=HEAP32[$2+4>>2]|0;
 $3 = (($1) + 36|0);
 $4 = (($3) + 16|0);
 ;HEAP32[$w2+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$w2+4>>2]=HEAP32[$4+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e12,$w2,$w1);
 $5 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e12));
 $6 = -$5;
 $d12_2 = $6;
 $7 = $d12_2;
 $8 = $7 <= 0.0;
 if ($8) {
  $9 = (($1) + 24|0);
  HEAPF32[$9>>2] = 1.0;
  $10 = (($1) + 108|0);
  HEAP32[$10>>2] = 1;
  STACKTOP = sp;return;
 }
 $11 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e12));
 $d12_1 = $11;
 $12 = $d12_1;
 $13 = $12 <= 0.0;
 if ($13) {
  $14 = (($1) + 36|0);
  $15 = (($14) + 24|0);
  HEAPF32[$15>>2] = 1.0;
  $16 = (($1) + 108|0);
  HEAP32[$16>>2] = 1;
  $17 = (($1) + 36|0);
  dest=$1+0|0; src=$17+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  $18 = $d12_1;
  $19 = $d12_2;
  $20 = $18 + $19;
  $21 = 1.0 / $20;
  $inv_d12 = $21;
  $22 = $d12_1;
  $23 = $inv_d12;
  $24 = $22 * $23;
  $25 = (($1) + 24|0);
  HEAPF32[$25>>2] = $24;
  $26 = $d12_2;
  $27 = $inv_d12;
  $28 = $26 * $27;
  $29 = (($1) + 36|0);
  $30 = (($29) + 24|0);
  HEAPF32[$30>>2] = $28;
  $31 = (($1) + 108|0);
  HEAP32[$31>>2] = 2;
  STACKTOP = sp;return;
 }
}
function __ZN9b2Simplex6Solve3Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $d123_1 = 0.0;
 var $d123_2 = 0.0, $d123_3 = 0.0, $d12_1 = 0.0, $d12_2 = 0.0, $d13_1 = 0.0, $d13_2 = 0.0, $d23_1 = 0.0, $d23_2 = 0.0, $e12 = 0, $e13 = 0, $e23 = 0, $inv_d12 = 0.0, $inv_d123 = 0.0, $inv_d13 = 0.0, $inv_d23 = 0.0, $n123 = 0.0, $w1 = 0, $w1e12 = 0.0, $w1e13 = 0.0, $w2 = 0;
 var $w2e12 = 0.0, $w2e23 = 0.0, $w3 = 0, $w3e13 = 0.0, $w3e23 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $w1 = sp + 120|0;
 $w2 = sp + 40|0;
 $w3 = sp + 48|0;
 $e12 = sp + 104|0;
 $e13 = sp + 24|0;
 $e23 = sp + 56|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 ;HEAP32[$w1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$w1+4>>2]=HEAP32[$2+4>>2]|0;
 $3 = (($1) + 36|0);
 $4 = (($3) + 16|0);
 ;HEAP32[$w2+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$w2+4>>2]=HEAP32[$4+4>>2]|0;
 $5 = (($1) + 72|0);
 $6 = (($5) + 16|0);
 ;HEAP32[$w3+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$w3+4>>2]=HEAP32[$6+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e12,$w2,$w1);
 $7 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e12));
 $w1e12 = $7;
 $8 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e12));
 $w2e12 = $8;
 $9 = $w2e12;
 $d12_1 = $9;
 $10 = $w1e12;
 $11 = -$10;
 $d12_2 = $11;
 __ZmiRK6b2Vec2S1_($e13,$w3,$w1);
 $12 = (+__Z5b2DotRK6b2Vec2S1_($w1,$e13));
 $w1e13 = $12;
 $13 = (+__Z5b2DotRK6b2Vec2S1_($w3,$e13));
 $w3e13 = $13;
 $14 = $w3e13;
 $d13_1 = $14;
 $15 = $w1e13;
 $16 = -$15;
 $d13_2 = $16;
 __ZmiRK6b2Vec2S1_($e23,$w3,$w2);
 $17 = (+__Z5b2DotRK6b2Vec2S1_($w2,$e23));
 $w2e23 = $17;
 $18 = (+__Z5b2DotRK6b2Vec2S1_($w3,$e23));
 $w3e23 = $18;
 $19 = $w3e23;
 $d23_1 = $19;
 $20 = $w2e23;
 $21 = -$20;
 $d23_2 = $21;
 $22 = (+__Z7b2CrossRK6b2Vec2S1_($e12,$e13));
 $n123 = $22;
 $23 = $n123;
 $24 = (+__Z7b2CrossRK6b2Vec2S1_($w2,$w3));
 $25 = $23 * $24;
 $d123_1 = $25;
 $26 = $n123;
 $27 = (+__Z7b2CrossRK6b2Vec2S1_($w3,$w1));
 $28 = $26 * $27;
 $d123_2 = $28;
 $29 = $n123;
 $30 = (+__Z7b2CrossRK6b2Vec2S1_($w1,$w2));
 $31 = $29 * $30;
 $d123_3 = $31;
 $32 = $d12_2;
 $33 = $32 <= 0.0;
 if ($33) {
  $34 = $d13_2;
  $35 = $34 <= 0.0;
  if ($35) {
   $36 = (($1) + 24|0);
   HEAPF32[$36>>2] = 1.0;
   $37 = (($1) + 108|0);
   HEAP32[$37>>2] = 1;
   STACKTOP = sp;return;
  }
 }
 $38 = $d12_1;
 $39 = $38 > 0.0;
 if ($39) {
  $40 = $d12_2;
  $41 = $40 > 0.0;
  if ($41) {
   $42 = $d123_3;
   $43 = $42 <= 0.0;
   if ($43) {
    $44 = $d12_1;
    $45 = $d12_2;
    $46 = $44 + $45;
    $47 = 1.0 / $46;
    $inv_d12 = $47;
    $48 = $d12_1;
    $49 = $inv_d12;
    $50 = $48 * $49;
    $51 = (($1) + 24|0);
    HEAPF32[$51>>2] = $50;
    $52 = $d12_2;
    $53 = $inv_d12;
    $54 = $52 * $53;
    $55 = (($1) + 36|0);
    $56 = (($55) + 24|0);
    HEAPF32[$56>>2] = $54;
    $57 = (($1) + 108|0);
    HEAP32[$57>>2] = 2;
    STACKTOP = sp;return;
   }
  }
 }
 $58 = $d13_1;
 $59 = $58 > 0.0;
 if ($59) {
  $60 = $d13_2;
  $61 = $60 > 0.0;
  if ($61) {
   $62 = $d123_2;
   $63 = $62 <= 0.0;
   if ($63) {
    $64 = $d13_1;
    $65 = $d13_2;
    $66 = $64 + $65;
    $67 = 1.0 / $66;
    $inv_d13 = $67;
    $68 = $d13_1;
    $69 = $inv_d13;
    $70 = $68 * $69;
    $71 = (($1) + 24|0);
    HEAPF32[$71>>2] = $70;
    $72 = $d13_2;
    $73 = $inv_d13;
    $74 = $72 * $73;
    $75 = (($1) + 72|0);
    $76 = (($75) + 24|0);
    HEAPF32[$76>>2] = $74;
    $77 = (($1) + 108|0);
    HEAP32[$77>>2] = 2;
    $78 = (($1) + 36|0);
    $79 = (($1) + 72|0);
    dest=$78+0|0; src=$79+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    STACKTOP = sp;return;
   }
  }
 }
 $80 = $d12_1;
 $81 = $80 <= 0.0;
 if ($81) {
  $82 = $d23_2;
  $83 = $82 <= 0.0;
  if ($83) {
   $84 = (($1) + 36|0);
   $85 = (($84) + 24|0);
   HEAPF32[$85>>2] = 1.0;
   $86 = (($1) + 108|0);
   HEAP32[$86>>2] = 1;
   $87 = (($1) + 36|0);
   dest=$1+0|0; src=$87+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
 }
 $88 = $d13_1;
 $89 = $88 <= 0.0;
 if ($89) {
  $90 = $d23_1;
  $91 = $90 <= 0.0;
  if ($91) {
   $92 = (($1) + 72|0);
   $93 = (($92) + 24|0);
   HEAPF32[$93>>2] = 1.0;
   $94 = (($1) + 108|0);
   HEAP32[$94>>2] = 1;
   $95 = (($1) + 72|0);
   dest=$1+0|0; src=$95+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
 }
 $96 = $d23_1;
 $97 = $96 > 0.0;
 if ($97) {
  $98 = $d23_2;
  $99 = $98 > 0.0;
  if ($99) {
   $100 = $d123_1;
   $101 = $100 <= 0.0;
   if ($101) {
    $102 = $d23_1;
    $103 = $d23_2;
    $104 = $102 + $103;
    $105 = 1.0 / $104;
    $inv_d23 = $105;
    $106 = $d23_1;
    $107 = $inv_d23;
    $108 = $106 * $107;
    $109 = (($1) + 36|0);
    $110 = (($109) + 24|0);
    HEAPF32[$110>>2] = $108;
    $111 = $d23_2;
    $112 = $inv_d23;
    $113 = $111 * $112;
    $114 = (($1) + 72|0);
    $115 = (($114) + 24|0);
    HEAPF32[$115>>2] = $113;
    $116 = (($1) + 108|0);
    HEAP32[$116>>2] = 2;
    $117 = (($1) + 72|0);
    dest=$1+0|0; src=$117+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    STACKTOP = sp;return;
   }
  }
 }
 $118 = $d123_1;
 $119 = $d123_2;
 $120 = $118 + $119;
 $121 = $d123_3;
 $122 = $120 + $121;
 $123 = 1.0 / $122;
 $inv_d123 = $123;
 $124 = $d123_1;
 $125 = $inv_d123;
 $126 = $124 * $125;
 $127 = (($1) + 24|0);
 HEAPF32[$127>>2] = $126;
 $128 = $d123_2;
 $129 = $inv_d123;
 $130 = $128 * $129;
 $131 = (($1) + 36|0);
 $132 = (($131) + 24|0);
 HEAPF32[$132>>2] = $130;
 $133 = $d123_3;
 $134 = $inv_d123;
 $135 = $133 * $134;
 $136 = (($1) + 72|0);
 $137 = (($136) + 24|0);
 HEAPF32[$137>>2] = $135;
 $138 = (($1) + 108|0);
 HEAP32[$138>>2] = 3;
 STACKTOP = sp;return;
}
function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output,$cache,$input) {
 $output = $output|0;
 $cache = $cache|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $closestPoint = 0, $d = 0, $distanceSqr1 = 0.0, $distanceSqr2 = 0.0, $duplicate = 0, $i = 0, $i1 = 0, $iter = 0, $k_maxIters = 0, $normal = 0, $p = 0, $p2 = 0, $proxyA = 0, $proxyB = 0, $rA = 0.0, $rB = 0.0, $saveA = 0, $saveB = 0, $saveCount = 0;
 var $simplex = 0, $transformA = 0, $transformB = 0, $vertex = 0, $vertices = 0, $wBLocal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $transformA = sp + 32|0;
 $transformB = sp + 48|0;
 $simplex = sp + 64|0;
 $saveA = sp + 184|0;
 $saveB = sp + 196|0;
 $closestPoint = sp + 304|0;
 $p = sp + 368|0;
 $d = sp + 240|0;
 $3 = sp + 256|0;
 $4 = sp + 264|0;
 $5 = sp + 272|0;
 $wBLocal = sp + 280|0;
 $6 = sp + 288|0;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $normal = sp + 320|0;
 $9 = sp + 224|0;
 $10 = sp + 336|0;
 $p2 = sp + 352|0;
 $11 = sp + 16|0;
 $0 = $output;
 $1 = $cache;
 $2 = $input;
 $12 = HEAP32[320>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[320>>2] = $13;
 $14 = $2;
 $proxyA = $14;
 $15 = $2;
 $16 = (($15) + 28|0);
 $proxyB = $16;
 $17 = $2;
 $18 = (($17) + 56|0);
 ;HEAP32[$transformA+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$transformA+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$transformA+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$transformA+12>>2]=HEAP32[$18+12>>2]|0;
 $19 = $2;
 $20 = (($19) + 72|0);
 ;HEAP32[$transformB+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$transformB+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$transformB+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$transformB+12>>2]=HEAP32[$20+12>>2]|0;
 __ZN9b2SimplexC2Ev($simplex);
 $21 = $1;
 $22 = $proxyA;
 $23 = $proxyB;
 __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex,$21,$22,$transformA,$23,$transformB);
 $vertices = $simplex;
 $k_maxIters = 20;
 $saveCount = 0;
 __ZNK9b2Simplex15GetClosestPointEv($closestPoint,$simplex);
 $24 = (+__ZNK6b2Vec213LengthSquaredEv($closestPoint));
 $distanceSqr1 = $24;
 $25 = $distanceSqr1;
 $distanceSqr2 = $25;
 $iter = 0;
 while(1) {
  $26 = $iter;
  $27 = ($26|0)<(20);
  if (!($27)) {
   break;
  }
  $28 = (($simplex) + 108|0);
  $29 = HEAP32[$28>>2]|0;
  $saveCount = $29;
  $i = 0;
  while(1) {
   $30 = $i;
   $31 = $saveCount;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = $i;
   $34 = $vertices;
   $35 = (($34) + (($33*36)|0)|0);
   $36 = (($35) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $i;
   $39 = (($saveA) + ($38<<2)|0);
   HEAP32[$39>>2] = $37;
   $40 = $i;
   $41 = $vertices;
   $42 = (($41) + (($40*36)|0)|0);
   $43 = (($42) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $i;
   $46 = (($saveB) + ($45<<2)|0);
   HEAP32[$46>>2] = $44;
   $47 = $i;
   $48 = (($47) + 1)|0;
   $i = $48;
  }
  $49 = (($simplex) + 108|0);
  $50 = HEAP32[$49>>2]|0;
  if ((($50|0) == 1)) {
  } else if ((($50|0) == 2)) {
   __ZN9b2Simplex6Solve2Ev($simplex);
  } else if ((($50|0) == 3)) {
   __ZN9b2Simplex6Solve3Ev($simplex);
  } else {
   label = 11;
   break;
  }
  $51 = (($simplex) + 108|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(3);
  if ($53) {
   label = 13;
   break;
  }
  __ZNK9b2Simplex15GetClosestPointEv($p,$simplex);
  $54 = (+__ZNK6b2Vec213LengthSquaredEv($p));
  $distanceSqr2 = $54;
  $55 = $distanceSqr2;
  $56 = $distanceSqr1;
  $57 = $55 >= $56;
  if ($57) {
  }
  $58 = $distanceSqr2;
  $distanceSqr1 = $58;
  __ZNK9b2Simplex18GetSearchDirectionEv($d,$simplex);
  $59 = (+__ZNK6b2Vec213LengthSquaredEv($d));
  $60 = $59 < 1.4210854715202004E-14;
  if ($60) {
   label = 17;
   break;
  }
  $61 = $vertices;
  $62 = (($simplex) + 108|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + (($63*36)|0)|0);
  $vertex = $64;
  $65 = $proxyA;
  $66 = (($transformA) + 8|0);
  __ZNK6b2Vec2ngEv($4,$d);
  __Z6b2MulTRK5b2RotRK6b2Vec2($3,$66,$4);
  $67 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($65,$3)|0);
  $68 = $vertex;
  $69 = (($68) + 28|0);
  HEAP32[$69>>2] = $67;
  $70 = $vertex;
  $71 = $proxyA;
  $72 = $vertex;
  $73 = (($72) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (__ZNK15b2DistanceProxy9GetVertexEi($71,$74)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($5,$transformA,$75);
  ;HEAP32[$70+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$70+4>>2]=HEAP32[$5+4>>2]|0;
  __ZN6b2Vec2C2Ev($wBLocal);
  $76 = $proxyB;
  $77 = (($transformB) + 8|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($6,$77,$d);
  $78 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($76,$6)|0);
  $79 = $vertex;
  $80 = (($79) + 32|0);
  HEAP32[$80>>2] = $78;
  $81 = $vertex;
  $82 = (($81) + 8|0);
  $83 = $proxyB;
  $84 = $vertex;
  $85 = (($84) + 32|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (__ZNK15b2DistanceProxy9GetVertexEi($83,$86)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($7,$transformB,$87);
  ;HEAP32[$82+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$82+4>>2]=HEAP32[$7+4>>2]|0;
  $88 = $vertex;
  $89 = (($88) + 16|0);
  $90 = $vertex;
  $91 = (($90) + 8|0);
  $92 = $vertex;
  __ZmiRK6b2Vec2S1_($8,$91,$92);
  ;HEAP32[$89+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$8+4>>2]|0;
  $93 = $iter;
  $94 = (($93) + 1)|0;
  $iter = $94;
  $95 = HEAP32[328>>2]|0;
  $96 = (($95) + 1)|0;
  HEAP32[328>>2] = $96;
  $duplicate = 0;
  $i1 = 0;
  while(1) {
   $97 = $i1;
   $98 = $saveCount;
   $99 = ($97|0)<($98|0);
   if (!($99)) {
    break;
   }
   $100 = $vertex;
   $101 = (($100) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $i1;
   $104 = (($saveA) + ($103<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)==($105|0);
   if ($106) {
    $107 = $vertex;
    $108 = (($107) + 32|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $i1;
    $111 = (($saveB) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($109|0)==($112|0);
    if ($113) {
     label = 22;
     break;
    }
   }
   $114 = $i1;
   $115 = (($114) + 1)|0;
   $i1 = $115;
  }
  if ((label|0) == 22) {
   label = 0;
   $duplicate = 1;
  }
  $116 = $duplicate;
  $117 = $116&1;
  if ($117) {
   label = 26;
   break;
  }
  $118 = (($simplex) + 108|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 1)|0;
  HEAP32[$118>>2] = $120;
 }
 if ((label|0) == 11) {
  ___assert_fail((472|0),(384|0),498,(480|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
 }
 else if ((label|0) == 17) {
 }
 else if ((label|0) == 26) {
 }
 $121 = HEAP32[336>>2]|0;
 $122 = $iter;
 $123 = (__Z5b2MaxIiET_S0_S0_($121,$122)|0);
 HEAP32[336>>2] = $123;
 $124 = $0;
 $125 = $0;
 $126 = (($125) + 8|0);
 __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex,$124,$126);
 $127 = $0;
 $128 = $0;
 $129 = (($128) + 8|0);
 $130 = (+__Z10b2DistanceRK6b2Vec2S1_($127,$129));
 $131 = $0;
 $132 = (($131) + 16|0);
 HEAPF32[$132>>2] = $130;
 $133 = $iter;
 $134 = $0;
 $135 = (($134) + 20|0);
 HEAP32[$135>>2] = $133;
 $136 = $1;
 __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($simplex,$136);
 $137 = $2;
 $138 = (($137) + 88|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&1;
 if (!($140)) {
  STACKTOP = sp;return;
 }
 $141 = $proxyA;
 $142 = (($141) + 24|0);
 $143 = +HEAPF32[$142>>2];
 $rA = $143;
 $144 = $proxyB;
 $145 = (($144) + 24|0);
 $146 = +HEAPF32[$145>>2];
 $rB = $146;
 $147 = $0;
 $148 = (($147) + 16|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $rA;
 $151 = $rB;
 $152 = $150 + $151;
 $153 = $149 > $152;
 if ($153) {
  $154 = $0;
  $155 = (($154) + 16|0);
  $156 = +HEAPF32[$155>>2];
  $157 = $156 > 1.1920928955078125E-7;
  if ($157) {
   $158 = $rA;
   $159 = $rB;
   $160 = $158 + $159;
   $161 = $0;
   $162 = (($161) + 16|0);
   $163 = +HEAPF32[$162>>2];
   $164 = $163 - $160;
   HEAPF32[$162>>2] = $164;
   $165 = $0;
   $166 = (($165) + 8|0);
   $167 = $0;
   __ZmiRK6b2Vec2S1_($normal,$166,$167);
   (+__ZN6b2Vec29NormalizeEv($normal));
   $168 = $0;
   $169 = $rA;
   __ZmlfRK6b2Vec2($9,$169,$normal);
   __ZN6b2Vec2pLERKS_($168,$9);
   $170 = $0;
   $171 = (($170) + 8|0);
   $172 = $rB;
   __ZmlfRK6b2Vec2($10,$172,$normal);
   __ZN6b2Vec2mIERKS_($171,$10);
  } else {
   label = 32;
  }
 } else {
  label = 32;
 }
 if ((label|0) == 32) {
  $173 = $0;
  $174 = $0;
  $175 = (($174) + 8|0);
  __ZplRK6b2Vec2S1_($11,$173,$175);
  __ZmlfRK6b2Vec2($p2,0.5,$11);
  $176 = $0;
  ;HEAP32[$176+0>>2]=HEAP32[$p2+0>>2]|0;HEAP32[$176+4>>2]=HEAP32[$p2+4>>2]|0;
  $177 = $0;
  $178 = (($177) + 8|0);
  ;HEAP32[$178+0>>2]=HEAP32[$p2+0>>2]|0;HEAP32[$178+4>>2]=HEAP32[$p2+4>>2]|0;
  $179 = $0;
  $180 = (($179) + 16|0);
  HEAPF32[$180>>2] = 0.0;
 }
 STACKTOP = sp;return;
}
function __ZNK7b2Shape7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2SimplexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2SimplexVertexC2Ev($1);
 $2 = (($1) + 36|0);
 __ZN15b2SimplexVertexC2Ev($2);
 $3 = (($1) + 72|0);
 __ZN15b2SimplexVertexC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this,$cache,$proxyA,$transformA,$proxyB,$transformB) {
 $this = $this|0;
 $cache = $cache|0;
 $proxyA = $proxyA|0;
 $transformA = $transformA|0;
 $proxyB = $proxyB|0;
 $transformB = $transformB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $metric1 = 0.0, $metric2 = 0.0, $v = 0, $v1 = 0, $vertices = 0, $wALocal = 0, $wALocal2 = 0, $wBLocal = 0, $wBLocal3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wALocal = sp + 112|0;
 $wBLocal = sp + 128|0;
 $6 = sp + 136|0;
 $7 = sp + 48|0;
 $8 = sp + 56|0;
 $wALocal2 = sp + 24|0;
 $wBLocal3 = sp + 88|0;
 $9 = sp + 8|0;
 $10 = sp + 32|0;
 $11 = sp + 104|0;
 $0 = $this;
 $1 = $cache;
 $2 = $proxyA;
 $3 = $transformA;
 $4 = $proxyB;
 $5 = $transformB;
 $12 = $0;
 $13 = $1;
 $14 = (($13) + 4|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)<=(3);
 if (!($17)) {
  ___assert_fail((704|0),(384|0),102,(728|0));
  // unreachable;
 }
 $18 = $1;
 $19 = (($18) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($12) + 108|0);
 HEAP32[$22>>2] = $21;
 $vertices = $12;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = (($12) + 108|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $vertices;
  $28 = $i;
  $29 = (($27) + (($28*36)|0)|0);
  $v = $29;
  $30 = $i;
  $31 = $1;
  $32 = (($31) + 6|0);
  $33 = (($32) + ($30)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $v;
  $37 = (($36) + 28|0);
  HEAP32[$37>>2] = $35;
  $38 = $i;
  $39 = $1;
  $40 = (($39) + 9|0);
  $41 = (($40) + ($38)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $v;
  $45 = (($44) + 32|0);
  HEAP32[$45>>2] = $43;
  $46 = $2;
  $47 = $v;
  $48 = (($47) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (__ZNK15b2DistanceProxy9GetVertexEi($46,$49)|0);
  ;HEAP32[$wALocal+0>>2]=HEAP32[$50+0>>2]|0;HEAP32[$wALocal+4>>2]=HEAP32[$50+4>>2]|0;
  $51 = $4;
  $52 = $v;
  $53 = (($52) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$54)|0);
  ;HEAP32[$wBLocal+0>>2]=HEAP32[$55+0>>2]|0;HEAP32[$wBLocal+4>>2]=HEAP32[$55+4>>2]|0;
  $56 = $v;
  $57 = $3;
  __Z5b2MulRK11b2TransformRK6b2Vec2($6,$57,$wALocal);
  ;HEAP32[$56+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$56+4>>2]=HEAP32[$6+4>>2]|0;
  $58 = $v;
  $59 = (($58) + 8|0);
  $60 = $5;
  __Z5b2MulRK11b2TransformRK6b2Vec2($7,$60,$wBLocal);
  ;HEAP32[$59+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$7+4>>2]|0;
  $61 = $v;
  $62 = (($61) + 16|0);
  $63 = $v;
  $64 = (($63) + 8|0);
  $65 = $v;
  __ZmiRK6b2Vec2S1_($8,$64,$65);
  ;HEAP32[$62+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$8+4>>2]|0;
  $66 = $v;
  $67 = (($66) + 24|0);
  HEAPF32[$67>>2] = 0.0;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = (($12) + 108|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)>(1);
 if ($72) {
  $73 = $1;
  $74 = +HEAPF32[$73>>2];
  $metric1 = $74;
  $75 = (+__ZNK9b2Simplex9GetMetricEv($12));
  $metric2 = $75;
  $76 = $metric2;
  $77 = $metric1;
  $78 = 0.5 * $77;
  $79 = $76 < $78;
  if ($79) {
   label = 11;
  } else {
   $80 = $metric1;
   $81 = 2.0 * $80;
   $82 = $metric2;
   $83 = $81 < $82;
   if ($83) {
    label = 11;
   } else {
    $84 = $metric2;
    $85 = $84 < 1.1920928955078125E-7;
    if ($85) {
     label = 11;
    }
   }
  }
  if ((label|0) == 11) {
   $86 = (($12) + 108|0);
   HEAP32[$86>>2] = 0;
  }
 }
 $87 = (($12) + 108|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $vertices;
 $v1 = $90;
 $91 = $v1;
 $92 = (($91) + 28|0);
 HEAP32[$92>>2] = 0;
 $93 = $v1;
 $94 = (($93) + 32|0);
 HEAP32[$94>>2] = 0;
 $95 = $2;
 $96 = (__ZNK15b2DistanceProxy9GetVertexEi($95,0)|0);
 ;HEAP32[$wALocal2+0>>2]=HEAP32[$96+0>>2]|0;HEAP32[$wALocal2+4>>2]=HEAP32[$96+4>>2]|0;
 $97 = $4;
 $98 = (__ZNK15b2DistanceProxy9GetVertexEi($97,0)|0);
 ;HEAP32[$wBLocal3+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$wBLocal3+4>>2]=HEAP32[$98+4>>2]|0;
 $99 = $v1;
 $100 = $3;
 __Z5b2MulRK11b2TransformRK6b2Vec2($9,$100,$wALocal2);
 ;HEAP32[$99+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$9+4>>2]|0;
 $101 = $v1;
 $102 = (($101) + 8|0);
 $103 = $5;
 __Z5b2MulRK11b2TransformRK6b2Vec2($10,$103,$wBLocal3);
 ;HEAP32[$102+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$10+4>>2]|0;
 $104 = $v1;
 $105 = (($104) + 16|0);
 $106 = $v1;
 $107 = (($106) + 8|0);
 $108 = $v1;
 __ZmiRK6b2Vec2S1_($11,$107,$108);
 ;HEAP32[$105+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$105+4>>2]=HEAP32[$11+4>>2]|0;
 $109 = (($12) + 108|0);
 HEAP32[$109>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK9b2Simplex15GetClosestPointEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 0)) {
  ___assert_fail((472|0),(384|0),194,(688|0));
  // unreachable;
 } else if ((($5|0) == 1)) {
  $6 = (($3) + 16|0);
  ;HEAP32[$agg$result+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
 } else if ((($5|0) == 2)) {
  $7 = (($3) + 24|0);
  $8 = +HEAPF32[$7>>2];
  $9 = (($3) + 16|0);
  __ZmlfRK6b2Vec2($1,$8,$9);
  $10 = (($3) + 36|0);
  $11 = (($10) + 24|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (($3) + 36|0);
  $14 = (($13) + 16|0);
  __ZmlfRK6b2Vec2($2,$12,$14);
  __ZplRK6b2Vec2S1_($agg$result,$1,$2);
  STACKTOP = sp;return;
 } else if ((($5|0) == 3)) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[3192+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[3192+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((472|0),(384|0),207,(688|0));
  // unreachable;
 }
}
function __ZNK6b2Vec213LengthSquaredEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZNK9b2Simplex18GetSearchDirectionEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e12 = 0, $sgn = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e12 = sp + 16|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = (($2) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 1)) {
  $5 = (($2) + 16|0);
  __ZNK6b2Vec2ngEv($agg$result,$5);
  STACKTOP = sp;return;
 } else if ((($4|0) == 2)) {
  $6 = (($2) + 36|0);
  $7 = (($6) + 16|0);
  $8 = (($2) + 16|0);
  __ZmiRK6b2Vec2S1_($e12,$7,$8);
  $9 = (($2) + 16|0);
  __ZNK6b2Vec2ngEv($1,$9);
  $10 = (+__Z7b2CrossRK6b2Vec2S1_($e12,$1));
  $sgn = $10;
  $11 = $sgn;
  $12 = $11 > 0.0;
  if ($12) {
   __Z7b2CrossfRK6b2Vec2($agg$result,1.0,$e12);
   STACKTOP = sp;return;
  } else {
   __Z7b2CrossRK6b2Vec2f($agg$result,$e12,1.0);
   STACKTOP = sp;return;
  }
 } else {
  ___assert_fail((472|0),(384|0),184,(664|0));
  // unreachable;
 }
}
function __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($this,$d) {
 $this = $this|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $bestIndex = 0, $bestValue = 0.0, $i = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $bestIndex = 0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (+__Z5b2DotRK6b2Vec2S1_($4,$5));
 $bestValue = $6;
 $i = 1;
 while(1) {
  $7 = $i;
  $8 = (($2) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = (($2) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<3)|0);
  $15 = $1;
  $16 = (+__Z5b2DotRK6b2Vec2S1_($14,$15));
  $value = $16;
  $17 = $value;
  $18 = $bestValue;
  $19 = $17 > $18;
  if ($19) {
   $20 = $i;
   $bestIndex = $20;
   $21 = $value;
   $bestValue = $21;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $bestIndex;
 STACKTOP = sp;return ($24|0);
}
function __ZNK15b2DistanceProxy9GetVertexEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if ($4) {
  $5 = $1;
  $6 = (($2) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = (($2) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9<<3)|0);
   STACKTOP = sp;return ($12|0);
  }
 }
 ___assert_fail((536|0),(568|0),103,(648|0));
 // unreachable;
 return 0|0;
}
function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this,$pA,$pB) {
 $this = $this|0;
 $pA = $pA|0;
 $pB = $pB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 64|0;
 $4 = sp + 56|0;
 $5 = sp + 72|0;
 $6 = sp + 88|0;
 $7 = sp + 96|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp + 48|0;
 $11 = sp + 24|0;
 $12 = sp;
 $13 = sp + 32|0;
 $0 = $this;
 $1 = $pA;
 $2 = $pB;
 $14 = $0;
 $15 = (($14) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 if ((($16|0) == 0)) {
  ___assert_fail((472|0),(384|0),217,(512|0));
  // unreachable;
 } else if ((($16|0) == 3)) {
  $36 = $1;
  $37 = (($14) + 24|0);
  $38 = +HEAPF32[$37>>2];
  __ZmlfRK6b2Vec2($11,$38,$14);
  $39 = (($14) + 36|0);
  $40 = (($39) + 24|0);
  $41 = +HEAPF32[$40>>2];
  $42 = (($14) + 36|0);
  __ZmlfRK6b2Vec2($12,$41,$42);
  __ZplRK6b2Vec2S1_($10,$11,$12);
  $43 = (($14) + 72|0);
  $44 = (($43) + 24|0);
  $45 = +HEAPF32[$44>>2];
  $46 = (($14) + 72|0);
  __ZmlfRK6b2Vec2($13,$45,$46);
  __ZplRK6b2Vec2S1_($9,$10,$13);
  ;HEAP32[$36+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$36+4>>2]=HEAP32[$9+4>>2]|0;
  $47 = $2;
  $48 = $1;
  ;HEAP32[$47+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;
  STACKTOP = sp;return;
 } else if ((($16|0) == 2)) {
  $20 = $1;
  $21 = (($14) + 24|0);
  $22 = +HEAPF32[$21>>2];
  __ZmlfRK6b2Vec2($4,$22,$14);
  $23 = (($14) + 36|0);
  $24 = (($23) + 24|0);
  $25 = +HEAPF32[$24>>2];
  $26 = (($14) + 36|0);
  __ZmlfRK6b2Vec2($5,$25,$26);
  __ZplRK6b2Vec2S1_($3,$4,$5);
  ;HEAP32[$20+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$20+4>>2]=HEAP32[$3+4>>2]|0;
  $27 = $2;
  $28 = (($14) + 24|0);
  $29 = +HEAPF32[$28>>2];
  $30 = (($14) + 8|0);
  __ZmlfRK6b2Vec2($7,$29,$30);
  $31 = (($14) + 36|0);
  $32 = (($31) + 24|0);
  $33 = +HEAPF32[$32>>2];
  $34 = (($14) + 36|0);
  $35 = (($34) + 8|0);
  __ZmlfRK6b2Vec2($8,$33,$35);
  __ZplRK6b2Vec2S1_($6,$7,$8);
  ;HEAP32[$27+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
 } else if ((($16|0) == 1)) {
  $17 = $1;
  ;HEAP32[$17+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$17+4>>2]=HEAP32[$14+4>>2]|0;
  $18 = $2;
  $19 = (($14) + 8|0);
  ;HEAP32[$18+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((472|0),(384|0),236,(512|0));
  // unreachable;
 }
}
function __Z10b2DistanceRK6b2Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c,$2,$3);
 $4 = (+__ZNK6b2Vec26LengthEv($c));
 STACKTOP = sp;return (+$4);
}
function __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($this,$cache) {
 $this = $this|0;
 $cache = $cache|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cache;
 $2 = $0;
 $3 = (+__ZNK9b2Simplex9GetMetricEv($2));
 $4 = $1;
 HEAPF32[$4>>2] = $3;
 $5 = (($2) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 $8 = $1;
 $9 = (($8) + 4|0);
 HEAP16[$9>>1] = $7;
 $vertices = $2;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = (($2) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $vertices;
  $16 = (($15) + (($14*36)|0)|0);
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18&255;
  $20 = $i;
  $21 = $1;
  $22 = (($21) + 6|0);
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = $i;
  $25 = $vertices;
  $26 = (($25) + (($24*36)|0)|0);
  $27 = (($26) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&255;
  $30 = $i;
  $31 = $1;
  $32 = (($31) + 9|0);
  $33 = (($32) + ($30)|0);
  HEAP8[$33>>0] = $29;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 STACKTOP = sp;return;
}
function __ZN6b2Vec2pLERKS_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN6b2Vec2mIERKS_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 - $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($2) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN15b2SimplexVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = (($1) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK9b2Simplex9GetMetricEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp;
 $1 = $this;
 $4 = $1;
 $5 = (($4) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 if ((($6|0) == 0)) {
  ___assert_fail((472|0),(384|0),246,(496|0));
  // unreachable;
 } else if ((($6|0) == 2)) {
  $7 = (($4) + 16|0);
  $8 = (($4) + 36|0);
  $9 = (($8) + 16|0);
  $10 = (+__Z10b2DistanceRK6b2Vec2S1_($7,$9));
  $0 = $10;
  $18 = $0;
  STACKTOP = sp;return (+$18);
 } else if ((($6|0) == 1)) {
  $0 = 0.0;
  $18 = $0;
  STACKTOP = sp;return (+$18);
 } else if ((($6|0) == 3)) {
  $11 = (($4) + 36|0);
  $12 = (($11) + 16|0);
  $13 = (($4) + 16|0);
  __ZmiRK6b2Vec2S1_($2,$12,$13);
  $14 = (($4) + 72|0);
  $15 = (($14) + 16|0);
  $16 = (($4) + 16|0);
  __ZmiRK6b2Vec2S1_($3,$15,$16);
  $17 = (+__Z7b2CrossRK6b2Vec2S1_($2,$3));
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return (+$18);
 } else {
  ___assert_fail((472|0),(384|0),259,(496|0));
  // unreachable;
 }
 return +0;
}
function __Z7b2CrossfRK6b2Vec2($agg$result,$s,$a) {
 $agg$result = $agg$result|0;
 $s = +$s;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = -$2;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result,$7,$11);
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTreeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = 16;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5*36)|0;
 $7 = (__Z7b2Alloci($6)|0);
 $8 = (($1) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = (($1) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($1) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12*36)|0;
 _memset(($10|0),0,($13|0))|0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = (($1) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 1)|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $21 = $i;
  $22 = (($1) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($21*36)|0)|0);
  $25 = (($24) + 20|0);
  HEAP32[$25>>2] = $20;
  $26 = $i;
  $27 = (($1) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($26*36)|0)|0);
  $30 = (($29) + 32|0);
  HEAP32[$30>>2] = -1;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = (($1) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - 1)|0;
 $36 = (($1) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + (($35*36)|0)|0);
 $39 = (($38) + 20|0);
 HEAP32[$39>>2] = -1;
 $40 = (($1) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) - 1)|0;
 $43 = (($1) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + (($42*36)|0)|0);
 $46 = (($45) + 32|0);
 HEAP32[$46>>2] = -1;
 $47 = (($1) + 16|0);
 HEAP32[$47>>2] = 0;
 $48 = (($1) + 20|0);
 HEAP32[$48>>2] = 0;
 $49 = (($1) + 24|0);
 HEAP32[$49>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTreeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __Z6b2FreePv($3);
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTree12AllocateNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $nodeId = 0, $oldNodes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 if ($4) {
  $5 = (($1) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($1) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if (!($9)) {
   ___assert_fail((744|0),(776|0),61,(864|0));
   // unreachable;
  }
  $10 = (($1) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $oldNodes = $11;
  $12 = (($1) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<1;
  HEAP32[$12>>2] = $14;
  $15 = (($1) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16*36)|0;
  $18 = (__Z7b2Alloci($17)|0);
  $19 = (($1) + 4|0);
  HEAP32[$19>>2] = $18;
  $20 = (($1) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $oldNodes;
  $23 = (($1) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24*36)|0;
  _memcpy(($21|0),($22|0),($25|0))|0;
  $26 = $oldNodes;
  __Z6b2FreePv($26);
  $27 = (($1) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $i = $28;
  while(1) {
   $29 = $i;
   $30 = (($1) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) - 1)|0;
   $33 = ($29|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = (($34) + 1)|0;
   $36 = $i;
   $37 = (($1) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + (($36*36)|0)|0);
   $40 = (($39) + 20|0);
   HEAP32[$40>>2] = $35;
   $41 = $i;
   $42 = (($1) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + (($41*36)|0)|0);
   $45 = (($44) + 32|0);
   HEAP32[$45>>2] = -1;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  $48 = (($1) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) - 1)|0;
  $51 = (($1) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($50*36)|0)|0);
  $54 = (($53) + 20|0);
  HEAP32[$54>>2] = -1;
  $55 = (($1) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = (($1) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($57*36)|0)|0);
  $61 = (($60) + 32|0);
  HEAP32[$61>>2] = -1;
  $62 = (($1) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($1) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = (($1) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $nodeId = $66;
 $67 = $nodeId;
 $68 = (($1) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + (($67*36)|0)|0);
 $71 = (($70) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($1) + 16|0);
 HEAP32[$73>>2] = $72;
 $74 = $nodeId;
 $75 = (($1) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + (($74*36)|0)|0);
 $78 = (($77) + 20|0);
 HEAP32[$78>>2] = -1;
 $79 = $nodeId;
 $80 = (($1) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + (($79*36)|0)|0);
 $83 = (($82) + 24|0);
 HEAP32[$83>>2] = -1;
 $84 = $nodeId;
 $85 = (($1) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + (($84*36)|0)|0);
 $88 = (($87) + 28|0);
 HEAP32[$88>>2] = -1;
 $89 = $nodeId;
 $90 = (($1) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + (($89*36)|0)|0);
 $93 = (($92) + 32|0);
 HEAP32[$93>>2] = 0;
 $94 = $nodeId;
 $95 = (($1) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + (($94*36)|0)|0);
 $98 = (($97) + 16|0);
 HEAP32[$98>>2] = 0;
 $99 = (($1) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[$99>>2] = $101;
 $102 = $nodeId;
 STACKTOP = sp;return ($102|0);
}
function __ZN13b2DynamicTree8FreeNodeEi($this,$nodeId) {
 $this = $this|0;
 $nodeId = $nodeId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nodeId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if (!($4)) {
  ___assert_fail((880|0),(776|0),97,(920|0));
  // unreachable;
 }
 $5 = $1;
 $6 = (($2) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  ___assert_fail((880|0),(776|0),97,(920|0));
  // unreachable;
 }
 $9 = (($2) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0)<($10|0);
 if ($11) {
  $12 = (($2) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (($2) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($14*36)|0)|0);
  $18 = (($17) + 20|0);
  HEAP32[$18>>2] = $13;
  $19 = $1;
  $20 = (($2) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($19*36)|0)|0);
  $23 = (($22) + 32|0);
  HEAP32[$23>>2] = -1;
  $24 = $1;
  $25 = (($2) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = (($2) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((936|0),(776|0),98,(920|0));
  // unreachable;
 }
}
function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this,$aabb,$userData) {
 $this = $this|0;
 $aabb = $aabb|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 8|0;
 $3 = sp;
 $4 = sp + 24|0;
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $5 = $0;
 $6 = (__ZN13b2DynamicTree12AllocateNodeEv($5)|0);
 $proxyId = $6;
 __ZN6b2Vec2C2Eff($r,0.10000000149011612,0.10000000149011612);
 $7 = $proxyId;
 $8 = (($5) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($7*36)|0)|0);
 $11 = $1;
 __ZmiRK6b2Vec2S1_($3,$11,$r);
 ;HEAP32[$10+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$3+4>>2]|0;
 $12 = $proxyId;
 $13 = (($5) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($12*36)|0)|0);
 $16 = (($15) + 8|0);
 $17 = $1;
 $18 = (($17) + 8|0);
 __ZplRK6b2Vec2S1_($4,$18,$r);
 ;HEAP32[$16+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$4+4>>2]|0;
 $19 = $2;
 $20 = $proxyId;
 $21 = (($5) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + (($20*36)|0)|0);
 $24 = (($23) + 16|0);
 HEAP32[$24>>2] = $19;
 $25 = $proxyId;
 $26 = (($5) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + (($25*36)|0)|0);
 $29 = (($28) + 32|0);
 HEAP32[$29>>2] = 0;
 $30 = $proxyId;
 __ZN13b2DynamicTree10InsertLeafEi($5,$30);
 $31 = $proxyId;
 STACKTOP = sp;return ($31|0);
}
function __ZN13b2DynamicTree10InsertLeafEi($this,$leaf) {
 $this = $this|0;
 $leaf = $leaf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aabb = 0, $aabb1 = 0, $aabb2 = 0, $aabb3 = 0, $area = 0.0, $child1 = 0, $child16 = 0, $child2 = 0;
 var $child27 = 0, $combinedAABB = 0, $combinedArea = 0.0, $cost = 0.0, $cost1 = 0.0, $cost2 = 0.0, $index = 0, $inheritanceCost = 0.0, $leafAABB = 0, $newArea = 0.0, $newArea5 = 0.0, $newParent = 0, $oldArea = 0.0, $oldArea4 = 0.0, $oldParent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $leafAABB = sp + 128|0;
 $combinedAABB = sp + 72|0;
 $aabb = sp + 152|0;
 $aabb1 = sp + 168|0;
 $aabb2 = sp + 48|0;
 $aabb3 = sp + 88|0;
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $1;
  HEAP32[$2>>2] = $8;
  $9 = HEAP32[$2>>2]|0;
  $10 = (($2) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($9*36)|0)|0);
  $13 = (($12) + 20|0);
  HEAP32[$13>>2] = -1;
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = (($2) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*36)|0)|0);
 ;HEAP32[$leafAABB+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$leafAABB+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$leafAABB+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$leafAABB+12>>2]=HEAP32[$17+12>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 $index = $18;
 while(1) {
  $19 = $index;
  $20 = (($2) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($19*36)|0)|0);
  $23 = (__ZNK10b2TreeNode6IsLeafEv($22)|0);
  $24 = $23&1;
  $25 = ($24|0)==(0);
  if (!($25)) {
   break;
  }
  $26 = $index;
  $27 = (($2) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($26*36)|0)|0);
  $30 = (($29) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $child1 = $31;
  $32 = $index;
  $33 = (($2) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + (($32*36)|0)|0);
  $36 = (($35) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $child2 = $37;
  $38 = $index;
  $39 = (($2) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + (($38*36)|0)|0);
  $42 = (+__ZNK6b2AABB12GetPerimeterEv($41));
  $area = $42;
  __ZN6b2AABBC2Ev($combinedAABB);
  $43 = $index;
  $44 = (($2) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($43*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($combinedAABB,$46,$leafAABB);
  $47 = (+__ZNK6b2AABB12GetPerimeterEv($combinedAABB));
  $combinedArea = $47;
  $48 = $combinedArea;
  $49 = 2.0 * $48;
  $cost = $49;
  $50 = $combinedArea;
  $51 = $area;
  $52 = $50 - $51;
  $53 = 2.0 * $52;
  $inheritanceCost = $53;
  $54 = $child1;
  $55 = (($2) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + (($54*36)|0)|0);
  $58 = (__ZNK10b2TreeNode6IsLeafEv($57)|0);
  if ($58) {
   __ZN6b2AABBC2Ev($aabb);
   $59 = $child1;
   $60 = (($2) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + (($59*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb,$leafAABB,$62);
   $63 = (+__ZNK6b2AABB12GetPerimeterEv($aabb));
   $64 = $inheritanceCost;
   $65 = $63 + $64;
   $cost1 = $65;
  } else {
   __ZN6b2AABBC2Ev($aabb1);
   $66 = $child1;
   $67 = (($2) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + (($66*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb1,$leafAABB,$69);
   $70 = $child1;
   $71 = (($2) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + (($70*36)|0)|0);
   $74 = (+__ZNK6b2AABB12GetPerimeterEv($73));
   $oldArea = $74;
   $75 = (+__ZNK6b2AABB12GetPerimeterEv($aabb1));
   $newArea = $75;
   $76 = $newArea;
   $77 = $oldArea;
   $78 = $76 - $77;
   $79 = $inheritanceCost;
   $80 = $78 + $79;
   $cost1 = $80;
  }
  $81 = $child2;
  $82 = (($2) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + (($81*36)|0)|0);
  $85 = (__ZNK10b2TreeNode6IsLeafEv($84)|0);
  if ($85) {
   __ZN6b2AABBC2Ev($aabb2);
   $86 = $child2;
   $87 = (($2) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + (($86*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb2,$leafAABB,$89);
   $90 = (+__ZNK6b2AABB12GetPerimeterEv($aabb2));
   $91 = $inheritanceCost;
   $92 = $90 + $91;
   $cost2 = $92;
  } else {
   __ZN6b2AABBC2Ev($aabb3);
   $93 = $child2;
   $94 = (($2) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + (($93*36)|0)|0);
   __ZN6b2AABB7CombineERKS_S1_($aabb3,$leafAABB,$96);
   $97 = $child2;
   $98 = (($2) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + (($97*36)|0)|0);
   $101 = (+__ZNK6b2AABB12GetPerimeterEv($100));
   $oldArea4 = $101;
   $102 = (+__ZNK6b2AABB12GetPerimeterEv($aabb3));
   $newArea5 = $102;
   $103 = $newArea5;
   $104 = $oldArea4;
   $105 = $103 - $104;
   $106 = $inheritanceCost;
   $107 = $105 + $106;
   $cost2 = $107;
  }
  $108 = $cost;
  $109 = $cost1;
  $110 = $108 < $109;
  if ($110) {
   $111 = $cost;
   $112 = $cost2;
   $113 = $111 < $112;
   if ($113) {
    label = 13;
    break;
   }
  }
  $114 = $cost1;
  $115 = $cost2;
  $116 = $114 < $115;
  if ($116) {
   $117 = $child1;
   $index = $117;
  } else {
   $118 = $child2;
   $index = $118;
  }
 }
 if ((label|0) == 13) {
 }
 $119 = $index;
 $sibling = $119;
 $120 = $sibling;
 $121 = (($2) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + (($120*36)|0)|0);
 $124 = (($123) + 20|0);
 $125 = HEAP32[$124>>2]|0;
 $oldParent = $125;
 $126 = (__ZN13b2DynamicTree12AllocateNodeEv($2)|0);
 $newParent = $126;
 $127 = $oldParent;
 $128 = $newParent;
 $129 = (($2) + 4|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($130) + (($128*36)|0)|0);
 $132 = (($131) + 20|0);
 HEAP32[$132>>2] = $127;
 $133 = $newParent;
 $134 = (($2) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($135) + (($133*36)|0)|0);
 $137 = (($136) + 16|0);
 HEAP32[$137>>2] = 0;
 $138 = $newParent;
 $139 = (($2) + 4|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (($140) + (($138*36)|0)|0);
 $142 = $sibling;
 $143 = (($2) + 4|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($144) + (($142*36)|0)|0);
 __ZN6b2AABB7CombineERKS_S1_($141,$leafAABB,$145);
 $146 = $sibling;
 $147 = (($2) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + (($146*36)|0)|0);
 $150 = (($149) + 32|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + 1)|0;
 $153 = $newParent;
 $154 = (($2) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($155) + (($153*36)|0)|0);
 $157 = (($156) + 32|0);
 HEAP32[$157>>2] = $152;
 $158 = $oldParent;
 $159 = ($158|0)!=(-1);
 if ($159) {
  $160 = $oldParent;
  $161 = (($2) + 4|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + (($160*36)|0)|0);
  $164 = (($163) + 24|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $sibling;
  $167 = ($165|0)==($166|0);
  if ($167) {
   $168 = $newParent;
   $169 = $oldParent;
   $170 = (($2) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + (($169*36)|0)|0);
   $173 = (($172) + 24|0);
   HEAP32[$173>>2] = $168;
  } else {
   $174 = $newParent;
   $175 = $oldParent;
   $176 = (($2) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + (($175*36)|0)|0);
   $179 = (($178) + 28|0);
   HEAP32[$179>>2] = $174;
  }
  $180 = $sibling;
  $181 = $newParent;
  $182 = (($2) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + (($181*36)|0)|0);
  $185 = (($184) + 24|0);
  HEAP32[$185>>2] = $180;
  $186 = $1;
  $187 = $newParent;
  $188 = (($2) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($187*36)|0)|0);
  $191 = (($190) + 28|0);
  HEAP32[$191>>2] = $186;
  $192 = $newParent;
  $193 = $sibling;
  $194 = (($2) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($193*36)|0)|0);
  $197 = (($196) + 20|0);
  HEAP32[$197>>2] = $192;
  $198 = $newParent;
  $199 = $1;
  $200 = (($2) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + (($199*36)|0)|0);
  $203 = (($202) + 20|0);
  HEAP32[$203>>2] = $198;
 } else {
  $204 = $sibling;
  $205 = $newParent;
  $206 = (($2) + 4|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + (($205*36)|0)|0);
  $209 = (($208) + 24|0);
  HEAP32[$209>>2] = $204;
  $210 = $1;
  $211 = $newParent;
  $212 = (($2) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($211*36)|0)|0);
  $215 = (($214) + 28|0);
  HEAP32[$215>>2] = $210;
  $216 = $newParent;
  $217 = $sibling;
  $218 = (($2) + 4|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + (($217*36)|0)|0);
  $221 = (($220) + 20|0);
  HEAP32[$221>>2] = $216;
  $222 = $newParent;
  $223 = $1;
  $224 = (($2) + 4|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + (($223*36)|0)|0);
  $227 = (($226) + 20|0);
  HEAP32[$227>>2] = $222;
  $228 = $newParent;
  HEAP32[$2>>2] = $228;
 }
 $229 = $1;
 $230 = (($2) + 4|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (($231) + (($229*36)|0)|0);
 $233 = (($232) + 20|0);
 $234 = HEAP32[$233>>2]|0;
 $index = $234;
 while(1) {
  $235 = $index;
  $236 = ($235|0)!=(-1);
  if (!($236)) {
   label = 31;
   break;
  }
  $237 = $index;
  $238 = (__ZN13b2DynamicTree7BalanceEi($2,$237)|0);
  $index = $238;
  $239 = $index;
  $240 = (($2) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($241) + (($239*36)|0)|0);
  $243 = (($242) + 24|0);
  $244 = HEAP32[$243>>2]|0;
  $child16 = $244;
  $245 = $index;
  $246 = (($2) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + (($245*36)|0)|0);
  $249 = (($248) + 28|0);
  $250 = HEAP32[$249>>2]|0;
  $child27 = $250;
  $251 = $child16;
  $252 = ($251|0)!=(-1);
  if (!($252)) {
   label = 27;
   break;
  }
  $253 = $child27;
  $254 = ($253|0)!=(-1);
  if (!($254)) {
   label = 29;
   break;
  }
  $255 = $child16;
  $256 = (($2) + 4|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + (($255*36)|0)|0);
  $259 = (($258) + 32|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $child27;
  $262 = (($2) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + (($261*36)|0)|0);
  $265 = (($264) + 32|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (__Z5b2MaxIiET_S0_S0_($260,$266)|0);
  $268 = (1 + ($267))|0;
  $269 = $index;
  $270 = (($2) + 4|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($271) + (($269*36)|0)|0);
  $273 = (($272) + 32|0);
  HEAP32[$273>>2] = $268;
  $274 = $index;
  $275 = (($2) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = (($276) + (($274*36)|0)|0);
  $278 = $child16;
  $279 = (($2) + 4|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = (($280) + (($278*36)|0)|0);
  $282 = $child27;
  $283 = (($2) + 4|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) + (($282*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($277,$281,$285);
  $286 = $index;
  $287 = (($2) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($288) + (($286*36)|0)|0);
  $290 = (($289) + 20|0);
  $291 = HEAP32[$290>>2]|0;
  $index = $291;
 }
 if ((label|0) == 27) {
  ___assert_fail((1048|0),(776|0),307,(1064|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  ___assert_fail((1080|0),(776|0),308,(1064|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
}
function __ZN13b2DynamicTree10RemoveLeafEi($this,$leaf) {
 $this = $this|0;
 $leaf = $leaf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $child1 = 0, $child2 = 0, $grandParent = 0, $index = 0, $parent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  HEAP32[$2>>2] = -1;
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (($2) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*36)|0)|0);
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $parent = $11;
 $12 = $parent;
 $13 = (($2) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($12*36)|0)|0);
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $grandParent = $17;
 $18 = $parent;
 $19 = (($2) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($18*36)|0)|0);
 $22 = (($21) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ($23|0)==($24|0);
 if ($25) {
  $26 = $parent;
  $27 = (($2) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($26*36)|0)|0);
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $sibling = $31;
 } else {
  $32 = $parent;
  $33 = (($2) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + (($32*36)|0)|0);
  $36 = (($35) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $sibling = $37;
 }
 $38 = $grandParent;
 $39 = ($38|0)!=(-1);
 if (!($39)) {
  $121 = $sibling;
  HEAP32[$2>>2] = $121;
  $122 = $sibling;
  $123 = (($2) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($122*36)|0)|0);
  $126 = (($125) + 20|0);
  HEAP32[$126>>2] = -1;
  $127 = $parent;
  __ZN13b2DynamicTree8FreeNodeEi($2,$127);
  STACKTOP = sp;return;
 }
 $40 = $grandParent;
 $41 = (($2) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + (($40*36)|0)|0);
 $44 = (($43) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $parent;
 $47 = ($45|0)==($46|0);
 if ($47) {
  $48 = $sibling;
  $49 = $grandParent;
  $50 = (($2) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($49*36)|0)|0);
  $53 = (($52) + 24|0);
  HEAP32[$53>>2] = $48;
 } else {
  $54 = $sibling;
  $55 = $grandParent;
  $56 = (($2) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + (($55*36)|0)|0);
  $59 = (($58) + 28|0);
  HEAP32[$59>>2] = $54;
 }
 $60 = $grandParent;
 $61 = $sibling;
 $62 = (($2) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + (($61*36)|0)|0);
 $65 = (($64) + 20|0);
 HEAP32[$65>>2] = $60;
 $66 = $parent;
 __ZN13b2DynamicTree8FreeNodeEi($2,$66);
 $67 = $grandParent;
 $index = $67;
 while(1) {
  $68 = $index;
  $69 = ($68|0)!=(-1);
  if (!($69)) {
   break;
  }
  $70 = $index;
  $71 = (__ZN13b2DynamicTree7BalanceEi($2,$70)|0);
  $index = $71;
  $72 = $index;
  $73 = (($2) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + (($72*36)|0)|0);
  $76 = (($75) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $child1 = $77;
  $78 = $index;
  $79 = (($2) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($78*36)|0)|0);
  $82 = (($81) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  $child2 = $83;
  $84 = $index;
  $85 = (($2) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + (($84*36)|0)|0);
  $88 = $child1;
  $89 = (($2) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + (($88*36)|0)|0);
  $92 = $child2;
  $93 = (($2) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + (($92*36)|0)|0);
  __ZN6b2AABB7CombineERKS_S1_($87,$91,$95);
  $96 = $child1;
  $97 = (($2) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($96*36)|0)|0);
  $100 = (($99) + 32|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $child2;
  $103 = (($2) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + (($102*36)|0)|0);
  $106 = (($105) + 32|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (__Z5b2MaxIiET_S0_S0_($101,$107)|0);
  $109 = (1 + ($108))|0;
  $110 = $index;
  $111 = (($2) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + (($110*36)|0)|0);
  $114 = (($113) + 32|0);
  HEAP32[$114>>2] = $109;
  $115 = $index;
  $116 = (($2) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + (($115*36)|0)|0);
  $119 = (($118) + 20|0);
  $120 = HEAP32[$119>>2]|0;
  $index = $120;
 }
 STACKTOP = sp;return;
}
function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this,$proxyId,$aabb,$displacement) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 $aabb = $aabb|0;
 $displacement = $displacement|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $d = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 56|0;
 $r = sp + 24|0;
 $5 = sp + 40|0;
 $6 = sp + 8|0;
 $d = sp;
 $1 = $this;
 $2 = $proxyId;
 $3 = $aabb;
 $4 = $displacement;
 $7 = $1;
 $8 = $2;
 $9 = (0)<=($8|0);
 if (!($9)) {
  ___assert_fail((952|0),(776|0),135,(1032|0));
  // unreachable;
 }
 $10 = $2;
 $11 = (($7) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)<($12|0);
 if (!($13)) {
  ___assert_fail((952|0),(776|0),135,(1032|0));
  // unreachable;
 }
 $14 = $2;
 $15 = (($7) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*36)|0)|0);
 $18 = (__ZNK10b2TreeNode6IsLeafEv($17)|0);
 if (!($18)) {
  ___assert_fail((1000|0),(776|0),137,(1032|0));
  // unreachable;
 }
 $19 = $2;
 $20 = (($7) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + (($19*36)|0)|0);
 $23 = $3;
 $24 = (__ZNK6b2AABB8ContainsERKS_($22,$23)|0);
 if ($24) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $58 = $$pre_trunc&1;
  STACKTOP = sp;return ($58|0);
 }
 $25 = $2;
 __ZN13b2DynamicTree10RemoveLeafEi($7,$25);
 $26 = $3;
 ;HEAP32[$b+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$b+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$b+12>>2]=HEAP32[$26+12>>2]|0;
 __ZN6b2Vec2C2Eff($r,0.10000000149011612,0.10000000149011612);
 __ZmiRK6b2Vec2S1_($5,$b,$r);
 ;HEAP32[$b+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$b+4>>2]=HEAP32[$5+4>>2]|0;
 $27 = (($b) + 8|0);
 $28 = (($b) + 8|0);
 __ZplRK6b2Vec2S1_($6,$28,$r);
 ;HEAP32[$27+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
 $29 = $4;
 __ZmlfRK6b2Vec2($d,2.0,$29);
 $30 = +HEAPF32[$d>>2];
 $31 = $30 < 0.0;
 if ($31) {
  $32 = +HEAPF32[$d>>2];
  $33 = +HEAPF32[$b>>2];
  $34 = $33 + $32;
  HEAPF32[$b>>2] = $34;
 } else {
  $35 = +HEAPF32[$d>>2];
  $36 = (($b) + 8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 + $35;
  HEAPF32[$36>>2] = $38;
 }
 $39 = (($d) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40 < 0.0;
 if ($41) {
  $42 = (($d) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = (($b) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 + $43;
  HEAPF32[$44>>2] = $46;
 } else {
  $47 = (($d) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = (($b) + 8|0);
  $50 = (($49) + 4|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $51 + $48;
  HEAPF32[$50>>2] = $52;
 }
 $53 = $2;
 $54 = (($7) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + (($53*36)|0)|0);
 ;HEAP32[$56+0>>2]=HEAP32[$b+0>>2]|0;HEAP32[$56+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$56+12>>2]=HEAP32[$b+12>>2]|0;
 $57 = $2;
 __ZN13b2DynamicTree10InsertLeafEi($7,$57);
 $$expand_i1_val2 = 1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $58 = $$pre_trunc&1;
 STACKTOP = sp;return ($58|0);
}
function __ZN13b2DynamicTree7BalanceEi($this,$iA) {
 $this = $this|0;
 $iA = $iA|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, $F = 0, $G = 0, $balance = 0, $iB = 0, $iC = 0, $iD = 0, $iE = 0;
 var $iF = 0, $iG = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $iA;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(-1);
 if (!($5)) {
  ___assert_fail((1096|0),(776|0),382,(1112|0));
  // unreachable;
 }
 $6 = (($3) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (($7) + (($8*36)|0)|0);
 $A = $9;
 $10 = $A;
 $11 = (__ZNK10b2TreeNode6IsLeafEv($10)|0);
 if (!($11)) {
  $12 = $A;
  $13 = (($12) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(2);
  if (!($15)) {
   $17 = $A;
   $18 = (($17) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $iB = $19;
   $20 = $A;
   $21 = (($20) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $iC = $22;
   $23 = $iB;
   $24 = (0)<=($23|0);
   if (!($24)) {
    ___assert_fail((1120|0),(776|0),392,(1112|0));
    // unreachable;
   }
   $25 = $iB;
   $26 = (($3) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)<($27|0);
   if (!($28)) {
    ___assert_fail((1120|0),(776|0),392,(1112|0));
    // unreachable;
   }
   $29 = $iC;
   $30 = (0)<=($29|0);
   if (!($30)) {
    ___assert_fail((1152|0),(776|0),393,(1112|0));
    // unreachable;
   }
   $31 = $iC;
   $32 = (($3) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)<($33|0);
   if (!($34)) {
    ___assert_fail((1152|0),(776|0),393,(1112|0));
    // unreachable;
   }
   $35 = (($3) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $iB;
   $38 = (($36) + (($37*36)|0)|0);
   $B = $38;
   $39 = (($3) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $iC;
   $42 = (($40) + (($41*36)|0)|0);
   $C = $42;
   $43 = $C;
   $44 = (($43) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $B;
   $47 = (($46) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) - ($48))|0;
   $balance = $49;
   $50 = $balance;
   $51 = ($50|0)>(1);
   if ($51) {
    $52 = $C;
    $53 = (($52) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $iF = $54;
    $55 = $C;
    $56 = (($55) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    $iG = $57;
    $58 = (($3) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $iF;
    $61 = (($59) + (($60*36)|0)|0);
    $F = $61;
    $62 = (($3) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $iG;
    $65 = (($63) + (($64*36)|0)|0);
    $G = $65;
    $66 = $iF;
    $67 = (0)<=($66|0);
    if (!($67)) {
     ___assert_fail((1184|0),(776|0),407,(1112|0));
     // unreachable;
    }
    $68 = $iF;
    $69 = (($3) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($68|0)<($70|0);
    if (!($71)) {
     ___assert_fail((1184|0),(776|0),407,(1112|0));
     // unreachable;
    }
    $72 = $iG;
    $73 = (0)<=($72|0);
    if (!($73)) {
     ___assert_fail((1216|0),(776|0),408,(1112|0));
     // unreachable;
    }
    $74 = $iG;
    $75 = (($3) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($74|0)<($76|0);
    if (!($77)) {
     ___assert_fail((1216|0),(776|0),408,(1112|0));
     // unreachable;
    }
    $78 = $2;
    $79 = $C;
    $80 = (($79) + 24|0);
    HEAP32[$80>>2] = $78;
    $81 = $A;
    $82 = (($81) + 20|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $C;
    $85 = (($84) + 20|0);
    HEAP32[$85>>2] = $83;
    $86 = $iC;
    $87 = $A;
    $88 = (($87) + 20|0);
    HEAP32[$88>>2] = $86;
    $89 = $C;
    $90 = (($89) + 20|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)!=(-1);
    if ($92) {
     $93 = $C;
     $94 = (($93) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($3) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + (($95*36)|0)|0);
     $99 = (($98) + 24|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $2;
     $102 = ($100|0)==($101|0);
     do {
      if ($102) {
       $103 = $iC;
       $104 = $C;
       $105 = (($104) + 20|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($3) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + (($106*36)|0)|0);
       $110 = (($109) + 24|0);
       HEAP32[$110>>2] = $103;
      } else {
       $111 = $C;
       $112 = (($111) + 20|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($3) + 4|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($115) + (($113*36)|0)|0);
       $117 = (($116) + 28|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $2;
       $120 = ($118|0)==($119|0);
       if ($120) {
        $121 = $iC;
        $122 = $C;
        $123 = (($122) + 20|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = (($3) + 4|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($126) + (($124*36)|0)|0);
        $128 = (($127) + 28|0);
        HEAP32[$128>>2] = $121;
        break;
       } else {
        ___assert_fail((1248|0),(776|0),424,(1112|0));
        // unreachable;
       }
      }
     } while(0);
    } else {
     $129 = $iC;
     HEAP32[$3>>2] = $129;
    }
    $130 = $F;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $G;
    $134 = (($133) + 32|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($132|0)>($135|0);
    if ($136) {
     $137 = $iF;
     $138 = $C;
     $139 = (($138) + 28|0);
     HEAP32[$139>>2] = $137;
     $140 = $iG;
     $141 = $A;
     $142 = (($141) + 28|0);
     HEAP32[$142>>2] = $140;
     $143 = $2;
     $144 = $G;
     $145 = (($144) + 20|0);
     HEAP32[$145>>2] = $143;
     $146 = $A;
     $147 = $B;
     $148 = $G;
     __ZN6b2AABB7CombineERKS_S1_($146,$147,$148);
     $149 = $C;
     $150 = $A;
     $151 = $F;
     __ZN6b2AABB7CombineERKS_S1_($149,$150,$151);
     $152 = $B;
     $153 = (($152) + 32|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $G;
     $156 = (($155) + 32|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (__Z5b2MaxIiET_S0_S0_($154,$157)|0);
     $159 = (1 + ($158))|0;
     $160 = $A;
     $161 = (($160) + 32|0);
     HEAP32[$161>>2] = $159;
     $162 = $A;
     $163 = (($162) + 32|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $F;
     $166 = (($165) + 32|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (__Z5b2MaxIiET_S0_S0_($164,$167)|0);
     $169 = (1 + ($168))|0;
     $170 = $C;
     $171 = (($170) + 32|0);
     HEAP32[$171>>2] = $169;
    } else {
     $172 = $iG;
     $173 = $C;
     $174 = (($173) + 28|0);
     HEAP32[$174>>2] = $172;
     $175 = $iF;
     $176 = $A;
     $177 = (($176) + 28|0);
     HEAP32[$177>>2] = $175;
     $178 = $2;
     $179 = $F;
     $180 = (($179) + 20|0);
     HEAP32[$180>>2] = $178;
     $181 = $A;
     $182 = $B;
     $183 = $F;
     __ZN6b2AABB7CombineERKS_S1_($181,$182,$183);
     $184 = $C;
     $185 = $A;
     $186 = $G;
     __ZN6b2AABB7CombineERKS_S1_($184,$185,$186);
     $187 = $B;
     $188 = (($187) + 32|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $F;
     $191 = (($190) + 32|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (__Z5b2MaxIiET_S0_S0_($189,$192)|0);
     $194 = (1 + ($193))|0;
     $195 = $A;
     $196 = (($195) + 32|0);
     HEAP32[$196>>2] = $194;
     $197 = $A;
     $198 = (($197) + 32|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $G;
     $201 = (($200) + 32|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = (__Z5b2MaxIiET_S0_S0_($199,$202)|0);
     $204 = (1 + ($203))|0;
     $205 = $C;
     $206 = (($205) + 32|0);
     HEAP32[$206>>2] = $204;
    }
    $207 = $iC;
    $0 = $207;
    $367 = $0;
    STACKTOP = sp;return ($367|0);
   }
   $208 = $balance;
   $209 = ($208|0)<(-1);
   if (!($209)) {
    $366 = $2;
    $0 = $366;
    $367 = $0;
    STACKTOP = sp;return ($367|0);
   }
   $210 = $B;
   $211 = (($210) + 24|0);
   $212 = HEAP32[$211>>2]|0;
   $iD = $212;
   $213 = $B;
   $214 = (($213) + 28|0);
   $215 = HEAP32[$214>>2]|0;
   $iE = $215;
   $216 = (($3) + 4|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $iD;
   $219 = (($217) + (($218*36)|0)|0);
   $D = $219;
   $220 = (($3) + 4|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $iE;
   $223 = (($221) + (($222*36)|0)|0);
   $E = $223;
   $224 = $iD;
   $225 = (0)<=($224|0);
   if (!($225)) {
    ___assert_fail((1280|0),(776|0),467,(1112|0));
    // unreachable;
   }
   $226 = $iD;
   $227 = (($3) + 12|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ($226|0)<($228|0);
   if (!($229)) {
    ___assert_fail((1280|0),(776|0),467,(1112|0));
    // unreachable;
   }
   $230 = $iE;
   $231 = (0)<=($230|0);
   if (!($231)) {
    ___assert_fail((1312|0),(776|0),468,(1112|0));
    // unreachable;
   }
   $232 = $iE;
   $233 = (($3) + 12|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($232|0)<($234|0);
   if (!($235)) {
    ___assert_fail((1312|0),(776|0),468,(1112|0));
    // unreachable;
   }
   $236 = $2;
   $237 = $B;
   $238 = (($237) + 24|0);
   HEAP32[$238>>2] = $236;
   $239 = $A;
   $240 = (($239) + 20|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $B;
   $243 = (($242) + 20|0);
   HEAP32[$243>>2] = $241;
   $244 = $iB;
   $245 = $A;
   $246 = (($245) + 20|0);
   HEAP32[$246>>2] = $244;
   $247 = $B;
   $248 = (($247) + 20|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ($249|0)!=(-1);
   if ($250) {
    $251 = $B;
    $252 = (($251) + 20|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($3) + 4|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (($255) + (($253*36)|0)|0);
    $257 = (($256) + 24|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = $2;
    $260 = ($258|0)==($259|0);
    do {
     if ($260) {
      $261 = $iB;
      $262 = $B;
      $263 = (($262) + 20|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = (($3) + 4|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = (($266) + (($264*36)|0)|0);
      $268 = (($267) + 24|0);
      HEAP32[$268>>2] = $261;
     } else {
      $269 = $B;
      $270 = (($269) + 20|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($3) + 4|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = (($273) + (($271*36)|0)|0);
      $275 = (($274) + 28|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = $2;
      $278 = ($276|0)==($277|0);
      if ($278) {
       $279 = $iB;
       $280 = $B;
       $281 = (($280) + 20|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = (($3) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = (($284) + (($282*36)|0)|0);
       $286 = (($285) + 28|0);
       HEAP32[$286>>2] = $279;
       break;
      } else {
       ___assert_fail((1344|0),(776|0),484,(1112|0));
       // unreachable;
      }
     }
    } while(0);
   } else {
    $287 = $iB;
    HEAP32[$3>>2] = $287;
   }
   $288 = $D;
   $289 = (($288) + 32|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $E;
   $292 = (($291) + 32|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ($290|0)>($293|0);
   if ($294) {
    $295 = $iD;
    $296 = $B;
    $297 = (($296) + 28|0);
    HEAP32[$297>>2] = $295;
    $298 = $iE;
    $299 = $A;
    $300 = (($299) + 24|0);
    HEAP32[$300>>2] = $298;
    $301 = $2;
    $302 = $E;
    $303 = (($302) + 20|0);
    HEAP32[$303>>2] = $301;
    $304 = $A;
    $305 = $C;
    $306 = $E;
    __ZN6b2AABB7CombineERKS_S1_($304,$305,$306);
    $307 = $B;
    $308 = $A;
    $309 = $D;
    __ZN6b2AABB7CombineERKS_S1_($307,$308,$309);
    $310 = $C;
    $311 = (($310) + 32|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $E;
    $314 = (($313) + 32|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (__Z5b2MaxIiET_S0_S0_($312,$315)|0);
    $317 = (1 + ($316))|0;
    $318 = $A;
    $319 = (($318) + 32|0);
    HEAP32[$319>>2] = $317;
    $320 = $A;
    $321 = (($320) + 32|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $D;
    $324 = (($323) + 32|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (__Z5b2MaxIiET_S0_S0_($322,$325)|0);
    $327 = (1 + ($326))|0;
    $328 = $B;
    $329 = (($328) + 32|0);
    HEAP32[$329>>2] = $327;
   } else {
    $330 = $iE;
    $331 = $B;
    $332 = (($331) + 28|0);
    HEAP32[$332>>2] = $330;
    $333 = $iD;
    $334 = $A;
    $335 = (($334) + 24|0);
    HEAP32[$335>>2] = $333;
    $336 = $2;
    $337 = $D;
    $338 = (($337) + 20|0);
    HEAP32[$338>>2] = $336;
    $339 = $A;
    $340 = $C;
    $341 = $D;
    __ZN6b2AABB7CombineERKS_S1_($339,$340,$341);
    $342 = $B;
    $343 = $A;
    $344 = $E;
    __ZN6b2AABB7CombineERKS_S1_($342,$343,$344);
    $345 = $C;
    $346 = (($345) + 32|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $D;
    $349 = (($348) + 32|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = (__Z5b2MaxIiET_S0_S0_($347,$350)|0);
    $352 = (1 + ($351))|0;
    $353 = $A;
    $354 = (($353) + 32|0);
    HEAP32[$354>>2] = $352;
    $355 = $A;
    $356 = (($355) + 32|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $E;
    $359 = (($358) + 32|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (__Z5b2MaxIiET_S0_S0_($357,$360)|0);
    $362 = (1 + ($361))|0;
    $363 = $B;
    $364 = (($363) + 32|0);
    HEAP32[$364>>2] = $362;
   }
   $365 = $iB;
   $0 = $365;
   $367 = $0;
   STACKTOP = sp;return ($367|0);
  }
 }
 $16 = $2;
 $0 = $16;
 $367 = $0;
 STACKTOP = sp;return ($367|0);
}
function __ZNK10b2TreeNode6IsLeafEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 STACKTOP = sp;return ($4|0);
}
function __ZNK6b2AABB12GetPerimeterEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $wx = 0.0, $wy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[$1>>2];
 $5 = $3 - $4;
 $wx = $5;
 $6 = (($1) + 8|0);
 $7 = (($6) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($1) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 - $10;
 $wy = $11;
 $12 = $wx;
 $13 = $wy;
 $14 = $12 + $13;
 $15 = 2.0 * $14;
 STACKTOP = sp;return (+$15);
}
function __ZN6b2AABBC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6b2AABB7CombineERKS_S1_($this,$aabb1,$aabb2) {
 $this = $this|0;
 $aabb1 = $aabb1|0;
 $aabb2 = $aabb2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb1;
 $2 = $aabb2;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __Z5b2MinRK6b2Vec2S1_($3,$6,$7);
 ;HEAP32[$5+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = (($5) + 8|0);
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = $2;
 $12 = (($11) + 8|0);
 __Z5b2MaxRK6b2Vec2S1_($4,$10,$12);
 ;HEAP32[$8+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK6b2AABB8ContainsERKS_($this,$aabb) {
 $this = $this|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $0;
 $result = 1;
 $3 = $result;
 $4 = $3&1;
 if ($4) {
  $5 = +HEAPF32[$2>>2];
  $6 = $1;
  $7 = +HEAPF32[$6>>2];
  $8 = $5 <= $7;
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 $result = $9;
 $11 = $result;
 $12 = $11&1;
 if ($12) {
  $13 = (($2) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $1;
  $16 = (($15) + 4|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $14 <= $17;
  $20 = $18;
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 $result = $19;
 $21 = $result;
 $22 = $21&1;
 if ($22) {
  $23 = $1;
  $24 = (($23) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = (($2) + 8|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $25 <= $27;
  $30 = $28;
 } else {
  $30 = 0;
 }
 $29 = $30&1;
 $result = $29;
 $31 = $result;
 $32 = $31&1;
 if (!($32)) {
  $42 = 0;
  $41 = $42&1;
  $result = $41;
  $43 = $result;
  $44 = $43&1;
  STACKTOP = sp;return ($44|0);
 }
 $33 = $1;
 $34 = (($33) + 8|0);
 $35 = (($34) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = (($2) + 8|0);
 $38 = (($37) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $36 <= $39;
 $42 = $40;
 $41 = $42&1;
 $result = $41;
 $43 = $result;
 $44 = $43&1;
 STACKTOP = sp;return ($44|0);
}
function __Z5b2MinRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = (+__Z5b2MinIfET_S0_S0_($3,$5));
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (+__Z5b2MinIfET_S0_S0_($9,$12));
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2MaxRK6b2Vec2S1_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = (+__Z5b2MaxIfET_S0_S0_($3,$5));
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (+__Z5b2MaxIfET_S0_S0_($9,$12));
 __ZN6b2Vec2C2Eff($agg$result,$6,$13);
 STACKTOP = sp;return;
}
function __Z5b2MaxIfET_S0_S0_($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 if ($4) {
  $5 = $0;
  $7 = $5;
 } else {
  $6 = $1;
  $7 = $6;
 }
 STACKTOP = sp;return (+$7);
}
function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output,$input) {
 $output = $output|0;
 $input = $input|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $a1 = 0.0, $a2 = 0.0, $cache = 0, $distanceInput = 0, $distanceOutput = 0, $done = 0, $fcn = 0, $indexA = 0, $indexB = 0, $iter = 0;
 var $k_maxIterations = 0, $proxyA = 0, $proxyB = 0, $pushBackIter = 0, $rootIterCount = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, $sweepA = 0, $sweepB = 0, $t = 0.0, $t1 = 0.0, $t2 = 0.0, $tMax = 0.0, $target = 0.0, $tolerance = 0.0, $totalRadius = 0.0, $xfA = 0, $xfB = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sweepA = sp + 80|0;
 $sweepB = sp + 16|0;
 $cache = sp + 300|0;
 $distanceInput = sp + 316|0;
 $xfA = sp + 408|0;
 $xfB = sp + 128|0;
 $distanceOutput = sp + 144|0;
 $fcn = sp + 168|0;
 $indexA = sp + 12|0;
 $indexB = sp + 8|0;
 $0 = $output;
 $1 = $input;
 $2 = HEAP32[1376>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[1376>>2] = $3;
 $4 = $0;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = (($5) + 128|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = (($8) + 4|0);
 HEAPF32[$9>>2] = $7;
 $10 = $1;
 $proxyA = $10;
 $11 = $1;
 $12 = (($11) + 28|0);
 $proxyB = $12;
 $13 = $1;
 $14 = (($13) + 56|0);
 dest=$sweepA+0|0; src=$14+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $15 = $1;
 $16 = (($15) + 92|0);
 dest=$sweepB+0|0; src=$16+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN7b2Sweep9NormalizeEv($sweepA);
 __ZN7b2Sweep9NormalizeEv($sweepB);
 $17 = $1;
 $18 = (($17) + 128|0);
 $19 = +HEAPF32[$18>>2];
 $tMax = $19;
 $20 = $proxyA;
 $21 = (($20) + 24|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $proxyB;
 $24 = (($23) + 24|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 + $25;
 $totalRadius = $26;
 $27 = $totalRadius;
 $28 = $27 - 0.014999999664723873;
 $29 = (+__Z5b2MaxIfET_S0_S0_(0.004999999888241291,$28));
 $target = $29;
 $tolerance = 0.0012499999720603228;
 $30 = $target;
 $31 = $tolerance;
 $32 = $30 > $31;
 if (!($32)) {
  ___assert_fail((1416|0),(1440|0),280,(1528|0));
  // unreachable;
 }
 $t1 = 0.0;
 $k_maxIterations = 20;
 $iter = 0;
 $33 = (($cache) + 4|0);
 HEAP16[$33>>1] = 0;
 __ZN15b2DistanceInputC2Ev($distanceInput);
 $34 = $1;
 ;HEAP32[$distanceInput+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$distanceInput+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$distanceInput+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$distanceInput+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$distanceInput+16>>2]=HEAP32[$34+16>>2]|0;HEAP32[$distanceInput+20>>2]=HEAP32[$34+20>>2]|0;HEAP32[$distanceInput+24>>2]=HEAP32[$34+24>>2]|0;
 $35 = (($distanceInput) + 28|0);
 $36 = $1;
 $37 = (($36) + 28|0);
 ;HEAP32[$35+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$35+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$37+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$37+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$37+20>>2]|0;HEAP32[$35+24>>2]=HEAP32[$37+24>>2]|0;
 $38 = (($distanceInput) + 88|0);
 HEAP8[$38>>0] = 0;
 while(1) {
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $39 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepA,$xfA,$39);
  $40 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepB,$xfB,$40);
  $41 = (($distanceInput) + 56|0);
  ;HEAP32[$41+0>>2]=HEAP32[$xfA+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$xfA+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$xfA+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$xfA+12>>2]|0;
  $42 = (($distanceInput) + 72|0);
  ;HEAP32[$42+0>>2]=HEAP32[$xfB+0>>2]|0;HEAP32[$42+4>>2]=HEAP32[$xfB+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$xfB+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$xfB+12>>2]|0;
  __ZN16b2DistanceOutputC2Ev($distanceOutput);
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput,$cache,$distanceInput);
  $43 = (($distanceOutput) + 16|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 <= 0.0;
  if ($45) {
   label = 5;
   break;
  }
  $49 = (($distanceOutput) + 16|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $target;
  $52 = $tolerance;
  $53 = $51 + $52;
  $54 = $50 < $53;
  if ($54) {
   label = 7;
   break;
  }
  __ZN20b2SeparationFunctionC2Ev($fcn);
  $59 = $proxyA;
  $60 = $proxyB;
  $61 = $t1;
  (+__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn,$cache,$59,$sweepA,$60,$sweepB,$61));
  $done = 0;
  $62 = $tMax;
  $t2 = $62;
  $pushBackIter = 0;
  while(1) {
   $63 = $t2;
   $64 = (+__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn,$indexA,$indexB,$63));
   $s2 = $64;
   $65 = $s2;
   $66 = $target;
   $67 = $tolerance;
   $68 = $66 + $67;
   $69 = $65 > $68;
   if ($69) {
    label = 10;
    break;
   }
   $74 = $s2;
   $75 = $target;
   $76 = $tolerance;
   $77 = $75 - $76;
   $78 = $74 > $77;
   if ($78) {
    label = 12;
    break;
   }
   $80 = HEAP32[$indexA>>2]|0;
   $81 = HEAP32[$indexB>>2]|0;
   $82 = $t1;
   $83 = (+__ZNK20b2SeparationFunction8EvaluateEiif($fcn,$80,$81,$82));
   $s1 = $83;
   $84 = $s1;
   $85 = $target;
   $86 = $tolerance;
   $87 = $85 - $86;
   $88 = $84 < $87;
   if ($88) {
    label = 14;
    break;
   }
   $93 = $s1;
   $94 = $target;
   $95 = $tolerance;
   $96 = $94 + $95;
   $97 = $93 <= $96;
   if ($97) {
    label = 16;
    break;
   }
   $rootIterCount = 0;
   $102 = $t1;
   $a1 = $102;
   $103 = $t2;
   $a2 = $103;
   while(1) {
    $104 = $rootIterCount;
    $105 = $104 & 1;
    $106 = ($105|0)!=(0);
    if ($106) {
     $107 = $a1;
     $108 = $target;
     $109 = $s1;
     $110 = $108 - $109;
     $111 = $a2;
     $112 = $a1;
     $113 = $111 - $112;
     $114 = $110 * $113;
     $115 = $s2;
     $116 = $s1;
     $117 = $115 - $116;
     $118 = $114 / $117;
     $119 = $107 + $118;
     $t = $119;
    } else {
     $120 = $a1;
     $121 = $a2;
     $122 = $120 + $121;
     $123 = 0.5 * $122;
     $t = $123;
    }
    $124 = HEAP32[$indexA>>2]|0;
    $125 = HEAP32[$indexB>>2]|0;
    $126 = $t;
    $127 = (+__ZNK20b2SeparationFunction8EvaluateEiif($fcn,$124,$125,$126));
    $s = $127;
    $128 = $s;
    $129 = $target;
    $130 = $128 - $129;
    $131 = (+__Z5b2AbsIfET_S0_($130));
    $132 = $tolerance;
    $133 = $131 < $132;
    if ($133) {
     label = 22;
     break;
    }
    $135 = $s;
    $136 = $target;
    $137 = $135 > $136;
    if ($137) {
     $138 = $t;
     $a1 = $138;
     $139 = $s;
     $s1 = $139;
    } else {
     $140 = $t;
     $a2 = $140;
     $141 = $s;
     $s2 = $141;
    }
    $142 = $rootIterCount;
    $143 = (($142) + 1)|0;
    $rootIterCount = $143;
    $144 = HEAP32[1400>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[1400>>2] = $145;
    $146 = $rootIterCount;
    $147 = ($146|0)==(50);
    if ($147) {
     label = 27;
     break;
    }
   }
   if ((label|0) == 22) {
    label = 0;
    $134 = $t;
    $t2 = $134;
   }
   else if ((label|0) == 27) {
    label = 0;
   }
   $148 = HEAP32[1408>>2]|0;
   $149 = $rootIterCount;
   $150 = (__Z5b2MaxIiET_S0_S0_($148,$149)|0);
   HEAP32[1408>>2] = $150;
   $151 = $pushBackIter;
   $152 = (($151) + 1)|0;
   $pushBackIter = $152;
   $153 = $pushBackIter;
   $154 = ($153|0)==(8);
   if ($154) {
    label = 30;
    break;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $70 = $0;
   HEAP32[$70>>2] = 4;
   $71 = $tMax;
   $72 = $0;
   $73 = (($72) + 4|0);
   HEAPF32[$73>>2] = $71;
   $done = 1;
  }
  else if ((label|0) == 12) {
   label = 0;
   $79 = $t2;
   $t1 = $79;
  }
  else if ((label|0) == 14) {
   label = 0;
   $89 = $0;
   HEAP32[$89>>2] = 1;
   $90 = $t1;
   $91 = $0;
   $92 = (($91) + 4|0);
   HEAPF32[$92>>2] = $90;
   $done = 1;
  }
  else if ((label|0) == 16) {
   label = 0;
   $98 = $0;
   HEAP32[$98>>2] = 3;
   $99 = $t1;
   $100 = $0;
   $101 = (($100) + 4|0);
   HEAPF32[$101>>2] = $99;
   $done = 1;
  }
  else if ((label|0) == 30) {
   label = 0;
  }
  $155 = $iter;
  $156 = (($155) + 1)|0;
  $iter = $156;
  $157 = HEAP32[1384>>2]|0;
  $158 = (($157) + 1)|0;
  HEAP32[1384>>2] = $158;
  $159 = $done;
  $160 = $159&1;
  if ($160) {
   label = 33;
   break;
  }
  $161 = $iter;
  $162 = ($161|0)==(20);
  if ($162) {
   label = 35;
   break;
  }
 }
 if ((label|0) == 5) {
  $46 = $0;
  HEAP32[$46>>2] = 2;
  $47 = $0;
  $48 = (($47) + 4|0);
  HEAPF32[$48>>2] = 0.0;
  $167 = HEAP32[1392>>2]|0;
  $168 = $iter;
  $169 = (__Z5b2MaxIiET_S0_S0_($167,$168)|0);
  HEAP32[1392>>2] = $169;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $55 = $0;
  HEAP32[$55>>2] = 3;
  $56 = $t1;
  $57 = $0;
  $58 = (($57) + 4|0);
  HEAPF32[$58>>2] = $56;
  $167 = HEAP32[1392>>2]|0;
  $168 = $iter;
  $169 = (__Z5b2MaxIiET_S0_S0_($167,$168)|0);
  HEAP32[1392>>2] = $169;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 33) {
  $167 = HEAP32[1392>>2]|0;
  $168 = $iter;
  $169 = (__Z5b2MaxIiET_S0_S0_($167,$168)|0);
  HEAP32[1392>>2] = $169;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 35) {
  $163 = $0;
  HEAP32[$163>>2] = 1;
  $164 = $t1;
  $165 = $0;
  $166 = (($165) + 4|0);
  HEAPF32[$166>>2] = $164;
  $167 = HEAP32[1392>>2]|0;
  $168 = $iter;
  $169 = (__Z5b2MaxIiET_S0_S0_($167,$168)|0);
  HEAP32[1392>>2] = $169;
  STACKTOP = sp;return;
 }
}
function __ZN7b2Sweep9NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $twoPi = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $twoPi = 6.2831854820251465;
 $2 = $twoPi;
 $3 = (($1) + 24|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $twoPi;
 $6 = $4 / $5;
 $7 = (+Math_floor((+$6)));
 $8 = $2 * $7;
 $d = $8;
 $9 = $d;
 $10 = (($1) + 24|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = $d;
 $14 = (($1) + 28|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 - $13;
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZNK7b2Sweep12GetTransformEP11b2Transformf($this,$xf,$beta) {
 $this = $this|0;
 $xf = $xf|0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $angle = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $4 = sp + 40|0;
 $5 = sp;
 $6 = sp + 32|0;
 $0 = $this;
 $1 = $xf;
 $2 = $beta;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = 1.0 - $9;
 $11 = (($7) + 8|0);
 __ZmlfRK6b2Vec2($4,$10,$11);
 $12 = $2;
 $13 = (($7) + 16|0);
 __ZmlfRK6b2Vec2($5,$12,$13);
 __ZplRK6b2Vec2S1_($3,$4,$5);
 ;HEAP32[$8+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;
 $14 = $2;
 $15 = 1.0 - $14;
 $16 = (($7) + 24|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 * $17;
 $19 = $2;
 $20 = (($7) + 28|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 $23 = $18 + $22;
 $angle = $23;
 $24 = $1;
 $25 = (($24) + 8|0);
 $26 = $angle;
 __ZN5b2Rot3SetEf($25,$26);
 $27 = $1;
 $28 = $1;
 $29 = (($28) + 8|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($6,$29,$7);
 __ZN6b2Vec2mIERKS_($27,$6);
 STACKTOP = sp;return;
}
function __ZN20b2SeparationFunctionC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 __ZN7b2SweepC2Ev($2);
 $3 = (($1) + 44|0);
 __ZN7b2SweepC2Ev($3);
 $4 = (($1) + 84|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = (($1) + 92|0);
 __ZN6b2Vec2C2Ev($5);
 STACKTOP = sp;return;
}
function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this,$cache,$proxyA,$sweepA,$proxyB,$sweepB,$t1) {
 $this = $this|0;
 $cache = $cache|0;
 $proxyA = $proxyA|0;
 $sweepA = $sweepA|0;
 $proxyB = $proxyB|0;
 $sweepB = $sweepB|0;
 $t1 = +$t1;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, $count = 0, $localPointA = 0, $localPointA1 = 0, $localPointA2 = 0, $localPointA25 = 0, $localPointB = 0, $localPointB1 = 0, $localPointB2 = 0, $localPointB8 = 0, $normal = 0, $normal6 = 0, $pointA = 0, $pointA3 = 0, $pointA7 = 0, $pointB = 0, $pointB1 = 0, $pointB9 = 0, $s = 0.0, $s10 = 0.0;
 var $s4 = 0.0, $xfA = 0, $xfB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 48|0;
 $xfB = sp + 64|0;
 $localPointA = sp + 80|0;
 $localPointB = sp + 88|0;
 $pointA = sp + 96|0;
 $pointB = sp + 104|0;
 $8 = sp + 112|0;
 $localPointB1 = sp + 264|0;
 $localPointB2 = sp + 280|0;
 $9 = sp + 296|0;
 $10 = sp + 312|0;
 $normal = sp + 328|0;
 $11 = sp + 160|0;
 $12 = sp + 168|0;
 $pointB1 = sp + 176|0;
 $localPointA2 = sp + 184|0;
 $pointA3 = sp + 192|0;
 $13 = sp + 208|0;
 $14 = sp + 216|0;
 $localPointA1 = sp + 224|0;
 $localPointA25 = sp + 232|0;
 $15 = sp + 240|0;
 $16 = sp + 16|0;
 $normal6 = sp + 248|0;
 $17 = sp + 24|0;
 $18 = sp + 128|0;
 $pointA7 = sp + 256|0;
 $localPointB8 = sp + 136|0;
 $pointB9 = sp + 272|0;
 $19 = sp;
 $20 = sp + 144|0;
 $1 = $this;
 $2 = $cache;
 $3 = $proxyA;
 $4 = $sweepA;
 $5 = $proxyB;
 $6 = $sweepB;
 $7 = $t1;
 $21 = $1;
 $22 = $3;
 HEAP32[$21>>2] = $22;
 $23 = $5;
 $24 = (($21) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = $2;
 $26 = (($25) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $count = $28;
 $29 = $count;
 $30 = (0)<($29|0);
 if (!($30)) {
  ___assert_fail((1592|0),(1440|0),50,(1616|0));
  // unreachable;
 }
 $31 = $count;
 $32 = ($31|0)<(3);
 if (!($32)) {
  ___assert_fail((1592|0),(1440|0),50,(1616|0));
  // unreachable;
 }
 $33 = (($21) + 8|0);
 $34 = $4;
 dest=$33+0|0; src=$34+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $35 = (($21) + 44|0);
 $36 = $6;
 dest=$35+0|0; src=$36+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $37 = (($21) + 8|0);
 $38 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($37,$xfA,$38);
 $39 = (($21) + 44|0);
 $40 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($39,$xfB,$40);
 $41 = $count;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = (($21) + 80|0);
  HEAP32[$43>>2] = 0;
  $44 = HEAP32[$21>>2]|0;
  $45 = $2;
  $46 = (($45) + 6|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (__ZNK15b2DistanceProxy9GetVertexEi($44,$48)|0);
  ;HEAP32[$localPointA+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$49+4>>2]|0;
  $50 = (($21) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $2;
  $53 = (($52) + 9|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$55)|0);
  ;HEAP32[$localPointB+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$56+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  $57 = (($21) + 92|0);
  __ZmiRK6b2Vec2S1_($8,$pointB,$pointA);
  ;HEAP32[$57+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$8+4>>2]|0;
  $58 = (($21) + 92|0);
  $59 = (+__ZN6b2Vec29NormalizeEv($58));
  $s = $59;
  $60 = $s;
  $0 = $60;
  $140 = $0;
  STACKTOP = sp;return (+$140);
 }
 $61 = $2;
 $62 = (($61) + 6|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $2;
 $66 = (($65) + 6|0);
 $67 = (($66) + 1|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = ($64|0)==($69|0);
 if ($70) {
  $71 = (($21) + 80|0);
  HEAP32[$71>>2] = 2;
  $72 = $5;
  $73 = $2;
  $74 = (($73) + 9|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (__ZNK15b2DistanceProxy9GetVertexEi($72,$76)|0);
  ;HEAP32[$localPointB1+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$localPointB1+4>>2]=HEAP32[$77+4>>2]|0;
  $78 = $5;
  $79 = $2;
  $80 = (($79) + 9|0);
  $81 = (($80) + 1|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = (__ZNK15b2DistanceProxy9GetVertexEi($78,$83)|0);
  ;HEAP32[$localPointB2+0>>2]=HEAP32[$84+0>>2]|0;HEAP32[$localPointB2+4>>2]=HEAP32[$84+4>>2]|0;
  $85 = (($21) + 92|0);
  __ZmiRK6b2Vec2S1_($10,$localPointB2,$localPointB1);
  __Z7b2CrossRK6b2Vec2f($9,$10,1.0);
  ;HEAP32[$85+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$85+4>>2]=HEAP32[$9+4>>2]|0;
  $86 = (($21) + 92|0);
  (+__ZN6b2Vec29NormalizeEv($86));
  $87 = (($xfB) + 8|0);
  $88 = (($21) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$87,$88);
  $89 = (($21) + 84|0);
  __ZplRK6b2Vec2S1_($12,$localPointB1,$localPointB2);
  __ZmlfRK6b2Vec2($11,0.5,$12);
  ;HEAP32[$89+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$11+4>>2]|0;
  $90 = (($21) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB1,$xfB,$90);
  $91 = $3;
  $92 = $2;
  $93 = (($92) + 6|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (__ZNK15b2DistanceProxy9GetVertexEi($91,$95)|0);
  ;HEAP32[$localPointA2+0>>2]=HEAP32[$96+0>>2]|0;HEAP32[$localPointA2+4>>2]=HEAP32[$96+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA3,$xfA,$localPointA2);
  __ZmiRK6b2Vec2S1_($13,$pointA3,$pointB1);
  $97 = (+__Z5b2DotRK6b2Vec2S1_($13,$normal));
  $s4 = $97;
  $98 = $s4;
  $99 = $98 < 0.0;
  if ($99) {
   $100 = (($21) + 92|0);
   $101 = (($21) + 92|0);
   __ZNK6b2Vec2ngEv($14,$101);
   ;HEAP32[$100+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$100+4>>2]=HEAP32[$14+4>>2]|0;
   $102 = $s4;
   $103 = -$102;
   $s4 = $103;
  }
  $104 = $s4;
  $0 = $104;
  $140 = $0;
  STACKTOP = sp;return (+$140);
 } else {
  $105 = (($21) + 80|0);
  HEAP32[$105>>2] = 1;
  $106 = HEAP32[$21>>2]|0;
  $107 = $2;
  $108 = (($107) + 6|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (__ZNK15b2DistanceProxy9GetVertexEi($106,$110)|0);
  ;HEAP32[$localPointA1+0>>2]=HEAP32[$111+0>>2]|0;HEAP32[$localPointA1+4>>2]=HEAP32[$111+4>>2]|0;
  $112 = HEAP32[$21>>2]|0;
  $113 = $2;
  $114 = (($113) + 6|0);
  $115 = (($114) + 1|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = (__ZNK15b2DistanceProxy9GetVertexEi($112,$117)|0);
  ;HEAP32[$localPointA25+0>>2]=HEAP32[$118+0>>2]|0;HEAP32[$localPointA25+4>>2]=HEAP32[$118+4>>2]|0;
  $119 = (($21) + 92|0);
  __ZmiRK6b2Vec2S1_($16,$localPointA25,$localPointA1);
  __Z7b2CrossRK6b2Vec2f($15,$16,1.0);
  ;HEAP32[$119+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$15+4>>2]|0;
  $120 = (($21) + 92|0);
  (+__ZN6b2Vec29NormalizeEv($120));
  $121 = (($xfA) + 8|0);
  $122 = (($21) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$121,$122);
  $123 = (($21) + 84|0);
  __ZplRK6b2Vec2S1_($18,$localPointA1,$localPointA25);
  __ZmlfRK6b2Vec2($17,0.5,$18);
  ;HEAP32[$123+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$123+4>>2]=HEAP32[$17+4>>2]|0;
  $124 = (($21) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA7,$xfA,$124);
  $125 = (($21) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $2;
  $128 = (($127) + 9|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = (__ZNK15b2DistanceProxy9GetVertexEi($126,$130)|0);
  ;HEAP32[$localPointB8+0>>2]=HEAP32[$131+0>>2]|0;HEAP32[$localPointB8+4>>2]=HEAP32[$131+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB9,$xfB,$localPointB8);
  __ZmiRK6b2Vec2S1_($19,$pointB9,$pointA7);
  $132 = (+__Z5b2DotRK6b2Vec2S1_($19,$normal6));
  $s10 = $132;
  $133 = $s10;
  $134 = $133 < 0.0;
  if ($134) {
   $135 = (($21) + 92|0);
   $136 = (($21) + 92|0);
   __ZNK6b2Vec2ngEv($20,$136);
   ;HEAP32[$135+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$135+4>>2]=HEAP32[$20+4>>2]|0;
   $137 = $s10;
   $138 = -$137;
   $s10 = $138;
  }
  $139 = $s10;
  $0 = $139;
  $140 = $0;
  STACKTOP = sp;return (+$140);
 }
 return +0;
}
function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this,$indexA,$indexB,$t) {
 $this = $this|0;
 $indexA = $indexA|0;
 $indexB = $indexB|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, $axisA = 0, $axisA8 = 0, $axisB = 0, $axisB2 = 0, $localPointA = 0, $localPointA9 = 0, $localPointB = 0, $localPointB3 = 0;
 var $normal = 0, $normal6 = 0, $pointA = 0, $pointA1 = 0, $pointA10 = 0, $pointB = 0, $pointB4 = 0, $pointB7 = 0, $separation = 0.0, $separation11 = 0.0, $separation5 = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 32|0;
 $xfB = sp + 48|0;
 $axisA = sp + 64|0;
 $axisB = sp + 72|0;
 $5 = sp + 80|0;
 $localPointA = sp + 88|0;
 $localPointB = sp + 184|0;
 $pointA = sp + 200|0;
 $pointB = sp + 216|0;
 $6 = sp + 240|0;
 $normal = sp + 248|0;
 $pointA1 = sp + 136|0;
 $axisB2 = sp + 144|0;
 $7 = sp + 152|0;
 $localPointB3 = sp + 160|0;
 $pointB4 = sp + 168|0;
 $8 = sp + 16|0;
 $normal6 = sp;
 $pointB7 = sp + 8|0;
 $axisA8 = sp + 176|0;
 $9 = sp + 96|0;
 $localPointA9 = sp + 192|0;
 $pointA10 = sp + 112|0;
 $10 = sp + 120|0;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $11 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $12 = (($11) + 8|0);
 $13 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($12,$xfA,$13);
 $14 = (($11) + 44|0);
 $15 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($14,$xfB,$15);
 $16 = (($11) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 if ((($17|0) == 1)) {
  $41 = (($xfA) + 8|0);
  $42 = (($11) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$41,$42);
  $43 = (($11) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1,$xfA,$43);
  $44 = (($xfB) + 8|0);
  __ZNK6b2Vec2ngEv($7,$normal);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2,$44,$7);
  $45 = $2;
  HEAP32[$45>>2] = -1;
  $46 = (($11) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($47,$axisB2)|0);
  $49 = $3;
  HEAP32[$49>>2] = $48;
  $50 = (($11) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $3;
  $53 = HEAP32[$52>>2]|0;
  $54 = (__ZNK15b2DistanceProxy9GetVertexEi($51,$53)|0);
  ;HEAP32[$localPointB3+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$localPointB3+4>>2]=HEAP32[$54+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4,$xfB,$localPointB3);
  __ZmiRK6b2Vec2S1_($8,$pointB4,$pointA1);
  $55 = (+__Z5b2DotRK6b2Vec2S1_($8,$normal));
  $separation5 = $55;
  $56 = $separation5;
  $0 = $56;
  $71 = $0;
  STACKTOP = sp;return (+$71);
 } else if ((($17|0) == 2)) {
  $57 = (($xfB) + 8|0);
  $58 = (($11) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$57,$58);
  $59 = (($11) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7,$xfB,$59);
  $60 = (($xfA) + 8|0);
  __ZNK6b2Vec2ngEv($9,$normal6);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8,$60,$9);
  $61 = $3;
  HEAP32[$61>>2] = -1;
  $62 = HEAP32[$11>>2]|0;
  $63 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($62,$axisA8)|0);
  $64 = $2;
  HEAP32[$64>>2] = $63;
  $65 = HEAP32[$11>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = (__ZNK15b2DistanceProxy9GetVertexEi($65,$67)|0);
  ;HEAP32[$localPointA9+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$localPointA9+4>>2]=HEAP32[$68+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10,$xfA,$localPointA9);
  __ZmiRK6b2Vec2S1_($10,$pointA10,$pointB7);
  $69 = (+__Z5b2DotRK6b2Vec2S1_($10,$normal6));
  $separation11 = $69;
  $70 = $separation11;
  $0 = $70;
  $71 = $0;
  STACKTOP = sp;return (+$71);
 } else if ((($17|0) == 0)) {
  $18 = (($xfA) + 8|0);
  $19 = (($11) + 92|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA,$18,$19);
  $20 = (($xfB) + 8|0);
  $21 = (($11) + 92|0);
  __ZNK6b2Vec2ngEv($5,$21);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB,$20,$5);
  $22 = HEAP32[$11>>2]|0;
  $23 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($22,$axisA)|0);
  $24 = $2;
  HEAP32[$24>>2] = $23;
  $25 = (($11) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($26,$axisB)|0);
  $28 = $3;
  HEAP32[$28>>2] = $27;
  $29 = HEAP32[$11>>2]|0;
  $30 = $2;
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZNK15b2DistanceProxy9GetVertexEi($29,$31)|0);
  ;HEAP32[$localPointA+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$32+4>>2]|0;
  $33 = (($11) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  $37 = (__ZNK15b2DistanceProxy9GetVertexEi($34,$36)|0);
  ;HEAP32[$localPointB+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$37+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
  $38 = (($11) + 92|0);
  $39 = (+__Z5b2DotRK6b2Vec2S1_($6,$38));
  $separation = $39;
  $40 = $separation;
  $0 = $40;
  $71 = $0;
  STACKTOP = sp;return (+$71);
 } else {
  ___assert_fail((1544|0),(1440|0),183,(1568|0));
  // unreachable;
 }
 return +0;
}
function __ZNK20b2SeparationFunction8EvaluateEiif($this,$indexA,$indexB,$t) {
 $this = $this|0;
 $indexA = $indexA|0;
 $indexB = $indexB|0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axisA = 0, $axisA8 = 0, $axisB = 0, $axisB2 = 0, $localPointA = 0, $localPointA9 = 0, $localPointB = 0, $localPointB3 = 0;
 var $normal = 0, $normal6 = 0, $pointA = 0, $pointA1 = 0, $pointA10 = 0, $pointB = 0, $pointB4 = 0, $pointB7 = 0, $separation = 0.0, $separation11 = 0.0, $separation5 = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xfA = sp + 16|0;
 $xfB = sp + 32|0;
 $axisA = sp + 160|0;
 $axisB = sp + 48|0;
 $5 = sp + 56|0;
 $localPointA = sp + 64|0;
 $localPointB = sp + 192|0;
 $pointA = sp + 208|0;
 $pointB = sp + 224|0;
 $6 = sp + 248|0;
 $normal = sp + 256|0;
 $pointA1 = sp + 112|0;
 $axisB2 = sp + 120|0;
 $7 = sp + 128|0;
 $localPointB3 = sp + 136|0;
 $pointB4 = sp + 144|0;
 $8 = sp + 168|0;
 $normal6 = sp + 176|0;
 $pointB7 = sp;
 $axisA8 = sp + 184|0;
 $9 = sp + 72|0;
 $localPointA9 = sp + 200|0;
 $pointA10 = sp + 88|0;
 $10 = sp + 96|0;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $11 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $12 = (($11) + 8|0);
 $13 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($12,$xfA,$13);
 $14 = (($11) + 44|0);
 $15 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($14,$xfB,$15);
 $16 = (($11) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 if ((($17|0) == 2)) {
  $42 = (($xfB) + 8|0);
  $43 = (($11) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6,$42,$43);
  $44 = (($11) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7,$xfB,$44);
  $45 = (($xfA) + 8|0);
  __ZNK6b2Vec2ngEv($9,$normal6);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8,$45,$9);
  $46 = HEAP32[$11>>2]|0;
  $47 = $2;
  $48 = (__ZNK15b2DistanceProxy9GetVertexEi($46,$47)|0);
  ;HEAP32[$localPointA9+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$localPointA9+4>>2]=HEAP32[$48+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10,$xfA,$localPointA9);
  __ZmiRK6b2Vec2S1_($10,$pointA10,$pointB7);
  $49 = (+__Z5b2DotRK6b2Vec2S1_($10,$normal6));
  $separation11 = $49;
  $50 = $separation11;
  $0 = $50;
  $51 = $0;
  STACKTOP = sp;return (+$51);
 } else if ((($17|0) == 1)) {
  $32 = (($xfA) + 8|0);
  $33 = (($11) + 92|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($normal,$32,$33);
  $34 = (($11) + 84|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1,$xfA,$34);
  $35 = (($xfB) + 8|0);
  __ZNK6b2Vec2ngEv($7,$normal);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2,$35,$7);
  $36 = (($11) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = (__ZNK15b2DistanceProxy9GetVertexEi($37,$38)|0);
  ;HEAP32[$localPointB3+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$localPointB3+4>>2]=HEAP32[$39+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4,$xfB,$localPointB3);
  __ZmiRK6b2Vec2S1_($8,$pointB4,$pointA1);
  $40 = (+__Z5b2DotRK6b2Vec2S1_($8,$normal));
  $separation5 = $40;
  $41 = $separation5;
  $0 = $41;
  $51 = $0;
  STACKTOP = sp;return (+$51);
 } else if ((($17|0) == 0)) {
  $18 = (($xfA) + 8|0);
  $19 = (($11) + 92|0);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisA,$18,$19);
  $20 = (($xfB) + 8|0);
  $21 = (($11) + 92|0);
  __ZNK6b2Vec2ngEv($5,$21);
  __Z6b2MulTRK5b2RotRK6b2Vec2($axisB,$20,$5);
  $22 = HEAP32[$11>>2]|0;
  $23 = $2;
  $24 = (__ZNK15b2DistanceProxy9GetVertexEi($22,$23)|0);
  ;HEAP32[$localPointA+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$localPointA+4>>2]=HEAP32[$24+4>>2]|0;
  $25 = (($11) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = (__ZNK15b2DistanceProxy9GetVertexEi($26,$27)|0);
  ;HEAP32[$localPointB+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$localPointB+4>>2]=HEAP32[$28+4>>2]|0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$xfA,$localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$xfB,$localPointB);
  __ZmiRK6b2Vec2S1_($6,$pointB,$pointA);
  $29 = (($11) + 92|0);
  $30 = (+__Z5b2DotRK6b2Vec2S1_($6,$29));
  $separation = $30;
  $31 = $separation;
  $0 = $31;
  $51 = $0;
  STACKTOP = sp;return (+$51);
 } else {
  ___assert_fail((1544|0),(1440|0),242,(1552|0));
  // unreachable;
 }
 return +0;
}
function __ZN5b2Rot3SetEf($this,$angle) {
 $this = $this|0;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $angle;
 $2 = $0;
 $3 = $1;
 $4 = (+Math_sin((+$3)));
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (+Math_cos((+$5)));
 $7 = (($2) + 4|0);
 HEAPF32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN7b2SweepC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = (($1) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this,$edge,$index) {
 $this = $this|0;
 $edge = $edge|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $edge;
 $2 = $index;
 $3 = $0;
 $4 = $2;
 $5 = (0)<=($4|0);
 if (!($5)) {
  ___assert_fail((1728|0),(1632|0),89,(1768|0));
  // unreachable;
 }
 $6 = $2;
 $7 = (($3) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $10 = ($6|0)<($9|0);
 if (!($10)) {
  ___assert_fail((1728|0),(1632|0),89,(1768|0));
  // unreachable;
 }
 $11 = $1;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 1;
 $13 = (($3) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = (($15) + 8|0);
 HEAPF32[$16>>2] = $14;
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = $2;
 $20 = (($19) + 0)|0;
 $21 = (($3) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($20<<3)|0);
 ;HEAP32[$18+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$23+4>>2]|0;
 $24 = $1;
 $25 = (($24) + 20|0);
 $26 = $2;
 $27 = (($26) + 1)|0;
 $28 = (($3) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($27<<3)|0);
 ;HEAP32[$25+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$25+4>>2]=HEAP32[$30+4>>2]|0;
 $31 = $2;
 $32 = ($31|0)>(0);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 28|0);
  $35 = $2;
  $36 = (($35) - 1)|0;
  $37 = (($3) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($36<<3)|0);
  ;HEAP32[$34+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$39+4>>2]|0;
  $40 = $1;
  $41 = (($40) + 44|0);
  HEAP8[$41>>0] = 1;
 } else {
  $42 = $1;
  $43 = (($42) + 28|0);
  $44 = (($3) + 20|0);
  ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$43+4>>2]=HEAP32[$44+4>>2]|0;
  $45 = (($3) + 36|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&1;
  $48 = $1;
  $49 = (($48) + 44|0);
  $50 = $47&1;
  HEAP8[$49>>0] = $50;
 }
 $51 = $2;
 $52 = (($3) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) - 2)|0;
 $55 = ($51|0)<($54|0);
 if ($55) {
  $56 = $1;
  $57 = (($56) + 36|0);
  $58 = $2;
  $59 = (($58) + 2)|0;
  $60 = (($3) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($59<<3)|0);
  ;HEAP32[$57+0>>2]=HEAP32[$62+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$62+4>>2]|0;
  $63 = $1;
  $64 = (($63) + 45|0);
  HEAP8[$64>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $65 = $1;
  $66 = (($65) + 36|0);
  $67 = (($3) + 28|0);
  ;HEAP32[$66+0>>2]=HEAP32[$67+0>>2]|0;HEAP32[$66+4>>2]=HEAP32[$67+4>>2]|0;
  $68 = (($3) + 37|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&1;
  $71 = $1;
  $72 = (($71) + 45|0);
  $73 = $70&1;
  HEAP8[$72>>0] = $73;
  STACKTOP = sp;return;
 }
}
function __ZN7b2ShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN7b2ShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN11b2EdgeShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = (1848 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 12|0);
 __THREW__ = 0;
 invoke_vi(424,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = (($3) + 20|0);
  __THREW__ = 0;
  invoke_vi(424,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = (($3) + 28|0);
   __THREW__ = 0;
   invoke_vi(424,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = (($3) + 36|0);
    __THREW__ = 0;
    invoke_vi(424,($14|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     $17 = (($3) + 4|0);
     HEAP32[$17>>2] = 1;
     $18 = (($3) + 8|0);
     HEAPF32[$18>>2] = 0.0099999997764825821;
     $19 = (($3) + 28|0);
     HEAPF32[$19>>2] = 0.0;
     $20 = (($3) + 28|0);
     $21 = (($20) + 4|0);
     HEAPF32[$21>>2] = 0.0;
     $22 = (($3) + 36|0);
     HEAPF32[$22>>2] = 0.0;
     $23 = (($3) + 36|0);
     $24 = (($23) + 4|0);
     HEAPF32[$24>>2] = 0.0;
     $25 = (($3) + 44|0);
     HEAP8[$25>>0] = 0;
     $26 = (($3) + 45|0);
     HEAP8[$26>>0] = 0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 }
 $31 = $1;
 $32 = $2;
 ___resumeException($31|0);
 // unreachable;
}
function __ZN11b2EdgeShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7b2ShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (1808 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN7b2ShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = $2;
 $6 = (($5) + 4|0);
 ;HEAP32[$4+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN16b2BlockAllocator8AllocateEi($3,48)|0);
 $mem = $4;
 $5 = $mem;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = 0;
 } else {
  __ZN11b2EdgeShapeC2Ev($5);
  $7 = $5;
 }
 $clone = $7;
 $8 = $clone;
 (__ZN11b2EdgeShapeaSERKS_($8,$2)|0);
 $9 = $clone;
 STACKTOP = sp;return ($9|0);
}
function __ZNK11b2EdgeShape13GetChildCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this,$xf,$p) {
 $this = $this|0;
 $xf = $xf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $xf;
 $2 = $p;
 STACKTOP = sp;return 0;
}
function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this,$output,$input,$xf,$childIndex) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $denominator = 0.0, $e = 0, $normal = 0, $numerator = 0.0, $p1 = 0, $p2 = 0, $q = 0, $r = 0, $rr = 0.0, $s = 0.0, $t = 0.0, $v1 = 0;
 var $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp + 32|0;
 $6 = sp + 40|0;
 $p2 = sp + 48|0;
 $7 = sp + 128|0;
 $d = sp + 144|0;
 $v1 = sp + 160|0;
 $v2 = sp + 168|0;
 $e = sp + 176|0;
 $normal = sp + 88|0;
 $8 = sp + 104|0;
 $q = sp + 16|0;
 $9 = sp + 56|0;
 $r = sp + 120|0;
 $10 = sp + 72|0;
 $11 = sp + 80|0;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $12 = $1;
 $13 = $4;
 $14 = (($13) + 8|0);
 $15 = $3;
 $16 = $4;
 __ZmiRK6b2Vec2S1_($6,$15,$16);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1,$14,$6);
 $17 = $4;
 $18 = (($17) + 8|0);
 $19 = $3;
 $20 = (($19) + 8|0);
 $21 = $4;
 __ZmiRK6b2Vec2S1_($7,$20,$21);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2,$18,$7);
 __ZmiRK6b2Vec2S1_($d,$p2,$p1);
 $22 = (($12) + 12|0);
 ;HEAP32[$v1+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$22+4>>2]|0;
 $23 = (($12) + 20|0);
 ;HEAP32[$v2+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$23+4>>2]|0;
 __ZmiRK6b2Vec2S1_($e,$v2,$v1);
 $24 = (($e) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = +HEAPF32[$e>>2];
 $27 = -$26;
 __ZN6b2Vec2C2Eff($normal,$25,$27);
 (+__ZN6b2Vec29NormalizeEv($normal));
 __ZmiRK6b2Vec2S1_($8,$v1,$p1);
 $28 = (+__Z5b2DotRK6b2Vec2S1_($normal,$8));
 $numerator = $28;
 $29 = (+__Z5b2DotRK6b2Vec2S1_($normal,$d));
 $denominator = $29;
 $30 = $denominator;
 $31 = $30 == 0.0;
 if ($31) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $60 = $$pre_trunc&1;
  STACKTOP = sp;return ($60|0);
 }
 $32 = $numerator;
 $33 = $denominator;
 $34 = $32 / $33;
 $t = $34;
 $35 = $t;
 $36 = $35 < 0.0;
 if (!($36)) {
  $37 = $3;
  $38 = (($37) + 16|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $t;
  $41 = $39 < $40;
  if (!($41)) {
   $42 = $t;
   __ZmlfRK6b2Vec2($9,$42,$d);
   __ZplRK6b2Vec2S1_($q,$p1,$9);
   __ZmiRK6b2Vec2S1_($r,$v2,$v1);
   $43 = (+__Z5b2DotRK6b2Vec2S1_($r,$r));
   $rr = $43;
   $44 = $rr;
   $45 = $44 == 0.0;
   if ($45) {
    $$expand_i1_val4 = 0;
    $0 = $$expand_i1_val4;
    $$pre_trunc = $0;
    $60 = $$pre_trunc&1;
    STACKTOP = sp;return ($60|0);
   }
   __ZmiRK6b2Vec2S1_($10,$q,$v1);
   $46 = (+__Z5b2DotRK6b2Vec2S1_($10,$r));
   $47 = $rr;
   $48 = $46 / $47;
   $s = $48;
   $49 = $s;
   $50 = $49 < 0.0;
   if (!($50)) {
    $51 = $s;
    $52 = 1.0 < $51;
    if (!($52)) {
     $53 = $t;
     $54 = $2;
     $55 = (($54) + 8|0);
     HEAPF32[$55>>2] = $53;
     $56 = $numerator;
     $57 = $56 > 0.0;
     if ($57) {
      $58 = $2;
      __ZNK6b2Vec2ngEv($11,$normal);
      ;HEAP32[$58+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$58+4>>2]=HEAP32[$11+4>>2]|0;
     } else {
      $59 = $2;
      ;HEAP32[$59+0>>2]=HEAP32[$normal+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$normal+4>>2]|0;
     }
     $$expand_i1_val8 = 1;
     $0 = $$expand_i1_val8;
     $$pre_trunc = $0;
     $60 = $$pre_trunc&1;
     STACKTOP = sp;return ($60|0);
    }
   }
   $$expand_i1_val6 = 0;
   $0 = $$expand_i1_val6;
   $$pre_trunc = $0;
   $60 = $$pre_trunc&1;
   STACKTOP = sp;return ($60|0);
  }
 }
 $$expand_i1_val2 = 0;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $60 = $$pre_trunc&1;
 STACKTOP = sp;return ($60|0);
}
function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this,$aabb,$xf,$childIndex) {
 $this = $this|0;
 $aabb = $aabb|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lower = 0, $r = 0;
 var $upper = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v1 = sp + 64|0;
 $v2 = sp + 80|0;
 $lower = sp + 24|0;
 $upper = sp + 48|0;
 $r = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $6 = $0;
 $7 = $2;
 $8 = (($6) + 12|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v1,$7,$8);
 $9 = $2;
 $10 = (($6) + 20|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($v2,$9,$10);
 __Z5b2MinRK6b2Vec2S1_($lower,$v1,$v2);
 __Z5b2MaxRK6b2Vec2S1_($upper,$v1,$v2);
 $11 = (($6) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($6) + 8|0);
 $14 = +HEAPF32[$13>>2];
 __ZN6b2Vec2C2Eff($r,$12,$14);
 $15 = $1;
 __ZmiRK6b2Vec2S1_($4,$lower,$r);
 ;HEAP32[$15+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$4+4>>2]|0;
 $16 = $1;
 $17 = (($16) + 8|0);
 __ZplRK6b2Vec2S1_($5,$upper,$r);
 ;HEAP32[$17+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$17+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this,$massData,$density) {
 $this = $this|0;
 $massData = $massData|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $5 = $0;
 $6 = $1;
 HEAPF32[$6>>2] = 0.0;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = (($5) + 12|0);
 $10 = (($5) + 20|0);
 __ZplRK6b2Vec2S1_($4,$9,$10);
 __ZmlfRK6b2Vec2($3,0.5,$4);
 ;HEAP32[$8+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;
 $11 = $1;
 $12 = (($11) + 12|0);
 HEAPF32[$12>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN11b2EdgeShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(4,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN11b2EdgeShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (__ZN7b2ShapeaSERKS_($3,$4)|0);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[$7+28>>2]|0;HEAP16[$5+32>>1]=HEAP16[$7+32>>1]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN16b2BlockAllocator8AllocateEi($3,152)|0);
 $mem = $4;
 $5 = $mem;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = 0;
 } else {
  __ZN14b2PolygonShapeC2Ev($5);
  $7 = $5;
 }
 $clone = $7;
 $8 = $clone;
 (__ZN14b2PolygonShapeaSERKS_($8,$2)|0);
 $9 = $clone;
 STACKTOP = sp;return ($9|0);
}
function __ZN14b2PolygonShape8SetAsBoxEff($this,$hx,$hy) {
 $this = $this|0;
 $hx = +$hx;
 $hy = +$hy;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $hx;
 $2 = $hy;
 $3 = $0;
 $4 = (($3) + 148|0);
 HEAP32[$4>>2] = 4;
 $5 = (($3) + 20|0);
 $6 = $1;
 $7 = -$6;
 $8 = $2;
 $9 = -$8;
 __ZN6b2Vec23SetEff($5,$7,$9);
 $10 = (($3) + 20|0);
 $11 = (($10) + 8|0);
 $12 = $1;
 $13 = $2;
 $14 = -$13;
 __ZN6b2Vec23SetEff($11,$12,$14);
 $15 = (($3) + 20|0);
 $16 = (($15) + 16|0);
 $17 = $1;
 $18 = $2;
 __ZN6b2Vec23SetEff($16,$17,$18);
 $19 = (($3) + 20|0);
 $20 = (($19) + 24|0);
 $21 = $1;
 $22 = -$21;
 $23 = $2;
 __ZN6b2Vec23SetEff($20,$22,$23);
 $24 = (($3) + 84|0);
 __ZN6b2Vec23SetEff($24,0.0,-1.0);
 $25 = (($3) + 84|0);
 $26 = (($25) + 8|0);
 __ZN6b2Vec23SetEff($26,1.0,0.0);
 $27 = (($3) + 84|0);
 $28 = (($27) + 16|0);
 __ZN6b2Vec23SetEff($28,0.0,1.0);
 $29 = (($3) + 84|0);
 $30 = (($29) + 24|0);
 __ZN6b2Vec23SetEff($30,-1.0,0.0);
 $31 = (($3) + 12|0);
 __ZN6b2Vec27SetZeroEv($31);
 STACKTOP = sp;return;
}
function __ZNK14b2PolygonShape13GetChildCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this,$xf,$p) {
 $this = $this|0;
 $xf = $xf|0;
 $p = $p|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dot = 0.0, $i = 0, $pLocal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pLocal = sp + 40|0;
 $4 = sp;
 $5 = sp + 8|0;
 $1 = $this;
 $2 = $xf;
 $3 = $p;
 $6 = $1;
 $7 = $2;
 $8 = (($7) + 8|0);
 $9 = $3;
 $10 = $2;
 __ZmiRK6b2Vec2S1_($4,$9,$10);
 __Z6b2MulTRK5b2RotRK6b2Vec2($pLocal,$8,$4);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = (($6) + 148|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   label = 7;
   break;
  }
  $15 = $i;
  $16 = (($6) + 84|0);
  $17 = (($16) + ($15<<3)|0);
  $18 = $i;
  $19 = (($6) + 20|0);
  $20 = (($19) + ($18<<3)|0);
  __ZmiRK6b2Vec2S1_($5,$pLocal,$20);
  $21 = (+__Z5b2DotRK6b2Vec2S1_($17,$5));
  $dot = $21;
  $22 = $dot;
  $23 = $22 > 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $26 = $$pre_trunc&1;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 7) {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $26 = $$pre_trunc&1;
  STACKTOP = sp;return ($26|0);
 }
 return 0|0;
}
function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this,$output,$input,$xf,$childIndex) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $d = 0, $denominator = 0.0, $i = 0, $index = 0, $lower = 0.0, $numerator = 0.0, $p1 = 0, $p2 = 0;
 var $upper = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1 = sp + 64|0;
 $6 = sp + 80|0;
 $p2 = sp + 96|0;
 $7 = sp + 104|0;
 $d = sp + 8|0;
 $8 = sp + 72|0;
 $9 = sp + 40|0;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $10 = $1;
 $11 = $4;
 $12 = (($11) + 8|0);
 $13 = $3;
 $14 = $4;
 __ZmiRK6b2Vec2S1_($6,$13,$14);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1,$12,$6);
 $15 = $4;
 $16 = (($15) + 8|0);
 $17 = $3;
 $18 = (($17) + 8|0);
 $19 = $4;
 __ZmiRK6b2Vec2S1_($7,$18,$19);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2,$16,$7);
 __ZmiRK6b2Vec2S1_($d,$p2,$p1);
 $lower = 0.0;
 $20 = $3;
 $21 = (($20) + 16|0);
 $22 = +HEAPF32[$21>>2];
 $upper = $22;
 $index = -1;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = (($10) + 148|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   label = 19;
   break;
  }
  $27 = $i;
  $28 = (($10) + 84|0);
  $29 = (($28) + ($27<<3)|0);
  $30 = $i;
  $31 = (($10) + 20|0);
  $32 = (($31) + ($30<<3)|0);
  __ZmiRK6b2Vec2S1_($8,$32,$p1);
  $33 = (+__Z5b2DotRK6b2Vec2S1_($29,$8));
  $numerator = $33;
  $34 = $i;
  $35 = (($10) + 84|0);
  $36 = (($35) + ($34<<3)|0);
  $37 = (+__Z5b2DotRK6b2Vec2S1_($36,$d));
  $denominator = $37;
  $38 = $denominator;
  $39 = $38 == 0.0;
  if ($39) {
   $40 = $numerator;
   $41 = $40 < 0.0;
   if ($41) {
    label = 5;
    break;
   }
  } else {
   $42 = $denominator;
   $43 = $42 < 0.0;
   if ($43) {
    $44 = $numerator;
    $45 = $lower;
    $46 = $denominator;
    $47 = $45 * $46;
    $48 = $44 < $47;
    if ($48) {
     $49 = $numerator;
     $50 = $denominator;
     $51 = $49 / $50;
     $lower = $51;
     $52 = $i;
     $index = $52;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $53 = $denominator;
    $54 = $53 > 0.0;
    if ($54) {
     $55 = $numerator;
     $56 = $upper;
     $57 = $denominator;
     $58 = $56 * $57;
     $59 = $55 < $58;
     if ($59) {
      $60 = $numerator;
      $61 = $denominator;
      $62 = $60 / $61;
      $upper = $62;
     }
    }
   }
  }
  $63 = $upper;
  $64 = $lower;
  $65 = $63 < $64;
  if ($65) {
   label = 16;
   break;
  }
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 16) {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $86 = $$pre_trunc&1;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 19) {
  $68 = $lower;
  $69 = 0.0 <= $68;
  if (!($69)) {
   ___assert_fail((2016|0),(1920|0),249,(2064|0));
   // unreachable;
  }
  $70 = $lower;
  $71 = $3;
  $72 = (($71) + 16|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 <= $73;
  if (!($74)) {
   ___assert_fail((2016|0),(1920|0),249,(2064|0));
   // unreachable;
  }
  $75 = $index;
  $76 = ($75|0)>=(0);
  if ($76) {
   $77 = $lower;
   $78 = $2;
   $79 = (($78) + 8|0);
   HEAPF32[$79>>2] = $77;
   $80 = $2;
   $81 = $4;
   $82 = (($81) + 8|0);
   $83 = $index;
   $84 = (($10) + 84|0);
   $85 = (($84) + ($83<<3)|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($9,$82,$85);
   ;HEAP32[$80+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$80+4>>2]=HEAP32[$9+4>>2]|0;
   $$expand_i1_val4 = 1;
   $0 = $$expand_i1_val4;
   $$pre_trunc = $0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  } else {
   $$expand_i1_val6 = 0;
   $0 = $$expand_i1_val6;
   $$pre_trunc = $0;
   $86 = $$pre_trunc&1;
   STACKTOP = sp;return ($86|0);
  }
 }
 return 0|0;
}
function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this,$aabb,$xf,$childIndex) {
 $this = $this|0;
 $aabb = $aabb|0;
 $xf = $xf|0;
 $childIndex = $childIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lower = 0, $r = 0, $upper = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lower = sp + 56|0;
 $upper = sp + 72|0;
 $v = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 40|0;
 $r = sp + 24|0;
 $6 = sp + 48|0;
 $7 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $8 = $0;
 $9 = $2;
 $10 = (($8) + 20|0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($lower,$9,$10);
 ;HEAP32[$upper+0>>2]=HEAP32[$lower+0>>2]|0;HEAP32[$upper+4>>2]=HEAP32[$lower+4>>2]|0;
 $i = 1;
 while(1) {
  $11 = $i;
  $12 = (($8) + 148|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $i;
  $17 = (($8) + 20|0);
  $18 = (($17) + ($16<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($v,$15,$18);
  __Z5b2MinRK6b2Vec2S1_($4,$lower,$v);
  ;HEAP32[$lower+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$lower+4>>2]=HEAP32[$4+4>>2]|0;
  __Z5b2MaxRK6b2Vec2S1_($5,$upper,$v);
  ;HEAP32[$upper+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$upper+4>>2]=HEAP32[$5+4>>2]|0;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $21 = (($8) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = (($8) + 8|0);
 $24 = +HEAPF32[$23>>2];
 __ZN6b2Vec2C2Eff($r,$22,$24);
 $25 = $1;
 __ZmiRK6b2Vec2S1_($6,$lower,$r);
 ;HEAP32[$25+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$25+4>>2]=HEAP32[$6+4>>2]|0;
 $26 = $1;
 $27 = (($26) + 8|0);
 __ZplRK6b2Vec2S1_($7,$upper,$r);
 ;HEAP32[$27+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$7+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this,$massData,$density) {
 $this = $this|0;
 $massData = $massData|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $D = 0.0, $I = 0.0, $area = 0.0, $center = 0, $e1 = 0;
 var $e2 = 0, $ex1 = 0.0, $ex2 = 0.0, $ey1 = 0.0, $ey2 = 0.0, $i = 0, $i1 = 0, $intx2 = 0.0, $inty2 = 0.0, $k_inv3 = 0.0, $s = 0, $triangleArea = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $center = sp + 56|0;
 $s = sp + 24|0;
 $e1 = sp + 104|0;
 $e2 = sp + 120|0;
 $3 = sp + 72|0;
 $4 = sp + 8|0;
 $5 = sp + 48|0;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $6 = $0;
 $7 = (($6) + 148|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(3);
 if (!($9)) {
  ___assert_fail((2072|0),(1920|0),306,(2096|0));
  // unreachable;
 }
 __ZN6b2Vec2C2Ev($center);
 __ZN6b2Vec23SetEff($center,0.0,0.0);
 $area = 0.0;
 $I = 0.0;
 __ZN6b2Vec2C2Eff($s,0.0,0.0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = (($6) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = (($6) + 20|0);
  $16 = (($15) + ($14<<3)|0);
  __ZN6b2Vec2pLERKS_($s,$16);
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = (($6) + 148|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = 1.0 / $21;
 __ZN6b2Vec2mLEf($s,$22);
 $k_inv3 = 0.3333333432674408;
 $i1 = 0;
 while(1) {
  $23 = $i1;
  $24 = (($6) + 148|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i1;
  $28 = (($6) + 20|0);
  $29 = (($28) + ($27<<3)|0);
  __ZmiRK6b2Vec2S1_($e1,$29,$s);
  $30 = $i1;
  $31 = (($30) + 1)|0;
  $32 = (($6) + 148|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)<($33|0);
  if ($34) {
   $35 = $i1;
   $36 = (($35) + 1)|0;
   $37 = (($6) + 20|0);
   $38 = (($37) + ($36<<3)|0);
   __ZmiRK6b2Vec2S1_($e2,$38,$s);
  } else {
   $39 = (($6) + 20|0);
   __ZmiRK6b2Vec2S1_($e2,$39,$s);
  }
  $40 = (+__Z7b2CrossRK6b2Vec2S1_($e1,$e2));
  $D = $40;
  $41 = $D;
  $42 = 0.5 * $41;
  $triangleArea = $42;
  $43 = $triangleArea;
  $44 = $area;
  $45 = $44 + $43;
  $area = $45;
  $46 = $triangleArea;
  $47 = $46 * 0.3333333432674408;
  __ZplRK6b2Vec2S1_($4,$e1,$e2);
  __ZmlfRK6b2Vec2($3,$47,$4);
  __ZN6b2Vec2pLERKS_($center,$3);
  $48 = +HEAPF32[$e1>>2];
  $ex1 = $48;
  $49 = (($e1) + 4|0);
  $50 = +HEAPF32[$49>>2];
  $ey1 = $50;
  $51 = +HEAPF32[$e2>>2];
  $ex2 = $51;
  $52 = (($e2) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $ey2 = $53;
  $54 = $ex1;
  $55 = $ex1;
  $56 = $54 * $55;
  $57 = $ex2;
  $58 = $ex1;
  $59 = $57 * $58;
  $60 = $56 + $59;
  $61 = $ex2;
  $62 = $ex2;
  $63 = $61 * $62;
  $64 = $60 + $63;
  $intx2 = $64;
  $65 = $ey1;
  $66 = $ey1;
  $67 = $65 * $66;
  $68 = $ey2;
  $69 = $ey1;
  $70 = $68 * $69;
  $71 = $67 + $70;
  $72 = $ey2;
  $73 = $ey2;
  $74 = $72 * $73;
  $75 = $71 + $74;
  $inty2 = $75;
  $76 = $D;
  $77 = 0.083333335816860198 * $76;
  $78 = $intx2;
  $79 = $inty2;
  $80 = $78 + $79;
  $81 = $77 * $80;
  $82 = $I;
  $83 = $82 + $81;
  $I = $83;
  $84 = $i1;
  $85 = (($84) + 1)|0;
  $i1 = $85;
 }
 $86 = $2;
 $87 = $area;
 $88 = $86 * $87;
 $89 = $1;
 HEAPF32[$89>>2] = $88;
 $90 = $area;
 $91 = $90 > 1.1920928955078125E-7;
 if ($91) {
  $92 = $area;
  $93 = 1.0 / $92;
  __ZN6b2Vec2mLEf($center,$93);
  $94 = $1;
  $95 = (($94) + 4|0);
  __ZplRK6b2Vec2S1_($5,$center,$s);
  ;HEAP32[$95+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$5+4>>2]|0;
  $96 = $2;
  $97 = $I;
  $98 = $96 * $97;
  $99 = $1;
  $100 = (($99) + 12|0);
  HEAPF32[$100>>2] = $98;
  $101 = $1;
  $102 = +HEAPF32[$101>>2];
  $103 = $1;
  $104 = (($103) + 4|0);
  $105 = $1;
  $106 = (($105) + 4|0);
  $107 = (+__Z5b2DotRK6b2Vec2S1_($104,$106));
  $108 = (+__Z5b2DotRK6b2Vec2S1_($center,$center));
  $109 = $107 - $108;
  $110 = $102 * $109;
  $111 = $1;
  $112 = (($111) + 12|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $113 + $110;
  HEAPF32[$112>>2] = $114;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2112|0),(1920|0),352,(2096|0));
  // unreachable;
 }
}
function __ZN14b2PolygonShapeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14b2PolygonShapeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(12,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN14b2PolygonShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = (2144 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 12|0);
 __THREW__ = 0;
 invoke_vi(424,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $8 = (($3) + 20|0);
   $9 = (($8) + 64|0);
   $10 = $8;
   while(1) {
    __THREW__ = 0;
    invoke_vi(424,($10|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break L1;
    }
    $13 = (($10) + 8|0);
    $14 = ($13|0)==($9|0);
    if ($14) {
     break;
    } else {
     $10 = $13;
    }
   }
   $15 = (($3) + 84|0);
   $16 = (($15) + 64|0);
   $17 = $15;
   while(1) {
    __THREW__ = 0;
    invoke_vi(424,($17|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     break L1;
    }
    $20 = (($17) + 8|0);
    $21 = ($20|0)==($16|0);
    if ($21) {
     break;
    } else {
     $17 = $20;
    }
   }
   $22 = (($3) + 4|0);
   HEAP32[$22>>2] = 2;
   $23 = (($3) + 8|0);
   HEAPF32[$23>>2] = 0.0099999997764825821;
   $24 = (($3) + 148|0);
   HEAP32[$24>>2] = 0;
   $25 = (($3) + 12|0);
   __THREW__ = 0;
   invoke_vi(425,($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $1 = $28;
 $2 = $29;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 }
 $32 = $1;
 $33 = $2;
 ___resumeException($32|0);
 // unreachable;
}
function __ZN14b2PolygonShapeaSERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 (__ZN7b2ShapeaSERKS_($3,$4)|0);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 _memcpy(($5|0),($7|0),140)|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Vec2mLEf($this,$a) {
 $this = $this|0;
 $a = +$a;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = $4 * $3;
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $6;
 HEAPF32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 128;
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<3;
 $7 = (__Z7b2Alloci($6)|0);
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($1) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<3;
 _memset(($8|0),0,($11|0))|0;
 $12 = (($1) + 12|0);
 dest=$12+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = HEAP8[2928>>0]|0;
 $14 = $13&1;
 $15 = $14&1;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $j = 0;
 $i = 1;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<=(640);
  if (!($18)) {
   break;
  }
  $19 = $j;
  $20 = ($19|0)<(14);
  if (!($20)) {
   label = 5;
   break;
  }
  $21 = $i;
  $22 = $j;
  $23 = (2224 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<=($24|0);
  if ($25) {
   $26 = $j;
   $27 = $26&255;
   $28 = $i;
   $29 = (2280 + ($28)|0);
   HEAP8[$29>>0] = $27;
  } else {
   $30 = $j;
   $31 = (($30) + 1)|0;
   $j = $31;
   $32 = $j;
   $33 = $32&255;
   $34 = $i;
   $35 = (2280 + ($34)|0);
   HEAP8[$35>>0] = $33;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 5) {
  ___assert_fail((2936|0),(2960|0),73,(3048|0));
  // unreachable;
 }
 HEAP8[2928>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = (($1) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6<<3)|0);
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  __Z6b2FreePv($10);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = HEAP32[$1>>2]|0;
 __Z6b2FreePv($13);
 STACKTOP = sp;return;
}
function __ZN16b2BlockAllocator8AllocateEi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $block = 0, $block1 = 0, $blockCount = 0, $blockSize = 0, $chunk = 0, $i = 0, $index = 0, $last = 0, $next = 0, $oldChunks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $6 = $2;
 $7 = (0)<($6|0);
 if (!($7)) {
  ___assert_fail((3072|0),(2960|0),104,(3088|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>(640);
 if ($9) {
  $10 = $2;
  $11 = (__Z7b2Alloci($10)|0);
  $0 = $11;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $12 = $2;
 $13 = (2280 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $index = $15;
 $16 = $index;
 $17 = (0)<=($16|0);
 if (!($17)) {
  ___assert_fail((3104|0),(2960|0),112,(3088|0));
  // unreachable;
 }
 $18 = $index;
 $19 = ($18|0)<(14);
 if (!($19)) {
  ___assert_fail((3104|0),(2960|0),112,(3088|0));
  // unreachable;
 }
 $20 = $index;
 $21 = (($3) + 12|0);
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $index;
  $26 = (($3) + 12|0);
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $block = $28;
  $29 = $block;
  $30 = HEAP32[$29>>2]|0;
  $31 = $index;
  $32 = (($3) + 12|0);
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = $30;
  $34 = $block;
  $0 = $34;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $35 = (($3) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($3) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 if ($39) {
  $40 = HEAP32[$3>>2]|0;
  $oldChunks = $40;
  $41 = (($3) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 128)|0;
  HEAP32[$41>>2] = $43;
  $44 = (($3) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45<<3;
  $47 = (__Z7b2Alloci($46)|0);
  HEAP32[$3>>2] = $47;
  $48 = HEAP32[$3>>2]|0;
  $49 = $oldChunks;
  $50 = (($3) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51<<3;
  _memcpy(($48|0),($49|0),($52|0))|0;
  $53 = HEAP32[$3>>2]|0;
  $54 = (($3) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + ($55<<3)|0);
  _memset(($56|0),0,1024)|0;
  $57 = $oldChunks;
  __Z6b2FreePv($57);
 }
 $58 = HEAP32[$3>>2]|0;
 $59 = (($3) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + ($60<<3)|0);
 $chunk = $61;
 $62 = (__Z7b2Alloci(16384)|0);
 $63 = $chunk;
 $64 = (($63) + 4|0);
 HEAP32[$64>>2] = $62;
 $65 = $index;
 $66 = (2224 + ($65<<2)|0);
 $67 = HEAP32[$66>>2]|0;
 $blockSize = $67;
 $68 = $blockSize;
 $69 = $chunk;
 HEAP32[$69>>2] = $68;
 $70 = $blockSize;
 $71 = (16384 / ($70|0))&-1;
 $blockCount = $71;
 $72 = $blockCount;
 $73 = $blockSize;
 $74 = Math_imul($72, $73)|0;
 $75 = ($74|0)<=(16384);
 if (!($75)) {
  ___assert_fail((3144|0),(2960|0),140,(3088|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = $blockCount;
  $78 = (($77) - 1)|0;
  $79 = ($76|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = $chunk;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $blockSize;
  $84 = $i;
  $85 = Math_imul($83, $84)|0;
  $86 = (($82) + ($85)|0);
  $block1 = $86;
  $87 = $chunk;
  $88 = (($87) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $blockSize;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $93 = Math_imul($90, $92)|0;
  $94 = (($89) + ($93)|0);
  $next = $94;
  $95 = $next;
  $96 = $block1;
  HEAP32[$96>>2] = $95;
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 $99 = $chunk;
 $100 = (($99) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $blockSize;
 $103 = $blockCount;
 $104 = (($103) - 1)|0;
 $105 = Math_imul($102, $104)|0;
 $106 = (($101) + ($105)|0);
 $last = $106;
 $107 = $last;
 HEAP32[$107>>2] = 0;
 $108 = $chunk;
 $109 = (($108) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = HEAP32[$110>>2]|0;
 $112 = $index;
 $113 = (($3) + 12|0);
 $114 = (($113) + ($112<<2)|0);
 HEAP32[$114>>2] = $111;
 $115 = (($3) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 1)|0;
 HEAP32[$115>>2] = $117;
 $118 = $chunk;
 $119 = (($118) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $0 = $120;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function __ZN16b2BlockAllocator4FreeEPvi($this,$p,$size) {
 $this = $this|0;
 $p = $p|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $size;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = (0)<($6|0);
 if (!($7)) {
  ___assert_fail((3072|0),(2960|0),164,(3184|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>(640);
 if ($9) {
  $10 = $1;
  __Z6b2FreePv($10);
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = (2280 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $index = $14;
 $15 = $index;
 $16 = (0)<=($15|0);
 if (!($16)) {
  ___assert_fail((3104|0),(2960|0),173,(3184|0));
  // unreachable;
 }
 $17 = $index;
 $18 = ($17|0)<(14);
 if (!($18)) {
  ___assert_fail((3104|0),(2960|0),173,(3184|0));
  // unreachable;
 }
 $19 = $1;
 $block = $19;
 $20 = $index;
 $21 = (($3) + 12|0);
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $block;
 HEAP32[$24>>2] = $23;
 $25 = $block;
 $26 = $index;
 $27 = (($3) + 12|0);
 $28 = (($27) + ($26<<2)|0);
 HEAP32[$28>>2] = $25;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6b2Vec2C2Eff(3192,0.0,0.0);
 STACKTOP = sp;return;
}
function __Z7b2Alloci($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __Z6b2FreePv($mem) {
 $mem = $mem|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function __Z5b2LogPKcz($string,$varargs) {
 $string = $string|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $string;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZN16b2StackAllocatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 102400|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 102404|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 102408|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 102796|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN16b2StackAllocatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 102400|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  ___assert_fail((3208|0),(3224|0),33,(3312|0));
  // unreachable;
 }
 $5 = (($1) + 102796|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((3336|0),(3224|0),34,(3312|0));
  // unreachable;
 }
}
function __ZN16b2StackAllocator8AllocateEi($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = (($2) + 102796|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(32);
 if (!($5)) {
  ___assert_fail((3360|0),(3224|0),45,(3400|0));
  // unreachable;
 }
 $6 = (($2) + 102412|0);
 $7 = (($2) + 102796|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + (($8*12)|0)|0);
 $entry = $9;
 $10 = $1;
 $11 = $entry;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = (($2) + 102400|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($14) + ($15))|0;
 $17 = ($16|0)>(102400);
 if ($17) {
  $18 = $1;
  $19 = (__Z7b2Alloci($18)|0);
  $20 = $entry;
  HEAP32[$20>>2] = $19;
  $21 = $entry;
  $22 = (($21) + 8|0);
  HEAP8[$22>>0] = 1;
 } else {
  $23 = (($2) + 102400|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($2) + ($24)|0);
  $26 = $entry;
  HEAP32[$26>>2] = $25;
  $27 = $entry;
  $28 = (($27) + 8|0);
  HEAP8[$28>>0] = 0;
  $29 = $1;
  $30 = (($2) + 102400|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($29))|0;
  HEAP32[$30>>2] = $32;
 }
 $33 = $1;
 $34 = (($2) + 102404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($33))|0;
 HEAP32[$34>>2] = $36;
 $37 = (($2) + 102408|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($2) + 102404|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__Z5b2MaxIiET_S0_S0_($38,$40)|0);
 $42 = (($2) + 102408|0);
 HEAP32[$42>>2] = $41;
 $43 = (($2) + 102796|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $entry;
 $47 = HEAP32[$46>>2]|0;
 STACKTOP = sp;return ($47|0);
}
function __ZN16b2StackAllocator4FreeEPv($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = (($2) + 102796|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  ___assert_fail((3416|0),(3224|0),74,(3440|0));
  // unreachable;
 }
 $6 = (($2) + 102412|0);
 $7 = (($2) + 102796|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + (($8*12)|0)|0);
 $10 = (($9) + -12|0);
 $entry = $10;
 $11 = $1;
 $12 = $entry;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if (!($14)) {
  ___assert_fail((3448|0),(3224|0),82,(3440|0));
  // unreachable;
 }
 $15 = $entry;
 $16 = (($15) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  $19 = $1;
  __Z6b2FreePv($19);
 } else {
  $20 = $entry;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($2) + 102400|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($22))|0;
  HEAP32[$23>>2] = $25;
 }
 $26 = $entry;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($2) + 102404|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - ($28))|0;
 HEAP32[$29>>2] = $31;
 $32 = (($2) + 102796|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -1)|0;
 HEAP32[$32>>2] = $34;
 $1 = 0;
 STACKTOP = sp;return;
}
function __ZN7b2TimerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN7b2Timer5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK7b2Timer15GetMillisecondsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return +0;
}
function __ZN14b2CLBroadPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $broadPhaseSource = 0, $broadPhaseSourceLen = 0, $buffer = 0, $err = 0, $i = 0, $len = 0, $rayShapeIntersectionKernelNames = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer15 = sp + 80|0;
 $vararg_buffer13 = sp + 96|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer3 = sp + 56|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 64|0;
 $err = sp + 124|0;
 $broadPhaseSource = sp + 120|0;
 $broadPhaseSourceLen = sp + 116|0;
 $len = sp + 144|0;
 $buffer = sp + 152|0;
 $rayShapeIntersectionKernelNames = sp + 128|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[3200>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  $123 = (($1) + 96|0);
  HEAP32[$123>>2] = 0;
  $124 = (($1) + 100|0);
  HEAP32[$124>>2] = 0;
  $125 = (($1) + 104|0);
  HEAP32[$125>>2] = 0;
  $126 = (($1) + 120|0);
  HEAP32[$126>>2] = 0;
  $127 = (($1) + 116|0);
  HEAP32[$127>>2] = 0;
  $128 = (($1) + 108|0);
  HEAP32[$128>>2] = 0;
  $129 = (($1) + 112|0);
  HEAP32[$129>>2] = 0;
  STACKTOP = sp;return;
 }
 (_printf((3472|0),($vararg_buffer|0))|0);
 HEAP32[$broadPhaseSource>>2] = 0;
 HEAP32[$broadPhaseSourceLen>>2] = 0;
 __ZL6shrLogPKcz(3504,$vararg_buffer1);
 $4 = (__ZL15shrFindFilePathPKcPv(3536,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj($4,3576,$broadPhaseSourceLen)|0);
 HEAP32[$broadPhaseSource>>2] = $5;
 $6 = HEAP32[$broadPhaseSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(3592,$vararg_buffer3);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($broadPhaseSource|0),(0|0),($err|0))|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf((3664|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_clBuildProgram(($13|0),0,(0|0),(3712|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $14;
 $15 = HEAP32[$err>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  (_printf((3720|0),($vararg_buffer7|0))|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (__ZN10b2CLDevice8instanceEv()|0);
  $19 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($18)|0);
  (_clGetProgramBuildInfo(($17|0),($19|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer9>>2] = $buffer;
  (_printf((3768|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (_clCreateKernel(($20|0),(3776|0),($err|0))|0);
 $22 = (($1) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = (($1) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  (_printf((3792|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $26 = HEAP32[$err>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  (_printf((3792|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $28 = (__ZN10b2CLDevice8instanceEv()|0);
 $29 = (($1) + 4|0);
 $30 = (($1) + 48|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($28,$29,$30);
 $31 = HEAP32[$1>>2]|0;
 $32 = (_clCreateKernel(($31|0),(3840|0),($err|0))|0);
 $33 = (($1) + 8|0);
 HEAP32[$33>>2] = $32;
 $34 = (($1) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  (_printf((3792|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $37 = HEAP32[$err>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  (_printf((3792|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $39 = (__ZN10b2CLDevice8instanceEv()|0);
 $40 = (($1) + 8|0);
 $41 = (($1) + 52|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($39,$40,$41);
 $42 = HEAP32[$1>>2]|0;
 $43 = (_clCreateKernel(($42|0),(3856|0),($err|0))|0);
 $44 = (($1) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = (($1) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  (_printf((3792|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $48 = HEAP32[$err>>2]|0;
 $49 = ($48|0)!=(0);
 if ($49) {
  (_printf((3792|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $50 = (__ZN10b2CLDevice8instanceEv()|0);
 $51 = (($1) + 12|0);
 $52 = (($1) + 56|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($50,$51,$52);
 $53 = HEAP32[$1>>2]|0;
 $54 = (_clCreateKernel(($53|0),(3880|0),($err|0))|0);
 $55 = (($1) + 16|0);
 HEAP32[$55>>2] = $54;
 $56 = (($1) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  (_printf((3792|0),($vararg_buffer17|0))|0);
  _exit(1);
  // unreachable;
 }
 $59 = HEAP32[$err>>2]|0;
 $60 = ($59|0)!=(0);
 if ($60) {
  (_printf((3792|0),($vararg_buffer17|0))|0);
  _exit(1);
  // unreachable;
 }
 $61 = (__ZN10b2CLDevice8instanceEv()|0);
 $62 = (($1) + 16|0);
 $63 = (($1) + 60|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($61,$62,$63);
 $64 = HEAP32[$1>>2]|0;
 $65 = (_clCreateKernel(($64|0),(3896|0),($err|0))|0);
 $66 = (($1) + 20|0);
 HEAP32[$66>>2] = $65;
 $67 = (($1) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 if (!($69)) {
  (_printf((3792|0),($vararg_buffer19|0))|0);
  _exit(1);
  // unreachable;
 }
 $70 = HEAP32[$err>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  (_printf((3792|0),($vararg_buffer19|0))|0);
  _exit(1);
  // unreachable;
 }
 $72 = (__ZN10b2CLDevice8instanceEv()|0);
 $73 = (($1) + 20|0);
 $74 = (($1) + 64|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($72,$73,$74);
 $75 = HEAP32[$1>>2]|0;
 $76 = (_clCreateKernel(($75|0),(3912|0),($err|0))|0);
 $77 = (($1) + 24|0);
 HEAP32[$77>>2] = $76;
 $78 = (($1) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0|0);
 if (!($80)) {
  (_printf((3792|0),($vararg_buffer21|0))|0);
  _exit(1);
  // unreachable;
 }
 $81 = HEAP32[$err>>2]|0;
 $82 = ($81|0)!=(0);
 if ($82) {
  (_printf((3792|0),($vararg_buffer21|0))|0);
  _exit(1);
  // unreachable;
 }
 $83 = (__ZN10b2CLDevice8instanceEv()|0);
 $84 = (($1) + 24|0);
 $85 = (($1) + 68|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($83,$84,$85);
 $86 = HEAP32[$1>>2]|0;
 $87 = (_clCreateKernel(($86|0),(3936|0),($err|0))|0);
 $88 = (($1) + 28|0);
 HEAP32[$88>>2] = $87;
 $89 = (($1) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)!=(0|0);
 if (!($91)) {
  (_printf((3960|0),($vararg_buffer23|0))|0);
  _exit(1);
  // unreachable;
 }
 $92 = HEAP32[$err>>2]|0;
 $93 = ($92|0)!=(0);
 if ($93) {
  (_printf((3960|0),($vararg_buffer23|0))|0);
  _exit(1);
  // unreachable;
 }
 $94 = (__ZN10b2CLDevice8instanceEv()|0);
 $95 = (($1) + 28|0);
 $96 = (($1) + 72|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($94,$95,$96);
 ;HEAP32[$rayShapeIntersectionKernelNames+0>>2]=HEAP32[4120+0>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+4>>2]=HEAP32[4120+4>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+8>>2]=HEAP32[4120+8>>2]|0;HEAP32[$rayShapeIntersectionKernelNames+12>>2]=HEAP32[4120+12>>2]|0;
 $i = 0;
 while(1) {
  $97 = $i;
  $98 = ($97|0)<(4);
  if (!($98)) {
   label = 36;
   break;
  }
  $99 = HEAP32[$1>>2]|0;
  $100 = $i;
  $101 = (($rayShapeIntersectionKernelNames) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (_clCreateKernel(($99|0),($102|0),($err|0))|0);
  $104 = $i;
  $105 = (($1) + 32|0);
  $106 = (($105) + ($104<<2)|0);
  HEAP32[$106>>2] = $103;
  $107 = $i;
  $108 = (($1) + 32|0);
  $109 = (($108) + ($107<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)!=(0|0);
  if (!($111)) {
   label = 33;
   break;
  }
  $112 = HEAP32[$err>>2]|0;
  $113 = ($112|0)!=(0);
  if ($113) {
   label = 33;
   break;
  }
  $114 = (__ZN10b2CLDevice8instanceEv()|0);
  $115 = $i;
  $116 = (($1) + 32|0);
  $117 = (($116) + ($115<<2)|0);
  $118 = $i;
  $119 = (($1) + 76|0);
  $120 = (($119) + ($118<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($114,$117,$120);
  $121 = $i;
  $122 = (($121) + 1)|0;
  $i = $122;
 }
 if ((label|0) == 33) {
  (_printf((4136|0),($vararg_buffer25|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 36) {
  $123 = (($1) + 96|0);
  HEAP32[$123>>2] = 0;
  $124 = (($1) + 100|0);
  HEAP32[$124>>2] = 0;
  $125 = (($1) + 104|0);
  HEAP32[$125>>2] = 0;
  $126 = (($1) + 120|0);
  HEAP32[$126>>2] = 0;
  $127 = (($1) + 116|0);
  HEAP32[$127>>2] = 0;
  $128 = (($1) + 108|0);
  HEAP32[$128>>2] = 0;
  $129 = (($1) + 112|0);
  HEAP32[$129>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN14b2CLBroadPhase16CreateGPUBuffersEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $exp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exp = sp;
 $0 = $this;
 $1 = $shape_num;
 $2 = $0;
 $3 = (($2) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = (($2) + 108|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = (__ZN10b2CLDevice8instanceEv()|0);
   $11 = (($2) + 108|0);
   $12 = HEAP32[$11>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
  }
  $13 = (__ZN10b2CLDevice8instanceEv()|0);
  $14 = $1;
  $15 = ($14*20)|0;
  $16 = (__ZN10b2CLDevice13allocateArrayEjb($13,$15,0)|0);
  $17 = (($2) + 108|0);
  HEAP32[$17>>2] = $16;
  $18 = (($2) + 112|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = (__ZN10b2CLDevice8instanceEv()|0);
   $22 = (($2) + 112|0);
   $23 = HEAP32[$22>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($21,$23);
  }
  $24 = (__ZN10b2CLDevice8instanceEv()|0);
  $25 = $1;
  $26 = (($25) + 1)|0;
  $27 = $26<<4;
  $28 = (__ZN10b2CLDevice13allocateArrayEjb($24,$27,0)|0);
  $29 = (($2) + 112|0);
  HEAP32[$29>>2] = $28;
  $30 = $1;
  $31 = (($2) + 100|0);
  HEAP32[$31>>2] = $30;
 }
 $32 = $1;
 $33 = ($32|0)<(512);
 if ($33) {
  $34 = (($2) + 92|0);
  HEAP32[$34>>2] = 512;
 } else {
  $35 = $1;
  $36 = (+($35|0));
  $37 = $36;
  (+_frexp($37,$exp));
  $38 = HEAP32[$exp>>2]|0;
  $39 = (($38) - 1)|0;
  $40 = 1 << $39;
  $41 = (($2) + 92|0);
  HEAP32[$41>>2] = $40;
  $42 = (($2) + 92|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = ($43|0)<($44|0);
  if ($45) {
   $46 = (($2) + 92|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 << 1;
   HEAP32[$46>>2] = $48;
  }
 }
 $49 = (($2) + 96|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($2) + 92|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)<($52|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = (($2) + 116|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = (__ZN10b2CLDevice8instanceEv()|0);
  $58 = (($2) + 116|0);
  $59 = HEAP32[$58>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($57,$59);
 }
 $60 = (__ZN10b2CLDevice8instanceEv()|0);
 $61 = (($2) + 92|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62<<2;
 $64 = (__ZN10b2CLDevice13allocateArrayEjb($60,$63,0)|0);
 $65 = (($2) + 116|0);
 HEAP32[$65>>2] = $64;
 $66 = (($2) + 120|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = (__ZN10b2CLDevice8instanceEv()|0);
  $70 = (($2) + 120|0);
  $71 = HEAP32[$70>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($69,$71);
 }
 $72 = (__ZN10b2CLDevice8instanceEv()|0);
 $73 = (($2) + 92|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74<<2;
 $76 = (__ZN10b2CLDevice13allocateArrayEjb($72,$75,0)|0);
 $77 = (($2) + 120|0);
 HEAP32[$77>>2] = $76;
 $78 = (($2) + 92|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($2) + 96|0);
 HEAP32[$80>>2] = $79;
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase12ComputeAABBsEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $global = sp + 32|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $5 = (($2) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (__ZN14b2CLCommonData8instanceEv()|0);
 $10 = (($9) + 56|0);
 $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
 $12 = $err;
 $13 = $12 | $11;
 $err = $13;
 $14 = (($2) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $a;
 $17 = (($16) + 1)|0;
 $a = $17;
 $18 = (__ZN14b2CLCommonData8instanceEv()|0);
 $19 = (($18) + 72|0);
 $20 = (_clSetKernelArg(($15|0),($16|0),4,($19|0))|0);
 $21 = $err;
 $22 = $21 | $20;
 $err = $22;
 $23 = (($2) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $a;
 $26 = (($25) + 1)|0;
 $a = $26;
 $27 = (__ZN14b2CLCommonData8instanceEv()|0);
 $28 = (($27) + 64|0);
 $29 = (_clSetKernelArg(($24|0),($25|0),4,($28|0))|0);
 $30 = $err;
 $31 = $30 | $29;
 $err = $31;
 $32 = (($2) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $a;
 $35 = (($34) + 1)|0;
 $a = $35;
 $36 = (($2) + 108|0);
 $37 = (_clSetKernelArg(($33|0),($34|0),4,($36|0))|0);
 $38 = $err;
 $39 = $38 | $37;
 $err = $39;
 $40 = (($2) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $a;
 $43 = (($42) + 1)|0;
 $a = $43;
 $44 = (__ZN14b2CLCommonData8instanceEv()|0);
 $45 = (($44) + 60|0);
 $46 = (_clSetKernelArg(($41|0),($42|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = (($2) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = (_clSetKernelArg(($50|0),($51|0),4,($1|0))|0);
 $54 = $err;
 $55 = $54 | $53;
 $err = $55;
 $56 = $err;
 $57 = ($56|0)!=(0);
 if ($57) {
  HEAP32[$vararg_buffer>>2] = 4248;
  (_printf((4200|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $58 = (($2) + 92|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($2) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + ($61))|0;
 $63 = (($62) - 1)|0;
 $64 = (($2) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63>>>0) / ($65>>>0))&-1;
 $group_num = $66;
 $67 = $group_num;
 $68 = (($2) + 48|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = Math_imul($67, $69)|0;
 HEAP32[$global>>2] = $70;
 $err = 0;
 $71 = (__ZN10b2CLDevice8instanceEv()|0);
 $72 = (__ZNK10b2CLDevice15GetCommandQueueEv($71)|0);
 $73 = (($2) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($2) + 48|0);
 $76 = (_clEnqueueNDRangeKernel(($72|0),($74|0),1,(0|0),($global|0),($75|0),0,(0|0),(0|0))|0);
 $77 = $err;
 $78 = $77 | $76;
 $err = $78;
 $79 = $err;
 $80 = ($79|0)!=(0);
 if (!($80)) {
  STACKTOP = sp;return;
 }
 (_printf((4272|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase18PrepareSumVarianceEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $$arith = 0, $$arith4 = 0, $$overflow = 0, $$overflow5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0;
 var $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $i = 0, $s = 0, $s2 = 0;
 var $scanResult = 0, $sumList = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 16|0;
 $global = sp + 40|0;
 $s = sp + 32|0;
 $s2 = sp + 48|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $v = sp + 88|0;
 $4 = sp + 96|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $5 = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $8 = (($5) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $a;
 $11 = (($10) + 1)|0;
 $a = $11;
 $12 = (($5) + 108|0);
 $13 = (_clSetKernelArg(($9|0),($10|0),4,($12|0))|0);
 $14 = $err;
 $15 = $14 | $13;
 $err = $15;
 $16 = (($5) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $a;
 $19 = (($18) + 1)|0;
 $a = $19;
 $20 = (($5) + 112|0);
 $21 = (_clSetKernelArg(($17|0),($18|0),4,($20|0))|0);
 $22 = $err;
 $23 = $22 | $21;
 $err = $23;
 $24 = (($5) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $a;
 $27 = (($26) + 1)|0;
 $a = $27;
 $28 = (_clSetKernelArg(($25|0),($26|0),4,($1|0))|0);
 $29 = $err;
 $30 = $29 | $28;
 $err = $30;
 $31 = $err;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[$vararg_buffer>>2] = 4328;
  (_printf((4200|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $33 = (($5) + 92|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($5) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + ($36))|0;
 $38 = (($37) - 1)|0;
 $39 = (($5) + 56|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38>>>0) / ($40>>>0))&-1;
 $group_num = $41;
 $42 = $group_num;
 $43 = (($5) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = Math_imul($42, $44)|0;
 HEAP32[$global>>2] = $45;
 $err = 0;
 $46 = (__ZN10b2CLDevice8instanceEv()|0);
 $47 = (__ZNK10b2CLDevice15GetCommandQueueEv($46)|0);
 $48 = (($5) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($5) + 56|0);
 $51 = (_clEnqueueNDRangeKernel(($47|0),($49|0),1,(0|0),($global|0),($50|0),0,(0|0),(0|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = $err;
 $55 = ($54|0)!=(0);
 if ($55) {
  (_printf((4272|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 }
 $56 = (($5) + 104|0);
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$1>>2]|0;
 $58 = ($57|0)>(1);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 __ZN6b2Vec2C2Ev($s);
 __ZN6b2Vec2C2Ev($s2);
 $59 = HEAP32[$1>>2]|0;
 $60 = $59<<2;
 $$arith4 = $60<<2;
 $$overflow5 = ($60>>>0)>(1073741823);
 $61 = $$overflow5 ? -1 : $$arith4;
 $62 = (__Znaj($61)|0);
 $sumList = $62;
 $63 = HEAP32[$1>>2]|0;
 $64 = (($63) + 1)|0;
 $65 = $64<<2;
 $$arith = $65<<2;
 $$overflow = ($65>>>0)>(1073741823);
 $66 = $$overflow ? -1 : $$arith;
 $67 = (__Znaj($66)|0);
 $scanResult = $67;
 $68 = (__ZN10b2CLDevice8instanceEv()|0);
 $69 = $sumList;
 $70 = (($5) + 112|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$1>>2]|0;
 $73 = $72<<4;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($68,$69,$71,0,$73,1);
 $74 = $scanResult;
 $75 = (($74) + 12|0);
 HEAPF32[$75>>2] = 0.0;
 $76 = $scanResult;
 $77 = (($76) + 8|0);
 HEAPF32[$77>>2] = 0.0;
 $78 = $scanResult;
 $79 = (($78) + 4|0);
 HEAPF32[$79>>2] = 0.0;
 $80 = $scanResult;
 HEAPF32[$80>>2] = 0.0;
 $i = 1;
 while(1) {
  $81 = $i;
  $82 = HEAP32[$1>>2]|0;
  $83 = (($82) + 1)|0;
  $84 = ($81|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = $i;
  $86 = (($85) - 1)|0;
  $87 = $86<<2;
  $88 = $scanResult;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $i;
  $92 = (($91) - 1)|0;
  $93 = $92<<2;
  $94 = $sumList;
  $95 = (($94) + ($93<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $90 + $96;
  $98 = $i;
  $99 = $98<<2;
  $100 = $scanResult;
  $101 = (($100) + ($99<<2)|0);
  HEAPF32[$101>>2] = $97;
  $102 = $i;
  $103 = (($102) - 1)|0;
  $104 = $103<<2;
  $105 = (($104) + 1)|0;
  $106 = $scanResult;
  $107 = (($106) + ($105<<2)|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $i;
  $110 = (($109) - 1)|0;
  $111 = $110<<2;
  $112 = (($111) + 1)|0;
  $113 = $sumList;
  $114 = (($113) + ($112<<2)|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $108 + $115;
  $117 = $i;
  $118 = $117<<2;
  $119 = (($118) + 1)|0;
  $120 = $scanResult;
  $121 = (($120) + ($119<<2)|0);
  HEAPF32[$121>>2] = $116;
  $122 = $i;
  $123 = (($122) - 1)|0;
  $124 = $123<<2;
  $125 = (($124) + 2)|0;
  $126 = $scanResult;
  $127 = (($126) + ($125<<2)|0);
  $128 = +HEAPF32[$127>>2];
  $129 = $i;
  $130 = (($129) - 1)|0;
  $131 = $130<<2;
  $132 = (($131) + 2)|0;
  $133 = $sumList;
  $134 = (($133) + ($132<<2)|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $128 + $135;
  $137 = $i;
  $138 = $137<<2;
  $139 = (($138) + 2)|0;
  $140 = $scanResult;
  $141 = (($140) + ($139<<2)|0);
  HEAPF32[$141>>2] = $136;
  $142 = $i;
  $143 = (($142) - 1)|0;
  $144 = $143<<2;
  $145 = (($144) + 3)|0;
  $146 = $scanResult;
  $147 = (($146) + ($145<<2)|0);
  $148 = +HEAPF32[$147>>2];
  $149 = $i;
  $150 = (($149) - 1)|0;
  $151 = $150<<2;
  $152 = (($151) + 3)|0;
  $153 = $sumList;
  $154 = (($153) + ($152<<2)|0);
  $155 = +HEAPF32[$154>>2];
  $156 = $148 + $155;
  $157 = $i;
  $158 = $157<<2;
  $159 = (($158) + 3)|0;
  $160 = $scanResult;
  $161 = (($160) + ($159<<2)|0);
  HEAPF32[$161>>2] = $156;
  $162 = $i;
  $163 = (($162) + 1)|0;
  $i = $163;
 }
 $164 = HEAP32[$1>>2]|0;
 $165 = $164<<2;
 $166 = $scanResult;
 $167 = (($166) + ($165<<2)|0);
 $168 = +HEAPF32[$167>>2];
 $169 = HEAP32[$1>>2]|0;
 $170 = $169<<2;
 $171 = (($170) + 1)|0;
 $172 = $scanResult;
 $173 = (($172) + ($171<<2)|0);
 $174 = +HEAPF32[$173>>2];
 __ZN6b2Vec2C2Eff($2,$168,$174);
 ;HEAP32[$s+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$s+4>>2]=HEAP32[$2+4>>2]|0;
 $175 = HEAP32[$1>>2]|0;
 $176 = $175<<2;
 $177 = (($176) + 2)|0;
 $178 = $scanResult;
 $179 = (($178) + ($177<<2)|0);
 $180 = +HEAPF32[$179>>2];
 $181 = HEAP32[$1>>2]|0;
 $182 = $181<<2;
 $183 = (($182) + 3)|0;
 $184 = $scanResult;
 $185 = (($184) + ($183<<2)|0);
 $186 = +HEAPF32[$185>>2];
 __ZN6b2Vec2C2Eff($3,$180,$186);
 ;HEAP32[$s2+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$s2+4>>2]=HEAP32[$3+4>>2]|0;
 $187 = $sumList;
 $188 = ($187|0)==(0|0);
 if (!($188)) {
  __ZdaPv($187);
 }
 $189 = $scanResult;
 $190 = ($189|0)==(0|0);
 if (!($190)) {
  __ZdaPv($189);
 }
 __ZN6b2Vec2C2Ev($v);
 $191 = +HEAPF32[$s>>2];
 $192 = +HEAPF32[$s>>2];
 $193 = $191 * $192;
 HEAPF32[$v>>2] = $193;
 $194 = (($s) + 4|0);
 $195 = +HEAPF32[$194>>2];
 $196 = (($s) + 4|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $195 * $197;
 $199 = (($v) + 4|0);
 HEAPF32[$199>>2] = $198;
 $200 = HEAP32[$1>>2]|0;
 $201 = (+($200|0));
 $202 = 1.0 / $201;
 __ZN6b2Vec2mLEf($v,$202);
 __ZmiRK6b2Vec2S1_($4,$s2,$v);
 ;HEAP32[$v+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$v+4>>2]=HEAP32[$4+4>>2]|0;
 $203 = (__ZN6b2Vec2clEi($v,1)|0);
 $204 = +HEAPF32[$203>>2];
 $205 = (__ZN6b2Vec2clEi($v,0)|0);
 $206 = +HEAPF32[$205>>2];
 $207 = $204 > $206;
 if ($207) {
  $208 = (($5) + 104|0);
  HEAP32[$208>>2] = 1;
 }
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase15InitSortingKeysEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a = 0;
 var $axis = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zeroBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $axis = sp + 12|0;
 $global = sp + 40|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($2) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $$arith = $6<<2;
 $$overflow = ($6>>>0)>(1073741823);
 $7 = $$overflow ? -1 : $$arith;
 $8 = (__Znaj($7)|0);
 $zeroBuffer = $8;
 $9 = $zeroBuffer;
 $10 = (($2) + 92|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 _memset(($9|0),0,($12|0))|0;
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = (($2) + 116|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $zeroBuffer;
 $17 = (($2) + 92|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($13,$15,$16,0,$19,1);
 $20 = $zeroBuffer;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  __ZdaPv($20);
 }
 $22 = (($2) + 104|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$axis>>2] = $23;
 $a = 0;
 $err = 0;
 $24 = (($2) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $a;
 $27 = (($26) + 1)|0;
 $a = $27;
 $28 = (($2) + 108|0);
 $29 = (_clSetKernelArg(($25|0),($26|0),4,($28|0))|0);
 $30 = $err;
 $31 = $30 | $29;
 $err = $31;
 $32 = (($2) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $a;
 $35 = (($34) + 1)|0;
 $a = $35;
 $36 = (($2) + 116|0);
 $37 = (_clSetKernelArg(($33|0),($34|0),4,($36|0))|0);
 $38 = $err;
 $39 = $38 | $37;
 $err = $39;
 $40 = (($2) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $a;
 $43 = (($42) + 1)|0;
 $a = $43;
 $44 = (($2) + 120|0);
 $45 = (_clSetKernelArg(($41|0),($42|0),4,($44|0))|0);
 $46 = $err;
 $47 = $46 | $45;
 $err = $47;
 $48 = (($2) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $a;
 $51 = (($50) + 1)|0;
 $a = $51;
 $52 = (_clSetKernelArg(($49|0),($50|0),4,($1|0))|0);
 $53 = $err;
 $54 = $53 | $52;
 $err = $54;
 $55 = (($2) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $a;
 $58 = (($57) + 1)|0;
 $a = $58;
 $59 = (_clSetKernelArg(($56|0),($57|0),4,($axis|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = (($2) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = (($2) + 92|0);
 $67 = (_clSetKernelArg(($63|0),($64|0),4,($66|0))|0);
 $68 = $err;
 $69 = $68 | $67;
 $err = $69;
 $70 = $err;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = (($2) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$vararg_buffer>>2] = $73;
  (_printf((4200|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $74 = (($2) + 92|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($2) + 60|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $79 = (($78) - 1)|0;
 $80 = (($2) + 60|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79>>>0) / ($81>>>0))&-1;
 $group_num = $82;
 $83 = $group_num;
 $84 = (($2) + 60|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = Math_imul($83, $85)|0;
 HEAP32[$global>>2] = $86;
 $err = 0;
 $87 = (__ZN10b2CLDevice8instanceEv()|0);
 $88 = (__ZNK10b2CLDevice15GetCommandQueueEv($87)|0);
 $89 = (($2) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($2) + 60|0);
 $92 = (_clEnqueueNDRangeKernel(($88|0),($90|0),1,(0|0),($global|0),($91|0),0,(0|0),(0|0))|0);
 $93 = $err;
 $94 = $93 | $92;
 $err = $94;
 $95 = $err;
 $96 = ($95|0)!=(0);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 (_printf((4272|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase9SortAABBsEi($this,$shape_num) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shape_num;
 $2 = $0;
 $3 = (__ZN8b2CLSort8instanceEv()|0);
 $4 = (($2) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($3,$5,$7,$9,0,0);
 STACKTOP = sp;return;
}
function __ZN14b2CLBroadPhase12ComputePairsEiPiS0_PK7b2World($this,$shape_num,$pTotalContactCount,$pContactCounts,$pWorld) {
 $this = $this|0;
 $shape_num = $shape_num|0;
 $pTotalContactCount = $pTotalContactCount|0;
 $pContactCounts = $pContactCounts|0;
 $pWorld = $pWorld|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $axis = 0, $err = 0, $fill_num = 0, $fill_nums = 0, $global = 0, $group_num = 0, $maxPairs = 0, $pairTotalCount = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 $axis = sp + 28|0;
 $maxPairs = sp + 36|0;
 $fill_num = sp + 40|0;
 $global = sp + 60|0;
 $pairTotalCount = sp + 64|0;
 $0 = $this;
 HEAP32[$1>>2] = $shape_num;
 $2 = $pTotalContactCount;
 $3 = $pContactCounts;
 $4 = $pWorld;
 $5 = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($5) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$axis>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10*10)|0;
 HEAP32[$maxPairs>>2] = $11;
 HEAP32[$fill_num>>2] = 0;
 $12 = (__ZN10b2CLDevice8instanceEv()|0);
 $13 = (__ZN14b2CLCommonData8instanceEv()|0);
 $14 = (($13) + 96|0);
 $15 = HEAP32[$14>>2]|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($12,$15,$fill_num,0,4,1);
 $16 = (__Znaj(20)|0);
 $fill_nums = $16;
 $17 = $fill_nums;
 ;HEAP32[$17+0>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;
 $18 = (__ZN10b2CLDevice8instanceEv()|0);
 $19 = (__ZN14b2CLCommonData8instanceEv()|0);
 $20 = (($19) + 92|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $fill_nums;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($18,$21,$22,0,20,1);
 $23 = $fill_nums;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  __ZdaPv($23);
 }
 $a = 0;
 $err = 0;
 $25 = (($5) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $a;
 $28 = (($27) + 1)|0;
 $a = $28;
 $29 = (($5) + 108|0);
 $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
 $31 = $err;
 $32 = $31 | $30;
 $err = $32;
 $33 = (($5) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = (__ZN14b2CLCommonData8instanceEv()|0);
 $38 = (($37) + 72|0);
 $39 = (_clSetKernelArg(($34|0),($35|0),4,($38|0))|0);
 $40 = $err;
 $41 = $40 | $39;
 $err = $41;
 $42 = (($5) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $a;
 $45 = (($44) + 1)|0;
 $a = $45;
 $46 = (__ZN14b2CLCommonData8instanceEv()|0);
 $47 = (($46) + 56|0);
 $48 = (_clSetKernelArg(($43|0),($44|0),4,($47|0))|0);
 $49 = $err;
 $50 = $49 | $48;
 $err = $50;
 $51 = (($5) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $a;
 $54 = (($53) + 1)|0;
 $a = $54;
 $55 = (__ZN14b2CLCommonData8instanceEv()|0);
 $56 = (($55) + 80|0);
 $57 = (_clSetKernelArg(($52|0),($53|0),4,($56|0))|0);
 $58 = $err;
 $59 = $58 | $57;
 $err = $59;
 $60 = (($5) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $a;
 $63 = (($62) + 1)|0;
 $a = $63;
 $64 = (__ZN14b2CLCommonData8instanceEv()|0);
 $65 = (($64) + 84|0);
 $66 = (_clSetKernelArg(($61|0),($62|0),4,($65|0))|0);
 $67 = $err;
 $68 = $67 | $66;
 $err = $68;
 $69 = (($5) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $a;
 $72 = (($71) + 1)|0;
 $a = $72;
 $73 = (($5) + 120|0);
 $74 = (_clSetKernelArg(($70|0),($71|0),4,($73|0))|0);
 $75 = $err;
 $76 = $75 | $74;
 $err = $76;
 $77 = (($5) + 20|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $a;
 $80 = (($79) + 1)|0;
 $a = $80;
 $81 = (__ZN14b2CLCommonData8instanceEv()|0);
 $82 = (($81) + 60|0);
 $83 = (_clSetKernelArg(($78|0),($79|0),4,($82|0))|0);
 $84 = $err;
 $85 = $84 | $83;
 $err = $85;
 $86 = (($5) + 20|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $a;
 $89 = (($88) + 1)|0;
 $a = $89;
 $90 = (__ZN14b2CLCommonData8instanceEv()|0);
 $91 = (($90) + 92|0);
 $92 = (_clSetKernelArg(($87|0),($88|0),4,($91|0))|0);
 $93 = $err;
 $94 = $93 | $92;
 $err = $94;
 $95 = (($5) + 20|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $a;
 $98 = (($97) + 1)|0;
 $a = $98;
 $99 = (__ZN14b2CLCommonData8instanceEv()|0);
 $100 = (($99) + 96|0);
 $101 = (_clSetKernelArg(($96|0),($97|0),4,($100|0))|0);
 $102 = $err;
 $103 = $102 | $101;
 $err = $103;
 $104 = (($5) + 20|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $a;
 $107 = (($106) + 1)|0;
 $a = $107;
 $108 = (_clSetKernelArg(($105|0),($106|0),4,($1|0))|0);
 $109 = $err;
 $110 = $109 | $108;
 $err = $110;
 $111 = (($5) + 20|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $a;
 $114 = (($113) + 1)|0;
 $a = $114;
 $115 = (_clSetKernelArg(($112|0),($113|0),4,($axis|0))|0);
 $116 = $err;
 $117 = $116 | $115;
 $err = $117;
 $118 = (($5) + 20|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $a;
 $121 = (($120) + 1)|0;
 $a = $121;
 $122 = (_clSetKernelArg(($119|0),($120|0),4,($maxPairs|0))|0);
 $123 = $err;
 $124 = $123 | $122;
 $err = $124;
 $125 = $err;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = (($5) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  HEAP32[$vararg_buffer>>2] = $128;
  (_printf((4200|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $129 = HEAP32[$1>>2]|0;
 $130 = (($5) + 64|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($129) + ($131))|0;
 $133 = (($132) - 1)|0;
 $134 = (($5) + 64|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133>>>0) / ($135>>>0))&-1;
 $group_num = $136;
 $137 = $group_num;
 $138 = (($5) + 64|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = Math_imul($137, $139)|0;
 HEAP32[$global>>2] = $140;
 $err = 0;
 $141 = (__ZN10b2CLDevice8instanceEv()|0);
 $142 = (__ZNK10b2CLDevice15GetCommandQueueEv($141)|0);
 $143 = (($5) + 20|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($5) + 64|0);
 $146 = (_clEnqueueNDRangeKernel(($142|0),($144|0),1,(0|0),($global|0),($145|0),0,(0|0),(0|0))|0);
 $147 = $err;
 $148 = $147 | $146;
 $err = $148;
 $149 = $err;
 $150 = ($149|0)!=(0);
 if ($150) {
  (_printf((4360|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 } else {
  $151 = (__ZN10b2CLDevice8instanceEv()|0);
  $152 = (__ZN14b2CLCommonData8instanceEv()|0);
  $153 = (($152) + 96|0);
  $154 = HEAP32[$153>>2]|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($151,$pairTotalCount,$154,0,4,1);
  $155 = HEAP32[$pairTotalCount>>2]|0;
  $156 = $2;
  HEAP32[$156>>2] = $155;
  $157 = (__ZN10b2CLDevice8instanceEv()|0);
  $158 = $3;
  $159 = (__ZN14b2CLCommonData8instanceEv()|0);
  $160 = (($159) + 92|0);
  $161 = HEAP32[$160>>2]|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($157,$158,$161,0,20,1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(426,($3|0),(5512|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 108|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(20,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (5632 + 8|0);
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(428,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   $1 = $7;
   $2 = $8;
   $9 = $1;
   (___cxa_begin_catch(($9|0))|0);
   __THREW__ = 0;
   invoke_v(429);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    break;
   }
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __THREW__ = 0;
   invoke_vi(96,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   }
   $28 = $1;
   $29 = $2;
   ___resumeException($28|0);
   // unreachable;
  } else {
  }
 } while(0);
 $12 = (($3) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = (($3) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $22 = (($3) + 97|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $25 = (($3) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  __ZdaPv($26);
 }
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(28,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,32024)|0);
 $18 = (($11) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = (($11) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = (($11) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = (($11) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = (($11) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = (($40) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = (($40) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = (($40) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = (($47) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = (($47) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = (($47) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = (($11) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 if ($55) {
  $56 = (($11) + 96|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&1;
  if ($58) {
   $59 = (($11) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = (($11) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = (($11) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = (($11) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($11) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = (($11) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($11) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = (($11) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = (($11) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = (($11) + 97|0);
  HEAP8[$75>>0] = 0;
 } else {
  $76 = (($11) + 96|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&1;
  if ($78) {
   label = 11;
  } else {
   $79 = (($11) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($11) + 44|0);
   $82 = ($80|0)!=($81|0);
   if ($82) {
    $83 = (($11) + 52|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($11) + 60|0);
    HEAP32[$85>>2] = $84;
    $86 = (($11) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($11) + 56|0);
    HEAP32[$88>>2] = $87;
    $89 = (($11) + 97|0);
    HEAP8[$89>>0] = 0;
    $90 = (($11) + 52|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (__Znaj($91)|0);
    $93 = (($11) + 32|0);
    HEAP32[$93>>2] = $92;
    $94 = (($11) + 96|0);
    HEAP8[$94>>0] = 1;
   } else {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   $95 = (($11) + 52|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($11) + 60|0);
   HEAP32[$97>>2] = $96;
   $98 = (($11) + 60|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (__Znaj($99)|0);
   $101 = (($11) + 56|0);
   HEAP32[$101>>2] = $100;
   $102 = (($11) + 97|0);
   HEAP8[$102>>0] = 1;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 20|0;
 $19 = sp + 32|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = (($21) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = (($21) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = (($21) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = (($28) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = (($28) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = (($28) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = (($20) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = (($20) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = (($20) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = (($20) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = (($20) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = (($20) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 if ($50) {
  $51 = (($20) + 98|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&1;
  if ($53) {
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $17;
    $57 = (($20) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = (($20) + 96|0);
    HEAP8[$58>>0] = 0;
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
  if ((label|0) == 13) {
   $59 = (($20) + 52|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__Znaj($60)|0);
   $62 = (($20) + 32|0);
   HEAP32[$62>>2] = $61;
   $63 = (($20) + 96|0);
   HEAP8[$63>>0] = 1;
  }
 } else {
  $64 = (($20) + 44|0);
  $65 = (($20) + 32|0);
  HEAP32[$65>>2] = $64;
  $66 = (($20) + 52|0);
  HEAP32[$66>>2] = 8;
  $67 = (($20) + 96|0);
  HEAP8[$67>>0] = 0;
 }
 $68 = (($20) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = (($20) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = (($20) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = (($20) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 if ($79) {
  $80 = $7;
  $83 = $80;
 } else {
  $81 = $6;
  $83 = $81;
 }
 $82 = HEAP32[$83>>2]|0;
 $84 = (($20) + 60|0);
 HEAP32[$84>>2] = $82;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = (($20) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = (($20) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = (($20) + 97|0);
   HEAP8[$92>>0] = 0;
  } else {
   label = 23;
  }
 } else {
  label = 23;
 }
 if ((label|0) == 23) {
  $93 = (($20) + 60|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__Znaj($94)|0);
  $96 = (($20) + 56|0);
  HEAP32[$96>>2] = $95;
  $97 = (($20) + 97|0);
  HEAP8[$97>>0] = 1;
 }
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 40|0;
 $6 = sp + 8|0;
 $8 = sp;
 $10 = sp + 48|0;
 $12 = sp + 56|0;
 $15 = sp + 16|0;
 $__r = sp + 24|0;
 $18 = sp + 112|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = (($23) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(40672|0),(399|0));
  // unreachable;
 }
 $28 = (($23) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = (($23) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 do {
  if (!($37)) {
   $38 = $__width;
   $39 = ($38|0)<=(0);
   if ($39) {
    $40 = $15;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = ($42|0)!=(0);
    $47 = ($45|0)!=(0);
    $48 = $46 | $47;
    if ($48) {
     break;
    }
   }
   $49 = HEAP32[$23>>2]|0;
   $50 = (($49) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    if ((($70|0) == 2)) {
     $__whence = 2;
    } else if ((($70|0) == 1)) {
     $__whence = 1;
    } else if ((($70|0) == 0)) {
     $__whence = 0;
    } else {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75+0>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = (($75) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    $87 = (($23) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (_fseeko(($88|0),($103|0),($102|0))|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110+0>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = (($110) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = (($23) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_ftello(($123|0))|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131+0>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = (($131) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = (($23) + 72|0);
     ;HEAP32[$18+0>>2]=HEAP32[$143+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10+0>>0]=HEAP8[$18+0>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result+0>>2]=HEAP32[$__r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = (($58) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 24|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = (($10) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = (($10) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = (($37) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (_fseeko(($36|0),($41|0),0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51+0>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = (($51) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = (($10) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__sp+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = (($23) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 124|0;
 $__c = sp;
 $__state = sp + 96|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = (($27) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(40672|0),(399|0));
  // unreachable;
 }
 $35 = (($27) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 do {
  if ($38) {
   $24 = $27;
   $39 = $24;
   $40 = (($39) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $14 = $27;
   $42 = $14;
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)!=($44|0);
   do {
    if ($45) {
     $46 = HEAP32[$27>>2]|0;
     $47 = (($46) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $50 = (FUNCTION_TABLE_iii[$48 & 1023]($27,$49)|0);
     $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $52 = ($50|0)==($51|0);
     if (!($52)) {
      break;
     }
     $25 = -1;
     $245 = $25;
     STACKTOP = sp;return ($245|0);
    }
   } while(0);
   while(1) {
    $53 = (($27) + 68|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($27) + 72|0);
    $56 = (($27) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($27) + 32|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($27) + 52|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + ($61)|0);
    $2 = $54;
    $3 = $55;
    $4 = $57;
    $5 = $62;
    $6 = $__extbe;
    $63 = $2;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $3;
    $68 = $4;
    $69 = $5;
    $70 = $6;
    $71 = (FUNCTION_TABLE_iiiiii[$66 & 1023]($63,$67,$68,$69,$70)|0);
    $__r = $71;
    $72 = HEAP32[$__extbe>>2]|0;
    $73 = (($27) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $72;
    $76 = $74;
    $77 = (($75) - ($76))|0;
    $__nmemb = $77;
    $78 = (($27) + 32|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $__nmemb;
    $81 = (($27) + 64|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_fwrite(($79|0),1,($80|0),($82|0))|0);
    $84 = $__nmemb;
    $85 = ($83|0)!=($84|0);
    if ($85) {
     label = 12;
     break;
    }
    $86 = $__r;
    $87 = ($86|0)==(1);
    if (!($87)) {
     break;
    }
   }
   if ((label|0) == 12) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $88 = $__r;
   $89 = ($88|0)==(2);
   if ($89) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $90 = (($27) + 64|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (_fflush(($91|0))|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    break;
   }
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  } else {
   $94 = (($27) + 92|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 8;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = (($27) + 80|0);
    ;HEAP32[$__state+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
    $__update_st = 0;
    $99 = (($27) + 98|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&1;
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = (($102) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = (($105) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = (($27) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = (($27) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($27) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = (($140) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = (($143) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
     } else {
      $10 = $27;
      $164 = $10;
      $165 = (($164) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $11 = $27;
      $167 = $11;
      $168 = (($167) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($166|0)!=($169|0);
      if ($170) {
       $171 = (($27) + 68|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (($27) + 32|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($27) + 36|0);
       $176 = HEAP32[$175>>2]|0;
       $12 = $27;
       $177 = $12;
       $178 = (($177) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $13 = $27;
       $180 = $13;
       $181 = (($180) + 8|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = $179;
       $184 = $182;
       $185 = (($183) - ($184))|0;
       $15 = $172;
       $16 = $__state;
       $17 = $174;
       $18 = $176;
       $19 = $185;
       $186 = $15;
       $187 = HEAP32[$186>>2]|0;
       $188 = (($187) + 32|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = $16;
       $191 = $17;
       $192 = $18;
       $193 = $19;
       $194 = (FUNCTION_TABLE_iiiiii[$189 & 1023]($186,$190,$191,$192,$193)|0);
       $__off = $194;
       $195 = (($27) + 36|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (($27) + 32|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $196;
       $200 = $198;
       $201 = (($199) - ($200))|0;
       $202 = $__off;
       $203 = (($201) - ($202))|0;
       $204 = ($203|0)<(0);
       $205 = $204 << 31 >> 31;
       $206 = $__c;
       $207 = $206;
       $208 = HEAP32[$207>>2]|0;
       $209 = (($206) + 4)|0;
       $210 = $209;
       $211 = HEAP32[$210>>2]|0;
       $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
       $213 = tempRet0;
       $214 = $__c;
       $215 = $214;
       HEAP32[$215>>2] = $212;
       $216 = (($214) + 4)|0;
       $217 = $216;
       HEAP32[$217>>2] = $213;
       $__update_st = 1;
      }
     }
    }
    $218 = (($27) + 64|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $__c;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (($220) + 4)|0;
    $224 = $223;
    $225 = HEAP32[$224>>2]|0;
    $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
    $227 = tempRet0;
    $228 = (_fseeko(($219|0),($226|0),1)|0);
    $229 = ($228|0)!=(0);
    if ($229) {
     $25 = -1;
     $245 = $25;
     STACKTOP = sp;return ($245|0);
    }
    $230 = $__update_st;
    $231 = $230&1;
    if ($231) {
     $232 = (($27) + 72|0);
     ;HEAP32[$232+0>>2]=HEAP32[$__state+0>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
    }
    $233 = (($27) + 32|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($27) + 40|0);
    HEAP32[$235>>2] = $234;
    $236 = (($27) + 36|0);
    HEAP32[$236>>2] = $234;
    $20 = $27;
    $21 = 0;
    $22 = 0;
    $23 = 0;
    $237 = $20;
    $238 = $21;
    $239 = (($237) + 8|0);
    HEAP32[$239>>2] = $238;
    $240 = $22;
    $241 = (($237) + 12|0);
    HEAP32[$241>>2] = $240;
    $242 = $23;
    $243 = (($237) + 16|0);
    HEAP32[$243>>2] = $242;
    $244 = (($27) + 92|0);
    HEAP32[$244>>2] = 0;
   }
  }
 } while(0);
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp;
 $23 = sp + 324|0;
 $31 = sp + 8|0;
 $34 = sp + 325|0;
 $__1buf = sp + 327|0;
 $71 = sp + 280|0;
 $72 = sp + 128|0;
 $73 = sp + 312|0;
 $74 = sp + 120|0;
 $__inext = sp + 80|0;
 $70 = $this;
 $75 = $70;
 $76 = (($75) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = (($82) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = (($__1buf) + 1|0);
  $87 = (($__1buf) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = (($88) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = (($88) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = (($88) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = (($97) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = (($100) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  if ($115) {
   $116 = $30;
   $119 = $116;
  } else {
   $117 = $29;
   $119 = $117;
  }
  $118 = HEAP32[$119>>2]|0;
  $120 = $118;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = (($122) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = (($125) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 if ($128) {
  $1 = $75;
  $129 = $1;
  $130 = (($129) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $2 = $75;
  $132 = $2;
  $133 = (($132) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $__unget_sz;
  $136 = (0 - ($135))|0;
  $137 = (($134) + ($136)|0);
  $138 = $__unget_sz;
  $139 = $138;
  _memmove(($131|0),($137|0),($139|0))|0;
  $140 = (($75) + 98|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&1;
  if ($142) {
   $3 = $75;
   $143 = $3;
   $144 = (($143) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $4 = $75;
   $146 = $4;
   $147 = (($146) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $145;
   $150 = $148;
   $151 = (($149) - ($150))|0;
   $152 = $__unget_sz;
   $153 = (($151) - ($152))|0;
   $__nmemb = $153;
   $5 = $75;
   $154 = $5;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $__unget_sz;
   $158 = (($156) + ($157)|0);
   $159 = $__nmemb;
   $160 = (($75) + 64|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (_fread(($158|0),1,($159|0),($161|0))|0);
   $__nmemb = $162;
   $163 = $__nmemb;
   $164 = ($163|0)!=(0);
   if ($164) {
    $6 = $75;
    $165 = $6;
    $166 = (($165) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = (($168) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = (($173) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = (($180) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = (($180) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = (($180) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = (($187) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
   }
  } else {
   $192 = (($75) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($75) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($75) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($75) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = (($75) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($75) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($75) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = (($75) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = (($75) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($75) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($75) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = (($75) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = (($75) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = (($75) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = (($75) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($75) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20+0>>0]=HEAP8[$23+0>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   if ($244) {
    $245 = $19;
    $248 = $245;
   } else {
    $246 = $18;
    $248 = $246;
   }
   $247 = HEAP32[$248>>2]|0;
   $__nmemb1 = $247;
   $249 = (($75) + 80|0);
   $250 = (($75) + 72|0);
   ;HEAP32[$249+0>>2]=HEAP32[$250+0>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = (($75) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = (($75) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread(($252|0),1,($253|0),($255|0))|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = (($75) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(40672|0),(399|0));
     // unreachable;
    }
    $263 = (($75) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = (($75) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = (($75) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($75) + 72|0);
    $271 = (($75) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($75) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($75) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = (($276) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = (($281) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (($75) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($288) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = (($75) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = (($75) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($75) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = (($307) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = (($307) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = (($307) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = (($314) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
    } else {
     $319 = HEAP32[$__inext>>2]|0;
     $49 = $75;
     $320 = $49;
     $321 = (($320) + 8|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $__unget_sz;
     $324 = (($322) + ($323)|0);
     $325 = ($319|0)!=($324|0);
     if ($325) {
      $50 = $75;
      $326 = $50;
      $327 = (($326) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $51 = $75;
      $329 = $51;
      $330 = (($329) + 8|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = $__unget_sz;
      $333 = (($331) + ($332)|0);
      $334 = HEAP32[$__inext>>2]|0;
      $52 = $75;
      $53 = $328;
      $54 = $333;
      $55 = $334;
      $335 = $52;
      $336 = $53;
      $337 = (($335) + 8|0);
      HEAP32[$337>>2] = $336;
      $338 = $54;
      $339 = (($335) + 12|0);
      HEAP32[$339>>2] = $338;
      $340 = $55;
      $341 = (($335) + 16|0);
      HEAP32[$341>>2] = $340;
      $56 = $75;
      $342 = $56;
      $343 = (($342) + 12|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = HEAP8[$344>>0]|0;
      $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
      $__c = $346;
     }
    }
   }
  }
 } else {
  $58 = $75;
  $347 = $58;
  $348 = (($347) + 12|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = HEAP8[$349>>0]|0;
  $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
  $__c = $351;
 }
 $63 = $75;
 $352 = $63;
 $353 = (($352) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = (($356) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = (($356) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = (($356) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = (($25) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = (($11) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = (($38) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = (($44) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = (($51) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 60|0;
 $__e = sp + 172|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = (($42) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = (($47) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = (($50) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = (($56) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = (($__1buf) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = (($61) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = (($61) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = (($61) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = (($69) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = (($72) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = (($77) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = (($80) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = (($42) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = (($87) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = (($90) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = (($96) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = (($42) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite(($98|0),1,($99|0),($101|0))|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if (!($104)) {
     break;
    }
    $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $39 = $105;
    $225 = $39;
    STACKTOP = sp;return ($225|0);
   } else {
    $106 = (($42) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = (($42) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 14;
      break;
     }
     $112 = (($42) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (($42) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = (($115) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = (($118) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($42) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (($42) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($42) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = (($141) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 16;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = (($148) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = (($151) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = (($157) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = (($42) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite(($159|0),1,($160|0),($162|0))|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 19;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      if (!($168)) {
       $169 = $__r;
       $170 = ($169|0)==(1);
       if (!($170)) {
        label = 28;
        break;
       }
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = (($42) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = (($42) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = (($42) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite(($178|0),1,($179|0),($181|0))|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 24;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = (($189) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = (($192) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = (($192) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = (($192) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = (($198) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = (($201) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = (($207) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 14) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(40672|0),(399|0));
     // unreachable;
    }
    else if ((label|0) == 16) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 19) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 28) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 32) {
     break;
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = (($217) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = (($217) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = (($217) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZL6shrLogPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 284|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 96|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[4432>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((4432|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 4416;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(4416|0),(___dso_handle|0))|0);
   ___cxa_guard_release((4432|0));
  }
 }
 $76 = 4416;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 4440;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(4416|0),(4440|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(4416|0),(5464|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 4416;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 4416;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNK10b2CLDevice10GetContextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK10b2CLDevice16GetCurrentDeviceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK10b2CLDevice15GetCommandQueueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 8|0);
 __THREW__ = 0;
 invoke_vi(28,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $32 = sp + 120|0;
 $33 = sp + 124|0;
 $36 = sp + 136|0;
 $37 = sp + 8|0;
 $40 = sp + 4|0;
 $41 = sp;
 $__h = sp + 64|0;
 $42 = $this;
 $45 = $42;
 $__rt = 0;
 $46 = (($45) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $128 = $__rt;
  STACKTOP = sp;return ($128|0);
 }
 $__rt = $45;
 $49 = (($45) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $39 = $__h;
 HEAP32[$40>>2] = $50;
 HEAP32[$41>>2] = 440;
 $51 = $39;
 $38 = $40;
 $52 = $38;
 $53 = HEAP32[$52>>2]|0;
 $27 = $41;
 $54 = $27;
 $55 = HEAP32[$54>>2]|0;
 $35 = $51;
 HEAP32[$36>>2] = $53;
 HEAP32[$37>>2] = $55;
 $56 = $35;
 $34 = $36;
 $57 = $34;
 $58 = HEAP32[$57>>2]|0;
 $28 = $37;
 $59 = $28;
 $60 = HEAP32[$59>>2]|0;
 $31 = $56;
 HEAP32[$32>>2] = $58;
 HEAP32[$33>>2] = $60;
 $61 = $31;
 $30 = $32;
 $62 = $30;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = (($61) + 4|0);
 $29 = $33;
 $65 = $29;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 $67 = HEAP32[$45>>2]|0;
 $68 = (($67) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 __THREW__ = 0;
 $70 = (invoke_ii($69|0,($45|0))|0);
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if (!($72)) {
  $73 = ($70|0)!=(0);
  if ($73) {
   $__rt = 0;
  }
  $15 = $__h;
  $96 = $15;
  $14 = $96;
  $97 = $14;
  $13 = $97;
  $98 = $13;
  $99 = HEAP32[$98>>2]|0;
  $__t$i = $99;
  $12 = $96;
  $100 = $12;
  $11 = $100;
  $101 = $11;
  HEAP32[$101>>2] = 0;
  $102 = $__t$i;
  __THREW__ = 0;
  $103 = (invoke_ii(440,($102|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if (!($105)) {
   $106 = ($103|0)==(0);
   if ($106) {
    $107 = (($45) + 64|0);
    HEAP32[$107>>2] = 0;
   } else {
    $__rt = 0;
   }
   $10 = $__h;
   $108 = $10;
   $6 = $108;
   $7 = 0;
   $109 = $6;
   $5 = $109;
   $110 = $5;
   $4 = $110;
   $111 = $4;
   $112 = HEAP32[$111>>2]|0;
   $__tmp$i$i1 = $112;
   $113 = $7;
   $3 = $109;
   $114 = $3;
   $2 = $114;
   $115 = $2;
   HEAP32[$115>>2] = $113;
   $116 = $__tmp$i$i1;
   $117 = ($116|0)!=(0|0);
   do {
    if ($117) {
     $1 = $109;
     $118 = $1;
     $0 = $118;
     $119 = $0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $__tmp$i$i1;
     __THREW__ = 0;
     (invoke_ii($121|0,($122|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      $125 = ___cxa_find_matching_catch()|0;
      $126 = tempRet0;
      $8 = $125;
      $9 = $126;
      $127 = $8;
      ___cxa_call_unexpected(($127|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $128 = $__rt;
   STACKTOP = sp;return ($128|0);
  }
 }
 $74 = ___cxa_find_matching_catch()|0;
 $75 = tempRet0;
 $43 = $74;
 $44 = $75;
 $26 = $__h;
 $76 = $26;
 $22 = $76;
 $23 = 0;
 $77 = $22;
 $21 = $77;
 $78 = $21;
 $20 = $78;
 $79 = $20;
 $80 = HEAP32[$79>>2]|0;
 $__tmp$i$i = $80;
 $81 = $23;
 $19 = $77;
 $82 = $19;
 $18 = $82;
 $83 = $18;
 HEAP32[$83>>2] = $81;
 $84 = $__tmp$i$i;
 $85 = ($84|0)!=(0|0);
 do {
  if ($85) {
   $17 = $77;
   $86 = $17;
   $16 = $86;
   $87 = $16;
   $88 = (($87) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $__tmp$i$i;
   __THREW__ = 0;
   (invoke_ii($89|0,($90|0))|0);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $93 = ___cxa_find_matching_catch(0|0)|0;
    $94 = tempRet0;
    $24 = $93;
    $25 = $94;
    $95 = $24;
    ___cxa_call_unexpected(($95|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $129 = $43;
 $130 = $44;
 ___resumeException($129|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $12;
 $14 = (($13) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  $11 = $$expand_i1_val2;
  $$pre_trunc = $11;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = (($18) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = (($18) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = (($18) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = (($13) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = (($13) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($13) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($13) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = (($13) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($13) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = (($39) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = (($39) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = (($39) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = (($13) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($13) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($13) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = (($13) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($13) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = (($58) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = (($58) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = (($58) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = (($13) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $$pre_trunc = $11;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = (($19) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = (($19) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = (($14) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 if ($28) {
  $29 = (($14) + 98|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = (($14) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($14) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($14) + 52|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   $39 = (($35) + ($38)|0);
   $0 = $14;
   $1 = $33;
   $2 = $39;
   $40 = $0;
   $41 = $1;
   $42 = (($40) + 24|0);
   HEAP32[$42>>2] = $41;
   $43 = (($40) + 20|0);
   HEAP32[$43>>2] = $41;
   $44 = $2;
   $45 = (($40) + 28|0);
   HEAP32[$45>>2] = $44;
  } else {
   $46 = (($14) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($14) + 56|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($14) + 60|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - 1)|0;
   $53 = (($49) + ($52)|0);
   $3 = $14;
   $4 = $47;
   $5 = $53;
   $54 = $3;
   $55 = $4;
   $56 = (($54) + 24|0);
   HEAP32[$56>>2] = $55;
   $57 = (($54) + 20|0);
   HEAP32[$57>>2] = $55;
   $58 = $5;
   $59 = (($54) + 28|0);
   HEAP32[$59>>2] = $58;
  }
 } else {
  $6 = $14;
  $7 = 0;
  $8 = 0;
  $60 = $6;
  $61 = $7;
  $62 = (($60) + 24|0);
  HEAP32[$62>>2] = $61;
  $63 = (($60) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $8;
  $65 = (($60) + 28|0);
  HEAP32[$65>>2] = $64;
 }
 $66 = (($14) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $14 = sp + 36|0;
 $15 = sp + 12|0;
 $16 = sp + 52|0;
 $11 = $this;
 $17 = $11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($17);
 $18 = (5632 + 8|0);
 HEAP32[$17>>2] = $18;
 $19 = (($17) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = (($17) + 36|0);
 HEAP32[$20>>2] = 0;
 $21 = (($17) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = (($17) + 52|0);
 HEAP32[$22>>2] = 0;
 $23 = (($17) + 56|0);
 HEAP32[$23>>2] = 0;
 $24 = (($17) + 60|0);
 HEAP32[$24>>2] = 0;
 $25 = (($17) + 64|0);
 HEAP32[$25>>2] = 0;
 $26 = (($17) + 68|0);
 $8 = $10;
 $9 = -1;
 $27 = $8;
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$10>>2]|0;
 HEAP32[$14>>2] = $28;
 $7 = $14;
 HEAP32[$26>>2] = 0;
 $29 = (($17) + 72|0);
 ;HEAP32[$29+0>>2]=0|0;HEAP32[$29+4>>2]=0|0;
 $30 = (($17) + 80|0);
 ;HEAP32[$30+0>>2]=0|0;HEAP32[$30+4>>2]=0|0;
 $31 = (($17) + 88|0);
 HEAP32[$31>>2] = 0;
 $32 = (($17) + 92|0);
 HEAP32[$32>>2] = 0;
 $33 = (($17) + 96|0);
 HEAP8[$33>>0] = 0;
 $34 = (($17) + 97|0);
 HEAP8[$34>>0] = 0;
 $35 = (($17) + 98|0);
 HEAP8[$35>>0] = 0;
 $6 = $17;
 $36 = $6;
 $37 = (($36) + 4|0);
 __ZNSt3__16localeC2ERKS0_($15,$37);
 $3 = $15;
 $38 = $3;
 __THREW__ = 0;
 $39 = (invoke_iii(441,($38|0),(32024|0))|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $4 = $42;
  $5 = $43;
  $44 = $4;
  ___cxa_call_unexpected(($44|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(437,($15|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 L7: do {
  if ($46) {
   label = 13;
  } else {
   do {
    if ($39) {
     $2 = $17;
     $47 = $2;
     $48 = (($47) + 4|0);
     __ZNSt3__16localeC2ERKS0_($16,$48);
     $1 = $16;
     $49 = $1;
     __THREW__ = 0;
     $50 = (invoke_iii(436,($49|0),(32024|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      $12 = $67;
      $13 = $68;
      __THREW__ = 0;
      invoke_vi(437,($16|0));
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       $80 = ___cxa_find_matching_catch(0|0)|0;
       $81 = tempRet0;
       ___clang_call_terminate($80);
       // unreachable;
      } else {
       break L7;
      }
     } else {
      $53 = (($17) + 68|0);
      HEAP32[$53>>2] = $50;
      __THREW__ = 0;
      invoke_vi(437,($16|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 13;
       break L7;
      }
      $56 = (($17) + 68|0);
      $57 = HEAP32[$56>>2]|0;
      $0 = $57;
      $58 = $0;
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + 28|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (FUNCTION_TABLE_ii[$61 & 1023]($58)|0);
      $63 = (($17) + 98|0);
      $64 = $62&1;
      HEAP8[$63>>0] = $64;
      break;
     }
    }
   } while(0);
   $71 = HEAP32[$17>>2]|0;
   $72 = (($71) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($73|0,($17|0),(0|0),4096)|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    label = 13;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $12 = $65;
  $13 = $66;
 }
 __THREW__ = 0;
 invoke_vi(96,($17|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $80 = ___cxa_find_matching_catch(0|0)|0;
  $81 = tempRet0;
  ___clang_call_terminate($80);
  // unreachable;
 }
 $78 = $12;
 $79 = $13;
 ___resumeException($78|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $30 = $__rt;
  STACKTOP = sp;return ($30|0);
 }
 $__rt = $3;
 $7 = $2;
 $8 = $7 & -3;
 do {
  switch ($8|0) {
  case 8:  {
   $__mdstr = 5776;
   break;
  }
  case 1: case 17:  {
   $__mdstr = 5768;
   break;
  }
  case 28:  {
   $__mdstr = 5832;
   break;
  }
  case 12:  {
   $__mdstr = 5824;
   break;
  }
  case 52: case 20:  {
   $__mdstr = 5808;
   break;
  }
  case 9: case 25:  {
   $__mdstr = 5800;
   break;
  }
  case 13: case 29:  {
   $__mdstr = 5848;
   break;
  }
  case 5: case 21:  {
   $__mdstr = 5816;
   break;
  }
  case 48: case 16:  {
   $__mdstr = 5760;
   break;
  }
  case 56:  {
   $__mdstr = 5792;
   break;
  }
  case 24:  {
   $__mdstr = 5784;
   break;
  }
  case 60:  {
   $__mdstr = 5840;
   break;
  }
  default: {
   $__rt = 0;
  }
  }
 } while(0);
 $9 = $__rt;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $__mdstr;
  $13 = (_fopen(($11|0),($12|0))|0);
  $14 = (($3) + 64|0);
  HEAP32[$14>>2] = $13;
  $15 = (($3) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $2;
   $19 = (($3) + 88|0);
   HEAP32[$19>>2] = $18;
   $20 = $2;
   $21 = $20 & 2;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = (($3) + 64|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_fseek(($24|0),0,2)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = (($3) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     (_fclose(($28|0))|0);
     $29 = (($3) + 64|0);
     HEAP32[$29>>2] = 0;
     $__rt = 0;
    }
   }
  } else {
   $__rt = 0;
  }
 }
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZN14b2CLCommonDataC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $3 = sp + 28|0;
 $4 = sp + 29|0;
 $5 = $this;
 $8 = $5;
 $9 = (($8) + 1132|0);
 $2 = $9;
 $10 = $2;
 ;HEAP8[$1+0>>0]=HEAP8[$4+0>>0]|0;
 $0 = $3;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEEC2ERKS9_($10,$3);
 $11 = (($8) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = (($8) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$8>>2] = 0;
 $13 = (($8) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = (($8) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = (($8) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = (($8) + 24|0);
 HEAP32[$16>>2] = 0;
 $17 = (($8) + 28|0);
 HEAP32[$17>>2] = 0;
 $18 = (($8) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = (($8) + 144|0);
 HEAP32[$19>>2] = 0;
 $20 = (($8) + 148|0);
 HEAP32[$20>>2] = 0;
 $21 = (($8) + 1076|0);
 HEAP32[$21>>2] = 0;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(11);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = (($8) + 100|0);
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = $i;
  $28 = (($8) + 1032|0);
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = $i;
  $31 = (($8) + 1080|0);
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = (($8) + 1080|0);
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 442;
 $37 = (($8) + 1080|0);
 $38 = (($37) + 8|0);
 HEAP32[$38>>2] = 443;
 $39 = (($8) + 1080|0);
 $40 = (($39) + 12|0);
 HEAP32[$40>>2] = 444;
 $41 = (($8) + 1080|0);
 $42 = (($41) + 16|0);
 HEAP32[$42>>2] = 445;
 $43 = (($8) + 1080|0);
 $44 = (($43) + 20|0);
 HEAP32[$44>>2] = 446;
 $45 = (($8) + 1080|0);
 $46 = (($45) + 24|0);
 HEAP32[$46>>2] = 447;
 $47 = (($8) + 1080|0);
 $48 = (($47) + 28|0);
 HEAP32[$48>>2] = 448;
 $49 = (($8) + 1080|0);
 $50 = (($49) + 32|0);
 HEAP32[$50>>2] = 449;
 $51 = (($8) + 1080|0);
 $52 = (($51) + 36|0);
 HEAP32[$52>>2] = 450;
 $53 = (($8) + 1080|0);
 $54 = (($53) + 40|0);
 HEAP32[$54>>2] = 451;
 $55 = (($8) + 1124|0);
 HEAP32[$55>>2] = 0;
 $56 = (($8) + 1128|0);
 HEAP32[$56>>2] = 0;
 $57 = (($8) + 1148|0);
 HEAP32[$57>>2] = 0;
 $58 = (($8) + 1152|0);
 HEAP32[$58>>2] = 0;
 $59 = (($8) + 1144|0);
 HEAP32[$59>>2] = 0;
 $60 = (($8) + 1204|0);
 HEAP32[$60>>2] = 0;
 $61 = (($8) + 1220|0);
 HEAP32[$61>>2] = 0;
 $62 = (($8) + 76|0);
 HEAP32[$62>>2] = 0;
 $63 = (($8) + 72|0);
 HEAP32[$63>>2] = 0;
 $64 = (($8) + 68|0);
 HEAP32[$64>>2] = 0;
 $65 = (($8) + 64|0);
 HEAP32[$65>>2] = 0;
 $66 = (($8) + 60|0);
 HEAP32[$66>>2] = 0;
 $67 = (($8) + 56|0);
 HEAP32[$67>>2] = 0;
 $68 = (($8) + 52|0);
 HEAP32[$68>>2] = 0;
 $69 = (($8) + 48|0);
 HEAP32[$69>>2] = 0;
 $70 = (($8) + 36|0);
 $71 = (($70) + 4|0);
 HEAP32[$71>>2] = 0;
 $72 = (($8) + 36|0);
 HEAP32[$72>>2] = 0;
 $73 = (($8) + 1188|0);
 HEAP32[$73>>2] = 0;
 $74 = (($8) + 1192|0);
 HEAP32[$74>>2] = 0;
 $75 = (($8) + 1196|0);
 HEAP32[$75>>2] = 0;
 $76 = (($8) + 1200|0);
 HEAP32[$76>>2] = 0;
 $77 = (($8) + 1208|0);
 HEAP32[$77>>2] = 0;
 $78 = (($8) + 1212|0);
 HEAP32[$78>>2] = 0;
 $79 = (($8) + 1216|0);
 HEAP32[$79>>2] = 0;
 $80 = (($8) + 1160|0);
 HEAP32[$80>>2] = 0;
 $81 = (($8) + 1164|0);
 HEAP32[$81>>2] = 0;
 $82 = (($8) + 1168|0);
 HEAP32[$82>>2] = 0;
 $83 = (($8) + 1172|0);
 HEAP32[$83>>2] = 0;
 $84 = HEAP8[3200>>0]|0;
 $85 = $84&1;
 if ($85) {
  $86 = (($8) + 88|0);
  HEAP32[$86>>2] = 0;
  $87 = (($8) + 84|0);
  HEAP32[$87>>2] = 0;
  $88 = (($8) + 80|0);
  HEAP32[$88>>2] = 0;
  __THREW__ = 0;
  $89 = (invoke_i(452)|0);
  $90 = __THREW__; __THREW__ = 0;
  $91 = $90&1;
  if (!($91)) {
   __THREW__ = 0;
   $92 = (invoke_iiii(453,($89|0),20,0)|0);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if (!($94)) {
    $95 = (($8) + 92|0);
    HEAP32[$95>>2] = $92;
    __THREW__ = 0;
    $96 = (invoke_i(452)|0);
    $97 = __THREW__; __THREW__ = 0;
    $98 = $97&1;
    if (!($98)) {
     __THREW__ = 0;
     $99 = (invoke_iiii(453,($96|0),4,0)|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if (!($101)) {
      $102 = (($8) + 96|0);
      HEAP32[$102>>2] = $99;
      __THREW__ = 0;
      $103 = (invoke_i(452)|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if (!($105)) {
       __THREW__ = 0;
       $106 = (invoke_iiii(453,($103|0),16,0)|0);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if (!($108)) {
        $109 = (($8) + 1188|0);
        HEAP32[$109>>2] = $106;
        __THREW__ = 0;
        $110 = (invoke_i(452)|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if (!($112)) {
         __THREW__ = 0;
         $113 = (invoke_iiii(453,($110|0),4,0)|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if (!($115)) {
          $116 = (($8) + 1192|0);
          HEAP32[$116>>2] = $113;
          label = 16;
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  __THREW__ = 0;
  invoke_vi(455,($8|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if (!($122)) {
   STACKTOP = sp;return;
  }
 }
 $117 = ___cxa_find_matching_catch()|0;
 $118 = tempRet0;
 $6 = $117;
 $7 = $118;
 __THREW__ = 0;
 invoke_vi(454,($9|0));
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $125 = ___cxa_find_matching_catch(0|0)|0;
  $126 = tempRet0;
  ___clang_call_terminate($125);
  // unreachable;
 }
 $123 = $6;
 $124 = $7;
 ___resumeException($123|0);
 // unreachable;
}
function __ZN14b2CLCommonData17CopyRevoluteJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $pRevoluteJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pRevoluteJoint = $4;
 $5 = $pRevoluteJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pRevoluteJoint;
 $11 = (($10) + 68|0);
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pRevoluteJoint;
 $18 = (($17) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pRevoluteJoint;
 $24 = (($23) + 76|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = (($27) + 48|0);
 $29 = (($28) + 8|0);
 $30 = (($29) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pRevoluteJoint;
 $32 = (($31) + 100|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&1;
 $35 = $34 ? 1 : 0;
 $36 = $1;
 $37 = (($36) + 48|0);
 $38 = (($37) + 16|0);
 HEAP32[$38>>2] = $35;
 $39 = $pRevoluteJoint;
 $40 = (($39) + 104|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $1;
 $43 = (($42) + 48|0);
 $44 = (($43) + 20|0);
 HEAPF32[$44>>2] = $41;
 $45 = $pRevoluteJoint;
 $46 = (($45) + 108|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $1;
 $49 = (($48) + 48|0);
 $50 = (($49) + 24|0);
 HEAPF32[$50>>2] = $47;
 $51 = $pRevoluteJoint;
 $52 = (($51) + 112|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&1;
 $55 = $54 ? 1 : 0;
 $56 = $1;
 $57 = (($56) + 48|0);
 $58 = (($57) + 28|0);
 HEAP32[$58>>2] = $55;
 $59 = $pRevoluteJoint;
 $60 = (($59) + 116|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = (($62) + 48|0);
 $64 = (($63) + 32|0);
 HEAPF32[$64>>2] = $61;
 $65 = $pRevoluteJoint;
 $66 = (($65) + 120|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = (($68) + 48|0);
 $70 = (($69) + 36|0);
 HEAPF32[$70>>2] = $67;
 $71 = $pRevoluteJoint;
 $72 = (($71) + 124|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = (($74) + 48|0);
 $76 = (($75) + 40|0);
 HEAPF32[$76>>2] = $73;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData18CopyPrismaticJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pPrismaticJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pPrismaticJoint = $4;
 $5 = $pPrismaticJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pPrismaticJoint;
 $11 = (($10) + 68|0);
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pPrismaticJoint;
 $18 = (($17) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pPrismaticJoint;
 $24 = (($23) + 76|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = (($27) + 48|0);
 $29 = (($28) + 8|0);
 $30 = (($29) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pPrismaticJoint;
 $32 = (($31) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = (($34) + 48|0);
 $36 = (($35) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pPrismaticJoint;
 $38 = (($37) + 84|0);
 $39 = (($38) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $1;
 $42 = (($41) + 48|0);
 $43 = (($42) + 16|0);
 $44 = (($43) + 4|0);
 HEAPF32[$44>>2] = $40;
 $45 = $pPrismaticJoint;
 $46 = (($45) + 92|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $1;
 $49 = (($48) + 48|0);
 $50 = (($49) + 24|0);
 HEAPF32[$50>>2] = $47;
 $51 = $pPrismaticJoint;
 $52 = (($51) + 92|0);
 $53 = (($52) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $1;
 $56 = (($55) + 48|0);
 $57 = (($56) + 24|0);
 $58 = (($57) + 4|0);
 HEAPF32[$58>>2] = $54;
 $59 = $pPrismaticJoint;
 $60 = (($59) + 100|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = (($62) + 48|0);
 $64 = (($63) + 32|0);
 HEAPF32[$64>>2] = $61;
 $65 = $pPrismaticJoint;
 $66 = (($65) + 120|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = (($68) + 48|0);
 $70 = (($69) + 36|0);
 HEAPF32[$70>>2] = $67;
 $71 = $pPrismaticJoint;
 $72 = (($71) + 124|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = (($74) + 48|0);
 $76 = (($75) + 40|0);
 HEAPF32[$76>>2] = $73;
 $77 = $pPrismaticJoint;
 $78 = (($77) + 128|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $1;
 $81 = (($80) + 48|0);
 $82 = (($81) + 44|0);
 HEAPF32[$82>>2] = $79;
 $83 = $pPrismaticJoint;
 $84 = (($83) + 132|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $1;
 $87 = (($86) + 48|0);
 $88 = (($87) + 48|0);
 HEAPF32[$88>>2] = $85;
 $89 = $pPrismaticJoint;
 $90 = (($89) + 136|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&1;
 $93 = $92 ? 1 : 0;
 $94 = $1;
 $95 = (($94) + 48|0);
 $96 = (($95) + 52|0);
 HEAP32[$96>>2] = $93;
 $97 = $pPrismaticJoint;
 $98 = (($97) + 137|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&1;
 $101 = $100 ? 1 : 0;
 $102 = $1;
 $103 = (($102) + 48|0);
 $104 = (($103) + 56|0);
 HEAP32[$104>>2] = $101;
 $105 = $pPrismaticJoint;
 $106 = (($105) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $1;
 $109 = (($108) + 48|0);
 $110 = (($109) + 60|0);
 HEAP32[$110>>2] = $107;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData17CopyDistanceJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $pDistanceJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pDistanceJoint = $4;
 $5 = $pDistanceJoint;
 $6 = (+__ZNK15b2DistanceJoint12GetFrequencyEv($5));
 $7 = $1;
 $8 = (($7) + 48|0);
 HEAPF32[$8>>2] = $6;
 $9 = $pDistanceJoint;
 $10 = (+__ZNK15b2DistanceJoint15GetDampingRatioEv($9));
 $11 = $1;
 $12 = (($11) + 48|0);
 $13 = (($12) + 4|0);
 HEAPF32[$13>>2] = $10;
 $14 = $pDistanceJoint;
 $15 = (($14) + 76|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $1;
 $18 = (($17) + 48|0);
 $19 = (($18) + 8|0);
 HEAPF32[$19>>2] = $16;
 $20 = $pDistanceJoint;
 $21 = (($20) + 104|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $1;
 $24 = (($23) + 48|0);
 $25 = (($24) + 32|0);
 HEAPF32[$25>>2] = $22;
 $26 = $pDistanceJoint;
 $27 = (($26) + 80|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $1;
 $30 = (($29) + 48|0);
 $31 = (($30) + 12|0);
 HEAPF32[$31>>2] = $28;
 $32 = $pDistanceJoint;
 $33 = (($32) + 80|0);
 $34 = (($33) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $1;
 $37 = (($36) + 48|0);
 $38 = (($37) + 12|0);
 $39 = (($38) + 4|0);
 HEAPF32[$39>>2] = $35;
 $40 = $pDistanceJoint;
 $41 = (($40) + 88|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $1;
 $44 = (($43) + 48|0);
 $45 = (($44) + 20|0);
 HEAPF32[$45>>2] = $42;
 $46 = $pDistanceJoint;
 $47 = (($46) + 88|0);
 $48 = (($47) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $1;
 $51 = (($50) + 48|0);
 $52 = (($51) + 20|0);
 $53 = (($52) + 4|0);
 HEAPF32[$53>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData15CopyPulleyJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $pPulleyJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pPulleyJoint = $4;
 $5 = $pPulleyJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pPulleyJoint;
 $11 = (($10) + 68|0);
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pPulleyJoint;
 $18 = (($17) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pPulleyJoint;
 $24 = (($23) + 76|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = (($27) + 48|0);
 $29 = (($28) + 8|0);
 $30 = (($29) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pPulleyJoint;
 $32 = (($31) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = (($34) + 48|0);
 $36 = (($35) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pPulleyJoint;
 $38 = (($37) + 88|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = (($40) + 48|0);
 $42 = (($41) + 20|0);
 HEAPF32[$42>>2] = $39;
 $43 = $pPulleyJoint;
 $44 = (($43) + 92|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = (($46) + 48|0);
 $48 = (($47) + 24|0);
 HEAPF32[$48>>2] = $45;
 $49 = $pPulleyJoint;
 $50 = (($49) + 92|0);
 $51 = (($50) + 4|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = (($53) + 48|0);
 $55 = (($54) + 24|0);
 $56 = (($55) + 4|0);
 HEAPF32[$56>>2] = $52;
 $57 = $pPulleyJoint;
 $58 = (($57) + 100|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $1;
 $61 = (($60) + 48|0);
 $62 = (($61) + 32|0);
 HEAPF32[$62>>2] = $59;
 $63 = $pPulleyJoint;
 $64 = (($63) + 100|0);
 $65 = (($64) + 4|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $1;
 $68 = (($67) + 48|0);
 $69 = (($68) + 32|0);
 $70 = (($69) + 4|0);
 HEAPF32[$70>>2] = $66;
 $71 = $pPulleyJoint;
 $72 = (($71) + 108|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $1;
 $75 = (($74) + 48|0);
 $76 = (($75) + 40|0);
 HEAPF32[$76>>2] = $73;
 $77 = $pPulleyJoint;
 $78 = (($77) + 112|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $1;
 $81 = (($80) + 48|0);
 $82 = (($81) + 44|0);
 HEAPF32[$82>>2] = $79;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData14CopyMouseJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, $pMouseJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pMouseJoint = $4;
 $5 = $pMouseJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pMouseJoint;
 $11 = (($10) + 68|0);
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pMouseJoint;
 $18 = (($17) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pMouseJoint;
 $24 = (($23) + 76|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = (($27) + 48|0);
 $29 = (($28) + 8|0);
 $30 = (($29) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pMouseJoint;
 $32 = (($31) + 84|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = (($34) + 48|0);
 $36 = (($35) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pMouseJoint;
 $38 = (($37) + 88|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = (($40) + 48|0);
 $42 = (($41) + 20|0);
 HEAPF32[$42>>2] = $39;
 $43 = $pMouseJoint;
 $44 = (($43) + 92|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = (($46) + 48|0);
 $48 = (($47) + 24|0);
 HEAPF32[$48>>2] = $45;
 $49 = $pMouseJoint;
 $50 = (($49) + 104|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $1;
 $53 = (($52) + 48|0);
 $54 = (($53) + 28|0);
 HEAPF32[$54>>2] = $51;
 $55 = $pMouseJoint;
 $56 = (($55) + 108|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $1;
 $59 = (($58) + 48|0);
 $60 = (($59) + 32|0);
 HEAPF32[$60>>2] = $57;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyGearJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $pGearJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pGearJoint = $4;
 $5 = $pGearJoint;
 $6 = (($5) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 48|0);
 HEAP32[$11>>2] = $9;
 $12 = $pGearJoint;
 $13 = (($12) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + 48|0);
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = $16;
 $20 = $pGearJoint;
 $21 = (($20) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNK7b2Joint7GetTypeEv($22)|0);
 $24 = $1;
 $25 = (($24) + 48|0);
 $26 = (($25) + 8|0);
 HEAP32[$26>>2] = $23;
 $27 = $pGearJoint;
 $28 = (($27) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (__ZNK7b2Joint7GetTypeEv($29)|0);
 $31 = $1;
 $32 = (($31) + 48|0);
 $33 = (($32) + 12|0);
 HEAP32[$33>>2] = $30;
 $34 = $pGearJoint;
 $35 = (($34) + 92|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $1;
 $38 = (($37) + 48|0);
 $39 = (($38) + 16|0);
 HEAPF32[$39>>2] = $36;
 $40 = $pGearJoint;
 $41 = (($40) + 92|0);
 $42 = (($41) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $1;
 $45 = (($44) + 48|0);
 $46 = (($45) + 16|0);
 $47 = (($46) + 4|0);
 HEAPF32[$47>>2] = $43;
 $48 = $pGearJoint;
 $49 = (($48) + 100|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $1;
 $52 = (($51) + 48|0);
 $53 = (($52) + 24|0);
 HEAPF32[$53>>2] = $50;
 $54 = $pGearJoint;
 $55 = (($54) + 100|0);
 $56 = (($55) + 4|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $1;
 $59 = (($58) + 48|0);
 $60 = (($59) + 24|0);
 $61 = (($60) + 4|0);
 HEAPF32[$61>>2] = $57;
 $62 = $pGearJoint;
 $63 = (($62) + 108|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $1;
 $66 = (($65) + 48|0);
 $67 = (($66) + 32|0);
 HEAPF32[$67>>2] = $64;
 $68 = $pGearJoint;
 $69 = (($68) + 108|0);
 $70 = (($69) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $1;
 $73 = (($72) + 48|0);
 $74 = (($73) + 32|0);
 $75 = (($74) + 4|0);
 HEAPF32[$75>>2] = $71;
 $76 = $pGearJoint;
 $77 = (($76) + 116|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $1;
 $80 = (($79) + 48|0);
 $81 = (($80) + 40|0);
 HEAPF32[$81>>2] = $78;
 $82 = $pGearJoint;
 $83 = (($82) + 116|0);
 $84 = (($83) + 4|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $1;
 $87 = (($86) + 48|0);
 $88 = (($87) + 40|0);
 $89 = (($88) + 4|0);
 HEAPF32[$89>>2] = $85;
 $90 = $pGearJoint;
 $91 = (($90) + 124|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $1;
 $94 = (($93) + 48|0);
 $95 = (($94) + 48|0);
 HEAPF32[$95>>2] = $92;
 $96 = $pGearJoint;
 $97 = (($96) + 124|0);
 $98 = (($97) + 4|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $1;
 $101 = (($100) + 48|0);
 $102 = (($101) + 48|0);
 $103 = (($102) + 4|0);
 HEAPF32[$103>>2] = $99;
 $104 = $pGearJoint;
 $105 = (($104) + 132|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $1;
 $108 = (($107) + 48|0);
 $109 = (($108) + 56|0);
 HEAPF32[$109>>2] = $106;
 $110 = $pGearJoint;
 $111 = (($110) + 132|0);
 $112 = (($111) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $1;
 $115 = (($114) + 48|0);
 $116 = (($115) + 56|0);
 $117 = (($116) + 4|0);
 HEAPF32[$117>>2] = $113;
 $118 = $pGearJoint;
 $119 = (($118) + 140|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $1;
 $122 = (($121) + 48|0);
 $123 = (($122) + 64|0);
 HEAPF32[$123>>2] = $120;
 $124 = $pGearJoint;
 $125 = (($124) + 144|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $1;
 $128 = (($127) + 48|0);
 $129 = (($128) + 68|0);
 HEAPF32[$129>>2] = $126;
 $130 = $pGearJoint;
 $131 = (($130) + 148|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $1;
 $134 = (($133) + 48|0);
 $135 = (($134) + 72|0);
 HEAPF32[$135>>2] = $132;
 $136 = $pGearJoint;
 $137 = (($136) + 152|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $1;
 $140 = (($139) + 48|0);
 $141 = (($140) + 76|0);
 HEAPF32[$141>>2] = $138;
 $142 = $pGearJoint;
 $143 = (($142) + 84|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($144) + 100|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $1;
 $148 = (($147) + 40|0);
 HEAP32[$148>>2] = $146;
 $149 = $pGearJoint;
 $150 = (($149) + 88|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + 100|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $1;
 $155 = (($154) + 44|0);
 HEAP32[$155>>2] = $153;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData14CopyWheelJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $pWheelJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pWheelJoint = $4;
 $5 = $pWheelJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pWheelJoint;
 $11 = (($10) + 72|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = (($13) + 48|0);
 $15 = (($14) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = $pWheelJoint;
 $17 = (($16) + 76|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = (($19) + 48|0);
 $21 = (($20) + 8|0);
 HEAPF32[$21>>2] = $18;
 $22 = $pWheelJoint;
 $23 = (($22) + 76|0);
 $24 = (($23) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 48|0);
 $28 = (($27) + 8|0);
 $29 = (($28) + 4|0);
 HEAPF32[$29>>2] = $25;
 $30 = $pWheelJoint;
 $31 = (($30) + 84|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $1;
 $34 = (($33) + 48|0);
 $35 = (($34) + 16|0);
 HEAPF32[$35>>2] = $32;
 $36 = $pWheelJoint;
 $37 = (($36) + 84|0);
 $38 = (($37) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = (($40) + 48|0);
 $42 = (($41) + 16|0);
 $43 = (($42) + 4|0);
 HEAPF32[$43>>2] = $39;
 $44 = $pWheelJoint;
 $45 = (($44) + 92|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $1;
 $48 = (($47) + 48|0);
 $49 = (($48) + 24|0);
 HEAPF32[$49>>2] = $46;
 $50 = $pWheelJoint;
 $51 = (($50) + 92|0);
 $52 = (($51) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $1;
 $55 = (($54) + 48|0);
 $56 = (($55) + 24|0);
 $57 = (($56) + 4|0);
 HEAPF32[$57>>2] = $53;
 $58 = $pWheelJoint;
 $59 = (($58) + 100|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $1;
 $62 = (($61) + 48|0);
 $63 = (($62) + 32|0);
 HEAPF32[$63>>2] = $60;
 $64 = $pWheelJoint;
 $65 = (($64) + 100|0);
 $66 = (($65) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $1;
 $69 = (($68) + 48|0);
 $70 = (($69) + 32|0);
 $71 = (($70) + 4|0);
 HEAPF32[$71>>2] = $67;
 $72 = $pWheelJoint;
 $73 = (($72) + 120|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $1;
 $76 = (($75) + 48|0);
 $77 = (($76) + 40|0);
 HEAPF32[$77>>2] = $74;
 $78 = $pWheelJoint;
 $79 = (($78) + 124|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $1;
 $82 = (($81) + 48|0);
 $83 = (($82) + 44|0);
 HEAPF32[$83>>2] = $80;
 $84 = $pWheelJoint;
 $85 = (($84) + 128|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&1;
 $88 = $87 ? 1 : 0;
 $89 = $1;
 $90 = (($89) + 48|0);
 $91 = (($90) + 48|0);
 HEAP32[$91>>2] = $88;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyWeldJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, $pWeldJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pWeldJoint = $4;
 $5 = $pWeldJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pWeldJoint;
 $11 = (($10) + 72|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = (($13) + 48|0);
 $15 = (($14) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = $pWeldJoint;
 $17 = (($16) + 76|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = (($19) + 48|0);
 $21 = (($20) + 8|0);
 HEAPF32[$21>>2] = $18;
 $22 = $pWeldJoint;
 $23 = (($22) + 80|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $1;
 $26 = (($25) + 48|0);
 $27 = (($26) + 12|0);
 HEAPF32[$27>>2] = $24;
 $28 = $pWeldJoint;
 $29 = (($28) + 80|0);
 $30 = (($29) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = (($32) + 48|0);
 $34 = (($33) + 12|0);
 $35 = (($34) + 4|0);
 HEAPF32[$35>>2] = $31;
 $36 = $pWeldJoint;
 $37 = (($36) + 88|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = (($39) + 48|0);
 $41 = (($40) + 20|0);
 HEAPF32[$41>>2] = $38;
 $42 = $pWeldJoint;
 $43 = (($42) + 88|0);
 $44 = (($43) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $1;
 $47 = (($46) + 48|0);
 $48 = (($47) + 20|0);
 $49 = (($48) + 4|0);
 HEAPF32[$49>>2] = $45;
 $50 = $pWeldJoint;
 $51 = (($50) + 96|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = (($53) + 48|0);
 $55 = (($54) + 28|0);
 HEAPF32[$55>>2] = $52;
 $56 = $pWeldJoint;
 $57 = (($56) + 100|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $1;
 $60 = (($59) + 48|0);
 $61 = (($60) + 32|0);
 HEAPF32[$61>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData17CopyFrictionJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, $pFrictionJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pFrictionJoint = $4;
 $5 = $pFrictionJoint;
 $6 = (($5) + 68|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 HEAPF32[$9>>2] = $7;
 $10 = $pFrictionJoint;
 $11 = (($10) + 68|0);
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 4|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pFrictionJoint;
 $18 = (($17) + 76|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 8|0);
 HEAPF32[$22>>2] = $19;
 $23 = $pFrictionJoint;
 $24 = (($23) + 76|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = (($27) + 48|0);
 $29 = (($28) + 8|0);
 $30 = (($29) + 4|0);
 HEAPF32[$30>>2] = $26;
 $31 = $pFrictionJoint;
 $32 = (($31) + 96|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = (($34) + 48|0);
 $36 = (($35) + 16|0);
 HEAPF32[$36>>2] = $33;
 $37 = $pFrictionJoint;
 $38 = (($37) + 100|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $1;
 $41 = (($40) + 48|0);
 $42 = (($41) + 20|0);
 HEAPF32[$42>>2] = $39;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData13CopyRopeJointEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $pRopeJoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pSrc;
 $1 = $pDest;
 $2 = $0;
 $3 = $1;
 __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($2,$3);
 $4 = $0;
 $pRopeJoint = $4;
 $5 = $pRopeJoint;
 $6 = (($5) + 84|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = (($8) + 48|0);
 $10 = (($9) + 16|0);
 HEAPF32[$10>>2] = $7;
 $11 = $pRopeJoint;
 $12 = (($11) + 88|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = (($14) + 48|0);
 $16 = (($15) + 20|0);
 HEAPF32[$16>>2] = $13;
 $17 = $pRopeJoint;
 $18 = (($17) + 164|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (($20) + 48|0);
 $22 = (($21) + 84|0);
 HEAP32[$22>>2] = $19;
 $23 = $pRopeJoint;
 $24 = (($23) + 68|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 48|0);
 HEAPF32[$27>>2] = $25;
 $28 = $pRopeJoint;
 $29 = (($28) + 68|0);
 $30 = (($29) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $1;
 $33 = (($32) + 48|0);
 $34 = (($33) + 4|0);
 HEAPF32[$34>>2] = $31;
 $35 = $pRopeJoint;
 $36 = (($35) + 76|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $1;
 $39 = (($38) + 48|0);
 $40 = (($39) + 8|0);
 HEAPF32[$40>>2] = $37;
 $41 = $pRopeJoint;
 $42 = (($41) + 76|0);
 $43 = (($42) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $1;
 $46 = (($45) + 48|0);
 $47 = (($46) + 8|0);
 $48 = (($47) + 4|0);
 HEAPF32[$48>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData25initReadLastJointImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $commonDataSource = 0, $commonDataSourceLen = 0, $err = 0;
 var $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $err = sp + 64|0;
 $commonDataSource = sp + 60|0;
 $commonDataSourceLen = sp + 56|0;
 $len = sp + 52|0;
 $buffer = sp + 72|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[3200>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  STACKTOP = sp;return;
 }
 (_printf((7640|0),($vararg_buffer|0))|0);
 HEAP32[$commonDataSource>>2] = 0;
 HEAP32[$commonDataSourceLen>>2] = 0;
 __ZL6shrLogPKcz155(7672,$vararg_buffer1);
 $4 = (__ZL15shrFindFilePathPKcPv156(7704,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj157($4,7744,$commonDataSourceLen)|0);
 HEAP32[$commonDataSource>>2] = $5;
 $6 = HEAP32[$commonDataSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(7760,$vararg_buffer3);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($commonDataSource|0),(0|0),($err|0))|0);
 $11 = (($1) + 1176|0);
 HEAP32[$11>>2] = $10;
 $12 = (($1) + 1176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  (_printf((7832|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 $15 = (($1) + 1176|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_clBuildProgram(($16|0),0,(0|0),(7880|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $17;
 $18 = HEAP32[$err>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  (_printf((7888|0),($vararg_buffer7|0))|0);
  $20 = (($1) + 1176|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($22)|0);
  (_clGetProgramBuildInfo(($21|0),($23|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer9>>2] = $buffer;
  (_printf((7936|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $24 = (($1) + 1176|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_clCreateKernel(($25|0),(7944|0),($err|0))|0);
 $27 = (($1) + 1180|0);
 HEAP32[$27>>2] = $26;
 $28 = (($1) + 1180|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  (_printf((7968|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $31 = HEAP32[$err>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  (_printf((7968|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $33 = (__ZN10b2CLDevice8instanceEv()|0);
 $34 = (($1) + 1180|0);
 $35 = (($1) + 1184|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($33,$34,$35);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonDataD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(456,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = (($3) + 1124|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    __THREW__ = 0;
    $9 = (invoke_i(452)|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = (($3) + 1124|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($9|0),($13|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
   }
   $21 = (($3) + 1148|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    __THREW__ = 0;
    $24 = (invoke_i(452)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    $27 = (($3) + 1148|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($24|0),($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     break;
    }
   }
   $31 = (($3) + 1152|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    __THREW__ = 0;
    $34 = (invoke_i(452)|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    }
    $37 = (($3) + 1152|0);
    $38 = HEAP32[$37>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($34|0),($38|0));
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     break;
    }
   }
   $41 = (($3) + 1188|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    __THREW__ = 0;
    $44 = (invoke_i(452)|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    }
    $47 = (($3) + 1188|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($44|0),($48|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     break;
    }
   }
   $51 = (($3) + 1192|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    __THREW__ = 0;
    $54 = (invoke_i(452)|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     break;
    }
    $57 = (($3) + 1192|0);
    $58 = HEAP32[$57>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($54|0),($58|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
   }
   $61 = (($3) + 1196|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    __THREW__ = 0;
    $64 = (invoke_i(452)|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     break;
    }
    $67 = (($3) + 1196|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($64|0),($68|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     break;
    }
   }
   $71 = (($3) + 1200|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    __THREW__ = 0;
    $74 = (invoke_i(452)|0);
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    if ($76) {
     break;
    }
    $77 = (($3) + 1200|0);
    $78 = HEAP32[$77>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($74|0),($78|0));
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     break;
    }
   }
   $81 = (($3) + 1212|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    __THREW__ = 0;
    $84 = (invoke_i(452)|0);
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if ($86) {
     break;
    }
    $87 = (($3) + 1212|0);
    $88 = HEAP32[$87>>2]|0;
    __THREW__ = 0;
    invoke_vii(457,($84|0),($88|0));
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     break;
    }
   }
   $91 = (($3) + 1208|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    __ZdaPv($92);
   }
   $94 = (($3) + 1216|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(0|0);
   if ($96) {
    $97 = (($3) + 1132|0);
    __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($97);
    STACKTOP = sp;return;
   }
   __ZdaPv($95);
   $97 = (($3) + 1132|0);
   __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($97);
   STACKTOP = sp;return;
  }
 } while(0);
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $1 = $16;
 $2 = $17;
 $18 = (($3) + 1132|0);
 __THREW__ = 0;
 invoke_vi(454,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $100 = ___cxa_find_matching_catch(0|0)|0;
  $101 = tempRet0;
  ___clang_call_terminate($100);
  // unreachable;
 }
 $98 = $1;
 $99 = $2;
 ___resumeException($98|0);
 // unreachable;
}
function __ZN14b2CLCommonData12DeleteJointsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 144|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdaPv($4);
 }
 $6 = (($1) + 148|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 1076|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (__ZN10b2CLDevice8instanceEv()|0);
  $11 = (($1) + 1076|0);
  $12 = HEAP32[$11>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
  $13 = (($1) + 1076|0);
  HEAP32[$13>>2] = 0;
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ($14|0)<(11);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = (($1) + 100|0);
  $18 = (($17) + ($16<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = $i;
  $20 = (($1) + 1032|0);
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[7080>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (5856|0);
 }
 $4 = (___cxa_guard_acquire((7080|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (5856|0);
 }
 __THREW__ = 0;
 invoke_vi(458,(5856|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((7080|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 } else {
  (___cxa_atexit((459|0),(5856|0),(___dso_handle|0))|0);
  ___cxa_guard_release((7080|0));
  STACKTOP = sp;return (5856|0);
 }
 return 0|0;
}
function __ZN14b2CLCommonData10CopyShapesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0.0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $b = 0, $body_index = 0, $f = 0, $i = 0, $i3 = 0, $maxContactCount = 0, $s = 0, $sc = 0, $sc1 = 0, $se = 0, $se2 = 0, $shape_index = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 103084|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)<($8|0);
 if ($9) {
  $10 = (($4) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = (($4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    __ZdaPv($14);
   }
  }
  $16 = $1;
  $17 = (($16) + 103084|0);
  $18 = HEAP32[$17>>2]|0;
  $$arith2 = ($18*160)|0;
  $$overflow3 = ($18>>>0)>(26843545);
  $19 = $$overflow3 ? -1 : $$arith2;
  $20 = (__Znaj($19)|0);
  $21 = (($4) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = (($4) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = (__ZN10b2CLDevice8instanceEv()|0);
   $26 = (($4) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($25,$27);
  }
  $28 = (__ZN10b2CLDevice8instanceEv()|0);
  $29 = $1;
  $30 = (($29) + 103084|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31*160)|0;
  $33 = (__ZN10b2CLDevice13allocateArrayEjb($28,$32,0)|0);
  $34 = (($4) + 56|0);
  HEAP32[$34>>2] = $33;
  $35 = (($4) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = (($4) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    __ZdaPv($39);
   }
  }
  $41 = $1;
  $42 = (($41) + 103084|0);
  $43 = HEAP32[$42>>2]|0;
  $$arith = $43<<2;
  $$overflow = ($43>>>0)>(1073741823);
  $44 = $$overflow ? -1 : $$arith;
  $45 = (__Znaj($44)|0);
  $46 = (($4) + 16|0);
  HEAP32[$46>>2] = $45;
  $47 = (($4) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = (__ZN10b2CLDevice8instanceEv()|0);
   $51 = (($4) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($50,$52);
  }
  $53 = (__ZN10b2CLDevice8instanceEv()|0);
  $54 = $1;
  $55 = (($54) + 103084|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56<<2;
  $58 = (__ZN10b2CLDevice13allocateArrayEjb($53,$57,0)|0);
  $59 = (($4) + 60|0);
  HEAP32[$59>>2] = $58;
  $60 = HEAP8[3200>>0]|0;
  $61 = $60&1;
  if ($61) {
   $62 = $1;
   $63 = (($62) + 103084|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64*10)|0;
   $maxContactCount = $65;
   $66 = (($4) + 80|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)!=(0|0);
   if ($68) {
    $69 = (__ZN10b2CLDevice8instanceEv()|0);
    $70 = (($4) + 80|0);
    $71 = HEAP32[$70>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($69,$71);
   }
   $72 = (__ZN10b2CLDevice8instanceEv()|0);
   $73 = $maxContactCount;
   $74 = $73<<4;
   $75 = (__ZN10b2CLDevice13allocateArrayEjb($72,$74,0)|0);
   $76 = (($4) + 80|0);
   HEAP32[$76>>2] = $75;
   $77 = (($4) + 84|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(0|0);
   if ($79) {
    $80 = (__ZN10b2CLDevice8instanceEv()|0);
    $81 = (($4) + 84|0);
    $82 = HEAP32[$81>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($80,$82);
   }
   $83 = (__ZN10b2CLDevice8instanceEv()|0);
   $84 = $maxContactCount;
   $85 = $84<<2;
   $86 = ($85*5)|0;
   $87 = (__ZN10b2CLDevice13allocateArrayEjb($83,$86,0)|0);
   $88 = (($4) + 84|0);
   HEAP32[$88>>2] = $87;
   $89 = (($4) + 88|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)!=(0|0);
   if ($91) {
    $92 = (__ZN10b2CLDevice8instanceEv()|0);
    $93 = (($4) + 88|0);
    $94 = HEAP32[$93>>2]|0;
    __ZN10b2CLDevice9freeArrayEP7_cl_mem($92,$94);
   }
   $95 = (__ZN10b2CLDevice8instanceEv()|0);
   $96 = $maxContactCount;
   $97 = $96<<2;
   $98 = ($97*5)|0;
   $99 = (__ZN10b2CLDevice13allocateArrayEjb($95,$98,0)|0);
   $100 = (($4) + 88|0);
   HEAP32[$100>>2] = $99;
  }
  $101 = $1;
  $102 = (($101) + 103084|0);
  $103 = HEAP32[$102>>2]|0;
  HEAP32[$4>>2] = $103;
 }
 $shape_index = 0;
 $body_index = 0;
 $104 = $1;
 $105 = (($104) + 103068|0);
 $106 = HEAP32[$105>>2]|0;
 $b = $106;
 L34: while(1) {
  $107 = $b;
  $108 = ($107|0)!=(0|0);
  if (!($108)) {
   label = 54;
   break;
  }
  $109 = $b;
  $110 = (($109) + 108|0);
  $111 = HEAP32[$110>>2]|0;
  $f = $111;
  while(1) {
   $112 = $f;
   $113 = ($112|0)!=(0|0);
   if (!($113)) {
    break;
   }
   $114 = $f;
   $115 = (($114) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $s = $116;
   $117 = $f;
   $118 = (($117) + 40|0);
   $119 = HEAP16[$118>>1]|0;
   $120 = $shape_index;
   $121 = (($4) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + (($120*160)|0)|0);
   $124 = (($123) + 152|0);
   HEAP16[$124>>1] = $119;
   $125 = $f;
   $126 = (($125) + 40|0);
   $127 = (($126) + 4|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $shape_index;
   $130 = (($4) + 12|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + (($129*160)|0)|0);
   $133 = (($132) + 152|0);
   $134 = (($133) + 4|0);
   HEAP16[$134>>1] = $128;
   $135 = $f;
   $136 = (($135) + 40|0);
   $137 = (($136) + 2|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $shape_index;
   $140 = (($4) + 12|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + (($139*160)|0)|0);
   $143 = (($142) + 152|0);
   $144 = (($143) + 2|0);
   HEAP16[$144>>1] = $138;
   $145 = $s;
   $146 = (($145) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   if ((($147|0) == 1)) {
    $219 = $s;
    $se = $219;
    $220 = $se;
    $221 = (($220) + 44|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222&1;
    $224 = (+($223&1));
    $225 = $shape_index;
    $226 = (($4) + 12|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (($227) + (($225*160)|0)|0);
    HEAPF32[$228>>2] = $224;
    $229 = $se;
    $230 = (($229) + 45|0);
    $231 = HEAP8[$230>>0]|0;
    $232 = $231&1;
    $233 = (+($232&1));
    $234 = $shape_index;
    $235 = (($4) + 12|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + (($234*160)|0)|0);
    $238 = (($237) + 4|0);
    HEAPF32[$238>>2] = $233;
    $239 = $se;
    $240 = (($239) + 12|0);
    $241 = +HEAPF32[$240>>2];
    $242 = $shape_index;
    $243 = (($4) + 12|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) + (($242*160)|0)|0);
    $246 = (($245) + 8|0);
    HEAPF32[$246>>2] = $241;
    $247 = $se;
    $248 = (($247) + 12|0);
    $249 = (($248) + 4|0);
    $250 = +HEAPF32[$249>>2];
    $251 = $shape_index;
    $252 = (($4) + 12|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + (($251*160)|0)|0);
    $255 = (($254) + 8|0);
    $256 = (($255) + 4|0);
    HEAPF32[$256>>2] = $250;
    $257 = $se;
    $258 = (($257) + 20|0);
    $259 = +HEAPF32[$258>>2];
    $260 = $shape_index;
    $261 = (($4) + 12|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + (($260*160)|0)|0);
    $264 = (($263) + 8|0);
    $265 = (($264) + 8|0);
    HEAPF32[$265>>2] = $259;
    $266 = $se;
    $267 = (($266) + 20|0);
    $268 = (($267) + 4|0);
    $269 = +HEAPF32[$268>>2];
    $270 = $shape_index;
    $271 = (($4) + 12|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($272) + (($270*160)|0)|0);
    $274 = (($273) + 8|0);
    $275 = (($274) + 8|0);
    $276 = (($275) + 4|0);
    HEAPF32[$276>>2] = $269;
    $277 = $se;
    $278 = (($277) + 44|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&1;
    if ($280) {
     $281 = $se;
     $282 = (($281) + 28|0);
     $283 = +HEAPF32[$282>>2];
     $284 = $shape_index;
     $285 = (($4) + 12|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = (($286) + (($284*160)|0)|0);
     $288 = (($287) + 8|0);
     $289 = (($288) + 16|0);
     HEAPF32[$289>>2] = $283;
     $290 = $se;
     $291 = (($290) + 28|0);
     $292 = (($291) + 4|0);
     $293 = +HEAPF32[$292>>2];
     $294 = $shape_index;
     $295 = (($4) + 12|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + (($294*160)|0)|0);
     $298 = (($297) + 8|0);
     $299 = (($298) + 16|0);
     $300 = (($299) + 4|0);
     HEAPF32[$300>>2] = $293;
    }
    $301 = $se;
    $302 = (($301) + 45|0);
    $303 = HEAP8[$302>>0]|0;
    $304 = $303&1;
    if ($304) {
     $305 = $se;
     $306 = (($305) + 36|0);
     $307 = +HEAPF32[$306>>2];
     $308 = $shape_index;
     $309 = (($4) + 12|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = (($310) + (($308*160)|0)|0);
     $312 = (($311) + 8|0);
     $313 = (($312) + 24|0);
     HEAPF32[$313>>2] = $307;
     $314 = $se;
     $315 = (($314) + 36|0);
     $316 = (($315) + 4|0);
     $317 = +HEAPF32[$316>>2];
     $318 = $shape_index;
     $319 = (($4) + 12|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = (($320) + (($318*160)|0)|0);
     $322 = (($321) + 8|0);
     $323 = (($322) + 24|0);
     $324 = (($323) + 4|0);
     HEAPF32[$324>>2] = $317;
    }
    $325 = $s;
    $326 = (($325) + 4|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $shape_index;
    $329 = (($4) + 12|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + (($328*160)|0)|0);
    $332 = (($331) + 136|0);
    HEAP32[$332>>2] = $327;
    $333 = $s;
    $334 = (($333) + 8|0);
    $335 = +HEAPF32[$334>>2];
    $336 = $shape_index;
    $337 = (($4) + 12|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = (($338) + (($336*160)|0)|0);
    $340 = (($339) + 140|0);
    HEAPF32[$340>>2] = $335;
    $341 = $f;
    $342 = (__ZNK9b2Fixture8IsSensorEv($341)|0);
    $343 = $342&1;
    $344 = $shape_index;
    $345 = (($4) + 12|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($346) + (($344*160)|0)|0);
    $348 = (($347) + 148|0);
    HEAP32[$348>>2] = $343;
    $349 = $body_index;
    $350 = $shape_index;
    $351 = (($4) + 16|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($350<<2)|0);
    HEAP32[$353>>2] = $349;
    $354 = $shape_index;
    $355 = (($354) + 1)|0;
    $shape_index = $355;
   } else if ((($147|0) == 2)) {
    $356 = $s;
    $sp = $356;
    $357 = $sp;
    $358 = (($357) + 12|0);
    $359 = +HEAPF32[$358>>2];
    $360 = $shape_index;
    $361 = (($4) + 12|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = (($362) + (($360*160)|0)|0);
    HEAPF32[$363>>2] = $359;
    $364 = $sp;
    $365 = (($364) + 12|0);
    $366 = (($365) + 4|0);
    $367 = +HEAPF32[$366>>2];
    $368 = $shape_index;
    $369 = (($4) + 12|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = (($370) + (($368*160)|0)|0);
    $372 = (($371) + 4|0);
    HEAPF32[$372>>2] = $367;
    $i = 0;
    while(1) {
     $373 = $i;
     $374 = $sp;
     $375 = (($374) + 148|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = ($373|0)<($376|0);
     if (!($377)) {
      break;
     }
     $378 = $i;
     $379 = $sp;
     $380 = (($379) + 20|0);
     $381 = (($380) + ($378<<3)|0);
     $382 = +HEAPF32[$381>>2];
     $383 = $i;
     $384 = $shape_index;
     $385 = (($4) + 12|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = (($386) + (($384*160)|0)|0);
     $388 = (($387) + 8|0);
     $389 = (($388) + ($383<<3)|0);
     HEAPF32[$389>>2] = $382;
     $390 = $i;
     $391 = $sp;
     $392 = (($391) + 20|0);
     $393 = (($392) + ($390<<3)|0);
     $394 = (($393) + 4|0);
     $395 = +HEAPF32[$394>>2];
     $396 = $i;
     $397 = $shape_index;
     $398 = (($4) + 12|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = (($399) + (($397*160)|0)|0);
     $401 = (($400) + 8|0);
     $402 = (($401) + ($396<<3)|0);
     $403 = (($402) + 4|0);
     HEAPF32[$403>>2] = $395;
     $404 = $i;
     $405 = $sp;
     $406 = (($405) + 84|0);
     $407 = (($406) + ($404<<3)|0);
     $408 = +HEAPF32[$407>>2];
     $409 = $i;
     $410 = $shape_index;
     $411 = (($4) + 12|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = (($412) + (($410*160)|0)|0);
     $414 = (($413) + 72|0);
     $415 = (($414) + ($409<<3)|0);
     HEAPF32[$415>>2] = $408;
     $416 = $i;
     $417 = $sp;
     $418 = (($417) + 84|0);
     $419 = (($418) + ($416<<3)|0);
     $420 = (($419) + 4|0);
     $421 = +HEAPF32[$420>>2];
     $422 = $i;
     $423 = $shape_index;
     $424 = (($4) + 12|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = (($425) + (($423*160)|0)|0);
     $427 = (($426) + 72|0);
     $428 = (($427) + ($422<<3)|0);
     $429 = (($428) + 4|0);
     HEAPF32[$429>>2] = $421;
     $430 = $i;
     $431 = (($430) + 1)|0;
     $i = $431;
    }
    $432 = $sp;
    $433 = (($432) + 148|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $shape_index;
    $436 = (($4) + 12|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = (($437) + (($435*160)|0)|0);
    $439 = (($438) + 144|0);
    HEAP32[$439>>2] = $434;
    $440 = $s;
    $441 = (($440) + 4|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $shape_index;
    $444 = (($4) + 12|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = (($445) + (($443*160)|0)|0);
    $447 = (($446) + 136|0);
    HEAP32[$447>>2] = $442;
    $448 = $s;
    $449 = (($448) + 8|0);
    $450 = +HEAPF32[$449>>2];
    $451 = $shape_index;
    $452 = (($4) + 12|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (($453) + (($451*160)|0)|0);
    $455 = (($454) + 140|0);
    HEAPF32[$455>>2] = $450;
    $456 = $f;
    $457 = (__ZNK9b2Fixture8IsSensorEv($456)|0);
    $458 = $457&1;
    $459 = $shape_index;
    $460 = (($4) + 12|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = (($461) + (($459*160)|0)|0);
    $463 = (($462) + 148|0);
    HEAP32[$463>>2] = $458;
    $464 = $body_index;
    $465 = $shape_index;
    $466 = (($4) + 16|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = (($467) + ($465<<2)|0);
    HEAP32[$468>>2] = $464;
    $469 = $shape_index;
    $470 = (($469) + 1)|0;
    $shape_index = $470;
   } else if ((($147|0) == 3)) {
    $471 = $s;
    $sc1 = $471;
    $472 = (__Znwj(48)|0);
    __THREW__ = 0;
    invoke_vi(460,($472|0));
    $473 = __THREW__; __THREW__ = 0;
    $474 = $473&1;
    if ($474) {
     break L34;
    }
    $se2 = $472;
    $i3 = 0;
    while(1) {
     $475 = $i3;
     $476 = $sc1;
     $477 = HEAP32[$476>>2]|0;
     $478 = (($477) + 12|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = (FUNCTION_TABLE_ii[$479 & 1023]($476)|0);
     $481 = ($475|0)<($480|0);
     if (!($481)) {
      break;
     }
     $482 = $sc1;
     $483 = $se2;
     $484 = $i3;
     __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($482,$483,$484);
     $485 = $se2;
     $486 = (($485) + 44|0);
     $487 = HEAP8[$486>>0]|0;
     $488 = $487&1;
     $489 = (+($488&1));
     $490 = $shape_index;
     $491 = (($4) + 12|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = (($492) + (($490*160)|0)|0);
     HEAPF32[$493>>2] = $489;
     $494 = $se2;
     $495 = (($494) + 45|0);
     $496 = HEAP8[$495>>0]|0;
     $497 = $496&1;
     $498 = (+($497&1));
     $499 = $shape_index;
     $500 = (($4) + 12|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = (($501) + (($499*160)|0)|0);
     $503 = (($502) + 4|0);
     HEAPF32[$503>>2] = $498;
     $504 = $se2;
     $505 = (($504) + 12|0);
     $506 = +HEAPF32[$505>>2];
     $507 = $shape_index;
     $508 = (($4) + 12|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = (($509) + (($507*160)|0)|0);
     $511 = (($510) + 8|0);
     HEAPF32[$511>>2] = $506;
     $512 = $se2;
     $513 = (($512) + 12|0);
     $514 = (($513) + 4|0);
     $515 = +HEAPF32[$514>>2];
     $516 = $shape_index;
     $517 = (($4) + 12|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = (($518) + (($516*160)|0)|0);
     $520 = (($519) + 8|0);
     $521 = (($520) + 4|0);
     HEAPF32[$521>>2] = $515;
     $522 = $se2;
     $523 = (($522) + 20|0);
     $524 = +HEAPF32[$523>>2];
     $525 = $shape_index;
     $526 = (($4) + 12|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = (($527) + (($525*160)|0)|0);
     $529 = (($528) + 8|0);
     $530 = (($529) + 8|0);
     HEAPF32[$530>>2] = $524;
     $531 = $se2;
     $532 = (($531) + 20|0);
     $533 = (($532) + 4|0);
     $534 = +HEAPF32[$533>>2];
     $535 = $shape_index;
     $536 = (($4) + 12|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = (($537) + (($535*160)|0)|0);
     $539 = (($538) + 8|0);
     $540 = (($539) + 8|0);
     $541 = (($540) + 4|0);
     HEAPF32[$541>>2] = $534;
     $542 = $se2;
     $543 = (($542) + 44|0);
     $544 = HEAP8[$543>>0]|0;
     $545 = $544&1;
     if ($545) {
      $546 = $se2;
      $547 = (($546) + 28|0);
      $548 = +HEAPF32[$547>>2];
      $549 = $shape_index;
      $550 = (($4) + 12|0);
      $551 = HEAP32[$550>>2]|0;
      $552 = (($551) + (($549*160)|0)|0);
      $553 = (($552) + 8|0);
      $554 = (($553) + 16|0);
      HEAPF32[$554>>2] = $548;
      $555 = $se2;
      $556 = (($555) + 28|0);
      $557 = (($556) + 4|0);
      $558 = +HEAPF32[$557>>2];
      $559 = $shape_index;
      $560 = (($4) + 12|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = (($561) + (($559*160)|0)|0);
      $563 = (($562) + 8|0);
      $564 = (($563) + 16|0);
      $565 = (($564) + 4|0);
      HEAPF32[$565>>2] = $558;
     }
     $568 = $se2;
     $569 = (($568) + 45|0);
     $570 = HEAP8[$569>>0]|0;
     $571 = $570&1;
     if ($571) {
      $572 = $se2;
      $573 = (($572) + 36|0);
      $574 = +HEAPF32[$573>>2];
      $575 = $shape_index;
      $576 = (($4) + 12|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = (($577) + (($575*160)|0)|0);
      $579 = (($578) + 8|0);
      $580 = (($579) + 24|0);
      HEAPF32[$580>>2] = $574;
      $581 = $se2;
      $582 = (($581) + 36|0);
      $583 = (($582) + 4|0);
      $584 = +HEAPF32[$583>>2];
      $585 = $shape_index;
      $586 = (($4) + 12|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($587) + (($585*160)|0)|0);
      $589 = (($588) + 8|0);
      $590 = (($589) + 24|0);
      $591 = (($590) + 4|0);
      HEAPF32[$591>>2] = $584;
     }
     $592 = $shape_index;
     $593 = (($4) + 12|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = (($594) + (($592*160)|0)|0);
     $596 = (($595) + 136|0);
     HEAP32[$596>>2] = 1;
     $597 = $s;
     $598 = (($597) + 8|0);
     $599 = +HEAPF32[$598>>2];
     $600 = $shape_index;
     $601 = (($4) + 12|0);
     $602 = HEAP32[$601>>2]|0;
     $603 = (($602) + (($600*160)|0)|0);
     $604 = (($603) + 140|0);
     HEAPF32[$604>>2] = $599;
     $605 = $f;
     $606 = (__ZNK9b2Fixture8IsSensorEv($605)|0);
     $607 = $606&1;
     $608 = $shape_index;
     $609 = (($4) + 12|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = (($610) + (($608*160)|0)|0);
     $612 = (($611) + 148|0);
     HEAP32[$612>>2] = $607;
     $613 = $f;
     $614 = (($613) + 40|0);
     $615 = HEAP16[$614>>1]|0;
     $616 = $shape_index;
     $617 = (($4) + 12|0);
     $618 = HEAP32[$617>>2]|0;
     $619 = (($618) + (($616*160)|0)|0);
     $620 = (($619) + 152|0);
     HEAP16[$620>>1] = $615;
     $621 = $f;
     $622 = (($621) + 40|0);
     $623 = (($622) + 4|0);
     $624 = HEAP16[$623>>1]|0;
     $625 = $shape_index;
     $626 = (($4) + 12|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = (($627) + (($625*160)|0)|0);
     $629 = (($628) + 152|0);
     $630 = (($629) + 4|0);
     HEAP16[$630>>1] = $624;
     $631 = $f;
     $632 = (($631) + 40|0);
     $633 = (($632) + 2|0);
     $634 = HEAP16[$633>>1]|0;
     $635 = $shape_index;
     $636 = (($4) + 12|0);
     $637 = HEAP32[$636>>2]|0;
     $638 = (($637) + (($635*160)|0)|0);
     $639 = (($638) + 152|0);
     $640 = (($639) + 2|0);
     HEAP16[$640>>1] = $634;
     $641 = $body_index;
     $642 = $shape_index;
     $643 = (($4) + 16|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = (($644) + ($642<<2)|0);
     HEAP32[$645>>2] = $641;
     $646 = $shape_index;
     $647 = (($646) + 1)|0;
     $shape_index = $647;
     $648 = $i3;
     $649 = (($648) + 1)|0;
     $i3 = $649;
    }
   } else if ((($147|0) == 0)) {
    $148 = $s;
    $sc = $148;
    $149 = $sc;
    $150 = (($149) + 12|0);
    $151 = +HEAPF32[$150>>2];
    $152 = $shape_index;
    $153 = (($4) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($154) + (($152*160)|0)|0);
    HEAPF32[$155>>2] = $151;
    $156 = $sc;
    $157 = (($156) + 12|0);
    $158 = (($157) + 4|0);
    $159 = +HEAPF32[$158>>2];
    $160 = $shape_index;
    $161 = (($4) + 12|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + (($160*160)|0)|0);
    $164 = (($163) + 4|0);
    HEAPF32[$164>>2] = $159;
    $165 = $sc;
    $166 = (($165) + 12|0);
    $167 = +HEAPF32[$166>>2];
    $168 = $shape_index;
    $169 = (($4) + 12|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) + (($168*160)|0)|0);
    $172 = (($171) + 8|0);
    HEAPF32[$172>>2] = $167;
    $173 = $sc;
    $174 = (($173) + 12|0);
    $175 = (($174) + 4|0);
    $176 = +HEAPF32[$175>>2];
    $177 = $shape_index;
    $178 = (($4) + 12|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + (($177*160)|0)|0);
    $181 = (($180) + 8|0);
    $182 = (($181) + 4|0);
    HEAPF32[$182>>2] = $176;
    $183 = $shape_index;
    $184 = (($4) + 12|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + (($183*160)|0)|0);
    $187 = (($186) + 144|0);
    HEAP32[$187>>2] = 1;
    $188 = $s;
    $189 = (($188) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $shape_index;
    $192 = (($4) + 12|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + (($191*160)|0)|0);
    $195 = (($194) + 136|0);
    HEAP32[$195>>2] = $190;
    $196 = $s;
    $197 = (($196) + 8|0);
    $198 = +HEAPF32[$197>>2];
    $199 = $shape_index;
    $200 = (($4) + 12|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + (($199*160)|0)|0);
    $203 = (($202) + 140|0);
    HEAPF32[$203>>2] = $198;
    $204 = $f;
    $205 = (__ZNK9b2Fixture8IsSensorEv($204)|0);
    $206 = $205&1;
    $207 = $shape_index;
    $208 = (($4) + 12|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + (($207*160)|0)|0);
    $211 = (($210) + 148|0);
    HEAP32[$211>>2] = $206;
    $212 = $body_index;
    $213 = $shape_index;
    $214 = (($4) + 16|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (($215) + ($213<<2)|0);
    HEAP32[$216>>2] = $212;
    $217 = $shape_index;
    $218 = (($217) + 1)|0;
    $shape_index = $218;
   }
   $650 = $f;
   $651 = (($650) + 4|0);
   $652 = HEAP32[$651>>2]|0;
   $f = $652;
  }
  $653 = $body_index;
  $654 = (($653) + 1)|0;
  $body_index = $654;
  $655 = $b;
  $656 = (($655) + 96|0);
  $657 = HEAP32[$656>>2]|0;
  $b = $657;
 }
 if ((label|0) == 54) {
  $658 = (__ZN10b2CLDevice8instanceEv()|0);
  $659 = (($4) + 56|0);
  $660 = HEAP32[$659>>2]|0;
  $661 = (($4) + 12|0);
  $662 = HEAP32[$661>>2]|0;
  $663 = $1;
  $664 = (($663) + 103084|0);
  $665 = HEAP32[$664>>2]|0;
  $666 = ($665*160)|0;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($658,$660,$662,0,$666);
  $667 = (__ZN10b2CLDevice8instanceEv()|0);
  $668 = (($4) + 60|0);
  $669 = HEAP32[$668>>2]|0;
  $670 = (($4) + 16|0);
  $671 = HEAP32[$670>>2]|0;
  $672 = $1;
  $673 = (($672) + 103084|0);
  $674 = HEAP32[$673>>2]|0;
  $675 = $674<<2;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($667,$669,$671,0,$675);
  STACKTOP = sp;return;
 }
 $566 = ___cxa_find_matching_catch()|0;
 $567 = tempRet0;
 $2 = $566;
 $3 = $567;
 __ZdlPv($472);
 $676 = $2;
 $677 = $3;
 ___resumeException($676|0);
 // unreachable;
}
function __ZN14b2CLCommonData27CopyStaticFixtureAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $f = 0, $fixture_index = 0, $i = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 103084|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 if ($8) {
  $9 = (($2) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = (($2) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __ZdaPv($13);
   }
  }
  $15 = $1;
  $16 = (($15) + 103084|0);
  $17 = HEAP32[$16>>2]|0;
  $$arith = $17<<4;
  $$overflow = ($17>>>0)>(268435455);
  $18 = $$overflow ? -1 : $$arith;
  $19 = (__Znaj($18)|0);
  $20 = (($2) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = (($2) + 68|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = (__ZN10b2CLDevice8instanceEv()|0);
   $25 = (($2) + 68|0);
   $26 = HEAP32[$25>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($24,$26);
  }
  $27 = (__ZN10b2CLDevice8instanceEv()|0);
  $28 = $1;
  $29 = (($28) + 103084|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<4;
  $32 = (__ZN10b2CLDevice13allocateArrayEjb($27,$31,0)|0);
  $33 = (($2) + 68|0);
  HEAP32[$33>>2] = $32;
  $34 = $1;
  $35 = (($34) + 103084|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($2) + 4|0);
  HEAP32[$37>>2] = $36;
 }
 $fixture_index = 0;
 $38 = $1;
 $39 = (($38) + 103068|0);
 $40 = HEAP32[$39>>2]|0;
 $b = $40;
 while(1) {
  $41 = $b;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   break;
  }
  $43 = $b;
  $44 = (($43) + 108|0);
  $45 = HEAP32[$44>>2]|0;
  $f = $45;
  while(1) {
   $46 = $f;
   $47 = ($46|0)!=(0|0);
   if (!($47)) {
    break;
   }
   $48 = $f;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $s = $50;
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = $s;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
    $57 = ($51|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $f;
    $59 = (($58) + 32|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $i;
    $62 = (($60) + (($61*36)|0)|0);
    $p = $62;
    $63 = $p;
    $64 = (($63) + 28|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $p;
    $67 = (($66) + 32|0);
    HEAP32[$67>>2] = $65;
    $68 = $f;
    $69 = (($68) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $f;
    $72 = (($71) + 20|0);
    HEAP32[$72>>2] = $70;
    $73 = $f;
    $74 = (($73) + 24|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $fixture_index;
    $77 = (($2) + 20|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($76<<4)|0);
    HEAPF32[$79>>2] = $75;
    $80 = $f;
    $81 = (($80) + 28|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $fixture_index;
    $84 = (($2) + 20|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + ($83<<4)|0);
    $87 = (($86) + 4|0);
    HEAPF32[$87>>2] = $82;
    $88 = $p;
    $89 = (($88) + 32|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $fixture_index;
    $92 = (($2) + 20|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($91<<4)|0);
    $95 = (($94) + 8|0);
    HEAP32[$95>>2] = $90;
    $96 = $fixture_index;
    $97 = $p;
    $98 = (($97) + 28|0);
    HEAP32[$98>>2] = $96;
    $99 = $fixture_index;
    $100 = $f;
    $101 = (($100) + 16|0);
    HEAP32[$101>>2] = $99;
    $102 = $fixture_index;
    $103 = (($102) + 1)|0;
    $fixture_index = $103;
    $104 = $i;
    $105 = (($104) + 1)|0;
    $i = $105;
   }
   $106 = $f;
   $107 = (($106) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $f = $108;
  }
  $109 = $b;
  $110 = (($109) + 96|0);
  $111 = HEAP32[$110>>2]|0;
  $b = $111;
 }
 $112 = $fixture_index;
 $113 = $1;
 $114 = (($113) + 103084|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($112|0)<=($115|0);
 if ($116) {
  $117 = (__ZN10b2CLDevice8instanceEv()|0);
  $118 = (($2) + 68|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($2) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $1;
  $123 = (($122) + 103084|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $124<<4;
  __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($117,$119,$121,0,$125);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7088|0),(7128|0),392,(7216|0));
  // unreachable;
 }
}
function __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b2 = 0, $body_index = 0, $connectedArrayPos = 0, $i = 0, $i5 = 0, $indices = 0;
 var $indices1 = 0, $indices4 = 0, $jn = 0, $jn3 = 0, $jointToBodyMap = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 48|0;
 $1 = sp + 40|0;
 $4 = sp + 244|0;
 $9 = sp + 96|0;
 $10 = sp + 104|0;
 $16 = sp + 148|0;
 $17 = sp + 8|0;
 $23 = sp + 24|0;
 $33 = sp + 220|0;
 $35 = sp;
 $38 = sp + 248|0;
 $40 = sp + 32|0;
 $42 = sp + 396|0;
 $43 = sp + 397|0;
 $jointToBodyMap = sp + 284|0;
 $48 = sp + 312|0;
 $49 = sp + 316|0;
 $50 = sp + 184|0;
 $indices = sp + 56|0;
 $51 = sp + 72|0;
 $52 = sp + 328|0;
 $53 = sp + 192|0;
 $54 = sp + 320|0;
 $55 = sp + 208|0;
 $56 = sp + 268|0;
 $44 = $this;
 $45 = $m_pWorld;
 $57 = $44;
 $58 = (($57) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $45;
 $61 = (($60) + 103076|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($59|0)<($62|0);
 if ($63) {
  $64 = (($57) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0|0);
  if ($66) {
   $67 = (($57) + 24|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(0|0);
   if (!($69)) {
    __ZdaPv($68);
   }
  }
  $70 = $45;
  $71 = (($70) + 103076|0);
  $72 = HEAP32[$71>>2]|0;
  $$arith6 = ($72*72)|0;
  $$overflow7 = ($72>>>0)>(59652323);
  $73 = $$overflow7 ? -1 : $$arith6;
  $74 = (__Znaj($73)|0);
  $75 = (($57) + 24|0);
  HEAP32[$75>>2] = $74;
  $76 = (($57) + 72|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)!=(0|0);
  if ($78) {
   $79 = (__ZN10b2CLDevice8instanceEv()|0);
   $80 = (($57) + 72|0);
   $81 = HEAP32[$80>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($79,$81);
  }
  $82 = (__ZN10b2CLDevice8instanceEv()|0);
  $83 = $45;
  $84 = (($83) + 103076|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85*72)|0;
  $87 = (__ZN10b2CLDevice13allocateArrayEjb($82,$86,0)|0);
  $88 = (($57) + 72|0);
  HEAP32[$88>>2] = $87;
  $89 = (($57) + 28|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)!=(0|0);
  if ($91) {
   $92 = (($57) + 28|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(0|0);
   if (!($94)) {
    __ZdaPv($93);
   }
  }
  $95 = $45;
  $96 = (($95) + 103076|0);
  $97 = HEAP32[$96>>2]|0;
  $$arith2 = $97<<4;
  $$overflow3 = ($97>>>0)>(268435455);
  $98 = $$overflow3 ? -1 : $$arith2;
  $99 = (__Znaj($98)|0);
  $100 = (($57) + 28|0);
  HEAP32[$100>>2] = $99;
  $101 = (($57) + 64|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $104 = (__ZN10b2CLDevice8instanceEv()|0);
   $105 = (($57) + 64|0);
   $106 = HEAP32[$105>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($104,$106);
  }
  $107 = (__ZN10b2CLDevice8instanceEv()|0);
  $108 = $45;
  $109 = (($108) + 103076|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $110<<4;
  $112 = (__ZN10b2CLDevice13allocateArrayEjb($107,$111,0)|0);
  $113 = (($57) + 64|0);
  HEAP32[$113>>2] = $112;
  $114 = (($57) + 32|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)!=(0|0);
  if ($116) {
   $117 = (($57) + 32|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0|0);
   if (!($119)) {
    __ZdaPv($118);
   }
  }
  $120 = $45;
  $121 = (($120) + 103076|0);
  $122 = HEAP32[$121>>2]|0;
  $$arith = ($122*72)|0;
  $$overflow = ($122>>>0)>(59652323);
  $123 = $$overflow ? -1 : $$arith;
  $124 = (__Znaj($123)|0);
  $125 = (($57) + 32|0);
  HEAP32[$125>>2] = $124;
  $126 = (($57) + 76|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)!=(0|0);
  if ($128) {
   $129 = (__ZN10b2CLDevice8instanceEv()|0);
   $130 = (($57) + 76|0);
   $131 = HEAP32[$130>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($129,$131);
  }
  $132 = (__ZN10b2CLDevice8instanceEv()|0);
  $133 = $45;
  $134 = (($133) + 103076|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135*72)|0;
  $137 = (__ZN10b2CLDevice13allocateArrayEjb($132,$136,0)|0);
  $138 = (($57) + 76|0);
  HEAP32[$138>>2] = $137;
  $139 = $45;
  $140 = (($139) + 103076|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($57) + 8|0);
  HEAP32[$142>>2] = $141;
 }
 $41 = $jointToBodyMap;
 $143 = $41;
 ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
 $39 = $42;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEEC2ERKSA_($143,$42);
 $body_index = 0;
 $144 = $45;
 $145 = (($144) + 103068|0);
 $146 = HEAP32[$145>>2]|0;
 $b = $146;
 L31: while(1) {
  $147 = $b;
  $148 = ($147|0)!=(0|0);
  if (!($148)) {
   label = 49;
   break;
  }
  $149 = $b;
  $150 = (($149) + 28|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $body_index;
  $153 = (($57) + 24|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + (($152*72)|0)|0);
  HEAPF32[$155>>2] = $151;
  $156 = $b;
  $157 = (($156) + 28|0);
  $158 = (($157) + 4|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $body_index;
  $161 = (($57) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + (($160*72)|0)|0);
  $164 = (($163) + 4|0);
  HEAPF32[$164>>2] = $159;
  $165 = $b;
  $166 = (($165) + 128|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $body_index;
  $169 = (($57) + 24|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($168*72)|0)|0);
  $172 = (($171) + 8|0);
  HEAPF32[$172>>2] = $167;
  $173 = $b;
  $174 = (($173) + 136|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $body_index;
  $177 = (($57) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + (($176*72)|0)|0);
  $180 = (($179) + 12|0);
  HEAPF32[$180>>2] = $175;
  $181 = $b;
  $182 = (($181) + 140|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $body_index;
  $185 = (($57) + 24|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + (($184*72)|0)|0);
  $188 = (($187) + 16|0);
  HEAPF32[$188>>2] = $183;
  $189 = $b;
  $190 = (($189) + 144|0);
  $191 = +HEAPF32[$190>>2];
  $192 = $body_index;
  $193 = (($57) + 24|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + (($192*72)|0)|0);
  $196 = (($195) + 20|0);
  HEAPF32[$196>>2] = $191;
  $197 = $b;
  $198 = (($197) + 148|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $body_index;
  $201 = (($57) + 24|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + (($200*72)|0)|0);
  $204 = (($203) + 24|0);
  HEAPF32[$204>>2] = $199;
  $205 = $b;
  $206 = HEAP32[$205>>2]|0;
  $207 = (+($206>>>0));
  $208 = $body_index;
  $209 = (($57) + 24|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($208*72)|0)|0);
  $212 = (($211) + 28|0);
  HEAPF32[$212>>2] = $207;
  $213 = $b;
  __THREW__ = 0;
  $214 = (invoke_ii(461,($213|0))|0);
  $215 = __THREW__; __THREW__ = 0;
  $216 = $215&1;
  if ($216) {
   break;
  }
  $217 = $214 ? 1 : 0;
  $218 = $body_index;
  $219 = (($57) + 24|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + (($218*72)|0)|0);
  $222 = (($221) + 64|0);
  HEAP32[$222>>2] = $217;
  $223 = $b;
  $224 = (($223) + 116|0);
  $225 = HEAP32[$224>>2]|0;
  $jn = $225;
  while(1) {
   $226 = $jn;
   $227 = ($226|0)!=(0|0);
   if (!($227)) {
    break;
   }
   $228 = $jn;
   $229 = (($228) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   HEAP32[$49>>2] = $230;
   $36 = $jointToBodyMap;
   $37 = $49;
   $231 = $36;
   $232 = $37;
   __THREW__ = 0;
   invoke_viii(462,($38|0),($231|0),($232|0));
   $233 = __THREW__; __THREW__ = 0;
   $234 = $233&1;
   if ($234) {
    break L31;
   }
   ;HEAP8[$35+0>>0]=HEAP8[$38+0>>0]|0;HEAP8[$35+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$38+3>>0]|0;
   $34 = $48;
   $235 = $34;
   ;HEAP32[$235+0>>2]=HEAP32[$35+0>>2]|0;
   $32 = $jointToBodyMap;
   $236 = $32;
   $31 = $236;
   $237 = $31;
   $30 = $237;
   $238 = $30;
   $239 = (($238) + 4|0);
   $29 = $239;
   $240 = $29;
   $28 = $240;
   $241 = $28;
   $27 = $241;
   $242 = $27;
   $26 = $242;
   $243 = $26;
   $24 = $33;
   $25 = $243;
   $244 = $24;
   $245 = $25;
   HEAP32[$244>>2] = $245;
   ;HEAP8[$23+0>>0]=HEAP8[$33+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$33+3>>0]|0;
   $22 = $50;
   $246 = $22;
   ;HEAP32[$246+0>>2]=HEAP32[$23+0>>2]|0;
   $20 = $48;
   $21 = $50;
   $247 = $20;
   $248 = $21;
   $18 = $247;
   $19 = $248;
   $249 = $18;
   $250 = HEAP32[$249>>2]|0;
   $251 = $19;
   $252 = HEAP32[$251>>2]|0;
   $253 = ($250|0)==($252|0);
   if ($253) {
    __THREW__ = 0;
    invoke_vi(463,($indices|0));
    $254 = __THREW__; __THREW__ = 0;
    $255 = $254&1;
    if ($255) {
     break L31;
    }
    $256 = $body_index;
    HEAP32[$indices>>2] = $256;
    $257 = $jn;
    $258 = (($257) + 4|0);
    $259 = HEAP32[$258>>2]|0;
    ;HEAP32[$53+0>>2]=HEAP32[$indices+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$indices+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$indices+8>>2]|0;HEAP32[$53+12>>2]=HEAP32[$indices+12>>2]|0;
    dest=$17+0|0; src=$53+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    HEAP32[$16>>2] = $259;
    $13 = $52;
    $14 = $16;
    $15 = $17;
    $260 = $13;
    $261 = $14;
    $262 = HEAP32[$261>>2]|0;
    HEAP32[$260>>2] = $262;
    $263 = (($260) + 4|0);
    $264 = $15;
    ;HEAP32[$263+0>>2]=HEAP32[$264+0>>2]|0;HEAP32[$263+4>>2]=HEAP32[$264+4>>2]|0;HEAP32[$263+8>>2]=HEAP32[$264+8>>2]|0;HEAP32[$263+12>>2]=HEAP32[$264+12>>2]|0;
    $11 = $51;
    $12 = $52;
    $265 = $11;
    $266 = $12;
    $267 = HEAP32[$266>>2]|0;
    HEAP32[$265>>2] = $267;
    $268 = (($265) + 4|0);
    $269 = $12;
    $270 = (($269) + 4|0);
    ;HEAP32[$268+0>>2]=HEAP32[$270+0>>2]|0;HEAP32[$268+4>>2]=HEAP32[$270+4>>2]|0;HEAP32[$268+8>>2]=HEAP32[$270+8>>2]|0;HEAP32[$268+12>>2]=HEAP32[$270+12>>2]|0;
    $7 = $jointToBodyMap;
    $8 = $51;
    $271 = $7;
    $272 = $8;
    $5 = $10;
    $6 = $272;
    $273 = $5;
    $274 = $6;
    ;HEAP32[$273+0>>2]=HEAP32[$274+0>>2]|0;HEAP32[$273+4>>2]=HEAP32[$274+4>>2]|0;HEAP32[$273+8>>2]=HEAP32[$274+8>>2]|0;HEAP32[$273+12>>2]=HEAP32[$274+12>>2]|0;HEAP32[$273+16>>2]=HEAP32[$274+16>>2]|0;
    __THREW__ = 0;
    invoke_viii(464,($9|0),($271|0),($10|0));
    $275 = __THREW__; __THREW__ = 0;
    $276 = $275&1;
    if ($276) {
     break L31;
    }
    $2 = $54;
    $3 = $9;
    $277 = $2;
    $278 = $3;
    ;HEAP32[$4+0>>2]=HEAP32[$278+0>>2]|0;
    ;HEAP8[$1+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
    $0 = $277;
    $279 = $0;
    ;HEAP32[$279+0>>2]=HEAP32[$1+0>>2]|0;
    $280 = (($277) + 4|0);
    $281 = $3;
    $282 = (($281) + 4|0);
    $283 = HEAP8[$282>>0]|0;
    $284 = $283&1;
    $285 = $284&1;
    HEAP8[$280>>0] = $285;
   } else {
    $290 = $jn;
    $291 = (($290) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    HEAP32[$55>>2] = $292;
    __THREW__ = 0;
    $293 = (invoke_iii(466,($jointToBodyMap|0),($55|0))|0);
    $294 = __THREW__; __THREW__ = 0;
    $295 = $294&1;
    if ($295) {
     break L31;
    }
    $indices1 = $293;
    $i = 1;
    while(1) {
     $296 = $i;
     $297 = ($296|0)<(4);
     if (!($297)) {
      break;
     }
     $298 = $i;
     $299 = $indices1;
     $300 = (($299) + ($298<<2)|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = ($301|0)==(-1);
     if ($302) {
      label = 41;
      break;
     }
     $307 = $i;
     $308 = (($307) + 1)|0;
     $i = $308;
    }
    if ((label|0) == 41) {
     label = 0;
     $303 = $body_index;
     $304 = $i;
     $305 = $indices1;
     $306 = (($305) + ($304<<2)|0);
     HEAP32[$306>>2] = $303;
    }
   }
   $309 = $jn;
   $310 = (($309) + 12|0);
   $311 = HEAP32[$310>>2]|0;
   $jn = $311;
  }
  $312 = $body_index;
  $313 = (($312) + 1)|0;
  $body_index = $313;
  $314 = $b;
  $315 = (($314) + 96|0);
  $316 = HEAP32[$315>>2]|0;
  $b = $316;
 }
 L62: do {
  if ((label|0) == 49) {
   $body_index = 0;
   $317 = $45;
   $318 = (($317) + 103068|0);
   $319 = HEAP32[$318>>2]|0;
   $b2 = $319;
   L64: while(1) {
    $320 = $b2;
    $321 = ($320|0)!=(0|0);
    if (!($321)) {
     label = 74;
     break;
    }
    $connectedArrayPos = 0;
    $322 = $b2;
    $323 = (($322) + 116|0);
    $324 = HEAP32[$323>>2]|0;
    $jn3 = $324;
    while(1) {
     $325 = $jn3;
     $326 = ($325|0)!=(0|0);
     if (!($326)) {
      break;
     }
     $327 = $jn3;
     $328 = (($327) + 4|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + 61|0);
     $331 = HEAP8[$330>>0]|0;
     $332 = $331&1;
     if ($332) {
     } else {
      $333 = $jn3;
      $334 = (($333) + 4|0);
      $335 = HEAP32[$334>>2]|0;
      HEAP32[$56>>2] = $335;
      __THREW__ = 0;
      $336 = (invoke_iii(466,($jointToBodyMap|0),($56|0))|0);
      $337 = __THREW__; __THREW__ = 0;
      $338 = $337&1;
      if ($338) {
       break L62;
      }
      $indices4 = $336;
      $i5 = 0;
      while(1) {
       $339 = $i5;
       $340 = ($339|0)<(4);
       if (!($340)) {
        break;
       }
       $341 = $i5;
       $342 = $indices4;
       $343 = (($342) + ($341<<2)|0);
       $344 = HEAP32[$343>>2]|0;
       $345 = ($344|0)==(-1);
       if ($345) {
        label = 59;
        break;
       }
       $346 = $i5;
       $347 = $indices4;
       $348 = (($347) + ($346<<2)|0);
       $349 = HEAP32[$348>>2]|0;
       $350 = $body_index;
       $351 = ($349|0)>($350|0);
       if ($351) {
        $352 = $connectedArrayPos;
        $353 = ($352|0)==(8);
        if ($353) {
         label = 62;
         break L64;
        }
        $359 = $i5;
        $360 = $indices4;
        $361 = (($360) + ($359<<2)|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = $connectedArrayPos;
        $364 = (($363) + 1)|0;
        $connectedArrayPos = $364;
        $365 = $body_index;
        $366 = (($57) + 24|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = (($367) + (($365*72)|0)|0);
        $369 = (($368) + 32|0);
        $370 = (($369) + ($363<<2)|0);
        HEAP32[$370>>2] = $362;
       }
       $371 = $i5;
       $372 = (($371) + 1)|0;
       $i5 = $372;
      }
      if ((label|0) == 59) {
       label = 0;
      }
     }
     $373 = $jn3;
     $374 = (($373) + 12|0);
     $375 = HEAP32[$374>>2]|0;
     $jn3 = $375;
    }
    $376 = $connectedArrayPos;
    $377 = ($376|0)<(8);
    if ($377) {
     $378 = $connectedArrayPos;
     $379 = $body_index;
     $380 = (($57) + 24|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = (($381) + (($379*72)|0)|0);
     $383 = (($382) + 32|0);
     $384 = (($383) + ($378<<2)|0);
     HEAP32[$384>>2] = -1;
    }
    $385 = $body_index;
    $386 = (($385) + 1)|0;
    $body_index = $386;
    $387 = $b2;
    $388 = (($387) + 96|0);
    $389 = HEAP32[$388>>2]|0;
    $b2 = $389;
   }
   if ((label|0) == 62) {
    $354 = $connectedArrayPos;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $354;
    (invoke_iii(467,(7248|0),($vararg_buffer|0))|0);
    $355 = __THREW__; __THREW__ = 0;
    $356 = $355&1;
    if ($356) {
     break;
    }
    __THREW__ = 0;
    invoke_viiii(468,(7272|0),(7128|0),505,(7280|0));
    $357 = __THREW__; __THREW__ = 0;
    $358 = $357&1;
    if ($358) {
     break;
    }
    // unreachable;
   }
   else if ((label|0) == 74) {
    __THREW__ = 0;
    $390 = (invoke_i(452)|0);
    $391 = __THREW__; __THREW__ = 0;
    $392 = $391&1;
    if ($392) {
     break;
    }
    $393 = (($57) + 72|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = (($57) + 24|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $45;
    $398 = (($397) + 103076|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = ($399*72)|0;
    __THREW__ = 0;
    invoke_viiiii(469,($390|0),($394|0),($396|0),0,($400|0));
    $401 = __THREW__; __THREW__ = 0;
    $402 = $401&1;
    if ($402) {
     break;
    }
    __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev($jointToBodyMap);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $286 = ___cxa_find_matching_catch()|0;
 $287 = tempRet0;
 $46 = $286;
 $47 = $287;
 __THREW__ = 0;
 invoke_vi(465,($jointToBodyMap|0));
 $288 = __THREW__; __THREW__ = 0;
 $289 = $288&1;
 if ($289) {
  $405 = ___cxa_find_matching_catch(0|0)|0;
  $406 = tempRet0;
  ___clang_call_terminate($405);
  // unreachable;
 }
 $403 = $46;
 $404 = $47;
 ___resumeException($403|0);
 // unreachable;
}
function __ZN14b2CLCommonData25CopyDynamicBodyAttributesEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $b = 0, $body_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $body_index = 0;
 $3 = $1;
 $4 = (($3) + 103068|0);
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 while(1) {
  $6 = $b;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $b;
  $9 = (($8) + 100|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $b;
  $12 = (($11) + 104|0);
  HEAP32[$12>>2] = $10;
  $13 = $b;
  $14 = (($13) + 12|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $body_index;
  $17 = (($2) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  HEAPF32[$19>>2] = $15;
  $20 = $b;
  $21 = (($20) + 12|0);
  $22 = (($21) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $body_index;
  $25 = (($2) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24<<4)|0);
  $28 = (($27) + 4|0);
  HEAPF32[$28>>2] = $23;
  $29 = $b;
  $30 = (($29) + 12|0);
  $31 = (($30) + 8|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $body_index;
  $34 = (($2) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($33<<4)|0);
  $37 = (($36) + 8|0);
  HEAPF32[$37>>2] = $32;
  $38 = $b;
  $39 = (($38) + 12|0);
  $40 = (($39) + 8|0);
  $41 = (($40) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $body_index;
  $44 = (($2) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($43<<4)|0);
  $47 = (($46) + 8|0);
  $48 = (($47) + 4|0);
  HEAPF32[$48>>2] = $42;
  $49 = $b;
  $50 = (($49) + 28|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $body_index;
  $53 = (($2) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + (($52*72)|0)|0);
  HEAPF32[$55>>2] = $51;
  $56 = $b;
  $57 = (($56) + 28|0);
  $58 = (($57) + 4|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $body_index;
  $61 = (($2) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + (($60*72)|0)|0);
  $64 = (($63) + 4|0);
  HEAPF32[$64>>2] = $59;
  $65 = $b;
  $66 = (($65) + 28|0);
  $67 = (($66) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $body_index;
  $70 = (($2) + 32|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($69*72)|0)|0);
  $73 = (($72) + 8|0);
  HEAPF32[$73>>2] = $68;
  $74 = $b;
  $75 = (($74) + 28|0);
  $76 = (($75) + 8|0);
  $77 = (($76) + 4|0);
  $78 = +HEAPF32[$77>>2];
  $79 = $body_index;
  $80 = (($2) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($79*72)|0)|0);
  $83 = (($82) + 8|0);
  $84 = (($83) + 4|0);
  HEAPF32[$84>>2] = $78;
  $85 = $b;
  $86 = (($85) + 28|0);
  $87 = (($86) + 16|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $body_index;
  $90 = (($2) + 32|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + (($89*72)|0)|0);
  $93 = (($92) + 16|0);
  HEAPF32[$93>>2] = $88;
  $94 = $b;
  $95 = (($94) + 28|0);
  $96 = (($95) + 16|0);
  $97 = (($96) + 4|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $body_index;
  $100 = (($2) + 32|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + (($99*72)|0)|0);
  $103 = (($102) + 16|0);
  $104 = (($103) + 4|0);
  HEAPF32[$104>>2] = $98;
  $105 = $b;
  $106 = (($105) + 28|0);
  $107 = (($106) + 24|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $body_index;
  $110 = (($2) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + (($109*72)|0)|0);
  $113 = (($112) + 24|0);
  HEAPF32[$113>>2] = $108;
  $114 = $b;
  $115 = (($114) + 28|0);
  $116 = (($115) + 28|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $body_index;
  $119 = (($2) + 32|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($118*72)|0)|0);
  $122 = (($121) + 28|0);
  HEAPF32[$122>>2] = $117;
  $123 = $b;
  $124 = (($123) + 64|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $body_index;
  $127 = (($2) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + (($126*72)|0)|0);
  $130 = (($129) + 40|0);
  HEAPF32[$130>>2] = $125;
  $131 = $b;
  $132 = (($131) + 64|0);
  $133 = (($132) + 4|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $body_index;
  $136 = (($2) + 32|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + (($135*72)|0)|0);
  $139 = (($138) + 40|0);
  $140 = (($139) + 4|0);
  HEAPF32[$140>>2] = $134;
  $141 = $b;
  $142 = (($141) + 76|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $body_index;
  $145 = (($2) + 32|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + (($144*72)|0)|0);
  $148 = (($147) + 48|0);
  HEAPF32[$148>>2] = $143;
  $149 = $b;
  $150 = (($149) + 76|0);
  $151 = (($150) + 4|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $body_index;
  $154 = (($2) + 32|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($153*72)|0)|0);
  $157 = (($156) + 48|0);
  $158 = (($157) + 4|0);
  HEAPF32[$158>>2] = $152;
  $159 = $b;
  $160 = (($159) + 72|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $body_index;
  $163 = (($2) + 32|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + (($162*72)|0)|0);
  $166 = (($165) + 56|0);
  HEAPF32[$166>>2] = $161;
  $167 = $b;
  $168 = (($167) + 84|0);
  $169 = +HEAPF32[$168>>2];
  $170 = $body_index;
  $171 = (($2) + 32|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($170*72)|0)|0);
  $174 = (($173) + 60|0);
  HEAPF32[$174>>2] = $169;
  $175 = $b;
  $176 = (($175) + 104|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $body_index;
  $179 = (($2) + 32|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + (($178*72)|0)|0);
  $182 = (($181) + 64|0);
  HEAP32[$182>>2] = $177;
  $183 = $body_index;
  $184 = $b;
  $185 = (($184) + 100|0);
  HEAP32[$185>>2] = $183;
  $186 = $body_index;
  $187 = (($186) + 1)|0;
  $body_index = $187;
  $188 = $b;
  $189 = (($188) + 96|0);
  $190 = HEAP32[$189>>2]|0;
  $b = $190;
 }
 $191 = (__ZN10b2CLDevice8instanceEv()|0);
 $192 = (($2) + 64|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($2) + 28|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $1;
 $197 = (($196) + 103076|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $198<<4;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($191,$193,$195,0,$199);
 $200 = (__ZN10b2CLDevice8instanceEv()|0);
 $201 = (($2) + 76|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($2) + 32|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $1;
 $206 = (($205) + 103076|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207*72)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($200,$202,$204,0,$208);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData10CopyJointsEP7b2Worldbbb($this,$m_pWorld,$warmStarting,$isJointChanged,$isJointUpdated) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $warmStarting = $warmStarting|0;
 $isJointChanged = $isJointChanged|0;
 $isJointUpdated = $isJointUpdated|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ciErrNum = 0, $currentIndex = 0, $i = 0, $i1 = 0, $i2 = 0, $jointIndex = 0, $jointType = 0, $pJoint = 0, $region = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jointIndex = sp + 52|0;
 $region = sp + 32|0;
 $ciErrNum = sp + 28|0;
 $5 = sp + 8|0;
 $0 = $this;
 $1 = $m_pWorld;
 $6 = $warmStarting&1;
 $2 = $6;
 $7 = $isJointChanged&1;
 $3 = $7;
 $8 = $isJointUpdated&1;
 $4 = $8;
 $9 = $0;
 $10 = $3;
 $11 = $10&1;
 if (!($11)) {
  $12 = $4;
  $13 = $12&1;
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = $3;
 $15 = $14&1;
 if ($15) {
  $16 = $2;
  $17 = $16&1;
  if ($17) {
   __ZN14b2CLCommonData18StoreJointImpulsesEv($9);
  }
  $18 = (($9) + 144|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($9) + 1128|0);
  HEAP32[$20>>2] = $19;
  __ZN14b2CLCommonData12DeleteJointsEv($9);
  $21 = $1;
  $22 = (($21) + 103088|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($9) + 144|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = (($9) + 144|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $pJoint = 0;
 $28 = $3;
 $29 = $28&1;
 do {
  if ($29) {
   $30 = $1;
   $31 = (($30) + 103072|0);
   $32 = HEAP32[$31>>2]|0;
   $pJoint = $32;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = (($9) + 144|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)<($35|0);
    if (!($36)) {
     label = 17;
     break;
    }
    $37 = $pJoint;
    $38 = (__ZNK7b2Joint7GetTypeEv($37)|0);
    $39 = ($38|0)<(11);
    if (!($39)) {
     label = 14;
     break;
    }
    $40 = $pJoint;
    $41 = (__ZNK7b2Joint7GetTypeEv($40)|0);
    $42 = (($9) + 100|0);
    $43 = (($42) + ($41<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[$43>>2] = $45;
    $46 = $pJoint;
    $47 = (__ZN7b2Joint7GetNextEv($46)|0);
    $pJoint = $47;
    $48 = $i;
    $49 = (($48) + 1)|0;
    $i = $49;
   }
   if ((label|0) == 14) {
    ___assert_fail((7312|0),(7128|0),611,(7352|0));
    // unreachable;
   }
   else if ((label|0) == 17) {
    $50 = (($9) + 144|0);
    $51 = HEAP32[$50>>2]|0;
    $$arith = ($51*228)|0;
    $$overflow = ($51>>>0)>(18837575);
    $52 = $$overflow ? -1 : $$arith;
    $53 = (__Znaj($52)|0);
    $54 = (($9) + 148|0);
    HEAP32[$54>>2] = $53;
    $55 = (($9) + 148|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($9) + 144|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58*228)|0;
    _memset(($56|0),0,($59|0))|0;
    $60 = (__ZN10b2CLDevice8instanceEv()|0);
    $61 = (($9) + 144|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62*228)|0;
    $64 = (__ZN10b2CLDevice13allocateArrayEjb($60,$63,0)|0);
    $65 = (($9) + 1076|0);
    HEAP32[$65>>2] = $64;
    break;
   }
  }
 } while(0);
 $currentIndex = 0;
 $i1 = 0;
 while(1) {
  $66 = $i1;
  $67 = ($66|0)<(11);
  if (!($67)) {
   break;
  }
  $68 = $currentIndex;
  $69 = $i1;
  $70 = (($jointIndex) + ($69<<2)|0);
  HEAP32[$70>>2] = $68;
  $71 = $currentIndex;
  $72 = $i1;
  $73 = (($9) + 152|0);
  $74 = (($73) + (($72*80)|0)|0);
  HEAP32[$74>>2] = $71;
  $75 = $i1;
  $76 = (($9) + 100|0);
  $77 = (($76) + ($75<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $currentIndex;
  $80 = (($79) + ($78))|0;
  $currentIndex = $80;
  $81 = $i1;
  $82 = (($81) + 1)|0;
  $i1 = $82;
 }
 $83 = $1;
 $84 = (($83) + 103072|0);
 $85 = HEAP32[$84>>2]|0;
 $pJoint = $85;
 $i2 = 0;
 while(1) {
  $86 = $i2;
  $87 = $1;
  $88 = (($87) + 103088|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($86|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $pJoint;
  $92 = (__ZNK7b2Joint7GetTypeEv($91)|0);
  $jointType = $92;
  $93 = $jointType;
  $94 = (($9) + 1080|0);
  $95 = (($94) + ($93<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)!=(0|0);
  if (!($97)) {
   label = 25;
   break;
  }
  $98 = $jointType;
  $99 = (($9) + 1080|0);
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $pJoint;
  $103 = $jointType;
  $104 = (($jointIndex) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$104>>2] = $106;
  $107 = (($9) + 148|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + (($105*228)|0)|0);
  FUNCTION_TABLE_vii[$101 & 1023]($102,$109);
  $110 = $pJoint;
  $111 = (__ZN7b2Joint7GetNextEv($110)|0);
  $pJoint = $111;
  $112 = $i2;
  $113 = (($112) + 1)|0;
  $i2 = $113;
 }
 if ((label|0) == 25) {
  ___assert_fail((7368|0),(7128|0),635,(7352|0));
  // unreachable;
 }
 $114 = $1;
 __ZN14b2CLCommonData18ComputeJointColorsEP7b2World($9,$114);
 $115 = $3;
 $116 = $115&1;
 if (!($116)) {
  HEAP32[$region>>2] = 208;
  $127 = (($region) + 4|0);
  $128 = (($9) + 144|0);
  $129 = HEAP32[$128>>2]|0;
  HEAP32[$127>>2] = $129;
  $130 = (($127) + 4|0);
  HEAP32[$130>>2] = 1;
  $131 = (__ZN10b2CLDevice8instanceEv()|0);
  $132 = (__ZNK10b2CLDevice15GetCommandQueueEv($131)|0);
  $133 = (($9) + 1076|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($9) + 148|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (_clEnqueueWriteBufferRect(($132|0),($134|0),1,(7400|0),(7400|0),($region|0),228,0,228,0,($136|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $137;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum,$5);
  STACKTOP = sp;return;
 }
 $117 = (__ZN10b2CLDevice8instanceEv()|0);
 $118 = (($9) + 1076|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (($9) + 148|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($9) + 144|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123*228)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($117,$119,$121,0,$124,1);
 $125 = $2;
 $126 = $125&1;
 if ($126) {
  __ZN14b2CLCommonData21ReadLastJointImpulsesEv($9);
 }
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData18StoreJointImpulsesEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ascendingNumbers = 0, $ciErrNum = 0, $ciErrNum2 = 0, $i = 0, $region = 0, $region1 = 0, $sortCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $region = sp + 28|0;
 $ciErrNum = sp + 4|0;
 $1 = sp + 40|0;
 $region1 = sp + 44|0;
 $ciErrNum2 = sp + 12|0;
 $2 = sp + 24|0;
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>=(0);
 if (!($6)) {
  ___assert_fail((7560|0),(7128|0),1018,(7584|0));
  // unreachable;
 }
 $7 = (($3) + 144|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($3) + 144|0);
 $11 = HEAP32[$10>>2]|0;
 $sortCount = $11;
 $12 = $sortCount;
 $13 = (($3) + 1144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)>($14|0);
 if ($15) {
  $16 = (($3) + 1124|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = (__ZN10b2CLDevice8instanceEv()|0);
   $20 = (($3) + 1124|0);
   $21 = HEAP32[$20>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($19,$21);
  }
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = $sortCount;
  $24 = ($23*20)|0;
  $25 = (__ZN10b2CLDevice13allocateArrayEjb($22,$24,0)|0);
  $26 = (($3) + 1124|0);
  HEAP32[$26>>2] = $25;
  $27 = (($3) + 1148|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = (__ZN10b2CLDevice8instanceEv()|0);
   $31 = (($3) + 1148|0);
   $32 = HEAP32[$31>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($30,$32);
  }
  $33 = (__ZN10b2CLDevice8instanceEv()|0);
  $34 = $sortCount;
  $35 = $34<<2;
  $36 = (__ZN10b2CLDevice13allocateArrayEjb($33,$35,0)|0);
  $37 = (($3) + 1148|0);
  HEAP32[$37>>2] = $36;
  $38 = (($3) + 1152|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = (__ZN10b2CLDevice8instanceEv()|0);
   $42 = (($3) + 1152|0);
   $43 = HEAP32[$42>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($41,$43);
  }
  $44 = (__ZN10b2CLDevice8instanceEv()|0);
  $45 = $sortCount;
  $46 = $45<<2;
  $47 = (__ZN10b2CLDevice13allocateArrayEjb($44,$46,0)|0);
  $48 = (($3) + 1152|0);
  HEAP32[$48>>2] = $47;
 }
 HEAP32[$region>>2] = 20;
 $49 = (($region) + 4|0);
 $50 = (($3) + 144|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$49>>2] = $51;
 $52 = (($49) + 4|0);
 HEAP32[$52>>2] = 1;
 $53 = (__ZN10b2CLDevice8instanceEv()|0);
 $54 = (__ZNK10b2CLDevice15GetCommandQueueEv($53)|0);
 $55 = (($3) + 1076|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($3) + 1124|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_clEnqueueCopyBufferRect(($54|0),($56|0),($58|0),(7608|0),(7608|0),($region|0),228,0,0,0,0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $59;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum,$1);
 HEAP32[$region1>>2] = 4;
 $60 = (($region1) + 4|0);
 $61 = (($3) + 144|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$60>>2] = $62;
 $63 = (($60) + 4|0);
 HEAP32[$63>>2] = 1;
 $64 = (__ZN10b2CLDevice8instanceEv()|0);
 $65 = (__ZNK10b2CLDevice15GetCommandQueueEv($64)|0);
 $66 = (($3) + 1076|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($3) + 1148|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_clEnqueueCopyBufferRect(($65|0),($67|0),($69|0),(7624|0),(7624|0),($region1|0),228,0,0,0,0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum2>>2] = $70;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_($ciErrNum2,$2);
 $71 = (($3) + 144|0);
 $72 = HEAP32[$71>>2]|0;
 $$arith = $72<<2;
 $$overflow = ($72>>>0)>(1073741823);
 $73 = $$overflow ? -1 : $$arith;
 $74 = (__Znaj($73)|0);
 $ascendingNumbers = $74;
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = (($3) + 144|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)<($77|0);
  if (!($78)) {
   break;
  }
  $79 = $i;
  $80 = $i;
  $81 = $ascendingNumbers;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $79;
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 $85 = (__ZN10b2CLDevice8instanceEv()|0);
 $86 = (($3) + 1152|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $ascendingNumbers;
 $89 = (($3) + 144|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($85,$87,$88,0,$91,1);
 $92 = $ascendingNumbers;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  __ZdaPv($92);
 }
 $94 = (__ZN8b2CLSort8instanceEv()|0);
 $95 = (($3) + 1148|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($3) + 1152|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($3) + 144|0);
 $100 = HEAP32[$99>>2]|0;
 __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($94,$96,$98,$100,0,1);
 $101 = $sortCount;
 $102 = (($3) + 1144|0);
 HEAP32[$102>>2] = $101;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData18ComputeJointColorsEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $color = 0, $coloredJointIndex = 0, $currentJointData = 0, $freezed_body = 0, $i = 0, $i1 = 0, $indexA = 0, $indexB = 0, $indexC = 0, $indexD = 0, $jointColors = 0, $jointIndexToColoredJointIndexMap = 0, $jointType = 0, $numCurrentTypeJoints = 0, $sortedList = 0, $typeOffset = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 103076|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(0);
 $7 = $6 ? -1 : $5;
 $8 = (__Znaj($7)|0);
 $freezed_body = $8;
 $9 = $freezed_body;
 $10 = $1;
 $11 = (($10) + 103076|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12;
 _memset(($9|0),0,($13|0))|0;
 $14 = (($2) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $$arith6 = $15<<2;
 $$overflow7 = ($15>>>0)>(1073741823);
 $16 = $$overflow7 ? -1 : $$arith6;
 $17 = (__Znaj($16)|0);
 $jointColors = $17;
 $18 = (($2) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $$arith2 = $19<<2;
 $$overflow3 = ($19>>>0)>(1073741823);
 $20 = $$overflow3 ? -1 : $$arith2;
 $21 = (__Znaj($20)|0);
 $jointIndexToColoredJointIndexMap = $21;
 $22 = (($2) + 144|0);
 $23 = HEAP32[$22>>2]|0;
 $$arith = ($23*228)|0;
 $$overflow = ($23>>>0)>(18837575);
 $24 = $$overflow ? -1 : $$arith;
 $25 = (__Znaj($24)|0);
 $sortedList = $25;
 $jointType = 0;
 L1: while(1) {
  $26 = $jointType;
  $27 = ($26|0)<(11);
  if (!($27)) {
   break;
  }
  $28 = $jointType;
  $29 = (($2) + 100|0);
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $numCurrentTypeJoints = $31;
  $32 = $numCurrentTypeJoints;
  $33 = ($32|0)==(0);
  if ($33) {
  } else {
   $34 = $jointType;
   $35 = (($2) + 152|0);
   $36 = (($35) + (($34*80)|0)|0);
   $37 = HEAP32[$36>>2]|0;
   $typeOffset = $37;
   $38 = $jointColors;
   $39 = $numCurrentTypeJoints;
   $40 = $39<<2;
   _memset(($38|0),0,($40|0))|0;
   $color = 1;
   $coloredJointIndex = 0;
   while(1) {
    $41 = $coloredJointIndex;
    $42 = $numCurrentTypeJoints;
    $43 = ($41|0)<($42|0);
    if (!($43)) {
     break;
    }
    $i = 0;
    while(1) {
     $44 = $i;
     $45 = $numCurrentTypeJoints;
     $46 = ($44|0)<($45|0);
     if (!($46)) {
      break;
     }
     $47 = $i;
     $48 = $jointColors;
     $49 = (($48) + ($47<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)!=(0);
     L12: do {
      if ($51) {
      } else {
       $52 = $typeOffset;
       $53 = $i;
       $54 = (($52) + ($53))|0;
       $55 = (($2) + 148|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = (($56) + (($54*228)|0)|0);
       $currentJointData = $57;
       $58 = $currentJointData;
       $59 = (($58) + 32|0);
       $60 = HEAP32[$59>>2]|0;
       $indexA = $60;
       $61 = $currentJointData;
       $62 = (($61) + 36|0);
       $63 = HEAP32[$62>>2]|0;
       $indexB = $63;
       $64 = $currentJointData;
       $65 = (($64) + 40|0);
       $66 = HEAP32[$65>>2]|0;
       $indexC = $66;
       $67 = $currentJointData;
       $68 = (($67) + 44|0);
       $69 = HEAP32[$68>>2]|0;
       $indexD = $69;
       $70 = $indexA;
       $71 = $freezed_body;
       $72 = (($71) + ($70)|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&1;
       if (!($74)) {
        $75 = $indexB;
        $76 = $freezed_body;
        $77 = (($76) + ($75)|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $78&1;
        if (!($79)) {
         $80 = $indexC;
         $81 = ($80|0)!=(0);
         do {
          if ($81) {
           $82 = $indexC;
           $83 = $freezed_body;
           $84 = (($83) + ($82)|0);
           $85 = HEAP8[$84>>0]|0;
           $86 = $85&1;
           if ($86) {
            break L12;
           } else {
            break;
           }
          }
         } while(0);
         $87 = $indexD;
         $88 = ($87|0)!=(0);
         do {
          if ($88) {
           $89 = $indexD;
           $90 = $freezed_body;
           $91 = (($90) + ($89)|0);
           $92 = HEAP8[$91>>0]|0;
           $93 = $92&1;
           if ($93) {
            break L12;
           } else {
            break;
           }
          }
         } while(0);
         $94 = $color;
         $95 = $i;
         $96 = $jointColors;
         $97 = (($96) + ($95<<2)|0);
         HEAP32[$97>>2] = $94;
         $98 = $currentJointData;
         $99 = (($98) + 20|0);
         HEAP32[$99>>2] = $94;
         $100 = $coloredJointIndex;
         $101 = $i;
         $102 = $jointIndexToColoredJointIndexMap;
         $103 = (($102) + ($101<<2)|0);
         HEAP32[$103>>2] = $100;
         $104 = $coloredJointIndex;
         $105 = (($104) + 1)|0;
         $coloredJointIndex = $105;
         $106 = $indexA;
         $107 = (($2) + 24|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($108) + (($106*72)|0)|0);
         $110 = (($109) + 28|0);
         $111 = +HEAPF32[$110>>2];
         $112 = $111 == 2.0;
         if ($112) {
          $113 = $indexA;
          $114 = $freezed_body;
          $115 = (($114) + ($113)|0);
          HEAP8[$115>>0] = 1;
         }
         $116 = $indexB;
         $117 = (($2) + 24|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = (($118) + (($116*72)|0)|0);
         $120 = (($119) + 28|0);
         $121 = +HEAPF32[$120>>2];
         $122 = $121 == 2.0;
         if ($122) {
          $123 = $indexB;
          $124 = $freezed_body;
          $125 = (($124) + ($123)|0);
          HEAP8[$125>>0] = 1;
         }
         $126 = $indexC;
         $127 = ($126|0)!=(0);
         if ($127) {
          $128 = $indexC;
          $129 = (($2) + 24|0);
          $130 = HEAP32[$129>>2]|0;
          $131 = (($130) + (($128*72)|0)|0);
          $132 = (($131) + 28|0);
          $133 = +HEAPF32[$132>>2];
          $134 = $133 == 2.0;
          if ($134) {
           $135 = $indexC;
           $136 = $freezed_body;
           $137 = (($136) + ($135)|0);
           HEAP8[$137>>0] = 1;
          }
         }
         $138 = $indexD;
         $139 = ($138|0)!=(0);
         if ($139) {
          $140 = $indexD;
          $141 = (($2) + 24|0);
          $142 = HEAP32[$141>>2]|0;
          $143 = (($142) + (($140*72)|0)|0);
          $144 = (($143) + 28|0);
          $145 = +HEAPF32[$144>>2];
          $146 = $145 == 2.0;
          if ($146) {
           $147 = $indexD;
           $148 = $freezed_body;
           $149 = (($148) + ($147)|0);
           HEAP8[$149>>0] = 1;
          }
         }
         break;
        }
       }
      }
     } while(0);
     $150 = $i;
     $151 = (($150) + 1)|0;
     $i = $151;
    }
    $152 = $color;
    $153 = (($152) + 1)|0;
    $color = $153;
    $154 = $color;
    $155 = ($154|0)>(20);
    if ($155) {
     label = 37;
     break L1;
    }
    $156 = $freezed_body;
    $157 = $1;
    $158 = (($157) + 103076|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $159;
    _memset(($156|0),0,($160|0))|0;
    $161 = $typeOffset;
    $162 = $coloredJointIndex;
    $163 = (($161) + ($162))|0;
    $164 = $color;
    $165 = (($164) - 1)|0;
    $166 = $jointType;
    $167 = (($2) + 152|0);
    $168 = (($167) + (($166*80)|0)|0);
    $169 = (($168) + ($165<<2)|0);
    HEAP32[$169>>2] = $163;
   }
   $170 = $color;
   $171 = (($170) - 1)|0;
   $172 = $jointType;
   $173 = (($2) + 1032|0);
   $174 = (($173) + ($172<<2)|0);
   HEAP32[$174>>2] = $171;
   $175 = $typeOffset;
   $176 = $numCurrentTypeJoints;
   $177 = (($175) + ($176))|0;
   $178 = $color;
   $179 = (($178) - 1)|0;
   $180 = $jointType;
   $181 = (($2) + 152|0);
   $182 = (($181) + (($180*80)|0)|0);
   $183 = (($182) + ($179<<2)|0);
   HEAP32[$183>>2] = $177;
   $i1 = 0;
   while(1) {
    $184 = $i1;
    $185 = $numCurrentTypeJoints;
    $186 = ($184|0)<($185|0);
    if (!($186)) {
     break;
    }
    $187 = $typeOffset;
    $188 = $i1;
    $189 = $jointIndexToColoredJointIndexMap;
    $190 = (($189) + ($188<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($187) + ($191))|0;
    $193 = $sortedList;
    $194 = (($193) + (($192*228)|0)|0);
    $195 = $typeOffset;
    $196 = $i1;
    $197 = (($195) + ($196))|0;
    $198 = (($2) + 148|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (($199) + (($197*228)|0)|0);
    _memcpy(($194|0),($200|0),228)|0;
    $201 = $i1;
    $202 = (($201) + 1)|0;
    $i1 = $202;
   }
  }
  $203 = $jointType;
  $204 = (($203) + 1)|0;
  $jointType = $204;
 }
 if ((label|0) == 37) {
  (_printf((7416|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $205 = $jointColors;
 $206 = ($205|0)==(0|0);
 if (!($206)) {
  __ZdaPv($205);
 }
 $207 = $jointIndexToColoredJointIndexMap;
 $208 = ($207|0)==(0|0);
 if (!($208)) {
  __ZdaPv($207);
 }
 $209 = $freezed_body;
 $210 = ($209|0)==(0|0);
 if (!($210)) {
  __ZdaPv($209);
 }
 $211 = (($2) + 148|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ($212|0)==(0|0);
 if ($213) {
  $214 = $sortedList;
  $215 = (($2) + 148|0);
  HEAP32[$215>>2] = $214;
  STACKTOP = sp;return;
 }
 __ZdaPv($212);
 $214 = $sortedList;
 $215 = (($2) + 148|0);
 HEAP32[$215>>2] = $214;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData21ReadLastJointImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 1128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $err = 0;
 $5 = (($1) + 1180|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (($1) + 1076|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $11 = $err;
 $12 = $11 | $10;
 $err = $12;
 $13 = (($1) + 1180|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $a;
 $16 = (($15) + 1)|0;
 $a = $16;
 $17 = (($1) + 1124|0);
 $18 = (_clSetKernelArg(($14|0),($15|0),4,($17|0))|0);
 $19 = $err;
 $20 = $19 | $18;
 $err = $20;
 $21 = (($1) + 1180|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $a;
 $24 = (($23) + 1)|0;
 $a = $24;
 $25 = (($1) + 1148|0);
 $26 = (_clSetKernelArg(($22|0),($23|0),4,($25|0))|0);
 $27 = $err;
 $28 = $27 | $26;
 $err = $28;
 $29 = (($1) + 1180|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $a;
 $32 = (($31) + 1)|0;
 $a = $32;
 $33 = (($1) + 1152|0);
 $34 = (_clSetKernelArg(($30|0),($31|0),4,($33|0))|0);
 $35 = $err;
 $36 = $35 | $34;
 $err = $36;
 $37 = (($1) + 1180|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $a;
 $40 = (($39) + 1)|0;
 $a = $40;
 $41 = (($1) + 144|0);
 $42 = (_clSetKernelArg(($38|0),($39|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = (($1) + 1180|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = (($1) + 1128|0);
 $50 = (_clSetKernelArg(($46|0),($47|0),4,($49|0))|0);
 $51 = $err;
 $52 = $51 | $50;
 $err = $52;
 $53 = $err;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = (($1) + 1180|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer>>2] = $56;
  (_printf((7472|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $57 = (($1) + 144|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($1) + 1184|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + ($60))|0;
 $62 = (($61) - 1)|0;
 $63 = (($1) + 1184|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62>>>0) / ($64>>>0))&-1;
 $group_num = $65;
 $66 = $group_num;
 $67 = (($1) + 1184|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = Math_imul($66, $68)|0;
 HEAP32[$global>>2] = $69;
 $err = 0;
 $70 = (__ZN10b2CLDevice8instanceEv()|0);
 $71 = (__ZNK10b2CLDevice15GetCommandQueueEv($70)|0);
 $72 = (($1) + 1180|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($1) + 1184|0);
 $75 = (_clEnqueueNDRangeKernel(($71|0),($73|0),1,(0|0),($global|0),($74|0),0,(0|0),(0|0))|0);
 $76 = $err;
 $77 = $76 | $75;
 $err = $77;
 $78 = $err;
 $79 = ($78|0)!=(0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = (($1) + 1180|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $81;
 (_printf((7520|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData15CopyJointCommonEPK7b2JointP9b2clJoint($pSrc,$pDest) {
 $pSrc = $pSrc|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $pSrc;
 $1 = $pDest;
 $2 = $1;
 $3 = (($2) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZNK7b2Joint7GetTypeEv($4)|0);
 $6 = $1;
 $7 = (($6) + 24|0);
 HEAP32[$7>>2] = $5;
 $8 = (__ZN14b2CLCommonData8instanceEv()|0);
 $9 = (($8) + 1132|0);
 $10 = (__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEEixERS8_($9,$0)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$0>>2]|0;
 $14 = (__ZNK7b2Joint19GetCollideConnectedEv($13)|0);
 $15 = $14 ? 1 : 0;
 $16 = $1;
 $17 = (($16) + 28|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 100|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $1;
 $24 = (($23) + 32|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 100|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 36|0);
 HEAP32[$31>>2] = $29;
 $32 = $1;
 $33 = (($32) + 40|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = (($34) + 44|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = (($36) + 4|0);
 ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN14b2CLCommonData31UpdateFixtureAddressAndChildrenEP7b2World($this,$m_pWorld) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $b = 0, $f = 0, $fixture_index = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $0;
 $3 = (($2) + 1168|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 103084|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 if ($8) {
  $9 = (($2) + 1160|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = (($2) + 1160|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __ZdaPv($13);
   }
  }
  $15 = $1;
  $16 = (($15) + 103084|0);
  $17 = HEAP32[$16>>2]|0;
  $$arith2 = $17<<2;
  $$overflow3 = ($17>>>0)>(1073741823);
  $18 = $$overflow3 ? -1 : $$arith2;
  $19 = (__Znaj($18)|0);
  $20 = (($2) + 1160|0);
  HEAP32[$20>>2] = $19;
  $21 = (($2) + 1164|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = (($2) + 1164|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    __ZdaPv($25);
   }
  }
  $27 = $1;
  $28 = (($27) + 103084|0);
  $29 = HEAP32[$28>>2]|0;
  $$arith = $29<<2;
  $$overflow = ($29>>>0)>(1073741823);
  $30 = $$overflow ? -1 : $$arith;
  $31 = (__Znaj($30)|0);
  $32 = (($2) + 1164|0);
  HEAP32[$32>>2] = $31;
  $33 = $1;
  $34 = (($33) + 103084|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($2) + 1168|0);
  HEAP32[$36>>2] = $35;
 }
 $fixture_index = 0;
 $37 = $1;
 $38 = (($37) + 103068|0);
 $39 = HEAP32[$38>>2]|0;
 $b = $39;
 while(1) {
  $40 = $b;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   break;
  }
  $42 = $b;
  $43 = (($42) + 108|0);
  $44 = HEAP32[$43>>2]|0;
  $f = $44;
  while(1) {
   $45 = $f;
   $46 = ($45|0)!=(0|0);
   if (!($46)) {
    break;
   }
   $47 = $f;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $s = $49;
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = $s;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_ii[$54 & 1023]($51)|0);
    $56 = ($50|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $f;
    $58 = $fixture_index;
    $59 = (($2) + 1160|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($58<<2)|0);
    HEAP32[$61>>2] = $57;
    $62 = $i;
    $63 = $fixture_index;
    $64 = (($2) + 1164|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($63<<2)|0);
    HEAP32[$66>>2] = $62;
    $67 = $fixture_index;
    $68 = (($67) + 1)|0;
    $fixture_index = $68;
    $69 = $i;
    $70 = (($69) + 1)|0;
    $i = $70;
   }
   $71 = $f;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $f = $73;
  }
  $74 = $b;
  $75 = (($74) + 96|0);
  $76 = HEAP32[$75>>2]|0;
  $b = $76;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK15b2DistanceJoint12GetFrequencyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 68|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZNK15b2DistanceJoint15GetDampingRatioEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 72|0);
 $3 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$3);
}
function __ZNK7b2Joint7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZL6shrLogPKcz155($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv156($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj157($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 300|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 112|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[8144>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((8144|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 8128;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(8128|0),(___dso_handle|0))|0);
   ___cxa_guard_release((8144|0));
  }
 }
 $76 = 8128;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 8152;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(8128|0),(8152|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(8128|0),(9176|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 8128;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 8128;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNK9b2Fixture8IsSensorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 46|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEEC2ERKSA_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp + 8|0;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNK6b2Body8IsBulletEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 8;
 $6 = ($5|0)==(8);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE4findIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p = sp + 148|0;
 $43 = sp + 4|0;
 $41 = $this;
 $42 = $__v;
 $44 = $41;
 $45 = $42;
 $40 = $44;
 $46 = $40;
 $39 = $46;
 $47 = $39;
 $48 = (($47) + 4|0);
 $38 = $48;
 $49 = $38;
 $37 = $49;
 $50 = $37;
 $36 = $50;
 $51 = $36;
 $35 = $51;
 $52 = $35;
 $53 = HEAP32[$52>>2]|0;
 $4 = $44;
 $54 = $4;
 $55 = (($54) + 4|0);
 $3 = $55;
 $56 = $3;
 $2 = $56;
 $57 = $2;
 $1 = $57;
 $58 = $1;
 $0 = $58;
 $59 = $0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE13__lower_boundIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SJ_SJ_($__p,$44,$45,$53,$59);
 $12 = $44;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = (($61) + 4|0);
 $10 = $62;
 $63 = $10;
 $9 = $63;
 $64 = $9;
 $8 = $64;
 $65 = $8;
 $7 = $65;
 $66 = $7;
 $5 = $43;
 $6 = $66;
 $67 = $5;
 $68 = $6;
 HEAP32[$67>>2] = $68;
 $15 = $__p;
 $16 = $43;
 $69 = $15;
 $70 = $16;
 $13 = $69;
 $14 = $70;
 $71 = $13;
 $72 = HEAP32[$71>>2]|0;
 $73 = $14;
 $74 = HEAP32[$73>>2]|0;
 $75 = ($72|0)==($74|0);
 $76 = $75 ^ 1;
 if ($76) {
  $19 = $44;
  $77 = $19;
  $78 = (($77) + 8|0);
  $18 = $78;
  $79 = $18;
  $17 = $79;
  $80 = $17;
  $81 = $42;
  $20 = $__p;
  $82 = $20;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 16|0);
  $24 = $80;
  $25 = $81;
  $26 = $84;
  $85 = $24;
  $86 = $25;
  $87 = $26;
  $21 = $85;
  $22 = $86;
  $23 = $87;
  $88 = $22;
  $89 = HEAP32[$88>>2]|0;
  $90 = $23;
  $91 = HEAP32[$90>>2]|0;
  $92 = ($89>>>0)<($91>>>0);
  if (!($92)) {
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $34 = $44;
 $93 = $34;
 $33 = $93;
 $94 = $33;
 $95 = (($94) + 4|0);
 $32 = $95;
 $96 = $32;
 $31 = $96;
 $97 = $31;
 $30 = $97;
 $98 = $30;
 $29 = $98;
 $99 = $29;
 $27 = $agg$result;
 $28 = $99;
 $100 = $27;
 $101 = $28;
 HEAP32[$100>>2] = $101;
 STACKTOP = sp;return;
}
function __ZN9QuadrupleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = -1;
 $4 = (($1) + 4|0);
 HEAP32[$4>>2] = -1;
 HEAP32[$1>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE15__insert_uniqueERKS6_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i12 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 48|0;
 $17 = sp + 688|0;
 $39 = sp + 40|0;
 $42 = sp + 689|0;
 $72 = sp + 660|0;
 $73 = sp;
 $76 = sp + 348|0;
 $77 = sp + 352|0;
 $78 = sp + 8|0;
 $81 = sp + 376|0;
 $82 = sp + 32|0;
 $89 = sp + 16|0;
 $92 = sp + 690|0;
 $117 = sp + 24|0;
 $120 = sp + 691|0;
 $144 = sp + 148|0;
 $__parent = sp + 528|0;
 $__inserted = sp + 692|0;
 $147 = sp + 316|0;
 $__h = sp + 336|0;
 $148 = sp + 88|0;
 $149 = sp + 540|0;
 $152 = sp + 92|0;
 $145 = $this;
 $146 = $__v;
 $153 = $145;
 $154 = $146;
 $155 = (__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESJ_RKT_($153,$__parent,$154)|0);
 $__child = $155;
 $156 = $__child;
 $157 = HEAP32[$156>>2]|0;
 $__r = $157;
 HEAP8[$__inserted>>0] = 0;
 $158 = $__child;
 $159 = HEAP32[$158>>2]|0;
 $142 = $144;
 $143 = -1;
 $160 = $142;
 HEAP32[$160>>2] = 0;
 $161 = HEAP32[$144>>2]|0;
 HEAP32[$147>>2] = $161;
 $141 = $147;
 $162 = ($159|0)==(0|0);
 if (!($162)) {
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $163 = $146;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__construct_nodeERKS6_($149,$153,$163);
 $110 = $149;
 $164 = $110;
 $108 = $148;
 $109 = $164;
 $165 = $108;
 $166 = $109;
 HEAP32[$165>>2] = $166;
 ;HEAP8[$82+0>>0]=HEAP8[$148+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$148+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$148+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$148+3>>0]|0;
 $80 = $__h;
 $167 = $80;
 $79 = $82;
 $168 = $79;
 $169 = HEAP32[$168>>2]|0;
 $62 = $169;
 $170 = $62;
 $61 = $170;
 $171 = $61;
 $60 = $171;
 $172 = $60;
 $173 = HEAP32[$172>>2]|0;
 $__t$i$i = $173;
 $59 = $170;
 $174 = $59;
 $58 = $174;
 $175 = $58;
 HEAP32[$175>>2] = 0;
 $176 = $__t$i$i;
 $63 = $82;
 $177 = $63;
 $178 = HEAP32[$177>>2]|0;
 $66 = $178;
 $179 = $66;
 $65 = $179;
 $180 = $65;
 $64 = $180;
 $181 = $64;
 $182 = (($181) + 4|0);
 $67 = $182;
 $183 = $67;
 ;HEAP32[$81+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$183+4>>2]|0;
 ;HEAP8[$78+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $167;
 HEAP32[$76>>2] = $176;
 $184 = $75;
 $74 = $76;
 $185 = $74;
 $186 = HEAP32[$185>>2]|0;
 $68 = $78;
 $187 = $68;
 ;HEAP32[$77+0>>2]=HEAP32[$187+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$187+4>>2]|0;
 ;HEAP8[$73+0>>0]=HEAP8[$77+0>>0]|0;HEAP8[$73+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$73+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$73+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$73+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$73+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $184;
 HEAP32[$72>>2] = $186;
 $188 = $71;
 $70 = $72;
 $189 = $70;
 $190 = HEAP32[$189>>2]|0;
 HEAP32[$188>>2] = $190;
 $191 = (($188) + 4|0);
 $69 = $73;
 $192 = $69;
 ;HEAP32[$191+0>>2]=HEAP32[$192+0>>2]|0;HEAP32[$191+4>>2]=HEAP32[$192+4>>2]|0;
 $32 = $149;
 $193 = $32;
 $30 = $193;
 $31 = 0;
 $194 = $30;
 $29 = $194;
 $195 = $29;
 $28 = $195;
 $196 = $28;
 $197 = HEAP32[$196>>2]|0;
 $__tmp$i$i12 = $197;
 $198 = $31;
 $11 = $194;
 $199 = $11;
 $10 = $199;
 $200 = $10;
 HEAP32[$200>>2] = $198;
 $201 = $__tmp$i$i12;
 $202 = ($201|0)!=(0|0);
 if ($202) {
  $9 = $194;
  $203 = $9;
  $8 = $203;
  $204 = $8;
  $205 = (($204) + 4|0);
  $206 = $__tmp$i$i12;
  $26 = $205;
  $27 = $206;
  $207 = $26;
  $208 = (($207) + 4|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&1;
  if ($210) {
   $211 = HEAP32[$207>>2]|0;
   $212 = $27;
   $213 = (($212) + 16|0);
   $25 = $213;
   $214 = $25;
   $15 = $211;
   $16 = $214;
   $215 = $15;
   $216 = $16;
   ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
   $12 = $215;
   $13 = $216;
  }
  $217 = $27;
  $218 = ($217|0)!=(0|0);
  if ($218) {
   $219 = HEAP32[$207>>2]|0;
   $220 = $27;
   $22 = $219;
   $23 = $220;
   $24 = 1;
   $221 = $22;
   $222 = $23;
   $223 = $24;
   $19 = $221;
   $20 = $222;
   $21 = $223;
   $224 = $20;
   $18 = $224;
   $225 = $18;
   __ZdlPv($225);
  }
 }
 $226 = HEAP32[$__parent>>2]|0;
 $227 = $__child;
 $7 = $__h;
 $228 = $7;
 $6 = $228;
 $229 = $6;
 $5 = $229;
 $230 = $5;
 $231 = HEAP32[$230>>2]|0;
 __THREW__ = 0;
 invoke_viiii(470,($153|0),($226|0),($227|0),($231|0));
 $232 = __THREW__; __THREW__ = 0;
 $233 = $232&1;
 if (!($233)) {
  $4 = $__h;
  $234 = $4;
  $3 = $234;
  $235 = $3;
  $2 = $235;
  $236 = $2;
  $237 = HEAP32[$236>>2]|0;
  $__t$i = $237;
  $1 = $234;
  $238 = $1;
  $0 = $238;
  $239 = $0;
  HEAP32[$239>>2] = 0;
  $240 = $__t$i;
  $__r = $240;
  HEAP8[$__inserted>>0] = 1;
  $57 = $__h;
  $241 = $57;
  $55 = $241;
  $56 = 0;
  $242 = $55;
  $54 = $242;
  $243 = $54;
  $53 = $243;
  $244 = $53;
  $245 = HEAP32[$244>>2]|0;
  $__tmp$i$i7 = $245;
  $246 = $56;
  $36 = $242;
  $247 = $36;
  $35 = $247;
  $248 = $35;
  HEAP32[$248>>2] = $246;
  $249 = $__tmp$i$i7;
  $250 = ($249|0)!=(0|0);
  if ($250) {
   $34 = $242;
   $251 = $34;
   $33 = $251;
   $252 = $33;
   $253 = (($252) + 4|0);
   $254 = $__tmp$i$i7;
   $51 = $253;
   $52 = $254;
   $255 = $51;
   $256 = (($255) + 4|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&1;
   if ($258) {
    $259 = HEAP32[$255>>2]|0;
    $260 = $52;
    $261 = (($260) + 16|0);
    $50 = $261;
    $262 = $50;
    $40 = $259;
    $41 = $262;
    $263 = $40;
    $264 = $41;
    ;HEAP8[$39+0>>0]=HEAP8[$42+0>>0]|0;
    $37 = $263;
    $38 = $264;
   }
   $265 = $52;
   $266 = ($265|0)!=(0|0);
   if ($266) {
    $267 = HEAP32[$255>>2]|0;
    $268 = $52;
    $47 = $267;
    $48 = $268;
    $49 = 1;
    $269 = $47;
    $270 = $48;
    $271 = $49;
    $44 = $269;
    $45 = $270;
    $46 = $271;
    $272 = $45;
    $43 = $272;
    $273 = $43;
    __ZdlPv($273);
   }
  }
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $274 = ___cxa_find_matching_catch()|0;
 $275 = tempRet0;
 $150 = $274;
 $151 = $275;
 $135 = $__h;
 $276 = $135;
 $133 = $276;
 $134 = 0;
 $277 = $133;
 $132 = $277;
 $278 = $132;
 $131 = $278;
 $279 = $131;
 $280 = HEAP32[$279>>2]|0;
 $__tmp$i$i = $280;
 $281 = $134;
 $114 = $277;
 $282 = $114;
 $113 = $282;
 $283 = $113;
 HEAP32[$283>>2] = $281;
 $284 = $__tmp$i$i;
 $285 = ($284|0)!=(0|0);
 if ($285) {
  $112 = $277;
  $286 = $112;
  $111 = $286;
  $287 = $111;
  $288 = (($287) + 4|0);
  $289 = $__tmp$i$i;
  $129 = $288;
  $130 = $289;
  $290 = $129;
  $291 = (($290) + 4|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&1;
  if ($293) {
   $294 = HEAP32[$290>>2]|0;
   $295 = $130;
   $296 = (($295) + 16|0);
   $128 = $296;
   $297 = $128;
   $118 = $294;
   $119 = $297;
   $298 = $118;
   $299 = $119;
   ;HEAP8[$117+0>>0]=HEAP8[$120+0>>0]|0;
   $115 = $298;
   $116 = $299;
  }
  $300 = $130;
  $301 = ($300|0)!=(0|0);
  if ($301) {
   $302 = HEAP32[$290>>2]|0;
   $303 = $130;
   $125 = $302;
   $126 = $303;
   $127 = 1;
   $304 = $125;
   $305 = $126;
   $306 = $127;
   $122 = $304;
   $123 = $305;
   $124 = $306;
   $307 = $123;
   $121 = $307;
   $308 = $121;
   __ZdlPv($308);
  }
 }
 $319 = $150;
 $320 = $151;
 ___resumeException($319|0);
 // unreachable;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEEixERS9_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i16 = 0, $__tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 80|0;
 $18 = sp + 782|0;
 $21 = sp + 24|0;
 $24 = sp + 779|0;
 $47 = sp + 48|0;
 $50 = sp + 776|0;
 $53 = sp + 16|0;
 $56 = sp + 783|0;
 $86 = sp + 416|0;
 $87 = sp;
 $90 = sp + 432|0;
 $91 = sp + 440|0;
 $92 = sp + 32|0;
 $95 = sp + 232|0;
 $96 = sp + 40|0;
 $104 = sp + 64|0;
 $107 = sp + 781|0;
 $110 = sp + 56|0;
 $113 = sp + 778|0;
 $139 = sp + 8|0;
 $142 = sp + 780|0;
 $145 = sp + 72|0;
 $148 = sp + 777|0;
 $167 = sp + 400|0;
 $__parent = sp + 408|0;
 $170 = sp + 532|0;
 $__h = sp + 268|0;
 $171 = sp + 288|0;
 $172 = sp + 248|0;
 $168 = $this;
 $169 = $__k;
 $175 = $168;
 $176 = $169;
 $177 = (__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS9_($175,$__parent,$176)|0);
 $__child = $177;
 $178 = $__child;
 $179 = HEAP32[$178>>2]|0;
 $__r = $179;
 $180 = $__child;
 $181 = HEAP32[$180>>2]|0;
 $165 = $167;
 $166 = -1;
 $182 = $165;
 HEAP32[$182>>2] = 0;
 $183 = HEAP32[$167>>2]|0;
 HEAP32[$170>>2] = $183;
 $164 = $170;
 $184 = ($181|0)==(0|0);
 if (!($184)) {
  $361 = $__r;
  $362 = (($361) + 16|0);
  $363 = (($362) + 4|0);
  STACKTOP = sp;return ($363|0);
 }
 $185 = $169;
 __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE25__construct_node_with_keyERS9_($172,$175,$185);
 $131 = $172;
 $186 = $131;
 $129 = $171;
 $130 = $186;
 $187 = $129;
 $188 = $130;
 HEAP32[$187>>2] = $188;
 ;HEAP8[$96+0>>0]=HEAP8[$171+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$171+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$171+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$171+3>>0]|0;
 $94 = $__h;
 $189 = $94;
 $93 = $96;
 $190 = $93;
 $191 = HEAP32[$190>>2]|0;
 $76 = $191;
 $192 = $76;
 $75 = $192;
 $193 = $75;
 $74 = $193;
 $194 = $74;
 $195 = HEAP32[$194>>2]|0;
 $__t$i$i = $195;
 $73 = $192;
 $196 = $73;
 $72 = $196;
 $197 = $72;
 HEAP32[$197>>2] = 0;
 $198 = $__t$i$i;
 $77 = $96;
 $199 = $77;
 $200 = HEAP32[$199>>2]|0;
 $80 = $200;
 $201 = $80;
 $79 = $201;
 $202 = $79;
 $78 = $202;
 $203 = $78;
 $204 = (($203) + 4|0);
 $81 = $204;
 $205 = $81;
 ;HEAP32[$95+0>>2]=HEAP32[$205+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$205+4>>2]|0;
 ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $189;
 HEAP32[$90>>2] = $198;
 $206 = $89;
 $88 = $90;
 $207 = $88;
 $208 = HEAP32[$207>>2]|0;
 $82 = $92;
 $209 = $82;
 ;HEAP32[$91+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$209+4>>2]|0;
 ;HEAP8[$87+0>>0]=HEAP8[$91+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $206;
 HEAP32[$86>>2] = $208;
 $210 = $85;
 $84 = $86;
 $211 = $84;
 $212 = HEAP32[$211>>2]|0;
 HEAP32[$210>>2] = $212;
 $213 = (($210) + 4|0);
 $83 = $87;
 $214 = $83;
 ;HEAP32[$213+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$213+4>>2]=HEAP32[$214+4>>2]|0;
 $39 = $172;
 $215 = $39;
 $37 = $215;
 $38 = 0;
 $216 = $37;
 $36 = $216;
 $217 = $36;
 $35 = $217;
 $218 = $35;
 $219 = HEAP32[$218>>2]|0;
 $__tmp$i$i16 = $219;
 $220 = $38;
 $11 = $216;
 $221 = $11;
 $10 = $221;
 $222 = $10;
 HEAP32[$222>>2] = $220;
 $223 = $__tmp$i$i16;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $9 = $216;
  $225 = $9;
  $8 = $225;
  $226 = $8;
  $227 = (($226) + 4|0);
  $228 = $__tmp$i$i16;
  $33 = $227;
  $34 = $228;
  $229 = $33;
  $230 = (($229) + 5|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&1;
  if ($232) {
   $233 = HEAP32[$229>>2]|0;
   $234 = $34;
   $235 = (($234) + 16|0);
   $236 = (($235) + 4|0);
   $32 = $236;
   $237 = $32;
   $22 = $233;
   $23 = $237;
   $238 = $22;
   $239 = $23;
   ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
   $19 = $238;
   $20 = $239;
  }
  $240 = (($229) + 4|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $241&1;
  if ($242) {
   $243 = HEAP32[$229>>2]|0;
   $244 = $34;
   $245 = (($244) + 16|0);
   $12 = $245;
   $246 = $12;
   $16 = $243;
   $17 = $246;
   $247 = $16;
   $248 = $17;
   ;HEAP8[$15+0>>0]=HEAP8[$18+0>>0]|0;
   $13 = $247;
   $14 = $248;
  }
  $249 = $34;
  $250 = ($249|0)!=(0|0);
  if ($250) {
   $251 = HEAP32[$229>>2]|0;
   $252 = $34;
   $29 = $251;
   $30 = $252;
   $31 = 1;
   $253 = $29;
   $254 = $30;
   $255 = $31;
   $26 = $253;
   $27 = $254;
   $28 = $255;
   $256 = $27;
   $25 = $256;
   $257 = $25;
   __ZdlPv($257);
  }
 }
 $258 = HEAP32[$__parent>>2]|0;
 $259 = $__child;
 $7 = $__h;
 $260 = $7;
 $6 = $260;
 $261 = $6;
 $5 = $261;
 $262 = $5;
 $263 = HEAP32[$262>>2]|0;
 __THREW__ = 0;
 invoke_viiii(470,($175|0),($258|0),($259|0),($263|0));
 $264 = __THREW__; __THREW__ = 0;
 $265 = $264&1;
 if (!($265)) {
  $4 = $__h;
  $266 = $4;
  $3 = $266;
  $267 = $3;
  $2 = $267;
  $268 = $2;
  $269 = HEAP32[$268>>2]|0;
  $__t$i = $269;
  $1 = $266;
  $270 = $1;
  $0 = $270;
  $271 = $0;
  HEAP32[$271>>2] = 0;
  $272 = $__t$i;
  $__r = $272;
  $71 = $__h;
  $273 = $71;
  $69 = $273;
  $70 = 0;
  $274 = $69;
  $68 = $274;
  $275 = $68;
  $67 = $275;
  $276 = $67;
  $277 = HEAP32[$276>>2]|0;
  $__tmp$i$i9 = $277;
  $278 = $70;
  $43 = $274;
  $279 = $43;
  $42 = $279;
  $280 = $42;
  HEAP32[$280>>2] = $278;
  $281 = $__tmp$i$i9;
  $282 = ($281|0)!=(0|0);
  if ($282) {
   $41 = $274;
   $283 = $41;
   $40 = $283;
   $284 = $40;
   $285 = (($284) + 4|0);
   $286 = $__tmp$i$i9;
   $65 = $285;
   $66 = $286;
   $287 = $65;
   $288 = (($287) + 5|0);
   $289 = HEAP8[$288>>0]|0;
   $290 = $289&1;
   if ($290) {
    $291 = HEAP32[$287>>2]|0;
    $292 = $66;
    $293 = (($292) + 16|0);
    $294 = (($293) + 4|0);
    $64 = $294;
    $295 = $64;
    $54 = $291;
    $55 = $295;
    $296 = $54;
    $297 = $55;
    ;HEAP8[$53+0>>0]=HEAP8[$56+0>>0]|0;
    $51 = $296;
    $52 = $297;
   }
   $298 = (($287) + 4|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&1;
   if ($300) {
    $301 = HEAP32[$287>>2]|0;
    $302 = $66;
    $303 = (($302) + 16|0);
    $44 = $303;
    $304 = $44;
    $48 = $301;
    $49 = $304;
    $305 = $48;
    $306 = $49;
    ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
    $45 = $305;
    $46 = $306;
   }
   $307 = $66;
   $308 = ($307|0)!=(0|0);
   if ($308) {
    $309 = HEAP32[$287>>2]|0;
    $310 = $66;
    $61 = $309;
    $62 = $310;
    $63 = 1;
    $311 = $61;
    $312 = $62;
    $313 = $63;
    $58 = $311;
    $59 = $312;
    $60 = $313;
    $314 = $59;
    $57 = $314;
    $315 = $57;
    __ZdlPv($315);
   }
  }
  $361 = $__r;
  $362 = (($361) + 16|0);
  $363 = (($362) + 4|0);
  STACKTOP = sp;return ($363|0);
 }
 $316 = ___cxa_find_matching_catch()|0;
 $317 = tempRet0;
 $173 = $316;
 $174 = $317;
 $163 = $__h;
 $318 = $163;
 $161 = $318;
 $162 = 0;
 $319 = $161;
 $160 = $319;
 $320 = $160;
 $159 = $320;
 $321 = $159;
 $322 = HEAP32[$321>>2]|0;
 $__tmp$i$i = $322;
 $323 = $162;
 $135 = $319;
 $324 = $135;
 $134 = $324;
 $325 = $134;
 HEAP32[$325>>2] = $323;
 $326 = $__tmp$i$i;
 $327 = ($326|0)!=(0|0);
 if ($327) {
  $133 = $319;
  $328 = $133;
  $132 = $328;
  $329 = $132;
  $330 = (($329) + 4|0);
  $331 = $__tmp$i$i;
  $157 = $330;
  $158 = $331;
  $332 = $157;
  $333 = (($332) + 5|0);
  $334 = HEAP8[$333>>0]|0;
  $335 = $334&1;
  if ($335) {
   $336 = HEAP32[$332>>2]|0;
   $337 = $158;
   $338 = (($337) + 16|0);
   $339 = (($338) + 4|0);
   $156 = $339;
   $340 = $156;
   $146 = $336;
   $147 = $340;
   $341 = $146;
   $342 = $147;
   ;HEAP8[$145+0>>0]=HEAP8[$148+0>>0]|0;
   $143 = $341;
   $144 = $342;
  }
  $343 = (($332) + 4|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = $344&1;
  if ($345) {
   $346 = HEAP32[$332>>2]|0;
   $347 = $158;
   $348 = (($347) + 16|0);
   $136 = $348;
   $349 = $136;
   $140 = $346;
   $141 = $349;
   $350 = $140;
   $351 = $141;
   ;HEAP8[$139+0>>0]=HEAP8[$142+0>>0]|0;
   $137 = $350;
   $138 = $351;
  }
  $352 = $158;
  $353 = ($352|0)!=(0|0);
  if ($353) {
   $354 = HEAP32[$332>>2]|0;
   $355 = $158;
   $153 = $354;
   $154 = $355;
   $155 = 1;
   $356 = $153;
   $357 = $154;
   $358 = $155;
   $150 = $356;
   $151 = $357;
   $152 = $358;
   $359 = $151;
   $149 = $359;
   $360 = $149;
   __ZdlPv($360);
  }
 }
 $364 = $173;
 $365 = $174;
 ___resumeException($364|0);
 // unreachable;
 return 0|0;
}
function __ZN7b2Joint7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZL14b2clCheckErrorIiiEvRKT_RKT0_($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $r;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $a = 0;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((8016|0),(8024|0),144,(8112|0));
  // unreachable;
 }
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEEixERS8_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i16 = 0, $__tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 80|0;
 $18 = sp + 782|0;
 $21 = sp + 24|0;
 $24 = sp + 779|0;
 $47 = sp + 48|0;
 $50 = sp + 776|0;
 $53 = sp + 16|0;
 $56 = sp + 783|0;
 $86 = sp + 416|0;
 $87 = sp;
 $90 = sp + 432|0;
 $91 = sp + 440|0;
 $92 = sp + 32|0;
 $95 = sp + 232|0;
 $96 = sp + 40|0;
 $104 = sp + 64|0;
 $107 = sp + 781|0;
 $110 = sp + 56|0;
 $113 = sp + 778|0;
 $139 = sp + 8|0;
 $142 = sp + 780|0;
 $145 = sp + 72|0;
 $148 = sp + 777|0;
 $167 = sp + 400|0;
 $__parent = sp + 408|0;
 $170 = sp + 532|0;
 $__h = sp + 268|0;
 $171 = sp + 288|0;
 $172 = sp + 248|0;
 $168 = $this;
 $169 = $__k;
 $175 = $168;
 $176 = $169;
 $177 = (__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS8_($175,$__parent,$176)|0);
 $__child = $177;
 $178 = $__child;
 $179 = HEAP32[$178>>2]|0;
 $__r = $179;
 $180 = $__child;
 $181 = HEAP32[$180>>2]|0;
 $165 = $167;
 $166 = -1;
 $182 = $165;
 HEAP32[$182>>2] = 0;
 $183 = HEAP32[$167>>2]|0;
 HEAP32[$170>>2] = $183;
 $164 = $170;
 $184 = ($181|0)==(0|0);
 if (!($184)) {
  $361 = $__r;
  $362 = (($361) + 16|0);
  $363 = (($362) + 4|0);
  STACKTOP = sp;return ($363|0);
 }
 $185 = $169;
 __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE25__construct_node_with_keyERS8_($172,$175,$185);
 $131 = $172;
 $186 = $131;
 $129 = $171;
 $130 = $186;
 $187 = $129;
 $188 = $130;
 HEAP32[$187>>2] = $188;
 ;HEAP8[$96+0>>0]=HEAP8[$171+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$171+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$171+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$171+3>>0]|0;
 $94 = $__h;
 $189 = $94;
 $93 = $96;
 $190 = $93;
 $191 = HEAP32[$190>>2]|0;
 $76 = $191;
 $192 = $76;
 $75 = $192;
 $193 = $75;
 $74 = $193;
 $194 = $74;
 $195 = HEAP32[$194>>2]|0;
 $__t$i$i = $195;
 $73 = $192;
 $196 = $73;
 $72 = $196;
 $197 = $72;
 HEAP32[$197>>2] = 0;
 $198 = $__t$i$i;
 $77 = $96;
 $199 = $77;
 $200 = HEAP32[$199>>2]|0;
 $80 = $200;
 $201 = $80;
 $79 = $201;
 $202 = $79;
 $78 = $202;
 $203 = $78;
 $204 = (($203) + 4|0);
 $81 = $204;
 $205 = $81;
 ;HEAP32[$95+0>>2]=HEAP32[$205+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$205+4>>2]|0;
 ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $189;
 HEAP32[$90>>2] = $198;
 $206 = $89;
 $88 = $90;
 $207 = $88;
 $208 = HEAP32[$207>>2]|0;
 $82 = $92;
 $209 = $82;
 ;HEAP32[$91+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$209+4>>2]|0;
 ;HEAP8[$87+0>>0]=HEAP8[$91+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $206;
 HEAP32[$86>>2] = $208;
 $210 = $85;
 $84 = $86;
 $211 = $84;
 $212 = HEAP32[$211>>2]|0;
 HEAP32[$210>>2] = $212;
 $213 = (($210) + 4|0);
 $83 = $87;
 $214 = $83;
 ;HEAP32[$213+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$213+4>>2]=HEAP32[$214+4>>2]|0;
 $39 = $172;
 $215 = $39;
 $37 = $215;
 $38 = 0;
 $216 = $37;
 $36 = $216;
 $217 = $36;
 $35 = $217;
 $218 = $35;
 $219 = HEAP32[$218>>2]|0;
 $__tmp$i$i16 = $219;
 $220 = $38;
 $11 = $216;
 $221 = $11;
 $10 = $221;
 $222 = $10;
 HEAP32[$222>>2] = $220;
 $223 = $__tmp$i$i16;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $9 = $216;
  $225 = $9;
  $8 = $225;
  $226 = $8;
  $227 = (($226) + 4|0);
  $228 = $__tmp$i$i16;
  $33 = $227;
  $34 = $228;
  $229 = $33;
  $230 = (($229) + 5|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&1;
  if ($232) {
   $233 = HEAP32[$229>>2]|0;
   $234 = $34;
   $235 = (($234) + 16|0);
   $236 = (($235) + 4|0);
   $32 = $236;
   $237 = $32;
   $22 = $233;
   $23 = $237;
   $238 = $22;
   $239 = $23;
   ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;
   $19 = $238;
   $20 = $239;
  }
  $240 = (($229) + 4|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $241&1;
  if ($242) {
   $243 = HEAP32[$229>>2]|0;
   $244 = $34;
   $245 = (($244) + 16|0);
   $12 = $245;
   $246 = $12;
   $16 = $243;
   $17 = $246;
   $247 = $16;
   $248 = $17;
   ;HEAP8[$15+0>>0]=HEAP8[$18+0>>0]|0;
   $13 = $247;
   $14 = $248;
  }
  $249 = $34;
  $250 = ($249|0)!=(0|0);
  if ($250) {
   $251 = HEAP32[$229>>2]|0;
   $252 = $34;
   $29 = $251;
   $30 = $252;
   $31 = 1;
   $253 = $29;
   $254 = $30;
   $255 = $31;
   $26 = $253;
   $27 = $254;
   $28 = $255;
   $256 = $27;
   $25 = $256;
   $257 = $25;
   __ZdlPv($257);
  }
 }
 $258 = HEAP32[$__parent>>2]|0;
 $259 = $__child;
 $7 = $__h;
 $260 = $7;
 $6 = $260;
 $261 = $6;
 $5 = $261;
 $262 = $5;
 $263 = HEAP32[$262>>2]|0;
 __THREW__ = 0;
 invoke_viiii(471,($175|0),($258|0),($259|0),($263|0));
 $264 = __THREW__; __THREW__ = 0;
 $265 = $264&1;
 if (!($265)) {
  $4 = $__h;
  $266 = $4;
  $3 = $266;
  $267 = $3;
  $2 = $267;
  $268 = $2;
  $269 = HEAP32[$268>>2]|0;
  $__t$i = $269;
  $1 = $266;
  $270 = $1;
  $0 = $270;
  $271 = $0;
  HEAP32[$271>>2] = 0;
  $272 = $__t$i;
  $__r = $272;
  $71 = $__h;
  $273 = $71;
  $69 = $273;
  $70 = 0;
  $274 = $69;
  $68 = $274;
  $275 = $68;
  $67 = $275;
  $276 = $67;
  $277 = HEAP32[$276>>2]|0;
  $__tmp$i$i9 = $277;
  $278 = $70;
  $43 = $274;
  $279 = $43;
  $42 = $279;
  $280 = $42;
  HEAP32[$280>>2] = $278;
  $281 = $__tmp$i$i9;
  $282 = ($281|0)!=(0|0);
  if ($282) {
   $41 = $274;
   $283 = $41;
   $40 = $283;
   $284 = $40;
   $285 = (($284) + 4|0);
   $286 = $__tmp$i$i9;
   $65 = $285;
   $66 = $286;
   $287 = $65;
   $288 = (($287) + 5|0);
   $289 = HEAP8[$288>>0]|0;
   $290 = $289&1;
   if ($290) {
    $291 = HEAP32[$287>>2]|0;
    $292 = $66;
    $293 = (($292) + 16|0);
    $294 = (($293) + 4|0);
    $64 = $294;
    $295 = $64;
    $54 = $291;
    $55 = $295;
    $296 = $54;
    $297 = $55;
    ;HEAP8[$53+0>>0]=HEAP8[$56+0>>0]|0;
    $51 = $296;
    $52 = $297;
   }
   $298 = (($287) + 4|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&1;
   if ($300) {
    $301 = HEAP32[$287>>2]|0;
    $302 = $66;
    $303 = (($302) + 16|0);
    $44 = $303;
    $304 = $44;
    $48 = $301;
    $49 = $304;
    $305 = $48;
    $306 = $49;
    ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
    $45 = $305;
    $46 = $306;
   }
   $307 = $66;
   $308 = ($307|0)!=(0|0);
   if ($308) {
    $309 = HEAP32[$287>>2]|0;
    $310 = $66;
    $61 = $309;
    $62 = $310;
    $63 = 1;
    $311 = $61;
    $312 = $62;
    $313 = $63;
    $58 = $311;
    $59 = $312;
    $60 = $313;
    $314 = $59;
    $57 = $314;
    $315 = $57;
    __ZdlPv($315);
   }
  }
  $361 = $__r;
  $362 = (($361) + 16|0);
  $363 = (($362) + 4|0);
  STACKTOP = sp;return ($363|0);
 }
 $316 = ___cxa_find_matching_catch()|0;
 $317 = tempRet0;
 $173 = $316;
 $174 = $317;
 $163 = $__h;
 $318 = $163;
 $161 = $318;
 $162 = 0;
 $319 = $161;
 $160 = $319;
 $320 = $160;
 $159 = $320;
 $321 = $159;
 $322 = HEAP32[$321>>2]|0;
 $__tmp$i$i = $322;
 $323 = $162;
 $135 = $319;
 $324 = $135;
 $134 = $324;
 $325 = $134;
 HEAP32[$325>>2] = $323;
 $326 = $__tmp$i$i;
 $327 = ($326|0)!=(0|0);
 if ($327) {
  $133 = $319;
  $328 = $133;
  $132 = $328;
  $329 = $132;
  $330 = (($329) + 4|0);
  $331 = $__tmp$i$i;
  $157 = $330;
  $158 = $331;
  $332 = $157;
  $333 = (($332) + 5|0);
  $334 = HEAP8[$333>>0]|0;
  $335 = $334&1;
  if ($335) {
   $336 = HEAP32[$332>>2]|0;
   $337 = $158;
   $338 = (($337) + 16|0);
   $339 = (($338) + 4|0);
   $156 = $339;
   $340 = $156;
   $146 = $336;
   $147 = $340;
   $341 = $146;
   $342 = $147;
   ;HEAP8[$145+0>>0]=HEAP8[$148+0>>0]|0;
   $143 = $341;
   $144 = $342;
  }
  $343 = (($332) + 4|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = $344&1;
  if ($345) {
   $346 = HEAP32[$332>>2]|0;
   $347 = $158;
   $348 = (($347) + 16|0);
   $136 = $348;
   $349 = $136;
   $140 = $346;
   $141 = $349;
   $350 = $140;
   $351 = $141;
   ;HEAP8[$139+0>>0]=HEAP8[$142+0>>0]|0;
   $137 = $350;
   $138 = $351;
  }
  $352 = $158;
  $353 = ($352|0)!=(0|0);
  if ($353) {
   $354 = HEAP32[$332>>2]|0;
   $355 = $158;
   $153 = $354;
   $154 = $355;
   $155 = 1;
   $356 = $153;
   $357 = $154;
   $358 = $155;
   $150 = $356;
   $151 = $357;
   $152 = $358;
   $359 = $151;
   $149 = $359;
   $360 = $149;
   __ZdlPv($360);
  }
 }
 $364 = $173;
 $365 = $174;
 ___resumeException($364|0);
 // unreachable;
 return 0|0;
}
function __ZNK7b2Joint19GetCollideConnectedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE13__lower_boundIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SJ_SJ_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 4|0;
 $19 = sp + 12|0;
 $15 = $this;
 $16 = $__v;
 $17 = $__root;
 $18 = $__result;
 $20 = $15;
 while(1) {
  $21 = $17;
  $12 = $14;
  $13 = -1;
  $22 = $12;
  HEAP32[$22>>2] = 0;
  $23 = HEAP32[$14>>2]|0;
  HEAP32[$19>>2] = $23;
  $0 = $19;
  $24 = ($21|0)!=(0|0);
  if (!($24)) {
   break;
  }
  $3 = $20;
  $25 = $3;
  $26 = (($25) + 8|0);
  $2 = $26;
  $27 = $2;
  $1 = $27;
  $28 = $1;
  $29 = $17;
  $30 = (($29) + 16|0);
  $31 = $16;
  $7 = $28;
  $8 = $30;
  $9 = $31;
  $32 = $7;
  $33 = $8;
  $34 = $9;
  $4 = $32;
  $5 = $33;
  $6 = $34;
  $35 = $5;
  $36 = HEAP32[$35>>2]|0;
  $37 = $6;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36>>>0)<($38>>>0);
  if ($39) {
   $43 = $17;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $17 = $45;
  } else {
   $40 = $17;
   $18 = $40;
   $41 = $17;
   $42 = HEAP32[$41>>2]|0;
   $17 = $42;
  }
 }
 $46 = $18;
 $10 = $agg$result;
 $11 = $46;
 $47 = $10;
 $48 = $11;
 HEAP32[$47>>2] = $48;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESJ_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 164|0;
 $15 = sp + 56|0;
 $28 = sp + 108|0;
 $45 = sp + 156|0;
 $46 = sp + 80|0;
 $47 = sp + 172|0;
 $42 = $this;
 $43 = $__parent;
 $44 = $__v;
 $48 = $42;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = (($50) + 4|0);
 $38 = $51;
 $52 = $38;
 $37 = $52;
 $53 = $37;
 $36 = $53;
 $54 = $36;
 $35 = $54;
 $55 = $35;
 $56 = HEAP32[$55>>2]|0;
 $__nd = $56;
 $57 = $__nd;
 $0 = $2;
 $1 = -1;
 $58 = $0;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$2>>2]|0;
 HEAP32[$45>>2] = $59;
 $3 = $45;
 $60 = ($57|0)!=(0|0);
 if (!($60)) {
  $34 = $48;
  $119 = $34;
  $120 = (($119) + 4|0);
  $33 = $120;
  $121 = $33;
  $32 = $121;
  $122 = $32;
  $31 = $122;
  $123 = $31;
  $30 = $123;
  $124 = $30;
  $125 = $43;
  HEAP32[$125>>2] = $124;
  $126 = $43;
  $127 = HEAP32[$126>>2]|0;
  $41 = $127;
  $128 = $41;
  STACKTOP = sp;return ($128|0);
 }
 while(1) {
  $6 = $48;
  $61 = $6;
  $62 = (($61) + 8|0);
  $5 = $62;
  $63 = $5;
  $4 = $63;
  $64 = $4;
  $65 = $44;
  $66 = $__nd;
  $67 = (($66) + 16|0);
  $10 = $64;
  $11 = $65;
  $12 = $67;
  $68 = $10;
  $69 = $11;
  $70 = $12;
  $7 = $68;
  $8 = $69;
  $9 = $70;
  $71 = $8;
  $72 = HEAP32[$71>>2]|0;
  $73 = $9;
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72>>>0)<($74>>>0);
  if ($75) {
   $76 = $__nd;
   $77 = HEAP32[$76>>2]|0;
   $13 = $15;
   $14 = -1;
   $78 = $13;
   HEAP32[$78>>2] = 0;
   $79 = HEAP32[$15>>2]|0;
   HEAP32[$46>>2] = $79;
   $16 = $46;
   $80 = ($77|0)!=(0|0);
   if (!($80)) {
    label = 6;
    break;
   }
   $81 = $__nd;
   $82 = HEAP32[$81>>2]|0;
   $__nd = $82;
  } else {
   $19 = $48;
   $87 = $19;
   $88 = (($87) + 8|0);
   $18 = $88;
   $89 = $18;
   $17 = $89;
   $90 = $17;
   $91 = $__nd;
   $92 = (($91) + 16|0);
   $93 = $44;
   $23 = $90;
   $24 = $92;
   $25 = $93;
   $94 = $23;
   $95 = $24;
   $96 = $25;
   $20 = $94;
   $21 = $95;
   $22 = $96;
   $97 = $21;
   $98 = HEAP32[$97>>2]|0;
   $99 = $22;
   $100 = HEAP32[$99>>2]|0;
   $101 = ($98>>>0)<($100>>>0);
   if (!($101)) {
    label = 13;
    break;
   }
   $102 = $__nd;
   $103 = (($102) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $26 = $28;
   $27 = -1;
   $105 = $26;
   HEAP32[$105>>2] = 0;
   $106 = HEAP32[$28>>2]|0;
   HEAP32[$47>>2] = $106;
   $29 = $47;
   $107 = ($104|0)!=(0|0);
   if (!($107)) {
    label = 11;
    break;
   }
   $108 = $__nd;
   $109 = (($108) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $__nd = $110;
  }
 }
 if ((label|0) == 6) {
  $83 = $__nd;
  $84 = $43;
  HEAP32[$84>>2] = $83;
  $85 = $43;
  $86 = HEAP32[$85>>2]|0;
  $41 = $86;
  $128 = $41;
  STACKTOP = sp;return ($128|0);
 }
 else if ((label|0) == 11) {
  $111 = $__nd;
  $112 = $43;
  HEAP32[$112>>2] = $111;
  $113 = $43;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 4|0);
  $41 = $115;
  $128 = $41;
  STACKTOP = sp;return ($128|0);
 }
 else if ((label|0) == 13) {
  $116 = $__nd;
  $117 = $43;
  HEAP32[$117>>2] = $116;
  $118 = $43;
  $41 = $118;
  $128 = $41;
  STACKTOP = sp;return ($128|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__construct_nodeERKS6_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i9$i = 0, $__tmp$i$i = 0, $__tmp$i$i12 = 0, $__tmp$i$i2 = 0, $__tmp$i$i2$i = 0, $__tmp$i$i7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 344|0;
 $18 = sp + 56|0;
 $21 = sp + 212|0;
 $22 = sp + 160|0;
 $23 = sp + 16|0;
 $26 = sp + 184|0;
 $27 = sp + 40|0;
 $34 = sp + 8|0;
 $37 = sp + 1204|0;
 $70 = sp + 372|0;
 $71 = sp + 64|0;
 $74 = sp + 388|0;
 $75 = sp + 392|0;
 $76 = sp + 88|0;
 $79 = sp + 416|0;
 $80 = sp;
 $84 = sp + 440|0;
 $85 = sp + 444|0;
 $86 = sp + 456|0;
 $104 = sp + 532|0;
 $105 = sp + 80|0;
 $108 = sp + 552|0;
 $109 = sp + 560|0;
 $110 = sp + 48|0;
 $113 = sp + 584|0;
 $114 = sp + 72|0;
 $124 = sp + 32|0;
 $127 = sp + 1205|0;
 $150 = sp + 112|0;
 $153 = sp + 1206|0;
 $178 = sp + 96|0;
 $181 = sp + 1207|0;
 $202 = sp + 964|0;
 $203 = sp + 128|0;
 $206 = sp + 980|0;
 $207 = sp + 984|0;
 $208 = sp + 24|0;
 $211 = sp + 1004|0;
 $212 = sp + 536|0;
 $213 = sp + 104|0;
 $220 = sp + 120|0;
 $223 = sp + 1208|0;
 $__h = sp + 1164|0;
 $252 = sp + 760|0;
 $255 = sp + 752|0;
 $256 = sp + 1188|0;
 $250 = $this;
 $251 = $__v;
 $258 = $250;
 $249 = $258;
 $259 = $249;
 $260 = (($259) + 4|0);
 $248 = $260;
 $261 = $248;
 $247 = $261;
 $262 = $247;
 $__na = $262;
 $263 = $__na;
 $245 = $263;
 $246 = 1;
 $264 = $245;
 $265 = $246;
 $242 = $264;
 $243 = $265;
 $244 = 0;
 $266 = $243;
 $267 = ($266*36)|0;
 $241 = $267;
 $268 = $241;
 $269 = (__Znwj($268)|0);
 $270 = $__na;
 $239 = $252;
 $240 = $270;
 $271 = $239;
 $272 = $240;
 HEAP32[$271>>2] = $272;
 $273 = (($271) + 4|0);
 HEAP8[$273>>0] = 0;
 ;HEAP8[$213+0>>0]=HEAP8[$252+0>>0]|0;HEAP8[$213+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$213+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$213+3>>0]=HEAP8[$252+3>>0]|0;HEAP8[$213+4>>0]=HEAP8[$252+4>>0]|0;HEAP8[$213+5>>0]=HEAP8[$252+5>>0]|0;HEAP8[$213+6>>0]=HEAP8[$252+6>>0]|0;HEAP8[$213+7>>0]=HEAP8[$252+7>>0]|0;
 $210 = $__h;
 HEAP32[$211>>2] = $269;
 $274 = $210;
 $209 = $211;
 $275 = $209;
 $276 = HEAP32[$275>>2]|0;
 $197 = $213;
 $277 = $197;
 ;HEAP32[$212+0>>2]=HEAP32[$277+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$277+4>>2]|0;
 ;HEAP8[$208+0>>0]=HEAP8[$212+0>>0]|0;HEAP8[$208+1>>0]=HEAP8[$212+1>>0]|0;HEAP8[$208+2>>0]=HEAP8[$212+2>>0]|0;HEAP8[$208+3>>0]=HEAP8[$212+3>>0]|0;HEAP8[$208+4>>0]=HEAP8[$212+4>>0]|0;HEAP8[$208+5>>0]=HEAP8[$212+5>>0]|0;HEAP8[$208+6>>0]=HEAP8[$212+6>>0]|0;HEAP8[$208+7>>0]=HEAP8[$212+7>>0]|0;
 $205 = $274;
 HEAP32[$206>>2] = $276;
 $278 = $205;
 $204 = $206;
 $279 = $204;
 $280 = HEAP32[$279>>2]|0;
 $198 = $208;
 $281 = $198;
 ;HEAP32[$207+0>>2]=HEAP32[$281+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$281+4>>2]|0;
 ;HEAP8[$203+0>>0]=HEAP8[$207+0>>0]|0;HEAP8[$203+1>>0]=HEAP8[$207+1>>0]|0;HEAP8[$203+2>>0]=HEAP8[$207+2>>0]|0;HEAP8[$203+3>>0]=HEAP8[$207+3>>0]|0;HEAP8[$203+4>>0]=HEAP8[$207+4>>0]|0;HEAP8[$203+5>>0]=HEAP8[$207+5>>0]|0;HEAP8[$203+6>>0]=HEAP8[$207+6>>0]|0;HEAP8[$203+7>>0]=HEAP8[$207+7>>0]|0;
 $201 = $278;
 HEAP32[$202>>2] = $280;
 $282 = $201;
 $200 = $202;
 $283 = $200;
 $284 = HEAP32[$283>>2]|0;
 HEAP32[$282>>2] = $284;
 $285 = (($282) + 4|0);
 $199 = $203;
 $286 = $199;
 ;HEAP32[$285+0>>2]=HEAP32[$286+0>>2]|0;HEAP32[$285+4>>2]=HEAP32[$286+4>>2]|0;
 $287 = $__na;
 $171 = $__h;
 $288 = $171;
 $170 = $288;
 $289 = $170;
 $169 = $289;
 $290 = $169;
 $291 = HEAP32[$290>>2]|0;
 $292 = (($291) + 16|0);
 $143 = $292;
 $293 = $143;
 $294 = $251;
 $115 = $287;
 $116 = $293;
 $117 = $294;
 $295 = $116;
 $296 = ($295|0)==(0|0);
 if (!($296)) {
  $297 = $117;
  ;HEAP32[$295+0>>2]=HEAP32[$297+0>>2]|0;HEAP32[$295+4>>2]=HEAP32[$297+4>>2]|0;HEAP32[$295+8>>2]=HEAP32[$297+8>>2]|0;HEAP32[$295+12>>2]=HEAP32[$297+12>>2]|0;HEAP32[$295+16>>2]=HEAP32[$297+16>>2]|0;
 }
 $2 = $__h;
 $298 = $2;
 $1 = $298;
 $299 = $1;
 $0 = $299;
 $300 = $0;
 $301 = (($300) + 4|0);
 $302 = (($301) + 4|0);
 HEAP8[$302>>0] = 1;
 $83 = $__h;
 $303 = $83;
 $81 = $86;
 $82 = $303;
 $304 = $81;
 $305 = $82;
 HEAP32[$304>>2] = $305;
 ;HEAP8[$80+0>>0]=HEAP8[$86+0>>0]|0;HEAP8[$80+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$86+3>>0]|0;
 $78 = $85;
 $306 = $78;
 $77 = $80;
 $307 = $77;
 $308 = HEAP32[$307>>2]|0;
 $60 = $308;
 $309 = $60;
 $59 = $309;
 $310 = $59;
 $58 = $310;
 $311 = $58;
 $312 = HEAP32[$311>>2]|0;
 $__t$i$i$i = $312;
 $57 = $309;
 $313 = $57;
 $56 = $313;
 $314 = $56;
 HEAP32[$314>>2] = 0;
 $315 = $__t$i$i$i;
 $61 = $80;
 $316 = $61;
 $317 = HEAP32[$316>>2]|0;
 $64 = $317;
 $318 = $64;
 $63 = $318;
 $319 = $63;
 $62 = $319;
 $320 = $62;
 $321 = (($320) + 4|0);
 $65 = $321;
 $322 = $65;
 ;HEAP32[$79+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$79+4>>2]=HEAP32[$322+4>>2]|0;
 ;HEAP8[$76+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$76+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$76+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$76+3>>0]=HEAP8[$79+3>>0]|0;HEAP8[$76+4>>0]=HEAP8[$79+4>>0]|0;HEAP8[$76+5>>0]=HEAP8[$79+5>>0]|0;HEAP8[$76+6>>0]=HEAP8[$79+6>>0]|0;HEAP8[$76+7>>0]=HEAP8[$79+7>>0]|0;
 $73 = $306;
 HEAP32[$74>>2] = $315;
 $323 = $73;
 $72 = $74;
 $324 = $72;
 $325 = HEAP32[$324>>2]|0;
 $66 = $76;
 $326 = $66;
 ;HEAP32[$75+0>>2]=HEAP32[$326+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$326+4>>2]|0;
 ;HEAP8[$71+0>>0]=HEAP8[$75+0>>0]|0;HEAP8[$71+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$71+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$71+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$71+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$71+7>>0]=HEAP8[$75+7>>0]|0;
 $69 = $323;
 HEAP32[$70>>2] = $325;
 $327 = $69;
 $68 = $70;
 $328 = $68;
 $329 = HEAP32[$328>>2]|0;
 HEAP32[$327>>2] = $329;
 $330 = (($327) + 4|0);
 $67 = $71;
 $331 = $67;
 ;HEAP32[$330+0>>2]=HEAP32[$331+0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$331+4>>2]|0;
 $55 = $85;
 $332 = $55;
 $53 = $84;
 $54 = $332;
 $333 = $53;
 $334 = $54;
 HEAP32[$333>>2] = $334;
 ;HEAP8[$27+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$84+3>>0]|0;
 $25 = $256;
 $335 = $25;
 $24 = $27;
 $336 = $24;
 $337 = HEAP32[$336>>2]|0;
 $7 = $337;
 $338 = $7;
 $6 = $338;
 $339 = $6;
 $5 = $339;
 $340 = $5;
 $341 = HEAP32[$340>>2]|0;
 $__t$i$i9$i = $341;
 $4 = $338;
 $342 = $4;
 $3 = $342;
 $343 = $3;
 HEAP32[$343>>2] = 0;
 $344 = $__t$i$i9$i;
 $8 = $27;
 $345 = $8;
 $346 = HEAP32[$345>>2]|0;
 $11 = $346;
 $347 = $11;
 $10 = $347;
 $348 = $10;
 $9 = $348;
 $349 = $9;
 $350 = (($349) + 4|0);
 $12 = $350;
 $351 = $12;
 ;HEAP32[$26+0>>2]=HEAP32[$351+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$351+4>>2]|0;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $335;
 HEAP32[$21>>2] = $344;
 $352 = $20;
 $19 = $21;
 $353 = $19;
 $354 = HEAP32[$353>>2]|0;
 $13 = $23;
 $355 = $13;
 ;HEAP32[$22+0>>2]=HEAP32[$355+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$355+4>>2]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $352;
 HEAP32[$17>>2] = $354;
 $356 = $16;
 $15 = $17;
 $357 = $15;
 $358 = HEAP32[$357>>2]|0;
 HEAP32[$356>>2] = $358;
 $359 = (($356) + 4|0);
 $14 = $18;
 $360 = $14;
 ;HEAP32[$359+0>>2]=HEAP32[$360+0>>2]|0;HEAP32[$359+4>>2]=HEAP32[$360+4>>2]|0;
 $52 = $85;
 $361 = $52;
 $50 = $361;
 $51 = 0;
 $362 = $50;
 $49 = $362;
 $363 = $49;
 $48 = $363;
 $364 = $48;
 $365 = HEAP32[$364>>2]|0;
 $__tmp$i$i2$i = $365;
 $366 = $51;
 $31 = $362;
 $367 = $31;
 $30 = $367;
 $368 = $30;
 HEAP32[$368>>2] = $366;
 $369 = $__tmp$i$i2$i;
 $370 = ($369|0)!=(0|0);
 if ($370) {
  $29 = $362;
  $371 = $29;
  $28 = $371;
  $372 = $28;
  $373 = (($372) + 4|0);
  $374 = $__tmp$i$i2$i;
  $46 = $373;
  $47 = $374;
  $375 = $46;
  $376 = (($375) + 4|0);
  $377 = HEAP8[$376>>0]|0;
  $378 = $377&1;
  if ($378) {
   $379 = HEAP32[$375>>2]|0;
   $380 = $47;
   $381 = (($380) + 16|0);
   $45 = $381;
   $382 = $45;
   $35 = $379;
   $36 = $382;
   $383 = $35;
   $384 = $36;
   ;HEAP8[$34+0>>0]=HEAP8[$37+0>>0]|0;
   $32 = $383;
   $33 = $384;
  }
  $385 = $47;
  $386 = ($385|0)!=(0|0);
  if ($386) {
   $387 = HEAP32[$375>>2]|0;
   $388 = $47;
   $42 = $387;
   $43 = $388;
   $44 = 1;
   $389 = $42;
   $390 = $43;
   $391 = $44;
   $39 = $389;
   $40 = $390;
   $41 = $391;
   $392 = $40;
   $38 = $392;
   $393 = $38;
   __ZdlPv($393);
  }
 }
 $89 = $256;
 $394 = $89;
 $87 = $255;
 $88 = $394;
 $395 = $87;
 $396 = $88;
 HEAP32[$395>>2] = $396;
 ;HEAP8[$114+0>>0]=HEAP8[$255+0>>0]|0;HEAP8[$114+1>>0]=HEAP8[$255+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$255+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$255+3>>0]|0;
 $112 = $agg$result;
 $397 = $112;
 $111 = $114;
 $398 = $111;
 $399 = HEAP32[$398>>2]|0;
 $94 = $399;
 $400 = $94;
 $93 = $400;
 $401 = $93;
 $92 = $401;
 $402 = $92;
 $403 = HEAP32[$402>>2]|0;
 $__t$i$i = $403;
 $91 = $400;
 $404 = $91;
 $90 = $404;
 $405 = $90;
 HEAP32[$405>>2] = 0;
 $406 = $__t$i$i;
 $95 = $114;
 $407 = $95;
 $408 = HEAP32[$407>>2]|0;
 $98 = $408;
 $409 = $98;
 $97 = $409;
 $410 = $97;
 $96 = $410;
 $411 = $96;
 $412 = (($411) + 4|0);
 $99 = $412;
 $413 = $99;
 ;HEAP32[$113+0>>2]=HEAP32[$413+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$413+4>>2]|0;
 ;HEAP8[$110+0>>0]=HEAP8[$113+0>>0]|0;HEAP8[$110+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$113+3>>0]|0;HEAP8[$110+4>>0]=HEAP8[$113+4>>0]|0;HEAP8[$110+5>>0]=HEAP8[$113+5>>0]|0;HEAP8[$110+6>>0]=HEAP8[$113+6>>0]|0;HEAP8[$110+7>>0]=HEAP8[$113+7>>0]|0;
 $107 = $397;
 HEAP32[$108>>2] = $406;
 $414 = $107;
 $106 = $108;
 $415 = $106;
 $416 = HEAP32[$415>>2]|0;
 $100 = $110;
 $417 = $100;
 ;HEAP32[$109+0>>2]=HEAP32[$417+0>>2]|0;HEAP32[$109+4>>2]=HEAP32[$417+4>>2]|0;
 ;HEAP8[$105+0>>0]=HEAP8[$109+0>>0]|0;HEAP8[$105+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$109+3>>0]|0;HEAP8[$105+4>>0]=HEAP8[$109+4>>0]|0;HEAP8[$105+5>>0]=HEAP8[$109+5>>0]|0;HEAP8[$105+6>>0]=HEAP8[$109+6>>0]|0;HEAP8[$105+7>>0]=HEAP8[$109+7>>0]|0;
 $103 = $414;
 HEAP32[$104>>2] = $416;
 $418 = $103;
 $102 = $104;
 $419 = $102;
 $420 = HEAP32[$419>>2]|0;
 HEAP32[$418>>2] = $420;
 $421 = (($418) + 4|0);
 $101 = $105;
 $422 = $101;
 ;HEAP32[$421+0>>2]=HEAP32[$422+0>>2]|0;HEAP32[$421+4>>2]=HEAP32[$422+4>>2]|0;
 $142 = $256;
 $423 = $142;
 $140 = $423;
 $141 = 0;
 $424 = $140;
 $139 = $424;
 $425 = $139;
 $138 = $425;
 $426 = $138;
 $427 = HEAP32[$426>>2]|0;
 $__tmp$i$i12 = $427;
 $428 = $141;
 $121 = $424;
 $429 = $121;
 $120 = $429;
 $430 = $120;
 HEAP32[$430>>2] = $428;
 $431 = $__tmp$i$i12;
 $432 = ($431|0)!=(0|0);
 if ($432) {
  $119 = $424;
  $433 = $119;
  $118 = $433;
  $434 = $118;
  $435 = (($434) + 4|0);
  $436 = $__tmp$i$i12;
  $136 = $435;
  $137 = $436;
  $437 = $136;
  $438 = (($437) + 4|0);
  $439 = HEAP8[$438>>0]|0;
  $440 = $439&1;
  if ($440) {
   $441 = HEAP32[$437>>2]|0;
   $442 = $137;
   $443 = (($442) + 16|0);
   $135 = $443;
   $444 = $135;
   $125 = $441;
   $126 = $444;
   $445 = $125;
   $446 = $126;
   ;HEAP8[$124+0>>0]=HEAP8[$127+0>>0]|0;
   $122 = $445;
   $123 = $446;
  }
  $447 = $137;
  $448 = ($447|0)!=(0|0);
  if ($448) {
   $449 = HEAP32[$437>>2]|0;
   $450 = $137;
   $132 = $449;
   $133 = $450;
   $134 = 1;
   $451 = $132;
   $452 = $133;
   $453 = $134;
   $129 = $451;
   $130 = $452;
   $131 = $453;
   $454 = $130;
   $128 = $454;
   $455 = $128;
   __ZdlPv($455);
  }
 }
 $257 = 1;
 $168 = $__h;
 $456 = $168;
 $166 = $456;
 $167 = 0;
 $457 = $166;
 $165 = $457;
 $458 = $165;
 $164 = $458;
 $459 = $164;
 $460 = HEAP32[$459>>2]|0;
 $__tmp$i$i7 = $460;
 $461 = $167;
 $147 = $457;
 $462 = $147;
 $146 = $462;
 $463 = $146;
 HEAP32[$463>>2] = $461;
 $464 = $__tmp$i$i7;
 $465 = ($464|0)!=(0|0);
 if (!($465)) {
  STACKTOP = sp;return;
 }
 $145 = $457;
 $466 = $145;
 $144 = $466;
 $467 = $144;
 $468 = (($467) + 4|0);
 $469 = $__tmp$i$i7;
 $162 = $468;
 $163 = $469;
 $470 = $162;
 $471 = (($470) + 4|0);
 $472 = HEAP8[$471>>0]|0;
 $473 = $472&1;
 if ($473) {
  $474 = HEAP32[$470>>2]|0;
  $475 = $163;
  $476 = (($475) + 16|0);
  $161 = $476;
  $477 = $161;
  $151 = $474;
  $152 = $477;
  $478 = $151;
  $479 = $152;
  ;HEAP8[$150+0>>0]=HEAP8[$153+0>>0]|0;
  $148 = $478;
  $149 = $479;
 }
 $480 = $163;
 $481 = ($480|0)!=(0|0);
 if ($481) {
  $482 = HEAP32[$470>>2]|0;
  $483 = $163;
  $158 = $482;
  $159 = $483;
  $160 = 1;
  $484 = $158;
  $485 = $159;
  $486 = $160;
  $155 = $484;
  $156 = $485;
  $157 = $486;
  $487 = $156;
  $154 = $487;
  $488 = $154;
  __ZdlPv($488);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSH_SH_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 44|0;
 $7 = sp + 24|0;
 $22 = sp + 12|0;
 $27 = sp + 40|0;
 $28 = sp + 92|0;
 $29 = sp + 48|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS9_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 156|0;
 $13 = sp + 48|0;
 $24 = sp + 92|0;
 $41 = sp + 72|0;
 $42 = sp + 148|0;
 $43 = sp + 4|0;
 $38 = $this;
 $39 = $__parent;
 $40 = $__k;
 $44 = $38;
 $36 = $44;
 $45 = $36;
 $35 = $45;
 $46 = $35;
 $47 = (($46) + 4|0);
 $34 = $47;
 $48 = $34;
 $33 = $48;
 $49 = $33;
 $32 = $49;
 $50 = $32;
 $31 = $50;
 $51 = $31;
 $52 = HEAP32[$51>>2]|0;
 $__nd = $52;
 $53 = $__nd;
 $0 = $2;
 $1 = -1;
 $54 = $0;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$2>>2]|0;
 HEAP32[$41>>2] = $55;
 $3 = $41;
 $56 = ($53|0)!=(0|0);
 if (!($56)) {
  $30 = $44;
  $111 = $30;
  $112 = (($111) + 4|0);
  $29 = $112;
  $113 = $29;
  $28 = $113;
  $114 = $28;
  $27 = $114;
  $115 = $27;
  $26 = $115;
  $116 = $26;
  $117 = $39;
  HEAP32[$117>>2] = $116;
  $118 = $39;
  $119 = HEAP32[$118>>2]|0;
  $37 = $119;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 while(1) {
  $6 = $44;
  $57 = $6;
  $58 = (($57) + 8|0);
  $5 = $58;
  $59 = $5;
  $4 = $59;
  $60 = $4;
  $7 = $60;
  $61 = $7;
  $62 = $40;
  $63 = $__nd;
  $64 = (($63) + 16|0);
  $8 = $61;
  $9 = $62;
  $10 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = $10;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66>>>0)<($68>>>0);
  if ($69) {
   $70 = $__nd;
   $71 = HEAP32[$70>>2]|0;
   $11 = $13;
   $12 = -1;
   $72 = $11;
   HEAP32[$72>>2] = 0;
   $73 = HEAP32[$13>>2]|0;
   HEAP32[$42>>2] = $73;
   $14 = $42;
   $74 = ($71|0)!=(0|0);
   if (!($74)) {
    label = 6;
    break;
   }
   $75 = $__nd;
   $76 = HEAP32[$75>>2]|0;
   $__nd = $76;
  } else {
   $17 = $44;
   $81 = $17;
   $82 = (($81) + 8|0);
   $16 = $82;
   $83 = $16;
   $15 = $83;
   $84 = $15;
   $18 = $84;
   $85 = $18;
   $86 = $__nd;
   $87 = (($86) + 16|0);
   $88 = $40;
   $19 = $85;
   $20 = $87;
   $21 = $88;
   $89 = $20;
   $90 = HEAP32[$89>>2]|0;
   $91 = $21;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($90>>>0)<($92>>>0);
   if (!($93)) {
    label = 13;
    break;
   }
   $94 = $__nd;
   $95 = (($94) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $22 = $24;
   $23 = -1;
   $97 = $22;
   HEAP32[$97>>2] = 0;
   $98 = HEAP32[$24>>2]|0;
   HEAP32[$43>>2] = $98;
   $25 = $43;
   $99 = ($96|0)!=(0|0);
   if (!($99)) {
    label = 11;
    break;
   }
   $100 = $__nd;
   $101 = (($100) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $__nd = $102;
  }
 }
 if ((label|0) == 6) {
  $77 = $__nd;
  $78 = $39;
  HEAP32[$78>>2] = $77;
  $79 = $39;
  $80 = HEAP32[$79>>2]|0;
  $37 = $80;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 11) {
  $103 = $__nd;
  $104 = $39;
  HEAP32[$104>>2] = $103;
  $105 = $39;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + 4|0);
  $37 = $107;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 13) {
  $108 = $__nd;
  $109 = $39;
  HEAP32[$109>>2] = $108;
  $110 = $39;
  $37 = $110;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 return 0|0;
}
function __ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEE25__construct_node_with_keyERS9_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i11$i = 0, $__tmp$i$i = 0, $__tmp$i$i16 = 0, $__tmp$i$i2 = 0, $__tmp$i$i2$i = 0, $__tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 188|0;
 $27 = sp + 160|0;
 $30 = sp + 1204|0;
 $31 = sp + 992|0;
 $32 = sp + 152|0;
 $35 = sp + 384|0;
 $36 = sp + 24|0;
 $44 = sp + 104|0;
 $47 = sp + 1374|0;
 $50 = sp + 168|0;
 $53 = sp + 1377|0;
 $86 = sp + 448|0;
 $87 = sp + 144|0;
 $90 = sp + 464|0;
 $91 = sp + 472|0;
 $92 = sp + 112|0;
 $95 = sp + 496|0;
 $96 = sp + 88|0;
 $100 = sp + 284|0;
 $101 = sp + 524|0;
 $102 = sp + 536|0;
 $120 = sp + 612|0;
 $121 = sp + 80|0;
 $124 = sp + 1160|0;
 $125 = sp + 1072|0;
 $126 = sp + 40|0;
 $129 = sp + 856|0;
 $130 = sp + 128|0;
 $141 = sp + 96|0;
 $144 = sp + 1378|0;
 $147 = sp + 72|0;
 $150 = sp + 1375|0;
 $174 = sp + 16|0;
 $177 = sp + 1381|0;
 $180 = sp + 120|0;
 $183 = sp + 1380|0;
 $209 = sp + 48|0;
 $212 = sp + 1373|0;
 $215 = sp + 56|0;
 $218 = sp + 1379|0;
 $239 = sp + 1136|0;
 $240 = sp + 136|0;
 $243 = sp + 1152|0;
 $244 = sp + 616|0;
 $245 = sp + 32|0;
 $248 = sp + 1184|0;
 $249 = sp + 1176|0;
 $250 = sp + 8|0;
 $258 = sp + 64|0;
 $261 = sp + 1376|0;
 $264 = sp;
 $267 = sp + 1372|0;
 $__h = sp + 1008|0;
 $296 = sp + 880|0;
 $299 = sp + 1348|0;
 $300 = sp + 296|0;
 $294 = $this;
 $295 = $__k;
 $302 = $294;
 $293 = $302;
 $303 = $293;
 $304 = (($303) + 4|0);
 $292 = $304;
 $305 = $292;
 $291 = $305;
 $306 = $291;
 $__na = $306;
 $307 = $__na;
 $289 = $307;
 $290 = 1;
 $308 = $289;
 $309 = $290;
 $286 = $308;
 $287 = $309;
 $288 = 0;
 $310 = $287;
 $311 = ($310*36)|0;
 $285 = $311;
 $312 = $285;
 $313 = (__Znwj($312)|0);
 $314 = $__na;
 $283 = $296;
 $284 = $314;
 $315 = $283;
 $316 = $284;
 HEAP32[$315>>2] = $316;
 $317 = (($315) + 4|0);
 HEAP8[$317>>0] = 0;
 $318 = (($315) + 5|0);
 HEAP8[$318>>0] = 0;
 ;HEAP8[$250+0>>0]=HEAP8[$296+0>>0]|0;HEAP8[$250+1>>0]=HEAP8[$296+1>>0]|0;HEAP8[$250+2>>0]=HEAP8[$296+2>>0]|0;HEAP8[$250+3>>0]=HEAP8[$296+3>>0]|0;HEAP8[$250+4>>0]=HEAP8[$296+4>>0]|0;HEAP8[$250+5>>0]=HEAP8[$296+5>>0]|0;HEAP8[$250+6>>0]=HEAP8[$296+6>>0]|0;HEAP8[$250+7>>0]=HEAP8[$296+7>>0]|0;
 $247 = $__h;
 HEAP32[$248>>2] = $313;
 $319 = $247;
 $246 = $248;
 $320 = $246;
 $321 = HEAP32[$320>>2]|0;
 $234 = $250;
 $322 = $234;
 ;HEAP32[$249+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$249+4>>2]=HEAP32[$322+4>>2]|0;
 ;HEAP8[$245+0>>0]=HEAP8[$249+0>>0]|0;HEAP8[$245+1>>0]=HEAP8[$249+1>>0]|0;HEAP8[$245+2>>0]=HEAP8[$249+2>>0]|0;HEAP8[$245+3>>0]=HEAP8[$249+3>>0]|0;HEAP8[$245+4>>0]=HEAP8[$249+4>>0]|0;HEAP8[$245+5>>0]=HEAP8[$249+5>>0]|0;HEAP8[$245+6>>0]=HEAP8[$249+6>>0]|0;HEAP8[$245+7>>0]=HEAP8[$249+7>>0]|0;
 $242 = $319;
 HEAP32[$243>>2] = $321;
 $323 = $242;
 $241 = $243;
 $324 = $241;
 $325 = HEAP32[$324>>2]|0;
 $235 = $245;
 $326 = $235;
 ;HEAP32[$244+0>>2]=HEAP32[$326+0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$326+4>>2]|0;
 ;HEAP8[$240+0>>0]=HEAP8[$244+0>>0]|0;HEAP8[$240+1>>0]=HEAP8[$244+1>>0]|0;HEAP8[$240+2>>0]=HEAP8[$244+2>>0]|0;HEAP8[$240+3>>0]=HEAP8[$244+3>>0]|0;HEAP8[$240+4>>0]=HEAP8[$244+4>>0]|0;HEAP8[$240+5>>0]=HEAP8[$244+5>>0]|0;HEAP8[$240+6>>0]=HEAP8[$244+6>>0]|0;HEAP8[$240+7>>0]=HEAP8[$244+7>>0]|0;
 $238 = $323;
 HEAP32[$239>>2] = $325;
 $327 = $238;
 $237 = $239;
 $328 = $237;
 $329 = HEAP32[$328>>2]|0;
 HEAP32[$327>>2] = $329;
 $330 = (($327) + 4|0);
 $236 = $240;
 $331 = $236;
 ;HEAP32[$330+0>>2]=HEAP32[$331+0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$331+4>>2]|0;
 $332 = $__na;
 $201 = $__h;
 $333 = $201;
 $200 = $333;
 $334 = $200;
 $199 = $334;
 $335 = $199;
 $336 = HEAP32[$335>>2]|0;
 $337 = (($336) + 16|0);
 $166 = $337;
 $338 = $166;
 $339 = $295;
 $131 = $332;
 $132 = $338;
 $133 = $339;
 $340 = $132;
 $341 = ($340|0)==(0|0);
 if (!($341)) {
  $342 = $133;
  $343 = HEAP32[$342>>2]|0;
  HEAP32[$340>>2] = $343;
 }
 $11 = $__h;
 $344 = $11;
 $10 = $344;
 $345 = $10;
 $9 = $345;
 $346 = $9;
 $347 = (($346) + 4|0);
 $348 = (($347) + 4|0);
 HEAP8[$348>>0] = 1;
 $349 = $__na;
 $3 = $__h;
 $350 = $3;
 $2 = $350;
 $351 = $2;
 $1 = $351;
 $352 = $1;
 $353 = HEAP32[$352>>2]|0;
 $354 = (($353) + 16|0);
 $355 = (($354) + 4|0);
 $0 = $355;
 $356 = $0;
 $4 = $349;
 $5 = $356;
 $357 = $5;
 $358 = ($357|0)==(0|0);
 if (!($358)) {
  __ZN9QuadrupleC2Ev($357);
 }
 $8 = $__h;
 $359 = $8;
 $7 = $359;
 $360 = $7;
 $6 = $360;
 $361 = $6;
 $362 = (($361) + 4|0);
 $363 = (($362) + 5|0);
 HEAP8[$363>>0] = 1;
 $99 = $__h;
 $364 = $99;
 $97 = $102;
 $98 = $364;
 $365 = $97;
 $366 = $98;
 HEAP32[$365>>2] = $366;
 ;HEAP8[$96+0>>0]=HEAP8[$102+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$102+3>>0]|0;
 $94 = $101;
 $367 = $94;
 $93 = $96;
 $368 = $93;
 $369 = HEAP32[$368>>2]|0;
 $76 = $369;
 $370 = $76;
 $75 = $370;
 $371 = $75;
 $74 = $371;
 $372 = $74;
 $373 = HEAP32[$372>>2]|0;
 $__t$i$i$i = $373;
 $73 = $370;
 $374 = $73;
 $72 = $374;
 $375 = $72;
 HEAP32[$375>>2] = 0;
 $376 = $__t$i$i$i;
 $77 = $96;
 $377 = $77;
 $378 = HEAP32[$377>>2]|0;
 $80 = $378;
 $379 = $80;
 $79 = $379;
 $380 = $79;
 $78 = $380;
 $381 = $78;
 $382 = (($381) + 4|0);
 $81 = $382;
 $383 = $81;
 ;HEAP32[$95+0>>2]=HEAP32[$383+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$383+4>>2]|0;
 ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $367;
 HEAP32[$90>>2] = $376;
 $384 = $89;
 $88 = $90;
 $385 = $88;
 $386 = HEAP32[$385>>2]|0;
 $82 = $92;
 $387 = $82;
 ;HEAP32[$91+0>>2]=HEAP32[$387+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$387+4>>2]|0;
 ;HEAP8[$87+0>>0]=HEAP8[$91+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $384;
 HEAP32[$86>>2] = $386;
 $388 = $85;
 $84 = $86;
 $389 = $84;
 $390 = HEAP32[$389>>2]|0;
 HEAP32[$388>>2] = $390;
 $391 = (($388) + 4|0);
 $83 = $87;
 $392 = $83;
 ;HEAP32[$391+0>>2]=HEAP32[$392+0>>2]|0;HEAP32[$391+4>>2]=HEAP32[$392+4>>2]|0;
 $71 = $101;
 $393 = $71;
 $69 = $100;
 $70 = $393;
 $394 = $69;
 $395 = $70;
 HEAP32[$394>>2] = $395;
 ;HEAP8[$36+0>>0]=HEAP8[$100+0>>0]|0;HEAP8[$36+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$100+3>>0]|0;
 $34 = $300;
 $396 = $34;
 $33 = $36;
 $397 = $33;
 $398 = HEAP32[$397>>2]|0;
 $16 = $398;
 $399 = $16;
 $15 = $399;
 $400 = $15;
 $14 = $400;
 $401 = $14;
 $402 = HEAP32[$401>>2]|0;
 $__t$i$i11$i = $402;
 $13 = $399;
 $403 = $13;
 $12 = $403;
 $404 = $12;
 HEAP32[$404>>2] = 0;
 $405 = $__t$i$i11$i;
 $17 = $36;
 $406 = $17;
 $407 = HEAP32[$406>>2]|0;
 $20 = $407;
 $408 = $20;
 $19 = $408;
 $409 = $19;
 $18 = $409;
 $410 = $18;
 $411 = (($410) + 4|0);
 $21 = $411;
 $412 = $21;
 ;HEAP32[$35+0>>2]=HEAP32[$412+0>>2]|0;HEAP32[$35+4>>2]=HEAP32[$412+4>>2]|0;
 ;HEAP8[$32+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$32+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$32+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$32+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$32+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$32+7>>0]=HEAP8[$35+7>>0]|0;
 $29 = $396;
 HEAP32[$30>>2] = $405;
 $413 = $29;
 $28 = $30;
 $414 = $28;
 $415 = HEAP32[$414>>2]|0;
 $22 = $32;
 $416 = $22;
 ;HEAP32[$31+0>>2]=HEAP32[$416+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$416+4>>2]|0;
 ;HEAP8[$27+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$31+7>>0]|0;
 $25 = $413;
 HEAP32[$26>>2] = $415;
 $417 = $25;
 $24 = $26;
 $418 = $24;
 $419 = HEAP32[$418>>2]|0;
 HEAP32[$417>>2] = $419;
 $420 = (($417) + 4|0);
 $23 = $27;
 $421 = $23;
 ;HEAP32[$420+0>>2]=HEAP32[$421+0>>2]|0;HEAP32[$420+4>>2]=HEAP32[$421+4>>2]|0;
 $68 = $101;
 $422 = $68;
 $66 = $422;
 $67 = 0;
 $423 = $66;
 $65 = $423;
 $424 = $65;
 $64 = $424;
 $425 = $64;
 $426 = HEAP32[$425>>2]|0;
 $__tmp$i$i2$i = $426;
 $427 = $67;
 $40 = $423;
 $428 = $40;
 $39 = $428;
 $429 = $39;
 HEAP32[$429>>2] = $427;
 $430 = $__tmp$i$i2$i;
 $431 = ($430|0)!=(0|0);
 if ($431) {
  $38 = $423;
  $432 = $38;
  $37 = $432;
  $433 = $37;
  $434 = (($433) + 4|0);
  $435 = $__tmp$i$i2$i;
  $62 = $434;
  $63 = $435;
  $436 = $62;
  $437 = (($436) + 5|0);
  $438 = HEAP8[$437>>0]|0;
  $439 = $438&1;
  if ($439) {
   $440 = HEAP32[$436>>2]|0;
   $441 = $63;
   $442 = (($441) + 16|0);
   $443 = (($442) + 4|0);
   $61 = $443;
   $444 = $61;
   $51 = $440;
   $52 = $444;
   $445 = $51;
   $446 = $52;
   ;HEAP8[$50+0>>0]=HEAP8[$53+0>>0]|0;
   $48 = $445;
   $49 = $446;
  }
  $447 = (($436) + 4|0);
  $448 = HEAP8[$447>>0]|0;
  $449 = $448&1;
  if ($449) {
   $450 = HEAP32[$436>>2]|0;
   $451 = $63;
   $452 = (($451) + 16|0);
   $41 = $452;
   $453 = $41;
   $45 = $450;
   $46 = $453;
   $454 = $45;
   $455 = $46;
   ;HEAP8[$44+0>>0]=HEAP8[$47+0>>0]|0;
   $42 = $454;
   $43 = $455;
  }
  $456 = $63;
  $457 = ($456|0)!=(0|0);
  if ($457) {
   $458 = HEAP32[$436>>2]|0;
   $459 = $63;
   $58 = $458;
   $59 = $459;
   $60 = 1;
   $460 = $58;
   $461 = $59;
   $462 = $60;
   $55 = $460;
   $56 = $461;
   $57 = $462;
   $463 = $56;
   $54 = $463;
   $464 = $54;
   __ZdlPv($464);
  }
 }
 $105 = $300;
 $465 = $105;
 $103 = $299;
 $104 = $465;
 $466 = $103;
 $467 = $104;
 HEAP32[$466>>2] = $467;
 ;HEAP8[$130+0>>0]=HEAP8[$299+0>>0]|0;HEAP8[$130+1>>0]=HEAP8[$299+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$299+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$299+3>>0]|0;
 $128 = $agg$result;
 $468 = $128;
 $127 = $130;
 $469 = $127;
 $470 = HEAP32[$469>>2]|0;
 $110 = $470;
 $471 = $110;
 $109 = $471;
 $472 = $109;
 $108 = $472;
 $473 = $108;
 $474 = HEAP32[$473>>2]|0;
 $__t$i$i = $474;
 $107 = $471;
 $475 = $107;
 $106 = $475;
 $476 = $106;
 HEAP32[$476>>2] = 0;
 $477 = $__t$i$i;
 $111 = $130;
 $478 = $111;
 $479 = HEAP32[$478>>2]|0;
 $114 = $479;
 $480 = $114;
 $113 = $480;
 $481 = $113;
 $112 = $481;
 $482 = $112;
 $483 = (($482) + 4|0);
 $115 = $483;
 $484 = $115;
 ;HEAP32[$129+0>>2]=HEAP32[$484+0>>2]|0;HEAP32[$129+4>>2]=HEAP32[$484+4>>2]|0;
 ;HEAP8[$126+0>>0]=HEAP8[$129+0>>0]|0;HEAP8[$126+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$126+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$126+3>>0]=HEAP8[$129+3>>0]|0;HEAP8[$126+4>>0]=HEAP8[$129+4>>0]|0;HEAP8[$126+5>>0]=HEAP8[$129+5>>0]|0;HEAP8[$126+6>>0]=HEAP8[$129+6>>0]|0;HEAP8[$126+7>>0]=HEAP8[$129+7>>0]|0;
 $123 = $468;
 HEAP32[$124>>2] = $477;
 $485 = $123;
 $122 = $124;
 $486 = $122;
 $487 = HEAP32[$486>>2]|0;
 $116 = $126;
 $488 = $116;
 ;HEAP32[$125+0>>2]=HEAP32[$488+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[$488+4>>2]|0;
 ;HEAP8[$121+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$121+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$121+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$121+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$121+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$121+7>>0]=HEAP8[$125+7>>0]|0;
 $119 = $485;
 HEAP32[$120>>2] = $487;
 $489 = $119;
 $118 = $120;
 $490 = $118;
 $491 = HEAP32[$490>>2]|0;
 HEAP32[$489>>2] = $491;
 $492 = (($489) + 4|0);
 $117 = $121;
 $493 = $117;
 ;HEAP32[$492+0>>2]=HEAP32[$493+0>>2]|0;HEAP32[$492+4>>2]=HEAP32[$493+4>>2]|0;
 $165 = $300;
 $494 = $165;
 $163 = $494;
 $164 = 0;
 $495 = $163;
 $162 = $495;
 $496 = $162;
 $161 = $496;
 $497 = $161;
 $498 = HEAP32[$497>>2]|0;
 $__tmp$i$i16 = $498;
 $499 = $164;
 $137 = $495;
 $500 = $137;
 $136 = $500;
 $501 = $136;
 HEAP32[$501>>2] = $499;
 $502 = $__tmp$i$i16;
 $503 = ($502|0)!=(0|0);
 if ($503) {
  $135 = $495;
  $504 = $135;
  $134 = $504;
  $505 = $134;
  $506 = (($505) + 4|0);
  $507 = $__tmp$i$i16;
  $159 = $506;
  $160 = $507;
  $508 = $159;
  $509 = (($508) + 5|0);
  $510 = HEAP8[$509>>0]|0;
  $511 = $510&1;
  if ($511) {
   $512 = HEAP32[$508>>2]|0;
   $513 = $160;
   $514 = (($513) + 16|0);
   $515 = (($514) + 4|0);
   $158 = $515;
   $516 = $158;
   $148 = $512;
   $149 = $516;
   $517 = $148;
   $518 = $149;
   ;HEAP8[$147+0>>0]=HEAP8[$150+0>>0]|0;
   $145 = $517;
   $146 = $518;
  }
  $519 = (($508) + 4|0);
  $520 = HEAP8[$519>>0]|0;
  $521 = $520&1;
  if ($521) {
   $522 = HEAP32[$508>>2]|0;
   $523 = $160;
   $524 = (($523) + 16|0);
   $138 = $524;
   $525 = $138;
   $142 = $522;
   $143 = $525;
   $526 = $142;
   $527 = $143;
   ;HEAP8[$141+0>>0]=HEAP8[$144+0>>0]|0;
   $139 = $526;
   $140 = $527;
  }
  $528 = $160;
  $529 = ($528|0)!=(0|0);
  if ($529) {
   $530 = HEAP32[$508>>2]|0;
   $531 = $160;
   $155 = $530;
   $156 = $531;
   $157 = 1;
   $532 = $155;
   $533 = $156;
   $534 = $157;
   $152 = $532;
   $153 = $533;
   $154 = $534;
   $535 = $153;
   $151 = $535;
   $536 = $151;
   __ZdlPv($536);
  }
 }
 $301 = 1;
 $198 = $__h;
 $537 = $198;
 $196 = $537;
 $197 = 0;
 $538 = $196;
 $195 = $538;
 $539 = $195;
 $194 = $539;
 $540 = $194;
 $541 = HEAP32[$540>>2]|0;
 $__tmp$i$i9 = $541;
 $542 = $197;
 $170 = $538;
 $543 = $170;
 $169 = $543;
 $544 = $169;
 HEAP32[$544>>2] = $542;
 $545 = $__tmp$i$i9;
 $546 = ($545|0)!=(0|0);
 if (!($546)) {
  STACKTOP = sp;return;
 }
 $168 = $538;
 $547 = $168;
 $167 = $547;
 $548 = $167;
 $549 = (($548) + 4|0);
 $550 = $__tmp$i$i9;
 $192 = $549;
 $193 = $550;
 $551 = $192;
 $552 = (($551) + 5|0);
 $553 = HEAP8[$552>>0]|0;
 $554 = $553&1;
 if ($554) {
  $555 = HEAP32[$551>>2]|0;
  $556 = $193;
  $557 = (($556) + 16|0);
  $558 = (($557) + 4|0);
  $191 = $558;
  $559 = $191;
  $181 = $555;
  $182 = $559;
  $560 = $181;
  $561 = $182;
  ;HEAP8[$180+0>>0]=HEAP8[$183+0>>0]|0;
  $178 = $560;
  $179 = $561;
 }
 $562 = (($551) + 4|0);
 $563 = HEAP8[$562>>0]|0;
 $564 = $563&1;
 if ($564) {
  $565 = HEAP32[$551>>2]|0;
  $566 = $193;
  $567 = (($566) + 16|0);
  $171 = $567;
  $568 = $171;
  $175 = $565;
  $176 = $568;
  $569 = $175;
  $570 = $176;
  ;HEAP8[$174+0>>0]=HEAP8[$177+0>>0]|0;
  $172 = $569;
  $173 = $570;
 }
 $571 = $193;
 $572 = ($571|0)!=(0|0);
 if ($572) {
  $573 = HEAP32[$551>>2]|0;
  $574 = $193;
  $188 = $573;
  $189 = $574;
  $190 = 1;
  $575 = $188;
  $576 = $189;
  $577 = $190;
  $185 = $575;
  $186 = $576;
  $187 = $577;
  $578 = $186;
  $184 = $578;
  $579 = $184;
  __ZdlPv($579);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERS8_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 156|0;
 $13 = sp + 48|0;
 $24 = sp + 92|0;
 $41 = sp + 72|0;
 $42 = sp + 148|0;
 $43 = sp + 4|0;
 $38 = $this;
 $39 = $__parent;
 $40 = $__k;
 $44 = $38;
 $36 = $44;
 $45 = $36;
 $35 = $45;
 $46 = $35;
 $47 = (($46) + 4|0);
 $34 = $47;
 $48 = $34;
 $33 = $48;
 $49 = $33;
 $32 = $49;
 $50 = $32;
 $31 = $50;
 $51 = $31;
 $52 = HEAP32[$51>>2]|0;
 $__nd = $52;
 $53 = $__nd;
 $0 = $2;
 $1 = -1;
 $54 = $0;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$2>>2]|0;
 HEAP32[$41>>2] = $55;
 $3 = $41;
 $56 = ($53|0)!=(0|0);
 if (!($56)) {
  $30 = $44;
  $111 = $30;
  $112 = (($111) + 4|0);
  $29 = $112;
  $113 = $29;
  $28 = $113;
  $114 = $28;
  $27 = $114;
  $115 = $27;
  $26 = $115;
  $116 = $26;
  $117 = $39;
  HEAP32[$117>>2] = $116;
  $118 = $39;
  $119 = HEAP32[$118>>2]|0;
  $37 = $119;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 while(1) {
  $6 = $44;
  $57 = $6;
  $58 = (($57) + 8|0);
  $5 = $58;
  $59 = $5;
  $4 = $59;
  $60 = $4;
  $7 = $60;
  $61 = $7;
  $62 = $40;
  $63 = $__nd;
  $64 = (($63) + 16|0);
  $8 = $61;
  $9 = $62;
  $10 = $64;
  $65 = $9;
  $66 = HEAP32[$65>>2]|0;
  $67 = $10;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66>>>0)<($68>>>0);
  if ($69) {
   $70 = $__nd;
   $71 = HEAP32[$70>>2]|0;
   $11 = $13;
   $12 = -1;
   $72 = $11;
   HEAP32[$72>>2] = 0;
   $73 = HEAP32[$13>>2]|0;
   HEAP32[$42>>2] = $73;
   $14 = $42;
   $74 = ($71|0)!=(0|0);
   if (!($74)) {
    label = 6;
    break;
   }
   $75 = $__nd;
   $76 = HEAP32[$75>>2]|0;
   $__nd = $76;
  } else {
   $17 = $44;
   $81 = $17;
   $82 = (($81) + 8|0);
   $16 = $82;
   $83 = $16;
   $15 = $83;
   $84 = $15;
   $18 = $84;
   $85 = $18;
   $86 = $__nd;
   $87 = (($86) + 16|0);
   $88 = $40;
   $19 = $85;
   $20 = $87;
   $21 = $88;
   $89 = $20;
   $90 = HEAP32[$89>>2]|0;
   $91 = $21;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($90>>>0)<($92>>>0);
   if (!($93)) {
    label = 13;
    break;
   }
   $94 = $__nd;
   $95 = (($94) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $22 = $24;
   $23 = -1;
   $97 = $22;
   HEAP32[$97>>2] = 0;
   $98 = HEAP32[$24>>2]|0;
   HEAP32[$43>>2] = $98;
   $25 = $43;
   $99 = ($96|0)!=(0|0);
   if (!($99)) {
    label = 11;
    break;
   }
   $100 = $__nd;
   $101 = (($100) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $__nd = $102;
  }
 }
 if ((label|0) == 6) {
  $77 = $__nd;
  $78 = $39;
  HEAP32[$78>>2] = $77;
  $79 = $39;
  $80 = HEAP32[$79>>2]|0;
  $37 = $80;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 11) {
  $103 = $__nd;
  $104 = $39;
  HEAP32[$104>>2] = $103;
  $105 = $39;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + 4|0);
  $37 = $107;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 13) {
  $108 = $__nd;
  $109 = $39;
  HEAP32[$109>>2] = $108;
  $110 = $39;
  $37 = $110;
  $120 = $37;
  STACKTOP = sp;return ($120|0);
 }
 return 0|0;
}
function __ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEE25__construct_node_with_keyERS8_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i11$i = 0, $__tmp$i$i = 0, $__tmp$i$i16 = 0, $__tmp$i$i2 = 0, $__tmp$i$i2$i = 0, $__tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 188|0;
 $27 = sp + 160|0;
 $30 = sp + 1204|0;
 $31 = sp + 992|0;
 $32 = sp + 152|0;
 $35 = sp + 384|0;
 $36 = sp + 24|0;
 $44 = sp + 104|0;
 $47 = sp + 1374|0;
 $50 = sp + 168|0;
 $53 = sp + 1377|0;
 $86 = sp + 448|0;
 $87 = sp + 144|0;
 $90 = sp + 464|0;
 $91 = sp + 472|0;
 $92 = sp + 112|0;
 $95 = sp + 496|0;
 $96 = sp + 88|0;
 $100 = sp + 284|0;
 $101 = sp + 524|0;
 $102 = sp + 536|0;
 $120 = sp + 612|0;
 $121 = sp + 80|0;
 $124 = sp + 1160|0;
 $125 = sp + 1072|0;
 $126 = sp + 40|0;
 $129 = sp + 856|0;
 $130 = sp + 128|0;
 $141 = sp + 96|0;
 $144 = sp + 1378|0;
 $147 = sp + 72|0;
 $150 = sp + 1375|0;
 $174 = sp + 16|0;
 $177 = sp + 1381|0;
 $180 = sp + 120|0;
 $183 = sp + 1380|0;
 $209 = sp + 48|0;
 $212 = sp + 1373|0;
 $215 = sp + 56|0;
 $218 = sp + 1379|0;
 $239 = sp + 1136|0;
 $240 = sp + 136|0;
 $243 = sp + 1152|0;
 $244 = sp + 616|0;
 $245 = sp + 32|0;
 $248 = sp + 1184|0;
 $249 = sp + 1176|0;
 $250 = sp + 8|0;
 $258 = sp + 64|0;
 $261 = sp + 1376|0;
 $264 = sp;
 $267 = sp + 1372|0;
 $__h = sp + 1008|0;
 $296 = sp + 880|0;
 $299 = sp + 1348|0;
 $300 = sp + 296|0;
 $294 = $this;
 $295 = $__k;
 $302 = $294;
 $293 = $302;
 $303 = $293;
 $304 = (($303) + 4|0);
 $292 = $304;
 $305 = $292;
 $291 = $305;
 $306 = $291;
 $__na = $306;
 $307 = $__na;
 $289 = $307;
 $290 = 1;
 $308 = $289;
 $309 = $290;
 $286 = $308;
 $287 = $309;
 $288 = 0;
 $310 = $287;
 $311 = ($310*24)|0;
 $285 = $311;
 $312 = $285;
 $313 = (__Znwj($312)|0);
 $314 = $__na;
 $283 = $296;
 $284 = $314;
 $315 = $283;
 $316 = $284;
 HEAP32[$315>>2] = $316;
 $317 = (($315) + 4|0);
 HEAP8[$317>>0] = 0;
 $318 = (($315) + 5|0);
 HEAP8[$318>>0] = 0;
 ;HEAP8[$250+0>>0]=HEAP8[$296+0>>0]|0;HEAP8[$250+1>>0]=HEAP8[$296+1>>0]|0;HEAP8[$250+2>>0]=HEAP8[$296+2>>0]|0;HEAP8[$250+3>>0]=HEAP8[$296+3>>0]|0;HEAP8[$250+4>>0]=HEAP8[$296+4>>0]|0;HEAP8[$250+5>>0]=HEAP8[$296+5>>0]|0;HEAP8[$250+6>>0]=HEAP8[$296+6>>0]|0;HEAP8[$250+7>>0]=HEAP8[$296+7>>0]|0;
 $247 = $__h;
 HEAP32[$248>>2] = $313;
 $319 = $247;
 $246 = $248;
 $320 = $246;
 $321 = HEAP32[$320>>2]|0;
 $234 = $250;
 $322 = $234;
 ;HEAP32[$249+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$249+4>>2]=HEAP32[$322+4>>2]|0;
 ;HEAP8[$245+0>>0]=HEAP8[$249+0>>0]|0;HEAP8[$245+1>>0]=HEAP8[$249+1>>0]|0;HEAP8[$245+2>>0]=HEAP8[$249+2>>0]|0;HEAP8[$245+3>>0]=HEAP8[$249+3>>0]|0;HEAP8[$245+4>>0]=HEAP8[$249+4>>0]|0;HEAP8[$245+5>>0]=HEAP8[$249+5>>0]|0;HEAP8[$245+6>>0]=HEAP8[$249+6>>0]|0;HEAP8[$245+7>>0]=HEAP8[$249+7>>0]|0;
 $242 = $319;
 HEAP32[$243>>2] = $321;
 $323 = $242;
 $241 = $243;
 $324 = $241;
 $325 = HEAP32[$324>>2]|0;
 $235 = $245;
 $326 = $235;
 ;HEAP32[$244+0>>2]=HEAP32[$326+0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$326+4>>2]|0;
 ;HEAP8[$240+0>>0]=HEAP8[$244+0>>0]|0;HEAP8[$240+1>>0]=HEAP8[$244+1>>0]|0;HEAP8[$240+2>>0]=HEAP8[$244+2>>0]|0;HEAP8[$240+3>>0]=HEAP8[$244+3>>0]|0;HEAP8[$240+4>>0]=HEAP8[$244+4>>0]|0;HEAP8[$240+5>>0]=HEAP8[$244+5>>0]|0;HEAP8[$240+6>>0]=HEAP8[$244+6>>0]|0;HEAP8[$240+7>>0]=HEAP8[$244+7>>0]|0;
 $238 = $323;
 HEAP32[$239>>2] = $325;
 $327 = $238;
 $237 = $239;
 $328 = $237;
 $329 = HEAP32[$328>>2]|0;
 HEAP32[$327>>2] = $329;
 $330 = (($327) + 4|0);
 $236 = $240;
 $331 = $236;
 ;HEAP32[$330+0>>2]=HEAP32[$331+0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$331+4>>2]|0;
 $332 = $__na;
 $201 = $__h;
 $333 = $201;
 $200 = $333;
 $334 = $200;
 $199 = $334;
 $335 = $199;
 $336 = HEAP32[$335>>2]|0;
 $337 = (($336) + 16|0);
 $166 = $337;
 $338 = $166;
 $339 = $295;
 $131 = $332;
 $132 = $338;
 $133 = $339;
 $340 = $132;
 $341 = ($340|0)==(0|0);
 if (!($341)) {
  $342 = $133;
  $343 = HEAP32[$342>>2]|0;
  HEAP32[$340>>2] = $343;
 }
 $11 = $__h;
 $344 = $11;
 $10 = $344;
 $345 = $10;
 $9 = $345;
 $346 = $9;
 $347 = (($346) + 4|0);
 $348 = (($347) + 4|0);
 HEAP8[$348>>0] = 1;
 $349 = $__na;
 $2 = $__h;
 $350 = $2;
 $1 = $350;
 $351 = $1;
 $0 = $351;
 $352 = $0;
 $353 = HEAP32[$352>>2]|0;
 $354 = (($353) + 16|0);
 $355 = (($354) + 4|0);
 $3 = $355;
 $356 = $3;
 $4 = $349;
 $5 = $356;
 $357 = $5;
 $358 = ($357|0)==(0|0);
 if (!($358)) {
  HEAP32[$357>>2] = 0;
 }
 $8 = $__h;
 $359 = $8;
 $7 = $359;
 $360 = $7;
 $6 = $360;
 $361 = $6;
 $362 = (($361) + 4|0);
 $363 = (($362) + 5|0);
 HEAP8[$363>>0] = 1;
 $99 = $__h;
 $364 = $99;
 $97 = $102;
 $98 = $364;
 $365 = $97;
 $366 = $98;
 HEAP32[$365>>2] = $366;
 ;HEAP8[$96+0>>0]=HEAP8[$102+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$102+3>>0]|0;
 $94 = $101;
 $367 = $94;
 $93 = $96;
 $368 = $93;
 $369 = HEAP32[$368>>2]|0;
 $76 = $369;
 $370 = $76;
 $75 = $370;
 $371 = $75;
 $74 = $371;
 $372 = $74;
 $373 = HEAP32[$372>>2]|0;
 $__t$i$i$i = $373;
 $73 = $370;
 $374 = $73;
 $72 = $374;
 $375 = $72;
 HEAP32[$375>>2] = 0;
 $376 = $__t$i$i$i;
 $77 = $96;
 $377 = $77;
 $378 = HEAP32[$377>>2]|0;
 $80 = $378;
 $379 = $80;
 $79 = $379;
 $380 = $79;
 $78 = $380;
 $381 = $78;
 $382 = (($381) + 4|0);
 $81 = $382;
 $383 = $81;
 ;HEAP32[$95+0>>2]=HEAP32[$383+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$383+4>>2]|0;
 ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$92+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$95+7>>0]|0;
 $89 = $367;
 HEAP32[$90>>2] = $376;
 $384 = $89;
 $88 = $90;
 $385 = $88;
 $386 = HEAP32[$385>>2]|0;
 $82 = $92;
 $387 = $82;
 ;HEAP32[$91+0>>2]=HEAP32[$387+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$387+4>>2]|0;
 ;HEAP8[$87+0>>0]=HEAP8[$91+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$91+7>>0]|0;
 $85 = $384;
 HEAP32[$86>>2] = $386;
 $388 = $85;
 $84 = $86;
 $389 = $84;
 $390 = HEAP32[$389>>2]|0;
 HEAP32[$388>>2] = $390;
 $391 = (($388) + 4|0);
 $83 = $87;
 $392 = $83;
 ;HEAP32[$391+0>>2]=HEAP32[$392+0>>2]|0;HEAP32[$391+4>>2]=HEAP32[$392+4>>2]|0;
 $71 = $101;
 $393 = $71;
 $69 = $100;
 $70 = $393;
 $394 = $69;
 $395 = $70;
 HEAP32[$394>>2] = $395;
 ;HEAP8[$36+0>>0]=HEAP8[$100+0>>0]|0;HEAP8[$36+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$100+3>>0]|0;
 $34 = $300;
 $396 = $34;
 $33 = $36;
 $397 = $33;
 $398 = HEAP32[$397>>2]|0;
 $16 = $398;
 $399 = $16;
 $15 = $399;
 $400 = $15;
 $14 = $400;
 $401 = $14;
 $402 = HEAP32[$401>>2]|0;
 $__t$i$i11$i = $402;
 $13 = $399;
 $403 = $13;
 $12 = $403;
 $404 = $12;
 HEAP32[$404>>2] = 0;
 $405 = $__t$i$i11$i;
 $17 = $36;
 $406 = $17;
 $407 = HEAP32[$406>>2]|0;
 $20 = $407;
 $408 = $20;
 $19 = $408;
 $409 = $19;
 $18 = $409;
 $410 = $18;
 $411 = (($410) + 4|0);
 $21 = $411;
 $412 = $21;
 ;HEAP32[$35+0>>2]=HEAP32[$412+0>>2]|0;HEAP32[$35+4>>2]=HEAP32[$412+4>>2]|0;
 ;HEAP8[$32+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$32+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$32+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$32+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$32+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$32+7>>0]=HEAP8[$35+7>>0]|0;
 $29 = $396;
 HEAP32[$30>>2] = $405;
 $413 = $29;
 $28 = $30;
 $414 = $28;
 $415 = HEAP32[$414>>2]|0;
 $22 = $32;
 $416 = $22;
 ;HEAP32[$31+0>>2]=HEAP32[$416+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$416+4>>2]|0;
 ;HEAP8[$27+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$27+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$27+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$27+7>>0]=HEAP8[$31+7>>0]|0;
 $25 = $413;
 HEAP32[$26>>2] = $415;
 $417 = $25;
 $24 = $26;
 $418 = $24;
 $419 = HEAP32[$418>>2]|0;
 HEAP32[$417>>2] = $419;
 $420 = (($417) + 4|0);
 $23 = $27;
 $421 = $23;
 ;HEAP32[$420+0>>2]=HEAP32[$421+0>>2]|0;HEAP32[$420+4>>2]=HEAP32[$421+4>>2]|0;
 $68 = $101;
 $422 = $68;
 $66 = $422;
 $67 = 0;
 $423 = $66;
 $65 = $423;
 $424 = $65;
 $64 = $424;
 $425 = $64;
 $426 = HEAP32[$425>>2]|0;
 $__tmp$i$i2$i = $426;
 $427 = $67;
 $40 = $423;
 $428 = $40;
 $39 = $428;
 $429 = $39;
 HEAP32[$429>>2] = $427;
 $430 = $__tmp$i$i2$i;
 $431 = ($430|0)!=(0|0);
 if ($431) {
  $38 = $423;
  $432 = $38;
  $37 = $432;
  $433 = $37;
  $434 = (($433) + 4|0);
  $435 = $__tmp$i$i2$i;
  $62 = $434;
  $63 = $435;
  $436 = $62;
  $437 = (($436) + 5|0);
  $438 = HEAP8[$437>>0]|0;
  $439 = $438&1;
  if ($439) {
   $440 = HEAP32[$436>>2]|0;
   $441 = $63;
   $442 = (($441) + 16|0);
   $443 = (($442) + 4|0);
   $61 = $443;
   $444 = $61;
   $51 = $440;
   $52 = $444;
   $445 = $51;
   $446 = $52;
   ;HEAP8[$50+0>>0]=HEAP8[$53+0>>0]|0;
   $48 = $445;
   $49 = $446;
  }
  $447 = (($436) + 4|0);
  $448 = HEAP8[$447>>0]|0;
  $449 = $448&1;
  if ($449) {
   $450 = HEAP32[$436>>2]|0;
   $451 = $63;
   $452 = (($451) + 16|0);
   $41 = $452;
   $453 = $41;
   $45 = $450;
   $46 = $453;
   $454 = $45;
   $455 = $46;
   ;HEAP8[$44+0>>0]=HEAP8[$47+0>>0]|0;
   $42 = $454;
   $43 = $455;
  }
  $456 = $63;
  $457 = ($456|0)!=(0|0);
  if ($457) {
   $458 = HEAP32[$436>>2]|0;
   $459 = $63;
   $58 = $458;
   $59 = $459;
   $60 = 1;
   $460 = $58;
   $461 = $59;
   $462 = $60;
   $55 = $460;
   $56 = $461;
   $57 = $462;
   $463 = $56;
   $54 = $463;
   $464 = $54;
   __ZdlPv($464);
  }
 }
 $105 = $300;
 $465 = $105;
 $103 = $299;
 $104 = $465;
 $466 = $103;
 $467 = $104;
 HEAP32[$466>>2] = $467;
 ;HEAP8[$130+0>>0]=HEAP8[$299+0>>0]|0;HEAP8[$130+1>>0]=HEAP8[$299+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$299+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$299+3>>0]|0;
 $128 = $agg$result;
 $468 = $128;
 $127 = $130;
 $469 = $127;
 $470 = HEAP32[$469>>2]|0;
 $110 = $470;
 $471 = $110;
 $109 = $471;
 $472 = $109;
 $108 = $472;
 $473 = $108;
 $474 = HEAP32[$473>>2]|0;
 $__t$i$i = $474;
 $107 = $471;
 $475 = $107;
 $106 = $475;
 $476 = $106;
 HEAP32[$476>>2] = 0;
 $477 = $__t$i$i;
 $111 = $130;
 $478 = $111;
 $479 = HEAP32[$478>>2]|0;
 $114 = $479;
 $480 = $114;
 $113 = $480;
 $481 = $113;
 $112 = $481;
 $482 = $112;
 $483 = (($482) + 4|0);
 $115 = $483;
 $484 = $115;
 ;HEAP32[$129+0>>2]=HEAP32[$484+0>>2]|0;HEAP32[$129+4>>2]=HEAP32[$484+4>>2]|0;
 ;HEAP8[$126+0>>0]=HEAP8[$129+0>>0]|0;HEAP8[$126+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$126+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$126+3>>0]=HEAP8[$129+3>>0]|0;HEAP8[$126+4>>0]=HEAP8[$129+4>>0]|0;HEAP8[$126+5>>0]=HEAP8[$129+5>>0]|0;HEAP8[$126+6>>0]=HEAP8[$129+6>>0]|0;HEAP8[$126+7>>0]=HEAP8[$129+7>>0]|0;
 $123 = $468;
 HEAP32[$124>>2] = $477;
 $485 = $123;
 $122 = $124;
 $486 = $122;
 $487 = HEAP32[$486>>2]|0;
 $116 = $126;
 $488 = $116;
 ;HEAP32[$125+0>>2]=HEAP32[$488+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[$488+4>>2]|0;
 ;HEAP8[$121+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$121+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$121+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$121+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$121+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$121+7>>0]=HEAP8[$125+7>>0]|0;
 $119 = $485;
 HEAP32[$120>>2] = $487;
 $489 = $119;
 $118 = $120;
 $490 = $118;
 $491 = HEAP32[$490>>2]|0;
 HEAP32[$489>>2] = $491;
 $492 = (($489) + 4|0);
 $117 = $121;
 $493 = $117;
 ;HEAP32[$492+0>>2]=HEAP32[$493+0>>2]|0;HEAP32[$492+4>>2]=HEAP32[$493+4>>2]|0;
 $165 = $300;
 $494 = $165;
 $163 = $494;
 $164 = 0;
 $495 = $163;
 $162 = $495;
 $496 = $162;
 $161 = $496;
 $497 = $161;
 $498 = HEAP32[$497>>2]|0;
 $__tmp$i$i16 = $498;
 $499 = $164;
 $137 = $495;
 $500 = $137;
 $136 = $500;
 $501 = $136;
 HEAP32[$501>>2] = $499;
 $502 = $__tmp$i$i16;
 $503 = ($502|0)!=(0|0);
 if ($503) {
  $135 = $495;
  $504 = $135;
  $134 = $504;
  $505 = $134;
  $506 = (($505) + 4|0);
  $507 = $__tmp$i$i16;
  $159 = $506;
  $160 = $507;
  $508 = $159;
  $509 = (($508) + 5|0);
  $510 = HEAP8[$509>>0]|0;
  $511 = $510&1;
  if ($511) {
   $512 = HEAP32[$508>>2]|0;
   $513 = $160;
   $514 = (($513) + 16|0);
   $515 = (($514) + 4|0);
   $158 = $515;
   $516 = $158;
   $148 = $512;
   $149 = $516;
   $517 = $148;
   $518 = $149;
   ;HEAP8[$147+0>>0]=HEAP8[$150+0>>0]|0;
   $145 = $517;
   $146 = $518;
  }
  $519 = (($508) + 4|0);
  $520 = HEAP8[$519>>0]|0;
  $521 = $520&1;
  if ($521) {
   $522 = HEAP32[$508>>2]|0;
   $523 = $160;
   $524 = (($523) + 16|0);
   $138 = $524;
   $525 = $138;
   $142 = $522;
   $143 = $525;
   $526 = $142;
   $527 = $143;
   ;HEAP8[$141+0>>0]=HEAP8[$144+0>>0]|0;
   $139 = $526;
   $140 = $527;
  }
  $528 = $160;
  $529 = ($528|0)!=(0|0);
  if ($529) {
   $530 = HEAP32[$508>>2]|0;
   $531 = $160;
   $155 = $530;
   $156 = $531;
   $157 = 1;
   $532 = $155;
   $533 = $156;
   $534 = $157;
   $152 = $532;
   $153 = $533;
   $154 = $534;
   $535 = $153;
   $151 = $535;
   $536 = $151;
   __ZdlPv($536);
  }
 }
 $301 = 1;
 $198 = $__h;
 $537 = $198;
 $196 = $537;
 $197 = 0;
 $538 = $196;
 $195 = $538;
 $539 = $195;
 $194 = $539;
 $540 = $194;
 $541 = HEAP32[$540>>2]|0;
 $__tmp$i$i9 = $541;
 $542 = $197;
 $170 = $538;
 $543 = $170;
 $169 = $543;
 $544 = $169;
 HEAP32[$544>>2] = $542;
 $545 = $__tmp$i$i9;
 $546 = ($545|0)!=(0|0);
 if (!($546)) {
  STACKTOP = sp;return;
 }
 $168 = $538;
 $547 = $168;
 $167 = $547;
 $548 = $167;
 $549 = (($548) + 4|0);
 $550 = $__tmp$i$i9;
 $192 = $549;
 $193 = $550;
 $551 = $192;
 $552 = (($551) + 5|0);
 $553 = HEAP8[$552>>0]|0;
 $554 = $553&1;
 if ($554) {
  $555 = HEAP32[$551>>2]|0;
  $556 = $193;
  $557 = (($556) + 16|0);
  $558 = (($557) + 4|0);
  $191 = $558;
  $559 = $191;
  $181 = $555;
  $182 = $559;
  $560 = $181;
  $561 = $182;
  ;HEAP8[$180+0>>0]=HEAP8[$183+0>>0]|0;
  $178 = $560;
  $179 = $561;
 }
 $562 = (($551) + 4|0);
 $563 = HEAP8[$562>>0]|0;
 $564 = $563&1;
 if ($564) {
  $565 = HEAP32[$551>>2]|0;
  $566 = $193;
  $567 = (($566) + 16|0);
  $171 = $567;
  $568 = $171;
  $175 = $565;
  $176 = $568;
  $569 = $175;
  $570 = $176;
  ;HEAP8[$174+0>>0]=HEAP8[$177+0>>0]|0;
  $172 = $569;
  $173 = $570;
 }
 $571 = $193;
 $572 = ($571|0)!=(0|0);
 if ($572) {
  $573 = HEAP32[$551>>2]|0;
  $574 = $193;
  $188 = $573;
  $189 = $574;
  $190 = 1;
  $575 = $188;
  $576 = $189;
  $577 = $190;
  $185 = $575;
  $186 = $576;
  $187 = $577;
  $578 = $186;
  $184 = $578;
  $579 = $184;
  __ZdlPv($579);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSG_SG_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 44|0;
 $7 = sp + 24|0;
 $22 = sp + 12|0;
 $27 = sp + 40|0;
 $28 = sp + 92|0;
 $29 = sp + 48|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($26,$35);
 $2 = $26;
 $36 = $2;
 $37 = (($36) + 4|0);
 $1 = $37;
 $38 = $1;
 $0 = $38;
 $39 = $0;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $3 = $42;
 $43 = $3;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $__na;
 $47 = $22;
 $14 = $46;
 $15 = $47;
 $16 = 1;
 $48 = $14;
 $49 = $15;
 $50 = $16;
 $11 = $48;
 $12 = $49;
 $13 = $50;
 $51 = $12;
 $10 = $51;
 $52 = $10;
 __ZdlPv($52);
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 32|0;
 $9 = sp + 72|0;
 $15 = sp + 52|0;
 $16 = sp + 60|0;
 $11 = $__root;
 $12 = $__x;
 $17 = $12;
 $18 = $11;
 $19 = ($17|0)==($18|0);
 $20 = $12;
 $21 = (($20) + 12|0);
 $22 = $19&1;
 HEAP8[$21>>0] = $22;
 while(1) {
  $23 = $12;
  $24 = $11;
  $25 = ($23|0)!=($24|0);
  if ($25) {
   $26 = $12;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   $32 = $31 ^ 1;
   $147 = $32;
  } else {
   $147 = 0;
  }
  if (!($147)) {
   label = 25;
   break;
  }
  $33 = $12;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $10 = $35;
  $36 = $10;
  $37 = $10;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($36|0)==($40|0);
  if ($41) {
   $42 = $12;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $__y = $48;
   $49 = $__y;
   $7 = $9;
   $8 = -1;
   $50 = $7;
   HEAP32[$50>>2] = 0;
   $51 = HEAP32[$9>>2]|0;
   HEAP32[$15>>2] = $51;
   $6 = $15;
   $52 = ($49|0)!=(0|0);
   if (!($52)) {
    label = 11;
    break;
   }
   $53 = $__y;
   $54 = (($53) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&1;
   if ($56) {
    label = 11;
    break;
   }
   $57 = $12;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $12 = $59;
   $60 = $12;
   $61 = (($60) + 12|0);
   HEAP8[$61>>0] = 1;
   $62 = $12;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $12 = $64;
   $65 = $12;
   $66 = $11;
   $67 = ($65|0)==($66|0);
   $68 = $12;
   $69 = (($68) + 12|0);
   $70 = $67&1;
   HEAP8[$69>>0] = $70;
   $71 = $__y;
   $72 = (($71) + 12|0);
   HEAP8[$72>>0] = 1;
  } else {
   $95 = $12;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $__y1 = $100;
   $101 = $__y1;
   $1 = $3;
   $2 = -1;
   $102 = $1;
   HEAP32[$102>>2] = 0;
   $103 = HEAP32[$3>>2]|0;
   HEAP32[$16>>2] = $103;
   $4 = $16;
   $104 = ($101|0)!=(0|0);
   if (!($104)) {
    label = 20;
    break;
   }
   $105 = $__y1;
   $106 = (($105) + 12|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&1;
   if ($108) {
    label = 20;
    break;
   }
   $109 = $12;
   $110 = (($109) + 8|0);
   $111 = HEAP32[$110>>2]|0;
   $12 = $111;
   $112 = $12;
   $113 = (($112) + 12|0);
   HEAP8[$113>>0] = 1;
   $114 = $12;
   $115 = (($114) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $12 = $116;
   $117 = $12;
   $118 = $11;
   $119 = ($117|0)==($118|0);
   $120 = $12;
   $121 = (($120) + 12|0);
   $122 = $119&1;
   HEAP8[$121>>0] = $122;
   $123 = $__y1;
   $124 = (($123) + 12|0);
   HEAP8[$124>>0] = 1;
  }
 }
 if ((label|0) == 11) {
  $73 = $12;
  $0 = $73;
  $74 = $0;
  $75 = $0;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($74|0)==($78|0);
  if (!($79)) {
   $80 = $12;
   $81 = (($80) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $12 = $82;
   $83 = $12;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($83);
  }
  $84 = $12;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $12 = $86;
  $87 = $12;
  $88 = (($87) + 12|0);
  HEAP8[$88>>0] = 1;
  $89 = $12;
  $90 = (($89) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $12 = $91;
  $92 = $12;
  $93 = (($92) + 12|0);
  HEAP8[$93>>0] = 0;
  $94 = $12;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($94);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $125 = $12;
  $5 = $125;
  $126 = $5;
  $127 = $5;
  $128 = (($127) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = HEAP32[$129>>2]|0;
  $131 = ($126|0)==($130|0);
  if ($131) {
   $132 = $12;
   $133 = (($132) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $12 = $134;
   $135 = $12;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($135);
  }
  $136 = $12;
  $137 = (($136) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $12 = $138;
  $139 = $12;
  $140 = (($139) + 12|0);
  HEAP8[$140>>0] = 1;
  $141 = $12;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $12 = $143;
  $144 = $12;
  $145 = (($144) + 12|0);
  HEAP8[$145>>0] = 0;
  $146 = $12;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($146);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($26,$35);
 $2 = $26;
 $36 = $2;
 $37 = (($36) + 4|0);
 $1 = $37;
 $38 = $1;
 $0 = $38;
 $39 = $0;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $3 = $42;
 $43 = $3;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $__na;
 $47 = $22;
 $14 = $46;
 $15 = $47;
 $16 = 1;
 $48 = $14;
 $49 = $15;
 $50 = $16;
 $11 = $48;
 $12 = $49;
 $13 = $50;
 $51 = $12;
 $10 = $51;
 $52 = $10;
 __ZdlPv($52);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $6 = sp + 48|0;
 $10 = sp + 28|0;
 $15 = sp + 20|0;
 $12 = $__x;
 $16 = $12;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $8 = $10;
 $9 = -1;
 $19 = $8;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$10>>2]|0;
 HEAP32[$15>>2] = $20;
 $0 = $15;
 $21 = ($18|0)!=(0|0);
 if ($21) {
  $22 = $12;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $5 = $24;
  while(1) {
   $25 = $5;
   $26 = HEAP32[$25>>2]|0;
   $2 = $4;
   $3 = -1;
   $27 = $2;
   HEAP32[$27>>2] = 0;
   $28 = HEAP32[$4>>2]|0;
   HEAP32[$6>>2] = $28;
   $1 = $6;
   $29 = ($26|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $5 = $31;
  }
  $32 = $5;
  $11 = $32;
  $47 = $11;
  STACKTOP = sp;return ($47|0);
 } else {
  while(1) {
   $33 = $12;
   $7 = $33;
   $34 = $7;
   $35 = $7;
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($34|0)==($38|0);
   $40 = $39 ^ 1;
   if (!($40)) {
    break;
   }
   $41 = $12;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $12 = $43;
  }
  $44 = $12;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $11 = $46;
  $47 = $11;
  STACKTOP = sp;return ($47|0);
 }
 return 0|0;
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $__y = $11;
 $12 = $__y;
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $5;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $4;
 $3 = -1;
 $19 = $2;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $20;
 $0 = $8;
 $21 = ($18|0)!=(0|0);
 if ($21) {
  $22 = $5;
  $23 = $5;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 8|0);
  HEAP32[$26>>2] = $22;
 }
 $27 = $5;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $__y;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $1 = $32;
 $33 = $1;
 $34 = $1;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33|0)==($37|0);
 if ($38) {
  $39 = $__y;
  $40 = $5;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$42>>2] = $39;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 } else {
  $43 = $__y;
  $44 = $5;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $43;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $__y = $10;
 $11 = $__y;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 HEAP32[$14>>2] = $13;
 $15 = $5;
 $16 = HEAP32[$15>>2]|0;
 $2 = $4;
 $3 = -1;
 $17 = $2;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $18;
 $0 = $8;
 $19 = ($16|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 8|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = $5;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $__y;
 $28 = (($27) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $1 = $29;
 $30 = $1;
 $31 = $1;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($30|0)==($34|0);
 if ($35) {
  $36 = $__y;
  $37 = $5;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $36;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 } else {
  $40 = $__y;
  $41 = $5;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = $40;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLDevice8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[9232>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (9184|0);
 }
 $4 = (___cxa_guard_acquire((9232|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (9184|0);
 }
 __THREW__ = 0;
 invoke_vi(472,(9184|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((9232|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 } else {
  (___cxa_atexit((473|0),(9184|0),(___dso_handle|0))|0);
  ___cxa_guard_release((9232|0));
  STACKTOP = sp;return (9184|0);
 }
 return 0|0;
}
function __ZN10b2CLDeviceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN10b2CLDevice13startupOpenCLEv($1);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice13startupOpenCLEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ciErrNum = 0;
 var $cpPlatforms = 0, $firstCPU = 0, $firstGPU = 0, $i = 0, $i1 = 0, $infoLen = 0, $infoStr = 0, $infoType = 0, $max_compute_units = 0, $max_workgroup_size = 0, $returned_size = 0, $uiNumDevices = 0, $uiNumPlatforms = 0, $uiTargetPlatform = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 32|0;
 $vararg_buffer48 = sp + 136|0;
 $vararg_buffer45 = sp + 96|0;
 $vararg_buffer43 = sp + 48|0;
 $vararg_buffer41 = sp + 160|0;
 $vararg_buffer38 = sp + 64|0;
 $vararg_buffer35 = sp + 40|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer29 = sp + 128|0;
 $vararg_buffer26 = sp + 144|0;
 $vararg_buffer24 = sp + 152|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer14 = sp;
 $vararg_buffer11 = sp + 8|0;
 $vararg_buffer7 = sp + 104|0;
 $vararg_buffer3 = sp + 56|0;
 $vararg_buffer1 = sp + 120|0;
 $vararg_buffer = sp + 24|0;
 $uiNumPlatforms = sp + 224|0;
 $uiNumDevices = sp + 192|0;
 $ciErrNum = sp + 176|0;
 $infoStr = sp + 240|0;
 $infoLen = sp + 212|0;
 $infoType = sp + 72|0;
 $1 = sp + 172|0;
 $2 = sp + 164|0;
 $3 = sp + 200|0;
 $returned_size = sp + 184|0;
 $max_workgroup_size = sp + 216|0;
 $max_compute_units = sp + 232|0;
 $4 = sp + 180|0;
 $5 = sp + 204|0;
 $0 = $this;
 $6 = $0;
 $firstGPU = -1;
 $firstCPU = -1;
 __ZL6shrLogPKcz222(9240,$vararg_buffer);
 (_clGetPlatformIDs(0,(0|0),($uiNumPlatforms|0))|0);
 $7 = HEAP32[$uiNumPlatforms>>2]|0;
 $8 = $7<<2;
 $9 = (_malloc($8)|0);
 $cpPlatforms = $9;
 $10 = HEAP32[$uiNumPlatforms>>2]|0;
 $11 = $cpPlatforms;
 $12 = (_clGetPlatformIDs(($10|0),($11|0),($uiNumPlatforms|0))|0);
 HEAP32[$ciErrNum>>2] = $12;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$1);
 $13 = HEAP32[$uiNumPlatforms>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $13;
 __ZL6shrLogPKcz222(9264,$vararg_buffer1);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = HEAP32[$uiNumPlatforms>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $cpPlatforms;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  (_clGetPlatformInfo(($20|0),2307,1024,($infoStr|0),($infoLen|0))|0);
  $21 = $i;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $infoStr;
  __ZL6shrLogPKcz222(9296,$vararg_buffer3);
  $22 = $i;
  $23 = $cpPlatforms;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  (_clGetPlatformInfo(($25|0),2306,1024,($infoStr|0),($infoLen|0))|0);
  $26 = $i;
  HEAP32[$vararg_buffer7>>2] = $26;
  $vararg_ptr10 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $infoStr;
  __ZL6shrLogPKcz222(9320,$vararg_buffer7);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $uiTargetPlatform = 0;
 $29 = $uiTargetPlatform;
 HEAP32[$vararg_buffer11>>2] = $29;
 __ZL6shrLogPKcz222(9344,$vararg_buffer11);
 __ZL6shrLogPKcz222(9368,$vararg_buffer14);
 $30 = $uiTargetPlatform;
 $31 = $cpPlatforms;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_clGetDeviceIDs(($33|0),-1,0,0,(0|0),($uiNumDevices|0))|0);
 HEAP32[$ciErrNum>>2] = $34;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$2);
 $35 = HEAP32[$uiNumDevices>>2]|0;
 $36 = $35<<2;
 $37 = (_malloc($36)|0);
 $38 = (($6) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = $uiTargetPlatform;
 $40 = $cpPlatforms;
 $41 = (($40) + ($39<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$uiNumDevices>>2]|0;
 $44 = (($6) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_clGetDeviceIDs(($42|0),-1,0,($43|0),($45|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $46;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$3);
 $47 = HEAP32[$uiNumDevices>>2]|0;
 HEAP32[$vararg_buffer16>>2] = $47;
 __ZL6shrLogPKcz222(9392,$vararg_buffer16);
 $i1 = 0;
 while(1) {
  $48 = $i1;
  $49 = HEAP32[$uiNumDevices>>2]|0;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $i1;
  HEAP32[$vararg_buffer19>>2] = $51;
  __ZL6shrLogPKcz222(9424,$vararg_buffer19);
  $52 = $i1;
  $53 = (($6) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  (_clGetDeviceInfo(($56|0),4096,8,($infoType|0),($infoLen|0))|0);
  $57 = $infoType;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $59 & 2;
  $64 = ($63|0)!=(0);
  $65 = (0)!=(0);
  $66 = $64 | $65;
  if ($66) {
   __ZL6shrLogPKcz222(9440,$vararg_buffer22);
   $67 = $firstCPU;
   $68 = ($67|0)<(0);
   if ($68) {
    $69 = $i1;
    $firstCPU = $69;
   }
  }
  $70 = $infoType;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 4)|0;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = $72 & 4;
  $77 = ($76|0)!=(0);
  $78 = (0)!=(0);
  $79 = $77 | $78;
  if ($79) {
   __ZL6shrLogPKcz222(9448,$vararg_buffer24);
   $80 = $firstGPU;
   $81 = ($80|0)<(0);
   if ($81) {
    $82 = $i1;
    $firstGPU = $82;
   }
  }
  $83 = $i1;
  $84 = (($6) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($83<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  (_clGetDeviceInfo(($87|0),4140,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer26>>2] = $infoStr;
  __ZL6shrLogPKcz222(9456,$vararg_buffer26);
  $88 = $i1;
  $89 = (($6) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($88<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  (_clGetDeviceInfo(($92|0),4139,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer29>>2] = $infoStr;
  __ZL6shrLogPKcz222(9480,$vararg_buffer29);
  $93 = $i1;
  $94 = (($6) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($93<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  (_clGetDeviceInfo(($97|0),4143,1024,($infoStr|0),($infoLen|0))|0);
  HEAP32[$vararg_buffer32>>2] = $infoStr;
  __ZL6shrLogPKcz222(9504,$vararg_buffer32);
  HEAP32[$returned_size>>2] = 0;
  HEAP32[$max_workgroup_size>>2] = 0;
  $98 = $i1;
  $99 = (($6) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($98<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  (_clGetDeviceInfo(($102|0),4100,4,($max_workgroup_size|0),($returned_size|0))|0);
  $103 = HEAP32[$max_workgroup_size>>2]|0;
  HEAP32[$vararg_buffer35>>2] = $103;
  __ZL6shrLogPKcz222(9536,$vararg_buffer35);
  HEAP32[$max_compute_units>>2] = 0;
  $104 = $i1;
  $105 = (($6) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($104<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  (_clGetDeviceInfo(($108|0),4098,4,($max_compute_units|0),($returned_size|0))|0);
  $109 = HEAP32[$max_compute_units>>2]|0;
  HEAP32[$vararg_buffer38>>2] = $109;
  __ZL6shrLogPKcz222(9568,$vararg_buffer38);
  $110 = $i1;
  $111 = (($110) + 1)|0;
  $i1 = $111;
 }
 __ZL6shrLogPKcz222(9608,$vararg_buffer41);
 $112 = $firstCPU;
 $113 = ($112|0)>=(0);
 if (!($113)) {
  $114 = $firstGPU;
  $115 = ($114|0)>=(0);
  if (!($115)) {
   ___assert_fail((9616|0),(9648|0),135,(9736|0));
   // unreachable;
  }
 }
 $116 = $firstCPU;
 $117 = ($116|0)<(0);
 if ($117) {
  (_printf((9752|0),($vararg_buffer43|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $118 = $firstCPU;
  HEAP32[$6>>2] = $118;
  $119 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer45>>2] = $119;
  __ZL6shrLogPKcz222(9800,$vararg_buffer45);
  $120 = HEAP32[$6>>2]|0;
  $121 = (($6) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($120<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($6) + 8|0);
  HEAP32[$125>>2] = $124;
  $126 = (($6) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($6) + 12|0);
  (_clGetDeviceInfo(($127|0),4100,4,($128|0),(0|0))|0);
  __ZL6shrLogPKcz222(9824,$vararg_buffer48);
  $129 = (($6) + 8|0);
  $130 = (_clCreateContext((0|0),1,($129|0),(0|0),(0|0),($ciErrNum|0))|0);
  $131 = (($6) + 16|0);
  HEAP32[$131>>2] = $130;
  HEAP32[$4>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$4);
  __ZL6shrLogPKcz222(9848,$vararg_buffer50);
  $132 = (($6) + 16|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($6) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (_clCreateCommandQueue(($133|0),($135|0),0,0,($ciErrNum|0))|0);
  $137 = (($6) + 20|0);
  HEAP32[$137>>2] = $136;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$5);
  $138 = $cpPlatforms;
  _free($138);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLDeviceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($this,$kernelName,$workGroupSize) {
 $this = $this|0;
 $kernelName = $kernelName|0;
 $workGroupSize = $workGroupSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $error = sp + 4|0;
 $3 = sp;
 $0 = $this;
 $1 = $kernelName;
 $2 = $workGroupSize;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = (($4) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (_clGetKernelWorkGroupInfo(($6|0),($11|0),4528,4,($12|0),(0|0))|0);
 HEAP32[$error>>2] = $13;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($error,$3);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice13allocateArrayEjb($this,$size,$print_log) {
 $this = $this|0;
 $size = $size|0;
 $print_log = $print_log|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $result = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $error = sp + 8|0;
 $3 = sp + 12|0;
 $0 = $this;
 $1 = $size;
 $4 = $print_log&1;
 $2 = $4;
 $5 = $0;
 $6 = $2;
 $7 = $6&1;
 if ($7) {
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  __ZL6shrLogPKcz222(9880,$vararg_buffer);
 }
 $9 = (($5) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (_clCreateBuffer(($10|0),1,0,($11|0),(0|0),($error|0))|0);
 $result = $12;
 HEAP32[$3>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($error,$3);
 $13 = $result;
 STACKTOP = sp;return ($13|0);
}
function __ZN10b2CLDevice9freeArrayEP7_cl_mem($this,$memObj) {
 $this = $this|0;
 $memObj = $memObj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 4|0;
 $2 = sp;
 $0 = $this;
 $1 = $memObj;
 $3 = $1;
 $4 = (_clReleaseMemObject(($3|0))|0);
 HEAP32[$ciErrNum>>2] = $4;
 HEAP32[$2>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$2);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($this,$hostPtr,$memObj,$vbo,$size) {
 $this = $this|0;
 $hostPtr = $hostPtr|0;
 $memObj = $memObj|0;
 $vbo = $vbo|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp;
 $5 = sp + 12|0;
 $0 = $this;
 $1 = $hostPtr;
 $2 = $memObj;
 $3 = $vbo;
 $4 = $size;
 $6 = $0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (($6) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = $4;
  $13 = $1;
  $14 = (_clEnqueueReadBuffer(($10|0),($11|0),1,0,($12|0),($13|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $14;
  HEAP32[$5>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$5);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9928|0),(9648|0),286,(9944|0));
  // unreachable;
 }
}
function __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($this,$hostPtr,$memObj,$vbo,$size,$blocking) {
 $this = $this|0;
 $hostPtr = $hostPtr|0;
 $memObj = $memObj|0;
 $vbo = $vbo|0;
 $size = $size|0;
 $blocking = $blocking|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 20|0;
 $6 = sp;
 $0 = $this;
 $1 = $hostPtr;
 $2 = $memObj;
 $3 = $vbo;
 $4 = $size;
 $7 = $blocking&1;
 $5 = $7;
 $8 = $0;
 $9 = $3;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (($8) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = $5;
  $15 = $14&1;
  $16 = $15 ? 1 : 0;
  $17 = $4;
  $18 = $1;
  $19 = (_clEnqueueReadBuffer(($12|0),($13|0),($16|0),0,($17|0),($18|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $19;
  HEAP32[$6>>2] = 0;
  __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$6);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9928|0),(9648|0),294,(9944|0));
  // unreachable;
 }
}
function __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($this,$memObj,$hostPtr,$offset,$size) {
 $this = $this|0;
 $memObj = $memObj|0;
 $hostPtr = $hostPtr|0;
 $offset = $offset|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp;
 $5 = sp + 12|0;
 $0 = $this;
 $1 = $memObj;
 $2 = $hostPtr;
 $3 = $offset;
 $4 = $size;
 $6 = $0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $4;
 $11 = $2;
 $12 = $3;
 $13 = (_clEnqueueWriteBuffer(($8|0),($9|0),1,0,($10|0),($11|0),($12|0),(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $13;
 HEAP32[$5>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$5);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($this,$memObj,$hostPtr,$offset,$size,$blocking) {
 $this = $this|0;
 $memObj = $memObj|0;
 $hostPtr = $hostPtr|0;
 $offset = $offset|0;
 $size = $size|0;
 $blocking = $blocking|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ciErrNum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ciErrNum = sp + 20|0;
 $6 = sp;
 $0 = $this;
 $1 = $memObj;
 $2 = $hostPtr;
 $3 = $offset;
 $4 = $size;
 $7 = $blocking&1;
 $5 = $7;
 $8 = $0;
 $9 = (($8) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $5;
 $13 = $12&1;
 $14 = $13 ? 1 : 0;
 $15 = $3;
 $16 = $4;
 $17 = $2;
 $18 = (_clEnqueueWriteBuffer(($10|0),($11|0),($14|0),($15|0),($16|0),($17|0),0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $18;
 HEAP32[$6>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($ciErrNum,$6);
 STACKTOP = sp;return;
}
function __ZN10b2CLDevice18finishCommandQueueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $error = sp + 4|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_clFinish(($4|0))|0);
 HEAP32[$error>>2] = $5;
 HEAP32[$1>>2] = 0;
 __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($error,$1);
 STACKTOP = sp;return;
}
function __ZL6shrLogPKcz222($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL14b2clCheckErrorIiiEvRKT_RKT0_223($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $r;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $a = 0;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10072|0),(9968|0),144,(10056|0));
  // unreachable;
 }
}
function __ZN15b2CLNarrowPhaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $buffer = 0, $err = 0, $len = 0, $narrowPhaseKernelSource = 0, $narrowPhaseKernelSourceLen = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 204912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer15 = sp + 72|0;
 $vararg_buffer13 = sp + 64|0;
 $vararg_buffer11 = sp + 80|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 56|0;
 $err = sp + 104|0;
 $narrowPhaseKernelSource = sp + 100|0;
 $narrowPhaseKernelSourceLen = sp + 96|0;
 $len = sp + 92|0;
 $buffer = sp + 112|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[3200>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  $81 = (__ZN14b2CLCommonData8instanceEv()|0);
  $82 = (($81) + 44|0);
  HEAP32[$82>>2] = 0;
  $83 = (($1) + 40|0);
  HEAP32[$83>>2] = 0;
  $84 = (($1) + 40|0);
  $85 = (($84) + 4|0);
  HEAP32[$85>>2] = 0;
  STACKTOP = sp;return;
 }
 (_printf((10080|0),($vararg_buffer|0))|0);
 HEAP32[$narrowPhaseKernelSource>>2] = 0;
 HEAP32[$narrowPhaseKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz267(10120,$vararg_buffer1);
 $4 = (__ZL15shrFindFilePathPKcPv268(10152,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj269($4,10192,$narrowPhaseKernelSourceLen)|0);
 HEAP32[$narrowPhaseKernelSource>>2] = $5;
 $6 = HEAP32[$narrowPhaseKernelSource>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(10208,$vararg_buffer3);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($narrowPhaseKernelSource|0),(0|0),($err|0))|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf((10280|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_clBuildProgram(($13|0),0,(0|0),(10328|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $14;
 $15 = HEAP32[$err>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  (_printf((10336|0),($vararg_buffer7|0))|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (__ZN10b2CLDevice8instanceEv()|0);
  $19 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($18)|0);
  (_clGetProgramBuildInfo(($17|0),($19|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer9>>2] = $buffer;
  (_printf((10384|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (_clCreateKernel(($20|0),(10392|0),($err|0))|0);
 $22 = (($1) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = (($1) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  (_printf((10416|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $26 = HEAP32[$err>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  (_printf((10416|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $28 = HEAP32[$1>>2]|0;
 $29 = (_clCreateKernel(($28|0),(10464|0),($err|0))|0);
 $30 = (($1) + 8|0);
 HEAP32[$30>>2] = $29;
 $31 = (($1) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  (_printf((10416|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $34 = HEAP32[$err>>2]|0;
 $35 = ($34|0)!=(0);
 if ($35) {
  (_printf((10416|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $36 = HEAP32[$1>>2]|0;
 $37 = (_clCreateKernel(($36|0),(10488|0),($err|0))|0);
 $38 = (($1) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  (_printf((10416|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $42 = HEAP32[$err>>2]|0;
 $43 = ($42|0)!=(0);
 if ($43) {
  (_printf((10416|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $44 = HEAP32[$1>>2]|0;
 $45 = (_clCreateKernel(($44|0),(10520|0),($err|0))|0);
 $46 = (($1) + 16|0);
 HEAP32[$46>>2] = $45;
 $47 = (($1) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  (_printf((10416|0),($vararg_buffer17|0))|0);
  _exit(1);
  // unreachable;
 }
 $50 = HEAP32[$err>>2]|0;
 $51 = ($50|0)!=(0);
 if ($51) {
  (_printf((10416|0),($vararg_buffer17|0))|0);
  _exit(1);
  // unreachable;
 }
 $52 = HEAP32[$1>>2]|0;
 $53 = (_clCreateKernel(($52|0),(10552|0),($err|0))|0);
 $54 = (($1) + 20|0);
 HEAP32[$54>>2] = $53;
 $55 = (($1) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  (_printf((10416|0),($vararg_buffer19|0))|0);
  _exit(1);
  // unreachable;
 }
 $58 = HEAP32[$err>>2]|0;
 $59 = ($58|0)!=(0);
 if ($59) {
  (_printf((10416|0),($vararg_buffer19|0))|0);
  _exit(1);
  // unreachable;
 }
 $60 = (__ZN10b2CLDevice8instanceEv()|0);
 $61 = (($1) + 4|0);
 $62 = (($1) + 28|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($60,$61,$62);
 $63 = HEAP32[$1>>2]|0;
 $64 = (_clCreateKernel(($63|0),(10584|0),($err|0))|0);
 $65 = (($1) + 24|0);
 HEAP32[$65>>2] = $64;
 $66 = (($1) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if (!($68)) {
  (_printf((10416|0),($vararg_buffer21|0))|0);
  _exit(1);
  // unreachable;
 }
 $69 = HEAP32[$err>>2]|0;
 $70 = ($69|0)!=(0);
 if ($70) {
  (_printf((10416|0),($vararg_buffer21|0))|0);
  _exit(1);
  // unreachable;
 }
 $71 = (($1) + 36|0);
 HEAP32[$71>>2] = 0;
 $72 = (($1) + 48|0);
 HEAP32[$72>>2] = 0;
 $73 = (__ZN14b2CLCommonData8instanceEv()|0);
 $74 = (($73) + 1156|0);
 HEAP32[$74>>2] = 0;
 $75 = (($1) + 56|0);
 HEAP32[$75>>2] = 0;
 $76 = (($1) + 52|0);
 HEAP32[$76>>2] = 0;
 $77 = (__ZN14b2CLCommonData8instanceEv()|0);
 $78 = (($77) + 52|0);
 HEAP32[$78>>2] = 0;
 $79 = (__ZN14b2CLCommonData8instanceEv()|0);
 $80 = (($79) + 48|0);
 HEAP32[$80>>2] = 0;
 (__ZN8b2CLScan8instanceEv()|0);
 $81 = (__ZN14b2CLCommonData8instanceEv()|0);
 $82 = (($81) + 44|0);
 HEAP32[$82>>2] = 0;
 $83 = (($1) + 40|0);
 HEAP32[$83>>2] = 0;
 $84 = (($1) + 40|0);
 $85 = (($84) + 4|0);
 HEAP32[$85>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhase17InitializeGPUDataEP7b2WorldP9b2ContactPi($this,$m_pWorld,$m_contactList,$m_pContactCounts) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $m_contactList = $m_contactList|0;
 $m_pContactCounts = $m_pContactCounts|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $contactCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $m_contactList;
 $3 = $m_pContactCounts;
 $4 = $0;
 $5 = $1;
 $6 = (($5) + 102876|0);
 $7 = (($6) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $contactCount = $8;
 $9 = (($4) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $contactCount;
 $12 = ($10|0)<($11|0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 103096|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = (__ZN14b2CLCommonData8instanceEv()|0);
   $18 = (($17) + 1156|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = (__ZN14b2CLCommonData8instanceEv()|0);
    $22 = (($21) + 1156|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     __ZdaPv($23);
    }
   }
   $25 = $contactCount;
   $$arith2 = ($25*72)|0;
   $$overflow3 = ($25>>>0)>(59652323);
   $26 = $$overflow3 ? -1 : $$arith2;
   $27 = (__Znaj($26)|0);
   $28 = (__ZN14b2CLCommonData8instanceEv()|0);
   $29 = (($28) + 1156|0);
   HEAP32[$29>>2] = $27;
   $30 = (__ZN14b2CLCommonData8instanceEv()|0);
   $31 = (($30) + 1172|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = (__ZN14b2CLCommonData8instanceEv()|0);
    $35 = (($34) + 1172|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     __ZdaPv($36);
    }
   }
   $38 = $contactCount;
   $39 = $38<<2;
   $$arith = $39<<2;
   $$overflow = ($39>>>0)>(1073741823);
   $40 = $$overflow ? -1 : $$arith;
   $41 = (__Znaj($40)|0);
   $42 = (__ZN14b2CLCommonData8instanceEv()|0);
   $43 = (($42) + 1172|0);
   HEAP32[$43>>2] = $41;
  }
  $44 = (__ZN14b2CLCommonData8instanceEv()|0);
  $45 = (($44) + 48|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = (__ZN10b2CLDevice8instanceEv()|0);
   $49 = (__ZN14b2CLCommonData8instanceEv()|0);
   $50 = (($49) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($48,$51);
  }
  $52 = (__ZN10b2CLDevice8instanceEv()|0);
  $53 = $contactCount;
  $54 = $53<<2;
  $55 = (__ZN10b2CLDevice13allocateArrayEjb($52,$54,0)|0);
  $56 = (__ZN14b2CLCommonData8instanceEv()|0);
  $57 = (($56) + 48|0);
  HEAP32[$57>>2] = $55;
  $58 = (__ZN14b2CLCommonData8instanceEv()|0);
  $59 = (($58) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = (__ZN10b2CLDevice8instanceEv()|0);
   $63 = (__ZN14b2CLCommonData8instanceEv()|0);
   $64 = (($63) + 52|0);
   $65 = HEAP32[$64>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($62,$65);
  }
  $66 = (__ZN10b2CLDevice8instanceEv()|0);
  $67 = $contactCount;
  $68 = $67<<2;
  $69 = (__ZN10b2CLDevice13allocateArrayEjb($66,$68,0)|0);
  $70 = (__ZN14b2CLCommonData8instanceEv()|0);
  $71 = (($70) + 52|0);
  HEAP32[$71>>2] = $69;
  $72 = $contactCount;
  $73 = (($4) + 36|0);
  HEAP32[$73>>2] = $72;
 }
 $74 = (__ZN14b2CLCommonData8instanceEv()|0);
 $75 = (($74) + 44|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (1 - ($76))|0;
 $78 = (__ZN14b2CLCommonData8instanceEv()|0);
 $79 = (($78) + 44|0);
 HEAP32[$79>>2] = $77;
 $80 = (__ZN14b2CLCommonData8instanceEv()|0);
 $81 = (($80) + 44|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($4) + 40|0);
 $84 = (($83) + ($82<<2)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $contactCount;
 $87 = ($85|0)<($86|0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = (__ZN14b2CLCommonData8instanceEv()|0);
 $89 = (($88) + 44|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (__ZN14b2CLCommonData8instanceEv()|0);
 $92 = (($91) + 36|0);
 $93 = (($92) + ($90<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0|0);
 if ($95) {
  $96 = (__ZN10b2CLDevice8instanceEv()|0);
  $97 = (__ZN14b2CLCommonData8instanceEv()|0);
  $98 = (($97) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (__ZN14b2CLCommonData8instanceEv()|0);
  $101 = (($100) + 36|0);
  $102 = (($101) + ($99<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($96,$103);
 }
 $104 = (__ZN10b2CLDevice8instanceEv()|0);
 $105 = $contactCount;
 $106 = ($105*72)|0;
 $107 = (__ZN10b2CLDevice13allocateArrayEjb($104,$106,0)|0);
 $108 = (__ZN14b2CLCommonData8instanceEv()|0);
 $109 = (($108) + 44|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (__ZN14b2CLCommonData8instanceEv()|0);
 $112 = (($111) + 36|0);
 $113 = (($112) + ($110<<2)|0);
 HEAP32[$113>>2] = $107;
 $114 = $contactCount;
 $115 = (__ZN14b2CLCommonData8instanceEv()|0);
 $116 = (($115) + 44|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($4) + 40|0);
 $119 = (($118) + ($117<<2)|0);
 HEAP32[$119>>2] = $114;
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhase18UpdateContactPairsEiPii($this,$contactNum,$pContactNums,$maxContactNum) {
 $this = $this|0;
 $contactNum = $contactNum|0;
 $pContactNums = $pContactNums|0;
 $maxContactNum = $maxContactNum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0, $collideKernel = 0, $contactType = 0, $err = 0, $global = 0, $group_num = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 28|0;
 $global = sp + 60|0;
 $0 = $this;
 $1 = $contactNum;
 $2 = $pContactNums;
 HEAP32[$3>>2] = $maxContactNum;
 $4 = $0;
 $contactType = 0;
 L1: while(1) {
  $5 = $contactType;
  $6 = ($5|0)<(5);
  if (!($6)) {
   label = 20;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $a = 0;
  }
  $10 = $contactType;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(0);
  if ($14) {
   $a1 = 0;
   $15 = $contactType;
   switch ($15|0) {
   case 2:  {
    $20 = (($4) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $collideKernel = $21;
    break;
   }
   case 3:  {
    $22 = (($4) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $collideKernel = $23;
    break;
   }
   case 0:  {
    $16 = (($4) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $collideKernel = $17;
    break;
   }
   case 1:  {
    $18 = (($4) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $collideKernel = $19;
    break;
   }
   case 4:  {
    $24 = (($4) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $collideKernel = $25;
    break;
   }
   default: {
    label = 12;
    break L1;
   }
   }
   $err = 0;
   $27 = $collideKernel;
   $28 = $a1;
   $29 = (($28) + 1)|0;
   $a1 = $29;
   $30 = (__ZN14b2CLCommonData8instanceEv()|0);
   $31 = (($30) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (__ZN14b2CLCommonData8instanceEv()|0);
   $34 = (($33) + 36|0);
   $35 = (($34) + ($32<<2)|0);
   $36 = (_clSetKernelArg(($27|0),($28|0),4,($35|0))|0);
   $37 = $err;
   $38 = $37 | $36;
   $err = $38;
   $39 = $collideKernel;
   $40 = $a1;
   $41 = (($40) + 1)|0;
   $a1 = $41;
   $42 = (__ZN14b2CLCommonData8instanceEv()|0);
   $43 = (($42) + 48|0);
   $44 = (_clSetKernelArg(($39|0),($40|0),4,($43|0))|0);
   $45 = $err;
   $46 = $45 | $44;
   $err = $46;
   $47 = $collideKernel;
   $48 = $a1;
   $49 = (($48) + 1)|0;
   $a1 = $49;
   $50 = (__ZN14b2CLCommonData8instanceEv()|0);
   $51 = (($50) + 56|0);
   $52 = (_clSetKernelArg(($47|0),($48|0),4,($51|0))|0);
   $53 = $err;
   $54 = $53 | $52;
   $err = $54;
   $55 = $collideKernel;
   $56 = $a1;
   $57 = (($56) + 1)|0;
   $a1 = $57;
   $58 = (__ZN14b2CLCommonData8instanceEv()|0);
   $59 = (($58) + 64|0);
   $60 = (_clSetKernelArg(($55|0),($56|0),4,($59|0))|0);
   $61 = $err;
   $62 = $61 | $60;
   $err = $62;
   $63 = $collideKernel;
   $64 = $a1;
   $65 = (($64) + 1)|0;
   $a1 = $65;
   $66 = (__ZN14b2CLCommonData8instanceEv()|0);
   $67 = (($66) + 80|0);
   $68 = (_clSetKernelArg(($63|0),($64|0),4,($67|0))|0);
   $69 = $err;
   $70 = $69 | $68;
   $err = $70;
   $71 = $collideKernel;
   $72 = $a1;
   $73 = (($72) + 1)|0;
   $a1 = $73;
   $74 = (__ZN14b2CLCommonData8instanceEv()|0);
   $75 = (($74) + 84|0);
   $76 = (_clSetKernelArg(($71|0),($72|0),4,($75|0))|0);
   $77 = $err;
   $78 = $77 | $76;
   $err = $78;
   $79 = $collideKernel;
   $80 = $a1;
   $81 = (($80) + 1)|0;
   $a1 = $81;
   $82 = (_clSetKernelArg(($79|0),($80|0),4,($3|0))|0);
   $83 = $err;
   $84 = $83 | $82;
   $err = $84;
   $85 = $collideKernel;
   $86 = $a1;
   $87 = (($86) + 1)|0;
   $a1 = $87;
   $88 = $2;
   $89 = $contactType;
   $90 = (($88) + ($89<<2)|0);
   $91 = (_clSetKernelArg(($85|0),($86|0),4,($90|0))|0);
   $92 = $err;
   $93 = $92 | $91;
   $err = $93;
   $94 = $err;
   $95 = ($94|0)!=(0);
   if ($95) {
    label = 14;
    break;
   }
   $98 = $contactType;
   $99 = $2;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($4) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + ($103))|0;
   $105 = (($104) - 1)|0;
   $106 = (($4) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($105>>>0) / ($107>>>0))&-1;
   $group_num = $108;
   $109 = $group_num;
   $110 = (($4) + 28|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = Math_imul($109, $111)|0;
   HEAP32[$global>>2] = $112;
   $err = 0;
   $113 = (__ZN10b2CLDevice8instanceEv()|0);
   $114 = (__ZNK10b2CLDevice15GetCommandQueueEv($113)|0);
   $115 = $collideKernel;
   $116 = (($4) + 28|0);
   $117 = (_clEnqueueNDRangeKernel(($114|0),($115|0),1,(0|0),($global|0),($116|0),0,(0|0),(0|0))|0);
   $118 = $err;
   $119 = $118 | $117;
   $err = $119;
   $120 = $err;
   $121 = ($120|0)!=(0);
   if ($121) {
    label = 16;
    break;
   }
  }
  $122 = $contactType;
  $123 = (($122) + 1)|0;
  $contactType = $123;
 }
 if ((label|0) == 12) {
  $26 = $contactType;
  HEAP32[$vararg_buffer>>2] = $26;
  (_printf((10616|0),($vararg_buffer|0))|0);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $96 = (($4) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $97;
  (_printf((10656|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  (_printf((10704|0),($vararg_buffer4|0))|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2CLNarrowPhase19CompactContactPairsEi($this,$contactNum) {
 $this = $this|0;
 $contactNum = $contactNum|0;
 var $$arith = 0, $$arith4 = 0, $$overflow = 0, $$overflow5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $i = 0, $manifoldBinaryBitList = 0, $scanResult = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $contactNum;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)==(1);
 if ($4) {
  $a = 0;
  $err = 0;
  $5 = (($2) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $a;
  $8 = (($7) + 1)|0;
  $a = $8;
  $9 = (__ZN14b2CLCommonData8instanceEv()|0);
  $10 = (($9) + 48|0);
  $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
  $12 = $err;
  $13 = $12 | $11;
  $err = $13;
  $14 = (($2) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $a;
  $17 = (($16) + 1)|0;
  $a = $17;
  $18 = (__ZN14b2CLCommonData8instanceEv()|0);
  $19 = (($18) + 52|0);
  $20 = (_clSetKernelArg(($15|0),($16|0),4,($19|0))|0);
  $21 = $err;
  $22 = $21 | $20;
  $err = $22;
  $23 = (__ZN8b2CLScan8instanceEv()|0);
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   $27 = (__ZN10b2CLDevice8instanceEv()|0);
   $28 = (__ZN10b2CLDevice13allocateArrayEjb($27,4,0)|0);
   $29 = (__ZN8b2CLScan8instanceEv()|0);
   $30 = (($29) + 4|0);
   HEAP32[$30>>2] = $28;
  }
  $31 = (($2) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $a;
  $34 = (($33) + 1)|0;
  $a = $34;
  $35 = (__ZN8b2CLScan8instanceEv()|0);
  $36 = (($35) + 4|0);
  $37 = (_clSetKernelArg(($32|0),($33|0),4,($36|0))|0);
  $38 = $err;
  $39 = $38 | $37;
  $err = $39;
  $40 = $err;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = (($2) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$vararg_buffer>>2] = $43;
   (_printf((10656|0),($vararg_buffer|0))|0);
   STACKTOP = sp;return;
  }
  HEAP32[$global>>2] = 1;
  $err = 0;
  $44 = (__ZN10b2CLDevice8instanceEv()|0);
  $45 = (__ZNK10b2CLDevice15GetCommandQueueEv($44)|0);
  $46 = (($2) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_clEnqueueNDRangeKernel(($45|0),($47|0),1,(0|0),($global|0),(0|0),0,(0|0),(0|0))|0);
  $49 = $err;
  $50 = $49 | $48;
  $err = $50;
  $51 = $err;
  $52 = ($51|0)!=(0);
  if ($52) {
   (_printf((10760|0),($vararg_buffer1|0))|0);
   STACKTOP = sp;return;
  } else {
   STACKTOP = sp;return;
  }
 }
 $53 = $1;
 $$arith4 = $53<<2;
 $$overflow5 = ($53>>>0)>(1073741823);
 $54 = $$overflow5 ? -1 : $$arith4;
 $55 = (__Znaj($54)|0);
 $manifoldBinaryBitList = $55;
 $56 = $1;
 $$arith = $56<<2;
 $$overflow = ($56>>>0)>(1073741823);
 $57 = $$overflow ? -1 : $$arith;
 $58 = (__Znaj($57)|0);
 $scanResult = $58;
 $59 = (__ZN10b2CLDevice8instanceEv()|0);
 $60 = $manifoldBinaryBitList;
 $61 = (__ZN14b2CLCommonData8instanceEv()|0);
 $62 = (($61) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $1;
 $65 = $64<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($59,$60,$63,0,$65,1);
 $66 = $scanResult;
 HEAP32[$66>>2] = 0;
 $i = 1;
 while(1) {
  $67 = $i;
  $68 = $1;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $i;
  $71 = (($70) - 1)|0;
  $72 = $scanResult;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = (($75) - 1)|0;
  $77 = $manifoldBinaryBitList;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($74) + ($79))|0;
  $81 = $i;
  $82 = $scanResult;
  $83 = (($82) + ($81<<2)|0);
  HEAP32[$83>>2] = $80;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = (__ZN8b2CLScan8instanceEv()|0);
 $87 = (__ZN8b2CLScan20GetElementsAllocatedEv($86)|0);
 $88 = $1;
 $89 = ($87|0)<($88|0);
 if ($89) {
  $90 = (__ZN8b2CLScan8instanceEv()|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)!=(0|0);
  if ($92) {
   $93 = (__ZN10b2CLDevice8instanceEv()|0);
   $94 = (__ZN8b2CLScan8instanceEv()|0);
   $95 = HEAP32[$94>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($93,$95);
  }
  $96 = (__ZN10b2CLDevice8instanceEv()|0);
  $97 = $1;
  $98 = $97<<2;
  $99 = (__ZN10b2CLDevice13allocateArrayEjb($96,$98,0)|0);
  $100 = (__ZN8b2CLScan8instanceEv()|0);
  HEAP32[$100>>2] = $99;
 }
 $101 = (__ZN10b2CLDevice8instanceEv()|0);
 $102 = (__ZN8b2CLScan8instanceEv()|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $scanResult;
 $105 = $1;
 $106 = $105<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($101,$103,$104,0,$106,1);
 $107 = $manifoldBinaryBitList;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  __ZdaPv($107);
 }
 $109 = $scanResult;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  __ZdaPv($109);
 }
 $111 = (__ZN8b2CLScan8instanceEv()|0);
 $112 = (__ZN14b2CLCommonData8instanceEv()|0);
 $113 = (($112) + 52|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (__ZN14b2CLCommonData8instanceEv()|0);
 $116 = (($115) + 48|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (__ZN8b2CLScan8instanceEv()|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $1;
 (__ZN8b2CLScan22ParallelCompactIndicesEP7_cl_memS1_S1_iS1_($111,$114,$117,$119,$120,0)|0);
 STACKTOP = sp;return;
}
function __ZN15b2CLNarrowPhase26ReadbackGPUDataForListenerEP7b2WorldPP9b2ContactP17b2ContactListenerPiS7_($this,$m_pWorld,$m_contactList,$listener,$enableBitArray,$temp) {
 $this = $this|0;
 $m_pWorld = $m_pWorld|0;
 $m_contactList = $m_contactList|0;
 $listener = $listener|0;
 $enableBitArray = $enableBitArray|0;
 $temp = $temp|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bFoundSameContact = 0;
 var $bodyA = 0, $bodyB = 0, $c = 0, $c1 = 0, $edge = 0, $fA = 0, $fB = 0, $fixtureA = 0, $fixtureB = 0, $fixtureIndexA = 0, $fixtureIndexB = 0, $globalIndex = 0, $globalIndices = 0, $i = 0, $iA = 0, $iB = 0, $indexA = 0, $indexB = 0, $k = 0, $k2 = 0;
 var $manifoldBinaryBitList = 0, $manifoldListData = 0, $oldManifold = 0, $pc = 0, $totalContactCount = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $oldManifold = sp + 32|0;
 $0 = $this;
 $1 = $m_pWorld;
 $2 = $m_contactList;
 $3 = $listener;
 $4 = $enableBitArray;
 $5 = $temp;
 $6 = $1;
 $7 = (($6) + 102876|0);
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = (($11) + 102876|0);
 $13 = (($12) + 108|0);
 $14 = HEAP32[$13>>2]|0;
 $totalContactCount = $14;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $pc = $16;
 while(1) {
  $17 = $pc;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $pc;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 | 64;
  HEAP32[$20>>2] = $22;
  $23 = $pc;
  $24 = (__ZN9b2Contact7GetNextEv($23)|0);
  $pc = $24;
 }
 __ZN10b2ManifoldC2Ev($oldManifold);
 $25 = $totalContactCount;
 $26 = ($25|0)>(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = (($27) + 103096|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 4;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $4;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = $totalContactCount;
    $$arith = $34<<2;
    $$overflow = ($34>>>0)>(1073741823);
    $35 = $$overflow ? -1 : $$arith;
    $36 = (__Znaj($35)|0);
    $manifoldBinaryBitList = $36;
    $37 = (__ZN10b2CLDevice8instanceEv()|0);
    $38 = $manifoldBinaryBitList;
    $39 = (__ZN14b2CLCommonData8instanceEv()|0);
    $40 = (($39) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $totalContactCount;
    $43 = $42<<2;
    __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($37,$38,$41,0,$43,1);
    break;
   } else {
    ___assert_fail((10920|0),(10824|0),845,(10936|0));
    // unreachable;
   }
  }
 } while(0);
 $44 = (__ZN14b2CLCommonData8instanceEv()|0);
 $45 = (($44) + 1156|0);
 $46 = HEAP32[$45>>2]|0;
 $manifoldListData = $46;
 $47 = (__ZN10b2CLDevice8instanceEv()|0);
 $48 = $manifoldListData;
 $49 = (__ZN14b2CLCommonData8instanceEv()|0);
 $50 = (($49) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (__ZN14b2CLCommonData8instanceEv()|0);
 $53 = (($52) + 36|0);
 $54 = (($53) + ($51<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $totalContactCount;
 $57 = ($56*72)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($47,$48,$55,0,$57);
 $58 = (__ZN14b2CLCommonData8instanceEv()|0);
 $59 = (($58) + 1172|0);
 $60 = HEAP32[$59>>2]|0;
 $globalIndices = $60;
 $61 = (__ZN10b2CLDevice8instanceEv()|0);
 $62 = $globalIndices;
 $63 = (__ZN14b2CLCommonData8instanceEv()|0);
 $64 = (($63) + 80|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $totalContactCount;
 $67 = $66<<2;
 $68 = $67<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($61,$62,$65,0,$68,1);
 $i = 0;
 L18: while(1) {
  $69 = $i;
  $70 = $totalContactCount;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   label = 63;
   break;
  }
  $72 = $1;
  $73 = (($72) + 103096|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74 & 4;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $i;
   $78 = $manifoldBinaryBitList;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $i;
   $82 = $4;
   $83 = (($82) + ($81<<2)|0);
   HEAP32[$83>>2] = $80;
  }
  $84 = $i;
  $globalIndex = $84;
  $85 = $globalIndex;
  $86 = $manifoldListData;
  $87 = (($86) + (($85*72)|0)|0);
  $88 = (($87) + 68|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(0);
  do {
   if ($90) {
   } else {
    $91 = $globalIndex;
    $92 = $91<<2;
    $93 = $globalIndices;
    $94 = (($93) + ($92<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $fixtureIndexA = $95;
    $96 = $globalIndex;
    $97 = $96<<2;
    $98 = (($97) + 1)|0;
    $99 = $globalIndices;
    $100 = (($99) + ($98<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $fixtureIndexB = $101;
    $102 = $fixtureIndexA;
    $103 = (__ZN14b2CLCommonData8instanceEv()|0);
    $104 = (($103) + 1160|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $fixtureA = $107;
    $108 = $fixtureIndexB;
    $109 = (__ZN14b2CLCommonData8instanceEv()|0);
    $110 = (($109) + 1160|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($108<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $fixtureB = $113;
    $114 = $fixtureIndexA;
    $115 = (__ZN14b2CLCommonData8instanceEv()|0);
    $116 = (($115) + 1164|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + ($114<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $indexA = $119;
    $120 = $fixtureIndexB;
    $121 = (__ZN14b2CLCommonData8instanceEv()|0);
    $122 = (($121) + 1164|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($120<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $indexB = $125;
    $126 = $fixtureA;
    $127 = (__ZN9b2Fixture7GetBodyEv($126)|0);
    $bodyA = $127;
    $128 = $fixtureB;
    $129 = (__ZN9b2Fixture7GetBodyEv($128)|0);
    $bodyB = $129;
    $130 = $bodyA;
    $131 = $bodyB;
    $132 = ($130|0)==($131|0);
    if ($132) {
     label = 18;
     break L18;
    }
    $133 = $bodyB;
    $134 = (__ZN6b2Body14GetContactListEv($133)|0);
    $edge = $134;
    $bFoundSameContact = 0;
    while(1) {
     $135 = $edge;
     $136 = ($135|0)!=(0|0);
     if (!($136)) {
      break;
     }
     $137 = $edge;
     $138 = HEAP32[$137>>2]|0;
     $139 = $bodyA;
     $140 = ($138|0)==($139|0);
     if ($140) {
      $141 = $edge;
      $142 = (($141) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (__ZN9b2Contact11GetFixtureAEv($143)|0);
      $fA = $144;
      $145 = $edge;
      $146 = (($145) + 4|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (__ZN9b2Contact11GetFixtureBEv($147)|0);
      $fB = $148;
      $149 = $edge;
      $150 = (($149) + 4|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (__ZNK9b2Contact14GetChildIndexAEv($151)|0);
      $iA = $152;
      $153 = $edge;
      $154 = (($153) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (__ZNK9b2Contact14GetChildIndexBEv($155)|0);
      $iB = $156;
      $157 = $fA;
      $158 = $fixtureA;
      $159 = ($157|0)==($158|0);
      if ($159) {
       $160 = $fB;
       $161 = $fixtureB;
       $162 = ($160|0)==($161|0);
       if ($162) {
        $163 = $iA;
        $164 = $indexA;
        $165 = ($163|0)==($164|0);
        if ($165) {
         $166 = $iB;
         $167 = $indexB;
         $168 = ($166|0)==($167|0);
         if ($168) {
          label = 26;
          break;
         }
        }
       }
      }
      $169 = $fA;
      $170 = $fixtureB;
      $171 = ($169|0)==($170|0);
      if ($171) {
       $172 = $fB;
       $173 = $fixtureA;
       $174 = ($172|0)==($173|0);
       if ($174) {
        $175 = $iA;
        $176 = $indexB;
        $177 = ($175|0)==($176|0);
        if ($177) {
         $178 = $iB;
         $179 = $indexA;
         $180 = ($178|0)==($179|0);
         if ($180) {
          label = 31;
          break;
         }
        }
       }
      }
     }
     $181 = $edge;
     $182 = (($181) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $edge = $183;
    }
    if ((label|0) == 26) {
     label = 0;
     $bFoundSameContact = 1;
    }
    else if ((label|0) == 31) {
     label = 0;
     $bFoundSameContact = 1;
    }
    $184 = $bFoundSameContact;
    $185 = $184&1;
    if ($185) {
     $186 = $edge;
     $187 = (($186) + 4|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + 64|0);
     dest=$oldManifold+0|0; src=$189+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $190 = $edge;
     $191 = (($190) + 4|0);
     $192 = HEAP32[$191>>2]|0;
     $c = $192;
     $193 = $i;
     $194 = $manifoldListData;
     $195 = (($194) + (($193*72)|0)|0);
     $196 = (($195) + 68|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $c;
     $199 = (($198) + 64|0);
     $200 = (($199) + 60|0);
     HEAP32[$200>>2] = $197;
     $201 = $i;
     $202 = $manifoldListData;
     $203 = (($202) + (($201*72)|0)|0);
     $204 = (($203) + 8|0);
     $205 = +HEAPF32[$204>>2];
     $206 = $c;
     $207 = (($206) + 64|0);
     $208 = (($207) + 48|0);
     HEAPF32[$208>>2] = $205;
     $209 = $i;
     $210 = $manifoldListData;
     $211 = (($210) + (($209*72)|0)|0);
     $212 = (($211) + 8|0);
     $213 = (($212) + 4|0);
     $214 = +HEAPF32[$213>>2];
     $215 = $c;
     $216 = (($215) + 64|0);
     $217 = (($216) + 48|0);
     $218 = (($217) + 4|0);
     HEAPF32[$218>>2] = $214;
     $219 = $i;
     $220 = $manifoldListData;
     $221 = (($220) + (($219*72)|0)|0);
     $222 = +HEAPF32[$221>>2];
     $223 = $c;
     $224 = (($223) + 64|0);
     $225 = (($224) + 40|0);
     HEAPF32[$225>>2] = $222;
     $226 = $i;
     $227 = $manifoldListData;
     $228 = (($227) + (($226*72)|0)|0);
     $229 = (($228) + 4|0);
     $230 = +HEAPF32[$229>>2];
     $231 = $c;
     $232 = (($231) + 64|0);
     $233 = (($232) + 40|0);
     $234 = (($233) + 4|0);
     HEAPF32[$234>>2] = $230;
     $235 = $i;
     $236 = $manifoldListData;
     $237 = (($236) + (($235*72)|0)|0);
     $238 = (($237) + 64|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $c;
     $241 = (($240) + 64|0);
     $242 = (($241) + 56|0);
     HEAP32[$242>>2] = $239;
     $k = 0;
     while(1) {
      $243 = $k;
      $244 = $c;
      $245 = (($244) + 64|0);
      $246 = (($245) + 60|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = ($243|0)<($247|0);
      if (!($248)) {
       break;
      }
      $249 = $k;
      $250 = $i;
      $251 = $manifoldListData;
      $252 = (($251) + (($250*72)|0)|0);
      $253 = (($252) + 16|0);
      $254 = (($253) + (($249*24)|0)|0);
      $255 = (($254) + 16|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $k;
      $258 = $c;
      $259 = (($258) + 64|0);
      $260 = (($259) + (($257*20)|0)|0);
      $261 = (($260) + 16|0);
      HEAP32[$261>>2] = $256;
      $262 = $k;
      $263 = $i;
      $264 = $manifoldListData;
      $265 = (($264) + (($263*72)|0)|0);
      $266 = (($265) + 16|0);
      $267 = (($266) + (($262*24)|0)|0);
      $268 = +HEAPF32[$267>>2];
      $269 = $k;
      $270 = $c;
      $271 = (($270) + 64|0);
      $272 = (($271) + (($269*20)|0)|0);
      HEAPF32[$272>>2] = $268;
      $273 = $k;
      $274 = $i;
      $275 = $manifoldListData;
      $276 = (($275) + (($274*72)|0)|0);
      $277 = (($276) + 16|0);
      $278 = (($277) + (($273*24)|0)|0);
      $279 = (($278) + 4|0);
      $280 = +HEAPF32[$279>>2];
      $281 = $k;
      $282 = $c;
      $283 = (($282) + 64|0);
      $284 = (($283) + (($281*20)|0)|0);
      $285 = (($284) + 4|0);
      HEAPF32[$285>>2] = $280;
      $286 = $k;
      $287 = $i;
      $288 = $manifoldListData;
      $289 = (($288) + (($287*72)|0)|0);
      $290 = (($289) + 16|0);
      $291 = (($290) + (($286*24)|0)|0);
      $292 = (($291) + 8|0);
      $293 = +HEAPF32[$292>>2];
      $294 = $k;
      $295 = $c;
      $296 = (($295) + 64|0);
      $297 = (($296) + (($294*20)|0)|0);
      $298 = (($297) + 8|0);
      HEAPF32[$298>>2] = $293;
      $299 = $k;
      $300 = $i;
      $301 = $manifoldListData;
      $302 = (($301) + (($300*72)|0)|0);
      $303 = (($302) + 16|0);
      $304 = (($303) + (($299*24)|0)|0);
      $305 = (($304) + 12|0);
      $306 = +HEAPF32[$305>>2];
      $307 = $k;
      $308 = $c;
      $309 = (($308) + 64|0);
      $310 = (($309) + (($307*20)|0)|0);
      $311 = (($310) + 12|0);
      HEAPF32[$311>>2] = $306;
      $312 = $k;
      $313 = (($312) + 1)|0;
      $k = $313;
     }
     $314 = $c;
     $315 = (($314) + 4|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $316 & -65;
     HEAP32[$315>>2] = $317;
     $318 = $c;
     $319 = (($318) + 4|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $320 | 2;
     HEAP32[$319>>2] = $321;
     $322 = $c;
     $323 = (($322) + 4|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = $324 | 4;
     HEAP32[$323>>2] = $325;
     $326 = $1;
     $327 = (($326) + 103096|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $328 & 4;
     $330 = ($329|0)!=(0);
     if ($330) {
      $331 = $3;
      $332 = HEAP32[$331>>2]|0;
      $333 = (($332) + 16|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = $c;
      FUNCTION_TABLE_viii[$334 & 1023]($331,$335,$oldManifold);
      $336 = $c;
      $337 = (($336) + 4|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = $338 & 4;
      $340 = ($339>>>0)>(0);
      $341 = $340&1;
      $342 = $i;
      $343 = $4;
      $344 = (($343) + ($342<<2)|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = $345 & $341;
      HEAP32[$344>>2] = $346;
     }
     break;
    }
    $347 = $bodyB;
    $348 = $bodyA;
    $349 = (__ZNK6b2Body13ShouldCollideEPKS_($347,$348)|0);
    $350 = $349&1;
    $351 = ($350|0)==(0);
    if ($351) {
     label = 43;
     break L18;
    }
    $352 = $1;
    $353 = (($352) + 102876|0);
    $354 = (($353) + 116|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)!=(0|0);
    if ($356) {
     $357 = $1;
     $358 = (($357) + 102876|0);
     $359 = (($358) + 116|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = HEAP32[$360>>2]|0;
     $362 = (($361) + 8|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $fixtureA;
     $365 = $fixtureB;
     $366 = (FUNCTION_TABLE_iiii[$363 & 1023]($360,$364,$365)|0);
     $367 = $366&1;
     $368 = ($367|0)==(0);
     if ($368) {
      label = 46;
      break L18;
     }
    }
    $369 = $fixtureA;
    $370 = $indexA;
    $371 = $fixtureB;
    $372 = $indexB;
    $373 = $1;
    $374 = (($373) + 102876|0);
    $375 = (($374) + 124|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($369,$370,$371,$372,$376)|0);
    $c1 = $377;
    $378 = $c1;
    $379 = ($378|0)==(0|0);
    if ($379) {
     label = 48;
     break L18;
    }
    $380 = $c1;
    $381 = (__ZN9b2Contact11GetFixtureAEv($380)|0);
    $fixtureA = $381;
    $382 = $c1;
    $383 = (__ZN9b2Contact11GetFixtureBEv($382)|0);
    $fixtureB = $383;
    $384 = $c1;
    $385 = (__ZNK9b2Contact14GetChildIndexAEv($384)|0);
    $indexA = $385;
    $386 = $c1;
    $387 = (__ZNK9b2Contact14GetChildIndexBEv($386)|0);
    $indexB = $387;
    $388 = $fixtureA;
    $389 = (__ZN9b2Fixture7GetBodyEv($388)|0);
    $bodyA = $389;
    $390 = $fixtureB;
    $391 = (__ZN9b2Fixture7GetBodyEv($390)|0);
    $bodyB = $391;
    $392 = $c1;
    $393 = (($392) + 8|0);
    HEAP32[$393>>2] = 0;
    $394 = $2;
    $395 = HEAP32[$394>>2]|0;
    $396 = $c1;
    $397 = (($396) + 12|0);
    HEAP32[$397>>2] = $395;
    $398 = $2;
    $399 = HEAP32[$398>>2]|0;
    $400 = ($399|0)!=(0|0);
    if ($400) {
     $401 = $c1;
     $402 = $2;
     $403 = HEAP32[$402>>2]|0;
     $404 = (($403) + 8|0);
     HEAP32[$404>>2] = $401;
    }
    $405 = $c1;
    $406 = $2;
    HEAP32[$406>>2] = $405;
    $407 = $c1;
    $408 = $c1;
    $409 = (($408) + 16|0);
    $410 = (($409) + 4|0);
    HEAP32[$410>>2] = $407;
    $411 = $bodyB;
    $412 = $c1;
    $413 = (($412) + 16|0);
    HEAP32[$413>>2] = $411;
    $414 = $c1;
    $415 = (($414) + 16|0);
    $416 = (($415) + 8|0);
    HEAP32[$416>>2] = 0;
    $417 = $bodyA;
    $418 = (($417) + 120|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = $c1;
    $421 = (($420) + 16|0);
    $422 = (($421) + 12|0);
    HEAP32[$422>>2] = $419;
    $423 = $bodyA;
    $424 = (($423) + 120|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = ($425|0)!=(0|0);
    if ($426) {
     $427 = $c1;
     $428 = (($427) + 16|0);
     $429 = $bodyA;
     $430 = (($429) + 120|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = (($431) + 8|0);
     HEAP32[$432>>2] = $428;
    }
    $433 = $c1;
    $434 = (($433) + 16|0);
    $435 = $bodyA;
    $436 = (($435) + 120|0);
    HEAP32[$436>>2] = $434;
    $437 = $c1;
    $438 = $c1;
    $439 = (($438) + 32|0);
    $440 = (($439) + 4|0);
    HEAP32[$440>>2] = $437;
    $441 = $bodyA;
    $442 = $c1;
    $443 = (($442) + 32|0);
    HEAP32[$443>>2] = $441;
    $444 = $c1;
    $445 = (($444) + 32|0);
    $446 = (($445) + 8|0);
    HEAP32[$446>>2] = 0;
    $447 = $bodyB;
    $448 = (($447) + 120|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = $c1;
    $451 = (($450) + 32|0);
    $452 = (($451) + 12|0);
    HEAP32[$452>>2] = $449;
    $453 = $bodyB;
    $454 = (($453) + 120|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = ($455|0)!=(0|0);
    if ($456) {
     $457 = $c1;
     $458 = (($457) + 32|0);
     $459 = $bodyB;
     $460 = (($459) + 120|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = (($461) + 8|0);
     HEAP32[$462>>2] = $458;
    }
    $463 = $c1;
    $464 = (($463) + 32|0);
    $465 = $bodyB;
    $466 = (($465) + 120|0);
    HEAP32[$466>>2] = $464;
    $467 = $c1;
    $468 = (($467) + 64|0);
    dest=$oldManifold+0|0; src=$468+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $469 = $i;
    $470 = $manifoldListData;
    $471 = (($470) + (($469*72)|0)|0);
    $472 = (($471) + 68|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $c1;
    $475 = (($474) + 64|0);
    $476 = (($475) + 60|0);
    HEAP32[$476>>2] = $473;
    $477 = $i;
    $478 = $manifoldListData;
    $479 = (($478) + (($477*72)|0)|0);
    $480 = (($479) + 8|0);
    $481 = +HEAPF32[$480>>2];
    $482 = $c1;
    $483 = (($482) + 64|0);
    $484 = (($483) + 48|0);
    HEAPF32[$484>>2] = $481;
    $485 = $i;
    $486 = $manifoldListData;
    $487 = (($486) + (($485*72)|0)|0);
    $488 = (($487) + 8|0);
    $489 = (($488) + 4|0);
    $490 = +HEAPF32[$489>>2];
    $491 = $c1;
    $492 = (($491) + 64|0);
    $493 = (($492) + 48|0);
    $494 = (($493) + 4|0);
    HEAPF32[$494>>2] = $490;
    $495 = $i;
    $496 = $manifoldListData;
    $497 = (($496) + (($495*72)|0)|0);
    $498 = +HEAPF32[$497>>2];
    $499 = $c1;
    $500 = (($499) + 64|0);
    $501 = (($500) + 40|0);
    HEAPF32[$501>>2] = $498;
    $502 = $i;
    $503 = $manifoldListData;
    $504 = (($503) + (($502*72)|0)|0);
    $505 = (($504) + 4|0);
    $506 = +HEAPF32[$505>>2];
    $507 = $c1;
    $508 = (($507) + 64|0);
    $509 = (($508) + 40|0);
    $510 = (($509) + 4|0);
    HEAPF32[$510>>2] = $506;
    $511 = $i;
    $512 = $manifoldListData;
    $513 = (($512) + (($511*72)|0)|0);
    $514 = (($513) + 64|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = $c1;
    $517 = (($516) + 64|0);
    $518 = (($517) + 56|0);
    HEAP32[$518>>2] = $515;
    $k2 = 0;
    while(1) {
     $519 = $k2;
     $520 = $c1;
     $521 = (($520) + 64|0);
     $522 = (($521) + 60|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ($519|0)<($523|0);
     if (!($524)) {
      break;
     }
     $525 = $k2;
     $526 = $i;
     $527 = $manifoldListData;
     $528 = (($527) + (($526*72)|0)|0);
     $529 = (($528) + 16|0);
     $530 = (($529) + (($525*24)|0)|0);
     $531 = (($530) + 16|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = $k2;
     $534 = $c1;
     $535 = (($534) + 64|0);
     $536 = (($535) + (($533*20)|0)|0);
     $537 = (($536) + 16|0);
     HEAP32[$537>>2] = $532;
     $538 = $k2;
     $539 = $i;
     $540 = $manifoldListData;
     $541 = (($540) + (($539*72)|0)|0);
     $542 = (($541) + 16|0);
     $543 = (($542) + (($538*24)|0)|0);
     $544 = +HEAPF32[$543>>2];
     $545 = $k2;
     $546 = $c1;
     $547 = (($546) + 64|0);
     $548 = (($547) + (($545*20)|0)|0);
     HEAPF32[$548>>2] = $544;
     $549 = $k2;
     $550 = $i;
     $551 = $manifoldListData;
     $552 = (($551) + (($550*72)|0)|0);
     $553 = (($552) + 16|0);
     $554 = (($553) + (($549*24)|0)|0);
     $555 = (($554) + 4|0);
     $556 = +HEAPF32[$555>>2];
     $557 = $k2;
     $558 = $c1;
     $559 = (($558) + 64|0);
     $560 = (($559) + (($557*20)|0)|0);
     $561 = (($560) + 4|0);
     HEAPF32[$561>>2] = $556;
     $562 = $k2;
     $563 = $i;
     $564 = $manifoldListData;
     $565 = (($564) + (($563*72)|0)|0);
     $566 = (($565) + 16|0);
     $567 = (($566) + (($562*24)|0)|0);
     $568 = (($567) + 8|0);
     $569 = +HEAPF32[$568>>2];
     $570 = $k2;
     $571 = $c1;
     $572 = (($571) + 64|0);
     $573 = (($572) + (($570*20)|0)|0);
     $574 = (($573) + 8|0);
     HEAPF32[$574>>2] = $569;
     $575 = $k2;
     $576 = $i;
     $577 = $manifoldListData;
     $578 = (($577) + (($576*72)|0)|0);
     $579 = (($578) + 16|0);
     $580 = (($579) + (($575*24)|0)|0);
     $581 = (($580) + 12|0);
     $582 = +HEAPF32[$581>>2];
     $583 = $k2;
     $584 = $c1;
     $585 = (($584) + 64|0);
     $586 = (($585) + (($583*20)|0)|0);
     $587 = (($586) + 12|0);
     HEAPF32[$587>>2] = $582;
     $588 = $k2;
     $589 = (($588) + 1)|0;
     $k2 = $589;
    }
    $590 = $c1;
    $591 = (($590) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = $592 & -65;
    HEAP32[$591>>2] = $593;
    $594 = $c1;
    $595 = (($594) + 4|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = $596 | 2;
    HEAP32[$595>>2] = $597;
    $598 = $c1;
    $599 = (($598) + 4|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = $600 | 4;
    HEAP32[$599>>2] = $601;
    $602 = $3;
    $603 = HEAP32[$602>>2]|0;
    $604 = (($603) + 8|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = $c1;
    FUNCTION_TABLE_vii[$605 & 1023]($602,$606);
    $607 = $1;
    $608 = (($607) + 103096|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = $609 & 4;
    $611 = ($610|0)!=(0);
    if ($611) {
     $612 = $3;
     $613 = HEAP32[$612>>2]|0;
     $614 = (($613) + 16|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = $c1;
     FUNCTION_TABLE_viii[$615 & 1023]($612,$616,$oldManifold);
     $617 = $c1;
     $618 = (($617) + 4|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = $619 & 4;
     $621 = ($620>>>0)>(0);
     $622 = $621&1;
     $623 = $i;
     $624 = $4;
     $625 = (($624) + ($623<<2)|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 & $622;
     HEAP32[$625>>2] = $627;
    }
   }
  } while(0);
  $628 = $i;
  $629 = (($628) + 1)|0;
  $i = $629;
 }
 if ((label|0) == 18) {
  ___assert_fail((10968|0),(10824|0),891,(10936|0));
  // unreachable;
 }
 else if ((label|0) == 43) {
  ___assert_fail((10968|0),(10824|0),961,(10936|0));
  // unreachable;
 }
 else if ((label|0) == 46) {
  ___assert_fail((10968|0),(10824|0),969,(10936|0));
  // unreachable;
 }
 else if ((label|0) == 48) {
  (_printf((10976|0),($vararg_buffer|0))|0);
  _exit(0);
  // unreachable;
 }
 else if ((label|0) == 63) {
  $630 = $1;
  $631 = (($630) + 103096|0);
  $632 = HEAP32[$631>>2]|0;
  $633 = $632 & 4;
  $634 = ($633|0)!=(0);
  if ($634) {
   $635 = $manifoldBinaryBitList;
   $636 = ($635|0)==(0|0);
   if (!($636)) {
    __ZdaPv($635);
   }
  }
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz267($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv268($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj269($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 300|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 112|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[11072>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((11072|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 11056;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(11056|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11072|0));
  }
 }
 $76 = 11056;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 11080;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(11056|0),(11080|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(11056|0),(12104|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 11056;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 11056;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN8b2CLScan20GetElementsAllocatedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10b2ManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 $3 = $1;
 while(1) {
  __ZN15b2ManifoldPointC2Ev($3);
  $4 = (($3) + 20|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = (($1) + 40|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = (($1) + 48|0);
 __ZN6b2Vec2C2Ev($7);
 STACKTOP = sp;return;
}
function __ZN9b2Fixture7GetBodyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body14GetContactListEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact11GetFixtureAEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9b2Contact11GetFixtureBEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9b2Contact14GetChildIndexAEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9b2Contact14GetChildIndexBEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15b2ManifoldPointC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8b2CLScanC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $buffer2 = 0, $err = 0, $i = 0, $len = 0, $len1 = 0, $scanKernelSource = 0, $scanKernelSourceLen = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 409744|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 32|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer17 = sp + 8|0;
 $vararg_buffer15 = sp + 80|0;
 $vararg_buffer13 = sp + 96|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 56|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 64|0;
 $err = sp + 124|0;
 $scanKernelSource = sp + 112|0;
 $scanKernelSourceLen = sp + 128|0;
 $len = sp + 136|0;
 $buffer = sp + 144|0;
 $size = sp + 116|0;
 $len1 = sp + 108|0;
 $buffer2 = sp + 204944|0;
 $0 = $this;
 $1 = $0;
 (_printf((12368|0),($vararg_buffer|0))|0);
 HEAP32[$scanKernelSource>>2] = 0;
 HEAP32[$scanKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz331(12400,$vararg_buffer1);
 $2 = (__ZL15shrFindFilePathPKcPv332(12424,0)|0);
 $3 = (__ZL18b2clLoadProgSourcePKcS0_Pj333($2,12456,$scanKernelSourceLen)|0);
 HEAP32[$scanKernelSource>>2] = $3;
 $4 = HEAP32[$scanKernelSource>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __Z5b2LogPKcz(12472,$vararg_buffer3);
 }
 $6 = (__ZN10b2CLDevice8instanceEv()|0);
 $7 = (__ZNK10b2CLDevice10GetContextEv($6)|0);
 $8 = (_clCreateProgramWithSource(($7|0),1,($scanKernelSource|0),(0|0),($err|0))|0);
 $9 = (($1) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf((12536|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 $13 = (($1) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_clBuildProgram(($14|0),0,(0|0),(12584|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  (_printf((12592|0),($vararg_buffer7|0))|0);
  $18 = (($1) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN10b2CLDevice8instanceEv()|0);
  $21 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($20)|0);
  (_clGetProgramBuildInfo(($19|0),($21|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer9>>2] = $buffer;
  (_printf((12640|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $22 = (($1) + 44|0);
 HEAP32[$22>>2] = 2147483647;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(8);
  if (!($24)) {
   label = 17;
   break;
  }
  $25 = (($1) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $i;
  $28 = (12336 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_clCreateKernel(($26|0),($29|0),($err|0))|0);
  $31 = $i;
  $32 = (($1) + 12|0);
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = $30;
  $34 = $i;
  $35 = (($1) + 12|0);
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   label = 11;
   break;
  }
  $39 = HEAP32[$err>>2]|0;
  $40 = ($39|0)!=(0);
  if ($40) {
   label = 11;
   break;
  }
  $41 = (__ZN10b2CLDevice8instanceEv()|0);
  $42 = $i;
  $43 = (($1) + 12|0);
  $44 = (($43) + ($42<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($41,$44,$size);
  $45 = (($1) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$size>>2]|0;
  $48 = ($46>>>0)>($47>>>0);
  if ($48) {
   $49 = HEAP32[$size>>2]|0;
   $53 = $49;
  } else {
   $50 = (($1) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   $53 = $51;
  }
  $52 = (($1) + 44|0);
  HEAP32[$52>>2] = $53;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 11) {
  (_printf((12648|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 17) {
  __ZL6shrLogPKcz331(12696,$vararg_buffer13);
  $56 = (__ZL15shrFindFilePathPKcPv332(12728,0)|0);
  $57 = (__ZL18b2clLoadProgSourcePKcS0_Pj333($56,12456,$scanKernelSourceLen)|0);
  HEAP32[$scanKernelSource>>2] = $57;
  $58 = HEAP32[$scanKernelSource>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   __Z5b2LogPKcz(12768,$vararg_buffer15);
  }
  $60 = (__ZN10b2CLDevice8instanceEv()|0);
  $61 = (__ZNK10b2CLDevice10GetContextEv($60)|0);
  $62 = (_clCreateProgramWithSource(($61|0),1,($scanKernelSource|0),(0|0),($err|0))|0);
  $63 = (($1) + 8|0);
  HEAP32[$63>>2] = $62;
  $64 = (($1) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0|0);
  if (!($66)) {
   (_printf((12536|0),($vararg_buffer17|0))|0);
   _exit(1);
   // unreachable;
  }
  $67 = (($1) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (_clBuildProgram(($68|0),0,(0|0),(12584|0),(0|0),(0|0))|0);
  HEAP32[$err>>2] = $69;
  $70 = HEAP32[$err>>2]|0;
  $71 = ($70|0)!=(0);
  if ($71) {
   (_printf((12592|0),($vararg_buffer19|0))|0);
   $72 = (($1) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (__ZN10b2CLDevice8instanceEv()|0);
   $75 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($74)|0);
   (_clGetProgramBuildInfo(($73|0),($75|0),4483,204800,($buffer2|0),($len1|0))|0);
   HEAP32[$vararg_buffer21>>2] = $buffer2;
   (_printf((12640|0),($vararg_buffer21|0))|0);
   _exit(1);
   // unreachable;
  }
  $76 = (($1) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_clCreateKernel(($77|0),(12840|0),($err|0))|0);
  $79 = (($1) + 48|0);
  HEAP32[$79>>2] = $78;
  $80 = (($1) + 48|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(0|0);
  if (!($82)) {
   (_printf((12872|0),($vararg_buffer24|0))|0);
   _exit(1);
   // unreachable;
  }
  $83 = HEAP32[$err>>2]|0;
  $84 = ($83|0)!=(0);
  if ($84) {
   (_printf((12872|0),($vararg_buffer24|0))|0);
   _exit(1);
   // unreachable;
  }
  $85 = (__ZN10b2CLDevice8instanceEv()|0);
  $86 = (($1) + 48|0);
  $87 = (($1) + 56|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($85,$86,$87);
  $88 = (($1) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_clCreateKernel(($89|0),(12944|0),($err|0))|0);
  $91 = (($1) + 52|0);
  HEAP32[$91>>2] = $90;
  $92 = (($1) + 52|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)!=(0|0);
  if (!($94)) {
   (_printf((12968|0),($vararg_buffer26|0))|0);
   _exit(1);
   // unreachable;
  }
  $95 = HEAP32[$err>>2]|0;
  $96 = ($95|0)!=(0);
  if ($96) {
   (_printf((12968|0),($vararg_buffer26|0))|0);
   _exit(1);
   // unreachable;
  } else {
   $97 = (__ZN10b2CLDevice8instanceEv()|0);
   $98 = (($1) + 52|0);
   $99 = (($1) + 60|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($97,$98,$99);
   $100 = (($1) + 68|0);
   HEAP32[$100>>2] = 0;
   $101 = (($1) + 72|0);
   HEAP32[$101>>2] = 0;
   HEAP32[$1>>2] = 0;
   $102 = (($1) + 4|0);
   HEAP32[$102>>2] = 0;
   STACKTOP = sp;return;
  }
 }
}
function __ZN8b2CLScanD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8b2CLScan18ReleasePartialSumsEv($1);
 STACKTOP = sp;return;
}
function __ZN8b2CLScan18ReleasePartialSumsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = (($1) + 68|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($1) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  (_clReleaseMemObject(($10|0))|0);
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = (($1) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = (($1) + 64|0);
 HEAP32[$15>>2] = 0;
 $16 = (($1) + 72|0);
 HEAP32[$16>>2] = 0;
 $17 = (($1) + 68|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2CLScan8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[13112>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (13032|0);
 }
 $4 = (___cxa_guard_acquire((13112|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (13032|0);
 }
 __THREW__ = 0;
 invoke_vi(474,(13032|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((13112|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 } else {
  (___cxa_atexit((475|0),(13032|0),(___dso_handle|0))|0);
  ___cxa_guard_release((13112|0));
  STACKTOP = sp;return (13032|0);
 }
 return 0|0;
}
function __ZN8b2CLScan22ParallelCompactIndicesEP7_cl_memS1_S1_iS1_($this,$output_data,$input_data,$scan_result,$element_count,$num_validdata) {
 $this = $this|0;
 $output_data = $output_data|0;
 $input_data = $input_data|0;
 $scan_result = $scan_result|0;
 $element_count = $element_count|0;
 $num_validdata = $num_validdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $group = 0, $k = 0, $local = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $global = sp + 56|0;
 $local = sp + 60|0;
 $1 = $this;
 HEAP32[$2>>2] = $output_data;
 HEAP32[$3>>2] = $input_data;
 HEAP32[$4>>2] = $scan_result;
 HEAP32[$5>>2] = $element_count;
 HEAP32[$6>>2] = $num_validdata;
 $7 = $1;
 $k = 6;
 $a = 0;
 $8 = HEAP32[$6>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (($7) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   $13 = (__ZN10b2CLDevice8instanceEv()|0);
   $14 = (__ZN10b2CLDevice13allocateArrayEjb($13,4,0)|0);
   $15 = (($7) + 4|0);
   HEAP32[$15>>2] = $14;
  }
 }
 $err = 0;
 $16 = $k;
 $17 = (($7) + 12|0);
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $a;
 $21 = (($20) + 1)|0;
 $a = $21;
 $22 = (_clSetKernelArg(($19|0),($20|0),4,($2|0))|0);
 $23 = $err;
 $24 = $23 | $22;
 $err = $24;
 $25 = $k;
 $26 = (($7) + 12|0);
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (_clSetKernelArg(($28|0),($29|0),4,($3|0))|0);
 $32 = $err;
 $33 = $32 | $31;
 $err = $33;
 $34 = $k;
 $35 = (($7) + 12|0);
 $36 = (($35) + ($34<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (_clSetKernelArg(($37|0),($38|0),4,($4|0))|0);
 $41 = $err;
 $42 = $41 | $40;
 $err = $42;
 $43 = HEAP32[$6>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $k;
  $46 = (($7) + 12|0);
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $a;
  $50 = (($49) + 1)|0;
  $a = $50;
  $51 = (_clSetKernelArg(($48|0),($49|0),4,($6|0))|0);
  $52 = $err;
  $53 = $52 | $51;
  $err = $53;
 } else {
  $54 = $k;
  $55 = (($7) + 12|0);
  $56 = (($55) + ($54<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $a;
  $59 = (($58) + 1)|0;
  $a = $59;
  $60 = (($7) + 4|0);
  $61 = (_clSetKernelArg(($57|0),($58|0),4,($60|0))|0);
  $62 = $err;
  $63 = $62 | $61;
  $err = $63;
 }
 $64 = $k;
 $65 = (($7) + 12|0);
 $66 = (($65) + ($64<<2)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $a;
 $69 = (($68) + 1)|0;
 $a = $69;
 $70 = (_clSetKernelArg(($67|0),($68|0),4,($5|0))|0);
 $71 = $err;
 $72 = $71 | $70;
 $err = $72;
 $73 = $err;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $k;
  $76 = (12336 + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$vararg_buffer>>2] = $77;
  (_printf((13120|0),($vararg_buffer|0))|0);
  $0 = 1;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $78 = HEAP32[$5>>2]|0;
 $79 = (($7) + 44|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + ($80))|0;
 $82 = (($81) - 1)|0;
 $83 = (($7) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82>>>0) / ($84>>>0))&-1;
 $group = $85;
 $86 = (($7) + 44|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $group;
 $89 = Math_imul($87, $88)|0;
 HEAP32[$global>>2] = $89;
 $90 = (($7) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 HEAP32[$local>>2] = $91;
 $err = 0;
 $92 = (__ZN10b2CLDevice8instanceEv()|0);
 $93 = (__ZNK10b2CLDevice15GetCommandQueueEv($92)|0);
 $94 = $k;
 $95 = (($7) + 12|0);
 $96 = (($95) + ($94<<2)|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (_clEnqueueNDRangeKernel(($93|0),($97|0),1,(0|0),($global|0),($local|0),0,(0|0),(0|0))|0);
 $99 = $err;
 $100 = $99 | $98;
 $err = $100;
 $101 = $err;
 $102 = ($101|0)!=(0);
 if ($102) {
  $103 = $k;
  $104 = (12336 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $105;
  (_printf((13168|0),($vararg_buffer1|0))|0);
  $0 = 1;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 } else {
  $0 = 0;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 return 0|0;
}
function __ZL6shrLogPKcz331($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv332($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj333($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 284|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 96|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[13224>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((13224|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 13208;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(13208|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13224|0));
  }
 }
 $76 = 13208;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 13232;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(13208|0),(13232|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(13208|0),(14256|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 13208;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 13208;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN10b2CLSolverC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $buffer3 = 0, $err = 0;
 var $i = 0, $i1 = 0, $i4 = 0, $len = 0, $len2 = 0, $source = 0, $sourceLen = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0;
 var $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer73 = sp + 40|0;
 $vararg_buffer71 = sp + 264|0;
 $vararg_buffer69 = sp + 216|0;
 $vararg_buffer67 = sp + 8|0;
 $vararg_buffer65 = sp + 136|0;
 $vararg_buffer63 = sp + 112|0;
 $vararg_buffer61 = sp + 288|0;
 $vararg_buffer59 = sp + 48|0;
 $vararg_buffer57 = sp + 56|0;
 $vararg_buffer55 = sp + 64|0;
 $vararg_buffer53 = sp + 72|0;
 $vararg_buffer50 = sp + 80|0;
 $vararg_buffer48 = sp + 88|0;
 $vararg_buffer46 = sp + 96|0;
 $vararg_buffer44 = sp + 224|0;
 $vararg_buffer42 = sp + 240|0;
 $vararg_buffer40 = sp + 256|0;
 $vararg_buffer38 = sp + 272|0;
 $vararg_buffer36 = sp + 280|0;
 $vararg_buffer34 = sp + 144|0;
 $vararg_buffer32 = sp + 152|0;
 $vararg_buffer30 = sp + 160|0;
 $vararg_buffer28 = sp + 168|0;
 $vararg_buffer26 = sp + 176|0;
 $vararg_buffer24 = sp + 184|0;
 $vararg_buffer22 = sp + 192|0;
 $vararg_buffer19 = sp + 200|0;
 $vararg_buffer17 = sp + 24|0;
 $vararg_buffer15 = sp;
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer11 = sp + 208|0;
 $vararg_buffer9 = sp + 104|0;
 $vararg_buffer7 = sp + 232|0;
 $vararg_buffer5 = sp + 120|0;
 $vararg_buffer3 = sp + 248|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 128|0;
 $err = sp + 308|0;
 $source = sp + 300|0;
 $sourceLen = sp + 312|0;
 $len = sp + 320|0;
 $buffer = sp + 328|0;
 $len2 = sp + 296|0;
 $buffer3 = sp + 20808|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[3200>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  $596 = (($1) + 12|0);
  HEAPF32[$596>>2] = 0.0;
  STACKTOP = sp;return;
 }
 (_printf((14264|0),($vararg_buffer|0))|0);
 HEAP32[$source>>2] = 0;
 HEAP32[$sourceLen>>2] = 0;
 $4 = (__ZL15shrFindFilePathPKcPv394(14296,0)|0);
 $5 = (__ZL18b2clLoadProgSourcePKcS0_Pj395($4,14344,$sourceLen)|0);
 HEAP32[$source>>2] = $5;
 $6 = HEAP32[$source>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __Z5b2LogPKcz(14360,$vararg_buffer1);
 }
 $8 = (__ZN10b2CLDevice8instanceEv()|0);
 $9 = (__ZNK10b2CLDevice10GetContextEv($8)|0);
 $10 = (_clCreateProgramWithSource(($9|0),1,($source|0),(0|0),($err|0))|0);
 $11 = (($1) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($1) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  (_printf((14448|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 }
 $15 = (($1) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_clBuildProgram(($16|0),0,(0|0),(14496|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $17;
 $18 = HEAP32[$err>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  (_printf((14504|0),($vararg_buffer5|0))|0);
  $20 = (($1) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($22)|0);
  (_clGetProgramBuildInfo(($21|0),($23|0),4483,20480,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer7>>2] = $buffer;
  (_printf((14552|0),($vararg_buffer7|0))|0);
  _exit(1);
  // unreachable;
 }
 $24 = (($1) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_clCreateKernel(($25|0),(14560|0),($err|0))|0);
 $27 = (($1) + 72|0);
 HEAP32[$27>>2] = $26;
 $28 = (($1) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  (_printf((14600|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $31 = HEAP32[$err>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  (_printf((14600|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $33 = (($1) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_clCreateKernel(($34|0),(14648|0),($err|0))|0);
 $36 = (($1) + 80|0);
 HEAP32[$36>>2] = $35;
 $37 = (($1) + 80|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  (_printf((14600|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $40 = HEAP32[$err>>2]|0;
 $41 = ($40|0)!=(0);
 if ($41) {
  (_printf((14600|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $42 = (($1) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_clCreateKernel(($43|0),(14680|0),($err|0))|0);
 $45 = (($1) + 76|0);
 HEAP32[$45>>2] = $44;
 $46 = (($1) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  (_printf((14600|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $49 = HEAP32[$err>>2]|0;
 $50 = ($49|0)!=(0);
 if ($50) {
  (_printf((14600|0),($vararg_buffer13|0))|0);
  _exit(1);
  // unreachable;
 }
 $51 = (__ZN10b2CLDevice8instanceEv()|0);
 $52 = (($1) + 76|0);
 $53 = (($1) + 296|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($51,$52,$53);
 $54 = (__ZN10b2CLDevice8instanceEv()|0);
 $55 = (($1) + 72|0);
 $56 = (($1) + 244|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($54,$55,$56);
 $57 = (($1) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_clCreateKernel(($58|0),(14720|0),($err|0))|0);
 $60 = (($1) + 24|0);
 HEAP32[$60>>2] = $59;
 $61 = (($1) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  (_printf((14744|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $64 = HEAP32[$err>>2]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  (_printf((14744|0),($vararg_buffer15|0))|0);
  _exit(1);
  // unreachable;
 }
 $66 = (__ZN10b2CLDevice8instanceEv()|0);
 $67 = (($1) + 24|0);
 $68 = (($1) + 244|0);
 __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($66,$67,$68);
 $i = 1;
 while(1) {
  $69 = $i;
  $70 = ($69|0)<(11);
  if (!($70)) {
   label = 38;
   break;
  }
  $71 = $i;
  do {
   switch ($71|0) {
   case 3:  {
    $72 = (($1) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (_clCreateKernel(($73|0),(14816|0),($err|0))|0);
    $75 = $i;
    $76 = (($1) + 28|0);
    $77 = (($76) + ($75<<2)|0);
    HEAP32[$77>>2] = $74;
    break;
   }
   case 1:  {
    $78 = (($1) + 16|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_clCreateKernel(($79|0),(14856|0),($err|0))|0);
    $81 = $i;
    $82 = (($1) + 28|0);
    $83 = (($82) + ($81<<2)|0);
    HEAP32[$83>>2] = $80;
    break;
   }
   case 2:  {
    $84 = (($1) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (_clCreateKernel(($85|0),(14896|0),($err|0))|0);
    $87 = $i;
    $88 = (($1) + 28|0);
    $89 = (($88) + ($87<<2)|0);
    HEAP32[$89>>2] = $86;
    break;
   }
   case 6:  {
    $90 = (($1) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (_clCreateKernel(($91|0),(14936|0),($err|0))|0);
    $93 = $i;
    $94 = (($1) + 28|0);
    $95 = (($94) + ($93<<2)|0);
    HEAP32[$95>>2] = $92;
    break;
   }
   case 4:  {
    $96 = (($1) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (_clCreateKernel(($97|0),(14976|0),($err|0))|0);
    $99 = $i;
    $100 = (($1) + 28|0);
    $101 = (($100) + ($99<<2)|0);
    HEAP32[$101>>2] = $98;
    break;
   }
   case 10:  {
    $102 = (($1) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_clCreateKernel(($103|0),(15016|0),($err|0))|0);
    $105 = $i;
    $106 = (($1) + 28|0);
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = $104;
    break;
   }
   case 7:  {
    $108 = (($1) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (_clCreateKernel(($109|0),(15056|0),($err|0))|0);
    $111 = $i;
    $112 = (($1) + 28|0);
    $113 = (($112) + ($111<<2)|0);
    HEAP32[$113>>2] = $110;
    break;
   }
   case 8:  {
    $114 = (($1) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (_clCreateKernel(($115|0),(15096|0),($err|0))|0);
    $117 = $i;
    $118 = (($1) + 28|0);
    $119 = (($118) + ($117<<2)|0);
    HEAP32[$119>>2] = $116;
    break;
   }
   case 5:  {
    $120 = (($1) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (_clCreateKernel(($121|0),(15136|0),($err|0))|0);
    $123 = $i;
    $124 = (($1) + 28|0);
    $125 = (($124) + ($123<<2)|0);
    HEAP32[$125>>2] = $122;
    break;
   }
   case 9:  {
    $126 = (($1) + 16|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_clCreateKernel(($127|0),(15176|0),($err|0))|0);
    $129 = $i;
    $130 = (($1) + 28|0);
    $131 = (($130) + ($129<<2)|0);
    HEAP32[$131>>2] = $128;
    break;
   }
   default: {
   }
   }
  } while(0);
  $132 = $i;
  $133 = (($1) + 28|0);
  $134 = (($133) + ($132<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)!=(0|0);
  if (!($136)) {
   label = 35;
   break;
  }
  $137 = HEAP32[$err>>2]|0;
  $138 = ($137|0)!=(0);
  if ($138) {
   label = 35;
   break;
  }
  $139 = (__ZN10b2CLDevice8instanceEv()|0);
  $140 = $i;
  $141 = (($1) + 28|0);
  $142 = (($141) + ($140<<2)|0);
  $143 = $i;
  $144 = (($1) + 248|0);
  $145 = (($144) + ($143<<2)|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($139,$142,$145);
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 if ((label|0) == 35) {
  (_printf((14744|0),($vararg_buffer17|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 38) {
  $148 = (($1) + 16|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (_clCreateKernel(($149|0),(15216|0),($err|0))|0);
  $151 = (($1) + 92|0);
  HEAP32[$151>>2] = $150;
  $152 = (($1) + 92|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(0|0);
  if (!($154)) {
   $157 = HEAP32[$err>>2]|0;
   HEAP32[$vararg_buffer19>>2] = $157;
   (_printf((15248|0),($vararg_buffer19|0))|0);
   _exit(1);
   // unreachable;
  }
  $155 = HEAP32[$err>>2]|0;
  $156 = ($155|0)!=(0);
  if ($156) {
   $157 = HEAP32[$err>>2]|0;
   HEAP32[$vararg_buffer19>>2] = $157;
   (_printf((15248|0),($vararg_buffer19|0))|0);
   _exit(1);
   // unreachable;
  }
  $i1 = 1;
  while(1) {
   $158 = $i1;
   $159 = ($158|0)<(11);
   if (!($159)) {
    label = 59;
    break;
   }
   $160 = $i1;
   do {
    switch ($160|0) {
    case 3:  {
     $161 = (($1) + 16|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (_clCreateKernel(($162|0),(15328|0),($err|0))|0);
     $164 = $i1;
     $165 = (($1) + 96|0);
     $166 = (($165) + ($164<<2)|0);
     HEAP32[$166>>2] = $163;
     break;
    }
    case 1:  {
     $167 = (($1) + 16|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (_clCreateKernel(($168|0),(15376|0),($err|0))|0);
     $170 = $i1;
     $171 = (($1) + 96|0);
     $172 = (($171) + ($170<<2)|0);
     HEAP32[$172>>2] = $169;
     break;
    }
    case 2:  {
     $173 = (($1) + 16|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (_clCreateKernel(($174|0),(15424|0),($err|0))|0);
     $176 = $i1;
     $177 = (($1) + 96|0);
     $178 = (($177) + ($176<<2)|0);
     HEAP32[$178>>2] = $175;
     break;
    }
    case 6:  {
     $179 = (($1) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (_clCreateKernel(($180|0),(15472|0),($err|0))|0);
     $182 = $i1;
     $183 = (($1) + 96|0);
     $184 = (($183) + ($182<<2)|0);
     HEAP32[$184>>2] = $181;
     break;
    }
    case 4:  {
     $185 = (($1) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (_clCreateKernel(($186|0),(15512|0),($err|0))|0);
     $188 = $i1;
     $189 = (($1) + 96|0);
     $190 = (($189) + ($188<<2)|0);
     HEAP32[$190>>2] = $187;
     break;
    }
    case 10:  {
     $191 = (($1) + 16|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (_clCreateKernel(($192|0),(15552|0),($err|0))|0);
     $194 = $i1;
     $195 = (($1) + 96|0);
     $196 = (($195) + ($194<<2)|0);
     HEAP32[$196>>2] = $193;
     break;
    }
    case 7:  {
     $197 = (($1) + 16|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (_clCreateKernel(($198|0),(15592|0),($err|0))|0);
     $200 = $i1;
     $201 = (($1) + 96|0);
     $202 = (($201) + ($200<<2)|0);
     HEAP32[$202>>2] = $199;
     break;
    }
    case 8:  {
     $203 = (($1) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (_clCreateKernel(($204|0),(15632|0),($err|0))|0);
     $206 = $i1;
     $207 = (($1) + 96|0);
     $208 = (($207) + ($206<<2)|0);
     HEAP32[$208>>2] = $205;
     break;
    }
    case 5:  {
     $209 = (($1) + 16|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = (_clCreateKernel(($210|0),(15672|0),($err|0))|0);
     $212 = $i1;
     $213 = (($1) + 96|0);
     $214 = (($213) + ($212<<2)|0);
     HEAP32[$214>>2] = $211;
     break;
    }
    case 9:  {
     $215 = (($1) + 16|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = (_clCreateKernel(($216|0),(15712|0),($err|0))|0);
     $218 = $i1;
     $219 = (($1) + 96|0);
     $220 = (($219) + ($218<<2)|0);
     HEAP32[$220>>2] = $217;
     break;
    }
    default: {
    }
    }
   } while(0);
   $221 = $i1;
   $222 = (($1) + 96|0);
   $223 = (($222) + ($221<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ($224|0)!=(0|0);
   if (!($225)) {
    label = 56;
    break;
   }
   $226 = HEAP32[$err>>2]|0;
   $227 = ($226|0)!=(0);
   if ($227) {
    label = 56;
    break;
   }
   $228 = $i1;
   $229 = (($228) + 1)|0;
   $i1 = $229;
  }
  if ((label|0) == 56) {
   (_printf((14744|0),($vararg_buffer22|0))|0);
   _exit(1);
   // unreachable;
  }
  else if ((label|0) == 59) {
   $230 = (($1) + 16|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (_clCreateKernel(($231|0),(15760|0),($err|0))|0);
   $233 = (($1) + 88|0);
   HEAP32[$233>>2] = $232;
   $234 = (($1) + 88|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ($235|0)!=(0|0);
   if (!($236)) {
    (_printf((15800|0),($vararg_buffer24|0))|0);
    _exit(1);
    // unreachable;
   }
   $237 = HEAP32[$err>>2]|0;
   $238 = ($237|0)!=(0);
   if ($238) {
    (_printf((15800|0),($vararg_buffer24|0))|0);
    _exit(1);
    // unreachable;
   }
   $239 = (__ZN10b2CLDevice8instanceEv()|0);
   $240 = (($1) + 88|0);
   $241 = (($1) + 292|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($239,$240,$241);
   $242 = (($1) + 16|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (_clCreateKernel(($243|0),(15872|0),($err|0))|0);
   $245 = (($1) + 140|0);
   HEAP32[$245>>2] = $244;
   $246 = (($1) + 140|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247|0)!=(0|0);
   if (!($248)) {
    (_printf((15896|0),($vararg_buffer26|0))|0);
    _exit(1);
    // unreachable;
   }
   $249 = HEAP32[$err>>2]|0;
   $250 = ($249|0)!=(0);
   if ($250) {
    (_printf((15896|0),($vararg_buffer26|0))|0);
    _exit(1);
    // unreachable;
   }
   $251 = (__ZN10b2CLDevice8instanceEv()|0);
   $252 = (($1) + 140|0);
   $253 = (($1) + 300|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($251,$252,$253);
   $254 = (($1) + 16|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_clCreateKernel(($255|0),(15944|0),($err|0))|0);
   $257 = (($1) + 144|0);
   HEAP32[$257>>2] = $256;
   $258 = (($1) + 144|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = ($259|0)!=(0|0);
   if (!($260)) {
    (_printf((15896|0),($vararg_buffer28|0))|0);
    _exit(1);
    // unreachable;
   }
   $261 = HEAP32[$err>>2]|0;
   $262 = ($261|0)!=(0);
   if ($262) {
    (_printf((15896|0),($vararg_buffer28|0))|0);
    _exit(1);
    // unreachable;
   }
   $263 = (__ZN10b2CLDevice8instanceEv()|0);
   $264 = (($1) + 144|0);
   $265 = (($1) + 304|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($263,$264,$265);
   $266 = (($1) + 16|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (_clCreateKernel(($267|0),(15976|0),($err|0))|0);
   $269 = (($1) + 148|0);
   HEAP32[$269>>2] = $268;
   $270 = (($1) + 148|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)!=(0|0);
   if (!($272)) {
    (_printf((15896|0),($vararg_buffer30|0))|0);
    _exit(1);
    // unreachable;
   }
   $273 = HEAP32[$err>>2]|0;
   $274 = ($273|0)!=(0);
   if ($274) {
    (_printf((15896|0),($vararg_buffer30|0))|0);
    _exit(1);
    // unreachable;
   }
   $275 = (__ZN10b2CLDevice8instanceEv()|0);
   $276 = (($1) + 148|0);
   $277 = (($1) + 308|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($275,$276,$277);
   $278 = (($1) + 16|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (_clCreateKernel(($279|0),(15992|0),($err|0))|0);
   $281 = (($1) + 152|0);
   HEAP32[$281>>2] = $280;
   $282 = (($1) + 152|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ($283|0)!=(0|0);
   if (!($284)) {
    (_printf((15896|0),($vararg_buffer32|0))|0);
    _exit(1);
    // unreachable;
   }
   $285 = HEAP32[$err>>2]|0;
   $286 = ($285|0)!=(0);
   if ($286) {
    (_printf((15896|0),($vararg_buffer32|0))|0);
    _exit(1);
    // unreachable;
   }
   $287 = (__ZN10b2CLDevice8instanceEv()|0);
   $288 = (($1) + 152|0);
   $289 = (($1) + 316|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($287,$288,$289);
   $290 = (($1) + 16|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (_clCreateKernel(($291|0),(16016|0),($err|0))|0);
   $293 = (($1) + 156|0);
   HEAP32[$293>>2] = $292;
   $294 = (($1) + 156|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = ($295|0)!=(0|0);
   if (!($296)) {
    (_printf((15896|0),($vararg_buffer34|0))|0);
    _exit(1);
    // unreachable;
   }
   $297 = HEAP32[$err>>2]|0;
   $298 = ($297|0)!=(0);
   if ($298) {
    (_printf((15896|0),($vararg_buffer34|0))|0);
    _exit(1);
    // unreachable;
   }
   $299 = (($1) + 16|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (_clCreateKernel(($300|0),(16032|0),($err|0))|0);
   $302 = (($1) + 240|0);
   HEAP32[$302>>2] = $301;
   $303 = (__ZN10b2CLDevice8instanceEv()|0);
   $304 = (($1) + 156|0);
   $305 = (($1) + 312|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($303,$304,$305);
   $306 = (__ZN10b2CLDevice8instanceEv()|0);
   $307 = (($1) + 156|0);
   $308 = (($1) + 312|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($306,$307,$308);
   $309 = (($1) + 16|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (_clCreateKernel(($310|0),(16064|0),($err|0))|0);
   $312 = (($1) + 160|0);
   HEAP32[$312>>2] = $311;
   $313 = (($1) + 160|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ($314|0)!=(0|0);
   if (!($315)) {
    (_printf((15896|0),($vararg_buffer36|0))|0);
    _exit(1);
    // unreachable;
   }
   $316 = HEAP32[$err>>2]|0;
   $317 = ($316|0)!=(0);
   if ($317) {
    (_printf((15896|0),($vararg_buffer36|0))|0);
    _exit(1);
    // unreachable;
   }
   $318 = (__ZN10b2CLDevice8instanceEv()|0);
   $319 = (($1) + 160|0);
   $320 = (($1) + 320|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($318,$319,$320);
   $321 = (($1) + 16|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = (_clCreateKernel(($322|0),(16080|0),($err|0))|0);
   $324 = (($1) + 164|0);
   HEAP32[$324>>2] = $323;
   $325 = (($1) + 164|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ($326|0)!=(0|0);
   if (!($327)) {
    (_printf((15896|0),($vararg_buffer38|0))|0);
    _exit(1);
    // unreachable;
   }
   $328 = HEAP32[$err>>2]|0;
   $329 = ($328|0)!=(0);
   if ($329) {
    (_printf((15896|0),($vararg_buffer38|0))|0);
    _exit(1);
    // unreachable;
   }
   $330 = (__ZN10b2CLDevice8instanceEv()|0);
   $331 = (($1) + 164|0);
   $332 = (($1) + 324|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($330,$331,$332);
   $333 = (($1) + 16|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (_clCreateKernel(($334|0),(16104|0),($err|0))|0);
   $336 = (($1) + 168|0);
   HEAP32[$336>>2] = $335;
   $337 = (($1) + 168|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($338|0)!=(0|0);
   if (!($339)) {
    (_printf((15896|0),($vararg_buffer40|0))|0);
    _exit(1);
    // unreachable;
   }
   $340 = HEAP32[$err>>2]|0;
   $341 = ($340|0)!=(0);
   if ($341) {
    (_printf((15896|0),($vararg_buffer40|0))|0);
    _exit(1);
    // unreachable;
   }
   $342 = (__ZN10b2CLDevice8instanceEv()|0);
   $343 = (($1) + 168|0);
   $344 = (($1) + 328|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($342,$343,$344);
   $345 = (($1) + 16|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = (_clCreateKernel(($346|0),(16136|0),($err|0))|0);
   $348 = (($1) + 172|0);
   HEAP32[$348>>2] = $347;
   $349 = (($1) + 172|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)!=(0|0);
   if (!($351)) {
    (_printf((15896|0),($vararg_buffer42|0))|0);
    _exit(1);
    // unreachable;
   }
   $352 = HEAP32[$err>>2]|0;
   $353 = ($352|0)!=(0);
   if ($353) {
    (_printf((15896|0),($vararg_buffer42|0))|0);
    _exit(1);
    // unreachable;
   }
   $354 = (__ZN10b2CLDevice8instanceEv()|0);
   $355 = (($1) + 172|0);
   $356 = (($1) + 332|0);
   __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($354,$355,$356);
   $357 = (__ZL15shrFindFilePathPKcPv394(16152,0)|0);
   $358 = (__ZL18b2clLoadProgSourcePKcS0_Pj395($357,14344,$sourceLen)|0);
   HEAP32[$source>>2] = $358;
   $359 = HEAP32[$source>>2]|0;
   $360 = ($359|0)==(0|0);
   if ($360) {
    __Z5b2LogPKcz(16200,$vararg_buffer44);
   }
   $361 = (__ZN10b2CLDevice8instanceEv()|0);
   $362 = (__ZNK10b2CLDevice10GetContextEv($361)|0);
   $363 = (_clCreateProgramWithSource(($362|0),1,($source|0),(0|0),($err|0))|0);
   $364 = (($1) + 20|0);
   HEAP32[$364>>2] = $363;
   $365 = (($1) + 20|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ($366|0)!=(0|0);
   if (!($367)) {
    (_printf((16280|0),($vararg_buffer46|0))|0);
    _exit(1);
    // unreachable;
   }
   $368 = (($1) + 20|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (_clBuildProgram(($369|0),0,(0|0),(14496|0),(0|0),(0|0))|0);
   HEAP32[$err>>2] = $370;
   $371 = HEAP32[$err>>2]|0;
   $372 = ($371|0)!=(0);
   if ($372) {
    (_printf((14504|0),($vararg_buffer48|0))|0);
    $373 = (($1) + 20|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (__ZN10b2CLDevice8instanceEv()|0);
    $376 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($375)|0);
    (_clGetProgramBuildInfo(($374|0),($376|0),4483,30000,($buffer3|0),($len2|0))|0);
    HEAP32[$vararg_buffer50>>2] = $buffer3;
    (_printf((14552|0),($vararg_buffer50|0))|0);
    _exit(1);
    // unreachable;
   }
   $377 = (($1) + 20|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = (_clCreateKernel(($378|0),(16352|0),($err|0))|0);
   $380 = (($1) + 176|0);
   HEAP32[$380>>2] = $379;
   $381 = (($1) + 176|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = ($382|0)!=(0|0);
   if (!($383)) {
    (_printf((16376|0),($vararg_buffer53|0))|0);
    _exit(1);
    // unreachable;
   }
   $384 = HEAP32[$err>>2]|0;
   $385 = ($384|0)!=(0);
   if ($385) {
    (_printf((16376|0),($vararg_buffer53|0))|0);
    _exit(1);
    // unreachable;
   }
   $386 = (($1) + 20|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = (_clCreateKernel(($387|0),(16432|0),($err|0))|0);
   $389 = (($1) + 180|0);
   HEAP32[$389>>2] = $388;
   $390 = (($1) + 180|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)!=(0|0);
   if (!($392)) {
    (_printf((16456|0),($vararg_buffer55|0))|0);
    _exit(1);
    // unreachable;
   }
   $393 = HEAP32[$err>>2]|0;
   $394 = ($393|0)!=(0);
   if ($394) {
    (_printf((16456|0),($vararg_buffer55|0))|0);
    _exit(1);
    // unreachable;
   }
   $395 = (($1) + 20|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = (_clCreateKernel(($396|0),(16520|0),($err|0))|0);
   $398 = (($1) + 184|0);
   HEAP32[$398>>2] = $397;
   $399 = (($1) + 184|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = ($400|0)!=(0|0);
   if (!($401)) {
    (_printf((16456|0),($vararg_buffer57|0))|0);
    _exit(1);
    // unreachable;
   }
   $402 = HEAP32[$err>>2]|0;
   $403 = ($402|0)!=(0);
   if ($403) {
    (_printf((16456|0),($vararg_buffer57|0))|0);
    _exit(1);
    // unreachable;
   }
   $404 = (($1) + 20|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = (_clCreateKernel(($405|0),(16552|0),($err|0))|0);
   $407 = (($1) + 188|0);
   HEAP32[$407>>2] = $406;
   $408 = (($1) + 188|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ($409|0)!=(0|0);
   if (!($410)) {
    (_printf((16456|0),($vararg_buffer59|0))|0);
    _exit(1);
    // unreachable;
   }
   $411 = HEAP32[$err>>2]|0;
   $412 = ($411|0)!=(0);
   if ($412) {
    (_printf((16456|0),($vararg_buffer59|0))|0);
    _exit(1);
    // unreachable;
   }
   $i4 = 1;
   while(1) {
    $413 = $i4;
    $414 = ($413|0)<(11);
    if (!($414)) {
     label = 125;
     break;
    }
    $415 = $i4;
    do {
     switch ($415|0) {
     case 3:  {
      $416 = (($1) + 20|0);
      $417 = HEAP32[$416>>2]|0;
      $418 = (_clCreateKernel(($417|0),(16600|0),($err|0))|0);
      $419 = $i4;
      $420 = (($1) + 192|0);
      $421 = (($420) + ($419<<2)|0);
      HEAP32[$421>>2] = $418;
      break;
     }
     case 1:  {
      $422 = (($1) + 20|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = (_clCreateKernel(($423|0),(16640|0),($err|0))|0);
      $425 = $i4;
      $426 = (($1) + 192|0);
      $427 = (($426) + ($425<<2)|0);
      HEAP32[$427>>2] = $424;
      break;
     }
     case 2:  {
      $428 = (($1) + 20|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = (_clCreateKernel(($429|0),(16680|0),($err|0))|0);
      $431 = $i4;
      $432 = (($1) + 192|0);
      $433 = (($432) + ($431<<2)|0);
      HEAP32[$433>>2] = $430;
      break;
     }
     case 6:  {
      $434 = (($1) + 20|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = (_clCreateKernel(($435|0),(16720|0),($err|0))|0);
      $437 = $i4;
      $438 = (($1) + 192|0);
      $439 = (($438) + ($437<<2)|0);
      HEAP32[$439>>2] = $436;
      break;
     }
     case 4:  {
      $440 = (($1) + 20|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = (_clCreateKernel(($441|0),(16760|0),($err|0))|0);
      $443 = $i4;
      $444 = (($1) + 192|0);
      $445 = (($444) + ($443<<2)|0);
      HEAP32[$445>>2] = $442;
      break;
     }
     case 10:  {
      $446 = (($1) + 20|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = (_clCreateKernel(($447|0),(16800|0),($err|0))|0);
      $449 = $i4;
      $450 = (($1) + 192|0);
      $451 = (($450) + ($449<<2)|0);
      HEAP32[$451>>2] = $448;
      break;
     }
     case 7:  {
      $452 = (($1) + 20|0);
      $453 = HEAP32[$452>>2]|0;
      $454 = (_clCreateKernel(($453|0),(16840|0),($err|0))|0);
      $455 = $i4;
      $456 = (($1) + 192|0);
      $457 = (($456) + ($455<<2)|0);
      HEAP32[$457>>2] = $454;
      break;
     }
     case 8:  {
      $458 = (($1) + 20|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = (_clCreateKernel(($459|0),(16880|0),($err|0))|0);
      $461 = $i4;
      $462 = (($1) + 192|0);
      $463 = (($462) + ($461<<2)|0);
      HEAP32[$463>>2] = $460;
      break;
     }
     case 5:  {
      $464 = (($1) + 20|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = (_clCreateKernel(($465|0),(16920|0),($err|0))|0);
      $467 = $i4;
      $468 = (($1) + 192|0);
      $469 = (($468) + ($467<<2)|0);
      HEAP32[$469>>2] = $466;
      break;
     }
     case 9:  {
      $470 = (($1) + 20|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = (_clCreateKernel(($471|0),(16960|0),($err|0))|0);
      $473 = $i4;
      $474 = (($1) + 192|0);
      $475 = (($474) + ($473<<2)|0);
      HEAP32[$475>>2] = $472;
      break;
     }
     default: {
     }
     }
    } while(0);
    $476 = $i4;
    $477 = (($1) + 192|0);
    $478 = (($477) + ($476<<2)|0);
    $479 = HEAP32[$478>>2]|0;
    $480 = ($479|0)!=(0|0);
    if (!($480)) {
     label = 122;
     break;
    }
    $481 = HEAP32[$err>>2]|0;
    $482 = ($481|0)!=(0);
    if ($482) {
     label = 122;
     break;
    }
    $483 = (__ZN10b2CLDevice8instanceEv()|0);
    $484 = $i4;
    $485 = (($1) + 192|0);
    $486 = (($485) + ($484<<2)|0);
    $487 = $i4;
    $488 = (($1) + 344|0);
    $489 = (($488) + ($487<<2)|0);
    __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($483,$486,$489);
    $490 = $i4;
    $491 = (($490) + 1)|0;
    $i4 = $491;
   }
   if ((label|0) == 122) {
    (_printf((17000|0),($vararg_buffer61|0))|0);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 125) {
    $492 = (($1) + 20|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = (_clCreateKernel(($493|0),(17072|0),($err|0))|0);
    $495 = (($1) + 428|0);
    HEAP32[$495>>2] = $494;
    $496 = (($1) + 428|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = ($497|0)!=(0|0);
    if (!($498)) {
     (_printf((17104|0),($vararg_buffer63|0))|0);
     _exit(1);
     // unreachable;
    }
    $499 = HEAP32[$err>>2]|0;
    $500 = ($499|0)!=(0);
    if ($500) {
     (_printf((17104|0),($vararg_buffer63|0))|0);
     _exit(1);
     // unreachable;
    }
    $501 = (($1) + 20|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = (_clCreateKernel(($502|0),(17168|0),($err|0))|0);
    $504 = (($1) + 440|0);
    HEAP32[$504>>2] = $503;
    $505 = (($1) + 440|0);
    $506 = HEAP32[$505>>2]|0;
    $507 = ($506|0)!=(0|0);
    if (!($507)) {
     (_printf((17200|0),($vararg_buffer65|0))|0);
     _exit(1);
     // unreachable;
    }
    $508 = HEAP32[$err>>2]|0;
    $509 = ($508|0)!=(0);
    if ($509) {
     (_printf((17200|0),($vararg_buffer65|0))|0);
     _exit(1);
     // unreachable;
    }
    $510 = (($1) + 20|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = (_clCreateKernel(($511|0),(17240|0),($err|0))|0);
    $513 = (($1) + 432|0);
    HEAP32[$513>>2] = $512;
    $514 = (($1) + 432|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = ($515|0)!=(0|0);
    if (!($516)) {
     (_printf((17256|0),($vararg_buffer67|0))|0);
     _exit(1);
     // unreachable;
    }
    $517 = HEAP32[$err>>2]|0;
    $518 = ($517|0)!=(0);
    if ($518) {
     (_printf((17256|0),($vararg_buffer67|0))|0);
     _exit(1);
     // unreachable;
    }
    $519 = (($1) + 20|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = (_clCreateKernel(($520|0),(17312|0),($err|0))|0);
    $522 = (($1) + 436|0);
    HEAP32[$522>>2] = $521;
    $523 = (($1) + 436|0);
    $524 = HEAP32[$523>>2]|0;
    $525 = ($524|0)!=(0|0);
    if (!($525)) {
     (_printf((17328|0),($vararg_buffer69|0))|0);
     _exit(1);
     // unreachable;
    }
    $526 = HEAP32[$err>>2]|0;
    $527 = ($526|0)!=(0);
    if ($527) {
     (_printf((17328|0),($vararg_buffer69|0))|0);
     _exit(1);
     // unreachable;
    }
    $528 = (($1) + 20|0);
    $529 = HEAP32[$528>>2]|0;
    $530 = (_clCreateKernel(($529|0),(17384|0),($err|0))|0);
    $531 = (($1) + 444|0);
    HEAP32[$531>>2] = $530;
    $532 = (($1) + 444|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = ($533|0)!=(0|0);
    if (!($534)) {
     (_printf((17400|0),($vararg_buffer71|0))|0);
     _exit(1);
     // unreachable;
    }
    $535 = HEAP32[$err>>2]|0;
    $536 = ($535|0)!=(0);
    if ($536) {
     (_printf((17400|0),($vararg_buffer71|0))|0);
     _exit(1);
     // unreachable;
    }
    $537 = (($1) + 20|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = (_clCreateKernel(($538|0),(17456|0),($err|0))|0);
    $540 = (($1) + 236|0);
    HEAP32[$540>>2] = $539;
    $541 = (($1) + 236|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = ($542|0)!=(0|0);
    if (!($543)) {
     (_printf((16456|0),($vararg_buffer73|0))|0);
     _exit(1);
     // unreachable;
    }
    $544 = HEAP32[$err>>2]|0;
    $545 = ($544|0)!=(0);
    if ($545) {
     (_printf((16456|0),($vararg_buffer73|0))|0);
     _exit(1);
     // unreachable;
    }
    $546 = (__ZN10b2CLDevice8instanceEv()|0);
    $547 = (($1) + 176|0);
    $548 = (($1) + 336|0);
    __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($546,$547,$548);
    $549 = (__ZN10b2CLDevice8instanceEv()|0);
    $550 = (($1) + 180|0);
    $551 = (($1) + 340|0);
    __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($549,$550,$551);
    $552 = (__ZN10b2CLDevice8instanceEv()|0);
    $553 = (($1) + 236|0);
    $554 = (($1) + 388|0);
    __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($552,$553,$554);
    $555 = (($1) + 612|0);
    HEAP32[$555>>2] = 0;
    $556 = (($1) + 608|0);
    HEAP32[$556>>2] = 0;
    $557 = (($1) + 620|0);
    HEAP32[$557>>2] = 0;
    $558 = (($1) + 616|0);
    HEAP32[$558>>2] = 0;
    $559 = (($1) + 520|0);
    HEAP32[$559>>2] = 0;
    $560 = (($1) + 524|0);
    HEAP32[$560>>2] = 0;
    $561 = (($1) + 560|0);
    HEAP32[$561>>2] = 0;
    $562 = (($1) + 564|0);
    HEAP32[$562>>2] = 0;
    $563 = (($1) + 568|0);
    HEAP32[$563>>2] = 0;
    $564 = (($1) + 572|0);
    HEAP32[$564>>2] = 0;
    $565 = (($1) + 580|0);
    HEAP32[$565>>2] = 0;
    $566 = (($1) + 584|0);
    HEAP32[$566>>2] = 0;
    $567 = (($1) + 588|0);
    HEAP32[$567>>2] = 0;
    $568 = (($1) + 592|0);
    HEAP32[$568>>2] = 0;
    $569 = (($1) + 4|0);
    HEAP32[$569>>2] = 0;
    $570 = (($1) + 8|0);
    HEAP32[$570>>2] = 0;
    $571 = (($1) + 504|0);
    HEAP32[$571>>2] = 0;
    $572 = (($1) + 512|0);
    HEAP32[$572>>2] = 0;
    $573 = (($1) + 508|0);
    HEAP32[$573>>2] = 0;
    $574 = (($1) + 500|0);
    HEAP32[$574>>2] = 0;
    $575 = (($1) + 492|0);
    HEAP32[$575>>2] = 0;
    $576 = (($1) + 496|0);
    HEAP32[$576>>2] = 0;
    $577 = (($1) + 488|0);
    HEAP32[$577>>2] = 0;
    $578 = (($1) + 400|0);
    HEAP32[$578>>2] = 0;
    $579 = (($1) + 392|0);
    HEAP32[$579>>2] = 0;
    $580 = (($1) + 424|0);
    HEAP32[$580>>2] = 0;
    $581 = (($1) + 408|0);
    HEAP32[$581>>2] = 0;
    $582 = (($1) + 404|0);
    HEAP32[$582>>2] = 0;
    $583 = (($1) + 420|0);
    HEAP32[$583>>2] = 0;
    $584 = (($1) + 412|0);
    HEAP32[$584>>2] = 0;
    $585 = (($1) + 480|0);
    HEAP32[$585>>2] = 0;
    $586 = (($1) + 476|0);
    HEAP32[$586>>2] = 0;
    $587 = (($1) + 472|0);
    HEAP32[$587>>2] = 0;
    $588 = (($1) + 468|0);
    HEAP32[$588>>2] = 0;
    $589 = (($1) + 464|0);
    HEAP32[$589>>2] = 0;
    $590 = (($1) + 460|0);
    HEAP32[$590>>2] = 0;
    $591 = (($1) + 456|0);
    HEAP32[$591>>2] = 0;
    $592 = (($1) + 452|0);
    HEAP32[$592>>2] = 0;
    $593 = (($1) + 448|0);
    HEAP32[$593>>2] = 0;
    $594 = (($1) + 484|0);
    HEAP32[$594>>2] = 0;
    $595 = (($1) + 396|0);
    HEAP32[$595>>2] = 0;
    $596 = (($1) + 12|0);
    HEAPF32[$596>>2] = 0.0;
    STACKTOP = sp;return;
   }
  }
 }
}
function __ZN10b2CLSolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[3200>>0]|0;
 $3 = $2&1;
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($1) + 560|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = (($1) + 560|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
 }
 $10 = (($1) + 564|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = (($1) + 564|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   __ZdaPv($14);
  }
 }
 $16 = (($1) + 568|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = (($1) + 568|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = (($1) + 572|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = (($1) + 572|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   __ZdaPv($26);
  }
 }
 $28 = (($1) + 580|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = (($1) + 580|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   __ZdaPv($32);
  }
 }
 $34 = (($1) + 584|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = (($1) + 584|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = (($1) + 588|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = (($1) + 588|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = (($1) + 592|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = (($1) + 592|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0|0);
  if (!($51)) {
   __ZdaPv($50);
  }
 }
 $52 = (($1) + 392|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = (__ZN10b2CLDevice8instanceEv()|0);
  $56 = (($1) + 392|0);
  $57 = HEAP32[$56>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($55,$57);
 }
 $58 = (($1) + 400|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = (__ZN10b2CLDevice8instanceEv()|0);
  $62 = (($1) + 400|0);
  $63 = HEAP32[$62>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($61,$63);
 }
 $64 = (($1) + 484|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = (__ZN10b2CLDevice8instanceEv()|0);
  $68 = (($1) + 484|0);
  $69 = HEAP32[$68>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($67,$69);
 }
 $70 = (($1) + 488|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = (__ZN10b2CLDevice8instanceEv()|0);
  $74 = (($1) + 488|0);
  $75 = HEAP32[$74>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($73,$75);
 }
 $76 = (($1) + 496|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = (__ZN10b2CLDevice8instanceEv()|0);
  $80 = (($1) + 496|0);
  $81 = HEAP32[$80>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($79,$81);
 }
 $82 = (($1) + 492|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0|0);
 if ($84) {
  $85 = (__ZN10b2CLDevice8instanceEv()|0);
  $86 = (($1) + 492|0);
  $87 = HEAP32[$86>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($85,$87);
 }
 $88 = (($1) + 500|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = (__ZN10b2CLDevice8instanceEv()|0);
  $92 = (($1) + 500|0);
  $93 = HEAP32[$92>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($91,$93);
 }
 $94 = (($1) + 504|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = (__ZN10b2CLDevice8instanceEv()|0);
  $98 = (($1) + 504|0);
  $99 = HEAP32[$98>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($97,$99);
 }
 $100 = (($1) + 404|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = (__ZN10b2CLDevice8instanceEv()|0);
  $104 = (($1) + 404|0);
  $105 = HEAP32[$104>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($103,$105);
 }
 $106 = (($1) + 408|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = (__ZN10b2CLDevice8instanceEv()|0);
  $110 = (($1) + 408|0);
  $111 = HEAP32[$110>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($109,$111);
 }
 $112 = (($1) + 412|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = (__ZN10b2CLDevice8instanceEv()|0);
  $116 = (($1) + 412|0);
  $117 = HEAP32[$116>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($115,$117);
 }
 $118 = (($1) + 420|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 if ($120) {
  $121 = (__ZN10b2CLDevice8instanceEv()|0);
  $122 = (($1) + 420|0);
  $123 = HEAP32[$122>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($121,$123);
 }
 $124 = (($1) + 424|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = (__ZN10b2CLDevice8instanceEv()|0);
  $128 = (($1) + 424|0);
  $129 = HEAP32[$128>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($127,$129);
 }
 $130 = (($1) + 448|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = (__ZN10b2CLDevice8instanceEv()|0);
  $134 = (($1) + 448|0);
  $135 = HEAP32[$134>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($133,$135);
 }
 $136 = (($1) + 452|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = (__ZN10b2CLDevice8instanceEv()|0);
  $140 = (($1) + 452|0);
  $141 = HEAP32[$140>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($139,$141);
 }
 $142 = (($1) + 460|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = (__ZN10b2CLDevice8instanceEv()|0);
  $146 = (($1) + 460|0);
  $147 = HEAP32[$146>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($145,$147);
 }
 $148 = (($1) + 464|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = (__ZN10b2CLDevice8instanceEv()|0);
  $152 = (($1) + 464|0);
  $153 = HEAP32[$152>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($151,$153);
 }
 $154 = (($1) + 456|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = (__ZN10b2CLDevice8instanceEv()|0);
  $158 = (($1) + 456|0);
  $159 = HEAP32[$158>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($157,$159);
 }
 $160 = (($1) + 468|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ($161|0)!=(0|0);
 if ($162) {
  $163 = (__ZN10b2CLDevice8instanceEv()|0);
  $164 = (($1) + 468|0);
  $165 = HEAP32[$164>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($163,$165);
 }
 $166 = (($1) + 472|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = (__ZN10b2CLDevice8instanceEv()|0);
  $170 = (($1) + 472|0);
  $171 = HEAP32[$170>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($169,$171);
 }
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver9SetValuesEii6b2Vec2ff($this,$bodyCount,$contactCount,$gravity,$m_dtInput,$dtRatio) {
 $this = $this|0;
 $bodyCount = $bodyCount|0;
 $contactCount = $contactCount|0;
 $gravity = $gravity|0;
 $m_dtInput = +$m_dtInput;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bodyCount;
 $2 = $contactCount;
 $3 = $m_dtInput;
 $4 = $dtRatio;
 $5 = $0;
 $6 = $1;
 $7 = (($5) + 596|0);
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = (($5) + 600|0);
 HEAP32[$9>>2] = $8;
 $10 = +HEAPF32[$gravity>>2];
 $11 = (($5) + 624|0);
 HEAPF32[$11>>2] = $10;
 $12 = (($gravity) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = (($5) + 624|0);
 $15 = (($14) + 4|0);
 HEAPF32[$15>>2] = $13;
 $16 = $3;
 $17 = (($5) + 632|0);
 HEAPF32[$17>>2] = $16;
 $18 = $4;
 $19 = (($5) + 636|0);
 HEAPF32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver20b2CLInitializeSolverEPP6b2BodyPP9b2ContactP10b2VelocityP10b2Positionii6b2Vec2fRK16b2ContactManagerS5_P27b2ContactVelocityConstraintP27b2ContactPositionConstraint($this,$m_bodiesInput,$m_contactsInput,$m_velocitiesInput,$m_positionsInput,$m_bodyCountInput,$m_contactCountInput,$m_gravityInput,$m_dtInput,$contactManager,$m_islandContacts,$m_velocitiesConstraintsInput,$m_positionsConstraintsInput) {
 $this = $this|0;
 $m_bodiesInput = $m_bodiesInput|0;
 $m_contactsInput = $m_contactsInput|0;
 $m_velocitiesInput = $m_velocitiesInput|0;
 $m_positionsInput = $m_positionsInput|0;
 $m_bodyCountInput = $m_bodyCountInput|0;
 $m_contactCountInput = $m_contactCountInput|0;
 $m_gravityInput = $m_gravityInput|0;
 $m_dtInput = +$m_dtInput;
 $contactManager = $contactManager|0;
 $m_islandContacts = $m_islandContacts|0;
 $m_velocitiesConstraintsInput = $m_velocitiesConstraintsInput|0;
 $m_positionsConstraintsInput = $m_positionsConstraintsInput|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $testColorTimer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $testColorTimer = sp + 48|0;
 $0 = $this;
 $1 = $m_bodiesInput;
 $2 = $m_contactsInput;
 $3 = $m_velocitiesInput;
 $4 = $m_positionsInput;
 $5 = $m_bodyCountInput;
 $6 = $m_contactCountInput;
 $7 = $m_dtInput;
 $8 = $contactManager;
 $9 = $m_islandContacts;
 $10 = $m_velocitiesConstraintsInput;
 $11 = $m_positionsConstraintsInput;
 $12 = $0;
 $13 = (($12) + 596|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<=(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = (($12) + 548|0);
 HEAP32[$17>>2] = $16;
 $18 = $3;
 $19 = (($12) + 544|0);
 HEAP32[$19>>2] = $18;
 $20 = $1;
 $21 = (($12) + 540|0);
 HEAP32[$21>>2] = $20;
 __ZN10b2CLSolver22CreateBuffersForBodiesEv($12);
 $22 = (($12) + 600|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<=(0);
 if ($24) {
  STACKTOP = sp;return;
 } else {
  $25 = $2;
  $26 = (($12) + 536|0);
  HEAP32[$26>>2] = $25;
  $27 = $10;
  $28 = (($12) + 552|0);
  HEAP32[$28>>2] = $27;
  $29 = $11;
  $30 = (($12) + 556|0);
  HEAP32[$30>>2] = $29;
  __ZN10b2CLSolver24CreateBuffersForContactsEv($12);
  __ZN7b2TimerC2Ev($testColorTimer);
  $31 = $9;
  __ZN10b2CLSolver25ComputeColoringOfContactsEPP9b2Contact($12,$31);
  __ZN10b2CLSolver24CopyDataToGPUForContactsEv($12);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver22CreateBuffersForBodiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 608|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 596|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($1) + 392|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (__ZN10b2CLDevice8instanceEv()|0);
  $11 = (($1) + 392|0);
  $12 = HEAP32[$11>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($10,$12);
 }
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = (($1) + 596|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*12)|0;
 $17 = (__ZN10b2CLDevice13allocateArrayEjb($13,$16,0)|0);
 $18 = (($1) + 392|0);
 HEAP32[$18>>2] = $17;
 $19 = (($1) + 400|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = (__ZN10b2CLDevice8instanceEv()|0);
  $23 = (($1) + 400|0);
  $24 = HEAP32[$23>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($22,$24);
 }
 $25 = (__ZN10b2CLDevice8instanceEv()|0);
 $26 = (($1) + 596|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27*12)|0;
 $29 = (__ZN10b2CLDevice13allocateArrayEjb($25,$28,0)|0);
 $30 = (($1) + 400|0);
 HEAP32[$30>>2] = $29;
 $31 = (($1) + 484|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = (__ZN10b2CLDevice8instanceEv()|0);
  $35 = (($1) + 484|0);
  $36 = HEAP32[$35>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($34,$36);
 }
 $37 = (__ZN10b2CLDevice8instanceEv()|0);
 $38 = (($1) + 596|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39*12)|0;
 $41 = (__ZN10b2CLDevice13allocateArrayEjb($37,$40,0)|0);
 $42 = (($1) + 484|0);
 HEAP32[$42>>2] = $41;
 $43 = (($1) + 596|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($1) + 608|0);
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver24CreateBuffersForContactsEv($this) {
 $this = $this|0;
 var $$arith = 0, $$arith10 = 0, $$arith14 = 0, $$arith18 = 0, $$arith2 = 0, $$arith22 = 0, $$arith26 = 0, $$arith6 = 0, $$overflow = 0, $$overflow11 = 0, $$overflow15 = 0, $$overflow19 = 0, $$overflow23 = 0, $$overflow27 = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 612|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 600|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($3) + 560|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = (($3) + 560|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   __ZdaPv($13);
  }
 }
 $15 = (($3) + 600|0);
 $16 = HEAP32[$15>>2]|0;
 $$arith26 = ($16*40)|0;
 $$overflow27 = ($16>>>0)>(107374182);
 $17 = $$overflow27 ? -1 : $$arith26;
 $18 = (__Znaj($17)|0);
 $19 = (($3) + 560|0);
 HEAP32[$19>>2] = $18;
 $20 = (($3) + 564|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = (($3) + 564|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   __ZdaPv($24);
  }
 }
 $26 = (($3) + 600|0);
 $27 = HEAP32[$26>>2]|0;
 $$arith22 = ($27*56)|0;
 $$overflow23 = ($27>>>0)>(76695844);
 $28 = $$overflow23 ? -1 : $$arith22;
 $29 = (__Znaj($28)|0);
 $30 = (($3) + 564|0);
 HEAP32[$30>>2] = $29;
 $31 = (($3) + 568|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = (($3) + 568|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if (!($36)) {
   __ZdaPv($35);
  }
 }
 $37 = (($3) + 600|0);
 $38 = HEAP32[$37>>2]|0;
 $$arith18 = $38<<4;
 $$overflow19 = ($38>>>0)>(268435455);
 $39 = $$overflow19 ? -1 : $$arith18;
 $40 = (__Znaj($39)|0);
 $41 = (($3) + 568|0);
 HEAP32[$41>>2] = $40;
 $42 = (($3) + 572|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = (($3) + 572|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if (!($47)) {
   __ZdaPv($46);
  }
 }
 $48 = (($3) + 600|0);
 $49 = HEAP32[$48>>2]|0;
 $$arith14 = $49<<6;
 $$overflow15 = ($49>>>0)>(67108863);
 $50 = $$overflow15 ? -1 : $$arith14;
 $51 = (__Znaj($50)|0);
 $52 = ($49|0)==(0);
 L28: do {
  if (!($52)) {
   $53 = (($51) + ($49<<6)|0);
   $54 = $51;
   while(1) {
    __THREW__ = 0;
    invoke_vi(476,($54|0));
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     break;
    }
    $57 = (($54) + 64|0);
    $58 = ($57|0)==($53|0);
    if ($58) {
     break L28;
    } else {
     $54 = $57;
    }
   }
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $1 = $66;
   $2 = $67;
   __ZdaPv($51);
   $170 = $1;
   $171 = $2;
   ___resumeException($170|0);
   // unreachable;
  }
 } while(0);
 $59 = (($3) + 572|0);
 HEAP32[$59>>2] = $51;
 $60 = (($3) + 580|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = (($3) + 580|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   __ZdaPv($64);
  }
 }
 $68 = (($3) + 600|0);
 $69 = HEAP32[$68>>2]|0;
 $$arith10 = $69<<2;
 $$overflow11 = ($69>>>0)>(1073741823);
 $70 = $$overflow11 ? -1 : $$arith10;
 $71 = (__Znaj($70)|0);
 $72 = (($3) + 580|0);
 HEAP32[$72>>2] = $71;
 $73 = (($3) + 584|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = (($3) + 584|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(0|0);
  if (!($78)) {
   __ZdaPv($77);
  }
 }
 $79 = (($3) + 600|0);
 $80 = HEAP32[$79>>2]|0;
 $$arith6 = $80<<2;
 $$overflow7 = ($80>>>0)>(1073741823);
 $81 = $$overflow7 ? -1 : $$arith6;
 $82 = (__Znaj($81)|0);
 $83 = (($3) + 584|0);
 HEAP32[$83>>2] = $82;
 $84 = (($3) + 588|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = (($3) + 588|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==(0|0);
  if (!($89)) {
   __ZdaPv($88);
  }
 }
 $90 = (($3) + 600|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + 1)|0;
 $$arith2 = $92<<2;
 $$overflow3 = ($92>>>0)>(1073741823);
 $93 = $$overflow3 ? -1 : $$arith2;
 $94 = (__Znaj($93)|0);
 $95 = (($3) + 588|0);
 HEAP32[$95>>2] = $94;
 $96 = (($3) + 592|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = (($3) + 592|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0|0);
  if (!($101)) {
   __ZdaPv($100);
  }
 }
 $102 = (($3) + 600|0);
 $103 = HEAP32[$102>>2]|0;
 $$arith = $103<<2;
 $$overflow = ($103>>>0)>(1073741823);
 $104 = $$overflow ? -1 : $$arith;
 $105 = (__Znaj($104)|0);
 $106 = (($3) + 592|0);
 HEAP32[$106>>2] = $105;
 $107 = (($3) + 488|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0|0);
 if ($109) {
  $110 = (__ZN10b2CLDevice8instanceEv()|0);
  $111 = (($3) + 488|0);
  $112 = HEAP32[$111>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($110,$112);
 }
 $113 = (__ZN10b2CLDevice8instanceEv()|0);
 $114 = (($3) + 600|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115*40)|0;
 $117 = (__ZN10b2CLDevice13allocateArrayEjb($113,$116,0)|0);
 $118 = (($3) + 488|0);
 HEAP32[$118>>2] = $117;
 $119 = (($3) + 496|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = (__ZN10b2CLDevice8instanceEv()|0);
  $123 = (($3) + 496|0);
  $124 = HEAP32[$123>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($122,$124);
 }
 $125 = (__ZN10b2CLDevice8instanceEv()|0);
 $126 = (($3) + 600|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127*56)|0;
 $129 = (__ZN10b2CLDevice13allocateArrayEjb($125,$128,0)|0);
 $130 = (($3) + 496|0);
 HEAP32[$130>>2] = $129;
 $131 = (($3) + 500|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = (__ZN10b2CLDevice8instanceEv()|0);
  $135 = (($3) + 500|0);
  $136 = HEAP32[$135>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($134,$136);
 }
 $137 = (__ZN10b2CLDevice8instanceEv()|0);
 $138 = (($3) + 600|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139<<6;
 $141 = (__ZN10b2CLDevice13allocateArrayEjb($137,$140,0)|0);
 $142 = (($3) + 500|0);
 HEAP32[$142>>2] = $141;
 $143 = (($3) + 492|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($144|0)!=(0|0);
 if ($145) {
  $146 = (__ZN10b2CLDevice8instanceEv()|0);
  $147 = (($3) + 492|0);
  $148 = HEAP32[$147>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($146,$148);
 }
 $149 = (__ZN10b2CLDevice8instanceEv()|0);
 $150 = (($3) + 600|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151<<4;
 $153 = (__ZN10b2CLDevice13allocateArrayEjb($149,$152,0)|0);
 $154 = (($3) + 492|0);
 HEAP32[$154>>2] = $153;
 $155 = (($3) + 504|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156|0)!=(0|0);
 if ($157) {
  $158 = (__ZN10b2CLDevice8instanceEv()|0);
  $159 = (($3) + 504|0);
  $160 = HEAP32[$159>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($158,$160);
 }
 $161 = (__ZN10b2CLDevice8instanceEv()|0);
 $162 = (($3) + 600|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $163<<2;
 $165 = (__ZN10b2CLDevice13allocateArrayEjb($161,$164,0)|0);
 $166 = (($3) + 504|0);
 HEAP32[$166>>2] = $165;
 $167 = (($3) + 600|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($3) + 612|0);
 HEAP32[$169>>2] = $168;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver25ComputeColoringOfContactsEPP9b2Contact($this,$m_islandContacts) {
 $this = $this|0;
 $m_islandContacts = $m_islandContacts|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0, $coloredContactIndex = 0, $contactColors = 0, $freezed_body = 0, $globalIndex = 0, $i = 0, $i1 = 0;
 var $indexA = 0, $indexB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m_islandContacts;
 $2 = $0;
 $3 = (($2) + 596|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 $6 = $5 ? -1 : $4;
 $7 = (__Znaj($6)|0);
 $freezed_body = $7;
 $8 = (($2) + 600|0);
 $9 = HEAP32[$8>>2]|0;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $contactColors = $11;
 $12 = $freezed_body;
 $13 = (($2) + 596|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 _memset(($12|0),0,($15|0))|0;
 $16 = $contactColors;
 $17 = (($2) + 600|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 _memset(($16|0),0,($19|0))|0;
 $color = 1;
 $coloredContactIndex = 0;
 $20 = (($2) + 588|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$21>>2] = 0;
 while(1) {
  $22 = $coloredContactIndex;
  $23 = (($2) + 600|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = (($2) + 600|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = $i;
   $31 = $contactColors;
   $32 = (($31) + ($30<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   do {
    if ($34) {
    } else {
     $35 = $i;
     $36 = (($2) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + ($35<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $globalIndex = $39;
     $40 = $globalIndex;
     $41 = $40<<2;
     $42 = (($41) + 2)|0;
     $43 = (($2) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + ($42<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $indexA = $46;
     $47 = $globalIndex;
     $48 = $47<<2;
     $49 = (($48) + 3)|0;
     $50 = (($2) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + ($49<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $indexB = $53;
     $54 = $indexA;
     $55 = $freezed_body;
     $56 = (($55) + ($54)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&1;
     if (!($58)) {
      $59 = $indexB;
      $60 = $freezed_body;
      $61 = (($60) + ($59)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&1;
      if (!($63)) {
       $64 = $color;
       $65 = $i;
       $66 = $contactColors;
       $67 = (($66) + ($65<<2)|0);
       HEAP32[$67>>2] = $64;
       $68 = $coloredContactIndex;
       $69 = $i;
       $70 = (($2) + 580|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($71) + ($69<<2)|0);
       HEAP32[$72>>2] = $68;
       $73 = $globalIndex;
       $74 = $coloredContactIndex;
       $75 = (($2) + 584|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (($76) + ($74<<2)|0);
       HEAP32[$77>>2] = $73;
       $78 = $coloredContactIndex;
       $79 = (($78) + 1)|0;
       $coloredContactIndex = $79;
       $80 = $indexA;
       $81 = (($2) + 540|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($82) + ($80<<2)|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (__ZNK6b2Body7GetTypeEv($84)|0);
       $86 = ($85|0)==(2);
       if ($86) {
        $87 = $indexA;
        $88 = $freezed_body;
        $89 = (($88) + ($87)|0);
        HEAP8[$89>>0] = 1;
       }
       $90 = $indexB;
       $91 = (($2) + 540|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + ($90<<2)|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (__ZNK6b2Body7GetTypeEv($94)|0);
       $96 = ($95|0)==(2);
       if ($96) {
        $97 = $indexB;
        $98 = $freezed_body;
        $99 = (($98) + ($97)|0);
        HEAP8[$99>>0] = 1;
       }
       break;
      }
     }
    }
   } while(0);
   $100 = $i;
   $101 = (($100) + 1)|0;
   $i = $101;
  }
  $102 = $color;
  $103 = (($102) + 1)|0;
  $color = $103;
  $104 = $freezed_body;
  $105 = (($2) + 596|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106;
  _memset(($104|0),0,($107|0))|0;
  $108 = $coloredContactIndex;
  $109 = $color;
  $110 = (($109) - 1)|0;
  $111 = (($2) + 588|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + ($110<<2)|0);
  HEAP32[$113>>2] = $108;
 }
 $114 = $color;
 $115 = (($114) - 1)|0;
 $116 = (($2) + 576|0);
 HEAP32[$116>>2] = $115;
 $117 = (($2) + 600|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($2) + 576|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($2) + 588|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + ($120<<2)|0);
 HEAP32[$123>>2] = $118;
 $i1 = 1;
 while(1) {
  $124 = $i1;
  $125 = (($2) + 576|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)<=($126|0);
  if (!($127)) {
   break;
  }
  $128 = $i1;
  $129 = (($2) + 588|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + ($128<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $i1;
  $134 = (($133) - 1)|0;
  $135 = (($2) + 588|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($134<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($132) - ($138))|0;
  $140 = $i1;
  $141 = (($140) - 1)|0;
  $142 = (($2) + 592|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + ($141<<2)|0);
  HEAP32[$144>>2] = $139;
  $145 = $i1;
  $146 = (($145) + 1)|0;
  $i1 = $146;
 }
 $147 = $contactColors;
 $148 = ($147|0)==(0|0);
 if (!($148)) {
  __ZdaPv($147);
 }
 $149 = $freezed_body;
 $150 = ($149|0)==(0|0);
 if ($150) {
  STACKTOP = sp;return;
 }
 __ZdaPv($149);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver24CopyDataToGPUForContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN10b2CLDevice8instanceEv()|0);
 $3 = (($1) + 504|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 584|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 600|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($2,$4,$6,0,$9,1);
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver32CreateBuffersForSortingManifoldsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $exp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exp = sp;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(512);
 if ($4) {
  $5 = (($1) + 516|0);
  HEAP32[$5>>2] = 512;
 } else {
  $6 = (($1) + 600|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($7|0));
  $9 = $8;
  (+_frexp($9,$exp));
  $10 = HEAP32[$exp>>2]|0;
  $11 = (($10) - 1)|0;
  $12 = 1 << $11;
  $13 = (($1) + 516|0);
  HEAP32[$13>>2] = $12;
  $14 = (($1) + 516|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($1) + 600|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<($17|0);
  if ($18) {
   $19 = (($1) + 516|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 << 1;
   HEAP32[$19>>2] = $21;
  }
 }
 $22 = (($1) + 520|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($1) + 516|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($23|0)<($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = (($1) + 508|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = (__ZN10b2CLDevice8instanceEv()|0);
  $31 = (($1) + 508|0);
  $32 = HEAP32[$31>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($30,$32);
 }
 $33 = (__ZN10b2CLDevice8instanceEv()|0);
 $34 = (($1) + 516|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35<<2;
 $37 = (__ZN10b2CLDevice13allocateArrayEjb($33,$36,0)|0);
 $38 = (($1) + 508|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + 512|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = (__ZN10b2CLDevice8instanceEv()|0);
  $43 = (($1) + 512|0);
  $44 = HEAP32[$43>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($42,$44);
 }
 $45 = (__ZN10b2CLDevice8instanceEv()|0);
 $46 = (($1) + 516|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47<<2;
 $49 = (__ZN10b2CLDevice13allocateArrayEjb($45,$48,0)|0);
 $50 = (($1) + 512|0);
 HEAP32[$50>>2] = $49;
 $51 = (($1) + 516|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($1) + 520|0);
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver27CopyResultsFromGPUForBodiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = (__ZN10b2CLDevice8instanceEv()|0);
  $6 = (($1) + 548|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) + 400|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($1) + 596|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11*12)|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($5,$7,$9,0,$12,1);
  $13 = (__ZN10b2CLDevice8instanceEv()|0);
  $14 = (($1) + 544|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($1) + 392|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($1) + 596|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*12)|0;
  __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($13,$15,$17,0,$20,1);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver37b2CLInitializeJointVelocityConstraintEbf($this,$bWarmStarting,$dt) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0;
 var $colorIndex = 0, $curEvent = 0, $curr = 0, $err = 0, $event_wait_list = 0, $events = 0, $global = 0, $i = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0, $numBlocks = 0, $numContact = 0, $num_events_in_wait_list = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 96|0;
 $2 = sp + 24|0;
 $events = sp + 16|0;
 $offset = sp + 76|0;
 $length = sp + 80|0;
 $global = sp + 48|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dt;
 $4 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $i = 1;
 L1: while(1) {
  $5 = $i;
  $6 = ($5|0)<(11);
  if (!($6)) {
   label = 24;
   break;
  }
  $7 = $i;
  $8 = (__ZN14b2CLCommonData8instanceEv()|0);
  $9 = (($8) + 100|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $numContact = $11;
  $12 = $numContact;
  $13 = ($12|0)==(0);
  if ($13) {
  } else {
   $a1 = 0;
   $14 = $i;
   $15 = (($4) + 96|0);
   $16 = (($15) + ($14<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $a1;
   $19 = (($18) + 1)|0;
   $a1 = $19;
   $20 = (($4) + 392|0);
   $21 = (_clSetKernelArg(($17|0),($18|0),4,($20|0))|0);
   $err = $21;
   $22 = $i;
   $23 = (($4) + 96|0);
   $24 = (($23) + ($22<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $a1;
   $27 = (($26) + 1)|0;
   $a1 = $27;
   $28 = (($4) + 400|0);
   $29 = (_clSetKernelArg(($25|0),($26|0),4,($28|0))|0);
   $30 = $err;
   $31 = $30 | $29;
   $err = $31;
   $32 = $i;
   $33 = (($4) + 96|0);
   $34 = (($33) + ($32<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $a1;
   $37 = (($36) + 1)|0;
   $a1 = $37;
   $38 = (__ZN14b2CLCommonData8instanceEv()|0);
   $39 = (($38) + 72|0);
   $40 = (_clSetKernelArg(($35|0),($36|0),4,($39|0))|0);
   $41 = $err;
   $42 = $41 | $40;
   $err = $42;
   $43 = $i;
   $44 = (($4) + 96|0);
   $45 = (($44) + ($43<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $a1;
   $48 = (($47) + 1)|0;
   $a1 = $48;
   $49 = (__ZN14b2CLCommonData8instanceEv()|0);
   $50 = (($49) + 64|0);
   $51 = (_clSetKernelArg(($46|0),($47|0),4,($50|0))|0);
   $52 = $err;
   $53 = $52 | $51;
   $err = $53;
   $54 = $i;
   $55 = (($4) + 96|0);
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $a1;
   $59 = (($58) + 1)|0;
   $a1 = $59;
   $60 = (__ZN14b2CLCommonData8instanceEv()|0);
   $61 = (($60) + 1076|0);
   $62 = (_clSetKernelArg(($57|0),($58|0),4,($61|0))|0);
   $63 = $err;
   $64 = $63 | $62;
   $err = $64;
   $65 = $i;
   $66 = (($4) + 96|0);
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $a1;
   $70 = (($69) + 1)|0;
   $a1 = $70;
   $71 = (_clSetKernelArg(($68|0),($69|0),4,($1|0))|0);
   $72 = $err;
   $73 = $72 | $71;
   $err = $73;
   $74 = $i;
   $75 = (($4) + 96|0);
   $76 = (($75) + ($74<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $a1;
   $79 = (($78) + 1)|0;
   $a1 = $79;
   $80 = (_clSetKernelArg(($77|0),($78|0),4,($2|0))|0);
   $81 = $err;
   $82 = $81 | $80;
   $err = $82;
   $83 = $i;
   $84 = (($4) + 96|0);
   $85 = (($84) + ($83<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $a1;
   $88 = (($87) + 1)|0;
   $a1 = $88;
   $89 = (($4) + 636|0);
   $90 = (_clSetKernelArg(($86|0),($87|0),4,($89|0))|0);
   $91 = $err;
   $92 = $91 | $90;
   $err = $92;
   $93 = $i;
   $94 = (__ZN14b2CLCommonData8instanceEv()|0);
   $95 = (($94) + 1032|0);
   $96 = (($95) + ($93<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $maxcolor = $97;
   $colorIndex = 0;
   while(1) {
    $98 = $colorIndex;
    $99 = $maxcolor;
    $100 = ($98|0)<($99|0);
    if (!($100)) {
     break;
    }
    $101 = $colorIndex;
    $102 = $i;
    $103 = (__ZN14b2CLCommonData8instanceEv()|0);
    $104 = (($103) + 152|0);
    $105 = (($104) + (($102*80)|0)|0);
    $106 = (($105) + ($101<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$offset>>2] = $107;
    $108 = $colorIndex;
    $109 = (($108) + 1)|0;
    $110 = $i;
    $111 = (__ZN14b2CLCommonData8instanceEv()|0);
    $112 = (($111) + 152|0);
    $113 = (($112) + (($110*80)|0)|0);
    $114 = (($113) + ($109<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$offset>>2]|0;
    $117 = (($115) - ($116))|0;
    HEAP32[$length>>2] = $117;
    $118 = $curr;
    $119 = (($events) + ($118<<2)|0);
    $curEvent = $119;
    $120 = HEAP8[$1>>0]|0;
    $121 = $120&1;
    if (!($121)) {
     $122 = $numContact;
     HEAP32[$length>>2] = $122;
     $curEvent = 0;
    }
    $123 = $i;
    $124 = (($4) + 96|0);
    $125 = (($124) + ($123<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $a1;
    $128 = (_clSetKernelArg(($126|0),($127|0),4,($offset|0))|0);
    $129 = $err;
    $130 = $129 | $128;
    $err = $130;
    $131 = $i;
    $132 = (($4) + 96|0);
    $133 = (($132) + ($131<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $a1;
    $136 = (($135) + 1)|0;
    $137 = (_clSetKernelArg(($134|0),($136|0),4,($length|0))|0);
    $138 = $err;
    $139 = $138 | $137;
    $err = $139;
    $140 = $err;
    $141 = ($140|0)!=(0);
    if ($141) {
     label = 10;
     break L1;
    }
    $143 = HEAP32[$length>>2]|0;
    $144 = (($4) + 292|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($143) + ($145))|0;
    $147 = (($146) - 1)|0;
    $148 = (($4) + 292|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (($147>>>0) / ($149>>>0))&-1;
    $numBlocks = $150;
    $151 = $numBlocks;
    $152 = (($4) + 292|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = Math_imul($151, $153)|0;
    HEAP32[$global>>2] = $154;
    $155 = $noqueue;
    $156 = $155&1;
    $157 = $156 ? 0 : 1;
    $num_events_in_wait_list = $157;
    $158 = $noqueue;
    $159 = $158&1;
    if ($159) {
     $162 = 0;
    } else {
     $160 = $last;
     $161 = (($events) + ($160<<2)|0);
     $162 = $161;
    }
    $event_wait_list = $162;
    $163 = (__ZN10b2CLDevice8instanceEv()|0);
    $164 = (__ZNK10b2CLDevice15GetCommandQueueEv($163)|0);
    $165 = $i;
    $166 = (($4) + 96|0);
    $167 = (($166) + ($165<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($4) + 292|0);
    $170 = $num_events_in_wait_list;
    $171 = $event_wait_list;
    $172 = $curEvent;
    $173 = (_clEnqueueNDRangeKernel(($164|0),($168|0),1,(0|0),($global|0),($169|0),($170|0),($171|0),($172|0))|0);
    $err = $173;
    $174 = $err;
    $175 = ($174|0)!=(0);
    if ($175) {
     label = 15;
     break L1;
    }
    $177 = HEAP8[$1>>0]|0;
    $178 = $177&1;
    if (!($178)) {
     label = 17;
     break;
    }
    $179 = $noqueue;
    $180 = $179&1;
    if (!($180)) {
     $181 = $last;
     $182 = (($events) + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     (_clReleaseEvent(($183|0))|0);
    }
    $noqueue = 0;
    $184 = $last;
    $curr = $184;
    $185 = $last;
    $186 = (1 - ($185))|0;
    $last = $186;
    $187 = $colorIndex;
    $188 = (($187) + 1)|0;
    $colorIndex = $188;
   }
   if ((label|0) == 17) {
    label = 0;
   }
  }
  $189 = $i;
  $190 = (($189) + 1)|0;
  $i = $190;
 }
 if ((label|0) == 10) {
  $142 = $err;
  HEAP32[$vararg_buffer>>2] = $142;
  (_printf((17472|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 15) {
  $176 = $i;
  HEAP32[$vararg_buffer1>>2] = $176;
  (_printf((17616|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $191 = $noqueue;
  $192 = $191&1;
  $193 = $192&1;
  $194 = ($193|0)==(0);
  if (!($194)) {
   STACKTOP = sp;return;
  }
  $195 = $last;
  $196 = (($events) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  (_clReleaseEvent(($197|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLInitializeVelocityConstraintEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $global = sp + 32|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = (($4) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $8 = (($4) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $a;
 $11 = (($10) + 1)|0;
 $a = $11;
 $12 = (($4) + 488|0);
 $13 = (_clSetKernelArg(($9|0),($10|0),4,($12|0))|0);
 $err = $13;
 $14 = (($4) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $a;
 $17 = (($16) + 1)|0;
 $a = $17;
 $18 = (($4) + 492|0);
 $19 = (_clSetKernelArg(($15|0),($16|0),4,($18|0))|0);
 $20 = $err;
 $21 = $20 | $19;
 $err = $21;
 $22 = (($4) + 92|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $a;
 $25 = (($24) + 1)|0;
 $a = $25;
 $26 = (($4) + 496|0);
 $27 = (_clSetKernelArg(($23|0),($24|0),4,($26|0))|0);
 $28 = $err;
 $29 = $28 | $27;
 $err = $29;
 $30 = (($4) + 92|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $a;
 $33 = (($32) + 1)|0;
 $a = $33;
 $34 = (($4) + 500|0);
 $35 = (_clSetKernelArg(($31|0),($32|0),4,($34|0))|0);
 $36 = $err;
 $37 = $36 | $35;
 $err = $37;
 $38 = (($4) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $a;
 $41 = (($40) + 1)|0;
 $a = $41;
 $42 = (($4) + 600|0);
 $43 = (_clSetKernelArg(($39|0),($40|0),4,($42|0))|0);
 $44 = $err;
 $45 = $44 | $43;
 $err = $45;
 $46 = (($4) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $a;
 $49 = (($48) + 1)|0;
 $a = $49;
 $50 = (($4) + 392|0);
 $51 = (_clSetKernelArg(($47|0),($48|0),4,($50|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = (($4) + 92|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $a = $57;
 $58 = (($4) + 400|0);
 $59 = (_clSetKernelArg(($55|0),($56|0),4,($58|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = (($4) + 92|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = (__ZN14b2CLCommonData8instanceEv()|0);
 $67 = (($66) + 68|0);
 $68 = (_clSetKernelArg(($63|0),($64|0),4,($67|0))|0);
 $69 = $err;
 $70 = $69 | $68;
 $err = $70;
 $71 = (($4) + 92|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $a;
 $74 = (($73) + 1)|0;
 $a = $74;
 $75 = (__ZN14b2CLCommonData8instanceEv()|0);
 $76 = (($75) + 72|0);
 $77 = (_clSetKernelArg(($72|0),($73|0),4,($76|0))|0);
 $78 = $err;
 $79 = $78 | $77;
 $err = $79;
 $80 = (($4) + 92|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $a;
 $83 = (($82) + 1)|0;
 $a = $83;
 $84 = (__ZN14b2CLCommonData8instanceEv()|0);
 $85 = (($84) + 80|0);
 $86 = (_clSetKernelArg(($81|0),($82|0),4,($85|0))|0);
 $87 = $err;
 $88 = $87 | $86;
 $err = $88;
 $89 = (($4) + 92|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $a;
 $92 = (($91) + 1)|0;
 $a = $92;
 $93 = (($4) + 504|0);
 $94 = (_clSetKernelArg(($90|0),($91|0),4,($93|0))|0);
 $95 = $err;
 $96 = $95 | $94;
 $err = $96;
 $97 = (($4) + 92|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $a;
 $100 = (($99) + 1)|0;
 $a = $100;
 $101 = (__ZN14b2CLCommonData8instanceEv()|0);
 $102 = (($101) + 56|0);
 $103 = (_clSetKernelArg(($98|0),($99|0),4,($102|0))|0);
 $104 = $err;
 $105 = $104 | $103;
 $err = $105;
 $106 = (($4) + 92|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $a;
 $109 = (($108) + 1)|0;
 $a = $109;
 $110 = (__ZN14b2CLCommonData8instanceEv()|0);
 $111 = (($110) + 64|0);
 $112 = (_clSetKernelArg(($107|0),($108|0),4,($111|0))|0);
 $113 = $err;
 $114 = $113 | $112;
 $err = $114;
 $115 = (($4) + 92|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $a;
 $118 = (($117) + 1)|0;
 $a = $118;
 $119 = (__ZN14b2CLCommonData8instanceEv()|0);
 $120 = (($119) + 44|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (__ZN14b2CLCommonData8instanceEv()|0);
 $123 = (($122) + 36|0);
 $124 = (($123) + ($121<<2)|0);
 $125 = (_clSetKernelArg(($116|0),($117|0),4,($124|0))|0);
 $126 = $err;
 $127 = $126 | $125;
 $err = $127;
 $128 = (($4) + 92|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $a;
 $131 = (($130) + 1)|0;
 $a = $131;
 $132 = (_clSetKernelArg(($129|0),($130|0),4,($1|0))|0);
 $133 = $err;
 $134 = $133 | $132;
 $err = $134;
 $135 = (($4) + 92|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $a;
 $138 = (($137) + 1)|0;
 $a = $138;
 $139 = (_clSetKernelArg(($136|0),($137|0),4,($2|0))|0);
 $140 = $err;
 $141 = $140 | $139;
 $err = $141;
 $142 = $err;
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = $err;
  HEAP32[$vararg_buffer>>2] = $144;
  (_printf((17472|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $145 = (($4) + 600|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($4) + 292|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + ($148))|0;
 $150 = (($149) - 1)|0;
 $151 = (($4) + 292|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150>>>0) / ($152>>>0))&-1;
 $numBlocks = $153;
 $154 = $numBlocks;
 $155 = (($4) + 292|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = Math_imul($154, $156)|0;
 HEAP32[$global>>2] = $157;
 $158 = (__ZN10b2CLDevice8instanceEv()|0);
 $159 = (__ZNK10b2CLDevice15GetCommandQueueEv($158)|0);
 $160 = (($4) + 92|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($4) + 292|0);
 $163 = (_clEnqueueNDRangeKernel(($159|0),($161|0),1,(0|0),($global|0),($162|0),0,(0|0),(0|0))|0);
 $err = $163;
 $164 = $err;
 $165 = ($164|0)!=(0);
 if ($165) {
  (_printf((17552|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver25b2CLReadCompactedContactsERi($this,$contactCount) {
 $this = $this|0;
 $contactCount = $contactCount|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contactCount;
 $2 = $0;
 $3 = (__ZN10b2CLDevice8instanceEv()|0);
 $4 = (__ZN8b2CLScan8instanceEv()|0);
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($3,$2,$6,0,4,1);
 $7 = (($2) + 616|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = (($2) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = (($2) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    __ZdaPv($15);
   }
  }
  $17 = HEAP32[$2>>2]|0;
  $$arith2 = $17<<2;
  $$overflow3 = ($17>>>0)>(1073741823);
  $18 = $$overflow3 ? -1 : $$arith2;
  $19 = (__Znaj($18)|0);
  $20 = (($2) + 4|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP32[$2>>2]|0;
  $22 = (($2) + 616|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = (($2) + 620|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($2) + 600|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)<($26|0);
 if ($27) {
  $28 = (($2) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = (($2) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    __ZdaPv($32);
   }
  }
  $34 = (($2) + 600|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35<<2;
  $$arith = $36<<2;
  $$overflow = ($36>>>0)>(1073741823);
  $37 = $$overflow ? -1 : $$arith;
  $38 = (__Znaj($37)|0);
  $39 = (($2) + 8|0);
  HEAP32[$39>>2] = $38;
  $40 = (($2) + 600|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($2) + 620|0);
  HEAP32[$42>>2] = $41;
 }
 $43 = HEAP32[$2>>2]|0;
 $44 = ($43|0)>(0);
 if (!($44)) {
  $63 = (($2) + 600|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($2) + 604|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP32[$2>>2]|0;
  $67 = $1;
  HEAP32[$67>>2] = $66;
  $68 = HEAP32[$2>>2]|0;
  $69 = (($2) + 600|0);
  HEAP32[$69>>2] = $68;
  STACKTOP = sp;return;
 }
 $45 = (__ZN10b2CLDevice8instanceEv()|0);
 $46 = (($2) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (__ZN14b2CLCommonData8instanceEv()|0);
 $49 = (($48) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$2>>2]|0;
 $52 = $51<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($45,$47,$50,0,$52,1);
 $53 = (__ZN10b2CLDevice8instanceEv()|0);
 $54 = (($2) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (__ZN14b2CLCommonData8instanceEv()|0);
 $57 = (($56) + 80|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($2) + 600|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60<<2;
 $62 = $61<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($53,$55,$58,0,$62,1);
 $63 = (($2) + 600|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($2) + 604|0);
 HEAP32[$65>>2] = $64;
 $66 = HEAP32[$2>>2]|0;
 $67 = $1;
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$2>>2]|0;
 $69 = (($2) + 600|0);
 HEAP32[$69>>2] = $68;
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver23b2CLInitializeBodyStateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = (($1) + 140|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (($1) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = (($1) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = (($1) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = (($1) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = (__ZN14b2CLCommonData8instanceEv()|0);
 $24 = (($23) + 64|0);
 $25 = (_clSetKernelArg(($20|0),($21|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = (($1) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $a;
 $31 = (($30) + 1)|0;
 $a = $31;
 $32 = (($1) + 596|0);
 $33 = (_clSetKernelArg(($29|0),($30|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = (($1) + 140|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (__ZN14b2CLCommonData8instanceEv()|0);
 $41 = (($40) + 72|0);
 $42 = (_clSetKernelArg(($37|0),($38|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = (($1) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = (__ZN14b2CLCommonData8instanceEv()|0);
 $50 = (($49) + 76|0);
 $51 = (_clSetKernelArg(($46|0),($47|0),4,($50|0))|0);
 $52 = $err;
 $53 = $52 | $51;
 $err = $53;
 $54 = (($1) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $a;
 $57 = (($56) + 1)|0;
 $a = $57;
 $58 = (($1) + 624|0);
 $59 = (_clSetKernelArg(($55|0),($56|0),8,($58|0))|0);
 $60 = $err;
 $61 = $60 | $59;
 $err = $61;
 $62 = (($1) + 140|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $a;
 $65 = (($64) + 1)|0;
 $a = $65;
 $66 = (($1) + 632|0);
 $67 = (_clSetKernelArg(($63|0),($64|0),4,($66|0))|0);
 $68 = $err;
 $69 = $68 | $67;
 $err = $69;
 $70 = $err;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $err;
  HEAP32[$vararg_buffer>>2] = $72;
  (_printf((17688|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $73 = (($1) + 596|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($1) + 300|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + ($76))|0;
 $78 = (($77) - 1)|0;
 $79 = (($1) + 300|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78>>>0) / ($80>>>0))&-1;
 $numBlocks = $81;
 $82 = $numBlocks;
 $83 = (($1) + 300|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = Math_imul($82, $84)|0;
 HEAP32[$global>>2] = $85;
 $86 = (__ZN10b2CLDevice8instanceEv()|0);
 $87 = (__ZNK10b2CLDevice15GetCommandQueueEv($86)|0);
 $88 = (($1) + 140|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($1) + 300|0);
 $91 = (_clEnqueueNDRangeKernel(($87|0),($89|0),1,(0|0),($global|0),($90|0),0,(0|0),(0|0))|0);
 $err = $91;
 $92 = $err;
 $93 = ($92|0)!=(0);
 if ($93) {
  (_printf((17552|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver33b2CLInitializeBodyStateFirstFrameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = (($1) + 144|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (($1) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = (($1) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = (($1) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = (($1) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = (($1) + 596|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = (($1) + 144|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (__ZN14b2CLCommonData8instanceEv()|0);
 $32 = (($31) + 72|0);
 $33 = (_clSetKernelArg(($28|0),($29|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = (($1) + 144|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $a;
 $39 = (($38) + 1)|0;
 $a = $39;
 $40 = (__ZN14b2CLCommonData8instanceEv()|0);
 $41 = (($40) + 76|0);
 $42 = (_clSetKernelArg(($37|0),($38|0),4,($41|0))|0);
 $43 = $err;
 $44 = $43 | $42;
 $err = $44;
 $45 = (($1) + 144|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $a;
 $48 = (($47) + 1)|0;
 $a = $48;
 $49 = (($1) + 624|0);
 $50 = (_clSetKernelArg(($46|0),($47|0),8,($49|0))|0);
 $51 = $err;
 $52 = $51 | $50;
 $err = $52;
 $53 = (($1) + 144|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $a;
 $56 = (($55) + 1)|0;
 $a = $56;
 $57 = (($1) + 632|0);
 $58 = (_clSetKernelArg(($54|0),($55|0),4,($57|0))|0);
 $59 = $err;
 $60 = $59 | $58;
 $err = $60;
 $61 = $err;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $err;
  HEAP32[$vararg_buffer>>2] = $63;
  (_printf((17688|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $64 = (($1) + 596|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($1) + 304|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + ($67))|0;
 $69 = (($68) - 1)|0;
 $70 = (($1) + 304|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69>>>0) / ($71>>>0))&-1;
 $numBlocks = $72;
 $73 = $numBlocks;
 $74 = (($1) + 304|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = Math_imul($73, $75)|0;
 HEAP32[$global>>2] = $76;
 $77 = (__ZN10b2CLDevice8instanceEv()|0);
 $78 = (__ZNK10b2CLDevice15GetCommandQueueEv($77)|0);
 $79 = (($1) + 144|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($1) + 304|0);
 $82 = (_clEnqueueNDRangeKernel(($78|0),($80|0),1,(0|0),($global|0),($81|0),0,(0|0),(0|0))|0);
 $err = $82;
 $83 = $err;
 $84 = ($83|0)!=(0);
 if ($84) {
  (_printf((17552|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver25b2CLWarmStartWithColoringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $last = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $events = sp + 32|0;
 $global = sp + 68|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $5 = (($1) + 152|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (($1) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = (($1) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = (($1) + 488|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = (($1) + 152|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = (($1) + 492|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = (($1) + 152|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (($1) + 496|0);
 $32 = (_clSetKernelArg(($28|0),($29|0),4,($31|0))|0);
 $33 = $err;
 $34 = $33 | $32;
 $err = $34;
 $35 = $err;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $err;
  HEAP32[$vararg_buffer>>2] = $37;
  (_printf((17688|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $colorIndex = 0;
 while(1) {
  $38 = $colorIndex;
  $39 = (($1) + 576|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   label = 18;
   break;
  }
  $42 = (($1) + 152|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $a;
  $45 = $colorIndex;
  $46 = (($1) + 588|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  $49 = (_clSetKernelArg(($43|0),($44|0),4,($48|0))|0);
  $50 = $err;
  $51 = $50 | $49;
  $err = $51;
  $52 = (($1) + 152|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $a;
  $55 = (($54) + 1)|0;
  $56 = $colorIndex;
  $57 = (($1) + 592|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($56<<2)|0);
  $60 = (_clSetKernelArg(($53|0),($55|0),4,($59|0))|0);
  $61 = $err;
  $62 = $61 | $60;
  $err = $62;
  $63 = $err;
  $64 = ($63|0)!=(0);
  if ($64) {
   label = 8;
   break;
  }
  $66 = $colorIndex;
  $67 = (($1) + 592|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($1) + 316|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + ($72))|0;
  $74 = (($73) - 1)|0;
  $75 = (($1) + 316|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74>>>0) / ($76>>>0))&-1;
  $numBlocks = $77;
  $78 = $numBlocks;
  $79 = (($1) + 316|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = Math_imul($78, $80)|0;
  HEAP32[$global>>2] = $81;
  $82 = $colorIndex;
  $83 = ($82|0)==(0);
  if ($83) {
   $84 = (__ZN10b2CLDevice8instanceEv()|0);
   $85 = (__ZNK10b2CLDevice15GetCommandQueueEv($84)|0);
   $86 = (($1) + 152|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($1) + 316|0);
   $89 = $curr;
   $90 = (($events) + ($89<<2)|0);
   $91 = (_clEnqueueNDRangeKernel(($85|0),($87|0),1,(0|0),($global|0),($88|0),0,(0|0),($90|0))|0);
   $err = $91;
   $92 = $last;
   $curr = $92;
   $93 = $last;
   $94 = (1 - ($93))|0;
   $last = $94;
   $95 = $err;
   $96 = ($95|0)!=(0);
   if ($96) {
    label = 11;
    break;
   }
  } else {
   $97 = (__ZN10b2CLDevice8instanceEv()|0);
   $98 = (__ZNK10b2CLDevice15GetCommandQueueEv($97)|0);
   $99 = (($1) + 152|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($1) + 316|0);
   $102 = $last;
   $103 = (($events) + ($102<<2)|0);
   $104 = $curr;
   $105 = (($events) + ($104<<2)|0);
   $106 = (_clEnqueueNDRangeKernel(($98|0),($100|0),1,(0|0),($global|0),($101|0),1,($103|0),($105|0))|0);
   $err = $106;
   $107 = $last;
   $108 = (($events) + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   (_clReleaseEvent(($109|0))|0);
   $110 = $last;
   $curr = $110;
   $111 = $last;
   $112 = (1 - ($111))|0;
   $last = $112;
   $113 = $err;
   $114 = ($113|0)!=(0);
   if ($114) {
    label = 14;
    break;
   }
  }
  $115 = $colorIndex;
  $116 = (($115) + 1)|0;
  $colorIndex = $116;
 }
 if ((label|0) == 8) {
  $65 = $err;
  HEAP32[$vararg_buffer1>>2] = $65;
  (_printf((17688|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  (_printf((17752|0),($vararg_buffer4|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 14) {
  (_printf((17752|0),($vararg_buffer6|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $117 = $last;
  $118 = (($events) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  (_clReleaseEvent(($119|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver27b2CLSolveVelocityConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0;
 var $err = 0, $events = 0, $global = 0, $iter = 0, $last = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $events = sp + 32|0;
 $global = sp + 72|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $3 = (($2) + 600|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $6 = (($2) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $a;
 $9 = (($8) + 1)|0;
 $a = $9;
 $10 = (($2) + 392|0);
 $11 = (_clSetKernelArg(($7|0),($8|0),4,($10|0))|0);
 $err = $11;
 $12 = (($2) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = (($2) + 488|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = (($2) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = (($2) + 492|0);
 $25 = (_clSetKernelArg(($21|0),($22|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = (($2) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $a;
 $31 = (($30) + 1)|0;
 $a = $31;
 $32 = (($2) + 496|0);
 $33 = (_clSetKernelArg(($29|0),($30|0),4,($32|0))|0);
 $34 = $err;
 $35 = $34 | $33;
 $err = $35;
 $36 = $err;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $err;
  HEAP32[$vararg_buffer>>2] = $38;
  (_printf((17688|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $iter = 0;
 L8: while(1) {
  $39 = $iter;
  $40 = $1;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   label = 27;
   break;
  }
  $colorIndex = 0;
  while(1) {
   $42 = $colorIndex;
   $43 = (($2) + 576|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = (($2) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $a;
   $49 = $colorIndex;
   $50 = (($2) + 588|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($49<<2)|0);
   $53 = (_clSetKernelArg(($47|0),($48|0),4,($52|0))|0);
   $err = $53;
   $54 = (($2) + 24|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $a;
   $57 = (($56) + 1)|0;
   $58 = $colorIndex;
   $59 = (($2) + 592|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($58<<2)|0);
   $62 = (_clSetKernelArg(($55|0),($57|0),4,($61|0))|0);
   $63 = $err;
   $64 = $63 | $62;
   $err = $64;
   $65 = $err;
   $66 = ($65|0)!=(0);
   if ($66) {
    label = 10;
    break L8;
   }
   $68 = $colorIndex;
   $69 = (($2) + 592|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($68<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($2) + 244|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($72) + ($74))|0;
   $76 = (($75) - 1)|0;
   $77 = (($2) + 244|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76>>>0) / ($78>>>0))&-1;
   $numBlocks = $79;
   $80 = $numBlocks;
   $81 = (($2) + 244|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = Math_imul($80, $82)|0;
   HEAP32[$global>>2] = $83;
   $84 = $colorIndex;
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = (__ZN10b2CLDevice8instanceEv()|0);
    $87 = (__ZNK10b2CLDevice15GetCommandQueueEv($86)|0);
    $88 = (($2) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($2) + 244|0);
    $91 = $iter;
    $92 = ($91|0)!=(0);
    $93 = $92 ? 1 : 0;
    $94 = $iter;
    $95 = ($94|0)!=(0);
    if ($95) {
     $96 = $last;
     $97 = (($events) + ($96<<2)|0);
     $100 = $97;
    } else {
     $100 = 0;
    }
    $98 = $curr;
    $99 = (($events) + ($98<<2)|0);
    $101 = (_clEnqueueNDRangeKernel(($87|0),($89|0),1,(0|0),($global|0),($90|0),($93|0),($100|0),($99|0))|0);
    $err = $101;
    $102 = $iter;
    $103 = ($102|0)!=(0);
    if ($103) {
     $104 = $last;
     $105 = (($events) + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     (_clReleaseEvent(($106|0))|0);
    }
    $107 = $last;
    $curr = $107;
    $108 = $last;
    $109 = (1 - ($108))|0;
    $last = $109;
    $110 = $err;
    $111 = ($110|0)!=(0);
    if ($111) {
     label = 18;
     break L8;
    }
   } else {
    $112 = (__ZN10b2CLDevice8instanceEv()|0);
    $113 = (__ZNK10b2CLDevice15GetCommandQueueEv($112)|0);
    $114 = (($2) + 24|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($2) + 244|0);
    $117 = $last;
    $118 = (($events) + ($117<<2)|0);
    $119 = $curr;
    $120 = (($events) + ($119<<2)|0);
    $121 = (_clEnqueueNDRangeKernel(($113|0),($115|0),1,(0|0),($global|0),($116|0),1,($118|0),($120|0))|0);
    $err = $121;
    $122 = $last;
    $123 = (($events) + ($122<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    (_clReleaseEvent(($124|0))|0);
    $125 = $last;
    $curr = $125;
    $126 = $last;
    $127 = (1 - ($126))|0;
    $last = $127;
    $128 = $err;
    $129 = ($128|0)!=(0);
    if ($129) {
     label = 21;
     break L8;
    }
   }
   $130 = $colorIndex;
   $131 = (($130) + 1)|0;
   $colorIndex = $131;
  }
  $132 = $iter;
  $133 = (($132) + 1)|0;
  $iter = $133;
 }
 if ((label|0) == 10) {
  $67 = $err;
  HEAP32[$vararg_buffer1>>2] = $67;
  (_printf((17688|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 18) {
  (_printf((17552|0),($vararg_buffer4|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  (_printf((17552|0),($vararg_buffer6|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $134 = $last;
  $135 = (($events) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  (_clReleaseEvent(($136|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLSolveJointVelocityConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $jointType = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0;
 var $numBlocks = 0, $numContact = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $events = sp + 24|0;
 $length = sp + 80|0;
 $offset = sp + 84|0;
 $global = sp + 88|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $3 = (__ZN14b2CLCommonData8instanceEv()|0);
 $4 = (($3) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $iter = 0;
 L5: while(1) {
  $7 = $iter;
  $8 = $1;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 33;
   break;
  }
  $jointType = 1;
  while(1) {
   $10 = $jointType;
   $11 = ($10|0)<(11);
   if (!($11)) {
    break;
   }
   $12 = $jointType;
   $13 = (__ZN14b2CLCommonData8instanceEv()|0);
   $14 = (($13) + 100|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $numContact = $16;
   $17 = $numContact;
   $18 = ($17|0)==(0);
   if ($18) {
   } else {
    $19 = $jointType;
    $20 = (__ZN14b2CLCommonData8instanceEv()|0);
    $21 = (($20) + 1032|0);
    $22 = (($21) + ($19<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $maxcolor = $23;
    $a = 0;
    $24 = $jointType;
    $25 = (($2) + 28|0);
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $a;
    $29 = (($28) + 1)|0;
    $a = $29;
    $30 = (($2) + 392|0);
    $31 = (_clSetKernelArg(($27|0),($28|0),4,($30|0))|0);
    $err = $31;
    $32 = $jointType;
    $33 = (($2) + 28|0);
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $a;
    $37 = (($36) + 1)|0;
    $a = $37;
    $38 = (__ZN14b2CLCommonData8instanceEv()|0);
    $39 = (($38) + 1076|0);
    $40 = (_clSetKernelArg(($35|0),($36|0),4,($39|0))|0);
    $41 = $err;
    $42 = $41 | $40;
    $err = $42;
    $43 = $jointType;
    $44 = (($2) + 28|0);
    $45 = (($44) + ($43<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $a;
    $48 = (($47) + 1)|0;
    $a = $48;
    $49 = (($2) + 632|0);
    $50 = (_clSetKernelArg(($46|0),($47|0),4,($49|0))|0);
    $51 = $err;
    $52 = $51 | $50;
    $err = $52;
    $colorIndex = 0;
    while(1) {
     $53 = $colorIndex;
     $54 = $maxcolor;
     $55 = ($53|0)<($54|0);
     if (!($55)) {
      break;
     }
     $56 = $colorIndex;
     $57 = (($56) + 1)|0;
     $58 = $jointType;
     $59 = (__ZN14b2CLCommonData8instanceEv()|0);
     $60 = (($59) + 152|0);
     $61 = (($60) + (($58*80)|0)|0);
     $62 = (($61) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $colorIndex;
     $65 = $jointType;
     $66 = (__ZN14b2CLCommonData8instanceEv()|0);
     $67 = (($66) + 152|0);
     $68 = (($67) + (($65*80)|0)|0);
     $69 = (($68) + ($64<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($63) - ($70))|0;
     HEAP32[$length>>2] = $71;
     $72 = $colorIndex;
     $73 = $jointType;
     $74 = (__ZN14b2CLCommonData8instanceEv()|0);
     $75 = (($74) + 152|0);
     $76 = (($75) + (($73*80)|0)|0);
     $77 = (($76) + ($72<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     HEAP32[$offset>>2] = $78;
     $79 = $jointType;
     $80 = (($2) + 28|0);
     $81 = (($80) + ($79<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $a;
     $84 = (_clSetKernelArg(($82|0),($83|0),4,($offset|0))|0);
     $85 = $err;
     $86 = $85 | $84;
     $err = $86;
     $87 = $jointType;
     $88 = (($2) + 28|0);
     $89 = (($88) + ($87<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $a;
     $92 = (($91) + 1)|0;
     $93 = (_clSetKernelArg(($90|0),($92|0),4,($length|0))|0);
     $94 = $err;
     $95 = $94 | $93;
     $err = $95;
     $96 = $err;
     $97 = ($96|0)!=(0);
     if ($97) {
      label = 12;
      break L5;
     }
     $99 = HEAP32[$length>>2]|0;
     $100 = $jointType;
     $101 = (($2) + 248|0);
     $102 = (($101) + ($100<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($99) + ($103))|0;
     $105 = (($104) - 1)|0;
     $106 = $jointType;
     $107 = (($2) + 248|0);
     $108 = (($107) + ($106<<2)|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($105>>>0) / ($109>>>0))&-1;
     $numBlocks = $110;
     $111 = $numBlocks;
     $112 = $jointType;
     $113 = (($2) + 248|0);
     $114 = (($113) + ($112<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = Math_imul($111, $115)|0;
     HEAP32[$global>>2] = $116;
     $117 = $colorIndex;
     $118 = ($117|0)==(0);
     if ($118) {
      $119 = (__ZN10b2CLDevice8instanceEv()|0);
      $120 = (__ZNK10b2CLDevice15GetCommandQueueEv($119)|0);
      $121 = $jointType;
      $122 = (($2) + 28|0);
      $123 = (($122) + ($121<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $jointType;
      $126 = (($2) + 248|0);
      $127 = (($126) + ($125<<2)|0);
      $128 = $iter;
      $129 = ($128|0)!=(0);
      $130 = $129 ? 1 : 0;
      $131 = $iter;
      $132 = ($131|0)!=(0);
      if ($132) {
       $133 = $last;
       $134 = (($events) + ($133<<2)|0);
       $137 = $134;
      } else {
       $137 = 0;
      }
      $135 = $curr;
      $136 = (($events) + ($135<<2)|0);
      $138 = (_clEnqueueNDRangeKernel(($120|0),($124|0),1,(0|0),($global|0),($127|0),($130|0),($137|0),($136|0))|0);
      $err = $138;
      $139 = $noqueue;
      $140 = $139&1;
      $141 = $140&1;
      $142 = ($141|0)==(0);
      if ($142) {
       $143 = $last;
       $144 = (($events) + ($143<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       (_clReleaseEvent(($145|0))|0);
      }
      $146 = $last;
      $curr = $146;
      $147 = $last;
      $148 = (1 - ($147))|0;
      $last = $148;
      $149 = $err;
      $150 = ($149|0)!=(0);
      if ($150) {
       label = 20;
       break L5;
      }
      $151 = $noqueue;
      $152 = $151&1;
      if ($152) {
       $noqueue = 0;
      }
     } else {
      $153 = (__ZN10b2CLDevice8instanceEv()|0);
      $154 = (__ZNK10b2CLDevice15GetCommandQueueEv($153)|0);
      $155 = $jointType;
      $156 = (($2) + 28|0);
      $157 = (($156) + ($155<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $jointType;
      $160 = (($2) + 248|0);
      $161 = (($160) + ($159<<2)|0);
      $162 = $last;
      $163 = (($events) + ($162<<2)|0);
      $164 = $curr;
      $165 = (($events) + ($164<<2)|0);
      $166 = (_clEnqueueNDRangeKernel(($154|0),($158|0),1,(0|0),($global|0),($161|0),1,($163|0),($165|0))|0);
      $err = $166;
      $167 = $last;
      $168 = (($events) + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      (_clReleaseEvent(($169|0))|0);
      $170 = $last;
      $curr = $170;
      $171 = $last;
      $172 = (1 - ($171))|0;
      $last = $172;
      $173 = $err;
      $174 = ($173|0)!=(0);
      if ($174) {
       label = 25;
       break L5;
      }
     }
     $175 = $colorIndex;
     $176 = (($175) + 1)|0;
     $colorIndex = $176;
    }
   }
   $177 = $jointType;
   $178 = (($177) + 1)|0;
   $jointType = $178;
  }
  $179 = $iter;
  $180 = (($179) + 1)|0;
  $iter = $180;
 }
 if ((label|0) == 12) {
  $98 = $err;
  HEAP32[$vararg_buffer>>2] = $98;
  (_printf((17688|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 20) {
  (_printf((17552|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 25) {
  (_printf((17552|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $181 = $noqueue;
  $182 = $181&1;
  $183 = $182&1;
  $184 = ($183|0)==(0);
  if (!($184)) {
   STACKTOP = sp;return;
  }
  $185 = $last;
  $186 = (($events) + ($185<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  (_clReleaseEvent(($187|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver22b2CLIntegratePositionsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = (($1) + 176|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (($1) + 392|0);
 $10 = (_clSetKernelArg(($6|0),($7|0),4,($9|0))|0);
 $err = $10;
 $11 = (($1) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $a;
 $14 = (($13) + 1)|0;
 $a = $14;
 $15 = (($1) + 400|0);
 $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
 $17 = $err;
 $18 = $17 | $16;
 $err = $18;
 $19 = (($1) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $a;
 $22 = (($21) + 1)|0;
 $a = $22;
 $23 = (($1) + 632|0);
 $24 = (_clSetKernelArg(($20|0),($21|0),4,($23|0))|0);
 $25 = $err;
 $26 = $25 | $24;
 $err = $26;
 $27 = (($1) + 176|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $a;
 $30 = (($29) + 1)|0;
 $a = $30;
 $31 = (($1) + 596|0);
 $32 = (_clSetKernelArg(($28|0),($29|0),4,($31|0))|0);
 $33 = $err;
 $34 = $33 | $32;
 $err = $34;
 $35 = $err;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $err;
  HEAP32[$vararg_buffer>>2] = $37;
  (_printf((17816|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $38 = (($1) + 596|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($1) + 336|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + ($41))|0;
 $43 = (($42) - 1)|0;
 $44 = (($1) + 336|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43>>>0) / ($45>>>0))&-1;
 $numBlocks = $46;
 $47 = $numBlocks;
 $48 = (($1) + 336|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($47, $49)|0;
 HEAP32[$global>>2] = $50;
 $51 = (__ZN10b2CLDevice8instanceEv()|0);
 $52 = (__ZNK10b2CLDevice15GetCommandQueueEv($51)|0);
 $53 = (($1) + 176|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($1) + 336|0);
 $56 = (_clEnqueueNDRangeKernel(($52|0),($54|0),1,(0|0),($global|0),($55|0),0,(0|0),(0|0))|0);
 $err = $56;
 $57 = $err;
 $58 = ($57|0)!=(0);
 if ($58) {
  (_printf((17872|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver27b2CLSolvePositionConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0, $err = 0, $events = 0, $global = 0, $iter = 0, $last = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $events = sp + 32|0;
 $global = sp + 72|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $3 = (($2) + 600|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $curr = 0;
 $last = 1;
 $a = 0;
 $6 = (($2) + 180|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $a;
 $9 = (($8) + 1)|0;
 $a = $9;
 $10 = (($2) + 400|0);
 $11 = (_clSetKernelArg(($7|0),($8|0),4,($10|0))|0);
 $err = $11;
 $12 = (($2) + 180|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = (($2) + 500|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = (($2) + 180|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = (($2) + 488|0);
 $25 = (_clSetKernelArg(($21|0),($22|0),4,($24|0))|0);
 $26 = $err;
 $27 = $26 | $25;
 $err = $27;
 $28 = $err;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $err;
  HEAP32[$vararg_buffer>>2] = $30;
  (_printf((17920|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $iter = 0;
 L8: while(1) {
  $31 = $iter;
  $32 = $1;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   label = 27;
   break;
  }
  $colorIndex = 0;
  while(1) {
   $34 = $colorIndex;
   $35 = (($2) + 576|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = (($2) + 180|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $a;
   $41 = $colorIndex;
   $42 = (($2) + 588|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41<<2)|0);
   $45 = (_clSetKernelArg(($39|0),($40|0),4,($44|0))|0);
   $err = $45;
   $46 = (($2) + 180|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $a;
   $49 = (($48) + 1)|0;
   $50 = $colorIndex;
   $51 = (($2) + 592|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($50<<2)|0);
   $54 = (_clSetKernelArg(($47|0),($49|0),4,($53|0))|0);
   $55 = $err;
   $56 = $55 | $54;
   $err = $56;
   $57 = $err;
   $58 = ($57|0)!=(0);
   if ($58) {
    label = 10;
    break L8;
   }
   $60 = $colorIndex;
   $61 = (($2) + 592|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($60<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($2) + 340|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + ($66))|0;
   $68 = (($67) - 1)|0;
   $69 = (($2) + 340|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68>>>0) / ($70>>>0))&-1;
   $numBlocks = $71;
   $72 = $numBlocks;
   $73 = (($2) + 340|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = Math_imul($72, $74)|0;
   HEAP32[$global>>2] = $75;
   $76 = $colorIndex;
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = (__ZN10b2CLDevice8instanceEv()|0);
    $79 = (__ZNK10b2CLDevice15GetCommandQueueEv($78)|0);
    $80 = (($2) + 180|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($2) + 340|0);
    $83 = $iter;
    $84 = ($83|0)!=(0);
    $85 = $84 ? 1 : 0;
    $86 = $iter;
    $87 = ($86|0)!=(0);
    if ($87) {
     $88 = $last;
     $89 = (($events) + ($88<<2)|0);
     $92 = $89;
    } else {
     $92 = 0;
    }
    $90 = $curr;
    $91 = (($events) + ($90<<2)|0);
    $93 = (_clEnqueueNDRangeKernel(($79|0),($81|0),1,(0|0),($global|0),($82|0),($85|0),($92|0),($91|0))|0);
    $err = $93;
    $94 = $iter;
    $95 = ($94|0)!=(0);
    if ($95) {
     $96 = $last;
     $97 = (($events) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     (_clReleaseEvent(($98|0))|0);
    }
    $99 = $last;
    $curr = $99;
    $100 = $last;
    $101 = (1 - ($100))|0;
    $last = $101;
    $102 = $err;
    $103 = ($102|0)!=(0);
    if ($103) {
     label = 18;
     break L8;
    }
   } else {
    $104 = (__ZN10b2CLDevice8instanceEv()|0);
    $105 = (__ZNK10b2CLDevice15GetCommandQueueEv($104)|0);
    $106 = (($2) + 180|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($2) + 340|0);
    $109 = $last;
    $110 = (($events) + ($109<<2)|0);
    $111 = $curr;
    $112 = (($events) + ($111<<2)|0);
    $113 = (_clEnqueueNDRangeKernel(($105|0),($107|0),1,(0|0),($global|0),($108|0),1,($110|0),($112|0))|0);
    $err = $113;
    $114 = $last;
    $115 = (($events) + ($114<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    (_clReleaseEvent(($116|0))|0);
    $117 = $last;
    $curr = $117;
    $118 = $last;
    $119 = (1 - ($118))|0;
    $last = $119;
    $120 = $err;
    $121 = ($120|0)!=(0);
    if ($121) {
     label = 21;
     break L8;
    }
   }
   $122 = $colorIndex;
   $123 = (($122) + 1)|0;
   $colorIndex = $123;
  }
  $124 = $iter;
  $125 = (($124) + 1)|0;
  $iter = $125;
 }
 if ((label|0) == 10) {
  $59 = $err;
  HEAP32[$vararg_buffer1>>2] = $59;
  (_printf((17688|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 18) {
  (_printf((17984|0),($vararg_buffer4|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  (_printf((17984|0),($vararg_buffer6|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $126 = $last;
  $127 = (($events) + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  (_clReleaseEvent(($128|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver32b2CLSolveJointPositionConstraintEi($this,$numberOfIterations) {
 $this = $this|0;
 $numberOfIterations = $numberOfIterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $colorIndex = 0, $curr = 0;
 var $err = 0, $events = 0, $global = 0, $iter = 0, $jointType = 0, $last = 0, $length = 0, $maxcolor = 0, $noqueue = 0, $numBlocks = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $events = sp + 48|0;
 $length = sp + 76|0;
 $offset = sp + 24|0;
 $global = sp + 84|0;
 $0 = $this;
 $1 = $numberOfIterations;
 $2 = $0;
 $curr = 0;
 $last = 1;
 $a = 0;
 $noqueue = 1;
 $3 = (__ZN14b2CLCommonData8instanceEv()|0);
 $4 = (($3) + 144|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $iter = 0;
 L5: while(1) {
  $7 = $iter;
  $8 = $1;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   label = 33;
   break;
  }
  $jointType = 1;
  while(1) {
   $10 = $jointType;
   $11 = ($10|0)<(11);
   if (!($11)) {
    break;
   }
   $12 = $jointType;
   $13 = (__ZN14b2CLCommonData8instanceEv()|0);
   $14 = (($13) + 100|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
   } else {
    $18 = $jointType;
    $19 = (__ZN14b2CLCommonData8instanceEv()|0);
    $20 = (($19) + 1032|0);
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $maxcolor = $22;
    $a = 0;
    $23 = $jointType;
    $24 = (($2) + 192|0);
    $25 = (($24) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $a;
    $28 = (($27) + 1)|0;
    $a = $28;
    $29 = (($2) + 400|0);
    $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
    $err = $30;
    $31 = $jointType;
    $32 = (($2) + 192|0);
    $33 = (($32) + ($31<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $a;
    $36 = (($35) + 1)|0;
    $a = $36;
    $37 = (__ZN14b2CLCommonData8instanceEv()|0);
    $38 = (($37) + 1076|0);
    $39 = (_clSetKernelArg(($34|0),($35|0),4,($38|0))|0);
    $40 = $err;
    $41 = $40 | $39;
    $err = $41;
    $colorIndex = 0;
    while(1) {
     $42 = $colorIndex;
     $43 = $maxcolor;
     $44 = ($42|0)<($43|0);
     if (!($44)) {
      break;
     }
     $45 = $colorIndex;
     $46 = (($45) + 1)|0;
     $47 = $jointType;
     $48 = (__ZN14b2CLCommonData8instanceEv()|0);
     $49 = (($48) + 152|0);
     $50 = (($49) + (($47*80)|0)|0);
     $51 = (($50) + ($46<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $colorIndex;
     $54 = $jointType;
     $55 = (__ZN14b2CLCommonData8instanceEv()|0);
     $56 = (($55) + 152|0);
     $57 = (($56) + (($54*80)|0)|0);
     $58 = (($57) + ($53<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($52) - ($59))|0;
     HEAP32[$length>>2] = $60;
     $61 = $colorIndex;
     $62 = $jointType;
     $63 = (__ZN14b2CLCommonData8instanceEv()|0);
     $64 = (($63) + 152|0);
     $65 = (($64) + (($62*80)|0)|0);
     $66 = (($65) + ($61<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     HEAP32[$offset>>2] = $67;
     $68 = $jointType;
     $69 = (($2) + 192|0);
     $70 = (($69) + ($68<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $a;
     $73 = (_clSetKernelArg(($71|0),($72|0),4,($offset|0))|0);
     $74 = $err;
     $75 = $74 | $73;
     $err = $75;
     $76 = $jointType;
     $77 = (($2) + 192|0);
     $78 = (($77) + ($76<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $a;
     $81 = (($80) + 1)|0;
     $82 = (_clSetKernelArg(($79|0),($81|0),4,($length|0))|0);
     $83 = $err;
     $84 = $83 | $82;
     $err = $84;
     $85 = $err;
     $86 = ($85|0)!=(0);
     if ($86) {
      label = 12;
      break L5;
     }
     $88 = HEAP32[$length>>2]|0;
     $89 = $jointType;
     $90 = (($2) + 344|0);
     $91 = (($90) + ($89<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($88) + ($92))|0;
     $94 = (($93) - 1)|0;
     $95 = $jointType;
     $96 = (($2) + 344|0);
     $97 = (($96) + ($95<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($94>>>0) / ($98>>>0))&-1;
     $numBlocks = $99;
     $100 = $numBlocks;
     $101 = $jointType;
     $102 = (($2) + 344|0);
     $103 = (($102) + ($101<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = Math_imul($100, $104)|0;
     HEAP32[$global>>2] = $105;
     $106 = $colorIndex;
     $107 = ($106|0)==(0);
     if ($107) {
      $108 = (__ZN10b2CLDevice8instanceEv()|0);
      $109 = (__ZNK10b2CLDevice15GetCommandQueueEv($108)|0);
      $110 = $jointType;
      $111 = (($2) + 192|0);
      $112 = (($111) + ($110<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $jointType;
      $115 = (($2) + 344|0);
      $116 = (($115) + ($114<<2)|0);
      $117 = $iter;
      $118 = ($117|0)!=(0);
      $119 = $118 ? 1 : 0;
      $120 = $iter;
      $121 = ($120|0)!=(0);
      if ($121) {
       $122 = $last;
       $123 = (($events) + ($122<<2)|0);
       $126 = $123;
      } else {
       $126 = 0;
      }
      $124 = $curr;
      $125 = (($events) + ($124<<2)|0);
      $127 = (_clEnqueueNDRangeKernel(($109|0),($113|0),1,(0|0),($global|0),($116|0),($119|0),($126|0),($125|0))|0);
      $err = $127;
      $128 = $noqueue;
      $129 = $128&1;
      $130 = $129&1;
      $131 = ($130|0)==(0);
      if ($131) {
       $132 = $last;
       $133 = (($events) + ($132<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       (_clReleaseEvent(($134|0))|0);
      }
      $135 = $last;
      $curr = $135;
      $136 = $last;
      $137 = (1 - ($136))|0;
      $last = $137;
      $138 = $err;
      $139 = ($138|0)!=(0);
      if ($139) {
       label = 20;
       break L5;
      }
      $140 = $noqueue;
      $141 = $140&1;
      if ($141) {
       $noqueue = 0;
      }
     } else {
      $142 = (__ZN10b2CLDevice8instanceEv()|0);
      $143 = (__ZNK10b2CLDevice15GetCommandQueueEv($142)|0);
      $144 = $jointType;
      $145 = (($2) + 192|0);
      $146 = (($145) + ($144<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = $jointType;
      $149 = (($2) + 344|0);
      $150 = (($149) + ($148<<2)|0);
      $151 = $last;
      $152 = (($events) + ($151<<2)|0);
      $153 = $curr;
      $154 = (($events) + ($153<<2)|0);
      $155 = (_clEnqueueNDRangeKernel(($143|0),($147|0),1,(0|0),($global|0),($150|0),1,($152|0),($154|0))|0);
      $err = $155;
      $156 = $last;
      $157 = (($events) + ($156<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      (_clReleaseEvent(($158|0))|0);
      $159 = $last;
      $curr = $159;
      $160 = $last;
      $161 = (1 - ($160))|0;
      $last = $161;
      $162 = $err;
      $163 = ($162|0)!=(0);
      if ($163) {
       label = 25;
       break L5;
      }
     }
     $164 = $colorIndex;
     $165 = (($164) + 1)|0;
     $colorIndex = $165;
    }
   }
   $166 = $jointType;
   $167 = (($166) + 1)|0;
   $jointType = $167;
  }
  $168 = $iter;
  $169 = (($168) + 1)|0;
  $iter = $169;
 }
 if ((label|0) == 12) {
  $87 = $err;
  HEAP32[$vararg_buffer>>2] = $87;
  (_printf((18048|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 20) {
  (_printf((17552|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 25) {
  (_printf((17552|0),($vararg_buffer3|0))|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $170 = $noqueue;
  $171 = $170&1;
  $172 = $171&1;
  $173 = ($172|0)==(0);
  if (!($173)) {
   STACKTOP = sp;return;
  }
  $174 = $last;
  $175 = (($events) + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  (_clReleaseEvent(($176|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver17b2CLSynchronizeXfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $global = sp + 20|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 596|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $a = 0;
 $5 = (($1) + 160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $a;
 $8 = (($7) + 1)|0;
 $a = $8;
 $9 = (__ZN14b2CLCommonData8instanceEv()|0);
 $10 = (($9) + 64|0);
 $11 = (_clSetKernelArg(($6|0),($7|0),4,($10|0))|0);
 $err = $11;
 $12 = (($1) + 160|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $a;
 $15 = (($14) + 1)|0;
 $a = $15;
 $16 = (($1) + 400|0);
 $17 = (_clSetKernelArg(($13|0),($14|0),4,($16|0))|0);
 $18 = $err;
 $19 = $18 | $17;
 $err = $19;
 $20 = (($1) + 160|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $a;
 $23 = (($22) + 1)|0;
 $a = $23;
 $24 = (__ZN14b2CLCommonData8instanceEv()|0);
 $25 = (($24) + 72|0);
 $26 = (_clSetKernelArg(($21|0),($22|0),4,($25|0))|0);
 $27 = $err;
 $28 = $27 | $26;
 $err = $28;
 $29 = (($1) + 160|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $a;
 $32 = (($31) + 1)|0;
 $a = $32;
 $33 = (__ZN14b2CLCommonData8instanceEv()|0);
 $34 = (($33) + 76|0);
 $35 = (_clSetKernelArg(($30|0),($31|0),4,($34|0))|0);
 $36 = $err;
 $37 = $36 | $35;
 $err = $37;
 $38 = (($1) + 160|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $a;
 $41 = (($40) + 1)|0;
 $a = $41;
 $42 = (($1) + 596|0);
 $43 = (_clSetKernelArg(($39|0),($40|0),4,($42|0))|0);
 $44 = $err;
 $45 = $44 | $43;
 $err = $45;
 $46 = $err;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $err;
  HEAP32[$vararg_buffer>>2] = $48;
  (_printf((18120|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $49 = (($1) + 596|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($1) + 320|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + ($52))|0;
 $54 = (($53) - 1)|0;
 $55 = (($1) + 320|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54>>>0) / ($56>>>0))&-1;
 $numBlocks = $57;
 $58 = $numBlocks;
 $59 = (($1) + 320|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($58, $60)|0;
 HEAP32[$global>>2] = $61;
 $62 = (__ZN10b2CLDevice8instanceEv()|0);
 $63 = (__ZNK10b2CLDevice15GetCommandQueueEv($62)|0);
 $64 = (($1) + 160|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($1) + 320|0);
 $67 = (_clEnqueueNDRangeKernel(($63|0),($65|0),1,(0|0),($global|0),($66|0),0,(0|0),(0|0))|0);
 $err = $67;
 $68 = $err;
 $69 = ($68|0)!=(0);
 if ($69) {
  (_printf((18176|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver16SortManifoldKeysEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = (__ZN8b2CLSort8instanceEv()|0);
  $6 = (($1) + 508|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) + 512|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($1) + 600|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($5,$7,$9,$11,0,1);
  $12 = (($1) + 600|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) + 524|0);
  HEAP32[$14>>2] = $13;
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver17b2CLStoreImpulsesEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zeroBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $global = sp + 32|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 __ZN10b2CLSolver32CreateBuffersForSortingManifoldsEv($1);
 $5 = (($1) + 516|0);
 $6 = HEAP32[$5>>2]|0;
 $$arith = $6<<2;
 $$overflow = ($6>>>0)>(1073741823);
 $7 = $$overflow ? -1 : $$arith;
 $8 = (__Znaj($7)|0);
 $zeroBuffer = $8;
 $9 = $zeroBuffer;
 $10 = (($1) + 516|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 _memset(($9|0),0,($12|0))|0;
 $13 = (__ZN10b2CLDevice8instanceEv()|0);
 $14 = (($1) + 508|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $zeroBuffer;
 $17 = (($1) + 516|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($13,$15,$16,0,$19,1);
 $20 = $zeroBuffer;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  __ZdaPv($20);
 }
 $a = 0;
 $22 = (($1) + 172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $a;
 $25 = (($24) + 1)|0;
 $a = $25;
 $26 = (__ZN14b2CLCommonData8instanceEv()|0);
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (__ZN14b2CLCommonData8instanceEv()|0);
 $30 = (($29) + 36|0);
 $31 = (($30) + ($28<<2)|0);
 $32 = (_clSetKernelArg(($23|0),($24|0),4,($31|0))|0);
 $err = $32;
 $33 = (($1) + 172|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $a;
 $36 = (($35) + 1)|0;
 $a = $36;
 $37 = (($1) + 508|0);
 $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
 $39 = $err;
 $40 = $39 | $38;
 $err = $40;
 $41 = (($1) + 172|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $a;
 $44 = (($43) + 1)|0;
 $a = $44;
 $45 = (($1) + 512|0);
 $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
 $47 = $err;
 $48 = $47 | $46;
 $err = $48;
 $49 = (($1) + 172|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $a;
 $52 = (($51) + 1)|0;
 $a = $52;
 $53 = (($1) + 504|0);
 $54 = (_clSetKernelArg(($50|0),($51|0),4,($53|0))|0);
 $55 = $err;
 $56 = $55 | $54;
 $err = $56;
 $57 = (($1) + 172|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $a;
 $60 = (($59) + 1)|0;
 $a = $60;
 $61 = (($1) + 492|0);
 $62 = (_clSetKernelArg(($58|0),($59|0),4,($61|0))|0);
 $63 = $err;
 $64 = $63 | $62;
 $err = $64;
 $65 = (($1) + 172|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $a;
 $68 = (($67) + 1)|0;
 $a = $68;
 $69 = (__ZN14b2CLCommonData8instanceEv()|0);
 $70 = (($69) + 80|0);
 $71 = (_clSetKernelArg(($66|0),($67|0),4,($70|0))|0);
 $72 = $err;
 $73 = $72 | $71;
 $err = $73;
 $74 = (($1) + 172|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $a;
 $77 = (($76) + 1)|0;
 $a = $77;
 $78 = (($1) + 600|0);
 $79 = (_clSetKernelArg(($75|0),($76|0),4,($78|0))|0);
 $80 = $err;
 $81 = $80 | $79;
 $err = $81;
 $82 = $err;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $err;
  HEAP32[$vararg_buffer>>2] = $84;
  (_printf((17472|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $85 = (($1) + 600|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($1) + 332|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + ($88))|0;
 $90 = (($89) - 1)|0;
 $91 = (($1) + 332|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90>>>0) / ($92>>>0))&-1;
 $numBlocks = $93;
 $94 = $numBlocks;
 $95 = (($1) + 332|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = Math_imul($94, $96)|0;
 HEAP32[$global>>2] = $97;
 $98 = (__ZN10b2CLDevice8instanceEv()|0);
 $99 = (__ZNK10b2CLDevice15GetCommandQueueEv($98)|0);
 $100 = (($1) + 172|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($1) + 332|0);
 $103 = (_clEnqueueNDRangeKernel(($99|0),($101|0),1,(0|0),($global|0),($102|0),0,(0|0),(0|0))|0);
 $err = $103;
 $104 = $err;
 $105 = ($104|0)!=(0);
 if ($105) {
  (_printf((18232|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10b2CLSolver20b2CLReadLastImpulsesEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $global = sp + 32|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = (($4) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if (!($7)) {
  $8 = (($4) + 524|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)<=(0);
  if (!($10)) {
   $a = 0;
   $11 = (($4) + 164|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $a;
   $14 = (($13) + 1)|0;
   $a = $14;
   $15 = (($4) + 492|0);
   $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
   $err = $16;
   $17 = (($4) + 164|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $a;
   $20 = (($19) + 1)|0;
   $a = $20;
   $21 = (($4) + 508|0);
   $22 = (_clSetKernelArg(($18|0),($19|0),4,($21|0))|0);
   $23 = $err;
   $24 = $23 | $22;
   $err = $24;
   $25 = (($4) + 164|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $a;
   $28 = (($27) + 1)|0;
   $a = $28;
   $29 = (($4) + 512|0);
   $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
   $31 = $err;
   $32 = $31 | $30;
   $err = $32;
   $33 = (($4) + 164|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $a;
   $36 = (($35) + 1)|0;
   $a = $36;
   $37 = (($4) + 524|0);
   $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
   $39 = $err;
   $40 = $39 | $38;
   $err = $40;
   $41 = (($4) + 164|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $a;
   $44 = (($43) + 1)|0;
   $a = $44;
   $45 = (($4) + 600|0);
   $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
   $47 = $err;
   $48 = $47 | $46;
   $err = $48;
   $49 = (($4) + 164|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $a;
   $52 = (($51) + 1)|0;
   $a = $52;
   $53 = (__ZN14b2CLCommonData8instanceEv()|0);
   $54 = (($53) + 80|0);
   $55 = (_clSetKernelArg(($50|0),($51|0),4,($54|0))|0);
   $56 = $err;
   $57 = $56 | $55;
   $err = $57;
   $58 = (($4) + 164|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $a;
   $61 = (($60) + 1)|0;
   $a = $61;
   $62 = (($4) + 504|0);
   $63 = (_clSetKernelArg(($59|0),($60|0),4,($62|0))|0);
   $64 = $err;
   $65 = $64 | $63;
   $err = $65;
   $66 = (($4) + 164|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $a;
   $69 = (($68) + 1)|0;
   $a = $69;
   $70 = (__ZN14b2CLCommonData8instanceEv()|0);
   $71 = (($70) + 44|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (__ZN14b2CLCommonData8instanceEv()|0);
   $74 = (($73) + 36|0);
   $75 = (($74) + ($72<<2)|0);
   $76 = (_clSetKernelArg(($67|0),($68|0),4,($75|0))|0);
   $77 = $err;
   $78 = $77 | $76;
   $err = $78;
   $79 = (($4) + 164|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $a;
   $82 = (($81) + 1)|0;
   $a = $82;
   $83 = (__ZN14b2CLCommonData8instanceEv()|0);
   $84 = (($83) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (1 - ($85))|0;
   $87 = (__ZN14b2CLCommonData8instanceEv()|0);
   $88 = (($87) + 36|0);
   $89 = (($88) + ($86<<2)|0);
   $90 = (_clSetKernelArg(($80|0),($81|0),4,($89|0))|0);
   $91 = $err;
   $92 = $91 | $90;
   $err = $92;
   $93 = (($4) + 164|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $a;
   $96 = (($95) + 1)|0;
   $a = $96;
   $97 = (_clSetKernelArg(($94|0),($95|0),4,($1|0))|0);
   $98 = $err;
   $99 = $98 | $97;
   $err = $99;
   $100 = (($4) + 164|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $a;
   $103 = (($102) + 1)|0;
   $a = $103;
   $104 = (_clSetKernelArg(($101|0),($102|0),4,($2|0))|0);
   $105 = $err;
   $106 = $105 | $104;
   $err = $106;
   $107 = $err;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $err;
    HEAP32[$vararg_buffer>>2] = $109;
    (_printf((17472|0),($vararg_buffer|0))|0);
    _exit(1);
    // unreachable;
   }
   $110 = (($4) + 600|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($4) + 324|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + ($113))|0;
   $115 = (($114) - 1)|0;
   $116 = (($4) + 324|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($115>>>0) / ($117>>>0))&-1;
   $numBlocks = $118;
   $119 = $numBlocks;
   $120 = (($4) + 324|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = Math_imul($119, $121)|0;
   HEAP32[$global>>2] = $122;
   $123 = (__ZN10b2CLDevice8instanceEv()|0);
   $124 = (__ZNK10b2CLDevice15GetCommandQueueEv($123)|0);
   $125 = (($4) + 164|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($4) + 324|0);
   $128 = (_clEnqueueNDRangeKernel(($124|0),($126|0),1,(0|0),($global|0),($127|0),0,(0|0),(0|0))|0);
   $err = $128;
   $129 = $err;
   $130 = ($129|0)!=(0);
   if ($130) {
    (_printf((18232|0),($vararg_buffer1|0))|0);
    _exit(1);
    // unreachable;
   }
   $131 = (__ZN10b2CLDevice8instanceEv()|0);
   $132 = (__ZNK10b2CLDevice15GetCommandQueueEv($131)|0);
   (_clFinish(($132|0))|0);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver30b2CLReadLastImpulsesFirstFrameEbf($this,$bWarmStarting,$dtRatio) {
 $this = $this|0;
 $bWarmStarting = $bWarmStarting|0;
 $dtRatio = +$dtRatio;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $err = 0, $global = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 36|0;
 $2 = sp + 24|0;
 $global = sp + 32|0;
 $0 = $this;
 $3 = $bWarmStarting&1;
 HEAP8[$1>>0] = $3;
 HEAPF32[$2>>2] = $dtRatio;
 $4 = $0;
 $5 = (($4) + 600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if (!($7)) {
  $8 = (($4) + 524|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)<=(0);
  if (!($10)) {
   $a = 0;
   $11 = (($4) + 168|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $a;
   $14 = (($13) + 1)|0;
   $a = $14;
   $15 = (($4) + 492|0);
   $16 = (_clSetKernelArg(($12|0),($13|0),4,($15|0))|0);
   $err = $16;
   $17 = (($4) + 168|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $a;
   $20 = (($19) + 1)|0;
   $a = $20;
   $21 = (($4) + 508|0);
   $22 = (_clSetKernelArg(($18|0),($19|0),4,($21|0))|0);
   $23 = $err;
   $24 = $23 | $22;
   $err = $24;
   $25 = (($4) + 168|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $a;
   $28 = (($27) + 1)|0;
   $a = $28;
   $29 = (($4) + 512|0);
   $30 = (_clSetKernelArg(($26|0),($27|0),4,($29|0))|0);
   $31 = $err;
   $32 = $31 | $30;
   $err = $32;
   $33 = (($4) + 168|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $a;
   $36 = (($35) + 1)|0;
   $a = $36;
   $37 = (($4) + 524|0);
   $38 = (_clSetKernelArg(($34|0),($35|0),4,($37|0))|0);
   $39 = $err;
   $40 = $39 | $38;
   $err = $40;
   $41 = (($4) + 168|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $a;
   $44 = (($43) + 1)|0;
   $a = $44;
   $45 = (($4) + 600|0);
   $46 = (_clSetKernelArg(($42|0),($43|0),4,($45|0))|0);
   $47 = $err;
   $48 = $47 | $46;
   $err = $48;
   $49 = (($4) + 168|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $a;
   $52 = (($51) + 1)|0;
   $a = $52;
   $53 = (__ZN14b2CLCommonData8instanceEv()|0);
   $54 = (($53) + 80|0);
   $55 = (_clSetKernelArg(($50|0),($51|0),4,($54|0))|0);
   $56 = $err;
   $57 = $56 | $55;
   $err = $57;
   $58 = (($4) + 168|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $a;
   $61 = (($60) + 1)|0;
   $a = $61;
   $62 = (__ZN14b2CLCommonData8instanceEv()|0);
   $63 = (($62) + 68|0);
   $64 = (_clSetKernelArg(($59|0),($60|0),4,($63|0))|0);
   $65 = $err;
   $66 = $65 | $64;
   $err = $66;
   $67 = (($4) + 168|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $a;
   $70 = (($69) + 1)|0;
   $a = $70;
   $71 = (($4) + 504|0);
   $72 = (_clSetKernelArg(($68|0),($69|0),4,($71|0))|0);
   $73 = $err;
   $74 = $73 | $72;
   $err = $74;
   $75 = (($4) + 168|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $a;
   $78 = (($77) + 1)|0;
   $a = $78;
   $79 = (__ZN14b2CLCommonData8instanceEv()|0);
   $80 = (($79) + 44|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (__ZN14b2CLCommonData8instanceEv()|0);
   $83 = (($82) + 36|0);
   $84 = (($83) + ($81<<2)|0);
   $85 = (_clSetKernelArg(($76|0),($77|0),4,($84|0))|0);
   $86 = $err;
   $87 = $86 | $85;
   $err = $87;
   $88 = (($4) + 168|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $a;
   $91 = (($90) + 1)|0;
   $a = $91;
   $92 = (__ZN14b2CLCommonData8instanceEv()|0);
   $93 = (($92) + 44|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (1 - ($94))|0;
   $96 = (__ZN14b2CLCommonData8instanceEv()|0);
   $97 = (($96) + 36|0);
   $98 = (($97) + ($95<<2)|0);
   $99 = (_clSetKernelArg(($89|0),($90|0),4,($98|0))|0);
   $100 = $err;
   $101 = $100 | $99;
   $err = $101;
   $102 = (($4) + 168|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $a;
   $105 = (($104) + 1)|0;
   $a = $105;
   $106 = (_clSetKernelArg(($103|0),($104|0),4,($1|0))|0);
   $107 = $err;
   $108 = $107 | $106;
   $err = $108;
   $109 = (($4) + 168|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $a;
   $112 = (($111) + 1)|0;
   $a = $112;
   $113 = (_clSetKernelArg(($110|0),($111|0),4,($2|0))|0);
   $114 = $err;
   $115 = $114 | $113;
   $err = $115;
   $116 = $err;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $err;
    HEAP32[$vararg_buffer>>2] = $118;
    (_printf((17472|0),($vararg_buffer|0))|0);
    _exit(1);
    // unreachable;
   }
   $119 = (($4) + 600|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($4) + 328|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + ($122))|0;
   $124 = (($123) - 1)|0;
   $125 = (($4) + 328|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124>>>0) / ($126>>>0))&-1;
   $numBlocks = $127;
   $128 = $numBlocks;
   $129 = (($4) + 328|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = Math_imul($128, $130)|0;
   HEAP32[$global>>2] = $131;
   $132 = (__ZN10b2CLDevice8instanceEv()|0);
   $133 = (__ZNK10b2CLDevice15GetCommandQueueEv($132)|0);
   $134 = (($4) + 168|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($4) + 328|0);
   $137 = (_clEnqueueNDRangeKernel(($133|0),($135|0),1,(0|0),($global|0),($136|0),0,(0|0),(0|0))|0);
   $err = $137;
   $138 = $err;
   $139 = ($138|0)!=(0);
   if ($139) {
    (_printf((18232|0),($vararg_buffer1|0))|0);
    _exit(1);
    // unreachable;
   }
   $140 = (__ZN10b2CLDevice8instanceEv()|0);
   $141 = (__ZNK10b2CLDevice15GetCommandQueueEv($140)|0);
   (_clFinish(($141|0))|0);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10b2CLSolver6ReportEP16b2ContactManager($this,$m_pContactManager) {
 $this = $this|0;
 $m_pContactManager = $m_pContactManager|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bFoundSameContact = 0, $bodyA = 0, $bodyB = 0, $contactCount = 0, $edge = 0, $fA = 0, $fB = 0, $fixtureA = 0, $fixtureB = 0, $fixtureIndexA = 0, $fixtureIndexB = 0, $globalIndex = 0;
 var $globalIndices = 0, $i = 0, $iA = 0, $iB = 0, $impulse = 0, $indexA = 0, $indexB = 0, $j = 0, $k = 0, $manifoldListData = 0, $num = 0, $pc = 0, $validContactIndices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $impulse = sp + 92|0;
 $0 = $this;
 $1 = $m_pContactManager;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (($7) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $contactCount = $9;
 $10 = (($2) + 600|0);
 $11 = HEAP32[$10>>2]|0;
 $contactCount = $11;
 $12 = $contactCount;
 $13 = ($12|0)<=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (__ZN14b2CLCommonData8instanceEv()|0);
 $15 = (($14) + 1156|0);
 $16 = HEAP32[$15>>2]|0;
 $manifoldListData = $16;
 $17 = (__ZN10b2CLDevice8instanceEv()|0);
 $18 = $manifoldListData;
 $19 = (__ZN14b2CLCommonData8instanceEv()|0);
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__ZN14b2CLCommonData8instanceEv()|0);
 $23 = (($22) + 36|0);
 $24 = (($23) + ($21<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $contactCount;
 $27 = ($26*72)|0;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjj($17,$18,$25,0,$27);
 $28 = (__ZN14b2CLCommonData8instanceEv()|0);
 $29 = (($28) + 1172|0);
 $30 = HEAP32[$29>>2]|0;
 $globalIndices = $30;
 $31 = (__ZN10b2CLDevice8instanceEv()|0);
 $32 = $globalIndices;
 $33 = (__ZN14b2CLCommonData8instanceEv()|0);
 $34 = (($33) + 80|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($2) + 604|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37<<2;
 $39 = $38<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($31,$32,$35,0,$39,1);
 $40 = $contactCount;
 $$arith = $40<<2;
 $$overflow = ($40>>>0)>(1073741823);
 $41 = $$overflow ? -1 : $$arith;
 $42 = (__Znaj($41)|0);
 $validContactIndices = $42;
 $43 = (__ZN10b2CLDevice8instanceEv()|0);
 $44 = $validContactIndices;
 $45 = (__ZN14b2CLCommonData8instanceEv()|0);
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $contactCount;
 $49 = $48<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($43,$44,$47,0,$49,1);
 $50 = $1;
 $51 = (($50) + 100|0);
 $52 = HEAP32[$51>>2]|0;
 $pc = $52;
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = $contactCount;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = $validContactIndices;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $globalIndex = $59;
  $60 = $globalIndex;
  $61 = $manifoldListData;
  $62 = (($61) + (($60*72)|0)|0);
  $63 = (($62) + 68|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0);
  if ($65) {
  } else {
   $66 = $globalIndex;
   $67 = $66<<2;
   $68 = $globalIndices;
   $69 = (($68) + ($67<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $fixtureIndexA = $70;
   $71 = $globalIndex;
   $72 = $71<<2;
   $73 = (($72) + 1)|0;
   $74 = $globalIndices;
   $75 = (($74) + ($73<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $fixtureIndexB = $76;
   $77 = $fixtureIndexA;
   $78 = (__ZN14b2CLCommonData8instanceEv()|0);
   $79 = (($78) + 1160|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($77<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $fixtureA = $82;
   $83 = $fixtureIndexB;
   $84 = (__ZN14b2CLCommonData8instanceEv()|0);
   $85 = (($84) + 1160|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($83<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $fixtureB = $88;
   $89 = $fixtureIndexA;
   $90 = (__ZN14b2CLCommonData8instanceEv()|0);
   $91 = (($90) + 1164|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + ($89<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $indexA = $94;
   $95 = $fixtureIndexB;
   $96 = (__ZN14b2CLCommonData8instanceEv()|0);
   $97 = (($96) + 1164|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $indexB = $100;
   $101 = $fixtureA;
   $102 = (__ZN9b2Fixture7GetBodyEv($101)|0);
   $bodyA = $102;
   $103 = $fixtureB;
   $104 = (__ZN9b2Fixture7GetBodyEv($103)|0);
   $bodyB = $104;
   $105 = $bodyA;
   $106 = $bodyB;
   $107 = ($105|0)==($106|0);
   if ($107) {
    label = 10;
    break;
   }
   $108 = $bodyB;
   $109 = (__ZN6b2Body14GetContactListEv($108)|0);
   $edge = $109;
   $bFoundSameContact = 0;
   while(1) {
    $110 = $edge;
    $111 = ($110|0)!=(0|0);
    if (!($111)) {
     break;
    }
    $112 = $edge;
    $113 = HEAP32[$112>>2]|0;
    $114 = $bodyA;
    $115 = ($113|0)==($114|0);
    if ($115) {
     $116 = $edge;
     $117 = (($116) + 4|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (__ZN9b2Contact11GetFixtureAEv($118)|0);
     $fA = $119;
     $120 = $edge;
     $121 = (($120) + 4|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (__ZN9b2Contact11GetFixtureBEv($122)|0);
     $fB = $123;
     $124 = $edge;
     $125 = (($124) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (__ZNK9b2Contact14GetChildIndexAEv($126)|0);
     $iA = $127;
     $128 = $edge;
     $129 = (($128) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (__ZNK9b2Contact14GetChildIndexBEv($130)|0);
     $iB = $131;
     $132 = $fA;
     $133 = $fixtureA;
     $134 = ($132|0)==($133|0);
     if ($134) {
      $135 = $fB;
      $136 = $fixtureB;
      $137 = ($135|0)==($136|0);
      if ($137) {
       $138 = $iA;
       $139 = $indexA;
       $140 = ($138|0)==($139|0);
       if ($140) {
        $141 = $iB;
        $142 = $indexB;
        $143 = ($141|0)==($142|0);
        if ($143) {
         label = 18;
         break;
        }
       }
      }
     }
     $144 = $fA;
     $145 = $fixtureB;
     $146 = ($144|0)==($145|0);
     if ($146) {
      $147 = $fB;
      $148 = $fixtureA;
      $149 = ($147|0)==($148|0);
      if ($149) {
       $150 = $iA;
       $151 = $indexB;
       $152 = ($150|0)==($151|0);
       if ($152) {
        $153 = $iB;
        $154 = $indexA;
        $155 = ($153|0)==($154|0);
        if ($155) {
         label = 23;
         break;
        }
       }
      }
     }
    }
    $156 = $edge;
    $157 = (($156) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $edge = $158;
   }
   if ((label|0) == 18) {
    label = 0;
    $bFoundSameContact = 1;
   }
   else if ((label|0) == 23) {
    label = 0;
    $bFoundSameContact = 1;
   }
   $159 = $bFoundSameContact;
   $160 = $159&1;
   if ($160) {
    $k = 0;
    while(1) {
     $161 = $k;
     $162 = $edge;
     $163 = (($162) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (($164) + 64|0);
     $166 = (($165) + 60|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($161|0)<($167|0);
     if (!($168)) {
      break;
     }
     $169 = $k;
     $170 = $i;
     $171 = $manifoldListData;
     $172 = (($171) + (($170*72)|0)|0);
     $173 = (($172) + 16|0);
     $174 = (($173) + (($169*24)|0)|0);
     $175 = (($174) + 8|0);
     $176 = +HEAPF32[$175>>2];
     $177 = $k;
     $178 = $edge;
     $179 = (($178) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 64|0);
     $182 = (($181) + (($177*20)|0)|0);
     $183 = (($182) + 8|0);
     HEAPF32[$183>>2] = $176;
     $184 = $k;
     $185 = $i;
     $186 = $manifoldListData;
     $187 = (($186) + (($185*72)|0)|0);
     $188 = (($187) + 16|0);
     $189 = (($188) + (($184*24)|0)|0);
     $190 = (($189) + 12|0);
     $191 = +HEAPF32[$190>>2];
     $192 = $k;
     $193 = $edge;
     $194 = (($193) + 4|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($195) + 64|0);
     $197 = (($196) + (($192*20)|0)|0);
     $198 = (($197) + 12|0);
     HEAPF32[$198>>2] = $191;
     $199 = $k;
     $200 = (($199) + 1)|0;
     $k = $200;
    }
   } else {
   }
  }
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 if ((label|0) == 10) {
  ___assert_fail((18288|0),(18296|0),3470,(18384|0));
  // unreachable;
 }
 $203 = $validContactIndices;
 $204 = ($203|0)==(0|0);
 if (!($204)) {
  __ZdaPv($203);
 }
 $num = 0;
 while(1) {
  $205 = $pc;
  $206 = ($205|0)!=(0|0);
  if (!($206)) {
   break;
  }
  $207 = $pc;
  $208 = (($207) + 64|0);
  $209 = (($208) + 60|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($impulse) + 16|0);
  HEAP32[$211>>2] = $210;
  $j = 0;
  while(1) {
   $212 = $j;
   $213 = (($impulse) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($212|0)<($214|0);
   if (!($215)) {
    break;
   }
   $216 = $j;
   $217 = $pc;
   $218 = (($217) + 64|0);
   $219 = (($218) + (($216*20)|0)|0);
   $220 = (($219) + 8|0);
   $221 = +HEAPF32[$220>>2];
   $222 = $j;
   $223 = (($impulse) + ($222<<2)|0);
   HEAPF32[$223>>2] = $221;
   $224 = $j;
   $225 = $pc;
   $226 = (($225) + 64|0);
   $227 = (($226) + (($224*20)|0)|0);
   $228 = (($227) + 12|0);
   $229 = +HEAPF32[$228>>2];
   $230 = $j;
   $231 = (($impulse) + 8|0);
   $232 = (($231) + ($230<<2)|0);
   HEAPF32[$232>>2] = $229;
   $233 = $j;
   $234 = (($233) + 1)|0;
   $j = $234;
  }
  $235 = $1;
  $236 = (($235) + 120|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + 20|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $pc;
  FUNCTION_TABLE_viii[$240 & 1023]($237,$241,$impulse);
  $242 = $num;
  $243 = (($242) + 1)|0;
  $num = $243;
  $244 = $pc;
  $245 = (__ZN9b2Contact7GetNextEv($244)|0);
  $pc = $245;
 }
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv394($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj395($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 300|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 112|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[18408>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((18408|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 18392;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(18392|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18408|0));
  }
 }
 $76 = 18392;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 18416;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(18392|0),(18416|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(18392|0),(19440|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 18392;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 18392;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN9b2Contact11GetManifoldEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 64|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12clb2ManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = (($1) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = (($1) + 24|0);
 __ZN6b2Vec2C2Ev($4);
 $5 = (($1) + 48|0);
 __ZN6b2Vec2C2Ev($5);
 $6 = (($1) + 56|0);
 __ZN6b2Vec2C2Ev($6);
 STACKTOP = sp;return;
}
function __ZNK6b2Body7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN12b2CLSolveTOIC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $TOIKernelSource = 0, $TOIKernelSourceLen = 0, $buffer = 0, $err = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 204880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $err = sp + 64|0;
 $TOIKernelSource = sp + 60|0;
 $TOIKernelSourceLen = sp + 56|0;
 $len = sp + 52|0;
 $buffer = sp + 72|0;
 $0 = $this;
 $1 = $0;
 (_printf((19448|0),($vararg_buffer|0))|0);
 HEAP32[$TOIKernelSource>>2] = 0;
 HEAP32[$TOIKernelSourceLen>>2] = 0;
 __ZL6shrLogPKcz426(19480,$vararg_buffer1);
 $2 = (__ZL15shrFindFilePathPKcPv427(19512,0)|0);
 $3 = (__ZL18b2clLoadProgSourcePKcS0_Pj428($2,19544,$TOIKernelSourceLen)|0);
 HEAP32[$TOIKernelSource>>2] = $3;
 $4 = HEAP32[$TOIKernelSource>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __Z5b2LogPKcz(19560,$vararg_buffer3);
 }
 $6 = (__ZN10b2CLDevice8instanceEv()|0);
 $7 = (__ZNK10b2CLDevice10GetContextEv($6)|0);
 $8 = (_clCreateProgramWithSource(($7|0),1,($TOIKernelSource|0),(0|0),($err|0))|0);
 $9 = (($1) + 16|0);
 HEAP32[$9>>2] = $8;
 $10 = (($1) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_printf((19632|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 $13 = (($1) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_clBuildProgram(($14|0),0,(0|0),(19680|0),(0|0),(0|0))|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  (_printf((19688|0),($vararg_buffer7|0))|0);
  $18 = (($1) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN10b2CLDevice8instanceEv()|0);
  $21 = (__ZNK10b2CLDevice16GetCurrentDeviceEv($20)|0);
  (_clGetProgramBuildInfo(($19|0),($21|0),4483,204800,($buffer|0),($len|0))|0);
  HEAP32[$vararg_buffer9>>2] = $buffer;
  (_printf((19736|0),($vararg_buffer9|0))|0);
  _exit(1);
  // unreachable;
 }
 $22 = (($1) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_clCreateKernel(($23|0),(19744|0),($err|0))|0);
 $25 = (($1) + 36|0);
 HEAP32[$25>>2] = $24;
 $26 = (($1) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  (_printf((19768|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 }
 $29 = HEAP32[$err>>2]|0;
 $30 = ($29|0)!=(0);
 if ($30) {
  (_printf((19768|0),($vararg_buffer11|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $31 = (__ZN10b2CLDevice8instanceEv()|0);
  $32 = (($1) + 36|0);
  $33 = (($1) + 24|0);
  __ZN10b2CLDevice29getMaximumKernelWorkGroupSizeERP10_cl_kernelRj($31,$32,$33);
  $34 = (($1) + 56|0);
  HEAP32[$34>>2] = 0;
  $35 = (($1) + 60|0);
  HEAP32[$35>>2] = 0;
  $36 = (($1) + 72|0);
  HEAP32[$36>>2] = 0;
  $37 = (($1) + 68|0);
  HEAP32[$37>>2] = 0;
  $38 = (($1) + 76|0);
  HEAP32[$38>>2] = 0;
  $39 = (($1) + 80|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN12b2CLSolveTOID2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = (__ZN10b2CLDevice8instanceEv()|0);
  $6 = (($1) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($5,$7);
 }
 $8 = (($1) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = (__ZN10b2CLDevice8instanceEv()|0);
  $12 = (($1) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  __ZN10b2CLDevice9freeArrayEP7_cl_mem($11,$13);
 }
 $14 = (($1) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = (($1) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  __ZdaPv($18);
 }
 STACKTOP = sp;return;
}
function __ZN12b2CLSolveTOI21syncMovedBodytoDeviceERNSt3__13setIP6b2BodyNS0_4lessIS3_EENS0_9allocatorIS3_EEEEP10b2CLSolver($this,$movedBodySet,$solver) {
 $this = $this|0;
 $movedBodySet = $movedBodySet|0;
 $solver = $solver|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $bodySize = 0, $err = 0, $global = 0;
 var $i = 0, $iter = 0, $numBlocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $9 = sp + 8|0;
 $15 = sp + 68|0;
 $17 = sp + 24|0;
 $27 = sp + 244|0;
 $bodySize = sp + 28|0;
 $iter = sp + 32|0;
 $51 = sp + 116|0;
 $52 = sp + 120|0;
 $global = sp + 160|0;
 $48 = $this;
 $49 = $movedBodySet;
 $50 = $solver;
 $53 = $48;
 $54 = $49;
 $47 = $54;
 $55 = $47;
 $46 = $55;
 $56 = $46;
 $57 = (($56) + 8|0);
 $45 = $57;
 $58 = $45;
 $44 = $58;
 $59 = $44;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0);
 if ($61) {
  STACKTOP = sp;return;
 }
 $62 = $49;
 $43 = $62;
 $63 = $43;
 $42 = $63;
 $64 = $42;
 $65 = (($64) + 8|0);
 $41 = $65;
 $66 = $41;
 $40 = $66;
 $67 = $40;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($53) + 60|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($68>>>0)>($70>>>0);
 if ($71) {
  $72 = (($53) + 56|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $75 = (($53) + 56|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==(0|0);
   if (!($77)) {
    __ZdaPv($76);
   }
   $78 = (__ZN10b2CLDevice8instanceEv()|0);
   $79 = (($53) + 52|0);
   $80 = HEAP32[$79>>2]|0;
   __ZN10b2CLDevice9freeArrayEP7_cl_mem($78,$80);
  }
  $81 = $49;
  $36 = $81;
  $82 = $36;
  $35 = $82;
  $83 = $35;
  $84 = (($83) + 8|0);
  $34 = $84;
  $85 = $34;
  $33 = $85;
  $86 = $33;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87*11)|0;
  $$arith = $88<<2;
  $$overflow = ($88>>>0)>(1073741823);
  $89 = $$overflow ? -1 : $$arith;
  $90 = (__Znaj($89)|0);
  $91 = (($53) + 56|0);
  HEAP32[$91>>2] = $90;
  $92 = (__ZN10b2CLDevice8instanceEv()|0);
  $93 = $49;
  $3 = $93;
  $94 = $3;
  $2 = $94;
  $95 = $2;
  $96 = (($95) + 8|0);
  $1 = $96;
  $97 = $1;
  $0 = $97;
  $98 = $0;
  $99 = HEAP32[$98>>2]|0;
  $100 = $99<<2;
  $101 = ($100*11)|0;
  $102 = (__ZN10b2CLDevice13allocateArrayEjb($92,$101,0)|0);
  $103 = (($53) + 52|0);
  HEAP32[$103>>2] = $102;
 }
 $104 = $49;
 $7 = $104;
 $105 = $7;
 $6 = $105;
 $106 = $6;
 $107 = (($106) + 8|0);
 $5 = $107;
 $108 = $5;
 $4 = $108;
 $109 = $4;
 $110 = HEAP32[$109>>2]|0;
 HEAP32[$bodySize>>2] = $110;
 $i = 0;
 $111 = $49;
 $14 = $111;
 $112 = $14;
 $13 = $112;
 $113 = $13;
 $12 = $113;
 $114 = $12;
 $115 = HEAP32[$114>>2]|0;
 $10 = $15;
 $11 = $115;
 $116 = $10;
 $117 = $11;
 HEAP32[$116>>2] = $117;
 ;HEAP8[$9+0>>0]=HEAP8[$15+0>>0]|0;HEAP8[$9+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$15+3>>0]|0;
 $8 = $iter;
 $118 = $8;
 $119 = HEAP32[$9>>2]|0;
 HEAP32[$118>>2] = $119;
 while(1) {
  $120 = $49;
  $26 = $120;
  $121 = $26;
  $25 = $121;
  $122 = $25;
  $24 = $122;
  $123 = $24;
  $124 = (($123) + 4|0);
  $23 = $124;
  $125 = $23;
  $22 = $125;
  $126 = $22;
  $21 = $126;
  $127 = $21;
  $20 = $127;
  $128 = $20;
  $18 = $27;
  $19 = $128;
  $129 = $18;
  $130 = $19;
  HEAP32[$129>>2] = $130;
  ;HEAP8[$17+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$17+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$27+3>>0]|0;
  $16 = $51;
  $131 = $16;
  $132 = HEAP32[$17>>2]|0;
  HEAP32[$131>>2] = $132;
  $30 = $iter;
  $31 = $51;
  $133 = $30;
  $134 = $31;
  $28 = $133;
  $29 = $134;
  $135 = $28;
  $136 = HEAP32[$135>>2]|0;
  $137 = $29;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($136|0)==($138|0);
  $140 = $139 ^ 1;
  if (!($140)) {
   break;
  }
  $32 = $iter;
  $141 = $32;
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + 16|0);
  $144 = HEAP32[$143>>2]|0;
  $b = $144;
  $145 = $b;
  $146 = (($145) + 100|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (+($147|0));
  $149 = $i;
  $150 = ($149*11)|0;
  $151 = (($150) + 0)|0;
  $152 = (($53) + 56|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($151<<2)|0);
  HEAPF32[$154>>2] = $148;
  $155 = $b;
  $156 = (($155) + 64|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $i;
  $159 = ($158*11)|0;
  $160 = (($159) + 1)|0;
  $161 = (($53) + 56|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + ($160<<2)|0);
  HEAPF32[$163>>2] = $157;
  $164 = $b;
  $165 = (($164) + 64|0);
  $166 = (($165) + 4|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $i;
  $169 = ($168*11)|0;
  $170 = (($169) + 2)|0;
  $171 = (($53) + 56|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + ($170<<2)|0);
  HEAPF32[$173>>2] = $167;
  $174 = $b;
  $175 = (($174) + 72|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $i;
  $178 = ($177*11)|0;
  $179 = (($178) + 3)|0;
  $180 = (($53) + 56|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($179<<2)|0);
  HEAPF32[$182>>2] = $176;
  $183 = $b;
  $184 = (($183) + 28|0);
  $185 = (($184) + 16|0);
  $186 = +HEAPF32[$185>>2];
  $187 = $i;
  $188 = ($187*11)|0;
  $189 = (($188) + 4)|0;
  $190 = (($53) + 56|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (($191) + ($189<<2)|0);
  HEAPF32[$192>>2] = $186;
  $193 = $b;
  $194 = (($193) + 28|0);
  $195 = (($194) + 16|0);
  $196 = (($195) + 4|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $i;
  $199 = ($198*11)|0;
  $200 = (($199) + 5)|0;
  $201 = (($53) + 56|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + ($200<<2)|0);
  HEAPF32[$203>>2] = $197;
  $204 = $b;
  $205 = (($204) + 28|0);
  $206 = (($205) + 28|0);
  $207 = +HEAPF32[$206>>2];
  $208 = $i;
  $209 = ($208*11)|0;
  $210 = (($209) + 6)|0;
  $211 = (($53) + 56|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($212) + ($210<<2)|0);
  HEAPF32[$213>>2] = $207;
  $214 = $b;
  $215 = (($214) + 12|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $i;
  $218 = ($217*11)|0;
  $219 = (($218) + 7)|0;
  $220 = (($53) + 56|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + ($219<<2)|0);
  HEAPF32[$222>>2] = $216;
  $223 = $b;
  $224 = (($223) + 12|0);
  $225 = (($224) + 4|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $i;
  $228 = ($227*11)|0;
  $229 = (($228) + 8)|0;
  $230 = (($53) + 56|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + ($229<<2)|0);
  HEAPF32[$232>>2] = $226;
  $233 = $b;
  $234 = (($233) + 12|0);
  $235 = (($234) + 8|0);
  $236 = +HEAPF32[$235>>2];
  $237 = $i;
  $238 = ($237*11)|0;
  $239 = (($238) + 9)|0;
  $240 = (($53) + 56|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($241) + ($239<<2)|0);
  HEAPF32[$242>>2] = $236;
  $243 = $b;
  $244 = (($243) + 12|0);
  $245 = (($244) + 8|0);
  $246 = (($245) + 4|0);
  $247 = +HEAPF32[$246>>2];
  $248 = $i;
  $249 = ($248*11)|0;
  $250 = (($249) + 10)|0;
  $251 = (($53) + 56|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + ($250<<2)|0);
  HEAPF32[$253>>2] = $247;
  $254 = $i;
  $255 = (($254) + 1)|0;
  $i = $255;
  $38 = $iter;
  $39 = 0;
  $256 = $38;
  ;HEAP32[$52+0>>2]=HEAP32[$256+0>>2]|0;
  $37 = $256;
  $257 = $37;
  $258 = HEAP32[$257>>2]|0;
  $259 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($258)|0);
  HEAP32[$257>>2] = $259;
 }
 $260 = (__ZN10b2CLDevice8instanceEv()|0);
 $261 = (($53) + 52|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (($53) + 56|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = HEAP32[$bodySize>>2]|0;
 $266 = ($265*44)|0;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($260,$262,$264,0,$266,1);
 $err = 0;
 $a = 0;
 $267 = (($53) + 36|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = $a;
 $270 = (($269) + 1)|0;
 $a = $270;
 $271 = (($53) + 52|0);
 $272 = (_clSetKernelArg(($268|0),($269|0),4,($271|0))|0);
 $273 = $err;
 $274 = $273 | $272;
 $err = $274;
 $275 = (($53) + 36|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = $a;
 $278 = (($277) + 1)|0;
 $a = $278;
 $279 = (_clSetKernelArg(($276|0),($277|0),4,($bodySize|0))|0);
 $280 = $err;
 $281 = $280 | $279;
 $err = $281;
 $282 = (($53) + 36|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $a;
 $285 = (($284) + 1)|0;
 $a = $285;
 $286 = (__ZN14b2CLCommonData8instanceEv()|0);
 $287 = (($286) + 64|0);
 $288 = (_clSetKernelArg(($283|0),($284|0),4,($287|0))|0);
 $289 = $err;
 $290 = $289 | $288;
 $err = $290;
 $291 = (($53) + 36|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = $a;
 $294 = (($293) + 1)|0;
 $a = $294;
 $295 = $50;
 $296 = (($295) + 392|0);
 $297 = (_clSetKernelArg(($292|0),($293|0),4,($296|0))|0);
 $298 = $err;
 $299 = $298 | $297;
 $err = $299;
 $300 = (($53) + 36|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = $a;
 $303 = (($302) + 1)|0;
 $a = $303;
 $304 = $50;
 $305 = (($304) + 400|0);
 $306 = (_clSetKernelArg(($301|0),($302|0),4,($305|0))|0);
 $307 = $err;
 $308 = $307 | $306;
 $err = $308;
 $309 = $err;
 $310 = ($309|0)!=(0);
 if ($310) {
  $311 = (($53) + 36|0);
  $312 = HEAP32[$311>>2]|0;
  HEAP32[$vararg_buffer>>2] = $312;
  (_printf((19824|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $313 = HEAP32[$bodySize>>2]|0;
 $314 = (($53) + 24|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + ($315))|0;
 $317 = (($316) - 1)|0;
 $318 = (($53) + 24|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = (($317>>>0) / ($319>>>0))&-1;
 $numBlocks = $320;
 $321 = $numBlocks;
 $322 = (($53) + 24|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = Math_imul($321, $323)|0;
 HEAP32[$global>>2] = $324;
 $325 = (__ZN10b2CLDevice8instanceEv()|0);
 $326 = (__ZNK10b2CLDevice15GetCommandQueueEv($325)|0);
 $327 = (($53) + 36|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = (($53) + 24|0);
 $330 = (_clEnqueueNDRangeKernel(($326|0),($328|0),1,(0|0),($global|0),($329|0),0,(0|0),(0|0))|0);
 $err = $330;
 $331 = $err;
 $332 = ($331|0)!=(0);
 if ($332) {
  (_printf((19872|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL6shrLogPKcz426($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vprintf(($1|0),($args|0))|0);
 STACKTOP = sp;return;
}
function __ZL15shrFindFilePathPKcPv427($path,$dummy) {
 $path = $path|0;
 $dummy = $dummy|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $dummy;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function __ZL18b2clLoadProgSourcePKcS0_Pj428($path,$dummy,$kernelLength) {
 $path = $path|0;
 $dummy = $dummy|0;
 $kernelLength = $kernelLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 300|0;
 $77 = sp + 558|0;
 $78 = sp + 559|0;
 $file = sp + 112|0;
 $88 = $path;
 $89 = $dummy;
 $90 = $kernelLength;
 $94 = HEAP8[19944>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $96 = (___cxa_guard_acquire((19944|0))|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $86 = 19928;
   $98 = $86;
   $85 = $98;
   $99 = $85;
   $84 = $99;
   $100 = $84;
   $83 = $100;
   $101 = $83;
   $82 = $101;
   $81 = $99;
   $102 = $81;
   $80 = $102;
   $103 = $80;
   $79 = $103;
   $104 = $79;
   $__a$i$i$i = $104;
   $__i$i$i$i = 0;
   while(1) {
    $105 = $__i$i$i$i;
    $106 = ($105>>>0)<(3);
    if (!($106)) {
     break;
    }
    $107 = $__i$i$i$i;
    $108 = $__a$i$i$i;
    $109 = (($108) + ($107<<2)|0);
    HEAP32[$109>>2] = 0;
    $110 = $__i$i$i$i;
    $111 = (($110) + 1)|0;
    $__i$i$i$i = $111;
   }
   (___cxa_atexit((430|0),(19928|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19944|0));
  }
 }
 $76 = 19928;
 $112 = $76;
 $75 = $112;
 $70 = $112;
 $113 = $70;
 $69 = $113;
 $114 = $69;
 $68 = $114;
 $115 = $68;
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 if ($119) {
  $58 = $112;
  $120 = $58;
  $57 = $120;
  $121 = $57;
  $56 = $121;
  $122 = $56;
  $123 = (($122) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP8[$77>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($124,$77);
  $61 = $112;
  $62 = 0;
  $125 = $61;
  $126 = $62;
  $60 = $125;
  $127 = $60;
  $59 = $127;
  $128 = $59;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $126;
 } else {
  $67 = $112;
  $130 = $67;
  $66 = $130;
  $131 = $66;
  $65 = $131;
  $132 = $65;
  $133 = (($132) + 1|0);
  $64 = $133;
  $134 = $64;
  $63 = $134;
  $135 = $63;
  HEAP8[$78>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($135,$78);
  $73 = $112;
  $74 = 0;
  $136 = $73;
  $137 = $74;
  $138 = $137 << 1;
  $139 = $138&255;
  $72 = $136;
  $140 = $72;
  $71 = $140;
  $141 = $71;
  HEAP8[$141>>0] = $139;
 }
 $142 = $88;
 $51 = $file;
 $52 = $142;
 $53 = 8;
 $143 = $51;
 $144 = (($143) + 108|0);
 $50 = $144;
 $145 = $50;
 $49 = $145;
 $146 = $49;
 $147 = (29576 + 8|0);
 HEAP32[$146>>2] = $147;
 $148 = (29176 + 8|0);
 HEAP32[$145>>2] = $148;
 $149 = (5472 + 12|0);
 HEAP32[$143>>2] = $149;
 $150 = (($143) + 108|0);
 $151 = (5472 + 32|0);
 HEAP32[$150>>2] = $151;
 $152 = (($143) + 8|0);
 $46 = $143;
 $153 = (5512 + 4|0);
 $47 = $153;
 $48 = $152;
 $154 = $46;
 $155 = $47;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = (($155) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = HEAP32[$154>>2]|0;
 $160 = (($159) + -12|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($154) + ($161)|0);
 HEAP32[$162>>2] = $158;
 $163 = (($154) + 4|0);
 HEAP32[$163>>2] = 0;
 $164 = HEAP32[$154>>2]|0;
 $165 = (($164) + -12|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (($154) + ($166)|0);
 $168 = $48;
 $44 = $167;
 $45 = $168;
 $169 = $44;
 $170 = $45;
 __THREW__ = 0;
 invoke_vii(431,($169|0),($170|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 do {
  if ($172) {
   $203 = ___cxa_find_matching_catch()|0;
   $204 = tempRet0;
   $54 = $203;
   $55 = $204;
  } else {
   $173 = (($169) + 72|0);
   HEAP32[$173>>2] = 0;
   $174 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $175 = (($169) + 76|0);
   HEAP32[$175>>2] = $174;
   $176 = (5472 + 12|0);
   HEAP32[$143>>2] = $176;
   $177 = (($143) + 108|0);
   $178 = (5472 + 32|0);
   HEAP32[$177>>2] = $178;
   $179 = (($143) + 8|0);
   __THREW__ = 0;
   invoke_vi(432,($179|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   do {
    if ($181) {
     $205 = ___cxa_find_matching_catch()|0;
     $206 = tempRet0;
     $54 = $205;
     $55 = $206;
    } else {
     $182 = (($143) + 8|0);
     $183 = $52;
     $184 = $53;
     $185 = $184 | 8;
     __THREW__ = 0;
     $186 = (invoke_iiii(433,($182|0),($183|0),($185|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     do {
      if (!($188)) {
       $189 = ($186|0)==(0|0);
       if ($189) {
        $190 = HEAP32[$143>>2]|0;
        $191 = (($190) + -12|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($143) + ($192)|0);
        $42 = $193;
        $43 = 4;
        $194 = $42;
        $195 = $43;
        $40 = $194;
        $41 = $195;
        $196 = $40;
        $197 = (($196) + 16|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $41;
        $200 = $198 | $199;
        __THREW__ = 0;
        invoke_vii(434,($196|0),($200|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        if ($202) {
         break;
        }
       }
       $39 = $file;
       $220 = $39;
       $221 = (($220) + 8|0);
       $38 = $221;
       $222 = $38;
       $223 = (($222) + 64|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if (!($225)) {
        $87 = 0;
        $93 = 1;
        __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
        $324 = $87;
        STACKTOP = sp;return ($324|0);
       }
       while(1) {
        $230 = HEAP32[$file>>2]|0;
        $231 = (($230) + -12|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($file) + ($232)|0);
        $37 = $233;
        $234 = $37;
        $36 = $234;
        $235 = $36;
        $236 = (($235) + 16|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 2;
        $239 = ($238|0)!=(0);
        $240 = $239 ^ 1;
        if (!($240)) {
         label = 46;
         break;
        }
        $33 = $file;
        $34 = 19952;
        $35 = 1024;
        $241 = $33;
        $242 = $34;
        $243 = $35;
        $244 = HEAP32[$241>>2]|0;
        $245 = (($244) + -12|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (($241) + ($246)|0);
        $28 = $247;
        $29 = 10;
        $248 = $28;
        __THREW__ = 0;
        invoke_vii(435,($30|0),($248|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = $249&1;
        if ($250) {
         label = 29;
         break;
        }
        $27 = $30;
        $251 = $27;
        __THREW__ = 0;
        $252 = (invoke_iii(436,($251|0),(31960|0))|0);
        $253 = __THREW__; __THREW__ = 0;
        $254 = $253&1;
        if ($254) {
         label = 37;
         break;
        }
        $255 = $29;
        $25 = $252;
        $26 = $255;
        $256 = $25;
        $257 = HEAP32[$256>>2]|0;
        $258 = (($257) + 28|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $26;
        __THREW__ = 0;
        $261 = (invoke_iii($259|0,($256|0),($260|0))|0);
        $262 = __THREW__; __THREW__ = 0;
        $263 = $262&1;
        if ($263) {
         label = 37;
         break;
        }
        __THREW__ = 0;
        invoke_vi(437,($30|0));
        $272 = __THREW__; __THREW__ = 0;
        $273 = $272&1;
        if ($273) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iiiii(438,($241|0),($242|0),($243|0),($261|0))|0);
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(19928|0),(19952|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         label = 29;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(439,(19928|0),(20976|0))|0);
        $278 = __THREW__; __THREW__ = 0;
        $279 = $278&1;
        if ($279) {
         label = 29;
         break;
        }
       }
       do {
        if ((label|0) == 29) {
         $226 = ___cxa_find_matching_catch()|0;
         $227 = tempRet0;
         $eh$lpad$body$index2Z2D = $227;$eh$lpad$body$indexZ2D = $226;
        }
        else if ((label|0) == 37) {
         $264 = ___cxa_find_matching_catch()|0;
         $265 = tempRet0;
         $31 = $264;
         $32 = $265;
         __THREW__ = 0;
         invoke_vi(437,($30|0));
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          $270 = ___cxa_find_matching_catch(0|0)|0;
          $271 = tempRet0;
          ___clang_call_terminate($270);
          // unreachable;
         } else {
          $268 = $31;
          $269 = $32;
          $eh$lpad$body$index2Z2D = $269;$eh$lpad$body$indexZ2D = $268;
          break;
         }
        }
        else if ((label|0) == 46) {
         $24 = 19928;
         $280 = $24;
         $23 = $280;
         $281 = $23;
         $22 = $281;
         $282 = $22;
         $21 = $282;
         $283 = $21;
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = $285 & 1;
         $287 = ($286|0)!=(0);
         if ($287) {
          $17 = $280;
          $288 = $17;
          $16 = $288;
          $289 = $16;
          $15 = $289;
          $290 = $15;
          $291 = (($290) + 4|0);
          $292 = HEAP32[$291>>2]|0;
          $300 = $292;
         } else {
          $20 = $280;
          $293 = $20;
          $19 = $293;
          $294 = $19;
          $18 = $294;
          $295 = $18;
          $296 = HEAP8[$295>>0]|0;
          $297 = $296&255;
          $298 = $297 >> 1;
          $300 = $298;
         }
         $299 = $90;
         HEAP32[$299>>2] = $300;
         $14 = 19928;
         $301 = $14;
         $13 = $301;
         $302 = $13;
         $12 = $302;
         $303 = $12;
         $11 = $303;
         $304 = $11;
         $10 = $304;
         $305 = $10;
         $9 = $305;
         $306 = $9;
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $308 & 1;
         $310 = ($309|0)!=(0);
         if ($310) {
          $3 = $303;
          $311 = $3;
          $2 = $311;
          $312 = $2;
          $1 = $312;
          $313 = $1;
          $314 = (($313) + 8|0);
          $315 = HEAP32[$314>>2]|0;
          $322 = $315;
         } else {
          $8 = $303;
          $316 = $8;
          $7 = $316;
          $317 = $7;
          $6 = $317;
          $318 = $6;
          $319 = (($318) + 1|0);
          $5 = $319;
          $320 = $5;
          $4 = $320;
          $321 = $4;
          $322 = $321;
         }
         $0 = $322;
         $323 = $0;
         $87 = $323;
         $93 = 1;
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
         $324 = $87;
         STACKTOP = sp;return ($324|0);
        }
       } while(0);
       $91 = $eh$lpad$body$indexZ2D;
       $92 = $eh$lpad$body$index2Z2D;
       __THREW__ = 0;
       invoke_vi(20,($file|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        $327 = ___cxa_find_matching_catch(0|0)|0;
        $328 = tempRet0;
        ___clang_call_terminate($327);
        // unreachable;
       }
       $325 = $91;
       $326 = $92;
       ___resumeException($325|0);
       // unreachable;
      }
     } while(0);
     $207 = ___cxa_find_matching_catch()|0;
     $208 = tempRet0;
     $54 = $207;
     $55 = $208;
     __THREW__ = 0;
     invoke_vi(28,($179|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if ($210) {
      $218 = ___cxa_find_matching_catch(0|0)|0;
      $219 = tempRet0;
      ___clang_call_terminate($218);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   $211 = __THREW__; __THREW__ = 0;
   $212 = $211&1;
   if ($212) {
    $218 = ___cxa_find_matching_catch(0|0)|0;
    $219 = tempRet0;
    ___clang_call_terminate($218);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $213 = (($143) + 108|0);
 __THREW__ = 0;
 invoke_vi(427,($213|0));
 $214 = __THREW__; __THREW__ = 0;
 $215 = $214&1;
 if ($215) {
  $218 = ___cxa_find_matching_catch(0|0)|0;
  $219 = tempRet0;
  ___clang_call_terminate($218);
  // unreachable;
 } else {
  $216 = $54;
  $217 = $55;
  ___resumeException($216|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN6b2Body7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8b2CLSortC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $sortKernelSource = 0, $sortKernelSourceLen = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 (_printf((20984|0),($vararg_buffer|0))|0);
 $sortKernelSource = 0;
 $sortKernelSourceLen = 0;
 $2 = (($1) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 40|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 44|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2CLSortD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8b2CLSort8instanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = HEAP8[21064>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (21016|0);
 }
 $4 = (___cxa_guard_acquire((21064|0))|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (21016|0);
 }
 __THREW__ = 0;
 invoke_vi(477,(21016|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  ___cxa_guard_abort((21064|0));
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 } else {
  (___cxa_atexit((478|0),(21016|0),(___dso_handle|0))|0);
  ___cxa_guard_release((21064|0));
  STACKTOP = sp;return (21016|0);
 }
 return 0|0;
}
function __ZN8b2CLSort7stlSortEP7_cl_memS1_ijj($this,$keyBuffer,$valueBuffer,$arraySize,$sortAscending,$storeKeys) {
 $this = $this|0;
 $keyBuffer = $keyBuffer|0;
 $valueBuffer = $valueBuffer|0;
 $arraySize = $arraySize|0;
 $sortAscending = $sortAscending|0;
 $storeKeys = $storeKeys|0;
 var $$arith = 0, $$arith2 = 0, $$arith6 = 0, $$overflow = 0, $$overflow3 = 0, $$overflow7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = $this;
 $4 = $keyBuffer;
 $5 = $valueBuffer;
 $6 = $arraySize;
 $7 = $sortAscending;
 $8 = $storeKeys;
 $9 = $3;
 $10 = (($9) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = (($9) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = (($9) + 36|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    __ZdaPv($18);
   }
  }
  $20 = $6;
  $$arith6 = $20<<2;
  $$overflow7 = ($20>>>0)>(1073741823);
  $21 = $$overflow7 ? -1 : $$arith6;
  $22 = (__Znaj($21)|0);
  $23 = (($9) + 36|0);
  HEAP32[$23>>2] = $22;
  $24 = (($9) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = (($9) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    __ZdaPv($28);
   }
  }
  $30 = $6;
  $$arith2 = $30<<2;
  $$overflow3 = ($30>>>0)>(1073741823);
  $31 = $$overflow3 ? -1 : $$arith2;
  $32 = (__Znaj($31)|0);
  $33 = (($9) + 40|0);
  HEAP32[$33>>2] = $32;
  $34 = (($9) + 44|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = (($9) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    __ZdaPv($38);
   }
  }
  $40 = $6;
  $$arith = $40<<3;
  $$overflow = ($40>>>0)>(536870911);
  $41 = $$overflow ? -1 : $$arith;
  $42 = (__Znaj($41)|0);
  $43 = (($9) + 44|0);
  HEAP32[$43>>2] = $42;
  $44 = $6;
  $45 = (($9) + 32|0);
  HEAP32[$45>>2] = $44;
 }
 $46 = (__ZN10b2CLDevice8instanceEv()|0);
 $47 = (($9) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $4;
 $50 = $6;
 $51 = $50<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($46,$48,$49,0,$51,1);
 $52 = (__ZN10b2CLDevice8instanceEv()|0);
 $53 = (($9) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $5;
 $56 = $6;
 $57 = $56<<2;
 __ZN10b2CLDevice19copyArrayFromDeviceEPvP7_cl_memjjb($52,$54,$55,0,$57,1);
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $6;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = (($9) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $i;
  $67 = (($9) + 44|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<3)|0);
  HEAP32[$69>>2] = $65;
  $70 = $i;
  $71 = (($9) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($70<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = (($9) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($75<<3)|0);
  $79 = (($78) + 4|0);
  HEAP32[$79>>2] = $74;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 $82 = (($9) + 44|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($9) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $6;
 $87 = (($85) + ($86<<3)|0);
 $0 = $83;
 $1 = $87;
 HEAP32[$2>>2] = 479;
 $88 = $0;
 $89 = $1;
 __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($88,$89,$2);
 $i1 = 0;
 while(1) {
  $90 = $i1;
  $91 = $6;
  $92 = ($90|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $7;
  $94 = ($93|0)!=(0);
  if ($94) {
   $95 = $i1;
   $96 = (($9) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + ($95<<3)|0);
   $99 = (($98) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $i1;
   $102 = (($9) + 40|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + ($101<<2)|0);
   HEAP32[$104>>2] = $100;
   $105 = $8;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $i1;
    $108 = (($9) + 44|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($107<<3)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $i1;
    $113 = (($9) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($112<<2)|0);
    HEAP32[$115>>2] = $111;
   }
  } else {
   $116 = $6;
   $117 = $i1;
   $118 = (($116) - ($117))|0;
   $119 = (($118) - 1)|0;
   $120 = (($9) + 44|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($119<<3)|0);
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $i1;
   $126 = (($9) + 40|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($125<<2)|0);
   HEAP32[$128>>2] = $124;
   $129 = $8;
   $130 = ($129|0)!=(0);
   if ($130) {
    $131 = $6;
    $132 = $i1;
    $133 = (($131) - ($132))|0;
    $134 = (($133) - 1)|0;
    $135 = (($9) + 44|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($134<<3)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $i1;
    $140 = (($9) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($139<<2)|0);
    HEAP32[$142>>2] = $138;
   }
  }
  $143 = $i1;
  $144 = (($143) + 1)|0;
  $i1 = $144;
 }
 $145 = (__ZN10b2CLDevice8instanceEv()|0);
 $146 = $5;
 $147 = (($9) + 40|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $6;
 $150 = $149<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($145,$146,$148,0,$150,0);
 $151 = $8;
 $152 = ($151|0)!=(0);
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = (__ZN10b2CLDevice8instanceEv()|0);
 $154 = $4;
 $155 = (($9) + 36|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $6;
 $158 = $157<<2;
 __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjjb($153,$154,$156,0,$158,0);
 STACKTOP = sp;return;
}
function __Z22CompareElementsForSortRK12element_typeS1_($e1,$e2) {
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e1;
 $1 = $e2;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 96|0;
 $__t$i4 = sp + 40|0;
 $__t$i3 = sp + 72|0;
 $__t$i2 = sp + 208|0;
 $__t$i1 = sp + 128|0;
 $__t$i = sp + 160|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $33 = $31;
   $34 = $30;
   $35 = $33;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 8)&-1;
   $__len = $38;
   $39 = $__len;
   switch ($39|0) {
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   default: {
   }
   }
   $79 = $__len;
   $80 = ($79|0)<=(30);
   if ($80) {
    label = 12;
    break L1;
   }
   $84 = $30;
   $__m = $84;
   $85 = $31;
   $__lm1 = $85;
   $86 = $__lm1;
   $87 = (($86) + -8|0);
   $__lm1 = $87;
   $88 = $__len;
   $89 = ($88|0)>=(1000);
   if ($89) {
    $90 = $__len;
    $91 = (($90|0) / 2)&-1;
    $__delta = $91;
    $92 = $__delta;
    $93 = $__m;
    $94 = (($93) + ($92<<3)|0);
    $__m = $94;
    $95 = $__delta;
    $96 = (($95|0) / 2)&-1;
    $__delta = $96;
    $97 = $30;
    $98 = $30;
    $99 = $__delta;
    $100 = (($98) + ($99<<3)|0);
    $101 = $__m;
    $102 = $__m;
    $103 = $__delta;
    $104 = (($102) + ($103<<3)|0);
    $105 = $__lm1;
    $106 = $32;
    $107 = (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($97,$100,$101,$104,$105,$106)|0);
    $__n_swaps = $107;
   } else {
    $108 = $__len;
    $109 = (($108|0) / 2)&-1;
    $__delta = $109;
    $110 = $__delta;
    $111 = $__m;
    $112 = (($111) + ($110<<3)|0);
    $__m = $112;
    $113 = $30;
    $114 = $__m;
    $115 = $__lm1;
    $116 = $32;
    $117 = (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($113,$114,$115,$116)|0);
    $__n_swaps = $117;
   }
   $118 = $30;
   $__i = $118;
   $119 = $__lm1;
   $__j = $119;
   $120 = $32;
   $121 = HEAP32[$120>>2]|0;
   $122 = $__i;
   $123 = $__m;
   $124 = (FUNCTION_TABLE_iii[$121 & 1023]($122,$123)|0);
   if ($124) {
    break;
   }
   while(1) {
    $125 = $__i;
    $126 = $__j;
    $127 = (($126) + -8|0);
    $__j = $127;
    $128 = ($125|0)==($127|0);
    if ($128) {
     break;
    }
    $195 = $32;
    $196 = HEAP32[$195>>2]|0;
    $197 = $__j;
    $198 = $__m;
    $199 = (FUNCTION_TABLE_iii[$196 & 1023]($197,$198)|0);
    if ($199) {
     label = 41;
     break L3;
    }
   }
   $129 = $__i;
   $130 = (($129) + 8|0);
   $__i = $130;
   $131 = $31;
   $__j = $131;
   $132 = $32;
   $133 = HEAP32[$132>>2]|0;
   $134 = $30;
   $135 = $__j;
   $136 = (($135) + -8|0);
   $__j = $136;
   $137 = (FUNCTION_TABLE_iii[$133 & 1023]($134,$136)|0);
   if (!($137)) {
    while(1) {
     $138 = $__i;
     $139 = $__j;
     $140 = ($138|0)==($139|0);
     if ($140) {
      label = 22;
      break L1;
     }
     $141 = $32;
     $142 = HEAP32[$141>>2]|0;
     $143 = $30;
     $144 = $__i;
     $145 = (FUNCTION_TABLE_iii[$142 & 1023]($143,$144)|0);
     if ($145) {
      break;
     }
     $159 = $__i;
     $160 = (($159) + 8|0);
     $__i = $160;
    }
    $146 = $__i;
    $147 = $__j;
    $23 = $146;
    $24 = $147;
    $148 = $23;
    $22 = $148;
    $149 = $22;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$149+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$149+4>>2]|0;
    $150 = $23;
    $151 = $24;
    $20 = $151;
    $152 = $20;
    ;HEAP32[$150+0>>2]=HEAP32[$152+0>>2]|0;HEAP32[$150+4>>2]=HEAP32[$152+4>>2]|0;
    $153 = $24;
    $21 = $__t$i1;
    $154 = $21;
    ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$154+4>>2]|0;
    $155 = $__n_swaps;
    $156 = (($155) + 1)|0;
    $__n_swaps = $156;
    $157 = $__i;
    $158 = (($157) + 8|0);
    $__i = $158;
   }
   $161 = $__i;
   $162 = $__j;
   $163 = ($161|0)==($162|0);
   if ($163) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $164 = $32;
     $165 = HEAP32[$164>>2]|0;
     $166 = $30;
     $167 = $__i;
     $168 = (FUNCTION_TABLE_iii[$165 & 1023]($166,$167)|0);
     $169 = $168 ^ 1;
     if (!($169)) {
      break;
     }
     $170 = $__i;
     $171 = (($170) + 8|0);
     $__i = $171;
    }
    while(1) {
     $172 = $32;
     $173 = HEAP32[$172>>2]|0;
     $174 = $30;
     $175 = $__j;
     $176 = (($175) + -8|0);
     $__j = $176;
     $177 = (FUNCTION_TABLE_iii[$173 & 1023]($174,$176)|0);
     if (!($177)) {
      break;
     }
    }
    $178 = $__i;
    $179 = $__j;
    $180 = ($178>>>0)>=($179>>>0);
    if ($180) {
     break;
    }
    $181 = $__i;
    $182 = $__j;
    $18 = $181;
    $19 = $182;
    $183 = $18;
    $17 = $183;
    $184 = $17;
    ;HEAP32[$__t$i2+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$184+4>>2]|0;
    $185 = $18;
    $186 = $19;
    $15 = $186;
    $187 = $15;
    ;HEAP32[$185+0>>2]=HEAP32[$187+0>>2]|0;HEAP32[$185+4>>2]=HEAP32[$187+4>>2]|0;
    $188 = $19;
    $16 = $__t$i2;
    $189 = $16;
    ;HEAP32[$188+0>>2]=HEAP32[$189+0>>2]|0;HEAP32[$188+4>>2]=HEAP32[$189+4>>2]|0;
    $190 = $__n_swaps;
    $191 = (($190) + 1)|0;
    $__n_swaps = $191;
    $192 = $__i;
    $193 = (($192) + 8|0);
    $__i = $193;
   }
   $194 = $__i;
   $30 = $194;
  }
  if ((label|0) == 41) {
   label = 0;
   $200 = $__i;
   $201 = $__j;
   $13 = $200;
   $14 = $201;
   $202 = $13;
   $12 = $202;
   $203 = $12;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$203+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$203+4>>2]|0;
   $204 = $13;
   $205 = $14;
   $10 = $205;
   $206 = $10;
   ;HEAP32[$204+0>>2]=HEAP32[$206+0>>2]|0;HEAP32[$204+4>>2]=HEAP32[$206+4>>2]|0;
   $207 = $14;
   $11 = $__t$i3;
   $208 = $11;
   ;HEAP32[$207+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$208+4>>2]|0;
   $209 = $__n_swaps;
   $210 = (($209) + 1)|0;
   $__n_swaps = $210;
  }
  $211 = $__i;
  $212 = (($211) + 8|0);
  $__i = $212;
  $213 = $__i;
  $214 = $__j;
  $215 = ($213>>>0)<($214>>>0);
  if ($215) {
   while(1) {
    while(1) {
     $216 = $32;
     $217 = HEAP32[$216>>2]|0;
     $218 = $__i;
     $219 = $__m;
     $220 = (FUNCTION_TABLE_iii[$217 & 1023]($218,$219)|0);
     if (!($220)) {
      break;
     }
     $221 = $__i;
     $222 = (($221) + 8|0);
     $__i = $222;
    }
    while(1) {
     $223 = $32;
     $224 = HEAP32[$223>>2]|0;
     $225 = $__j;
     $226 = (($225) + -8|0);
     $__j = $226;
     $227 = $__m;
     $228 = (FUNCTION_TABLE_iii[$224 & 1023]($226,$227)|0);
     $229 = $228 ^ 1;
     if (!($229)) {
      break;
     }
    }
    $230 = $__i;
    $231 = $__j;
    $232 = ($230>>>0)>($231>>>0);
    if ($232) {
     break;
    }
    $233 = $__i;
    $234 = $__j;
    $8 = $233;
    $9 = $234;
    $235 = $8;
    $7 = $235;
    $236 = $7;
    ;HEAP32[$__t$i4+0>>2]=HEAP32[$236+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$236+4>>2]|0;
    $237 = $8;
    $238 = $9;
    $5 = $238;
    $239 = $5;
    ;HEAP32[$237+0>>2]=HEAP32[$239+0>>2]|0;HEAP32[$237+4>>2]=HEAP32[$239+4>>2]|0;
    $240 = $9;
    $6 = $__t$i4;
    $241 = $6;
    ;HEAP32[$240+0>>2]=HEAP32[$241+0>>2]|0;HEAP32[$240+4>>2]=HEAP32[$241+4>>2]|0;
    $242 = $__n_swaps;
    $243 = (($242) + 1)|0;
    $__n_swaps = $243;
    $244 = $__m;
    $245 = $__i;
    $246 = ($244|0)==($245|0);
    if ($246) {
     $247 = $__j;
     $__m = $247;
    }
    $248 = $__i;
    $249 = (($248) + 8|0);
    $__i = $249;
   }
  }
  $250 = $__i;
  $251 = $__m;
  $252 = ($250|0)!=($251|0);
  if ($252) {
   $253 = $32;
   $254 = HEAP32[$253>>2]|0;
   $255 = $__m;
   $256 = $__i;
   $257 = (FUNCTION_TABLE_iii[$254 & 1023]($255,$256)|0);
   if ($257) {
    $258 = $__i;
    $259 = $__m;
    $3 = $258;
    $4 = $259;
    $260 = $3;
    $2 = $260;
    $261 = $2;
    ;HEAP32[$__t$i5+0>>2]=HEAP32[$261+0>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$261+4>>2]|0;
    $262 = $3;
    $263 = $4;
    $0 = $263;
    $264 = $0;
    ;HEAP32[$262+0>>2]=HEAP32[$264+0>>2]|0;HEAP32[$262+4>>2]=HEAP32[$264+4>>2]|0;
    $265 = $4;
    $1 = $__t$i5;
    $266 = $1;
    ;HEAP32[$265+0>>2]=HEAP32[$266+0>>2]|0;HEAP32[$265+4>>2]=HEAP32[$266+4>>2]|0;
    $267 = $__n_swaps;
    $268 = (($267) + 1)|0;
    $__n_swaps = $268;
   }
  }
  $269 = $__n_swaps;
  $270 = ($269|0)==(0);
  if ($270) {
   $271 = $30;
   $272 = $__i;
   $273 = $32;
   $274 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($271,$272,$273)|0);
   $275 = $274&1;
   $__fs = $275;
   $276 = $__i;
   $277 = (($276) + 8|0);
   $278 = $31;
   $279 = $32;
   $280 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($277,$278,$279)|0);
   if ($280) {
    $281 = $__fs;
    $282 = $281&1;
    if ($282) {
     label = 64;
     break;
    }
    $283 = $__i;
    $31 = $283;
    continue;
   }
   $284 = $__fs;
   $285 = $284&1;
   if ($285) {
    $286 = $__i;
    $287 = (($286) + 8|0);
    $__i = $287;
    $30 = $287;
    continue;
   }
  }
  $288 = $__i;
  $289 = $30;
  $290 = $288;
  $291 = $289;
  $292 = (($290) - ($291))|0;
  $293 = (($292|0) / 8)&-1;
  $294 = $31;
  $295 = $__i;
  $296 = $294;
  $297 = $295;
  $298 = (($296) - ($297))|0;
  $299 = (($298|0) / 8)&-1;
  $300 = ($293|0)<($299|0);
  if ($300) {
   $301 = $30;
   $302 = $__i;
   $303 = $32;
   __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($301,$302,$303);
   $304 = $__i;
   $305 = (($304) + 8|0);
   $__i = $305;
   $30 = $305;
  } else {
   $306 = $__i;
   $307 = (($306) + 8|0);
   $308 = $31;
   $309 = $32;
   __ZNSt3__16__sortIRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($307,$308,$309);
   $310 = $__i;
   $31 = $310;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $40 = $32;
  $41 = HEAP32[$40>>2]|0;
  $42 = $31;
  $43 = (($42) + -8|0);
  $31 = $43;
  $44 = $30;
  $45 = (FUNCTION_TABLE_iii[$41 & 1023]($43,$44)|0);
  if ($45) {
   $46 = $30;
   $47 = $31;
   $28 = $46;
   $29 = $47;
   $48 = $28;
   $27 = $48;
   $49 = $27;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$49+4>>2]|0;
   $50 = $28;
   $51 = $29;
   $25 = $51;
   $52 = $25;
   ;HEAP32[$50+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;
   $53 = $29;
   $26 = $__t$i;
   $54 = $26;
   ;HEAP32[$53+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $55 = $30;
  $56 = $30;
  $57 = (($56) + 8|0);
  $58 = $31;
  $59 = (($58) + -8|0);
  $31 = $59;
  $60 = $32;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($55,$57,$59,$60)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $61 = $30;
  $62 = $30;
  $63 = (($62) + 8|0);
  $64 = $30;
  $65 = (($64) + 16|0);
  $66 = $31;
  $67 = (($66) + -8|0);
  $31 = $67;
  $68 = $32;
  (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($61,$63,$65,$67,$68)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $69 = $30;
  $70 = $30;
  $71 = (($70) + 8|0);
  $72 = $30;
  $73 = (($72) + 16|0);
  $74 = $30;
  $75 = (($74) + 24|0);
  $76 = $31;
  $77 = (($76) + -8|0);
  $31 = $77;
  $78 = $32;
  (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($69,$71,$73,$75,$77,$78)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $81 = $30;
  $82 = $31;
  $83 = $32;
  __ZNSt3__118__insertion_sort_3IRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($81,$82,$83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 72|0;
 $__t$i3 = sp + 40|0;
 $__t$i2 = sp + 160|0;
 $__t$i1 = sp + 104|0;
 $__t$i = sp + 120|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $27;
 $33 = $26;
 $34 = (FUNCTION_TABLE_iii[$31 & 1023]($32,$33)|0);
 if ($34) {
  $65 = $29;
  $66 = HEAP32[$65>>2]|0;
  $67 = $28;
  $68 = $27;
  $69 = (FUNCTION_TABLE_iii[$66 & 1023]($67,$68)|0);
  if ($69) {
   $70 = $26;
   $71 = $28;
   $3 = $70;
   $4 = $71;
   $72 = $3;
   $2 = $72;
   $73 = $2;
   ;HEAP32[$__t$i4+0>>2]=HEAP32[$73+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$73+4>>2]|0;
   $74 = $3;
   $75 = $4;
   $0 = $75;
   $76 = $0;
   ;HEAP32[$74+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$76+4>>2]|0;
   $77 = $4;
   $1 = $__t$i4;
   $78 = $1;
   ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$78+4>>2]|0;
   $__r = 1;
   $79 = $__r;
   $25 = $79;
   $104 = $25;
   STACKTOP = sp;return ($104|0);
  }
  $80 = $26;
  $81 = $27;
  $8 = $80;
  $9 = $81;
  $82 = $8;
  $7 = $82;
  $83 = $7;
  ;HEAP32[$__t$i3+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$83+4>>2]|0;
  $84 = $8;
  $85 = $9;
  $5 = $85;
  $86 = $5;
  ;HEAP32[$84+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$86+4>>2]|0;
  $87 = $9;
  $6 = $__t$i3;
  $88 = $6;
  ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$88+4>>2]|0;
  $__r = 1;
  $89 = $29;
  $90 = HEAP32[$89>>2]|0;
  $91 = $28;
  $92 = $27;
  $93 = (FUNCTION_TABLE_iii[$90 & 1023]($91,$92)|0);
  if ($93) {
   $94 = $27;
   $95 = $28;
   $18 = $94;
   $19 = $95;
   $96 = $18;
   $17 = $96;
   $97 = $17;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$97+4>>2]|0;
   $98 = $18;
   $99 = $19;
   $15 = $99;
   $100 = $15;
   ;HEAP32[$98+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$98+4>>2]=HEAP32[$100+4>>2]|0;
   $101 = $19;
   $16 = $__t$i1;
   $102 = $16;
   ;HEAP32[$101+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$102+4>>2]|0;
   $__r = 2;
  }
  $103 = $__r;
  $25 = $103;
  $104 = $25;
  STACKTOP = sp;return ($104|0);
 } else {
  $35 = $29;
  $36 = HEAP32[$35>>2]|0;
  $37 = $28;
  $38 = $27;
  $39 = (FUNCTION_TABLE_iii[$36 & 1023]($37,$38)|0);
  if (!($39)) {
   $40 = $__r;
   $25 = $40;
   $104 = $25;
   STACKTOP = sp;return ($104|0);
  }
  $41 = $27;
  $42 = $28;
  $23 = $41;
  $24 = $42;
  $43 = $23;
  $22 = $43;
  $44 = $22;
  ;HEAP32[$__t$i+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$44+4>>2]|0;
  $45 = $23;
  $46 = $24;
  $20 = $46;
  $47 = $20;
  ;HEAP32[$45+0>>2]=HEAP32[$47+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$47+4>>2]|0;
  $48 = $24;
  $21 = $__t$i;
  $49 = $21;
  ;HEAP32[$48+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;
  $__r = 1;
  $50 = $29;
  $51 = HEAP32[$50>>2]|0;
  $52 = $27;
  $53 = $26;
  $54 = (FUNCTION_TABLE_iii[$51 & 1023]($52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   ;HEAP32[$__t$i2+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$58+4>>2]|0;
   $59 = $13;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   ;HEAP32[$59+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$61+4>>2]|0;
   $62 = $14;
   $11 = $__t$i2;
   $63 = $11;
   ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;
   $__r = 2;
  }
  $64 = $__r;
  $25 = $64;
  $104 = $25;
  STACKTOP = sp;return ($104|0);
 }
 return 0|0;
}
function __ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 16|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 64|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = HEAP32[$25>>2]|0;
 $27 = $18;
 $28 = $17;
 $29 = (FUNCTION_TABLE_iii[$26 & 1023]($27,$28)|0);
 if (!($29)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $30 = $17;
 $31 = $18;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 $12 = $32;
 $33 = $12;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$33+4>>2]|0;
 $34 = $13;
 $35 = $14;
 $10 = $35;
 $36 = $10;
 ;HEAP32[$34+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;
 $37 = $14;
 $11 = $__t$i;
 $38 = $11;
 ;HEAP32[$37+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$37+4>>2]=HEAP32[$38+4>>2]|0;
 $39 = $__r;
 $40 = (($39) + 1)|0;
 $__r = $40;
 $41 = $19;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = $16;
 $45 = (FUNCTION_TABLE_iii[$42 & 1023]($43,$44)|0);
 if ($45) {
  $46 = $16;
  $47 = $17;
  $3 = $46;
  $4 = $47;
  $48 = $3;
  $2 = $48;
  $49 = $2;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$49+4>>2]|0;
  $50 = $3;
  $51 = $4;
  $0 = $51;
  $52 = $0;
  ;HEAP32[$50+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;
  $53 = $4;
  $1 = $__t$i2;
  $54 = $1;
  ;HEAP32[$53+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;
  $55 = $__r;
  $56 = (($55) + 1)|0;
  $__r = $56;
  $57 = $19;
  $58 = HEAP32[$57>>2]|0;
  $59 = $16;
  $60 = $15;
  $61 = (FUNCTION_TABLE_iii[$58 & 1023]($59,$60)|0);
  if ($61) {
   $62 = $15;
   $63 = $16;
   $8 = $62;
   $9 = $63;
   $64 = $8;
   $7 = $64;
   $65 = $7;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$65+4>>2]|0;
   $66 = $8;
   $67 = $9;
   $5 = $67;
   $68 = $5;
   ;HEAP32[$66+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$66+4>>2]=HEAP32[$68+4>>2]|0;
   $69 = $9;
   $6 = $__t$i1;
   $70 = $6;
   ;HEAP32[$69+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;
   $71 = $__r;
   $72 = (($71) + 1)|0;
   $__r = $72;
  }
 }
 $73 = $__r;
 STACKTOP = sp;return ($73|0);
}
function __ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 24|0;
 $__t$i2 = sp + 56|0;
 $__t$i1 = sp + 88|0;
 $__t$i = sp + 16|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = HEAP32[$32>>2]|0;
 $34 = $24;
 $35 = $23;
 $36 = (FUNCTION_TABLE_iii[$33 & 1023]($34,$35)|0);
 if (!($36)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $37 = $23;
 $38 = $24;
 $18 = $37;
 $19 = $38;
 $39 = $18;
 $17 = $39;
 $40 = $17;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$40+4>>2]|0;
 $41 = $18;
 $42 = $19;
 $15 = $42;
 $43 = $15;
 ;HEAP32[$41+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$43+4>>2]|0;
 $44 = $19;
 $16 = $__t$i;
 $45 = $16;
 ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$45+4>>2]|0;
 $46 = $__r;
 $47 = (($46) + 1)|0;
 $__r = $47;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = $22;
 $52 = (FUNCTION_TABLE_iii[$49 & 1023]($50,$51)|0);
 if ($52) {
  $53 = $22;
  $54 = $23;
  $8 = $53;
  $9 = $54;
  $55 = $8;
  $7 = $55;
  $56 = $7;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$56+4>>2]|0;
  $57 = $8;
  $58 = $9;
  $5 = $58;
  $59 = $5;
  ;HEAP32[$57+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$59+4>>2]|0;
  $60 = $9;
  $6 = $__t$i2;
  $61 = $6;
  ;HEAP32[$60+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;
  $62 = $__r;
  $63 = (($62) + 1)|0;
  $__r = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  $66 = $22;
  $67 = $21;
  $68 = (FUNCTION_TABLE_iii[$65 & 1023]($66,$67)|0);
  if ($68) {
   $69 = $21;
   $70 = $22;
   $3 = $69;
   $4 = $70;
   $71 = $3;
   $2 = $71;
   $72 = $2;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$72+4>>2]|0;
   $73 = $3;
   $74 = $4;
   $0 = $74;
   $75 = $0;
   ;HEAP32[$73+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$75+4>>2]|0;
   $76 = $4;
   $1 = $__t$i3;
   $77 = $1;
   ;HEAP32[$76+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$76+4>>2]=HEAP32[$77+4>>2]|0;
   $78 = $__r;
   $79 = (($78) + 1)|0;
   $__r = $79;
   $80 = $25;
   $81 = HEAP32[$80>>2]|0;
   $82 = $21;
   $83 = $20;
   $84 = (FUNCTION_TABLE_iii[$81 & 1023]($82,$83)|0);
   if ($84) {
    $85 = $20;
    $86 = $21;
    $13 = $85;
    $14 = $86;
    $87 = $13;
    $12 = $87;
    $88 = $12;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$88+4>>2]|0;
    $89 = $13;
    $90 = $14;
    $10 = $90;
    $91 = $10;
    ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;
    $92 = $14;
    $11 = $__t$i1;
    $93 = $11;
    ;HEAP32[$92+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$92+4>>2]=HEAP32[$93+4>>2]|0;
    $94 = $__r;
    $95 = (($94) + 1)|0;
    $__r = $95;
   }
  }
 }
 $96 = $__r;
 STACKTOP = sp;return ($96|0);
}
function __ZNSt3__118__insertion_sort_3IRPFbRK12element_typeS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 24|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = (($6) + 16|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = (($9) + 8|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = (($13) + 8|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = HEAP32[$18>>2]|0;
  $20 = $__i;
  $21 = $__j;
  $22 = (FUNCTION_TABLE_iii[$19 & 1023]($20,$21)|0);
  if ($22) {
   $23 = $__i;
   $2 = $23;
   $24 = $2;
   ;HEAP32[$__t+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$24+4>>2]|0;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__j;
    $28 = $__k;
    $0 = $28;
    $29 = $0;
    ;HEAP32[$27+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $__k;
    $__j = $30;
    $31 = $__j;
    $32 = $3;
    $33 = ($31|0)!=($32|0);
    if ($33) {
     $34 = $5;
     $35 = HEAP32[$34>>2]|0;
     $36 = $__k;
     $37 = (($36) + -8|0);
     $__k = $37;
     $38 = (FUNCTION_TABLE_iii[$35 & 1023]($__t,$37)|0);
     $44 = $38;
    } else {
     $44 = 0;
    }
    if (!($44)) {
     break;
    }
   }
   $39 = $__j;
   $1 = $__t;
   $40 = $1;
   ;HEAP32[$39+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;
  }
  $41 = $__i;
  $__j = $41;
  $42 = $__i;
  $43 = (($42) + 8|0);
  $__i = $43;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK12element_typeS3_EPS1_EEbT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 72|0;
 $__t = sp + 64|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 8)&-1;
 switch ($17|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $8 = $$expand_i1_val;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 3:  {
  $33 = $9;
  $34 = $9;
  $35 = (($34) + 8|0);
  $36 = $10;
  $37 = (($36) + -8|0);
  $10 = $37;
  $38 = $11;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($33,$35,$37,$38)|0);
  $$expand_i1_val4 = 1;
  $8 = $$expand_i1_val4;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 2:  {
  $18 = $11;
  $19 = HEAP32[$18>>2]|0;
  $20 = $10;
  $21 = (($20) + -8|0);
  $10 = $21;
  $22 = $9;
  $23 = (FUNCTION_TABLE_iii[$19 & 1023]($21,$22)|0);
  if ($23) {
   $24 = $9;
   $25 = $10;
   $6 = $24;
   $7 = $25;
   $26 = $6;
   $5 = $26;
   $27 = $5;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$27+4>>2]|0;
   $28 = $6;
   $29 = $7;
   $3 = $29;
   $30 = $3;
   ;HEAP32[$28+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;
   $31 = $7;
   $4 = $__t$i;
   $32 = $4;
   ;HEAP32[$31+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$32+4>>2]|0;
  }
  $$expand_i1_val2 = 1;
  $8 = $$expand_i1_val2;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 4:  {
  $39 = $9;
  $40 = $9;
  $41 = (($40) + 8|0);
  $42 = $9;
  $43 = (($42) + 16|0);
  $44 = $10;
  $45 = (($44) + -8|0);
  $10 = $45;
  $46 = $11;
  (__ZNSt3__17__sort4IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_T_($39,$41,$43,$45,$46)|0);
  $$expand_i1_val6 = 1;
  $8 = $$expand_i1_val6;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 5:  {
  $47 = $9;
  $48 = $9;
  $49 = (($48) + 8|0);
  $50 = $9;
  $51 = (($50) + 16|0);
  $52 = $9;
  $53 = (($52) + 24|0);
  $54 = $10;
  $55 = (($54) + -8|0);
  $10 = $55;
  $56 = $11;
  (__ZNSt3__17__sort5IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_S8_S8_T_($47,$49,$51,$53,$55,$56)|0);
  $$expand_i1_val8 = 1;
  $8 = $$expand_i1_val8;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 default: {
  $57 = $9;
  $58 = (($57) + 16|0);
  $__j = $58;
  $59 = $9;
  $60 = $9;
  $61 = (($60) + 8|0);
  $62 = $__j;
  $63 = $11;
  (__ZNSt3__17__sort3IRPFbRK12element_typeS3_EPS1_EEjT0_S8_S8_T_($59,$61,$62,$63)|0);
  $__limit = 8;
  $__count = 0;
  $64 = $__j;
  $65 = (($64) + 8|0);
  $__i = $65;
  while(1) {
   $66 = $__i;
   $67 = $10;
   $68 = ($66|0)!=($67|0);
   if (!($68)) {
    label = 22;
    break;
   }
   $69 = $11;
   $70 = HEAP32[$69>>2]|0;
   $71 = $__i;
   $72 = $__j;
   $73 = (FUNCTION_TABLE_iii[$70 & 1023]($71,$72)|0);
   if ($73) {
    $74 = $__i;
    $1 = $74;
    $75 = $1;
    ;HEAP32[$__t+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$75+4>>2]|0;
    $76 = $__j;
    $__k = $76;
    $77 = $__i;
    $__j = $77;
    while(1) {
     $78 = $__j;
     $79 = $__k;
     $0 = $79;
     $80 = $0;
     ;HEAP32[$78+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;
     $81 = $__k;
     $__j = $81;
     $82 = $__j;
     $83 = $9;
     $84 = ($82|0)!=($83|0);
     if ($84) {
      $85 = $11;
      $86 = HEAP32[$85>>2]|0;
      $87 = $__k;
      $88 = (($87) + -8|0);
      $__k = $88;
      $89 = (FUNCTION_TABLE_iii[$86 & 1023]($__t,$88)|0);
      $103 = $89;
     } else {
      $103 = 0;
     }
     if (!($103)) {
      break;
     }
    }
    $90 = $__j;
    $2 = $__t;
    $91 = $2;
    ;HEAP32[$90+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$91+4>>2]|0;
    $92 = $__count;
    $93 = (($92) + 1)|0;
    $__count = $93;
    $94 = ($93|0)==(8);
    if ($94) {
     label = 18;
     break;
    }
   }
   $99 = $__i;
   $__j = $99;
   $100 = $__i;
   $101 = (($100) + 8|0);
   $__i = $101;
  }
  if ((label|0) == 18) {
   $95 = $__i;
   $96 = (($95) + 8|0);
   $__i = $96;
   $97 = $10;
   $98 = ($96|0)==($97|0);
   $$expand_i1_val10 = $98&1;
   $8 = $$expand_i1_val10;
   $$pre_trunc = $8;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $8 = $$expand_i1_val12;
   $$pre_trunc = $8;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
 }
 }
 return 0|0;
}
function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this,$bd,$world) {
 $this = $this|0;
 $bd = $bd|0;
 $world = $world|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bd;
 $2 = $world;
 $3 = $0;
 $4 = (($3) + 12|0);
 __ZN11b2TransformC2Ev($4);
 $5 = (($3) + 28|0);
 __ZN7b2SweepC2Ev($5);
 $6 = (($3) + 64|0);
 __ZN6b2Vec2C2Ev($6);
 $7 = (($3) + 76|0);
 __ZN6b2Vec2C2Ev($7);
 $8 = $1;
 $9 = (($8) + 4|0);
 $10 = (__ZNK6b2Vec27IsValidEv($9)|0);
 if (!($10)) {
  ___assert_fail((21072|0),(21096|0),27,(21176|0));
  // unreachable;
 }
 $11 = $1;
 $12 = (($11) + 16|0);
 $13 = (__ZNK6b2Vec27IsValidEv($12)|0);
 if (!($13)) {
  ___assert_fail((21184|0),(21096|0),28,(21176|0));
  // unreachable;
 }
 $14 = $1;
 $15 = (($14) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (__Z9b2IsValidf($16)|0);
 if (!($17)) {
  ___assert_fail((21216|0),(21096|0),29,(21176|0));
  // unreachable;
 }
 $18 = $1;
 $19 = (($18) + 24|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (__Z9b2IsValidf($20)|0);
 if (!($21)) {
  ___assert_fail((21240|0),(21096|0),30,(21176|0));
  // unreachable;
 }
 $22 = $1;
 $23 = (($22) + 32|0);
 $24 = +HEAPF32[$23>>2];
 $25 = (__Z9b2IsValidf($24)|0);
 if (!($25)) {
  ___assert_fail((21272|0),(21096|0),31,(21176|0));
  // unreachable;
 }
 $26 = $1;
 $27 = (($26) + 32|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 >= 0.0;
 if (!($29)) {
  ___assert_fail((21272|0),(21096|0),31,(21176|0));
  // unreachable;
 }
 $30 = $1;
 $31 = (($30) + 28|0);
 $32 = +HEAPF32[$31>>2];
 $33 = (__Z9b2IsValidf($32)|0);
 if (!($33)) {
  ___assert_fail((21336|0),(21096|0),32,(21176|0));
  // unreachable;
 }
 $34 = $1;
 $35 = (($34) + 28|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 >= 0.0;
 if (!($37)) {
  ___assert_fail((21336|0),(21096|0),32,(21176|0));
  // unreachable;
 }
 $38 = (($3) + 4|0);
 HEAP16[$38>>1] = 0;
 $39 = $1;
 $40 = (($39) + 39|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = (($3) + 4|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = $45 | 8;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
 }
 $48 = $1;
 $49 = (($48) + 38|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&1;
 if ($51) {
  $52 = (($3) + 4|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = $54 | 16;
  $56 = $55&65535;
  HEAP16[$52>>1] = $56;
 }
 $57 = $1;
 $58 = (($57) + 36|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&1;
 if ($60) {
  $61 = (($3) + 4|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = $63 | 4;
  $65 = $64&65535;
  HEAP16[$61>>1] = $65;
 }
 $66 = $1;
 $67 = (($66) + 37|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&1;
 if ($69) {
  $70 = (($3) + 4|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $72 | 2;
  $74 = $73&65535;
  HEAP16[$70>>1] = $74;
 }
 $75 = $1;
 $76 = (($75) + 40|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&1;
 if ($78) {
  $79 = (($3) + 4|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 | 32;
  $83 = $82&65535;
  HEAP16[$79>>1] = $83;
 }
 $84 = $2;
 $85 = (($3) + 88|0);
 HEAP32[$85>>2] = $84;
 $86 = (($3) + 12|0);
 $87 = $1;
 $88 = (($87) + 4|0);
 ;HEAP32[$86+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$88+4>>2]|0;
 $89 = (($3) + 12|0);
 $90 = (($89) + 8|0);
 $91 = $1;
 $92 = (($91) + 12|0);
 $93 = +HEAPF32[$92>>2];
 __ZN5b2Rot3SetEf($90,$93);
 $94 = (($3) + 28|0);
 __ZN6b2Vec27SetZeroEv($94);
 $95 = (($3) + 28|0);
 $96 = (($95) + 8|0);
 $97 = (($3) + 12|0);
 ;HEAP32[$96+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$97+4>>2]|0;
 $98 = (($3) + 28|0);
 $99 = (($98) + 16|0);
 $100 = (($3) + 12|0);
 ;HEAP32[$99+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$100+4>>2]|0;
 $101 = $1;
 $102 = (($101) + 12|0);
 $103 = +HEAPF32[$102>>2];
 $104 = (($3) + 28|0);
 $105 = (($104) + 24|0);
 HEAPF32[$105>>2] = $103;
 $106 = $1;
 $107 = (($106) + 12|0);
 $108 = +HEAPF32[$107>>2];
 $109 = (($3) + 28|0);
 $110 = (($109) + 28|0);
 HEAPF32[$110>>2] = $108;
 $111 = (($3) + 28|0);
 $112 = (($111) + 32|0);
 HEAPF32[$112>>2] = 0.0;
 $113 = (($3) + 116|0);
 HEAP32[$113>>2] = 0;
 $114 = (($3) + 120|0);
 HEAP32[$114>>2] = 0;
 $115 = (($3) + 92|0);
 HEAP32[$115>>2] = 0;
 $116 = (($3) + 96|0);
 HEAP32[$116>>2] = 0;
 $117 = (($3) + 64|0);
 $118 = $1;
 $119 = (($118) + 16|0);
 ;HEAP32[$117+0>>2]=HEAP32[$119+0>>2]|0;HEAP32[$117+4>>2]=HEAP32[$119+4>>2]|0;
 $120 = $1;
 $121 = (($120) + 24|0);
 $122 = +HEAPF32[$121>>2];
 $123 = (($3) + 72|0);
 HEAPF32[$123>>2] = $122;
 $124 = $1;
 $125 = (($124) + 28|0);
 $126 = +HEAPF32[$125>>2];
 $127 = (($3) + 140|0);
 HEAPF32[$127>>2] = $126;
 $128 = $1;
 $129 = (($128) + 32|0);
 $130 = +HEAPF32[$129>>2];
 $131 = (($3) + 144|0);
 HEAPF32[$131>>2] = $130;
 $132 = $1;
 $133 = (($132) + 48|0);
 $134 = +HEAPF32[$133>>2];
 $135 = (($3) + 148|0);
 HEAPF32[$135>>2] = $134;
 $136 = (($3) + 76|0);
 __ZN6b2Vec27SetZeroEv($136);
 $137 = (($3) + 84|0);
 HEAPF32[$137>>2] = 0.0;
 $138 = (($3) + 152|0);
 HEAPF32[$138>>2] = 0.0;
 $139 = $1;
 $140 = HEAP32[$139>>2]|0;
 HEAP32[$3>>2] = $140;
 $141 = HEAP32[$3>>2]|0;
 $142 = ($141|0)==(2);
 if ($142) {
  $143 = (($3) + 124|0);
  HEAPF32[$143>>2] = 1.0;
  $144 = (($3) + 128|0);
  HEAPF32[$144>>2] = 1.0;
  $147 = (($3) + 132|0);
  HEAPF32[$147>>2] = 0.0;
  $148 = (($3) + 136|0);
  HEAPF32[$148>>2] = 0.0;
  $149 = $1;
  $150 = (($149) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($3) + 156|0);
  HEAP32[$152>>2] = $151;
  $153 = (($3) + 108|0);
  HEAP32[$153>>2] = 0;
  $154 = (($3) + 112|0);
  HEAP32[$154>>2] = 0;
  $155 = (($3) + 104|0);
  HEAP32[$155>>2] = -1;
  $156 = (($3) + 100|0);
  HEAP32[$156>>2] = -1;
  $157 = (($3) + 160|0);
  $158 = (($157) + 8|0);
  HEAPF32[$158>>2] = -1.0;
  $159 = (($3) + 160|0);
  $160 = (($159) + 4|0);
  HEAPF32[$160>>2] = -1.0;
  $161 = (($3) + 160|0);
  HEAPF32[$161>>2] = -1.0;
  STACKTOP = sp;return;
 } else {
  $145 = (($3) + 124|0);
  HEAPF32[$145>>2] = 0.0;
  $146 = (($3) + 128|0);
  HEAPF32[$146>>2] = 0.0;
  $147 = (($3) + 132|0);
  HEAPF32[$147>>2] = 0.0;
  $148 = (($3) + 136|0);
  HEAPF32[$148>>2] = 0.0;
  $149 = $1;
  $150 = (($149) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($3) + 156|0);
  HEAP32[$152>>2] = $151;
  $153 = (($3) + 108|0);
  HEAP32[$153>>2] = 0;
  $154 = (($3) + 112|0);
  HEAP32[$154>>2] = 0;
  $155 = (($3) + 104|0);
  HEAP32[$155>>2] = -1;
  $156 = (($3) + 100|0);
  HEAP32[$156>>2] = -1;
  $157 = (($3) + 160|0);
  $158 = (($157) + 8|0);
  HEAPF32[$158>>2] = -1.0;
  $159 = (($3) + 160|0);
  $160 = (($159) + 4|0);
  HEAPF32[$160>>2] = -1.0;
  $161 = (($3) + 160|0);
  HEAPF32[$161>>2] = -1.0;
  STACKTOP = sp;return;
 }
}
function __ZN6b2Body13ResetMassDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $f = 0;
 var $localCenter = 0, $massData = 0, $oldCenter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenter = sp + 40|0;
 $massData = sp + 16|0;
 $1 = sp + 72|0;
 $oldCenter = sp;
 $2 = sp + 32|0;
 $3 = sp + 56|0;
 $4 = sp + 48|0;
 $0 = $this;
 $5 = $0;
 $6 = (($5) + 124|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = (($5) + 128|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = (($5) + 132|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = (($5) + 136|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = (($5) + 28|0);
 __ZN6b2Vec27SetZeroEv($10);
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = HEAP32[$5>>2]|0;
  $14 = ($13|0)==(1);
  if (!($14)) {
   $26 = HEAP32[$5>>2]|0;
   $27 = ($26|0)==(2);
   if (!($27)) {
    ___assert_fail((21448|0),(21096|0),305,(21480|0));
    // unreachable;
   }
   ;HEAP32[$localCenter+0>>2]=HEAP32[3192+0>>2]|0;HEAP32[$localCenter+4>>2]=HEAP32[3192+4>>2]|0;
   $28 = (($5) + 108|0);
   $29 = HEAP32[$28>>2]|0;
   $f = $29;
   while(1) {
    $30 = $f;
    $31 = ($30|0)!=(0|0);
    if (!($31)) {
     break;
    }
    $32 = $f;
    $33 = +HEAPF32[$32>>2];
    $34 = $33 == 0.0;
    if ($34) {
    } else {
     __ZN10b2MassDataC2Ev($massData);
     $35 = $f;
     __ZNK9b2Fixture11GetMassDataEP10b2MassData($35,$massData);
     $36 = +HEAPF32[$massData>>2];
     $37 = (($5) + 124|0);
     $38 = +HEAPF32[$37>>2];
     $39 = $38 + $36;
     HEAPF32[$37>>2] = $39;
     $40 = +HEAPF32[$massData>>2];
     $41 = (($massData) + 4|0);
     __ZmlfRK6b2Vec2($1,$40,$41);
     __ZN6b2Vec2pLERKS_($localCenter,$1);
     $42 = (($massData) + 12|0);
     $43 = +HEAPF32[$42>>2];
     $44 = (($5) + 132|0);
     $45 = +HEAPF32[$44>>2];
     $46 = $45 + $43;
     HEAPF32[$44>>2] = $46;
    }
    $47 = $f;
    $48 = (($47) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $f = $49;
   }
   $50 = (($5) + 124|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $51 > 0.0;
   if ($52) {
    $53 = (($5) + 124|0);
    $54 = +HEAPF32[$53>>2];
    $55 = 1.0 / $54;
    $56 = (($5) + 128|0);
    HEAPF32[$56>>2] = $55;
    $57 = (($5) + 128|0);
    $58 = +HEAPF32[$57>>2];
    __ZN6b2Vec2mLEf($localCenter,$58);
   } else {
    $59 = (($5) + 124|0);
    HEAPF32[$59>>2] = 1.0;
    $60 = (($5) + 128|0);
    HEAPF32[$60>>2] = 1.0;
   }
   $61 = (($5) + 132|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $62 > 0.0;
   do {
    if ($63) {
     $64 = (($5) + 4|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = $66 & 16;
     $68 = ($67|0)==(0);
     if ($68) {
      $69 = (($5) + 124|0);
      $70 = +HEAPF32[$69>>2];
      $71 = (+__Z5b2DotRK6b2Vec2S1_($localCenter,$localCenter));
      $72 = $70 * $71;
      $73 = (($5) + 132|0);
      $74 = +HEAPF32[$73>>2];
      $75 = $74 - $72;
      HEAPF32[$73>>2] = $75;
      $76 = (($5) + 132|0);
      $77 = +HEAPF32[$76>>2];
      $78 = $77 > 0.0;
      if ($78) {
       $79 = (($5) + 132|0);
       $80 = +HEAPF32[$79>>2];
       $81 = 1.0 / $80;
       $82 = (($5) + 136|0);
       HEAPF32[$82>>2] = $81;
       break;
      } else {
       ___assert_fail((21496|0),(21096|0),340,(21480|0));
       // unreachable;
      }
     } else {
      label = 20;
     }
    } else {
     label = 20;
    }
   } while(0);
   if ((label|0) == 20) {
    $83 = (($5) + 132|0);
    HEAPF32[$83>>2] = 0.0;
    $84 = (($5) + 136|0);
    HEAPF32[$84>>2] = 0.0;
   }
   $85 = (($5) + 28|0);
   $86 = (($85) + 16|0);
   ;HEAP32[$oldCenter+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$oldCenter+4>>2]=HEAP32[$86+4>>2]|0;
   $87 = (($5) + 28|0);
   ;HEAP32[$87+0>>2]=HEAP32[$localCenter+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$localCenter+4>>2]|0;
   $88 = (($5) + 28|0);
   $89 = (($88) + 8|0);
   $90 = (($5) + 28|0);
   $91 = (($90) + 16|0);
   $92 = (($5) + 12|0);
   $93 = (($5) + 28|0);
   __Z5b2MulRK11b2TransformRK6b2Vec2($2,$92,$93);
   ;HEAP32[$91+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;
   $94 = (($5) + 64|0);
   $95 = (($5) + 72|0);
   $96 = +HEAPF32[$95>>2];
   $97 = (($5) + 28|0);
   $98 = (($97) + 16|0);
   __ZmiRK6b2Vec2S1_($4,$98,$oldCenter);
   __Z7b2CrossfRK6b2Vec2($3,$96,$4);
   __ZN6b2Vec2pLERKS_($94,$3);
   STACKTOP = sp;return;
  }
 }
 $15 = (($5) + 28|0);
 $16 = (($15) + 8|0);
 $17 = (($5) + 12|0);
 ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;
 $18 = (($5) + 28|0);
 $19 = (($18) + 16|0);
 $20 = (($5) + 12|0);
 ;HEAP32[$19+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;
 $21 = (($5) + 28|0);
 $22 = (($21) + 28|0);
 $23 = +HEAPF32[$22>>2];
 $24 = (($5) + 28|0);
 $25 = (($24) + 24|0);
 HEAPF32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN6b2Body19SynchronizeFixturesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $broadPhase = 0, $f = 0, $xf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xf1 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $0 = $this;
 $3 = $0;
 __ZN11b2TransformC2Ev($xf1);
 $4 = (($xf1) + 8|0);
 $5 = (($3) + 28|0);
 $6 = (($5) + 24|0);
 $7 = +HEAPF32[$6>>2];
 __ZN5b2Rot3SetEf($4,$7);
 $8 = (($3) + 28|0);
 $9 = (($8) + 8|0);
 $10 = (($xf1) + 8|0);
 $11 = (($3) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($2,$10,$11);
 __ZmiRK6b2Vec2S1_($1,$9,$2);
 ;HEAP32[$xf1+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$xf1+4>>2]=HEAP32[$1+4>>2]|0;
 $12 = (($3) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 102876|0);
 $broadPhase = $14;
 $15 = (($3) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $f = $16;
 while(1) {
  $17 = $f;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $f;
  $20 = $broadPhase;
  $21 = (($3) + 12|0);
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($19,$20,$xf1,$21);
  $22 = $f;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $f = $24;
 }
 STACKTOP = sp;return;
}
function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $allocator = 0, $broadPhase = 0, $fixture = 0, $memory = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = (($3) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK7b2World8IsLockedEv($5)|0);
 $7 = $6&1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  ___assert_fail((21400|0),(21096|0),157,(21432|0));
  // unreachable;
 }
 $9 = (($3) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK7b2World8IsLockedEv($10)|0);
 $12 = $11&1;
 $13 = ($12|0)==(1);
 if ($13) {
  $0 = 0;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $14 = (($3) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $allocator = $16;
 $17 = $allocator;
 $18 = (__ZN16b2BlockAllocator8AllocateEi($17,52)|0);
 $memory = $18;
 $19 = $memory;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = 0;
 } else {
  __ZN9b2FixtureC2Ev($19);
  $21 = $19;
 }
 $fixture = $21;
 $22 = $fixture;
 $23 = $allocator;
 $24 = $2;
 __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($22,$23,$3,$24);
 $25 = (($3) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = $27 & 32;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = (($3) + 88|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 102876|0);
  $broadPhase = $32;
  $33 = $fixture;
  $34 = $broadPhase;
  $35 = (($3) + 12|0);
  __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($33,$34,$35);
 }
 $36 = (($3) + 108|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $fixture;
 $39 = (($38) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $fixture;
 $41 = (($3) + 108|0);
 HEAP32[$41>>2] = $40;
 $42 = (($3) + 112|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[$42>>2] = $44;
 $45 = (($3) + 88|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 103080|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[$47>>2] = $49;
 $50 = $fixture;
 $51 = (($50) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($3) + 88|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 103084|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($52))|0;
 HEAP32[$55>>2] = $57;
 $58 = (($3) + 88|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 103093|0);
 HEAP8[$60>>0] = 1;
 $61 = $fixture;
 $62 = (($61) + 8|0);
 HEAP32[$62>>2] = $3;
 $63 = $fixture;
 $64 = +HEAPF32[$63>>2];
 $65 = $64 > 0.0;
 if ($65) {
  __ZN6b2Body13ResetMassDataEv($3);
 }
 $66 = (($3) + 88|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + 102872|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 | 1;
 HEAP32[$68>>2] = $70;
 $71 = $fixture;
 $72 = (($71) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (__ZNK7b2Shape7GetTypeEv($73)|0);
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $fixture;
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (__ZNK7b2Shape7GetTypeEv($78)|0);
  $80 = ($79|0)!=(1);
  if ($80) {
   $81 = $fixture;
   $82 = (($81) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (__ZNK7b2Shape7GetTypeEv($83)|0);
   $85 = ($84|0)!=(3);
   if ($85) {
    $86 = $fixture;
    $87 = (($86) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (__ZNK7b2Shape7GetTypeEv($88)|0);
    $90 = ($89|0)!=(2);
    if ($90) {
     HEAP8[3200>>0] = 0;
    }
   }
  }
 }
 $91 = $fixture;
 $0 = $91;
 $92 = $0;
 STACKTOP = sp;return ($92|0);
}
function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this,$shape,$density) {
 $this = $this|0;
 $shape = $shape|0;
 $density = +$density;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $def = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $def = sp;
 $0 = $this;
 $1 = $shape;
 $2 = $density;
 $3 = $0;
 __ZN12b2FixtureDefC2Ev($def);
 $4 = $1;
 HEAP32[$def>>2] = $4;
 $5 = $2;
 $6 = (($def) + 16|0);
 HEAPF32[$6>>2] = $5;
 $7 = (__ZN6b2Body13CreateFixtureEPK12b2FixtureDef($3,$def)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK6b2Body13ShouldCollideEPKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $other;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(2);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(2);
  if ($8) {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $28 = $$pre_trunc&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $9 = (($3) + 116|0);
 $10 = HEAP32[$9>>2]|0;
 $jn = $10;
 while(1) {
  $11 = $jn;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 12;
   break;
  }
  $13 = $jn;
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ($14|0)==($15|0);
  if ($16) {
   $17 = $jn;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 61|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&1;
   $23 = $22&1;
   $24 = ($23|0)==(0);
   if ($24) {
    label = 8;
    break;
   }
  }
  $25 = $jn;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $jn = $27;
 }
 if ((label|0) == 8) {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 12) {
  $$expand_i1_val4 = 1;
  $0 = $$expand_i1_val4;
  $$pre_trunc = $0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZNK6b2Vec27IsValidEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = (__Z9b2IsValidf($2)|0);
 if (!($3)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = (($1) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = (__Z9b2IsValidf($5)|0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __Z9b2IsValidf($x) {
 $x = +$x;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $infinity = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $3 = $1;
 $4 = $2 != $3;
 if ($4) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
 } else {
  $infinity = inf;
  $5 = $infinity;
  $6 = -$5;
  $7 = $1;
  $8 = $6 < $7;
  if ($8) {
   $9 = $1;
   $10 = $infinity;
   $11 = $9 < $10;
   $12 = $11;
  } else {
   $12 = 0;
  }
  $$expand_i1_val2 = $12&1;
  $0 = $$expand_i1_val2;
 }
 $$pre_trunc = $0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function __ZNK7b2World8IsLockedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 102872|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(2);
 STACKTOP = sp;return ($5|0);
}
function __ZN6b2Body8SetAwakeEb($this,$flag) {
 $this = $this|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $flag&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if (!($5)) {
  $17 = (($3) + 4|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = $19 & -3;
  $21 = $20&65535;
  HEAP16[$17>>1] = $21;
  $22 = (($3) + 152|0);
  HEAPF32[$22>>2] = 0.0;
  $23 = (($3) + 64|0);
  __ZN6b2Vec27SetZeroEv($23);
  $24 = (($3) + 72|0);
  HEAPF32[$24>>2] = 0.0;
  $25 = (($3) + 76|0);
  __ZN6b2Vec27SetZeroEv($25);
  $26 = (($3) + 84|0);
  HEAPF32[$26>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $6 = (($3) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 2;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (($3) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $13 | 2;
  $15 = $14&65535;
  HEAP16[$11>>1] = $15;
  $16 = (($3) + 152|0);
  HEAPF32[$16>>2] = 0.0;
 }
 STACKTOP = sp;return;
}
function __ZN10b2MassDataC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK9b2Fixture11GetMassDataEP10b2MassData($this,$massData) {
 $this = $this|0;
 $massData = $massData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $massData;
 $2 = $0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = +HEAPF32[$2>>2];
 FUNCTION_TABLE_viid[$7 & 31]($4,$8,$9);
 STACKTOP = sp;return;
}
function __ZN12b2FixtureDefC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 22|0);
 __ZN8b2FilterC2Ev($2);
 HEAP32[$1>>2] = 0;
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 8|0);
 HEAPF32[$4>>2] = 0.20000000298023224;
 $5 = (($1) + 12|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = (($1) + 16|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = (($1) + 20|0);
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNK6b2Body8IsActiveEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 32;
 $6 = ($5|0)==(32);
 STACKTOP = sp;return ($6|0);
}
function __ZN8b2FilterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP16[$1>>1] = 1;
 $2 = (($1) + 2|0);
 HEAP16[$2>>1] = -1;
 $3 = (($1) + 4|0);
 HEAP16[$3>>1] = 0;
 STACKTOP = sp;return;
}
function __ZN16b2ContactManagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN12b2BroadPhaseC2Ev($3);
 $4 = (($3) + 128|0);
 __THREW__ = 0;
 invoke_vi(480,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
  } else {
   $7 = (($3) + 100|0);
   HEAP32[$7>>2] = 0;
   $8 = (($3) + 108|0);
   HEAP32[$8>>2] = 0;
   __THREW__ = 0;
   $9 = (invoke_ii(481,20)|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = (($3) + 104|0);
    HEAP32[$12>>2] = $9;
    $13 = (($3) + 104|0);
    $14 = HEAP32[$13>>2]|0;
    ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
    $15 = (($3) + 116|0);
    HEAP32[$15>>2] = 21512;
    $16 = (($3) + 120|0);
    HEAP32[$16>>2] = 21520;
    $17 = (($3) + 124|0);
    HEAP32[$17>>2] = 0;
    STACKTOP = sp;return;
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   $1 = $20;
   $2 = $21;
   __THREW__ = 0;
   invoke_vi(482,($4|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $28 = ___cxa_find_matching_catch(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(483,($3|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 }
 $26 = $1;
 $27 = $2;
 ___resumeException($26|0);
 // unreachable;
}
function __ZN16b2ContactManagerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZdaPv($5);
 }
 $7 = (($3) + 128|0);
 __THREW__ = 0;
 invoke_vi(482,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN12b2BroadPhaseD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(483,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 }
 $14 = $1;
 $15 = $2;
 ___resumeException($14|0);
 // unreachable;
}
function __ZN16b2ContactManager7DestroyEP9b2Contact($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0;
 var $fixtureA = 0, $fixtureB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN9b2Contact11GetFixtureAEv($3)|0);
 $fixtureA = $4;
 $5 = $1;
 $6 = (__ZN9b2Contact11GetFixtureBEv($5)|0);
 $fixtureB = $6;
 $7 = $fixtureA;
 $8 = (__ZN9b2Fixture7GetBodyEv($7)|0);
 $bodyA = $8;
 $9 = $fixtureB;
 $10 = (__ZN9b2Fixture7GetBodyEv($9)|0);
 $bodyB = $10;
 $11 = (($2) + 120|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = (__ZNK9b2Contact10IsTouchingEv($14)|0);
  if ($15) {
   $16 = (($2) + 120|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $1;
   FUNCTION_TABLE_vii[$20 & 1023]($17,$21);
  }
 }
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $1;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 12|0);
  HEAP32[$32>>2] = $28;
 }
 $33 = $1;
 $34 = (($33) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $1;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = (($40) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 8|0);
  HEAP32[$43>>2] = $39;
 }
 $44 = $1;
 $45 = (($2) + 100|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44|0)==($46|0);
 if ($47) {
  $48 = $1;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($2) + 100|0);
  HEAP32[$51>>2] = $50;
 }
 $52 = $1;
 $53 = (($52) + 16|0);
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = $1;
  $58 = (($57) + 16|0);
  $59 = (($58) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $1;
  $62 = (($61) + 16|0);
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 12|0);
  HEAP32[$65>>2] = $60;
 }
 $66 = $1;
 $67 = (($66) + 16|0);
 $68 = (($67) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = $1;
  $72 = (($71) + 16|0);
  $73 = (($72) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $1;
  $76 = (($75) + 16|0);
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 8|0);
  HEAP32[$79>>2] = $74;
 }
 $80 = $1;
 $81 = (($80) + 16|0);
 $82 = $bodyA;
 $83 = (($82) + 120|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($81|0)==($84|0);
 if ($85) {
  $86 = $1;
  $87 = (($86) + 16|0);
  $88 = (($87) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $bodyA;
  $91 = (($90) + 120|0);
  HEAP32[$91>>2] = $89;
 }
 $92 = $1;
 $93 = (($92) + 32|0);
 $94 = (($93) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = $1;
  $98 = (($97) + 32|0);
  $99 = (($98) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $1;
  $102 = (($101) + 32|0);
  $103 = (($102) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 12|0);
  HEAP32[$105>>2] = $100;
 }
 $106 = $1;
 $107 = (($106) + 32|0);
 $108 = (($107) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = $1;
  $112 = (($111) + 32|0);
  $113 = (($112) + 8|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $1;
  $116 = (($115) + 32|0);
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 8|0);
  HEAP32[$119>>2] = $114;
 }
 $120 = $1;
 $121 = (($120) + 32|0);
 $122 = $bodyB;
 $123 = (($122) + 120|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($121|0)==($124|0);
 if (!($125)) {
  $132 = $1;
  $133 = (($2) + 124|0);
  $134 = HEAP32[$133>>2]|0;
  __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132,$134);
  $135 = (($2) + 108|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + -1)|0;
  HEAP32[$135>>2] = $137;
  STACKTOP = sp;return;
 }
 $126 = $1;
 $127 = (($126) + 32|0);
 $128 = (($127) + 12|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $bodyB;
 $131 = (($130) + 120|0);
 HEAP32[$131>>2] = $129;
 $132 = $1;
 $133 = (($2) + 124|0);
 $134 = HEAP32[$133>>2]|0;
 __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132,$134);
 $135 = (($2) + 108|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + -1)|0;
 HEAP32[$135>>2] = $137;
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager7CollideEv($this) {
 $this = $this|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0;
 var $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $InitializeGPUDataTimer = 0, $ReadbackGPUDataTimer = 0, $UpdateContactPairsTimer = 0;
 var $activeA = 0, $activeB = 0, $bodyA = 0, $bodyB = 0, $c = 0, $cNuke = 0, $cNuke1 = 0, $cNuke2 = 0, $cNuke4 = 0, $enableBitArray = 0, $fixtureA = 0, $fixtureB = 0, $indexA = 0, $indexB = 0, $narrowPhaseTimer = 0, $narrowPhaseTimer3 = 0, $overlap = 0, $pc = 0, $proxyIdA = 0, $proxyIdB = 0;
 var $temp = 0, $validContactCount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $narrowPhaseTimer = sp + 77|0;
 $narrowPhaseTimer3 = sp + 74|0;
 $InitializeGPUDataTimer = sp + 73|0;
 $UpdateContactPairsTimer = sp + 76|0;
 $validContactCount = sp + 52|0;
 $ReadbackGPUDataTimer = sp + 78|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = (($1) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 103896|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 + $4;
 HEAPF64[$7>>3] = $9;
 $10 = HEAP8[3200>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  $12 = (($1) + 100|0);
  $13 = HEAP32[$12>>2]|0;
  $c = $13;
  while(1) {
   $14 = $c;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $c;
   $17 = (__ZN9b2Contact11GetFixtureAEv($16)|0);
   $fixtureA = $17;
   $18 = $c;
   $19 = (__ZN9b2Contact11GetFixtureBEv($18)|0);
   $fixtureB = $19;
   $20 = $c;
   $21 = (__ZNK9b2Contact14GetChildIndexAEv($20)|0);
   $indexA = $21;
   $22 = $c;
   $23 = (__ZNK9b2Contact14GetChildIndexBEv($22)|0);
   $indexB = $23;
   $24 = $fixtureA;
   $25 = (__ZN9b2Fixture7GetBodyEv($24)|0);
   $bodyA = $25;
   $26 = $fixtureB;
   $27 = (__ZN9b2Fixture7GetBodyEv($26)|0);
   $bodyB = $27;
   $28 = $c;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 & 8;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = $bodyB;
    $34 = $bodyA;
    $35 = (__ZNK6b2Body13ShouldCollideEPKS_($33,$34)|0);
    $36 = $35&1;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = $c;
     $cNuke = $38;
     $39 = $cNuke;
     $40 = (__ZN9b2Contact7GetNextEv($39)|0);
     $c = $40;
     $41 = $cNuke;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1,$41);
     continue;
    }
    $42 = (($1) + 116|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)!=(0|0);
    if ($44) {
     $45 = (($1) + 116|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $fixtureA;
     $51 = $fixtureB;
     $52 = (FUNCTION_TABLE_iiii[$49 & 1023]($46,$50,$51)|0);
     $53 = $52&1;
     $54 = ($53|0)==(0);
     if ($54) {
      $55 = $c;
      $cNuke1 = $55;
      $56 = $cNuke1;
      $57 = (__ZN9b2Contact7GetNextEv($56)|0);
      $c = $57;
      $58 = $cNuke1;
      __ZN16b2ContactManager7DestroyEP9b2Contact($1,$58);
      continue;
     }
    }
    $59 = $c;
    $60 = (($59) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $61 & -9;
    HEAP32[$60>>2] = $62;
   }
   $63 = $bodyA;
   $64 = (__ZNK6b2Body7IsAwakeEv($63)|0);
   if ($64) {
    $65 = $bodyA;
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)!=(0);
    $69 = $67;
   } else {
    $69 = 0;
   }
   $68 = $69&1;
   $activeA = $68;
   $70 = $bodyB;
   $71 = (__ZNK6b2Body7IsAwakeEv($70)|0);
   if ($71) {
    $72 = $bodyB;
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)!=(0);
    $76 = $74;
   } else {
    $76 = 0;
   }
   $75 = $76&1;
   $activeB = $75;
   $77 = $activeA;
   $78 = $77&1;
   $79 = $78&1;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = $activeB;
    $82 = $81&1;
    $83 = $82&1;
    $84 = ($83|0)==(0);
    if ($84) {
     $85 = $c;
     $86 = (__ZN9b2Contact7GetNextEv($85)|0);
     $c = $86;
     continue;
    }
   }
   $87 = $indexA;
   $88 = $fixtureA;
   $89 = (($88) + 32|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + (($87*36)|0)|0);
   $92 = (($91) + 24|0);
   $93 = HEAP32[$92>>2]|0;
   $proxyIdA = $93;
   $94 = $indexB;
   $95 = $fixtureB;
   $96 = (($95) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + (($94*36)|0)|0);
   $99 = (($98) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $proxyIdB = $100;
   $101 = $proxyIdA;
   $102 = $proxyIdB;
   $103 = (__ZNK12b2BroadPhase11TestOverlapEii($1,$101,$102)|0);
   $104 = $103&1;
   $overlap = $104;
   $105 = $overlap;
   $106 = $105&1;
   $107 = $106&1;
   $108 = ($107|0)==(0);
   if ($108) {
    $109 = $c;
    $cNuke2 = $109;
    $110 = $cNuke2;
    $111 = (__ZN9b2Contact7GetNextEv($110)|0);
    $c = $111;
    $112 = $cNuke2;
    __ZN16b2ContactManager7DestroyEP9b2Contact($1,$112);
    continue;
   }
   $113 = HEAP8[3200>>0]|0;
   $114 = $113&1;
   if (!($114)) {
    __ZN7b2TimerC2Ev($narrowPhaseTimer);
    $115 = $c;
    $116 = (($1) + 120|0);
    $117 = HEAP32[$116>>2]|0;
    __ZN9b2Contact6UpdateEP17b2ContactListener($115,$117);
    $118 = (+__ZNK7b2Timer15GetMillisecondsEv($narrowPhaseTimer));
    $119 = (($1) + 188|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + 103964|0);
    $122 = +HEAPF32[$121>>2];
    $123 = $122 + $118;
    HEAPF32[$121>>2] = $123;
   }
   $124 = $c;
   $125 = (__ZN9b2Contact7GetNextEv($124)|0);
   $c = $125;
  }
 }
 $126 = HEAP8[3200>>0]|0;
 $127 = $126&1;
 if (!($127)) {
  STACKTOP = sp;return;
 }
 __ZN7b2TimerC2Ev($narrowPhaseTimer3);
 __ZN7b2TimerC2Ev($InitializeGPUDataTimer);
 $128 = (($1) + 188|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + 102876|0);
 $131 = (($130) + 108|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)>(0);
 if ($133) {
  $134 = (($1) + 128|0);
  $135 = (($1) + 188|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($1) + 100|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($1) + 104|0);
  $140 = HEAP32[$139>>2]|0;
  __ZN15b2CLNarrowPhase17InitializeGPUDataEP7b2WorldP9b2ContactPi($134,$136,$138,$140);
  $141 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($141);
  $142 = (+__ZNK7b2Timer15GetMillisecondsEv($InitializeGPUDataTimer));
  $143 = (($1) + 188|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + 103968|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $146 + $142;
  HEAPF32[$145>>2] = $147;
  __ZN7b2TimerC2Ev($UpdateContactPairsTimer);
  $148 = (($1) + 128|0);
  $149 = (($1) + 108|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($1) + 104|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($1) + 112|0);
  $154 = HEAP32[$153>>2]|0;
  __ZN15b2CLNarrowPhase18UpdateContactPairsEiPii($148,$150,$152,$154);
  $155 = (($1) + 188|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + 103096|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158|0)!=(0);
  if ($159) {
   $enableBitArray = 0;
   $160 = (($1) + 188|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + 103096|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 & 4;
   $165 = ($164|0)!=(0);
   if ($165) {
    $166 = (($1) + 108|0);
    $167 = HEAP32[$166>>2]|0;
    $$arith = $167<<2;
    $$overflow = ($167>>>0)>(1073741823);
    $168 = $$overflow ? -1 : $$arith;
    $169 = (__Znaj($168)|0);
    $enableBitArray = $169;
   }
   $170 = (($1) + 128|0);
   $171 = (($1) + 188|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($1) + 100|0);
   $174 = (($1) + 120|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $enableBitArray;
   __ZN15b2CLNarrowPhase26ReadbackGPUDataForListenerEP7b2WorldPP9b2ContactP17b2ContactListenerPiS7_($170,$172,$173,$175,$176,$validContactCount);
   $177 = (($1) + 100|0);
   $178 = HEAP32[$177>>2]|0;
   $pc = $178;
   while(1) {
    $179 = $pc;
    $180 = ($179|0)!=(0|0);
    if (!($180)) {
     break;
    }
    $181 = $pc;
    $182 = (($181) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = $183 & 64;
    $185 = ($184|0)!=(0);
    if ($185) {
     $186 = $pc;
     $cNuke4 = $186;
     $187 = $cNuke4;
     $188 = (__ZN9b2Contact7GetNextEv($187)|0);
     $pc = $188;
     $189 = (($1) + 108|0);
     $190 = HEAP32[$189>>2]|0;
     $temp = $190;
     $191 = $cNuke4;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1,$191);
     $192 = $temp;
     $193 = (($1) + 108|0);
     HEAP32[$193>>2] = $192;
     continue;
    } else {
     $194 = $pc;
     $195 = (__ZN9b2Contact7GetNextEv($194)|0);
     $pc = $195;
     continue;
    }
   }
   $196 = (($1) + 188|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($197) + 103096|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $199 & 4;
   $201 = ($200|0)!=(0);
   if ($201) {
    $202 = (__ZN10b2CLDevice8instanceEv()|0);
    $203 = (__ZN14b2CLCommonData8instanceEv()|0);
    $204 = (($203) + 48|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $enableBitArray;
    $207 = (($1) + 108|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $208<<2;
    __ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj($202,$205,$206,0,$209);
    $210 = $enableBitArray;
    $211 = ($210|0)==(0|0);
    if (!($211)) {
     __ZdaPv($210);
    }
   }
  }
  $212 = (($1) + 128|0);
  $213 = (($1) + 108|0);
  $214 = HEAP32[$213>>2]|0;
  __ZN15b2CLNarrowPhase19CompactContactPairsEi($212,$214);
  $215 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($215);
  $216 = (+__ZNK7b2Timer15GetMillisecondsEv($UpdateContactPairsTimer));
  $217 = (($1) + 188|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + 103972|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $220 + $216;
  HEAPF32[$219>>2] = $221;
  __ZN7b2TimerC2Ev($ReadbackGPUDataTimer);
  $222 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($222);
  $223 = (+__ZNK7b2Timer15GetMillisecondsEv($ReadbackGPUDataTimer));
  $224 = (($1) + 188|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + 103976|0);
  $227 = +HEAPF32[$226>>2];
  $228 = $227 + $223;
  HEAPF32[$226>>2] = $228;
  $229 = (+__ZNK7b2Timer15GetMillisecondsEv($narrowPhaseTimer3));
  $230 = (($1) + 188|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + 103964|0);
  $233 = +HEAPF32[$232>>2];
  $234 = $233 + $229;
  HEAPF32[$232>>2] = $234;
 }
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager10cpuOverLapEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $bodyA = 0, $bodyB = 0, $c = 0, $cNuke = 0, $cNuke1 = 0, $cNuke2 = 0, $fixtureA = 0, $fixtureB = 0, $indexA = 0, $indexB = 0, $overlap = 0, $proxyIdA = 0, $proxyIdB = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $c = $3;
 while(1) {
  $4 = $c;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $c;
  $7 = (__ZN9b2Contact11GetFixtureAEv($6)|0);
  $fixtureA = $7;
  $8 = $c;
  $9 = (__ZN9b2Contact11GetFixtureBEv($8)|0);
  $fixtureB = $9;
  $10 = $c;
  $11 = (__ZNK9b2Contact14GetChildIndexAEv($10)|0);
  $indexA = $11;
  $12 = $c;
  $13 = (__ZNK9b2Contact14GetChildIndexBEv($12)|0);
  $indexB = $13;
  $14 = $fixtureA;
  $15 = (__ZN9b2Fixture7GetBodyEv($14)|0);
  $bodyA = $15;
  $16 = $fixtureB;
  $17 = (__ZN9b2Fixture7GetBodyEv($16)|0);
  $bodyB = $17;
  $18 = $c;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 8;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $bodyB;
   $24 = $bodyA;
   $25 = (__ZNK6b2Body13ShouldCollideEPKS_($23,$24)|0);
   $26 = $25&1;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $c;
    $cNuke = $28;
    $29 = $cNuke;
    $30 = (__ZN9b2Contact7GetNextEv($29)|0);
    $c = $30;
    $31 = $cNuke;
    __ZN16b2ContactManager7DestroyEP9b2Contact($1,$31);
    continue;
   }
   $32 = (($1) + 116|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = (($1) + 116|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $fixtureA;
    $41 = $fixtureB;
    $42 = (FUNCTION_TABLE_iiii[$39 & 1023]($36,$40,$41)|0);
    $43 = $42&1;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $c;
     $cNuke1 = $45;
     $46 = $cNuke1;
     $47 = (__ZN9b2Contact7GetNextEv($46)|0);
     $c = $47;
     $48 = $cNuke1;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1,$48);
     continue;
    }
   }
   $49 = $c;
   $50 = (($49) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 & -9;
   HEAP32[$50>>2] = $52;
  }
  $53 = $bodyA;
  $54 = (__ZNK6b2Body7IsAwakeEv($53)|0);
  if ($54) {
   $55 = $bodyA;
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0);
   $59 = $57;
  } else {
   $59 = 0;
  }
  $58 = $59&1;
  $activeA = $58;
  $60 = $bodyB;
  $61 = (__ZNK6b2Body7IsAwakeEv($60)|0);
  if ($61) {
   $62 = $bodyB;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   $66 = $64;
  } else {
   $66 = 0;
  }
  $65 = $66&1;
  $activeB = $65;
  $67 = $activeA;
  $68 = $67&1;
  $69 = $68&1;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = $activeB;
   $72 = $71&1;
   $73 = $72&1;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = $c;
    $76 = (__ZN9b2Contact7GetNextEv($75)|0);
    $c = $76;
    continue;
   }
  }
  $77 = $indexA;
  $78 = $fixtureA;
  $79 = (($78) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($77*36)|0)|0);
  $82 = (($81) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $proxyIdA = $83;
  $84 = $indexB;
  $85 = $fixtureB;
  $86 = (($85) + 32|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + (($84*36)|0)|0);
  $89 = (($88) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $proxyIdB = $90;
  $91 = $proxyIdA;
  $92 = $proxyIdB;
  $93 = (__ZNK12b2BroadPhase11TestOverlapEii($1,$91,$92)|0);
  $94 = $93&1;
  $overlap = $94;
  $95 = $overlap;
  $96 = $95&1;
  $97 = $96&1;
  $98 = ($97|0)==(0);
  if ($98) {
   $99 = $c;
   $cNuke2 = $99;
   $100 = $cNuke2;
   $101 = (__ZN9b2Contact7GetNextEv($100)|0);
   $c = $101;
   $102 = $cNuke2;
   __ZN16b2ContactManager7DestroyEP9b2Contact($1,$102);
   continue;
  } else {
   $103 = $c;
   $104 = (__ZN9b2Contact7GetNextEv($103)|0);
   $c = $104;
   continue;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager15FindNewContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 103944|0);
 $5 = (($1) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 103948|0);
 $8 = (($1) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 103952|0);
 $11 = (($1) + 188|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 103956|0);
 $14 = (($1) + 188|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 103960|0);
 __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($1,$4,$7,$10,$13,$16);
 $17 = (($1) + 188|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK7b2World15GetFixtureCountEv($18)|0);
 $20 = (($1) + 108|0);
 $21 = (($1) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 __ZN12b2BroadPhase9SetValuesEiPiS0_($1,$19,$20,$22);
 $23 = (($1) + 188|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZNK7b2World13GetProxyCountEv($24)|0);
 $26 = ($25*10)|0;
 $27 = (($1) + 112|0);
 HEAP32[$27>>2] = $26;
 __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($1,$1);
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager18cpuFindNewContactsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 103944|0);
 $5 = (($1) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 103948|0);
 $8 = (($1) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 103952|0);
 $11 = (($1) + 188|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 103956|0);
 $14 = (($1) + 188|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 103960|0);
 __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($1,$4,$7,$10,$13,$16);
 $17 = (($1) + 188|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK7b2World15GetFixtureCountEv($18)|0);
 $20 = (($1) + 108|0);
 $21 = (($1) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 __ZN12b2BroadPhase9SetValuesEiPiS0_($1,$19,$20,$22);
 $23 = (($1) + 188|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZNK7b2World13GetProxyCountEv($24)|0);
 $26 = ($25*10)|0;
 $27 = (($1) + 112|0);
 HEAP32[$27>>2] = $26;
 __ZN12b2BroadPhase14cpuUpdatePairsI16b2ContactManagerEEvPT_($1,$1);
 STACKTOP = sp;return;
}
function __ZN16b2ContactManager7AddPairEPvS0_($this,$proxyUserDataA,$proxyUserDataB) {
 $this = $this|0;
 $proxyUserDataA = $proxyUserDataA|0;
 $proxyUserDataB = $proxyUserDataB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0, $c = 0, $edge = 0, $fA = 0;
 var $fB = 0, $fixtureA = 0, $fixtureB = 0, $iA = 0, $iB = 0, $indexA = 0, $indexB = 0, $proxyA = 0, $proxyB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyUserDataA;
 $2 = $proxyUserDataB;
 $3 = $0;
 $4 = $1;
 $proxyA = $4;
 $5 = $2;
 $proxyB = $5;
 $6 = $proxyA;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $fixtureA = $8;
 $9 = $proxyB;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $fixtureB = $11;
 $12 = $proxyA;
 $13 = (($12) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $indexA = $14;
 $15 = $proxyB;
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $indexB = $17;
 $18 = $fixtureA;
 $19 = (__ZN9b2Fixture7GetBodyEv($18)|0);
 $bodyA = $19;
 $20 = $fixtureB;
 $21 = (__ZN9b2Fixture7GetBodyEv($20)|0);
 $bodyB = $21;
 $22 = $bodyA;
 $23 = $bodyB;
 $24 = ($22|0)==($23|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $bodyB;
 $26 = (__ZN6b2Body14GetContactListEv($25)|0);
 $edge = $26;
 while(1) {
  $27 = $edge;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   label = 18;
   break;
  }
  $29 = $edge;
  $30 = HEAP32[$29>>2]|0;
  $31 = $bodyA;
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = $edge;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (__ZN9b2Contact11GetFixtureAEv($35)|0);
   $fA = $36;
   $37 = $edge;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (__ZN9b2Contact11GetFixtureBEv($39)|0);
   $fB = $40;
   $41 = $edge;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (__ZNK9b2Contact14GetChildIndexAEv($43)|0);
   $iA = $44;
   $45 = $edge;
   $46 = (($45) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (__ZNK9b2Contact14GetChildIndexBEv($47)|0);
   $iB = $48;
   $49 = $fA;
   $50 = $fixtureA;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $52 = $fB;
    $53 = $fixtureB;
    $54 = ($52|0)==($53|0);
    if ($54) {
     $55 = $iA;
     $56 = $indexA;
     $57 = ($55|0)==($56|0);
     if ($57) {
      $58 = $iB;
      $59 = $indexB;
      $60 = ($58|0)==($59|0);
      if ($60) {
       label = 10;
       break;
      }
     }
    }
   }
   $61 = $fA;
   $62 = $fixtureB;
   $63 = ($61|0)==($62|0);
   if ($63) {
    $64 = $fB;
    $65 = $fixtureA;
    $66 = ($64|0)==($65|0);
    if ($66) {
     $67 = $iA;
     $68 = $indexB;
     $69 = ($67|0)==($68|0);
     if ($69) {
      $70 = $iB;
      $71 = $indexA;
      $72 = ($70|0)==($71|0);
      if ($72) {
       label = 15;
       break;
      }
     }
    }
   }
  }
  $73 = $edge;
  $74 = (($73) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $edge = $75;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  $76 = $bodyB;
  $77 = $bodyA;
  $78 = (__ZNK6b2Body13ShouldCollideEPKS_($76,$77)|0);
  $79 = $78&1;
  $80 = ($79|0)==(0);
  if ($80) {
   STACKTOP = sp;return;
  }
  $81 = (($3) + 116|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = (($3) + 116|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $fixtureA;
   $90 = $fixtureB;
   $91 = (FUNCTION_TABLE_iiii[$88 & 1023]($85,$89,$90)|0);
   $92 = $91&1;
   $93 = ($92|0)==(0);
   if ($93) {
    STACKTOP = sp;return;
   }
  }
  $94 = $fixtureA;
  $95 = $indexA;
  $96 = $fixtureB;
  $97 = $indexB;
  $98 = (($3) + 124|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (__ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($94,$95,$96,$97,$99)|0);
  $c = $100;
  $101 = $c;
  $102 = ($101|0)==(0|0);
  if ($102) {
   STACKTOP = sp;return;
  }
  $103 = $c;
  $104 = (__ZN9b2Contact11GetFixtureAEv($103)|0);
  $fixtureA = $104;
  $105 = $c;
  $106 = (__ZN9b2Contact11GetFixtureBEv($105)|0);
  $fixtureB = $106;
  $107 = $c;
  $108 = (__ZNK9b2Contact14GetChildIndexAEv($107)|0);
  $indexA = $108;
  $109 = $c;
  $110 = (__ZNK9b2Contact14GetChildIndexBEv($109)|0);
  $indexB = $110;
  $111 = $fixtureA;
  $112 = (__ZN9b2Fixture7GetBodyEv($111)|0);
  $bodyA = $112;
  $113 = $fixtureB;
  $114 = (__ZN9b2Fixture7GetBodyEv($113)|0);
  $bodyB = $114;
  $115 = $c;
  $116 = (($115) + 8|0);
  HEAP32[$116>>2] = 0;
  $117 = (($3) + 100|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $c;
  $120 = (($119) + 12|0);
  HEAP32[$120>>2] = $118;
  $121 = (($3) + 100|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)!=(0|0);
  if ($123) {
   $124 = $c;
   $125 = (($3) + 100|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 8|0);
   HEAP32[$127>>2] = $124;
  }
  $128 = $c;
  $129 = (($3) + 100|0);
  HEAP32[$129>>2] = $128;
  $130 = $c;
  $131 = $c;
  $132 = (($131) + 16|0);
  $133 = (($132) + 4|0);
  HEAP32[$133>>2] = $130;
  $134 = $bodyB;
  $135 = $c;
  $136 = (($135) + 16|0);
  HEAP32[$136>>2] = $134;
  $137 = $c;
  $138 = (($137) + 16|0);
  $139 = (($138) + 8|0);
  HEAP32[$139>>2] = 0;
  $140 = $bodyA;
  $141 = (($140) + 120|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $c;
  $144 = (($143) + 16|0);
  $145 = (($144) + 12|0);
  HEAP32[$145>>2] = $142;
  $146 = $bodyA;
  $147 = (($146) + 120|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)!=(0|0);
  if ($149) {
   $150 = $c;
   $151 = (($150) + 16|0);
   $152 = $bodyA;
   $153 = (($152) + 120|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 8|0);
   HEAP32[$155>>2] = $151;
  }
  $156 = $c;
  $157 = (($156) + 16|0);
  $158 = $bodyA;
  $159 = (($158) + 120|0);
  HEAP32[$159>>2] = $157;
  $160 = $c;
  $161 = $c;
  $162 = (($161) + 32|0);
  $163 = (($162) + 4|0);
  HEAP32[$163>>2] = $160;
  $164 = $bodyA;
  $165 = $c;
  $166 = (($165) + 32|0);
  HEAP32[$166>>2] = $164;
  $167 = $c;
  $168 = (($167) + 32|0);
  $169 = (($168) + 8|0);
  HEAP32[$169>>2] = 0;
  $170 = $bodyB;
  $171 = (($170) + 120|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $c;
  $174 = (($173) + 32|0);
  $175 = (($174) + 12|0);
  HEAP32[$175>>2] = $172;
  $176 = $bodyB;
  $177 = (($176) + 120|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($178|0)!=(0|0);
  if ($179) {
   $180 = $c;
   $181 = (($180) + 32|0);
   $182 = $bodyB;
   $183 = (($182) + 120|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + 8|0);
   HEAP32[$185>>2] = $181;
  }
  $186 = $c;
  $187 = (($186) + 32|0);
  $188 = $bodyB;
  $189 = (($188) + 120|0);
  HEAP32[$189>>2] = $187;
  $190 = $bodyA;
  __ZN6b2Body8SetAwakeEb($190,1);
  $191 = $bodyB;
  __ZN6b2Body8SetAwakeEb($191,1);
  $192 = (($3) + 108|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + 1)|0;
  HEAP32[$192>>2] = $194;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__I_a492() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init493();
 ___cxx_global_var_init1();
 STACKTOP = sp;return;
}
function __ZN17b2ContactListenerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListenerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(42,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN17b2ContactListener12BeginContactEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener10EndContactEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this,$contact,$oldManifold) {
 $this = $this|0;
 $contact = $contact|0;
 $oldManifold = $oldManifold|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $oldManifold;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this,$contact,$impulse) {
 $this = $this|0;
 $contact = $contact|0;
 $impulse = $impulse|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $impulse;
 STACKTOP = sp;return;
}
function __ZNK9b2Contact10IsTouchingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(2);
 STACKTOP = sp;return ($5|0);
}
function __ZNK6b2Body7IsAwakeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 2;
 $6 = ($5|0)==(2);
 STACKTOP = sp;return ($6|0);
}
function __ZNK12b2BroadPhase11TestOverlapEii($this,$proxyIdA,$proxyIdB) {
 $this = $this|0;
 $proxyIdA = $proxyIdA|0;
 $proxyIdB = $proxyIdB|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabbA = 0, $aabbB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyIdA;
 $2 = $proxyIdB;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK13b2DynamicTree10GetFatAABBEi($3,$4)|0);
 $aabbA = $5;
 $6 = $2;
 $7 = (__ZNK13b2DynamicTree10GetFatAABBEi($3,$6)|0);
 $aabbB = $7;
 $8 = $aabbA;
 $9 = $aabbB;
 $10 = (__Z13b2TestOverlapRK6b2AABBS1_($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN12b2BroadPhase15SetTimePointersEPfS0_S0_S0_S0_($this,$pUpdatePairsTime,$pCreateGPUBuffersTime,$pComputeAABBsTime,$pSortAABBsTime,$pComputePairsTime) {
 $this = $this|0;
 $pUpdatePairsTime = $pUpdatePairsTime|0;
 $pCreateGPUBuffersTime = $pCreateGPUBuffersTime|0;
 $pComputeAABBsTime = $pComputeAABBsTime|0;
 $pSortAABBsTime = $pSortAABBsTime|0;
 $pComputePairsTime = $pComputePairsTime|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pUpdatePairsTime;
 $2 = $pCreateGPUBuffersTime;
 $3 = $pComputeAABBsTime;
 $4 = $pSortAABBsTime;
 $5 = $pComputePairsTime;
 $6 = $0;
 $7 = $1;
 $8 = (($6) + 80|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = (($6) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = (($6) + 88|0);
 HEAP32[$12>>2] = $11;
 $13 = $4;
 $14 = (($6) + 92|0);
 HEAP32[$14>>2] = $13;
 $15 = $5;
 $16 = (($6) + 96|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNK7b2World15GetFixtureCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 103080|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12b2BroadPhase9SetValuesEiPiS0_($this,$fixtureCount,$pTotalContactCount,$pContactCounts) {
 $this = $this|0;
 $fixtureCount = $fixtureCount|0;
 $pTotalContactCount = $pTotalContactCount|0;
 $pContactCounts = $pContactCounts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureCount;
 $2 = $pTotalContactCount;
 $3 = $pContactCounts;
 $4 = $0;
 $5 = HEAP8[3200>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (($4) + 64|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = (($4) + 68|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = (($4) + 72|0);
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this,$callback) {
 $this = $this|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ComputeAABBsTimer = 0;
 var $ComputePairsTimer = 0, $CreateGPUBuffersTimer = 0, $SortAABBsTimer = 0, $fatAABB = 0, $i = 0, $i1 = 0, $pair = 0, $primaryPair = 0, $updatePairsTimer = 0, $userDataA = 0, $userDataB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $updatePairsTimer = sp + 51|0;
 $CreateGPUBuffersTimer = sp + 52|0;
 $ComputeAABBsTimer = sp + 50|0;
 $SortAABBsTimer = sp + 49|0;
 $ComputePairsTimer = sp + 48|0;
 $3 = $this;
 $4 = $callback;
 $5 = $3;
 __ZN7b2TimerC2Ev($updatePairsTimer);
 __ZN7b2TimerC2Ev($CreateGPUBuffersTimer);
 $6 = HEAP8[3200>>0]|0;
 $7 = $6&1;
 if ($7) {
  $80 = (($5) + 60|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($5) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  __ZN14b2CLBroadPhase16CreateGPUBuffersEi($81,$83);
  $84 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($84);
  $85 = (+__ZNK7b2Timer15GetMillisecondsEv($CreateGPUBuffersTimer));
  $86 = (($5) + 84|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = +HEAPF32[$87>>2];
  $89 = $88 + $85;
  HEAPF32[$87>>2] = $89;
  __ZN7b2TimerC2Ev($ComputeAABBsTimer);
  $90 = (($5) + 60|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($5) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  __ZN14b2CLBroadPhase12ComputeAABBsEi($91,$93);
  $94 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($94);
  $95 = (+__ZNK7b2Timer15GetMillisecondsEv($ComputeAABBsTimer));
  $96 = (($5) + 88|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = +HEAPF32[$97>>2];
  $99 = $98 + $95;
  HEAPF32[$97>>2] = $99;
  __ZN7b2TimerC2Ev($SortAABBsTimer);
  $100 = (($5) + 60|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($5) + 28|0);
  $103 = HEAP32[$102>>2]|0;
  __ZN14b2CLBroadPhase18PrepareSumVarianceEi($101,$103);
  $104 = (($5) + 60|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($5) + 28|0);
  $107 = HEAP32[$106>>2]|0;
  __ZN14b2CLBroadPhase15InitSortingKeysEi($105,$107);
  $108 = (($5) + 60|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($5) + 28|0);
  $111 = HEAP32[$110>>2]|0;
  __ZN14b2CLBroadPhase9SortAABBsEi($109,$111);
  $112 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($112);
  $113 = (+__ZNK7b2Timer15GetMillisecondsEv($SortAABBsTimer));
  $114 = (($5) + 92|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = +HEAPF32[$115>>2];
  $117 = $116 + $113;
  HEAPF32[$115>>2] = $117;
  __ZN7b2TimerC2Ev($ComputePairsTimer);
  $118 = (($5) + 60|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($5) + 28|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($5) + 68|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($5) + 72|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($5) + 76|0);
  $127 = HEAP32[$126>>2]|0;
  __ZN14b2CLBroadPhase12ComputePairsEiPiS0_PK7b2World($119,$121,$123,$125,$127);
  $128 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($128);
  $129 = (+__ZNK7b2Timer15GetMillisecondsEv($ComputePairsTimer));
  $130 = (($5) + 96|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = +HEAPF32[$131>>2];
  $133 = $132 + $129;
  HEAPF32[$131>>2] = $133;
  $134 = (+__ZNK7b2Timer15GetMillisecondsEv($updatePairsTimer));
  $135 = (($5) + 80|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = +HEAPF32[$136>>2];
  $138 = $137 + $134;
  HEAPF32[$136>>2] = $138;
  STACKTOP = sp;return;
 }
 $8 = (($5) + 52|0);
 HEAP32[$8>>2] = 0;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = (($5) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = (($5) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($5) + 56|0);
  HEAP32[$18>>2] = $17;
  $19 = (($5) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(-1);
  if ($21) {
  } else {
   $22 = (($5) + 56|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (__ZNK13b2DynamicTree10GetFatAABBEi($5,$23)|0);
   $fatAABB = $24;
   $25 = $fatAABB;
   __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($5,$5,$25);
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = (($5) + 40|0);
 HEAP32[$28>>2] = 0;
 $29 = (($5) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($5) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($5) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + (($34*12)|0)|0);
 $0 = $30;
 $1 = $35;
 HEAP32[$2>>2] = 484;
 $36 = $0;
 $37 = $1;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($36,$37,$2);
 $i1 = 0;
 while(1) {
  $38 = $i1;
  $39 = (($5) + 52|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = (($5) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $i1;
  $45 = (($43) + (($44*12)|0)|0);
  $primaryPair = $45;
  $46 = $primaryPair;
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$47)|0);
  $userDataA = $48;
  $49 = $primaryPair;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$51)|0);
  $userDataB = $52;
  $53 = $4;
  $54 = $userDataA;
  $55 = $userDataB;
  __ZN16b2ContactManager7AddPairEPvS0_($53,$54,$55);
  $56 = $i1;
  $57 = (($56) + 1)|0;
  $i1 = $57;
  while(1) {
   $58 = $i1;
   $59 = (($5) + 52|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = (($5) + 44|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $i1;
   $65 = (($63) + (($64*12)|0)|0);
   $pair = $65;
   $66 = $pair;
   $67 = HEAP32[$66>>2]|0;
   $68 = $primaryPair;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)!=($69|0);
   if ($70) {
    label = 14;
    break;
   }
   $71 = $pair;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $primaryPair;
   $75 = (($74) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($73|0)!=($76|0);
   if ($77) {
    label = 14;
    break;
   }
   $78 = $i1;
   $79 = (($78) + 1)|0;
   $i1 = $79;
  }
  if ((label|0) == 14) {
   label = 0;
  }
 }
 STACKTOP = sp;return;
}
function __ZN12b2BroadPhase14cpuUpdatePairsI16b2ContactManagerEEvPT_($this,$callback) {
 $this = $this|0;
 $callback = $callback|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $fatAABB = 0, $i = 0;
 var $i1 = 0, $pair = 0, $primaryPair = 0, $userDataA = 0, $userDataB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $3 = $this;
 $4 = $callback;
 $5 = $3;
 $6 = (($5) + 52|0);
 HEAP32[$6>>2] = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = (($5) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = (($5) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($5) + 56|0);
  HEAP32[$16>>2] = $15;
  $17 = (($5) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(-1);
  if ($19) {
  } else {
   $20 = (($5) + 56|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (__ZNK13b2DynamicTree10GetFatAABBEi($5,$21)|0);
   $fatAABB = $22;
   $23 = $fatAABB;
   __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($5,$5,$23);
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = (($5) + 40|0);
 HEAP32[$26>>2] = 0;
 $27 = (($5) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($5) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($5) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + (($32*12)|0)|0);
 $0 = $28;
 $1 = $33;
 HEAP32[$2>>2] = 484;
 $34 = $0;
 $35 = $1;
 __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($34,$35,$2);
 $i1 = 0;
 while(1) {
  $36 = $i1;
  $37 = (($5) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = (($5) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $i1;
  $43 = (($41) + (($42*12)|0)|0);
  $primaryPair = $43;
  $44 = $primaryPair;
  $45 = HEAP32[$44>>2]|0;
  $46 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$45)|0);
  $userDataA = $46;
  $47 = $primaryPair;
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (__ZNK13b2DynamicTree11GetUserDataEi($5,$49)|0);
  $userDataB = $50;
  $51 = $4;
  $52 = $userDataA;
  $53 = $userDataB;
  __ZN16b2ContactManager7AddPairEPvS0_($51,$52,$53);
  $54 = $i1;
  $55 = (($54) + 1)|0;
  $i1 = $55;
  while(1) {
   $56 = $i1;
   $57 = (($5) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = (($5) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $i1;
   $63 = (($61) + (($62*12)|0)|0);
   $pair = $63;
   $64 = $pair;
   $65 = HEAP32[$64>>2]|0;
   $66 = $primaryPair;
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)!=($67|0);
   if ($68) {
    label = 13;
    break;
   }
   $69 = $pair;
   $70 = (($69) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $primaryPair;
   $73 = (($72) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($71|0)!=($74|0);
   if ($75) {
    label = 13;
    break;
   }
   $76 = $i1;
   $77 = (($76) + 1)|0;
   $i1 = $77;
  }
  if ((label|0) == 13) {
   label = 0;
  }
 }
 STACKTOP = sp;return;
}
function ___cxx_global_var_init493() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15b2ContactFilterC2Ev(21512);
 (___cxa_atexit((48|0),(21512|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17b2ContactListenerC2Ev(21520);
 (___cxa_atexit((42|0),(21520|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNK13b2DynamicTree10GetFatAABBEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if ($4) {
  $5 = $1;
  $6 = (($2) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = (($2) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + (($9*36)|0)|0);
   STACKTOP = sp;return ($12|0);
  }
 }
 ___assert_fail((21528|0),(21576|0),159,(21784|0));
 // unreachable;
 return 0|0;
}
function __Z13b2TestOverlapRK6b2AABBS1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d1 = 0, $d2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d1 = sp + 32|0;
 $d2 = sp;
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $1 = $a;
 $2 = $b;
 __ZN6b2Vec2C2Ev($d1);
 __ZN6b2Vec2C2Ev($d2);
 $5 = $2;
 $6 = $1;
 $7 = (($6) + 8|0);
 __ZmiRK6b2Vec2S1_($3,$5,$7);
 ;HEAP32[$d1+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$d1+4>>2]=HEAP32[$3+4>>2]|0;
 $8 = $1;
 $9 = $2;
 $10 = (($9) + 8|0);
 __ZmiRK6b2Vec2S1_($4,$8,$10);
 ;HEAP32[$d2+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$d2+4>>2]=HEAP32[$4+4>>2]|0;
 $11 = +HEAPF32[$d1>>2];
 $12 = $11 > 0.0;
 if (!($12)) {
  $13 = (($d1) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14 > 0.0;
  if (!($15)) {
   $16 = +HEAPF32[$d2>>2];
   $17 = $16 > 0.0;
   if (!($17)) {
    $18 = (($d2) + 4|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $19 > 0.0;
    if (!($20)) {
     $$expand_i1_val4 = 1;
     $0 = $$expand_i1_val4;
     $$pre_trunc = $0;
     $21 = $$pre_trunc&1;
     STACKTOP = sp;return ($21|0);
    }
   }
   $$expand_i1_val2 = 0;
   $0 = $$expand_i1_val2;
   $$pre_trunc = $0;
   $21 = $$pre_trunc&1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $$expand_i1_val = 0;
 $0 = $$expand_i1_val;
 $$pre_trunc = $0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this,$callback,$aabb) {
 $this = $this|0;
 $callback = $callback|0;
 $aabb = $aabb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cleanup$dest = 0, $node = 0, $nodeId = 0;
 var $proceed = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stack = sp + 20|0;
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $6 = $0;
 __ZN15b2GrowableStackIiLi256EEC2Ev($stack);
 __THREW__ = 0;
 invoke_vii(485,($stack|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   while(1) {
    __THREW__ = 0;
    $9 = (invoke_ii(486,($stack|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break L1;
    }
    $12 = ($9|0)>(0);
    if (!($12)) {
     label = 22;
     break;
    }
    __THREW__ = 0;
    $13 = (invoke_ii(487,($stack|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break L1;
    }
    $nodeId = $13;
    $16 = $nodeId;
    $17 = ($16|0)==(-1);
    if ($17) {
     continue;
    }
    $22 = (($6) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $nodeId;
    $25 = (($23) + (($24*36)|0)|0);
    $node = $25;
    $26 = $node;
    $27 = $2;
    __THREW__ = 0;
    $28 = (invoke_iii(489,($26|0),($27|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     break L1;
    }
    if ($28) {
     $31 = $node;
     __THREW__ = 0;
     $32 = (invoke_ii(490,($31|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break L1;
     }
     if ($32) {
      $35 = $1;
      $36 = $nodeId;
      __THREW__ = 0;
      $37 = (invoke_iii(491,($35|0),($36|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break L1;
      }
      $40 = $37&1;
      $proceed = $40;
      $41 = $proceed;
      $42 = $41&1;
      $43 = $42&1;
      $44 = ($43|0)==(0);
      if ($44) {
       label = 15;
       break;
      }
     } else {
      $45 = $node;
      $46 = (($45) + 24|0);
      __THREW__ = 0;
      invoke_vii(485,($stack|0),($46|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break L1;
      }
      $49 = $node;
      $50 = (($49) + 28|0);
      __THREW__ = 0;
      invoke_vii(485,($stack|0),($50|0));
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       break L1;
      }
     }
    }
   }
   if ((label|0) == 15) {
    $5 = 1;
   }
   else if ((label|0) == 22) {
    $5 = 0;
   }
   __ZN15b2GrowableStackIiLi256EED2Ev($stack);
   $cleanup$dest = $5;
   if ((($cleanup$dest|0) == 1) | (($cleanup$dest|0) == 0)) {
    STACKTOP = sp;return;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(488,($stack|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $55 = ___cxa_find_matching_catch(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 }
 $53 = $3;
 $54 = $4;
 ___resumeException($53|0);
 // unreachable;
}
function __Z14b2PairLessThanRK6b2PairS1_($pair1,$pair2) {
 $pair1 = $pair1|0;
 $pair2 = $pair2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pair1;
 $2 = $pair2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   $0 = $$expand_i1_val;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = $2;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)==($11|0);
   if ($12) {
    $13 = $1;
    $14 = (($13) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $2;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($15|0)<($18|0);
    $$expand_i1_val2 = $19&1;
    $0 = $$expand_i1_val2;
    break;
   } else {
    $$expand_i1_val4 = 0;
    $0 = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = $0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 100|0;
 $__t$i4 = sp + 40|0;
 $__t$i3 = sp + 72|0;
 $__t$i2 = sp + 220|0;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 168|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $33 = $31;
   $34 = $30;
   $35 = $33;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 12)&-1;
   $__len = $38;
   $39 = $__len;
   switch ($39|0) {
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   default: {
   }
   }
   $79 = $__len;
   $80 = ($79|0)<=(30);
   if ($80) {
    label = 12;
    break L1;
   }
   $84 = $30;
   $__m = $84;
   $85 = $31;
   $__lm1 = $85;
   $86 = $__lm1;
   $87 = (($86) + -12|0);
   $__lm1 = $87;
   $88 = $__len;
   $89 = ($88|0)>=(1000);
   if ($89) {
    $90 = $__len;
    $91 = (($90|0) / 2)&-1;
    $__delta = $91;
    $92 = $__delta;
    $93 = $__m;
    $94 = (($93) + (($92*12)|0)|0);
    $__m = $94;
    $95 = $__delta;
    $96 = (($95|0) / 2)&-1;
    $__delta = $96;
    $97 = $30;
    $98 = $30;
    $99 = $__delta;
    $100 = (($98) + (($99*12)|0)|0);
    $101 = $__m;
    $102 = $__m;
    $103 = $__delta;
    $104 = (($102) + (($103*12)|0)|0);
    $105 = $__lm1;
    $106 = $32;
    $107 = (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($97,$100,$101,$104,$105,$106)|0);
    $__n_swaps = $107;
   } else {
    $108 = $__len;
    $109 = (($108|0) / 2)&-1;
    $__delta = $109;
    $110 = $__delta;
    $111 = $__m;
    $112 = (($111) + (($110*12)|0)|0);
    $__m = $112;
    $113 = $30;
    $114 = $__m;
    $115 = $__lm1;
    $116 = $32;
    $117 = (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($113,$114,$115,$116)|0);
    $__n_swaps = $117;
   }
   $118 = $30;
   $__i = $118;
   $119 = $__lm1;
   $__j = $119;
   $120 = $32;
   $121 = HEAP32[$120>>2]|0;
   $122 = $__i;
   $123 = $__m;
   $124 = (FUNCTION_TABLE_iii[$121 & 1023]($122,$123)|0);
   if ($124) {
    break;
   }
   while(1) {
    $125 = $__i;
    $126 = $__j;
    $127 = (($126) + -12|0);
    $__j = $127;
    $128 = ($125|0)==($127|0);
    if ($128) {
     break;
    }
    $195 = $32;
    $196 = HEAP32[$195>>2]|0;
    $197 = $__j;
    $198 = $__m;
    $199 = (FUNCTION_TABLE_iii[$196 & 1023]($197,$198)|0);
    if ($199) {
     label = 41;
     break L3;
    }
   }
   $129 = $__i;
   $130 = (($129) + 12|0);
   $__i = $130;
   $131 = $31;
   $__j = $131;
   $132 = $32;
   $133 = HEAP32[$132>>2]|0;
   $134 = $30;
   $135 = $__j;
   $136 = (($135) + -12|0);
   $__j = $136;
   $137 = (FUNCTION_TABLE_iii[$133 & 1023]($134,$136)|0);
   if (!($137)) {
    while(1) {
     $138 = $__i;
     $139 = $__j;
     $140 = ($138|0)==($139|0);
     if ($140) {
      label = 22;
      break L1;
     }
     $141 = $32;
     $142 = HEAP32[$141>>2]|0;
     $143 = $30;
     $144 = $__i;
     $145 = (FUNCTION_TABLE_iii[$142 & 1023]($143,$144)|0);
     if ($145) {
      break;
     }
     $159 = $__i;
     $160 = (($159) + 12|0);
     $__i = $160;
    }
    $146 = $__i;
    $147 = $__j;
    $23 = $146;
    $24 = $147;
    $148 = $23;
    $22 = $148;
    $149 = $22;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$149+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$149+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$149+8>>2]|0;
    $150 = $23;
    $151 = $24;
    $20 = $151;
    $152 = $20;
    ;HEAP32[$150+0>>2]=HEAP32[$152+0>>2]|0;HEAP32[$150+4>>2]=HEAP32[$152+4>>2]|0;HEAP32[$150+8>>2]=HEAP32[$152+8>>2]|0;
    $153 = $24;
    $21 = $__t$i1;
    $154 = $21;
    ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$154+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$154+8>>2]|0;
    $155 = $__n_swaps;
    $156 = (($155) + 1)|0;
    $__n_swaps = $156;
    $157 = $__i;
    $158 = (($157) + 12|0);
    $__i = $158;
   }
   $161 = $__i;
   $162 = $__j;
   $163 = ($161|0)==($162|0);
   if ($163) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $164 = $32;
     $165 = HEAP32[$164>>2]|0;
     $166 = $30;
     $167 = $__i;
     $168 = (FUNCTION_TABLE_iii[$165 & 1023]($166,$167)|0);
     $169 = $168 ^ 1;
     if (!($169)) {
      break;
     }
     $170 = $__i;
     $171 = (($170) + 12|0);
     $__i = $171;
    }
    while(1) {
     $172 = $32;
     $173 = HEAP32[$172>>2]|0;
     $174 = $30;
     $175 = $__j;
     $176 = (($175) + -12|0);
     $__j = $176;
     $177 = (FUNCTION_TABLE_iii[$173 & 1023]($174,$176)|0);
     if (!($177)) {
      break;
     }
    }
    $178 = $__i;
    $179 = $__j;
    $180 = ($178>>>0)>=($179>>>0);
    if ($180) {
     break;
    }
    $181 = $__i;
    $182 = $__j;
    $18 = $181;
    $19 = $182;
    $183 = $18;
    $17 = $183;
    $184 = $17;
    ;HEAP32[$__t$i2+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$184+8>>2]|0;
    $185 = $18;
    $186 = $19;
    $15 = $186;
    $187 = $15;
    ;HEAP32[$185+0>>2]=HEAP32[$187+0>>2]|0;HEAP32[$185+4>>2]=HEAP32[$187+4>>2]|0;HEAP32[$185+8>>2]=HEAP32[$187+8>>2]|0;
    $188 = $19;
    $16 = $__t$i2;
    $189 = $16;
    ;HEAP32[$188+0>>2]=HEAP32[$189+0>>2]|0;HEAP32[$188+4>>2]=HEAP32[$189+4>>2]|0;HEAP32[$188+8>>2]=HEAP32[$189+8>>2]|0;
    $190 = $__n_swaps;
    $191 = (($190) + 1)|0;
    $__n_swaps = $191;
    $192 = $__i;
    $193 = (($192) + 12|0);
    $__i = $193;
   }
   $194 = $__i;
   $30 = $194;
  }
  if ((label|0) == 41) {
   label = 0;
   $200 = $__i;
   $201 = $__j;
   $13 = $200;
   $14 = $201;
   $202 = $13;
   $12 = $202;
   $203 = $12;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$203+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$203+8>>2]|0;
   $204 = $13;
   $205 = $14;
   $10 = $205;
   $206 = $10;
   ;HEAP32[$204+0>>2]=HEAP32[$206+0>>2]|0;HEAP32[$204+4>>2]=HEAP32[$206+4>>2]|0;HEAP32[$204+8>>2]=HEAP32[$206+8>>2]|0;
   $207 = $14;
   $11 = $__t$i3;
   $208 = $11;
   ;HEAP32[$207+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$208+8>>2]|0;
   $209 = $__n_swaps;
   $210 = (($209) + 1)|0;
   $__n_swaps = $210;
  }
  $211 = $__i;
  $212 = (($211) + 12|0);
  $__i = $212;
  $213 = $__i;
  $214 = $__j;
  $215 = ($213>>>0)<($214>>>0);
  if ($215) {
   while(1) {
    while(1) {
     $216 = $32;
     $217 = HEAP32[$216>>2]|0;
     $218 = $__i;
     $219 = $__m;
     $220 = (FUNCTION_TABLE_iii[$217 & 1023]($218,$219)|0);
     if (!($220)) {
      break;
     }
     $221 = $__i;
     $222 = (($221) + 12|0);
     $__i = $222;
    }
    while(1) {
     $223 = $32;
     $224 = HEAP32[$223>>2]|0;
     $225 = $__j;
     $226 = (($225) + -12|0);
     $__j = $226;
     $227 = $__m;
     $228 = (FUNCTION_TABLE_iii[$224 & 1023]($226,$227)|0);
     $229 = $228 ^ 1;
     if (!($229)) {
      break;
     }
    }
    $230 = $__i;
    $231 = $__j;
    $232 = ($230>>>0)>($231>>>0);
    if ($232) {
     break;
    }
    $233 = $__i;
    $234 = $__j;
    $8 = $233;
    $9 = $234;
    $235 = $8;
    $7 = $235;
    $236 = $7;
    ;HEAP32[$__t$i4+0>>2]=HEAP32[$236+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$236+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$236+8>>2]|0;
    $237 = $8;
    $238 = $9;
    $5 = $238;
    $239 = $5;
    ;HEAP32[$237+0>>2]=HEAP32[$239+0>>2]|0;HEAP32[$237+4>>2]=HEAP32[$239+4>>2]|0;HEAP32[$237+8>>2]=HEAP32[$239+8>>2]|0;
    $240 = $9;
    $6 = $__t$i4;
    $241 = $6;
    ;HEAP32[$240+0>>2]=HEAP32[$241+0>>2]|0;HEAP32[$240+4>>2]=HEAP32[$241+4>>2]|0;HEAP32[$240+8>>2]=HEAP32[$241+8>>2]|0;
    $242 = $__n_swaps;
    $243 = (($242) + 1)|0;
    $__n_swaps = $243;
    $244 = $__m;
    $245 = $__i;
    $246 = ($244|0)==($245|0);
    if ($246) {
     $247 = $__j;
     $__m = $247;
    }
    $248 = $__i;
    $249 = (($248) + 12|0);
    $__i = $249;
   }
  }
  $250 = $__i;
  $251 = $__m;
  $252 = ($250|0)!=($251|0);
  if ($252) {
   $253 = $32;
   $254 = HEAP32[$253>>2]|0;
   $255 = $__m;
   $256 = $__i;
   $257 = (FUNCTION_TABLE_iii[$254 & 1023]($255,$256)|0);
   if ($257) {
    $258 = $__i;
    $259 = $__m;
    $3 = $258;
    $4 = $259;
    $260 = $3;
    $2 = $260;
    $261 = $2;
    ;HEAP32[$__t$i5+0>>2]=HEAP32[$261+0>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$261+4>>2]|0;HEAP32[$__t$i5+8>>2]=HEAP32[$261+8>>2]|0;
    $262 = $3;
    $263 = $4;
    $0 = $263;
    $264 = $0;
    ;HEAP32[$262+0>>2]=HEAP32[$264+0>>2]|0;HEAP32[$262+4>>2]=HEAP32[$264+4>>2]|0;HEAP32[$262+8>>2]=HEAP32[$264+8>>2]|0;
    $265 = $4;
    $1 = $__t$i5;
    $266 = $1;
    ;HEAP32[$265+0>>2]=HEAP32[$266+0>>2]|0;HEAP32[$265+4>>2]=HEAP32[$266+4>>2]|0;HEAP32[$265+8>>2]=HEAP32[$266+8>>2]|0;
    $267 = $__n_swaps;
    $268 = (($267) + 1)|0;
    $__n_swaps = $268;
   }
  }
  $269 = $__n_swaps;
  $270 = ($269|0)==(0);
  if ($270) {
   $271 = $30;
   $272 = $__i;
   $273 = $32;
   $274 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($271,$272,$273)|0);
   $275 = $274&1;
   $__fs = $275;
   $276 = $__i;
   $277 = (($276) + 12|0);
   $278 = $31;
   $279 = $32;
   $280 = (__ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($277,$278,$279)|0);
   if ($280) {
    $281 = $__fs;
    $282 = $281&1;
    if ($282) {
     label = 64;
     break;
    }
    $283 = $__i;
    $31 = $283;
    continue;
   }
   $284 = $__fs;
   $285 = $284&1;
   if ($285) {
    $286 = $__i;
    $287 = (($286) + 12|0);
    $__i = $287;
    $30 = $287;
    continue;
   }
  }
  $288 = $__i;
  $289 = $30;
  $290 = $288;
  $291 = $289;
  $292 = (($290) - ($291))|0;
  $293 = (($292|0) / 12)&-1;
  $294 = $31;
  $295 = $__i;
  $296 = $294;
  $297 = $295;
  $298 = (($296) - ($297))|0;
  $299 = (($298|0) / 12)&-1;
  $300 = ($293|0)<($299|0);
  if ($300) {
   $301 = $30;
   $302 = $__i;
   $303 = $32;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($301,$302,$303);
   $304 = $__i;
   $305 = (($304) + 12|0);
   $__i = $305;
   $30 = $305;
  } else {
   $306 = $__i;
   $307 = (($306) + 12|0);
   $308 = $31;
   $309 = $32;
   __ZNSt3__16__sortIRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($307,$308,$309);
   $310 = $__i;
   $31 = $310;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $40 = $32;
  $41 = HEAP32[$40>>2]|0;
  $42 = $31;
  $43 = (($42) + -12|0);
  $31 = $43;
  $44 = $30;
  $45 = (FUNCTION_TABLE_iii[$41 & 1023]($43,$44)|0);
  if ($45) {
   $46 = $30;
   $47 = $31;
   $28 = $46;
   $29 = $47;
   $48 = $28;
   $27 = $48;
   $49 = $27;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$49+8>>2]|0;
   $50 = $28;
   $51 = $29;
   $25 = $51;
   $52 = $25;
   ;HEAP32[$50+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$52+8>>2]|0;
   $53 = $29;
   $26 = $__t$i;
   $54 = $26;
   ;HEAP32[$53+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$54+8>>2]|0;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $55 = $30;
  $56 = $30;
  $57 = (($56) + 12|0);
  $58 = $31;
  $59 = (($58) + -12|0);
  $31 = $59;
  $60 = $32;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($55,$57,$59,$60)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $61 = $30;
  $62 = $30;
  $63 = (($62) + 12|0);
  $64 = $30;
  $65 = (($64) + 24|0);
  $66 = $31;
  $67 = (($66) + -12|0);
  $31 = $67;
  $68 = $32;
  (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($61,$63,$65,$67,$68)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $69 = $30;
  $70 = $30;
  $71 = (($70) + 12|0);
  $72 = $30;
  $73 = (($72) + 24|0);
  $74 = $30;
  $75 = (($74) + 36|0);
  $76 = $31;
  $77 = (($76) + -12|0);
  $31 = $77;
  $78 = $32;
  (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($69,$71,$73,$75,$77,$78)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $81 = $30;
  $82 = $31;
  $83 = $32;
  __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($81,$82,$83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZNK13b2DynamicTree11GetUserDataEi($this,$proxyId) {
 $this = $this|0;
 $proxyId = $proxyId|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = (0)<=($3|0);
 if (!($4)) {
  ___assert_fail((21528|0),(21576|0),153,(21664|0));
  // unreachable;
 }
 $5 = $1;
 $6 = (($2) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if ($8) {
  $9 = $1;
  $10 = (($2) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + (($9*36)|0)|0);
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((21528|0),(21576|0),153,(21664|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN15b2ContactFilterC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (24368 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN15b2ContactFilterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN17b2ContactListenerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (21800 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN15b2GrowableStackIiLi256EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 1028|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 1032|0);
 HEAP32[$4>>2] = 256;
 STACKTOP = sp;return;
}
function __ZN15b2GrowableStackIiLi256EE4PushERKi($this,$element) {
 $this = $this|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $0;
 $3 = (($2) + 1028|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 1032|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $old = $8;
  $9 = (($2) + 1032|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10<<1;
  HEAP32[$9>>2] = $11;
  $12 = (($2) + 1032|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<2;
  $15 = (__Z7b2Alloci($14)|0);
  HEAP32[$2>>2] = $15;
  $16 = HEAP32[$2>>2]|0;
  $17 = $old;
  $18 = (($2) + 1028|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<2;
  _memcpy(($16|0),($17|0),($20|0))|0;
  $21 = $old;
  $22 = (($2) + 4|0);
  $23 = ($21|0)!=($22|0);
  if ($23) {
   $24 = $old;
   __Z6b2FreePv($24);
  }
 }
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($2) + 1028|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$2>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = $26;
 $31 = (($2) + 1028|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function __ZN15b2GrowableStackIiLi256EE8GetCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 1028|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 1028|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = (($1) + 1028|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = (($1) + 1028|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((21680|0),(21696|0),67,(21776|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN15b2GrowableStackIiLi256EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = ($2|0)!=($3|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 __Z6b2FreePv($5);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 72|0;
 $__t$i3 = sp + 40|0;
 $__t$i2 = sp + 168|0;
 $__t$i1 = sp + 104|0;
 $__t$i = sp + 124|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $27;
 $33 = $26;
 $34 = (FUNCTION_TABLE_iii[$31 & 1023]($32,$33)|0);
 if ($34) {
  $65 = $29;
  $66 = HEAP32[$65>>2]|0;
  $67 = $28;
  $68 = $27;
  $69 = (FUNCTION_TABLE_iii[$66 & 1023]($67,$68)|0);
  if ($69) {
   $70 = $26;
   $71 = $28;
   $3 = $70;
   $4 = $71;
   $72 = $3;
   $2 = $72;
   $73 = $2;
   ;HEAP32[$__t$i4+0>>2]=HEAP32[$73+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$73+8>>2]|0;
   $74 = $3;
   $75 = $4;
   $0 = $75;
   $76 = $0;
   ;HEAP32[$74+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$76+8>>2]|0;
   $77 = $4;
   $1 = $__t$i4;
   $78 = $1;
   ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$78+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[$78+8>>2]|0;
   $__r = 1;
   $79 = $__r;
   $25 = $79;
   $104 = $25;
   STACKTOP = sp;return ($104|0);
  }
  $80 = $26;
  $81 = $27;
  $8 = $80;
  $9 = $81;
  $82 = $8;
  $7 = $82;
  $83 = $7;
  ;HEAP32[$__t$i3+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$83+8>>2]|0;
  $84 = $8;
  $85 = $9;
  $5 = $85;
  $86 = $5;
  ;HEAP32[$84+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$86+8>>2]|0;
  $87 = $9;
  $6 = $__t$i3;
  $88 = $6;
  ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$88+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$88+8>>2]|0;
  $__r = 1;
  $89 = $29;
  $90 = HEAP32[$89>>2]|0;
  $91 = $28;
  $92 = $27;
  $93 = (FUNCTION_TABLE_iii[$90 & 1023]($91,$92)|0);
  if ($93) {
   $94 = $27;
   $95 = $28;
   $18 = $94;
   $19 = $95;
   $96 = $18;
   $17 = $96;
   $97 = $17;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$97+8>>2]|0;
   $98 = $18;
   $99 = $19;
   $15 = $99;
   $100 = $15;
   ;HEAP32[$98+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$98+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$98+8>>2]=HEAP32[$100+8>>2]|0;
   $101 = $19;
   $16 = $__t$i1;
   $102 = $16;
   ;HEAP32[$101+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$102+8>>2]|0;
   $__r = 2;
  }
  $103 = $__r;
  $25 = $103;
  $104 = $25;
  STACKTOP = sp;return ($104|0);
 } else {
  $35 = $29;
  $36 = HEAP32[$35>>2]|0;
  $37 = $28;
  $38 = $27;
  $39 = (FUNCTION_TABLE_iii[$36 & 1023]($37,$38)|0);
  if (!($39)) {
   $40 = $__r;
   $25 = $40;
   $104 = $25;
   STACKTOP = sp;return ($104|0);
  }
  $41 = $27;
  $42 = $28;
  $23 = $41;
  $24 = $42;
  $43 = $23;
  $22 = $43;
  $44 = $22;
  ;HEAP32[$__t$i+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$44+8>>2]|0;
  $45 = $23;
  $46 = $24;
  $20 = $46;
  $47 = $20;
  ;HEAP32[$45+0>>2]=HEAP32[$47+0>>2]|0;HEAP32[$45+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$47+8>>2]|0;
  $48 = $24;
  $21 = $__t$i;
  $49 = $21;
  ;HEAP32[$48+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$49+8>>2]|0;
  $__r = 1;
  $50 = $29;
  $51 = HEAP32[$50>>2]|0;
  $52 = $27;
  $53 = $26;
  $54 = (FUNCTION_TABLE_iii[$51 & 1023]($52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   ;HEAP32[$__t$i2+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$58+8>>2]|0;
   $59 = $13;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   ;HEAP32[$59+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$61+8>>2]|0;
   $62 = $14;
   $11 = $__t$i2;
   $63 = $11;
   ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$63+8>>2]|0;
   $__r = 2;
  }
  $64 = $__r;
  $25 = $64;
  $104 = $25;
  STACKTOP = sp;return ($104|0);
 }
 return 0|0;
}
function __ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 16|0;
 $__t$i1 = sp + 104|0;
 $__t$i = sp + 68|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = HEAP32[$25>>2]|0;
 $27 = $18;
 $28 = $17;
 $29 = (FUNCTION_TABLE_iii[$26 & 1023]($27,$28)|0);
 if (!($29)) {
  $73 = $__r;
  STACKTOP = sp;return ($73|0);
 }
 $30 = $17;
 $31 = $18;
 $13 = $30;
 $14 = $31;
 $32 = $13;
 $12 = $32;
 $33 = $12;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$33+8>>2]|0;
 $34 = $13;
 $35 = $14;
 $10 = $35;
 $36 = $10;
 ;HEAP32[$34+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$36+8>>2]|0;
 $37 = $14;
 $11 = $__t$i;
 $38 = $11;
 ;HEAP32[$37+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$37+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$38+8>>2]|0;
 $39 = $__r;
 $40 = (($39) + 1)|0;
 $__r = $40;
 $41 = $19;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = $16;
 $45 = (FUNCTION_TABLE_iii[$42 & 1023]($43,$44)|0);
 if ($45) {
  $46 = $16;
  $47 = $17;
  $3 = $46;
  $4 = $47;
  $48 = $3;
  $2 = $48;
  $49 = $2;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$49+8>>2]|0;
  $50 = $3;
  $51 = $4;
  $0 = $51;
  $52 = $0;
  ;HEAP32[$50+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$50+4>>2]=HEAP32[$52+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$52+8>>2]|0;
  $53 = $4;
  $1 = $__t$i2;
  $54 = $1;
  ;HEAP32[$53+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$54+8>>2]|0;
  $55 = $__r;
  $56 = (($55) + 1)|0;
  $__r = $56;
  $57 = $19;
  $58 = HEAP32[$57>>2]|0;
  $59 = $16;
  $60 = $15;
  $61 = (FUNCTION_TABLE_iii[$58 & 1023]($59,$60)|0);
  if ($61) {
   $62 = $15;
   $63 = $16;
   $8 = $62;
   $9 = $63;
   $64 = $8;
   $7 = $64;
   $65 = $7;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$65+8>>2]|0;
   $66 = $8;
   $67 = $9;
   $5 = $67;
   $68 = $5;
   ;HEAP32[$66+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$66+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$68+8>>2]|0;
   $69 = $9;
   $6 = $__t$i1;
   $70 = $6;
   ;HEAP32[$69+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$70+8>>2]|0;
   $71 = $__r;
   $72 = (($71) + 1)|0;
   $__r = $72;
  }
 }
 $73 = $__r;
 STACKTOP = sp;return ($73|0);
}
function __ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 24|0;
 $__t$i2 = sp + 56|0;
 $__t$i1 = sp + 88|0;
 $__t$i = sp + 12|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = HEAP32[$32>>2]|0;
 $34 = $24;
 $35 = $23;
 $36 = (FUNCTION_TABLE_iii[$33 & 1023]($34,$35)|0);
 if (!($36)) {
  $96 = $__r;
  STACKTOP = sp;return ($96|0);
 }
 $37 = $23;
 $38 = $24;
 $18 = $37;
 $19 = $38;
 $39 = $18;
 $17 = $39;
 $40 = $17;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$40+8>>2]|0;
 $41 = $18;
 $42 = $19;
 $15 = $42;
 $43 = $15;
 ;HEAP32[$41+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$43+8>>2]|0;
 $44 = $19;
 $16 = $__t$i;
 $45 = $16;
 ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$45+8>>2]|0;
 $46 = $__r;
 $47 = (($46) + 1)|0;
 $__r = $47;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = $23;
 $51 = $22;
 $52 = (FUNCTION_TABLE_iii[$49 & 1023]($50,$51)|0);
 if ($52) {
  $53 = $22;
  $54 = $23;
  $8 = $53;
  $9 = $54;
  $55 = $8;
  $7 = $55;
  $56 = $7;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$56+8>>2]|0;
  $57 = $8;
  $58 = $9;
  $5 = $58;
  $59 = $5;
  ;HEAP32[$57+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$59+8>>2]|0;
  $60 = $9;
  $6 = $__t$i2;
  $61 = $6;
  ;HEAP32[$60+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$61+8>>2]|0;
  $62 = $__r;
  $63 = (($62) + 1)|0;
  $__r = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  $66 = $22;
  $67 = $21;
  $68 = (FUNCTION_TABLE_iii[$65 & 1023]($66,$67)|0);
  if ($68) {
   $69 = $21;
   $70 = $22;
   $3 = $69;
   $4 = $70;
   $71 = $3;
   $2 = $71;
   $72 = $2;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$72+8>>2]|0;
   $73 = $3;
   $74 = $4;
   $0 = $74;
   $75 = $0;
   ;HEAP32[$73+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$75+8>>2]|0;
   $76 = $4;
   $1 = $__t$i3;
   $77 = $1;
   ;HEAP32[$76+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$76+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$76+8>>2]=HEAP32[$77+8>>2]|0;
   $78 = $__r;
   $79 = (($78) + 1)|0;
   $__r = $79;
   $80 = $25;
   $81 = HEAP32[$80>>2]|0;
   $82 = $21;
   $83 = $20;
   $84 = (FUNCTION_TABLE_iii[$81 & 1023]($82,$83)|0);
   if ($84) {
    $85 = $20;
    $86 = $21;
    $13 = $85;
    $14 = $86;
    $87 = $13;
    $12 = $87;
    $88 = $12;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$88+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$88+8>>2]|0;
    $89 = $13;
    $90 = $14;
    $10 = $90;
    $91 = $10;
    ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$91+8>>2]|0;
    $92 = $14;
    $11 = $__t$i1;
    $93 = $11;
    ;HEAP32[$92+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$92+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$92+8>>2]=HEAP32[$93+8>>2]|0;
    $94 = $__r;
    $95 = (($94) + 1)|0;
    $__r = $95;
   }
  }
 }
 $96 = $__r;
 STACKTOP = sp;return ($96|0);
}
function __ZNSt3__118__insertion_sort_3IRPFbRK6b2PairS3_EPS1_EEvT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 20|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = (($6) + 24|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = (($9) + 12|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = (($13) + 12|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = HEAP32[$18>>2]|0;
  $20 = $__i;
  $21 = $__j;
  $22 = (FUNCTION_TABLE_iii[$19 & 1023]($20,$21)|0);
  if ($22) {
   $23 = $__i;
   $2 = $23;
   $24 = $2;
   ;HEAP32[$__t+0>>2]=HEAP32[$24+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$24+8>>2]|0;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__j;
    $28 = $__k;
    $0 = $28;
    $29 = $0;
    ;HEAP32[$27+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$29+8>>2]|0;
    $30 = $__k;
    $__j = $30;
    $31 = $__j;
    $32 = $3;
    $33 = ($31|0)!=($32|0);
    if ($33) {
     $34 = $5;
     $35 = HEAP32[$34>>2]|0;
     $36 = $__k;
     $37 = (($36) + -12|0);
     $__k = $37;
     $38 = (FUNCTION_TABLE_iii[$35 & 1023]($__t,$37)|0);
     $44 = $38;
    } else {
     $44 = 0;
    }
    if (!($44)) {
     break;
    }
   }
   $39 = $__j;
   $1 = $__t;
   $40 = $1;
   ;HEAP32[$39+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$40+8>>2]|0;
  }
  $41 = $__i;
  $__j = $41;
  $42 = $__i;
  $43 = (($42) + 12|0);
  $__i = $43;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRPFbRK6b2PairS3_EPS1_EEbT0_S8_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 72|0;
 $__t = sp + 60|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 12)&-1;
 switch ($17|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $8 = $$expand_i1_val;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 5:  {
  $47 = $9;
  $48 = $9;
  $49 = (($48) + 12|0);
  $50 = $9;
  $51 = (($50) + 24|0);
  $52 = $9;
  $53 = (($52) + 36|0);
  $54 = $10;
  $55 = (($54) + -12|0);
  $10 = $55;
  $56 = $11;
  (__ZNSt3__17__sort5IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_S8_T_($47,$49,$51,$53,$55,$56)|0);
  $$expand_i1_val8 = 1;
  $8 = $$expand_i1_val8;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 3:  {
  $33 = $9;
  $34 = $9;
  $35 = (($34) + 12|0);
  $36 = $10;
  $37 = (($36) + -12|0);
  $10 = $37;
  $38 = $11;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($33,$35,$37,$38)|0);
  $$expand_i1_val4 = 1;
  $8 = $$expand_i1_val4;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 2:  {
  $18 = $11;
  $19 = HEAP32[$18>>2]|0;
  $20 = $10;
  $21 = (($20) + -12|0);
  $10 = $21;
  $22 = $9;
  $23 = (FUNCTION_TABLE_iii[$19 & 1023]($21,$22)|0);
  if ($23) {
   $24 = $9;
   $25 = $10;
   $6 = $24;
   $7 = $25;
   $26 = $6;
   $5 = $26;
   $27 = $5;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$27+8>>2]|0;
   $28 = $6;
   $29 = $7;
   $3 = $29;
   $30 = $3;
   ;HEAP32[$28+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$30+8>>2]|0;
   $31 = $7;
   $4 = $__t$i;
   $32 = $4;
   ;HEAP32[$31+0>>2]=HEAP32[$32+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$32+8>>2]|0;
  }
  $$expand_i1_val2 = 1;
  $8 = $$expand_i1_val2;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 case 4:  {
  $39 = $9;
  $40 = $9;
  $41 = (($40) + 12|0);
  $42 = $9;
  $43 = (($42) + 24|0);
  $44 = $10;
  $45 = (($44) + -12|0);
  $10 = $45;
  $46 = $11;
  (__ZNSt3__17__sort4IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_S8_T_($39,$41,$43,$45,$46)|0);
  $$expand_i1_val6 = 1;
  $8 = $$expand_i1_val6;
  $$pre_trunc = $8;
  $102 = $$pre_trunc&1;
  STACKTOP = sp;return ($102|0);
  break;
 }
 default: {
  $57 = $9;
  $58 = (($57) + 24|0);
  $__j = $58;
  $59 = $9;
  $60 = $9;
  $61 = (($60) + 12|0);
  $62 = $__j;
  $63 = $11;
  (__ZNSt3__17__sort3IRPFbRK6b2PairS3_EPS1_EEjT0_S8_S8_T_($59,$61,$62,$63)|0);
  $__limit = 8;
  $__count = 0;
  $64 = $__j;
  $65 = (($64) + 12|0);
  $__i = $65;
  while(1) {
   $66 = $__i;
   $67 = $10;
   $68 = ($66|0)!=($67|0);
   if (!($68)) {
    label = 22;
    break;
   }
   $69 = $11;
   $70 = HEAP32[$69>>2]|0;
   $71 = $__i;
   $72 = $__j;
   $73 = (FUNCTION_TABLE_iii[$70 & 1023]($71,$72)|0);
   if ($73) {
    $74 = $__i;
    $1 = $74;
    $75 = $1;
    ;HEAP32[$__t+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$75+8>>2]|0;
    $76 = $__j;
    $__k = $76;
    $77 = $__i;
    $__j = $77;
    while(1) {
     $78 = $__j;
     $79 = $__k;
     $0 = $79;
     $80 = $0;
     ;HEAP32[$78+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;
     $81 = $__k;
     $__j = $81;
     $82 = $__j;
     $83 = $9;
     $84 = ($82|0)!=($83|0);
     if ($84) {
      $85 = $11;
      $86 = HEAP32[$85>>2]|0;
      $87 = $__k;
      $88 = (($87) + -12|0);
      $__k = $88;
      $89 = (FUNCTION_TABLE_iii[$86 & 1023]($__t,$88)|0);
      $103 = $89;
     } else {
      $103 = 0;
     }
     if (!($103)) {
      break;
     }
    }
    $90 = $__j;
    $2 = $__t;
    $91 = $2;
    ;HEAP32[$90+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$90+8>>2]=HEAP32[$91+8>>2]|0;
    $92 = $__count;
    $93 = (($92) + 1)|0;
    $__count = $93;
    $94 = ($93|0)==(8);
    if ($94) {
     label = 18;
     break;
    }
   }
   $99 = $__i;
   $__j = $99;
   $100 = $__i;
   $101 = (($100) + 12|0);
   $__i = $101;
  }
  if ((label|0) == 18) {
   $95 = $__i;
   $96 = (($95) + 12|0);
   $__i = $96;
   $97 = $10;
   $98 = ($96|0)==($97|0);
   $$expand_i1_val10 = $98&1;
   $8 = $$expand_i1_val10;
   $$pre_trunc = $8;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $8 = $$expand_i1_val12;
   $$pre_trunc = $8;
   $102 = $$pre_trunc&1;
   STACKTOP = sp;return ($102|0);
  }
 }
 }
 return 0|0;
}
function __ZN9b2FixtureC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 __ZN8b2FilterC2Ev($2);
 $3 = (($1) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = (($1) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 36|0);
 HEAP32[$7>>2] = 0;
 $8 = (($1) + 12|0);
 HEAP32[$8>>2] = 0;
 HEAPF32[$1>>2] = 0.0;
 $9 = (($1) + 20|0);
 HEAP32[$9>>2] = -1;
 $10 = (($1) + 16|0);
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this,$allocator,$body,$def) {
 $this = $this|0;
 $allocator = $allocator|0;
 $body = $body|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, $childCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $body;
 $3 = $def;
 $4 = $0;
 $5 = $3;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + 48|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($4) + 24|0);
 HEAPF32[$12>>2] = $11;
 $13 = $3;
 $14 = (($13) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($4) + 28|0);
 HEAPF32[$16>>2] = $15;
 $17 = $2;
 $18 = (($4) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = (($4) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = (($4) + 40|0);
 $21 = $3;
 $22 = (($21) + 22|0);
 ;HEAP16[$20+0>>1]=HEAP16[$22+0>>1]|0;HEAP16[$20+2>>1]=HEAP16[$22+2>>1]|0;HEAP16[$20+4>>1]=HEAP16[$22+4>>1]|0;
 $23 = $3;
 $24 = (($23) + 20|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 $27 = (($4) + 46|0);
 $28 = $26&1;
 HEAP8[$27>>0] = $28;
 $29 = $3;
 $30 = (($29) + 20|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&1;
 if ($32) {
 }
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $1;
 $39 = (FUNCTION_TABLE_iii[$37 & 1023]($34,$38)|0);
 $40 = (($4) + 12|0);
 HEAP32[$40>>2] = $39;
 $41 = (($4) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (FUNCTION_TABLE_ii[$45 & 1023]($42)|0);
 $childCount = $46;
 $47 = $1;
 $48 = $childCount;
 $49 = ($48*36)|0;
 $50 = (__ZN16b2BlockAllocator8AllocateEi($47,$49)|0);
 $51 = (($4) + 32|0);
 HEAP32[$51>>2] = $50;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $childCount;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $i;
  $56 = (($4) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + (($55*36)|0)|0);
  $59 = (($58) + 16|0);
  HEAP32[$59>>2] = 0;
  $60 = $i;
  $61 = (($4) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + (($60*36)|0)|0);
  $64 = (($63) + 24|0);
  HEAP32[$64>>2] = -1;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $67 = (($4) + 36|0);
 HEAP32[$67>>2] = 0;
 $68 = $3;
 $69 = (($68) + 16|0);
 $70 = +HEAPF32[$69>>2];
 HEAPF32[$4>>2] = $70;
 STACKTOP = sp;return;
}
function __ZN9b2Fixture7DestroyEP16b2BlockAllocator($this,$allocator) {
 $this = $this|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $childCount = 0, $s = 0, $s1 = 0, $s2 = 0, $s3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  ___assert_fail((21864|0),(21888|0),84,(21968|0));
  // unreachable;
 }
 $6 = (($2) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $childCount = $11;
 $12 = $1;
 $13 = (($2) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $childCount;
 $16 = ($15*36)|0;
 __ZN16b2BlockAllocator4FreeEPvi($12,$14,$16);
 $17 = (($2) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = (($2) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 if ((($21|0) == 1)) {
  $29 = (($2) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $s1 = $30;
  $31 = $s1;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 1023]($31);
  $34 = $1;
  $35 = $s1;
  __ZN16b2BlockAllocator4FreeEPvi($34,$35,48);
  $50 = (($2) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($21|0) == 0)) {
  $22 = (($2) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $s = $23;
  $24 = $s;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$26 & 1023]($24);
  $27 = $1;
  $28 = $s;
  __ZN16b2BlockAllocator4FreeEPvi($27,$28,20);
  $50 = (($2) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($21|0) == 3)) {
  $43 = (($2) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $s3 = $44;
  $45 = $s3;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vi[$47 & 1023]($45);
  $48 = $1;
  $49 = $s3;
  __ZN16b2BlockAllocator4FreeEPvi($48,$49,40);
  $50 = (($2) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($21|0) == 2)) {
  $36 = (($2) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $s2 = $37;
  $38 = $s2;
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($38);
  $41 = $1;
  $42 = $s2;
  __ZN16b2BlockAllocator4FreeEPvi($41,$42,152);
  $50 = (($2) + 12|0);
  HEAP32[$50>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((21976|0),(21888|0),127,(21968|0));
  // unreachable;
 }
}
function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this,$broadPhase,$xf) {
 $this = $this|0;
 $broadPhase = $broadPhase|0;
 $xf = $xf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $broadPhase;
 $2 = $xf;
 $3 = $0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  ___assert_fail((21864|0),(21888|0),136,(21984|0));
  // unreachable;
 }
 $7 = (($3) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = (($3) + 36|0);
 HEAP32[$13>>2] = $12;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = (($3) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = (($3) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $i;
  $21 = (($19) + (($20*36)|0)|0);
  $proxy = $21;
  $22 = (($3) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $proxy;
  $28 = $2;
  $29 = $i;
  FUNCTION_TABLE_viiii[$26 & 1023]($23,$27,$28,$29);
  $30 = $1;
  $31 = $proxy;
  $32 = $proxy;
  $33 = (__ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($30,$31,$32)|0);
  $34 = $proxy;
  $35 = (($34) + 24|0);
  HEAP32[$35>>2] = $33;
  $36 = $proxy;
  $37 = (($36) + 16|0);
  HEAP32[$37>>2] = $3;
  $38 = $i;
  $39 = $proxy;
  $40 = (($39) + 20|0);
  HEAP32[$40>>2] = $38;
  $41 = $proxy;
  $42 = (($41) + 32|0);
  HEAP32[$42>>2] = -1;
  $43 = $proxy;
  $44 = (($43) + 28|0);
  HEAP32[$44>>2] = -1;
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 STACKTOP = sp;return;
}
function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this,$broadPhase,$transform1,$transform2) {
 $this = $this|0;
 $broadPhase = $broadPhase|0;
 $transform1 = $transform1|0;
 $transform2 = $transform2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabb1 = 0, $aabb2 = 0, $displacement = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aabb1 = sp + 16|0;
 $aabb2 = sp + 48|0;
 $displacement = sp + 40|0;
 $0 = $this;
 $1 = $broadPhase;
 $2 = $transform1;
 $3 = $transform2;
 $4 = $0;
 $5 = (($4) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (($4) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = (($4) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $i;
  $15 = (($13) + (($14*36)|0)|0);
  $proxy = $15;
  __ZN6b2AABBC2Ev($aabb1);
  __ZN6b2AABBC2Ev($aabb2);
  $16 = (($4) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = $proxy;
  $23 = (($22) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_viiii[$20 & 1023]($17,$aabb1,$21,$24);
  $25 = (($4) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = $proxy;
  $32 = (($31) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_viiii[$29 & 1023]($26,$aabb2,$30,$33);
  $34 = $proxy;
  __ZN6b2AABB7CombineERKS_S1_($34,$aabb1,$aabb2);
  $35 = $3;
  $36 = $2;
  __ZmiRK6b2Vec2S1_($displacement,$35,$36);
  $37 = $1;
  $38 = $proxy;
  $39 = (($38) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $proxy;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($37,$40,$41,$displacement);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 STACKTOP = sp;return;
}
function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListenerP7b2WorldP10b2CLSolver($this,$bodyCapacity,$contactCapacity,$jointCapacity,$allocator,$listener,$pWorld,$pb2clSolver) {
 $this = $this|0;
 $bodyCapacity = $bodyCapacity|0;
 $contactCapacity = $contactCapacity|0;
 $jointCapacity = $jointCapacity|0;
 $allocator = $allocator|0;
 $listener = $listener|0;
 $pWorld = $pWorld|0;
 $pb2clSolver = $pb2clSolver|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $bodyCapacity;
 $2 = $contactCapacity;
 $3 = $jointCapacity;
 $4 = $allocator;
 $5 = $listener;
 $6 = $pWorld;
 $7 = $pb2clSolver;
 $8 = $0;
 $9 = $1;
 $10 = (($8) + 40|0);
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = (($8) + 44|0);
 HEAP32[$12>>2] = $11;
 $13 = $3;
 $14 = (($8) + 48|0);
 HEAP32[$14>>2] = $13;
 $15 = (($8) + 28|0);
 HEAP32[$15>>2] = 0;
 $16 = (($8) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = (($8) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = $4;
 HEAP32[$8>>2] = $18;
 $19 = $5;
 $20 = (($8) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = $6;
 $22 = (($8) + 52|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP8[3200>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = $7;
  $26 = (($8) + 56|0);
  HEAP32[$26>>2] = $25;
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = $1;
 $29 = $28<<2;
 $30 = (__ZN16b2StackAllocator8AllocateEi($27,$29)|0);
 $31 = (($8) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$8>>2]|0;
 $33 = $2;
 $34 = $33<<2;
 $35 = (__ZN16b2StackAllocator8AllocateEi($32,$34)|0);
 $36 = (($8) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$8>>2]|0;
 $38 = $3;
 $39 = $38<<2;
 $40 = (__ZN16b2StackAllocator8AllocateEi($37,$39)|0);
 $41 = (($8) + 16|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$8>>2]|0;
 $43 = (($8) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44*12)|0;
 $46 = (__ZN16b2StackAllocator8AllocateEi($42,$45)|0);
 $47 = (($8) + 24|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$8>>2]|0;
 $49 = (($8) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50*12)|0;
 $52 = (__ZN16b2StackAllocator8AllocateEi($48,$51)|0);
 $53 = (($8) + 20|0);
 HEAP32[$53>>2] = $52;
 STACKTOP = sp;return;
}
function __ZN8b2IslandD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($2,$4);
 $5 = HEAP32[$1>>2]|0;
 $6 = (($1) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($5,$7);
 $8 = HEAP32[$1>>2]|0;
 $9 = (($1) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($8,$10);
 $11 = HEAP32[$1>>2]|0;
 $12 = (($1) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($11,$13);
 $14 = HEAP32[$1>>2]|0;
 $15 = (($1) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($14,$16);
 STACKTOP = sp;return;
}
function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this,$profile,$step,$gravity,$allowSleep) {
 $this = $this|0;
 $profile = $profile|0;
 $step = $step|0;
 $gravity = $gravity|0;
 $allowSleep = $allowSleep|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0;
 var $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0.0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0.0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $a = 0.0, $a7 = 0.0, $b = 0, $b3 = 0, $body = 0, $c = 0, $c6 = 0, $constraintFinalizeTimer = 0, $constraintInitCPUTimer = 0, $constraintInitGPUTimer = 0, $constraintSolveTimer = 0;
 var $constraintSolveTimer13 = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i11 = 0, $i12 = 0, $i14 = 0, $i16 = 0, $i17 = 0, $i2 = 0, $i4 = 0, $i5 = 0, $j = 0, $jointOkay = 0, $jointsOkay = 0, $pContactSolver = 0, $positionSolved = 0, $positionSolved15 = 0;
 var $ratio = 0.0, $ratio10 = 0.0, $rotation = 0.0, $solverData = 0, $solverTimer = 0, $testSolvePositionConstraintTimer = 0, $testSolveVelocityConstraintTimer = 0, $timer = 0, $translation = 0, $v = 0, $v8 = 0, $w = 0.0, $w9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 336|0;
 $$byval_copy = sp + 176|0;
 $solverTimer = sp + 348|0;
 $constraintInitCPUTimer = sp + 351|0;
 $timer = sp + 349|0;
 $solverData = sp + 56|0;
 $contactSolverDef = sp + 88|0;
 $c = sp + 144|0;
 $v = sp + 280|0;
 $5 = sp + 304|0;
 $6 = sp + 320|0;
 $7 = sp + 328|0;
 $8 = sp + 192|0;
 $constraintSolveTimer = sp + 354|0;
 $c6 = sp + 248|0;
 $v8 = sp + 24|0;
 $translation = sp + 264|0;
 $11 = sp;
 $constraintInitGPUTimer = sp + 345|0;
 $12 = sp + 160|0;
 $13 = sp + 224|0;
 $constraintSolveTimer13 = sp + 356|0;
 $testSolveVelocityConstraintTimer = sp + 358|0;
 $testSolvePositionConstraintTimer = sp + 347|0;
 $constraintFinalizeTimer = sp + 344|0;
 $0 = $this;
 $1 = $profile;
 $2 = $step;
 $3 = $gravity;
 $14 = $allowSleep&1;
 $4 = $14;
 $15 = $0;
 __ZN7b2TimerC2Ev($solverTimer);
 __ZN7b2TimerC2Ev($constraintInitCPUTimer);
 $pContactSolver = 0;
 __ZN7b2TimerC2Ev($timer);
 $16 = $2;
 $17 = +HEAPF32[$16>>2];
 $h = $17;
 $18 = HEAP8[3200>>0]|0;
 $19 = $18&1;
 if ($19) {
  $i2 = 0;
  while(1) {
   $174 = $i2;
   $175 = (($15) + 28|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)<($176|0);
   if (!($177)) {
    break;
   }
   $178 = $i2;
   $179 = (($15) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + ($178<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $b3 = $182;
   $183 = $b3;
   $184 = (($183) + 28|0);
   $185 = (($184) + 8|0);
   $186 = $b3;
   $187 = (($186) + 28|0);
   $188 = (($187) + 16|0);
   ;HEAP32[$185+0>>2]=HEAP32[$188+0>>2]|0;HEAP32[$185+4>>2]=HEAP32[$188+4>>2]|0;
   $189 = $b3;
   $190 = (($189) + 28|0);
   $191 = (($190) + 28|0);
   $192 = +HEAPF32[$191>>2];
   $193 = $b3;
   $194 = (($193) + 28|0);
   $195 = (($194) + 24|0);
   HEAPF32[$195>>2] = $192;
   $196 = $i2;
   $197 = (($196) + 1)|0;
   $i2 = $197;
  }
 } else {
  $i = 0;
  while(1) {
   $20 = $i;
   $21 = (($15) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $i;
   $25 = (($15) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($24<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $b = $28;
   $29 = $b;
   $30 = (($29) + 28|0);
   $31 = (($30) + 16|0);
   ;HEAP32[$c+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$c+4>>2]=HEAP32[$31+4>>2]|0;
   $32 = $b;
   $33 = (($32) + 28|0);
   $34 = (($33) + 28|0);
   $35 = +HEAPF32[$34>>2];
   $a = $35;
   $36 = $b;
   $37 = (($36) + 64|0);
   ;HEAP32[$v+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$v+4>>2]=HEAP32[$37+4>>2]|0;
   $38 = $b;
   $39 = (($38) + 72|0);
   $40 = +HEAPF32[$39>>2];
   $w = $40;
   $41 = $b;
   $42 = (($41) + 28|0);
   $43 = (($42) + 8|0);
   $44 = $b;
   $45 = (($44) + 28|0);
   $46 = (($45) + 16|0);
   ;HEAP32[$43+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$43+4>>2]=HEAP32[$46+4>>2]|0;
   $47 = $b;
   $48 = (($47) + 28|0);
   $49 = (($48) + 28|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $b;
   $52 = (($51) + 28|0);
   $53 = (($52) + 24|0);
   HEAPF32[$53>>2] = $50;
   $54 = $b;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(2);
   if ($56) {
    $57 = $h;
    $58 = $b;
    $59 = (($58) + 148|0);
    $60 = +HEAPF32[$59>>2];
    $61 = $3;
    __ZmlfRK6b2Vec2($7,$60,$61);
    $62 = $b;
    $63 = (($62) + 128|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $b;
    $66 = (($65) + 76|0);
    __ZmlfRK6b2Vec2($8,$64,$66);
    __ZplRK6b2Vec2S1_($6,$7,$8);
    __ZmlfRK6b2Vec2($5,$57,$6);
    __ZN6b2Vec2pLERKS_($v,$5);
    $67 = $h;
    $68 = $b;
    $69 = (($68) + 136|0);
    $70 = +HEAPF32[$69>>2];
    $71 = $67 * $70;
    $72 = $b;
    $73 = (($72) + 84|0);
    $74 = +HEAPF32[$73>>2];
    $75 = $71 * $74;
    $76 = $w;
    $77 = $76 + $75;
    $w = $77;
    $78 = $h;
    $79 = $b;
    $80 = (($79) + 140|0);
    $81 = +HEAPF32[$80>>2];
    $82 = $78 * $81;
    $83 = 1.0 - $82;
    $84 = (+__Z7b2ClampIfET_S0_S0_S0_($83,0.0,1.0));
    __ZN6b2Vec2mLEf($v,$84);
    $85 = $h;
    $86 = $b;
    $87 = (($86) + 144|0);
    $88 = +HEAPF32[$87>>2];
    $89 = $85 * $88;
    $90 = 1.0 - $89;
    $91 = (+__Z7b2ClampIfET_S0_S0_S0_($90,0.0,1.0));
    $92 = $w;
    $93 = $92 * $91;
    $w = $93;
   }
   $94 = $i;
   $95 = (($15) + 20|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + (($94*12)|0)|0);
   ;HEAP32[$97+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$c+4>>2]|0;
   $98 = $a;
   $99 = $i;
   $100 = (($15) + 20|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + (($99*12)|0)|0);
   $103 = (($102) + 8|0);
   HEAPF32[$103>>2] = $98;
   $104 = $i;
   $105 = (($15) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + (($104*12)|0)|0);
   ;HEAP32[$107+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$107+4>>2]=HEAP32[$v+4>>2]|0;
   $108 = $w;
   $109 = $i;
   $110 = (($15) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + (($109*12)|0)|0);
   $113 = (($112) + 8|0);
   HEAPF32[$113>>2] = $108;
   $114 = $i;
   $115 = (($114) + 1)|0;
   $i = $115;
  }
  __ZN7b2Timer5ResetEv($timer);
  $116 = $2;
  ;HEAP32[$solverData+0>>2]=HEAP32[$116+0>>2]|0;HEAP32[$solverData+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$solverData+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$solverData+12>>2]=HEAP32[$116+12>>2]|0;HEAP32[$solverData+16>>2]=HEAP32[$116+16>>2]|0;HEAP32[$solverData+20>>2]=HEAP32[$116+20>>2]|0;
  $117 = (($15) + 20|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($solverData) + 24|0);
  HEAP32[$119>>2] = $118;
  $120 = (($15) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($solverData) + 28|0);
  HEAP32[$122>>2] = $121;
  $123 = $2;
  ;HEAP32[$contactSolverDef+0>>2]=HEAP32[$123+0>>2]|0;HEAP32[$contactSolverDef+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$contactSolverDef+8>>2]=HEAP32[$123+8>>2]|0;HEAP32[$contactSolverDef+12>>2]=HEAP32[$123+12>>2]|0;HEAP32[$contactSolverDef+16>>2]=HEAP32[$123+16>>2]|0;HEAP32[$contactSolverDef+20>>2]=HEAP32[$123+20>>2]|0;
  $124 = (($15) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($contactSolverDef) + 24|0);
  HEAP32[$126>>2] = $125;
  $127 = (($15) + 36|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($contactSolverDef) + 28|0);
  HEAP32[$129>>2] = $128;
  $130 = (($15) + 20|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($contactSolverDef) + 32|0);
  HEAP32[$132>>2] = $131;
  $133 = (($15) + 24|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($contactSolverDef) + 36|0);
  HEAP32[$135>>2] = $134;
  $136 = HEAP32[$15>>2]|0;
  $137 = (($contactSolverDef) + 40|0);
  HEAP32[$137>>2] = $136;
  $138 = (__Znwj(52)|0);
  __THREW__ = 0;
  invoke_vii(492,($138|0),($contactSolverDef|0));
  $139 = __THREW__; __THREW__ = 0;
  $140 = $139&1;
  if ($140) {
   $147 = ___cxa_find_matching_catch()|0;
   $148 = tempRet0;
   $9 = $147;
   $10 = $148;
   __ZdlPv($138);
   $645 = $9;
   $646 = $10;
   ___resumeException($645|0);
   // unreachable;
  }
  $pContactSolver = $138;
  $141 = $pContactSolver;
  __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($141);
  $142 = $2;
  $143 = (($142) + 20|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&1;
  if ($145) {
   $146 = $pContactSolver;
   __ZN15b2ContactSolver9WarmStartEv($146);
  }
  $i1 = 0;
  while(1) {
   $149 = $i1;
   $150 = (($15) + 32|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ($149|0)<($151|0);
   if (!($152)) {
    break;
   }
   $153 = $i1;
   $154 = (($15) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + ($153<<2)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + 28|0);
   $160 = HEAP32[$159>>2]|0;
   FUNCTION_TABLE_vii[$160 & 1023]($157,$solverData);
   $161 = $i1;
   $162 = (($161) + 1)|0;
   $i1 = $162;
  }
  $163 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
  $164 = $1;
  $165 = (($164) + 12|0);
  HEAPF32[$165>>2] = $163;
  $166 = (($15) + 36|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (+($167|0));
  $169 = (($15) + 52|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + 103904|0);
  $172 = +HEAPF64[$171>>3];
  $173 = $172 + $168;
  HEAPF64[$171>>3] = $173;
 }
 $198 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitCPUTimer));
 $199 = (($15) + 52|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = (($200) + 103984|0);
 $202 = +HEAPF32[$201>>2];
 $203 = $202 + $198;
 HEAPF32[$201>>2] = $203;
 __ZN7b2TimerC2Ev($constraintSolveTimer);
 $204 = HEAP8[3200>>0]|0;
 $205 = $204&1;
 if (!($205)) {
  __ZN7b2Timer5ResetEv($timer);
  $i4 = 0;
  while(1) {
   $206 = $i4;
   $207 = $2;
   $208 = (($207) + 12|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($206|0)<($209|0);
   if (!($210)) {
    break;
   }
   $j = 0;
   while(1) {
    $211 = $j;
    $212 = (($15) + 32|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($211|0)<($213|0);
    if (!($214)) {
     break;
    }
    $215 = $j;
    $216 = (($15) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + ($215<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + 32|0);
    $222 = HEAP32[$221>>2]|0;
    FUNCTION_TABLE_vii[$222 & 1023]($219,$solverData);
    $223 = $j;
    $224 = (($223) + 1)|0;
    $j = $224;
   }
   $225 = $pContactSolver;
   __ZN15b2ContactSolver24SolveVelocityConstraintsEv($225);
   $226 = $i4;
   $227 = (($226) + 1)|0;
   $i4 = $227;
  }
  $228 = $pContactSolver;
  __ZN15b2ContactSolver13StoreImpulsesEv($228);
  $229 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
  $230 = $1;
  $231 = (($230) + 16|0);
  HEAPF32[$231>>2] = $229;
  $i5 = 0;
  while(1) {
   $232 = $i5;
   $233 = (($15) + 28|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($232|0)<($234|0);
   if (!($235)) {
    break;
   }
   $236 = $i5;
   $237 = (($15) + 20|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = (($238) + (($236*12)|0)|0);
   ;HEAP32[$c6+0>>2]=HEAP32[$239+0>>2]|0;HEAP32[$c6+4>>2]=HEAP32[$239+4>>2]|0;
   $240 = $i5;
   $241 = (($15) + 20|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = (($242) + (($240*12)|0)|0);
   $244 = (($243) + 8|0);
   $245 = +HEAPF32[$244>>2];
   $a7 = $245;
   $246 = $i5;
   $247 = (($15) + 24|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + (($246*12)|0)|0);
   ;HEAP32[$v8+0>>2]=HEAP32[$249+0>>2]|0;HEAP32[$v8+4>>2]=HEAP32[$249+4>>2]|0;
   $250 = $i5;
   $251 = (($15) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($252) + (($250*12)|0)|0);
   $254 = (($253) + 8|0);
   $255 = +HEAPF32[$254>>2];
   $w9 = $255;
   $256 = $h;
   __ZmlfRK6b2Vec2($translation,$256,$v8);
   $257 = (+__Z5b2DotRK6b2Vec2S1_($translation,$translation));
   $258 = $257 > 4.0;
   if ($258) {
    $259 = (+__ZNK6b2Vec26LengthEv($translation));
    $260 = 2.0 / $259;
    $ratio = $260;
    $261 = $ratio;
    __ZN6b2Vec2mLEf($v8,$261);
   }
   $262 = $h;
   $263 = $w9;
   $264 = $262 * $263;
   $rotation = $264;
   $265 = $rotation;
   $266 = $rotation;
   $267 = $265 * $266;
   $268 = $267 > 2.4674012660980225;
   if ($268) {
    $269 = $rotation;
    $270 = (+__Z5b2AbsIfET_S0_($269));
    $271 = 1.5707963705062866 / $270;
    $ratio10 = $271;
    $272 = $ratio10;
    $273 = $w9;
    $274 = $273 * $272;
    $w9 = $274;
   }
   $275 = $h;
   __ZmlfRK6b2Vec2($11,$275,$v8);
   __ZN6b2Vec2pLERKS_($c6,$11);
   $276 = $h;
   $277 = $w9;
   $278 = $276 * $277;
   $279 = $a7;
   $280 = $279 + $278;
   $a7 = $280;
   $281 = $i5;
   $282 = (($15) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (($283) + (($281*12)|0)|0);
   ;HEAP32[$284+0>>2]=HEAP32[$c6+0>>2]|0;HEAP32[$284+4>>2]=HEAP32[$c6+4>>2]|0;
   $285 = $a7;
   $286 = $i5;
   $287 = (($15) + 20|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) + (($286*12)|0)|0);
   $290 = (($289) + 8|0);
   HEAPF32[$290>>2] = $285;
   $291 = $i5;
   $292 = (($15) + 24|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + (($291*12)|0)|0);
   ;HEAP32[$294+0>>2]=HEAP32[$v8+0>>2]|0;HEAP32[$294+4>>2]=HEAP32[$v8+4>>2]|0;
   $295 = $w9;
   $296 = $i5;
   $297 = (($15) + 24|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = (($298) + (($296*12)|0)|0);
   $300 = (($299) + 8|0);
   HEAPF32[$300>>2] = $295;
   $301 = $i5;
   $302 = (($301) + 1)|0;
   $i5 = $302;
  }
  __ZN7b2Timer5ResetEv($timer);
  $positionSolved = 0;
  $i11 = 0;
  while(1) {
   $303 = $i11;
   $304 = $2;
   $305 = (($304) + 16|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($303|0)<($306|0);
   if (!($307)) {
    break;
   }
   $308 = $pContactSolver;
   $309 = (__ZN15b2ContactSolver24SolvePositionConstraintsEv($308)|0);
   $310 = $309&1;
   $contactsOkay = $310;
   $jointsOkay = 1;
   $i12 = 0;
   while(1) {
    $311 = $i12;
    $312 = (($15) + 32|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = ($311|0)<($313|0);
    if (!($314)) {
     break;
    }
    $315 = $i12;
    $316 = (($15) + 16|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = (($317) + ($315<<2)|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = HEAP32[$319>>2]|0;
    $321 = (($320) + 36|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (FUNCTION_TABLE_iii[$322 & 1023]($319,$solverData)|0);
    $324 = $323&1;
    $jointOkay = $324;
    $325 = $jointsOkay;
    $326 = $325&1;
    if ($326) {
     $327 = $jointOkay;
     $328 = $327&1;
     $330 = $328;
    } else {
     $330 = 0;
    }
    $329 = $330&1;
    $jointsOkay = $329;
    $331 = $i12;
    $332 = (($331) + 1)|0;
    $i12 = $332;
   }
   $333 = $contactsOkay;
   $334 = $333&1;
   if ($334) {
    $335 = $jointsOkay;
    $336 = $335&1;
    if ($336) {
     label = 49;
     break;
    }
   }
   $337 = $i11;
   $338 = (($337) + 1)|0;
   $i11 = $338;
  }
  if ((label|0) == 49) {
   $positionSolved = 1;
  }
 }
 $339 = HEAP8[3200>>0]|0;
 $340 = $339&1;
 if ($340) {
  $341 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitCPUTimer));
  $342 = (($15) + 52|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = (($343) + 103984|0);
  $345 = +HEAPF32[$344>>2];
  $346 = $345 + $341;
  HEAPF32[$344>>2] = $346;
  $347 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($347);
  __ZN7b2TimerC2Ev($constraintInitGPUTimer);
  $348 = (($15) + 56|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = (($15) + 28|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = (($15) + 36|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = (($15) + 52|0);
  $355 = HEAP32[$354>>2]|0;
  __ZNK7b2World10GetGravityEv($12,$355);
  $356 = $2;
  $357 = +HEAPF32[$356>>2];
  $358 = $2;
  $359 = (($358) + 8|0);
  $360 = +HEAPF32[$359>>2];
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;
  __ZN10b2CLSolver9SetValuesEii6b2Vec2ff($349,$351,$353,$$byval_copy,$357,$360);
  $361 = (($15) + 36|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ($362|0)>(0);
  if ($363) {
   $364 = (($15) + 56|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = (($15) + 36|0);
   __ZN10b2CLSolver25b2CLReadCompactedContactsERi($365,$366);
  }
  $367 = (($15) + 56|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($15) + 8|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($15) + 12|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = (($15) + 24|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (($15) + 20|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = (($15) + 28|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = (($15) + 36|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $3;
  ;HEAP32[$13+0>>2]=HEAP32[$381+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$381+4>>2]|0;
  $382 = $2;
  $383 = +HEAPF32[$382>>2];
  $384 = (($15) + 52|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = (__ZNK7b2World17GetContactManagerEv($385)|0);
  $387 = (($15) + 12|0);
  $388 = HEAP32[$387>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;
  __ZN10b2CLSolver20b2CLInitializeSolverEPP6b2BodyPP9b2ContactP10b2VelocityP10b2Positionii6b2Vec2fRK16b2ContactManagerS5_P27b2ContactVelocityConstraintP27b2ContactPositionConstraint($368,$370,$372,$374,$376,$378,$380,$$byval_copy1,$383,$386,$388,0,0);
  $389 = (($15) + 56|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = (($390) + 12|0);
  $392 = +HEAPF32[$391>>2];
  $393 = (($15) + 52|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = (($394) + 103936|0);
  $396 = +HEAPF32[$395>>2];
  $397 = $396 + $392;
  HEAPF32[$395>>2] = $397;
  $398 = (($15) + 56|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($399) + 12|0);
  HEAPF32[$400>>2] = 0.0;
  $401 = (($15) + 52|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = (($402) + 103888|0);
  $404 = HEAP8[$403>>0]|0;
  $405 = $404&1;
  if ($405) {
   label = 58;
  } else {
   $406 = (($15) + 52|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + 103095|0);
   $409 = HEAP8[$408>>0]|0;
   $410 = $409&1;
   if ($410) {
    label = 58;
   } else {
    $413 = (($15) + 56|0);
    $414 = HEAP32[$413>>2]|0;
    __ZN10b2CLSolver23b2CLInitializeBodyStateEv($414);
   }
  }
  if ((label|0) == 58) {
   $411 = (($15) + 56|0);
   $412 = HEAP32[$411>>2]|0;
   __ZN10b2CLSolver33b2CLInitializeBodyStateFirstFrameEv($412);
  }
  $415 = (($15) + 56|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = $2;
  $418 = (($417) + 20|0);
  $419 = HEAP8[$418>>0]|0;
  $420 = $419&1;
  $421 = $2;
  $422 = +HEAPF32[$421>>2];
  __ZN10b2CLSolver37b2CLInitializeJointVelocityConstraintEbf($416,$420,$422);
  $423 = (($15) + 56|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = $2;
  $426 = (($425) + 20|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&1;
  $429 = $2;
  $430 = (($429) + 8|0);
  $431 = +HEAPF32[$430>>2];
  __ZN10b2CLSolver32b2CLInitializeVelocityConstraintEbf($424,$428,$431);
  $432 = (($15) + 52|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = (($433) + 103888|0);
  $435 = HEAP8[$434>>0]|0;
  $436 = $435&1;
  if ($436) {
   $437 = (($15) + 56|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = $2;
   $440 = (($439) + 20|0);
   $441 = HEAP8[$440>>0]|0;
   $442 = $441&1;
   $443 = $2;
   $444 = (($443) + 8|0);
   $445 = +HEAPF32[$444>>2];
   __ZN10b2CLSolver30b2CLReadLastImpulsesFirstFrameEbf($438,$442,$445);
  } else {
   $446 = (($15) + 56|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = $2;
   $449 = (($448) + 20|0);
   $450 = HEAP8[$449>>0]|0;
   $451 = $450&1;
   $452 = $2;
   $453 = (($452) + 8|0);
   $454 = +HEAPF32[$453>>2];
   __ZN10b2CLSolver20b2CLReadLastImpulsesEbf($447,$451,$454);
  }
  $455 = $2;
  $456 = (($455) + 20|0);
  $457 = HEAP8[$456>>0]|0;
  $458 = $457&1;
  if ($458) {
   $459 = (($15) + 56|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = (__ZN10b2CLSolver19GetLastContactCountEv($460)|0);
   $462 = ($461|0)>(0);
   if ($462) {
    $463 = (($15) + 56|0);
    $464 = HEAP32[$463>>2]|0;
    __ZN10b2CLSolver25b2CLWarmStartWithColoringEv($464);
   }
  }
  $465 = (($15) + 36|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = (+($466|0));
  $468 = (($15) + 52|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = (($469) + 103904|0);
  $471 = +HEAPF64[$470>>3];
  $472 = $471 + $467;
  HEAPF64[$470>>3] = $472;
  $473 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($473);
  $474 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintInitGPUTimer));
  $475 = (($15) + 52|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (($476) + 103988|0);
  $478 = +HEAPF32[$477>>2];
  $479 = $478 + $474;
  HEAPF32[$477>>2] = $479;
  __ZN7b2TimerC2Ev($constraintSolveTimer13);
  __ZN7b2TimerC2Ev($testSolveVelocityConstraintTimer);
  $i14 = 0;
  while(1) {
   $480 = $i14;
   $481 = $2;
   $482 = (($481) + 12|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = ($480|0)<($483|0);
   if (!($484)) {
    break;
   }
   $485 = (($15) + 56|0);
   $486 = HEAP32[$485>>2]|0;
   __ZN10b2CLSolver32b2CLSolveJointVelocityConstraintEi($486,1);
   $487 = (($15) + 56|0);
   $488 = HEAP32[$487>>2]|0;
   __ZN10b2CLSolver27b2CLSolveVelocityConstraintEi($488,1);
   $489 = $i14;
   $490 = (($489) + 1)|0;
   $i14 = $490;
  }
  $491 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($491);
  $492 = (+__ZNK7b2Timer15GetMillisecondsEv($testSolveVelocityConstraintTimer));
  $493 = (($15) + 52|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (($494) + 104004|0);
  $496 = +HEAPF32[$495>>2];
  $497 = $496 + $492;
  HEAPF32[$495>>2] = $497;
  $498 = $2;
  $499 = (($498) + 20|0);
  $500 = HEAP8[$499>>0]|0;
  $501 = $500&1;
  if ($501) {
   $502 = (($15) + 56|0);
   $503 = HEAP32[$502>>2]|0;
   __ZN10b2CLSolver17b2CLStoreImpulsesEv($503);
   $504 = (($15) + 56|0);
   $505 = HEAP32[$504>>2]|0;
   __ZN10b2CLSolver16SortManifoldKeysEv($505);
  }
  $506 = (($15) + 56|0);
  $507 = HEAP32[$506>>2]|0;
  __ZN10b2CLSolver22b2CLIntegratePositionsEv($507);
  $positionSolved15 = 0;
  $508 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($508);
  __ZN7b2TimerC2Ev($testSolvePositionConstraintTimer);
  $i16 = 0;
  while(1) {
   $509 = $i16;
   $510 = $2;
   $511 = (($510) + 16|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = ($509|0)<($512|0);
   if (!($513)) {
    break;
   }
   $514 = (($15) + 56|0);
   $515 = HEAP32[$514>>2]|0;
   __ZN10b2CLSolver27b2CLSolvePositionConstraintEi($515,1);
   $516 = (($15) + 56|0);
   $517 = HEAP32[$516>>2]|0;
   __ZN10b2CLSolver32b2CLSolveJointPositionConstraintEi($517,1);
   $518 = $i16;
   $519 = (($518) + 1)|0;
   $i16 = $519;
  }
  $520 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($520);
  $521 = (+__ZNK7b2Timer15GetMillisecondsEv($testSolvePositionConstraintTimer));
  $522 = (($15) + 52|0);
  $523 = HEAP32[$522>>2]|0;
  $524 = (($523) + 104008|0);
  $525 = +HEAPF32[$524>>2];
  $526 = $525 + $521;
  HEAPF32[$524>>2] = $526;
  $527 = (($15) + 56|0);
  $528 = HEAP32[$527>>2]|0;
  __ZN10b2CLSolver17b2CLSynchronizeXfEv($528);
  $529 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($529);
  $530 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintSolveTimer13));
  $531 = (($15) + 52|0);
  $532 = HEAP32[$531>>2]|0;
  $533 = (($532) + 103992|0);
  $534 = +HEAPF32[$533>>2];
  $535 = $534 + $530;
  HEAPF32[$533>>2] = $535;
  __ZN7b2TimerC2Ev($constraintFinalizeTimer);
  $536 = (($15) + 56|0);
  $537 = HEAP32[$536>>2]|0;
  __ZN10b2CLSolver27CopyResultsFromGPUForBodiesEv($537);
  $538 = (($15) + 52|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = (($539) + 103888|0);
  $541 = HEAP8[$540>>0]|0;
  $542 = $541&1;
  if ($542) {
   $543 = (($15) + 36|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = ($544|0)>(0);
   if ($545) {
    label = 80;
   } else {
    $546 = (($15) + 36|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = ($547|0)==(0);
    if ($548) {
     $549 = (__ZN14b2CLCommonData8instanceEv()|0);
     $550 = (__ZNK14b2CLCommonData12GetNumJointsEv($549)|0);
     $551 = ($550|0)!=(0);
     if ($551) {
      label = 80;
     }
    }
   }
   if ((label|0) == 80) {
    $552 = (($15) + 52|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = (($553) + 103888|0);
    HEAP8[$554>>0] = 0;
   }
  }
  $555 = (($15) + 52|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = (($556) + 103095|0);
  $558 = HEAP8[$557>>0]|0;
  $559 = $558&1;
  if ($559) {
   $560 = (($15) + 52|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = (($561) + 103095|0);
   HEAP8[$562>>0] = 0;
  }
  $563 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($563);
  $564 = (+__ZNK7b2Timer15GetMillisecondsEv($constraintFinalizeTimer));
  $565 = (($15) + 52|0);
  $566 = HEAP32[$565>>2]|0;
  $567 = (($566) + 103996|0);
  $568 = +HEAPF32[$567>>2];
  $569 = $568 + $564;
  HEAPF32[$567>>2] = $569;
  $570 = (+__ZNK7b2Timer15GetMillisecondsEv($solverTimer));
  $571 = (($15) + 52|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = (($572) + 103980|0);
  $574 = +HEAPF32[$573>>2];
  $575 = $574 + $570;
  HEAPF32[$573>>2] = $575;
 }
 $i17 = 0;
 while(1) {
  $576 = $i17;
  $577 = (($15) + 28|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = ($576|0)<($578|0);
  if (!($579)) {
   break;
  }
  $580 = $i17;
  $581 = (($15) + 8|0);
  $582 = HEAP32[$581>>2]|0;
  $583 = (($582) + ($580<<2)|0);
  $584 = HEAP32[$583>>2]|0;
  $body = $584;
  $585 = $body;
  $586 = (($585) + 28|0);
  $587 = (($586) + 16|0);
  $588 = $i17;
  $589 = (($15) + 20|0);
  $590 = HEAP32[$589>>2]|0;
  $591 = (($590) + (($588*12)|0)|0);
  ;HEAP32[$587+0>>2]=HEAP32[$591+0>>2]|0;HEAP32[$587+4>>2]=HEAP32[$591+4>>2]|0;
  $592 = $i17;
  $593 = (($15) + 20|0);
  $594 = HEAP32[$593>>2]|0;
  $595 = (($594) + (($592*12)|0)|0);
  $596 = (($595) + 8|0);
  $597 = +HEAPF32[$596>>2];
  $598 = $body;
  $599 = (($598) + 28|0);
  $600 = (($599) + 28|0);
  HEAPF32[$600>>2] = $597;
  $601 = $body;
  $602 = (($601) + 64|0);
  $603 = $i17;
  $604 = (($15) + 24|0);
  $605 = HEAP32[$604>>2]|0;
  $606 = (($605) + (($603*12)|0)|0);
  ;HEAP32[$602+0>>2]=HEAP32[$606+0>>2]|0;HEAP32[$602+4>>2]=HEAP32[$606+4>>2]|0;
  $607 = $i17;
  $608 = (($15) + 24|0);
  $609 = HEAP32[$608>>2]|0;
  $610 = (($609) + (($607*12)|0)|0);
  $611 = (($610) + 8|0);
  $612 = +HEAPF32[$611>>2];
  $613 = $body;
  $614 = (($613) + 72|0);
  HEAPF32[$614>>2] = $612;
  $615 = $body;
  __ZN6b2Body20SynchronizeTransformEv($615);
  $616 = $i17;
  $617 = (($616) + 1)|0;
  $i17 = $617;
 }
 $618 = (+__ZNK7b2Timer15GetMillisecondsEv($timer));
 $619 = $1;
 $620 = (($619) + 20|0);
 HEAPF32[$620>>2] = $618;
 $621 = HEAP8[3200>>0]|0;
 $622 = $621&1;
 if ($622) {
  $626 = (($15) + 52|0);
  $627 = HEAP32[$626>>2]|0;
  $628 = (($627) + 103096|0);
  $629 = HEAP32[$628>>2]|0;
  $630 = $629 & 8;
  $631 = ($630|0)!=(0);
  if ($631) {
   $632 = (($15) + 56|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = (($15) + 52|0);
   $635 = HEAP32[$634>>2]|0;
   $636 = (($635) + 102876|0);
   __ZN10b2CLSolver6ReportEP16b2ContactManager($633,$636);
  }
 } else {
  $623 = $pContactSolver;
  $624 = (($623) + 40|0);
  $625 = HEAP32[$624>>2]|0;
  __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($15,$625);
 }
 $637 = $4;
 $638 = $637&1;
 if ($638) {
 }
 $639 = $pContactSolver;
 $640 = ($639|0)==(0|0);
 if ($640) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(493,($639|0));
 $641 = __THREW__; __THREW__ = 0;
 $642 = $641&1;
 if ($642) {
  $643 = ___cxa_find_matching_catch()|0;
  $644 = tempRet0;
  $9 = $643;
  $10 = $644;
  __ZdlPv($639);
  $645 = $9;
  $646 = $10;
  ___resumeException($645|0);
  // unreachable;
 } else {
  __ZdlPv($639);
  STACKTOP = sp;return;
 }
}
function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this,$constraints) {
 $this = $this|0;
 $constraints = $constraints|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $impulse = 0, $j = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $impulse = sp;
 $0 = $this;
 $1 = $constraints;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = (($2) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (($2) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $c = $14;
  $15 = $1;
  $16 = $i;
  $17 = (($15) + (($16*152)|0)|0);
  $vc = $17;
  $18 = $vc;
  $19 = (($18) + 144|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($impulse) + 16|0);
  HEAP32[$21>>2] = $20;
  $j = 0;
  while(1) {
   $22 = $j;
   $23 = $vc;
   $24 = (($23) + 144|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $j;
   $28 = $vc;
   $29 = (($28) + (($27*36)|0)|0);
   $30 = (($29) + 16|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $j;
   $33 = (($impulse) + ($32<<2)|0);
   HEAPF32[$33>>2] = $31;
   $34 = $j;
   $35 = $vc;
   $36 = (($35) + (($34*36)|0)|0);
   $37 = (($36) + 20|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $j;
   $40 = (($impulse) + 8|0);
   $41 = (($40) + ($39<<2)|0);
   HEAPF32[$41>>2] = $38;
   $42 = $j;
   $43 = (($42) + 1)|0;
   $j = $43;
  }
  $44 = (($2) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $c;
  FUNCTION_TABLE_viii[$48 & 1023]($45,$49,$impulse);
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 STACKTOP = sp;return;
}
function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this,$subStep,$toiIndexA,$toiIndexB) {
 $this = $this|0;
 $subStep = $subStep|0;
 $toiIndexA = $toiIndexA|0;
 $toiIndexB = $toiIndexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0.0, $b = 0, $body = 0, $c = 0, $contactSolver = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $ratio = 0.0, $ratio4 = 0.0, $rotation = 0.0;
 var $translation = 0, $v = 0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $contactSolverDef = sp + 28|0;
 $contactSolver = sp + 72|0;
 $c = sp + 152|0;
 $v = sp + 160|0;
 $translation = sp + 16|0;
 $6 = sp + 192|0;
 $0 = $this;
 $1 = $subStep;
 $2 = $toiIndexA;
 $3 = $toiIndexB;
 $7 = $0;
 $8 = $2;
 $9 = (($7) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)<($10|0);
 if (!($11)) {
  ___assert_fail((22000|0),(22024|0),719,(22104|0));
  // unreachable;
 }
 $12 = $3;
 $13 = (($7) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)<($14|0);
 if (!($15)) {
  ___assert_fail((22120|0),(22024|0),720,(22104|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = (($7) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (($7) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $b = $24;
  $25 = $i;
  $26 = (($7) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($25*12)|0)|0);
  $29 = $b;
  $30 = (($29) + 28|0);
  $31 = (($30) + 16|0);
  ;HEAP32[$28+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $b;
  $33 = (($32) + 28|0);
  $34 = (($33) + 28|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $i;
  $37 = (($7) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + (($36*12)|0)|0);
  $40 = (($39) + 8|0);
  HEAPF32[$40>>2] = $35;
  $41 = $i;
  $42 = (($7) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + (($41*12)|0)|0);
  $45 = $b;
  $46 = (($45) + 64|0);
  ;HEAP32[$44+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$46+4>>2]|0;
  $47 = $b;
  $48 = (($47) + 72|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $i;
  $51 = (($7) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + (($50*12)|0)|0);
  $54 = (($53) + 8|0);
  HEAPF32[$54>>2] = $49;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = (($7) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($contactSolverDef) + 24|0);
 HEAP32[$59>>2] = $58;
 $60 = (($7) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($contactSolverDef) + 28|0);
 HEAP32[$62>>2] = $61;
 $63 = HEAP32[$7>>2]|0;
 $64 = (($contactSolverDef) + 40|0);
 HEAP32[$64>>2] = $63;
 $65 = $1;
 ;HEAP32[$contactSolverDef+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$contactSolverDef+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$contactSolverDef+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$contactSolverDef+12>>2]=HEAP32[$65+12>>2]|0;HEAP32[$contactSolverDef+16>>2]=HEAP32[$65+16>>2]|0;HEAP32[$contactSolverDef+20>>2]=HEAP32[$65+20>>2]|0;
 $66 = (($7) + 20|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($contactSolverDef) + 32|0);
 HEAP32[$68>>2] = $67;
 $69 = (($7) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($contactSolverDef) + 36|0);
 HEAP32[$71>>2] = $70;
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver,$contactSolverDef);
 $i1 = 0;
 while(1) {
  $72 = $i1;
  $73 = $1;
  $74 = (($73) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($72|0)<($75|0);
  if (!($76)) {
   label = 17;
   break;
  }
  $77 = $2;
  $78 = $3;
  __THREW__ = 0;
  $79 = (invoke_iiii(494,($contactSolver|0),($77|0),($78|0))|0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   break;
  }
  $82 = $79&1;
  $contactsOkay = $82;
  $83 = $contactsOkay;
  $84 = $83&1;
  if ($84) {
   label = 13;
   break;
  }
  $89 = $i1;
  $90 = (($89) + 1)|0;
  $i1 = $90;
 }
 if ((label|0) == 13) {
  label = 17;
 }
 L20: do {
  if ((label|0) == 17) {
   $91 = $2;
   $92 = (($7) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($91<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 28|0);
   $97 = (($96) + 8|0);
   $98 = $2;
   $99 = (($7) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + (($98*12)|0)|0);
   ;HEAP32[$97+0>>2]=HEAP32[$101+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$101+4>>2]|0;
   $102 = $2;
   $103 = (($7) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + (($102*12)|0)|0);
   $106 = (($105) + 8|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $2;
   $109 = (($7) + 8|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($108<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + 28|0);
   $114 = (($113) + 24|0);
   HEAPF32[$114>>2] = $107;
   $115 = $3;
   $116 = (($7) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($115<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + 28|0);
   $121 = (($120) + 8|0);
   $122 = $3;
   $123 = (($7) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + (($122*12)|0)|0);
   ;HEAP32[$121+0>>2]=HEAP32[$125+0>>2]|0;HEAP32[$121+4>>2]=HEAP32[$125+4>>2]|0;
   $126 = $3;
   $127 = (($7) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + (($126*12)|0)|0);
   $130 = (($129) + 8|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $3;
   $133 = (($7) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($132<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 28|0);
   $138 = (($137) + 24|0);
   HEAPF32[$138>>2] = $131;
   __THREW__ = 0;
   invoke_vi(495,($contactSolver|0));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   if (!($140)) {
    $i2 = 0;
    while(1) {
     $141 = $i2;
     $142 = $1;
     $143 = (($142) + 12|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($141|0)<($144|0);
     if (!($145)) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(496,($contactSolver|0));
     $146 = __THREW__; __THREW__ = 0;
     $147 = $146&1;
     if ($147) {
      break L20;
     }
     $148 = $i2;
     $149 = (($148) + 1)|0;
     $i2 = $149;
    }
    $150 = $1;
    $151 = +HEAPF32[$150>>2];
    $h = $151;
    $i3 = 0;
    while(1) {
     $152 = $i3;
     $153 = (($7) + 28|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)<($154|0);
     if (!($155)) {
      break;
     }
     $156 = $i3;
     $157 = (($7) + 20|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + (($156*12)|0)|0);
     ;HEAP32[$c+0>>2]=HEAP32[$159+0>>2]|0;HEAP32[$c+4>>2]=HEAP32[$159+4>>2]|0;
     $160 = $i3;
     $161 = (($7) + 20|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + (($160*12)|0)|0);
     $164 = (($163) + 8|0);
     $165 = +HEAPF32[$164>>2];
     $a = $165;
     $166 = $i3;
     $167 = (($7) + 24|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + (($166*12)|0)|0);
     ;HEAP32[$v+0>>2]=HEAP32[$169+0>>2]|0;HEAP32[$v+4>>2]=HEAP32[$169+4>>2]|0;
     $170 = $i3;
     $171 = (($7) + 24|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + (($170*12)|0)|0);
     $174 = (($173) + 8|0);
     $175 = +HEAPF32[$174>>2];
     $w = $175;
     $176 = $h;
     __THREW__ = 0;
     invoke_vidi(497,($translation|0),(+$176),($v|0));
     $177 = __THREW__; __THREW__ = 0;
     $178 = $177&1;
     if ($178) {
      break L20;
     }
     __THREW__ = 0;
     $179 = (+invoke_dii(498,($translation|0),($translation|0)));
     $180 = __THREW__; __THREW__ = 0;
     $181 = $180&1;
     if ($181) {
      break L20;
     }
     $182 = $179 > 4.0;
     if ($182) {
      __THREW__ = 0;
      $183 = (+invoke_di(499,($translation|0)));
      $184 = __THREW__; __THREW__ = 0;
      $185 = $184&1;
      if ($185) {
       break L20;
      }
      $186 = 2.0 / $183;
      $ratio = $186;
      $187 = $ratio;
      __THREW__ = 0;
      invoke_vid(500,($v|0),(+$187));
      $188 = __THREW__; __THREW__ = 0;
      $189 = $188&1;
      if ($189) {
       break L20;
      }
     }
     $190 = $h;
     $191 = $w;
     $192 = $190 * $191;
     $rotation = $192;
     $193 = $rotation;
     $194 = $rotation;
     $195 = $193 * $194;
     $196 = $195 > 2.4674012660980225;
     if ($196) {
      $197 = $rotation;
      __THREW__ = 0;
      $198 = (+invoke_dd(501,(+$197)));
      $199 = __THREW__; __THREW__ = 0;
      $200 = $199&1;
      if ($200) {
       break L20;
      }
      $201 = 1.5707963705062866 / $198;
      $ratio4 = $201;
      $202 = $ratio4;
      $203 = $w;
      $204 = $203 * $202;
      $w = $204;
     }
     $205 = $h;
     __THREW__ = 0;
     invoke_vidi(497,($6|0),(+$205),($v|0));
     $206 = __THREW__; __THREW__ = 0;
     $207 = $206&1;
     if ($207) {
      break L20;
     }
     __THREW__ = 0;
     invoke_vii(502,($c|0),($6|0));
     $208 = __THREW__; __THREW__ = 0;
     $209 = $208&1;
     if ($209) {
      break L20;
     }
     $210 = $h;
     $211 = $w;
     $212 = $210 * $211;
     $213 = $a;
     $214 = $213 + $212;
     $a = $214;
     $215 = $i3;
     $216 = (($7) + 20|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (($217) + (($215*12)|0)|0);
     ;HEAP32[$218+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$218+4>>2]=HEAP32[$c+4>>2]|0;
     $219 = $a;
     $220 = $i3;
     $221 = (($7) + 20|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = (($222) + (($220*12)|0)|0);
     $224 = (($223) + 8|0);
     HEAPF32[$224>>2] = $219;
     $225 = $i3;
     $226 = (($7) + 24|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (($227) + (($225*12)|0)|0);
     ;HEAP32[$228+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$228+4>>2]=HEAP32[$v+4>>2]|0;
     $229 = $w;
     $230 = $i3;
     $231 = (($7) + 24|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + (($230*12)|0)|0);
     $234 = (($233) + 8|0);
     HEAPF32[$234>>2] = $229;
     $235 = $i3;
     $236 = (($7) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + ($235<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $body = $239;
     $240 = $body;
     $241 = (($240) + 28|0);
     $242 = (($241) + 16|0);
     ;HEAP32[$242+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$242+4>>2]=HEAP32[$c+4>>2]|0;
     $243 = $a;
     $244 = $body;
     $245 = (($244) + 28|0);
     $246 = (($245) + 28|0);
     HEAPF32[$246>>2] = $243;
     $247 = $body;
     $248 = (($247) + 64|0);
     ;HEAP32[$248+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$248+4>>2]=HEAP32[$v+4>>2]|0;
     $249 = $w;
     $250 = $body;
     $251 = (($250) + 72|0);
     HEAPF32[$251>>2] = $249;
     $252 = $body;
     __THREW__ = 0;
     invoke_vi(503,($252|0));
     $253 = __THREW__; __THREW__ = 0;
     $254 = $253&1;
     if ($254) {
      break L20;
     }
     $255 = $i3;
     $256 = (($255) + 1)|0;
     $i3 = $256;
    }
    $257 = (($contactSolver) + 40|0);
    $258 = HEAP32[$257>>2]|0;
    __THREW__ = 0;
    invoke_vii(504,($7|0),($258|0));
    $259 = __THREW__; __THREW__ = 0;
    $260 = $259&1;
    if (!($260)) {
     __ZN15b2ContactSolverD2Ev($contactSolver);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $85 = ___cxa_find_matching_catch()|0;
 $86 = tempRet0;
 $4 = $85;
 $5 = $86;
 __THREW__ = 0;
 invoke_vi(493,($contactSolver|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $263 = ___cxa_find_matching_catch(0|0)|0;
  $264 = tempRet0;
  ___clang_call_terminate($263);
  // unreachable;
 }
 $261 = $4;
 $262 = $5;
 ___resumeException($261|0);
 // unreachable;
}
function __Z7b2ClampIfET_S0_S0_S0_($a,$low,$high) {
 $a = +$a;
 $low = +$low;
 $high = +$high;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $low;
 $2 = $high;
 $3 = $1;
 $4 = $0;
 $5 = $2;
 $6 = (+__Z5b2MinIfET_S0_S0_($4,$5));
 $7 = (+__Z5b2MaxIfET_S0_S0_($3,$6));
 STACKTOP = sp;return (+$7);
}
function __ZNK7b2World10GetGravityEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 103104|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK7b2World17GetContactManagerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 102876|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10b2CLSolver19GetLastContactCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 524|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK14b2CLCommonData12GetNumJointsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 144|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body20SynchronizeTransformEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = (($4) + 8|0);
 $6 = (($3) + 28|0);
 $7 = (($6) + 28|0);
 $8 = +HEAPF32[$7>>2];
 __ZN5b2Rot3SetEf($5,$8);
 $9 = (($3) + 12|0);
 $10 = (($3) + 28|0);
 $11 = (($10) + 16|0);
 $12 = (($3) + 12|0);
 $13 = (($12) + 8|0);
 $14 = (($3) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($2,$13,$14);
 __ZmiRK6b2Vec2S1_($1,$11,$2);
 ;HEAP32[$9+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN7b2WorldC2ERK6b2Vec2($this,$gravity) {
 $this = $this|0;
 $gravity = $gravity|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $gravity;
 $4 = $0;
 $5 = (($4) + 4|0);
 __ZN16b2BlockAllocatorC2Ev($5);
 $6 = (($4) + 72|0);
 __THREW__ = 0;
 invoke_vi(505,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $57 = ___cxa_find_matching_catch()|0;
   $58 = tempRet0;
   $2 = $57;
   $3 = $58;
  } else {
   $9 = (($4) + 102876|0);
   __THREW__ = 0;
   invoke_vi(506,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   do {
    if ($11) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $2 = $59;
     $3 = $60;
    } else {
     $12 = (($4) + 103104|0);
     __THREW__ = 0;
     invoke_vi(424,($12|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     do {
      if ($14) {
       label = 12;
      } else {
       $15 = (($4) + 103164|0);
       __THREW__ = 0;
       invoke_vi(507,($15|0));
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        label = 12;
       } else {
        $18 = (($4) + 103804|0);
        __THREW__ = 0;
        invoke_vi(508,($18|0));
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        do {
         if ($20) {
          $63 = ___cxa_find_matching_catch()|0;
          $64 = tempRet0;
          $2 = $63;
          $3 = $64;
         } else {
          $21 = (($4) + 103116|0);
          HEAP32[$21>>2] = 0;
          $22 = (($4) + 103120|0);
          HEAP32[$22>>2] = 0;
          $23 = (($4) + 103068|0);
          HEAP32[$23>>2] = 0;
          $24 = (($4) + 103072|0);
          HEAP32[$24>>2] = 0;
          $25 = (($4) + 103076|0);
          HEAP32[$25>>2] = 0;
          $26 = (($4) + 103088|0);
          HEAP32[$26>>2] = 0;
          $27 = (($4) + 103080|0);
          HEAP32[$27>>2] = 0;
          $28 = (($4) + 103084|0);
          HEAP32[$28>>2] = 0;
          $29 = (($4) + 103092|0);
          HEAP8[$29>>0] = 0;
          $30 = (($4) + 103093|0);
          HEAP8[$30>>0] = 0;
          $31 = (($4) + 103094|0);
          HEAP8[$31>>0] = 0;
          $32 = (($4) + 103095|0);
          HEAP8[$32>>0] = 0;
          $33 = (($4) + 103096|0);
          HEAP32[$33>>2] = 0;
          $34 = (($4) + 103100|0);
          HEAP8[$34>>0] = 1;
          $35 = (($4) + 103101|0);
          HEAP8[$35>>0] = 0;
          $36 = (($4) + 103128|0);
          HEAP8[$36>>0] = 1;
          $37 = (($4) + 103129|0);
          HEAP8[$37>>0] = 1;
          $38 = (($4) + 103130|0);
          HEAP8[$38>>0] = 0;
          $39 = (($4) + 103131|0);
          HEAP8[$39>>0] = 1;
          $40 = (($4) + 103112|0);
          HEAP8[$40>>0] = 1;
          $41 = (($4) + 103104|0);
          $42 = $1;
          ;HEAP32[$41+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$42+4>>2]|0;
          $43 = (($4) + 102872|0);
          HEAP32[$43>>2] = 4;
          $44 = (($4) + 103124|0);
          HEAPF32[$44>>2] = 0.0;
          $45 = (($4) + 4|0);
          $46 = (($4) + 102876|0);
          $47 = (($46) + 124|0);
          HEAP32[$47>>2] = $45;
          $48 = (($4) + 103132|0);
          ;HEAP32[$48+0>>2]=0|0;HEAP32[$48+4>>2]=0|0;HEAP32[$48+8>>2]=0|0;HEAP32[$48+12>>2]=0|0;HEAP32[$48+16>>2]=0|0;HEAP32[$48+20>>2]=0|0;HEAP32[$48+24>>2]=0|0;HEAP32[$48+28>>2]=0|0;
          __THREW__ = 0;
          (invoke_i(452)|0);
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if (!($50)) {
           $51 = (($4) + 102876|0);
           __THREW__ = 0;
           invoke_vii(509,($51|0),($4|0));
           $52 = __THREW__; __THREW__ = 0;
           $53 = $52&1;
           if (!($53)) {
            HEAP32[$4>>2] = 0;
            $54 = HEAP8[3200>>0]|0;
            $55 = $54&1;
            if ($55) {
             $56 = (($4) + 103888|0);
             HEAP8[$56>>0] = 0;
            }
            $69 = (($4) + 103892|0);
            HEAP32[$69>>2] = 0;
            $70 = (($4) + 103904|0);
            HEAPF64[$70>>3] = 0.0;
            $71 = (($4) + 103896|0);
            HEAPF64[$71>>3] = 0.0;
            $72 = (($4) + 103916|0);
            HEAP8[$72>>0] = 0;
            $73 = (($4) + 103920|0);
            HEAPF32[$73>>2] = 0.0;
            $74 = (($4) + 103932|0);
            HEAPF32[$74>>2] = 0.0;
            $75 = (($4) + 103928|0);
            HEAPF32[$75>>2] = 0.0;
            $76 = (($4) + 103924|0);
            HEAPF32[$76>>2] = 0.0;
            $77 = (($4) + 103940|0);
            HEAPF32[$77>>2] = 0.0;
            $78 = (($4) + 103944|0);
            HEAPF32[$78>>2] = 0.0;
            $79 = (($4) + 103960|0);
            HEAPF32[$79>>2] = 0.0;
            $80 = (($4) + 103956|0);
            HEAPF32[$80>>2] = 0.0;
            $81 = (($4) + 103952|0);
            HEAPF32[$81>>2] = 0.0;
            $82 = (($4) + 103948|0);
            HEAPF32[$82>>2] = 0.0;
            $83 = (($4) + 103964|0);
            HEAPF32[$83>>2] = 0.0;
            $84 = (($4) + 103976|0);
            HEAPF32[$84>>2] = 0.0;
            $85 = (($4) + 103972|0);
            HEAPF32[$85>>2] = 0.0;
            $86 = (($4) + 103968|0);
            HEAPF32[$86>>2] = 0.0;
            $87 = (($4) + 103980|0);
            HEAPF32[$87>>2] = 0.0;
            $88 = (($4) + 103996|0);
            HEAPF32[$88>>2] = 0.0;
            $89 = (($4) + 103992|0);
            HEAPF32[$89>>2] = 0.0;
            $90 = (($4) + 103988|0);
            HEAPF32[$90>>2] = 0.0;
            $91 = (($4) + 103984|0);
            HEAPF32[$91>>2] = 0.0;
            $92 = (($4) + 104000|0);
            HEAPF32[$92>>2] = 0.0;
            $93 = (($4) + 104008|0);
            HEAPF32[$93>>2] = 0.0;
            $94 = (($4) + 104004|0);
            HEAPF32[$94>>2] = 0.0;
            STACKTOP = sp;return;
           }
          }
          $65 = ___cxa_find_matching_catch()|0;
          $66 = tempRet0;
          $2 = $65;
          $3 = $66;
          __THREW__ = 0;
          invoke_vi(510,($18|0));
          $67 = __THREW__; __THREW__ = 0;
          $68 = $67&1;
          if ($68) {
           $105 = ___cxa_find_matching_catch(0|0)|0;
           $106 = tempRet0;
           ___clang_call_terminate($105);
           // unreachable;
          } else {
           break;
          }
         }
        } while(0);
        __THREW__ = 0;
        invoke_vi(511,($15|0));
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $105 = ___cxa_find_matching_catch(0|0)|0;
         $106 = tempRet0;
         ___clang_call_terminate($105);
         // unreachable;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 12) {
      $61 = ___cxa_find_matching_catch()|0;
      $62 = tempRet0;
      $2 = $61;
      $3 = $62;
     }
     __THREW__ = 0;
     invoke_vi(512,($9|0));
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if ($98) {
      $105 = ___cxa_find_matching_catch(0|0)|0;
      $106 = tempRet0;
      ___clang_call_terminate($105);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(513,($6|0));
   $99 = __THREW__; __THREW__ = 0;
   $100 = $99&1;
   if ($100) {
    $105 = ___cxa_find_matching_catch(0|0)|0;
    $106 = tempRet0;
    ___clang_call_terminate($105);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(514,($5|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 }
 $103 = $2;
 $104 = $3;
 ___resumeException($103|0);
 // unreachable;
}
function __ZN7b2WorldD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bNext = 0, $f = 0, $fNext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 103068|0);
 $5 = HEAP32[$4>>2]|0;
 $b = $5;
 L1: while(1) {
  $6 = $b;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 9;
   break;
  }
  $8 = $b;
  $9 = (($8) + 96|0);
  $10 = HEAP32[$9>>2]|0;
  $bNext = $10;
  $11 = $b;
  $12 = (($11) + 108|0);
  $13 = HEAP32[$12>>2]|0;
  $f = $13;
  while(1) {
   $14 = $f;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $f;
   $17 = (($16) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $fNext = $18;
   $19 = $f;
   $20 = (($19) + 36|0);
   HEAP32[$20>>2] = 0;
   $21 = $f;
   $22 = (($3) + 4|0);
   __THREW__ = 0;
   invoke_vii(515,($21|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 7;
    break L1;
   }
   $25 = $fNext;
   $f = $25;
  }
  $31 = $bNext;
  $b = $31;
 }
 do {
  if ((label|0) == 7) {
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $1 = $26;
   $2 = $27;
   $28 = (($3) + 103804|0);
   __THREW__ = 0;
   invoke_vi(510,($28|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   } else {
    label = 17;
    break;
   }
  }
  else if ((label|0) == 9) {
   $32 = (($3) + 103804|0);
   __THREW__ = 0;
   invoke_vi(510,($32|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $45 = ___cxa_find_matching_catch()|0;
    $46 = tempRet0;
    $1 = $45;
    $2 = $46;
    label = 17;
    break;
   }
   $35 = (($3) + 103164|0);
   __THREW__ = 0;
   invoke_vi(511,($35|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $47 = ___cxa_find_matching_catch()|0;
    $48 = tempRet0;
    $1 = $47;
    $2 = $48;
    label = 20;
    break;
   }
   $38 = (($3) + 102876|0);
   __THREW__ = 0;
   invoke_vi(512,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $52 = ___cxa_find_matching_catch()|0;
    $53 = tempRet0;
    $1 = $52;
    $2 = $53;
    label = 23;
    break;
   }
   $41 = (($3) + 72|0);
   __THREW__ = 0;
   invoke_vi(513,($41|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $1 = $57;
    $2 = $58;
    break;
   } else {
    $44 = (($3) + 4|0);
    __ZN16b2BlockAllocatorD2Ev($44);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $49 = (($3) + 103164|0);
   __THREW__ = 0;
   invoke_vi(511,($49|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   } else {
    label = 20;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   $54 = (($3) + 102876|0);
   __THREW__ = 0;
   invoke_vi(512,($54|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   } else {
    label = 23;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $59 = (($3) + 72|0);
   __THREW__ = 0;
   invoke_vi(513,($59|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if ($61) {
    $67 = ___cxa_find_matching_catch(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $62 = (($3) + 4|0);
 __THREW__ = 0;
 invoke_vi(514,($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $67 = ___cxa_find_matching_catch(0|0)|0;
  $68 = tempRet0;
  ___clang_call_terminate($67);
  // unreachable;
 }
 $65 = $1;
 $66 = $2;
 ___resumeException($65|0);
 // unreachable;
}
function __ZN7b2World10CreateBodyEPK9b2BodyDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = (__ZNK7b2World8IsLockedEv($3)|0);
 $5 = $4&1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  ___assert_fail((22144|0),(22168|0),169,(22248|0));
  // unreachable;
 }
 $7 = (__ZNK7b2World8IsLockedEv($3)|0);
 if ($7) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $8 = (($3) + 4|0);
 $9 = (__ZN16b2BlockAllocator8AllocateEi($8,172)|0);
 $mem = $9;
 $10 = $mem;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $13 = 0;
 } else {
  $12 = $2;
  __ZN6b2BodyC2EPK9b2BodyDefP7b2World($10,$12,$3);
  $13 = $10;
 }
 $b = $13;
 $14 = $b;
 $15 = (($14) + 92|0);
 HEAP32[$15>>2] = 0;
 $16 = (($3) + 103068|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $b;
 $19 = (($18) + 96|0);
 HEAP32[$19>>2] = $17;
 $20 = (($3) + 103068|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $b;
  $24 = (($3) + 103068|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 92|0);
  HEAP32[$26>>2] = $23;
 }
 $27 = $b;
 $28 = (($3) + 103068|0);
 HEAP32[$28>>2] = $27;
 $29 = (($3) + 103076|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = (($3) + 103092|0);
 HEAP8[$32>>0] = 1;
 $33 = (($3) + 103101|0);
 HEAP8[$33>>0] = 1;
 $34 = $b;
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function __ZN7b2World5SolveERK10b2TimeStep($this,$step) {
 $this = $this|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b1 = 0, $b3 = 0;
 var $c = 0, $ce = 0, $contact = 0, $j = 0, $je = 0, $moveCount = 0, $other = 0, $other2 = 0, $pIsland = 0, $profile = 0, $seed = 0, $sensorA = 0, $sensorB = 0, $stack = 0, $stackSize = 0, $stepBroadPhaseTimer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $profile = sp + 72|0;
 $stepBroadPhaseTimer = sp + 112|0;
 $0 = $this;
 $1 = $step;
 $4 = $0;
 $5 = HEAP8[3200>>0]|0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = (__Znwj(60)|0);
   $8 = (($4) + 103076|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($4) + 102876|0);
   $11 = (($10) + 108|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($4) + 103088|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($4) + 72|0);
   $16 = (($4) + 102876|0);
   $17 = (($16) + 120|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($4) + 103164|0);
   __THREW__ = 0;
   invoke_viiiiiiii(516,($7|0),($9|0),($12|0),($14|0),($15|0),($18|0),($4|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $pIsland = $7;
    break;
   }
   $22 = ___cxa_find_matching_catch()|0;
   $23 = tempRet0;
   $2 = $22;
   $3 = $23;
   __ZdlPv($7);
   $275 = $2;
   $276 = $3;
   ___resumeException($275|0);
   // unreachable;
  } else {
   $24 = (__Znwj(60)|0);
   $25 = (($4) + 103076|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($4) + 102876|0);
   $28 = (($27) + 108|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($4) + 103088|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($4) + 72|0);
   $33 = (($4) + 102876|0);
   $34 = (($33) + 120|0);
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiiii(516,($24|0),($26|0),($29|0),($31|0),($32|0),($35|0),($4|0),(0|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    $pIsland = $24;
    break;
   }
   $38 = ___cxa_find_matching_catch()|0;
   $39 = tempRet0;
   $2 = $38;
   $3 = $39;
   __ZdlPv($24);
   $275 = $2;
   $276 = $3;
   ___resumeException($275|0);
   // unreachable;
  }
 } while(0);
 $40 = (($4) + 103068|0);
 $41 = HEAP32[$40>>2]|0;
 $b = $41;
 while(1) {
  $42 = $b;
  $43 = ($42|0)!=(0|0);
  if (!($43)) {
   break;
  }
  $44 = $b;
  $45 = (($44) + 4|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = $47 & -2;
  $49 = $48&65535;
  HEAP16[$45>>1] = $49;
  $50 = $b;
  $51 = (($50) + 96|0);
  $52 = HEAP32[$51>>2]|0;
  $b = $52;
 }
 $53 = (($4) + 102876|0);
 $54 = (($53) + 100|0);
 $55 = HEAP32[$54>>2]|0;
 $c = $55;
 while(1) {
  $56 = $c;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $c;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 & -2;
  HEAP32[$59>>2] = $61;
  $62 = $c;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $c = $64;
 }
 $65 = (($4) + 103072|0);
 $66 = HEAP32[$65>>2]|0;
 $j = $66;
 while(1) {
  $67 = $j;
  $68 = ($67|0)!=(0|0);
  if (!($68)) {
   break;
  }
  $69 = $j;
  $70 = (($69) + 60|0);
  HEAP8[$70>>0] = 0;
  $71 = $j;
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $j = $73;
 }
 $74 = (($4) + 103076|0);
 $75 = HEAP32[$74>>2]|0;
 $stackSize = $75;
 $76 = (($4) + 72|0);
 $77 = $stackSize;
 $78 = $77<<2;
 $79 = (__ZN16b2StackAllocator8AllocateEi($76,$78)|0);
 $stack = $79;
 $80 = $pIsland;
 __ZN8b2Island5ClearEv($80);
 $81 = HEAP8[3200>>0]|0;
 $82 = $81&1;
 if ($82) {
  $83 = (($4) + 102876|0);
  $84 = (($83) + 108|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $pIsland;
  $87 = (($86) + 36|0);
  HEAP32[$87>>2] = $85;
 }
 $88 = (($4) + 103068|0);
 $89 = HEAP32[$88>>2]|0;
 $seed = $89;
 while(1) {
  $90 = $seed;
  $91 = ($90|0)!=(0|0);
  if (!($91)) {
   break;
  }
  $92 = $seed;
  $93 = (($92) + 4|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = $95 | 1;
  $97 = $96&65535;
  HEAP16[$93>>1] = $97;
  $98 = $pIsland;
  $99 = $seed;
  __ZN8b2Island3AddEP6b2Body($98,$99);
  $100 = $seed;
  $b1 = $100;
  $101 = HEAP8[3200>>0]|0;
  $102 = $101&1;
  if (!($102)) {
   $103 = $b1;
   $104 = (($103) + 120|0);
   $105 = HEAP32[$104>>2]|0;
   $ce = $105;
   while(1) {
    $106 = $ce;
    $107 = ($106|0)!=(0|0);
    if (!($107)) {
     break;
    }
    $108 = $ce;
    $109 = (($108) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $contact = $110;
    $111 = $contact;
    $112 = (($111) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113 & 1;
    $115 = ($114|0)!=(0);
    do {
     if ($115) {
     } else {
      $116 = $contact;
      $117 = (__ZNK9b2Contact9IsEnabledEv($116)|0);
      $118 = $117&1;
      $119 = ($118|0)==(0);
      if (!($119)) {
       $120 = $contact;
       $121 = (__ZNK9b2Contact10IsTouchingEv($120)|0);
       $122 = $121&1;
       $123 = ($122|0)==(0);
       if (!($123)) {
        $124 = $contact;
        $125 = (($124) + 48|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($126) + 46|0);
        $128 = HEAP8[$127>>0]|0;
        $129 = $128&1;
        $130 = $129&1;
        $sensorA = $130;
        $131 = $contact;
        $132 = (($131) + 52|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = (($133) + 46|0);
        $135 = HEAP8[$134>>0]|0;
        $136 = $135&1;
        $137 = $136&1;
        $sensorB = $137;
        $138 = $sensorA;
        $139 = $138&1;
        if (!($139)) {
         $140 = $sensorB;
         $141 = $140&1;
         if (!($141)) {
          $142 = $pIsland;
          $143 = $contact;
          __ZN8b2Island3AddEP9b2Contact($142,$143);
          $144 = $contact;
          $145 = (($144) + 4|0);
          $146 = HEAP32[$145>>2]|0;
          $147 = $146 | 1;
          HEAP32[$145>>2] = $147;
          $148 = $ce;
          $149 = HEAP32[$148>>2]|0;
          $other = $149;
          $150 = $other;
          $151 = (($150) + 4|0);
          $152 = HEAP16[$151>>1]|0;
          $153 = $152&65535;
          $154 = $153 & 1;
          $155 = ($154|0)!=(0);
          if ($155) {
           break;
          } else {
           $156 = $other;
           $157 = (($156) + 4|0);
           $158 = HEAP16[$157>>1]|0;
           $159 = $158&65535;
           $160 = $159 | 1;
           $161 = $160&65535;
           HEAP16[$157>>1] = $161;
           break;
          }
         }
        }
        break;
       }
      }
     }
    } while(0);
    $162 = $ce;
    $163 = (($162) + 12|0);
    $164 = HEAP32[$163>>2]|0;
    $ce = $164;
   }
  }
  $165 = $b1;
  $166 = (($165) + 116|0);
  $167 = HEAP32[$166>>2]|0;
  $je = $167;
  while(1) {
   $168 = $je;
   $169 = ($168|0)!=(0|0);
   if (!($169)) {
    break;
   }
   $170 = $je;
   $171 = (($170) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + 60|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&1;
   $176 = $175&1;
   $177 = ($176|0)==(1);
   do {
    if ($177) {
    } else {
     $178 = $je;
     $179 = HEAP32[$178>>2]|0;
     $other2 = $179;
     $180 = $other2;
     $181 = (__ZNK6b2Body8IsActiveEv($180)|0);
     $182 = $181&1;
     $183 = ($182|0)==(0);
     if ($183) {
      break;
     }
     $184 = $pIsland;
     $185 = $je;
     $186 = (($185) + 4|0);
     $187 = HEAP32[$186>>2]|0;
     __ZN8b2Island3AddEP7b2Joint($184,$187);
     $188 = $je;
     $189 = (($188) + 4|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + 60|0);
     HEAP8[$191>>0] = 1;
     $192 = $other2;
     $193 = (($192) + 4|0);
     $194 = HEAP16[$193>>1]|0;
     $195 = $194&65535;
     $196 = $195 & 1;
     $197 = ($196|0)!=(0);
     if ($197) {
      break;
     } else {
      $198 = $other2;
      $199 = (($198) + 4|0);
      $200 = HEAP16[$199>>1]|0;
      $201 = $200&65535;
      $202 = $201 | 1;
      $203 = $202&65535;
      HEAP16[$199>>1] = $203;
      break;
     }
    }
   } while(0);
   $204 = $je;
   $205 = (($204) + 12|0);
   $206 = HEAP32[$205>>2]|0;
   $je = $206;
  }
  $207 = $seed;
  $208 = (($207) + 96|0);
  $209 = HEAP32[$208>>2]|0;
  $seed = $209;
 }
 $210 = $pIsland;
 $211 = $1;
 $212 = (($4) + 103104|0);
 $213 = (($4) + 103112|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&1;
 __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($210,$profile,$211,$212,$215);
 $216 = (($profile) + 12|0);
 $217 = +HEAPF32[$216>>2];
 $218 = (($4) + 103132|0);
 $219 = (($218) + 12|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $220 + $217;
 HEAPF32[$219>>2] = $221;
 $222 = (($profile) + 16|0);
 $223 = +HEAPF32[$222>>2];
 $224 = (($4) + 103132|0);
 $225 = (($224) + 16|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $226 + $223;
 HEAPF32[$225>>2] = $227;
 $228 = (($profile) + 20|0);
 $229 = +HEAPF32[$228>>2];
 $230 = (($4) + 103132|0);
 $231 = (($230) + 20|0);
 $232 = +HEAPF32[$231>>2];
 $233 = $232 + $229;
 HEAPF32[$231>>2] = $233;
 $234 = (($4) + 72|0);
 $235 = $stack;
 __ZN16b2StackAllocator4FreeEPv($234,$235);
 $236 = $pIsland;
 $237 = ($236|0)==(0|0);
 do {
  if (!($237)) {
   __THREW__ = 0;
   invoke_vi(517,($236|0));
   $238 = __THREW__; __THREW__ = 0;
   $239 = $238&1;
   if (!($239)) {
    __ZdlPv($236);
    break;
   }
   $258 = ___cxa_find_matching_catch()|0;
   $259 = tempRet0;
   $2 = $258;
   $3 = $259;
   __ZdlPv($236);
   $275 = $2;
   $276 = $3;
   ___resumeException($275|0);
   // unreachable;
  }
 } while(0);
 $240 = (($4) + 102876|0);
 $241 = (($240) + 40|0);
 $242 = HEAP32[$241>>2]|0;
 $moveCount = $242;
 $243 = HEAP8[3200>>0]|0;
 $244 = $243&1;
 if ($244) {
  $245 = (($4) + 103129|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&1;
  if ($247) {
   label = 57;
  }
 } else {
  label = 57;
 }
 if ((label|0) == 57) {
  $248 = (($4) + 103068|0);
  $249 = HEAP32[$248>>2]|0;
  $b3 = $249;
  while(1) {
   $250 = $b3;
   $251 = ($250|0)!=(0|0);
   if (!($251)) {
    break;
   }
   $252 = $b3;
   $253 = (($252) + 4|0);
   $254 = HEAP16[$253>>1]|0;
   $255 = $254&65535;
   $256 = $255 & 1;
   $257 = ($256|0)==(0);
   do {
    if ($257) {
    } else {
     $260 = $b3;
     $261 = (__ZNK6b2Body7GetTypeEv($260)|0);
     $262 = ($261|0)==(0);
     if ($262) {
      break;
     } else {
      $263 = $b3;
      __ZN6b2Body19SynchronizeFixturesEv($263);
      break;
     }
    }
   } while(0);
   $264 = $b3;
   $265 = (__ZN6b2Body7GetNextEv($264)|0);
   $b3 = $265;
  }
 }
 __ZN7b2TimerC2Ev($stepBroadPhaseTimer);
 $266 = (($4) + 103129|0);
 $267 = HEAP8[$266>>0]|0;
 $268 = $267&1;
 if ($268) {
  $270 = (__ZN10b2CLDevice8instanceEv()|0);
  __ZN10b2CLDevice18finishCommandQueueEv($270);
  $271 = (+__ZNK7b2Timer15GetMillisecondsEv($stepBroadPhaseTimer));
  $272 = (($4) + 103932|0);
  $273 = +HEAPF32[$272>>2];
  $274 = $273 + $271;
  HEAPF32[$272>>2] = $274;
  STACKTOP = sp;return;
 }
 $269 = (($4) + 102876|0);
 __ZN16b2ContactManager15FindNewContactsEv($269);
 $270 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($270);
 $271 = (+__ZNK7b2Timer15GetMillisecondsEv($stepBroadPhaseTimer));
 $272 = (($4) + 103932|0);
 $273 = +HEAPF32[$272>>2];
 $274 = $273 + $271;
 HEAPF32[$272>>2] = $274;
 STACKTOP = sp;return;
}
function __ZN7b2World8SolveTOIERK10b2TimeStep($this,$step) {
 $this = $this|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0;
 var $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0.0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $alpha = 0.0, $alpha0 = 0.0, $b = 0, $bA = 0;
 var $bA4 = 0, $bB = 0, $bB5 = 0, $backup = 0, $backup1 = 0, $backup2 = 0, $beta = 0.0, $bodies = 0, $body = 0, $body7 = 0, $c = 0, $c1 = 0, $ce = 0, $ce8 = 0, $collideA = 0, $collideB = 0, $contact = 0, $currentLoopNum = 0, $fA = 0, $fA2 = 0;
 var $fB = 0, $fB3 = 0, $findTOITimer = 0, $i = 0, $i6 = 0, $indexA = 0, $indexB = 0, $input = 0, $island = 0, $minAlpha = 0.0, $minContact = 0, $movedBodySet = 0, $other = 0, $output = 0, $preLoopNum = 0, $resetAlpha0 = 0, $sensorA = 0, $sensorB = 0, $subStep = 0, $typeA = 0;
 var $typeB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $4 = sp + 188|0;
 $7 = sp + 56|0;
 $9 = sp + 545|0;
 $findTOITimer = sp + 546|0;
 $movedBodySet = sp + 88|0;
 $island = sp + 100|0;
 $input = sp + 340|0;
 $output = sp + 472|0;
 $backup1 = sp + 200|0;
 $backup2 = sp + 12|0;
 $bodies = sp + 496|0;
 $backup = sp + 288|0;
 $subStep = sp + 264|0;
 $body7 = sp + 176|0;
 $14 = sp + 80|0;
 $10 = $this;
 $11 = $step;
 $15 = $10;
 __ZN7b2TimerC2Ev($findTOITimer);
 $16 = (($15) + 102876|0);
 __ZN16b2ContactManager10cpuOverLapEv($16);
 $17 = (($15) + 102876|0);
 __ZN16b2ContactManager18cpuFindNewContactsEv($17);
 $8 = $movedBodySet;
 $18 = $8;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($18,$9);
 $19 = (($15) + 72|0);
 $20 = (($15) + 102876|0);
 $21 = (($20) + 120|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiiii(516,($island|0),64,32,0,($19|0),($22|0),($15|0),(0|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 7;
  } else {
   $25 = (($15) + 103131|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&1;
   if ($27) {
    $28 = (($15) + 103068|0);
    $29 = HEAP32[$28>>2]|0;
    $b = $29;
    while(1) {
     $30 = $b;
     $31 = ($30|0)!=(0|0);
     if (!($31)) {
      break;
     }
     $32 = $b;
     $33 = (($32) + 4|0);
     $34 = HEAP16[$33>>1]|0;
     $35 = $34&65535;
     $36 = $35 & -2;
     $37 = $36&65535;
     HEAP16[$33>>1] = $37;
     $38 = $b;
     $39 = (($38) + 28|0);
     $40 = (($39) + 32|0);
     HEAPF32[$40>>2] = 0.0;
     $41 = $b;
     $42 = (($41) + 96|0);
     $43 = HEAP32[$42>>2]|0;
     $b = $43;
    }
    $46 = (($15) + 102876|0);
    $47 = (($46) + 100|0);
    $48 = HEAP32[$47>>2]|0;
    $c = $48;
    while(1) {
     $49 = $c;
     $50 = ($49|0)!=(0|0);
     if (!($50)) {
      break;
     }
     $51 = $c;
     $52 = (($51) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53 & -34;
     HEAP32[$52>>2] = $54;
     $55 = $c;
     $56 = (($55) + 128|0);
     HEAP32[$56>>2] = 0;
     $57 = $c;
     $58 = (($57) + 132|0);
     HEAPF32[$58>>2] = 1.0;
     $59 = $c;
     $60 = (($59) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $c = $61;
    }
   }
   $resetAlpha0 = 1;
   $preLoopNum = 0;
   $currentLoopNum = 0;
   L16: while(1) {
    $minContact = 0;
    $minAlpha = 1.0;
    $62 = $currentLoopNum;
    $preLoopNum = $62;
    $currentLoopNum = 0;
    $63 = (($15) + 102876|0);
    $64 = (($63) + 100|0);
    $65 = HEAP32[$64>>2]|0;
    $c1 = $65;
    while(1) {
     $66 = $c1;
     $67 = ($66|0)!=(0|0);
     if (!($67)) {
      break;
     }
     $68 = $currentLoopNum;
     $69 = (($68) + 1)|0;
     $currentLoopNum = $69;
     $70 = $c1;
     __THREW__ = 0;
     $71 = (invoke_ii(518,($70|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      break L16;
     }
     $74 = $71&1;
     $75 = ($74|0)==(0);
     L22: do {
      if ($75) {
      } else {
       $80 = $c1;
       $81 = (($80) + 128|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)>(8);
       if ($83) {
        break;
       }
       $alpha = 1.0;
       $84 = $c1;
       $85 = (($84) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $86 & 32;
       $88 = ($87|0)!=(0);
       do {
        if ($88) {
         $89 = $c1;
         $90 = (($89) + 132|0);
         $91 = +HEAPF32[$90>>2];
         $alpha = $91;
        } else {
         $92 = $c1;
         __THREW__ = 0;
         $93 = (invoke_ii(519,($92|0))|0);
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if ($95) {
          break L16;
         }
         $fA = $93;
         $96 = $c1;
         __THREW__ = 0;
         $97 = (invoke_ii(520,($96|0))|0);
         $98 = __THREW__; __THREW__ = 0;
         $99 = $98&1;
         if ($99) {
          break L16;
         }
         $fB = $97;
         $100 = $fA;
         __THREW__ = 0;
         $101 = (invoke_ii(521,($100|0))|0);
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          break L16;
         }
         if (!($101)) {
          $104 = $fB;
          __THREW__ = 0;
          $105 = (invoke_ii(521,($104|0))|0);
          $106 = __THREW__; __THREW__ = 0;
          $107 = $106&1;
          if ($107) {
           break L16;
          }
          if (!($105)) {
           $108 = $fA;
           __THREW__ = 0;
           $109 = (invoke_ii(522,($108|0))|0);
           $110 = __THREW__; __THREW__ = 0;
           $111 = $110&1;
           if ($111) {
            break L16;
           }
           $bA = $109;
           $112 = $fB;
           __THREW__ = 0;
           $113 = (invoke_ii(522,($112|0))|0);
           $114 = __THREW__; __THREW__ = 0;
           $115 = $114&1;
           if ($115) {
            break L16;
           }
           $bB = $113;
           $116 = $bA;
           $117 = HEAP32[$116>>2]|0;
           $typeA = $117;
           $118 = $bB;
           $119 = HEAP32[$118>>2]|0;
           $typeB = $119;
           $120 = $typeA;
           $121 = ($120|0)==(2);
           if (!($121)) {
            $122 = $typeB;
            $123 = ($122|0)==(2);
            if (!($123)) {
             label = 35;
             break L16;
            }
           }
           $126 = $bA;
           __THREW__ = 0;
           $127 = (invoke_ii(523,($126|0))|0);
           $128 = __THREW__; __THREW__ = 0;
           $129 = $128&1;
           if ($129) {
            break L16;
           }
           if ($127) {
            $130 = $typeA;
            $131 = ($130|0)!=(0);
            $133 = $131;
           } else {
            $133 = 0;
           }
           $132 = $133&1;
           $activeA = $132;
           $134 = $bB;
           __THREW__ = 0;
           $135 = (invoke_ii(523,($134|0))|0);
           $136 = __THREW__; __THREW__ = 0;
           $137 = $136&1;
           if ($137) {
            break L16;
           }
           if ($135) {
            $138 = $typeB;
            $139 = ($138|0)!=(0);
            $141 = $139;
           } else {
            $141 = 0;
           }
           $140 = $141&1;
           $activeB = $140;
           $142 = $activeA;
           $143 = $142&1;
           $144 = $143&1;
           $145 = ($144|0)==(0);
           do {
            if ($145) {
             $146 = $activeB;
             $147 = $146&1;
             $148 = $147&1;
             $149 = ($148|0)==(0);
             if (!($149)) {
              break;
             }
             break L22;
            }
           } while(0);
           $150 = $bA;
           __THREW__ = 0;
           $151 = (invoke_ii(461,($150|0))|0);
           $152 = __THREW__; __THREW__ = 0;
           $153 = $152&1;
           if ($153) {
            break L16;
           }
           if ($151) {
            $157 = 1;
           } else {
            $154 = $typeA;
            $155 = ($154|0)!=(2);
            $157 = $155;
           }
           $156 = $157&1;
           $collideA = $156;
           $158 = $bB;
           __THREW__ = 0;
           $159 = (invoke_ii(461,($158|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            break L16;
           }
           if ($159) {
            $165 = 1;
           } else {
            $162 = $typeB;
            $163 = ($162|0)!=(2);
            $165 = $163;
           }
           $164 = $165&1;
           $collideB = $164;
           $166 = $collideA;
           $167 = $166&1;
           $168 = $167&1;
           $169 = ($168|0)==(0);
           do {
            if ($169) {
             $170 = $collideB;
             $171 = $170&1;
             $172 = $171&1;
             $173 = ($172|0)==(0);
             if (!($173)) {
              break;
             }
             break L22;
            }
           } while(0);
           $174 = $bA;
           $175 = (($174) + 28|0);
           $176 = (($175) + 32|0);
           $177 = +HEAPF32[$176>>2];
           $alpha0 = $177;
           $178 = $bA;
           $179 = (($178) + 28|0);
           $180 = (($179) + 32|0);
           $181 = +HEAPF32[$180>>2];
           $182 = $bB;
           $183 = (($182) + 28|0);
           $184 = (($183) + 32|0);
           $185 = +HEAPF32[$184>>2];
           $186 = $181 < $185;
           if ($186) {
            $187 = $bB;
            $188 = (($187) + 28|0);
            $189 = (($188) + 32|0);
            $190 = +HEAPF32[$189>>2];
            $alpha0 = $190;
            $191 = $bA;
            $192 = (($191) + 28|0);
            $193 = $alpha0;
            __THREW__ = 0;
            invoke_vid(524,($192|0),(+$193));
            $194 = __THREW__; __THREW__ = 0;
            $195 = $194&1;
            if ($195) {
             break L16;
            }
           } else {
            $196 = $bB;
            $197 = (($196) + 28|0);
            $198 = (($197) + 32|0);
            $199 = +HEAPF32[$198>>2];
            $200 = $bA;
            $201 = (($200) + 28|0);
            $202 = (($201) + 32|0);
            $203 = +HEAPF32[$202>>2];
            $204 = $199 < $203;
            if ($204) {
             $205 = $bA;
             $206 = (($205) + 28|0);
             $207 = (($206) + 32|0);
             $208 = +HEAPF32[$207>>2];
             $alpha0 = $208;
             $209 = $bB;
             $210 = (($209) + 28|0);
             $211 = $alpha0;
             __THREW__ = 0;
             invoke_vid(524,($210|0),(+$211));
             $212 = __THREW__; __THREW__ = 0;
             $213 = $212&1;
             if ($213) {
              break L16;
             }
            }
           }
           $214 = $alpha0;
           $215 = $214 < 1.0;
           if (!($215)) {
            label = 63;
            break L16;
           }
           $218 = $c1;
           __THREW__ = 0;
           $219 = (invoke_ii(525,($218|0))|0);
           $220 = __THREW__; __THREW__ = 0;
           $221 = $220&1;
           if ($221) {
            break L16;
           }
           $indexA = $219;
           $222 = $c1;
           __THREW__ = 0;
           $223 = (invoke_ii(526,($222|0))|0);
           $224 = __THREW__; __THREW__ = 0;
           $225 = $224&1;
           if ($225) {
            break L16;
           }
           $indexB = $223;
           __THREW__ = 0;
           invoke_vi(527,($input|0));
           $226 = __THREW__; __THREW__ = 0;
           $227 = $226&1;
           if ($227) {
            break L16;
           }
           $228 = $fA;
           __THREW__ = 0;
           $229 = (invoke_ii(528,($228|0))|0);
           $230 = __THREW__; __THREW__ = 0;
           $231 = $230&1;
           if ($231) {
            break L16;
           }
           $232 = $indexA;
           __THREW__ = 0;
           invoke_viii(529,($input|0),($229|0),($232|0));
           $233 = __THREW__; __THREW__ = 0;
           $234 = $233&1;
           if ($234) {
            break L16;
           }
           $235 = (($input) + 28|0);
           $236 = $fB;
           __THREW__ = 0;
           $237 = (invoke_ii(528,($236|0))|0);
           $238 = __THREW__; __THREW__ = 0;
           $239 = $238&1;
           if ($239) {
            break L16;
           }
           $240 = $indexB;
           __THREW__ = 0;
           invoke_viii(529,($235|0),($237|0),($240|0));
           $241 = __THREW__; __THREW__ = 0;
           $242 = $241&1;
           if ($242) {
            break L16;
           }
           $243 = (($input) + 56|0);
           $244 = $bA;
           $245 = (($244) + 28|0);
           dest=$243+0|0; src=$245+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $246 = (($input) + 92|0);
           $247 = $bB;
           $248 = (($247) + 28|0);
           dest=$246+0|0; src=$248+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $249 = (($input) + 128|0);
           HEAPF32[$249>>2] = 1.0;
           __THREW__ = 0;
           invoke_vii(530,($output|0),($input|0));
           $250 = __THREW__; __THREW__ = 0;
           $251 = $250&1;
           if ($251) {
            break L16;
           }
           $252 = (($output) + 4|0);
           $253 = +HEAPF32[$252>>2];
           $beta = $253;
           $254 = HEAP32[$output>>2]|0;
           $255 = ($254|0)==(3);
           if ($255) {
            $256 = $alpha0;
            $257 = $alpha0;
            $258 = 1.0 - $257;
            $259 = $beta;
            $260 = $258 * $259;
            $261 = $256 + $260;
            __THREW__ = 0;
            $262 = (+invoke_ddd(531,(+$261),1.0));
            $263 = __THREW__; __THREW__ = 0;
            $264 = $263&1;
            if ($264) {
             break L16;
            }
            $alpha = $262;
           } else {
            $alpha = 1.0;
           }
           $265 = $alpha;
           $266 = $c1;
           $267 = (($266) + 132|0);
           HEAPF32[$267>>2] = $265;
           $268 = $c1;
           $269 = (($268) + 4|0);
           $270 = HEAP32[$269>>2]|0;
           $271 = $270 | 32;
           HEAP32[$269>>2] = $271;
           break;
          }
         }
         break L22;
        }
       } while(0);
       $272 = $alpha;
       $273 = $minAlpha;
       $274 = $272 < $273;
       if ($274) {
        $275 = $c1;
        $minContact = $275;
        $276 = $alpha;
        $minAlpha = $276;
       }
      }
     } while(0);
     $277 = $c1;
     $278 = (($277) + 12|0);
     $279 = HEAP32[$278>>2]|0;
     $c1 = $279;
    }
    $280 = $minContact;
    $281 = ($280|0)==(0|0);
    if ($281) {
     label = 84;
     break;
    }
    $282 = $minAlpha;
    $283 = 0.99999880790710449 < $282;
    if ($283) {
     label = 84;
     break;
    }
    $285 = $minContact;
    __THREW__ = 0;
    $286 = (invoke_ii(519,($285|0))|0);
    $287 = __THREW__; __THREW__ = 0;
    $288 = $287&1;
    if ($288) {
     break;
    }
    $fA2 = $286;
    $289 = $minContact;
    __THREW__ = 0;
    $290 = (invoke_ii(520,($289|0))|0);
    $291 = __THREW__; __THREW__ = 0;
    $292 = $291&1;
    if ($292) {
     break;
    }
    $fB3 = $290;
    $293 = $fA2;
    __THREW__ = 0;
    $294 = (invoke_ii(522,($293|0))|0);
    $295 = __THREW__; __THREW__ = 0;
    $296 = $295&1;
    if ($296) {
     break;
    }
    $bA4 = $294;
    $297 = $fB3;
    __THREW__ = 0;
    $298 = (invoke_ii(522,($297|0))|0);
    $299 = __THREW__; __THREW__ = 0;
    $300 = $299&1;
    if ($300) {
     break;
    }
    $bB5 = $298;
    $301 = $bA4;
    $302 = (($301) + 28|0);
    dest=$backup1+0|0; src=$302+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $303 = $bB5;
    $304 = (($303) + 28|0);
    dest=$backup2+0|0; src=$304+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $305 = $bA4;
    $306 = $minAlpha;
    __THREW__ = 0;
    invoke_vid(532,($305|0),(+$306));
    $307 = __THREW__; __THREW__ = 0;
    $308 = $307&1;
    if ($308) {
     break;
    }
    $309 = $bB5;
    $310 = $minAlpha;
    __THREW__ = 0;
    invoke_vid(532,($309|0),(+$310));
    $311 = __THREW__; __THREW__ = 0;
    $312 = $311&1;
    if ($312) {
     break;
    }
    $313 = $minContact;
    $314 = (($15) + 102876|0);
    $315 = (($314) + 120|0);
    $316 = HEAP32[$315>>2]|0;
    __THREW__ = 0;
    invoke_vii(533,($313|0),($316|0));
    $317 = __THREW__; __THREW__ = 0;
    $318 = $317&1;
    if ($318) {
     break;
    }
    $319 = $minContact;
    $320 = (($319) + 4|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = $321 & -33;
    HEAP32[$320>>2] = $322;
    $323 = $minContact;
    $324 = (($323) + 128|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (($325) + 1)|0;
    HEAP32[$324>>2] = $326;
    $327 = $minContact;
    __THREW__ = 0;
    $328 = (invoke_ii(518,($327|0))|0);
    $329 = __THREW__; __THREW__ = 0;
    $330 = $329&1;
    if ($330) {
     break;
    }
    $331 = $328&1;
    $332 = ($331|0)==(0);
    if (!($332)) {
     $333 = $minContact;
     __THREW__ = 0;
     $334 = (invoke_ii(534,($333|0))|0);
     $335 = __THREW__; __THREW__ = 0;
     $336 = $335&1;
     if ($336) {
      break;
     }
     $337 = $334&1;
     $338 = ($337|0)==(0);
     if (!($338)) {
      $352 = $bA4;
      __THREW__ = 0;
      invoke_vii(536,($352|0),1);
      $353 = __THREW__; __THREW__ = 0;
      $354 = $353&1;
      if ($354) {
       break;
      }
      $355 = $bB5;
      __THREW__ = 0;
      invoke_vii(536,($355|0),1);
      $356 = __THREW__; __THREW__ = 0;
      $357 = $356&1;
      if ($357) {
       break;
      }
      __THREW__ = 0;
      invoke_vi(537,($island|0));
      $358 = __THREW__; __THREW__ = 0;
      $359 = $358&1;
      if ($359) {
       break;
      }
      $360 = $bA4;
      __THREW__ = 0;
      invoke_vii(538,($island|0),($360|0));
      $361 = __THREW__; __THREW__ = 0;
      $362 = $361&1;
      if ($362) {
       break;
      }
      $363 = $bB5;
      __THREW__ = 0;
      invoke_vii(538,($island|0),($363|0));
      $364 = __THREW__; __THREW__ = 0;
      $365 = $364&1;
      if ($365) {
       break;
      }
      $366 = $minContact;
      __THREW__ = 0;
      invoke_vii(539,($island|0),($366|0));
      $367 = __THREW__; __THREW__ = 0;
      $368 = $367&1;
      if ($368) {
       break;
      }
      $369 = $bA4;
      $370 = (($369) + 4|0);
      $371 = HEAP16[$370>>1]|0;
      $372 = $371&65535;
      $373 = $372 | 1;
      $374 = $373&65535;
      HEAP16[$370>>1] = $374;
      $375 = $bB5;
      $376 = (($375) + 4|0);
      $377 = HEAP16[$376>>1]|0;
      $378 = $377&65535;
      $379 = $378 | 1;
      $380 = $379&65535;
      HEAP16[$376>>1] = $380;
      $381 = $minContact;
      $382 = (($381) + 4|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = $383 | 1;
      HEAP32[$382>>2] = $384;
      $385 = $bA4;
      HEAP32[$bodies>>2] = $385;
      $386 = (($bodies) + 4|0);
      $387 = $bB5;
      HEAP32[$386>>2] = $387;
      $i = 0;
      while(1) {
       $388 = $i;
       $389 = ($388|0)<(2);
       if (!($389)) {
        break;
       }
       $390 = $i;
       $391 = (($bodies) + ($390<<2)|0);
       $392 = HEAP32[$391>>2]|0;
       $body = $392;
       $393 = $body;
       $394 = HEAP32[$393>>2]|0;
       $395 = ($394|0)==(2);
       if ($395) {
        $396 = $body;
        $397 = (($396) + 120|0);
        $398 = HEAP32[$397>>2]|0;
        $ce = $398;
        while(1) {
         $399 = $ce;
         $400 = ($399|0)!=(0|0);
         if (!($400)) {
          break;
         }
         $401 = (($island) + 28|0);
         $402 = HEAP32[$401>>2]|0;
         $403 = (($island) + 40|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($402|0)==($404|0);
         if ($405) {
          label = 112;
          break;
         }
         $406 = (($island) + 36|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = (($island) + 44|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = ($407|0)==($409|0);
         if ($410) {
          label = 114;
          break;
         }
         $411 = $ce;
         $412 = (($411) + 4|0);
         $413 = HEAP32[$412>>2]|0;
         $contact = $413;
         $414 = $contact;
         $415 = (($414) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 & 1;
         $418 = ($417|0)!=(0);
         L127: do {
          if ($418) {
          } else {
           $419 = $ce;
           $420 = HEAP32[$419>>2]|0;
           $other = $420;
           $421 = $other;
           $422 = HEAP32[$421>>2]|0;
           $423 = ($422|0)==(2);
           do {
            if ($423) {
             $424 = $body;
             __THREW__ = 0;
             $425 = (invoke_ii(461,($424|0))|0);
             $426 = __THREW__; __THREW__ = 0;
             $427 = $426&1;
             if ($427) {
              break L16;
             }
             $428 = $425&1;
             $429 = ($428|0)==(0);
             if (!($429)) {
              break;
             }
             $430 = $other;
             __THREW__ = 0;
             $431 = (invoke_ii(461,($430|0))|0);
             $432 = __THREW__; __THREW__ = 0;
             $433 = $432&1;
             if ($433) {
              break L16;
             }
             $434 = $431&1;
             $435 = ($434|0)==(0);
             if (!($435)) {
              break;
             }
             break L127;
            }
           } while(0);
           $436 = $contact;
           $437 = (($436) + 48|0);
           $438 = HEAP32[$437>>2]|0;
           $439 = (($438) + 46|0);
           $440 = HEAP8[$439>>0]|0;
           $441 = $440&1;
           $442 = $441&1;
           $sensorA = $442;
           $443 = $contact;
           $444 = (($443) + 52|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = (($445) + 46|0);
           $447 = HEAP8[$446>>0]|0;
           $448 = $447&1;
           $449 = $448&1;
           $sensorB = $449;
           $450 = $sensorA;
           $451 = $450&1;
           do {
            if (!($451)) {
             $452 = $sensorB;
             $453 = $452&1;
             if ($453) {
              break;
             }
             $454 = $other;
             $455 = (($454) + 28|0);
             dest=$backup+0|0; src=$455+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
             $456 = $other;
             $457 = (($456) + 4|0);
             $458 = HEAP16[$457>>1]|0;
             $459 = $458&65535;
             $460 = $459 & 1;
             $461 = ($460|0)==(0);
             if ($461) {
              $462 = $other;
              $463 = $minAlpha;
              __THREW__ = 0;
              invoke_vid(532,($462|0),(+$463));
              $464 = __THREW__; __THREW__ = 0;
              $465 = $464&1;
              if ($465) {
               break L16;
              }
             }
             $466 = $contact;
             $467 = (($15) + 102876|0);
             $468 = (($467) + 120|0);
             $469 = HEAP32[$468>>2]|0;
             __THREW__ = 0;
             invoke_vii(533,($466|0),($469|0));
             $470 = __THREW__; __THREW__ = 0;
             $471 = $470&1;
             if ($471) {
              break L16;
             }
             $472 = $contact;
             __THREW__ = 0;
             $473 = (invoke_ii(518,($472|0))|0);
             $474 = __THREW__; __THREW__ = 0;
             $475 = $474&1;
             if ($475) {
              break L16;
             }
             $476 = $473&1;
             $477 = ($476|0)==(0);
             if ($477) {
              $478 = $other;
              $479 = (($478) + 28|0);
              dest=$479+0|0; src=$backup+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
              $480 = $other;
              __THREW__ = 0;
              invoke_vi(503,($480|0));
              $481 = __THREW__; __THREW__ = 0;
              $482 = $481&1;
              if ($482) {
               break L16;
              }
              break L127;
             }
             $483 = $contact;
             __THREW__ = 0;
             $484 = (invoke_ii(534,($483|0))|0);
             $485 = __THREW__; __THREW__ = 0;
             $486 = $485&1;
             if ($486) {
              break L16;
             }
             $487 = $484&1;
             $488 = ($487|0)==(0);
             if ($488) {
              $489 = $other;
              $490 = (($489) + 28|0);
              dest=$490+0|0; src=$backup+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
              $491 = $other;
              __THREW__ = 0;
              invoke_vi(503,($491|0));
              $492 = __THREW__; __THREW__ = 0;
              $493 = $492&1;
              if ($493) {
               break L16;
              }
              break L127;
             }
             $494 = $contact;
             $495 = (($494) + 4|0);
             $496 = HEAP32[$495>>2]|0;
             $497 = $496 | 1;
             HEAP32[$495>>2] = $497;
             $498 = $contact;
             __THREW__ = 0;
             invoke_vii(539,($island|0),($498|0));
             $499 = __THREW__; __THREW__ = 0;
             $500 = $499&1;
             if ($500) {
              break L16;
             }
             $501 = $other;
             $502 = (($501) + 4|0);
             $503 = HEAP16[$502>>1]|0;
             $504 = $503&65535;
             $505 = $504 & 1;
             $506 = ($505|0)!=(0);
             if ($506) {
              break L127;
             }
             $507 = $other;
             $508 = (($507) + 4|0);
             $509 = HEAP16[$508>>1]|0;
             $510 = $509&65535;
             $511 = $510 | 1;
             $512 = $511&65535;
             HEAP16[$508>>1] = $512;
             $513 = $other;
             $514 = HEAP32[$513>>2]|0;
             $515 = ($514|0)!=(0);
             if ($515) {
              $516 = $other;
              __THREW__ = 0;
              invoke_vii(536,($516|0),1);
              $517 = __THREW__; __THREW__ = 0;
              $518 = $517&1;
              if ($518) {
               break L16;
              }
             }
             $519 = $other;
             __THREW__ = 0;
             invoke_vii(538,($island|0),($519|0));
             $520 = __THREW__; __THREW__ = 0;
             $521 = $520&1;
             if ($521) {
              break L16;
             }
             break L127;
            }
           } while(0);
          }
         } while(0);
         $522 = $ce;
         $523 = (($522) + 12|0);
         $524 = HEAP32[$523>>2]|0;
         $ce = $524;
        }
        if ((label|0) == 112) {
         label = 0;
        }
        else if ((label|0) == 114) {
         label = 0;
        }
       }
       $525 = $i;
       $526 = (($525) + 1)|0;
       $i = $526;
      }
      $527 = $minAlpha;
      $528 = 1.0 - $527;
      $529 = $11;
      $530 = +HEAPF32[$529>>2];
      $531 = $528 * $530;
      HEAPF32[$subStep>>2] = $531;
      $532 = +HEAPF32[$subStep>>2];
      $533 = 1.0 / $532;
      $534 = (($subStep) + 4|0);
      HEAPF32[$534>>2] = $533;
      $535 = (($subStep) + 8|0);
      HEAPF32[$535>>2] = 1.0;
      $536 = (($subStep) + 16|0);
      HEAP32[$536>>2] = 20;
      $537 = $11;
      $538 = (($537) + 12|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = (($subStep) + 12|0);
      HEAP32[$540>>2] = $539;
      $541 = (($subStep) + 20|0);
      HEAP8[$541>>0] = 0;
      $542 = $bA4;
      $543 = (($542) + 8|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = $bB5;
      $546 = (($545) + 8|0);
      $547 = HEAP32[$546>>2]|0;
      __THREW__ = 0;
      invoke_viiii(540,($island|0),($subStep|0),($544|0),($547|0));
      $548 = __THREW__; __THREW__ = 0;
      $549 = $548&1;
      if ($549) {
       break;
      }
      $i6 = 0;
      while(1) {
       $550 = $i6;
       $551 = (($island) + 28|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = ($550|0)<($552|0);
       if (!($553)) {
        break;
       }
       $554 = $i6;
       $555 = (($island) + 8|0);
       $556 = HEAP32[$555>>2]|0;
       $557 = (($556) + ($554<<2)|0);
       $558 = HEAP32[$557>>2]|0;
       HEAP32[$body7>>2] = $558;
       $559 = HEAP32[$body7>>2]|0;
       $560 = (($559) + 4|0);
       $561 = HEAP16[$560>>1]|0;
       $562 = $561&65535;
       $563 = $562 & -2;
       $564 = $563&65535;
       HEAP16[$560>>1] = $564;
       $565 = HEAP32[$body7>>2]|0;
       $566 = HEAP32[$565>>2]|0;
       $567 = ($566|0)!=(2);
       if ($567) {
       } else {
        $568 = HEAP32[$body7>>2]|0;
        __THREW__ = 0;
        invoke_vi(541,($568|0));
        $569 = __THREW__; __THREW__ = 0;
        $570 = $569&1;
        if ($570) {
         break L16;
        }
        $5 = $movedBodySet;
        $6 = $body7;
        $571 = $5;
        $572 = $6;
        __THREW__ = 0;
        invoke_viii(542,($7|0),($571|0),($572|0));
        $573 = __THREW__; __THREW__ = 0;
        $574 = $573&1;
        if ($574) {
         break L16;
        }
        $2 = $14;
        $3 = $7;
        $575 = $2;
        $576 = $3;
        ;HEAP32[$4+0>>2]=HEAP32[$576+0>>2]|0;
        ;HEAP8[$1+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
        $0 = $575;
        $577 = $0;
        $578 = HEAP32[$1>>2]|0;
        HEAP32[$577>>2] = $578;
        $579 = (($575) + 4|0);
        $580 = $3;
        $581 = (($580) + 4|0);
        $582 = HEAP8[$581>>0]|0;
        $583 = $582&1;
        $584 = $583&1;
        HEAP8[$579>>0] = $584;
        $585 = HEAP32[$body7>>2]|0;
        $586 = (($585) + 120|0);
        $587 = HEAP32[$586>>2]|0;
        $ce8 = $587;
        while(1) {
         $588 = $ce8;
         $589 = ($588|0)!=(0|0);
         if (!($589)) {
          break;
         }
         $590 = $ce8;
         $591 = (($590) + 4|0);
         $592 = HEAP32[$591>>2]|0;
         $593 = (($592) + 4|0);
         $594 = HEAP32[$593>>2]|0;
         $595 = $594 & -34;
         HEAP32[$593>>2] = $595;
         $596 = $ce8;
         $597 = (($596) + 12|0);
         $598 = HEAP32[$597>>2]|0;
         $ce8 = $598;
        }
       }
       $599 = $i6;
       $600 = (($599) + 1)|0;
       $i6 = $600;
      }
      $601 = (($15) + 102876|0);
      __THREW__ = 0;
      invoke_vi(543,($601|0));
      $602 = __THREW__; __THREW__ = 0;
      $603 = $602&1;
      if ($603) {
       break;
      }
      $604 = (($15) + 103130|0);
      $605 = HEAP8[$604>>0]|0;
      $606 = $605&1;
      if ($606) {
       label = 166;
       break;
      }
      continue;
     }
    }
    $339 = $minContact;
    __THREW__ = 0;
    invoke_vii(535,($339|0),0);
    $340 = __THREW__; __THREW__ = 0;
    $341 = $340&1;
    if ($341) {
     break;
    }
    $342 = $bA4;
    $343 = (($342) + 28|0);
    dest=$343+0|0; src=$backup1+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $344 = $bB5;
    $345 = (($344) + 28|0);
    dest=$345+0|0; src=$backup2+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $346 = $bA4;
    __THREW__ = 0;
    invoke_vi(503,($346|0));
    $347 = __THREW__; __THREW__ = 0;
    $348 = $347&1;
    if ($348) {
     break;
    }
    $349 = $bB5;
    __THREW__ = 0;
    invoke_vi(503,($349|0));
    $350 = __THREW__; __THREW__ = 0;
    $351 = $350&1;
    if ($351) {
     break;
    }
   }
   if ((label|0) == 35) {
    __THREW__ = 0;
    invoke_viiii(468,(22264|0),(22168|0),933,(22320|0));
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if (!($125)) {
     // unreachable;
    }
   }
   else if ((label|0) == 63) {
    __THREW__ = 0;
    invoke_viiii(468,(22336|0),(22168|0),979,(22320|0));
    $216 = __THREW__; __THREW__ = 0;
    $217 = $216&1;
    if (!($217)) {
     // unreachable;
    }
   }
   else if ((label|0) == 84) {
    $284 = (($15) + 103131|0);
    HEAP8[$284>>0] = 1;
    label = 168;
   }
   else if ((label|0) == 166) {
    $607 = (($15) + 103131|0);
    HEAP8[$607>>0] = 0;
    label = 168;
   }
   if ((label|0) == 168) {
    $608 = (($15) + 103804|0);
    $609 = (($15) + 103164|0);
    __THREW__ = 0;
    invoke_viii(544,($608|0),($movedBodySet|0),($609|0));
    $610 = __THREW__; __THREW__ = 0;
    $611 = $610&1;
    if (!($611)) {
     $612 = (($15) + 102876|0);
     __THREW__ = 0;
     invoke_vi(545,($612|0));
     $613 = __THREW__; __THREW__ = 0;
     $614 = $613&1;
     if (!($614)) {
      __THREW__ = 0;
      $615 = (invoke_i(452)|0);
      $616 = __THREW__; __THREW__ = 0;
      $617 = $616&1;
      if (!($617)) {
       __THREW__ = 0;
       invoke_vi(546,($615|0));
       $618 = __THREW__; __THREW__ = 0;
       $619 = $618&1;
       if (!($619)) {
        __THREW__ = 0;
        $620 = (+invoke_di(547,($findTOITimer|0)));
        $621 = __THREW__; __THREW__ = 0;
        $622 = $621&1;
        if (!($622)) {
         $623 = (($15) + 103940|0);
         $624 = +HEAPF32[$623>>2];
         $625 = $624 + $620;
         HEAPF32[$623>>2] = $625;
         __THREW__ = 0;
         invoke_vi(517,($island|0));
         $626 = __THREW__; __THREW__ = 0;
         $627 = $626&1;
         if ($627) {
          label = 7;
          break;
         }
         __ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($movedBodySet);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
   $76 = ___cxa_find_matching_catch()|0;
   $77 = tempRet0;
   $12 = $76;
   $13 = $77;
   __THREW__ = 0;
   invoke_vi(517,($island|0));
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    $632 = ___cxa_find_matching_catch(0|0)|0;
    $633 = tempRet0;
    ___clang_call_terminate($632);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $12 = $44;
  $13 = $45;
 }
 __THREW__ = 0;
 invoke_vi(548,($movedBodySet|0));
 $628 = __THREW__; __THREW__ = 0;
 $629 = $628&1;
 if ($629) {
  $632 = ___cxa_find_matching_catch(0|0)|0;
  $633 = tempRet0;
  ___clang_call_terminate($632);
  // unreachable;
 }
 $630 = $12;
 $631 = $13;
 ___resumeException($630|0);
 // unreachable;
}
function __ZN7b2World17InitializeGPUDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 103096|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = (($1) + 103092|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&1;
  if ($7) {
   label = 4;
  } else {
   $8 = (($1) + 103093|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&1;
   if ($10) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   $11 = (__ZN14b2CLCommonData8instanceEv()|0);
   __ZN14b2CLCommonData31UpdateFixtureAddressAndChildrenEP7b2World($11,$1);
  }
 }
 $12 = HEAP8[3200>>0]|0;
 $13 = $12&1;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($1) + 103092|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 if ($16) {
  label = 9;
 } else {
  $17 = (($1) + 103093|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&1;
  if ($19) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $20 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData10CopyShapesEP7b2World($20,$1);
 }
 $21 = (($1) + 103093|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if ($23) {
  $24 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData27CopyStaticFixtureAttributesEP7b2World($24,$1);
 }
 $25 = (($1) + 103092|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if ($27) {
  $28 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($28,$1);
  $29 = (($1) + 103888|0);
  HEAP8[$29>>0] = 1;
 } else {
  $30 = (($1) + 103094|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&1;
  if ($32) {
   $33 = (__ZN14b2CLCommonData8instanceEv()|0);
   __ZN14b2CLCommonData24CopyStaticBodyAttributesEP7b2World($33,$1);
   $34 = (($1) + 103094|0);
   HEAP8[$34>>0] = 0;
  }
 }
 $35 = (($1) + 103888|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 if ($37) {
  label = 19;
 } else {
  $38 = (($1) + 103095|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&1;
  if ($40) {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $41 = (__ZN14b2CLCommonData8instanceEv()|0);
  __ZN14b2CLCommonData25CopyDynamicBodyAttributesEP7b2World($41,$1);
 }
 $42 = (($1) + 103100|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&1;
 if ($44) {
  label = 22;
 } else {
  $45 = (($1) + 103101|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&1;
  if ($47) {
   label = 22;
  }
 }
 if ((label|0) == 22) {
  $48 = (__ZN14b2CLCommonData8instanceEv()|0);
  $49 = (($1) + 103128|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&1;
  $52 = (($1) + 103100|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&1;
  $55 = (($1) + 103101|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&1;
  __ZN14b2CLCommonData10CopyJointsEP7b2Worldbbb($48,$1,$51,$54,$57);
  $58 = (($1) + 103100|0);
  HEAP8[$58>>0] = 0;
  $59 = (($1) + 103101|0);
  HEAP8[$59>>0] = 0;
 }
 STACKTOP = sp;return;
}
function __ZN7b2World4StepEfii($this,$dt,$velocityIterations,$positionIterations) {
 $this = $this|0;
 $dt = +$dt;
 $velocityIterations = $velocityIterations|0;
 $positionIterations = $positionIterations|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0.0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $step = 0, $stepNarrowPhaseTimer = 0, $stepSolverTimer = 0, $stepTotalTimer = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer111 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer9 = 0;
 var $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr114 = 0, $vararg_ptr115 = 0, $vararg_ptr116 = 0, $vararg_ptr117 = 0, $vararg_ptr118 = 0, $vararg_ptr124 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr75 = 0, $vararg_ptr76 = 0;
 var $vararg_ptr77 = 0, $vararg_ptr78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer121 = sp + 8|0;
 $vararg_buffer119 = sp + 416|0;
 $vararg_buffer111 = sp + 320|0;
 $vararg_buffer108 = sp + 144|0;
 $vararg_buffer105 = sp + 176|0;
 $vararg_buffer102 = sp + 440|0;
 $vararg_buffer100 = sp + 40|0;
 $vararg_buffer97 = sp + 48|0;
 $vararg_buffer94 = sp + 56|0;
 $vararg_buffer91 = sp + 64|0;
 $vararg_buffer88 = sp + 72|0;
 $vararg_buffer85 = sp + 80|0;
 $vararg_buffer82 = sp + 88|0;
 $vararg_buffer79 = sp + 96|0;
 $vararg_buffer72 = sp + 104|0;
 $vararg_buffer69 = sp + 376|0;
 $vararg_buffer66 = sp + 392|0;
 $vararg_buffer63 = sp + 408|0;
 $vararg_buffer60 = sp + 424|0;
 $vararg_buffer57 = sp + 432|0;
 $vararg_buffer50 = sp + 184|0;
 $vararg_buffer47 = sp + 224|0;
 $vararg_buffer44 = sp + 232|0;
 $vararg_buffer41 = sp + 240|0;
 $vararg_buffer38 = sp + 248|0;
 $vararg_buffer35 = sp + 256|0;
 $vararg_buffer27 = sp + 264|0;
 $vararg_buffer25 = sp + 304|0;
 $vararg_buffer22 = sp + 312|0;
 $vararg_buffer19 = sp + 24|0;
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer11 = sp + 368|0;
 $vararg_buffer9 = sp + 152|0;
 $vararg_buffer7 = sp + 384|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 160|0;
 $vararg_buffer1 = sp + 400|0;
 $vararg_buffer = sp + 168|0;
 $stepTotalTimer = sp + 493|0;
 $step = sp + 464|0;
 $stepNarrowPhaseTimer = sp + 492|0;
 $stepSolverTimer = sp + 494|0;
 $0 = $this;
 $1 = $dt;
 $2 = $velocityIterations;
 $3 = $positionIterations;
 $4 = $0;
 __ZN7b2TimerC2Ev($stepTotalTimer);
 __ZN7b2World17InitializeGPUDataEv($4);
 $5 = (($4) + 103092|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if ($7) {
  label = 3;
 } else {
  $8 = (($4) + 103093|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if ($10) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $11 = (($4) + 102876|0);
  __ZN16b2ContactManager15FindNewContactsEv($11);
  $12 = (($4) + 102872|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & -2;
  HEAP32[$12>>2] = $14;
 }
 $15 = (($4) + 103092|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&1;
 if ($17) {
  $18 = (($4) + 103092|0);
  HEAP8[$18>>0] = 0;
 }
 $19 = (($4) + 103093|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if ($21) {
  $22 = (($4) + 103093|0);
  HEAP8[$22>>0] = 0;
 }
 $23 = (($4) + 102872|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | 2;
 HEAP32[$23>>2] = $25;
 $26 = $1;
 HEAPF32[$step>>2] = $26;
 $27 = $2;
 $28 = (($step) + 12|0);
 HEAP32[$28>>2] = $27;
 $29 = $3;
 $30 = (($step) + 16|0);
 HEAP32[$30>>2] = $29;
 $31 = $1;
 $32 = $31 > 0.0;
 if ($32) {
  $33 = $1;
  $34 = 1.0 / $33;
  $35 = (($step) + 4|0);
  HEAPF32[$35>>2] = $34;
 } else {
  $36 = (($step) + 4|0);
  HEAPF32[$36>>2] = 0.0;
 }
 $37 = (($4) + 103124|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = $38 * $39;
 $41 = (($step) + 8|0);
 HEAPF32[$41>>2] = $40;
 $42 = (($4) + 103128|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&1;
 $45 = (($step) + 20|0);
 $46 = $44&1;
 HEAP8[$45>>0] = $46;
 __ZN7b2TimerC2Ev($stepNarrowPhaseTimer);
 $47 = +HEAPF32[$step>>2];
 $48 = $47 > 0.0;
 if ($48) {
  $49 = (($4) + 102876|0);
  __ZN16b2ContactManager7CollideEv($49);
 }
 $50 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($50);
 $51 = (+__ZNK7b2Timer15GetMillisecondsEv($stepNarrowPhaseTimer));
 $52 = (($4) + 103924|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $53 + $51;
 HEAPF32[$52>>2] = $54;
 __ZN7b2TimerC2Ev($stepSolverTimer);
 $55 = +HEAPF32[$step>>2];
 $56 = $55 > 0.0;
 if ($56) {
  __ZN7b2World5SolveERK10b2TimeStep($4,$step);
 }
 $57 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($57);
 $58 = (+__ZNK7b2Timer15GetMillisecondsEv($stepSolverTimer));
 $59 = (($4) + 103928|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $60 + $58;
 HEAPF32[$59>>2] = $61;
 $62 = (($4) + 103129|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&1;
 if ($64) {
  $65 = +HEAPF32[$step>>2];
  $66 = $65 > 0.0;
  if ($66) {
   __ZN7b2World8SolveTOIERK10b2TimeStep($4,$step);
  }
 }
 $67 = +HEAPF32[$step>>2];
 $68 = $67 > 0.0;
 if ($68) {
  $69 = (($step) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = (($4) + 103124|0);
  HEAPF32[$71>>2] = $70;
 }
 $72 = (($4) + 102872|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & 4;
 $75 = ($74|0)!=(0);
 if ($75) {
  __ZN7b2World11ClearForcesEv($4);
 }
 $76 = (($4) + 102872|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 & -3;
 HEAP32[$76>>2] = $78;
 $79 = (__ZN10b2CLDevice8instanceEv()|0);
 __ZN10b2CLDevice18finishCommandQueueEv($79);
 $80 = (+__ZNK7b2Timer15GetMillisecondsEv($stepTotalTimer));
 $81 = (($4) + 103920|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $82 + $80;
 HEAPF32[$81>>2] = $83;
 $84 = (($4) + 103892|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 HEAP32[$84>>2] = $86;
 $87 = (($4) + 103892|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)>=(60);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = (($4) + 103916|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&1;
 if ($92) {
  $93 = (_fopen((22352|0),(22384|0))|0);
  $94 = (($4) + 103912|0);
  HEAP32[$94>>2] = $93;
  $95 = (($4) + 103912|0);
  $96 = HEAP32[$95>>2]|0;
  (_fprintf(($96|0),(22392|0),($vararg_buffer|0))|0);
  $97 = (($4) + 103912|0);
  $98 = HEAP32[$97>>2]|0;
  (_fprintf(($98|0),(22480|0),($vararg_buffer1|0))|0);
  $99 = (($4) + 103912|0);
  $100 = HEAP32[$99>>2]|0;
  (_fprintf(($100|0),(22560|0),($vararg_buffer3|0))|0);
  $101 = (($4) + 103912|0);
  $102 = HEAP32[$101>>2]|0;
  (_fprintf(($102|0),(22648|0),($vararg_buffer5|0))|0);
  $103 = (($4) + 103912|0);
  $104 = HEAP32[$103>>2]|0;
  (_fprintf(($104|0),(22744|0),($vararg_buffer7|0))|0);
 }
 (_printf((22744|0),($vararg_buffer9|0))|0);
 $105 = (($4) + 103920|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $106 / 60.0;
 HEAPF32[$105>>2] = $107;
 $108 = (($4) + 103924|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $109 / 60.0;
 HEAPF32[$108>>2] = $110;
 $111 = (($4) + 103928|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $112 / 60.0;
 HEAPF32[$111>>2] = $113;
 $114 = (($4) + 103932|0);
 $115 = +HEAPF32[$114>>2];
 $116 = $115 / 60.0;
 HEAPF32[$114>>2] = $116;
 $117 = (($4) + 103936|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $118 / 60.0;
 HEAPF32[$117>>2] = $119;
 $120 = (($4) + 103940|0);
 $121 = +HEAPF32[$120>>2];
 $122 = $121 / 60.0;
 HEAPF32[$120>>2] = $122;
 $123 = (($4) + 103920|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $124;
 HEAPF64[tempDoublePtr>>3]=$125;HEAP32[$vararg_buffer11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer11+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22752|0),($vararg_buffer11|0))|0);
 $126 = (($4) + 103924|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $127;
 HEAPF64[tempDoublePtr>>3]=$128;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22784|0),($vararg_buffer13|0))|0);
 $129 = (($4) + 103928|0);
 $130 = +HEAPF32[$129>>2];
 $131 = (($4) + 103932|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $130 - $132;
 $134 = $133;
 HEAPF64[tempDoublePtr>>3]=$134;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22816|0),($vararg_buffer16|0))|0);
 $135 = (($4) + 103932|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $136;
 HEAPF64[tempDoublePtr>>3]=$137;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22840|0),($vararg_buffer19|0))|0);
 $138 = (($4) + 103940|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $139;
 HEAPF64[tempDoublePtr>>3]=$140;HEAP32[$vararg_buffer22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer22+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22872|0),($vararg_buffer22|0))|0);
 (_printf((22904|0),($vararg_buffer25|0))|0);
 $141 = (($4) + 103916|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&1;
 if ($143) {
  $144 = (($4) + 103912|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($4) + 103076|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($4) + 103088|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($4) + 103920|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $151;
  $153 = (($4) + 103924|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $154;
  $156 = (($4) + 103928|0);
  $157 = +HEAPF32[$156>>2];
  $158 = (($4) + 103932|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $157 - $159;
  $161 = $160;
  $162 = (($4) + 103932|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $163;
  HEAP32[$vararg_buffer27>>2] = $147;
  $vararg_ptr30 = (($vararg_buffer27) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $149;
  $vararg_ptr31 = (($vararg_buffer27) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$152;HEAP32[$vararg_ptr31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr31+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr32 = (($vararg_buffer27) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$155;HEAP32[$vararg_ptr32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr32+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr33 = (($vararg_buffer27) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$161;HEAP32[$vararg_ptr33>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr33+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr34 = (($vararg_buffer27) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$164;HEAP32[$vararg_ptr34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr34+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($145|0),(22952|0),($vararg_buffer27|0))|0);
 }
 $165 = (($4) + 103920|0);
 HEAPF32[$165>>2] = 0.0;
 $166 = (($4) + 103940|0);
 HEAPF32[$166>>2] = 0.0;
 $167 = (($4) + 103936|0);
 HEAPF32[$167>>2] = 0.0;
 $168 = (($4) + 103932|0);
 HEAPF32[$168>>2] = 0.0;
 $169 = (($4) + 103928|0);
 HEAPF32[$169>>2] = 0.0;
 $170 = (($4) + 103924|0);
 HEAPF32[$170>>2] = 0.0;
 $171 = (($4) + 103944|0);
 $172 = +HEAPF32[$171>>2];
 $173 = $172 / 60.0;
 HEAPF32[$171>>2] = $173;
 $174 = (($4) + 103948|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $175 / 60.0;
 HEAPF32[$174>>2] = $176;
 $177 = (($4) + 103952|0);
 $178 = +HEAPF32[$177>>2];
 $179 = $178 / 60.0;
 HEAPF32[$177>>2] = $179;
 $180 = (($4) + 103956|0);
 $181 = +HEAPF32[$180>>2];
 $182 = $181 / 60.0;
 HEAPF32[$180>>2] = $182;
 $183 = (($4) + 103960|0);
 $184 = +HEAPF32[$183>>2];
 $185 = $184 / 60.0;
 HEAPF32[$183>>2] = $185;
 $186 = (($4) + 103944|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $187;
 HEAPF64[tempDoublePtr>>3]=$188;HEAP32[$vararg_buffer35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer35+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((22984|0),($vararg_buffer35|0))|0);
 $189 = (($4) + 103948|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $190;
 HEAPF64[tempDoublePtr>>3]=$191;HEAP32[$vararg_buffer38>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer38+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23032|0),($vararg_buffer38|0))|0);
 $192 = (($4) + 103952|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $193;
 HEAPF64[tempDoublePtr>>3]=$194;HEAP32[$vararg_buffer41>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer41+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23080|0),($vararg_buffer41|0))|0);
 $195 = (($4) + 103956|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $196;
 HEAPF64[tempDoublePtr>>3]=$197;HEAP32[$vararg_buffer44>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer44+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23128|0),($vararg_buffer44|0))|0);
 $198 = (($4) + 103960|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $199;
 HEAPF64[tempDoublePtr>>3]=$200;HEAP32[$vararg_buffer47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer47+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23168|0),($vararg_buffer47|0))|0);
 $201 = (($4) + 103916|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 if ($203) {
  $204 = (($4) + 103912|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($4) + 103944|0);
  $207 = +HEAPF32[$206>>2];
  $208 = $207;
  $209 = (($4) + 103948|0);
  $210 = +HEAPF32[$209>>2];
  $211 = $210;
  $212 = (($4) + 103952|0);
  $213 = +HEAPF32[$212>>2];
  $214 = $213;
  $215 = (($4) + 103956|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $216;
  $218 = (($4) + 103960|0);
  $219 = +HEAPF32[$218>>2];
  $220 = $219;
  HEAPF64[tempDoublePtr>>3]=$208;HEAP32[$vararg_buffer50>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer50+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr53 = (($vararg_buffer50) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$211;HEAP32[$vararg_ptr53>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr53+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr54 = (($vararg_buffer50) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$214;HEAP32[$vararg_ptr54>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr54+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr55 = (($vararg_buffer50) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$217;HEAP32[$vararg_ptr55>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr55+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr56 = (($vararg_buffer50) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$220;HEAP32[$vararg_ptr56>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr56+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($205|0),(23216|0),($vararg_buffer50|0))|0);
 }
 $221 = (($4) + 103944|0);
 HEAPF32[$221>>2] = 0.0;
 $222 = (($4) + 103960|0);
 HEAPF32[$222>>2] = 0.0;
 $223 = (($4) + 103956|0);
 HEAPF32[$223>>2] = 0.0;
 $224 = (($4) + 103952|0);
 HEAPF32[$224>>2] = 0.0;
 $225 = (($4) + 103948|0);
 HEAPF32[$225>>2] = 0.0;
 $226 = (($4) + 103896|0);
 $227 = +HEAPF64[$226>>3];
 $228 = $227 / 60.0;
 HEAPF64[$226>>3] = $228;
 $229 = (($4) + 103964|0);
 $230 = +HEAPF32[$229>>2];
 $231 = $230 / 60.0;
 HEAPF32[$229>>2] = $231;
 $232 = (($4) + 103968|0);
 $233 = +HEAPF32[$232>>2];
 $234 = $233 / 60.0;
 HEAPF32[$232>>2] = $234;
 $235 = (($4) + 103972|0);
 $236 = +HEAPF32[$235>>2];
 $237 = $236 / 60.0;
 HEAPF32[$235>>2] = $237;
 $238 = (($4) + 103976|0);
 $239 = +HEAPF32[$238>>2];
 $240 = $239 / 60.0;
 HEAPF32[$238>>2] = $240;
 $241 = (($4) + 103896|0);
 $242 = +HEAPF64[$241>>3];
 HEAPF64[tempDoublePtr>>3]=$242;HEAP32[$vararg_buffer57>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer57+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23240|0),($vararg_buffer57|0))|0);
 $243 = (($4) + 103964|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $244;
 HEAPF64[tempDoublePtr>>3]=$245;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23264|0),($vararg_buffer60|0))|0);
 $246 = (($4) + 103968|0);
 $247 = +HEAPF32[$246>>2];
 $248 = $247;
 HEAPF64[tempDoublePtr>>3]=$248;HEAP32[$vararg_buffer63>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer63+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23312|0),($vararg_buffer63|0))|0);
 $249 = (($4) + 103972|0);
 $250 = +HEAPF32[$249>>2];
 $251 = $250;
 HEAPF64[tempDoublePtr>>3]=$251;HEAP32[$vararg_buffer66>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer66+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23360|0),($vararg_buffer66|0))|0);
 $252 = (($4) + 103976|0);
 $253 = +HEAPF32[$252>>2];
 $254 = $253;
 HEAPF64[tempDoublePtr>>3]=$254;HEAP32[$vararg_buffer69>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer69+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23408|0),($vararg_buffer69|0))|0);
 $255 = (($4) + 103916|0);
 $256 = HEAP8[$255>>0]|0;
 $257 = $256&1;
 if ($257) {
  $258 = (($4) + 103912|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($4) + 103896|0);
  $261 = +HEAPF64[$260>>3];
  $262 = (($4) + 103964|0);
  $263 = +HEAPF32[$262>>2];
  $264 = $263;
  $265 = (($4) + 103968|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $266;
  $268 = (($4) + 103972|0);
  $269 = +HEAPF32[$268>>2];
  $270 = $269;
  $271 = (($4) + 103976|0);
  $272 = +HEAPF32[$271>>2];
  $273 = $272;
  HEAPF64[tempDoublePtr>>3]=$261;HEAP32[$vararg_buffer72>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer72+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr75 = (($vararg_buffer72) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$264;HEAP32[$vararg_ptr75>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr75+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr76 = (($vararg_buffer72) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$267;HEAP32[$vararg_ptr76>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr76+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr77 = (($vararg_buffer72) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$270;HEAP32[$vararg_ptr77>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr77+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr78 = (($vararg_buffer72) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$273;HEAP32[$vararg_ptr78>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr78+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($259|0),(23216|0),($vararg_buffer72|0))|0);
 }
 $274 = (($4) + 103896|0);
 HEAPF64[$274>>3] = 0.0;
 $275 = (($4) + 103964|0);
 HEAPF32[$275>>2] = 0.0;
 $276 = (($4) + 103976|0);
 HEAPF32[$276>>2] = 0.0;
 $277 = (($4) + 103972|0);
 HEAPF32[$277>>2] = 0.0;
 $278 = (($4) + 103968|0);
 HEAPF32[$278>>2] = 0.0;
 $279 = (($4) + 103904|0);
 $280 = +HEAPF64[$279>>3];
 $281 = $280 / 60.0;
 HEAPF64[$279>>3] = $281;
 $282 = (($4) + 103980|0);
 $283 = +HEAPF32[$282>>2];
 $284 = $283 / 60.0;
 HEAPF32[$282>>2] = $284;
 $285 = (($4) + 103984|0);
 $286 = +HEAPF32[$285>>2];
 $287 = $286 / 60.0;
 HEAPF32[$285>>2] = $287;
 $288 = (($4) + 103988|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $289 / 60.0;
 HEAPF32[$288>>2] = $290;
 $291 = (($4) + 103992|0);
 $292 = +HEAPF32[$291>>2];
 $293 = $292 / 60.0;
 HEAPF32[$291>>2] = $293;
 $294 = (($4) + 103996|0);
 $295 = +HEAPF32[$294>>2];
 $296 = $295 / 60.0;
 HEAPF32[$294>>2] = $296;
 $297 = (($4) + 103904|0);
 $298 = +HEAPF64[$297>>3];
 HEAPF64[tempDoublePtr>>3]=$298;HEAP32[$vararg_buffer79>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer79+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23456|0),($vararg_buffer79|0))|0);
 $299 = (($4) + 103980|0);
 $300 = +HEAPF32[$299>>2];
 $301 = $300;
 HEAPF64[tempDoublePtr>>3]=$301;HEAP32[$vararg_buffer82>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer82+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23488|0),($vararg_buffer82|0))|0);
 $302 = (($4) + 103984|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $303;
 HEAPF64[tempDoublePtr>>3]=$304;HEAP32[$vararg_buffer85>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer85+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23544|0),($vararg_buffer85|0))|0);
 $305 = (($4) + 103988|0);
 $306 = +HEAPF32[$305>>2];
 $307 = $306;
 HEAPF64[tempDoublePtr>>3]=$307;HEAP32[$vararg_buffer88>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer88+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23608|0),($vararg_buffer88|0))|0);
 $308 = (($4) + 103992|0);
 $309 = +HEAPF32[$308>>2];
 $310 = $309;
 HEAPF64[tempDoublePtr>>3]=$310;HEAP32[$vararg_buffer91>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer91+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23672|0),($vararg_buffer91|0))|0);
 $311 = (($4) + 103996|0);
 $312 = +HEAPF32[$311>>2];
 $313 = $312;
 HEAPF64[tempDoublePtr>>3]=$313;HEAP32[$vararg_buffer94>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer94+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23720|0),($vararg_buffer94|0))|0);
 $314 = (($4) + 104000|0);
 $315 = +HEAPF32[$314>>2];
 $316 = $315 / 60.0;
 $317 = $316;
 HEAPF64[tempDoublePtr>>3]=$317;HEAP32[$vararg_buffer97>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer97+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23768|0),($vararg_buffer97|0))|0);
 $318 = (($4) + 104000|0);
 HEAPF32[$318>>2] = 0.0;
 (_printf((23808|0),($vararg_buffer100|0))|0);
 $319 = (($4) + 104004|0);
 $320 = +HEAPF32[$319>>2];
 $321 = $320 / 60.0;
 HEAPF32[$319>>2] = $321;
 $322 = (($4) + 104008|0);
 $323 = +HEAPF32[$322>>2];
 $324 = $323 / 60.0;
 HEAPF32[$322>>2] = $324;
 $325 = (($4) + 104012|0);
 $326 = +HEAPF32[$325>>2];
 $327 = $326 / 60.0;
 HEAPF32[$325>>2] = $327;
 $328 = (($4) + 104004|0);
 $329 = +HEAPF32[$328>>2];
 $330 = $329;
 HEAPF64[tempDoublePtr>>3]=$330;HEAP32[$vararg_buffer102>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer102+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23840|0),($vararg_buffer102|0))|0);
 $331 = (($4) + 104012|0);
 $332 = +HEAPF32[$331>>2];
 $333 = $332;
 HEAPF64[tempDoublePtr>>3]=$333;HEAP32[$vararg_buffer105>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer105+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23896|0),($vararg_buffer105|0))|0);
 $334 = (($4) + 104008|0);
 $335 = +HEAPF32[$334>>2];
 $336 = $335;
 HEAPF64[tempDoublePtr>>3]=$336;HEAP32[$vararg_buffer108>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer108+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_printf((23960|0),($vararg_buffer108|0))|0);
 $337 = (($4) + 104012|0);
 HEAPF32[$337>>2] = 0.0;
 $338 = (($4) + 104008|0);
 HEAPF32[$338>>2] = 0.0;
 $339 = (($4) + 104004|0);
 HEAPF32[$339>>2] = 0.0;
 $340 = (($4) + 103916|0);
 $341 = HEAP8[$340>>0]|0;
 $342 = $341&1;
 if ($342) {
  $343 = (($4) + 103912|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = (($4) + 103904|0);
  $346 = +HEAPF64[$345>>3];
  $347 = (($4) + 103980|0);
  $348 = +HEAPF32[$347>>2];
  $349 = $348;
  $350 = (($4) + 103984|0);
  $351 = +HEAPF32[$350>>2];
  $352 = $351;
  $353 = (($4) + 103988|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $354;
  $356 = (($4) + 103992|0);
  $357 = +HEAPF32[$356>>2];
  $358 = $357;
  $359 = (($4) + 103996|0);
  $360 = +HEAPF32[$359>>2];
  $361 = $360;
  HEAPF64[tempDoublePtr>>3]=$346;HEAP32[$vararg_buffer111>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer111+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr114 = (($vararg_buffer111) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$349;HEAP32[$vararg_ptr114>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr114+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr115 = (($vararg_buffer111) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$352;HEAP32[$vararg_ptr115>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr115+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr116 = (($vararg_buffer111) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$355;HEAP32[$vararg_ptr116>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr116+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr117 = (($vararg_buffer111) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$358;HEAP32[$vararg_ptr117>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr117+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr118 = (($vararg_buffer111) + 40|0);
  HEAPF64[tempDoublePtr>>3]=$361;HEAP32[$vararg_ptr118>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr118+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($344|0),(24016|0),($vararg_buffer111|0))|0);
 }
 $362 = (($4) + 103892|0);
 HEAP32[$362>>2] = 0;
 $363 = (($4) + 103904|0);
 HEAPF64[$363>>3] = 0.0;
 $364 = (($4) + 103980|0);
 HEAPF32[$364>>2] = 0.0;
 $365 = (($4) + 103996|0);
 HEAPF32[$365>>2] = 0.0;
 $366 = (($4) + 103992|0);
 HEAPF32[$366>>2] = 0.0;
 $367 = (($4) + 103988|0);
 HEAPF32[$367>>2] = 0.0;
 $368 = (($4) + 103984|0);
 HEAPF32[$368>>2] = 0.0;
 $369 = (($4) + 103892|0);
 HEAP32[$369>>2] = 0;
 $370 = (($4) + 103916|0);
 $371 = HEAP8[$370>>0]|0;
 $372 = $371&1;
 if ($372) {
  $373 = (($4) + 103916|0);
  HEAP8[$373>>0] = 0;
  $374 = (($4) + 103912|0);
  $375 = HEAP32[$374>>2]|0;
  (_fclose(($375|0))|0);
  (_printf((24048|0),($vararg_buffer119|0))|0);
  $376 = (($4) + 103076|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (($4) + 103088|0);
  $379 = HEAP32[$378>>2]|0;
  HEAP32[$vararg_buffer121>>2] = $377;
  $vararg_ptr124 = (($vararg_buffer121) + 4|0);
  HEAP32[$vararg_ptr124>>2] = $379;
  (_printf((24072|0),($vararg_buffer121|0))|0);
 }
 STACKTOP = sp;return;
}
function __ZN7b2World11ClearForcesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $body = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 103068|0);
 $3 = HEAP32[$2>>2]|0;
 $body = $3;
 while(1) {
  $4 = $body;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $body;
  $7 = (($6) + 76|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $8 != 0.0;
  if ($9) {
   label = 5;
  } else {
   $10 = $body;
   $11 = (($10) + 76|0);
   $12 = (($11) + 4|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 != 0.0;
   if ($14) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $15 = $body;
   $16 = (($15) + 76|0);
   __ZN6b2Vec27SetZeroEv($16);
   $17 = (($1) + 103095|0);
   HEAP8[$17>>0] = 1;
  }
  $18 = $body;
  $19 = (($18) + 84|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 != 0.0;
  if ($21) {
   $22 = $body;
   $23 = (($22) + 84|0);
   HEAPF32[$23>>2] = 0.0;
   $24 = (($1) + 103095|0);
   HEAP8[$24>>0] = 1;
  }
  $25 = $body;
  $26 = (__ZN6b2Body7GetNextEv($25)|0);
  $body = $26;
 }
 STACKTOP = sp;return;
}
function __ZNK7b2World13GetProxyCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 102876|0);
 $3 = (__ZNK12b2BroadPhase13GetProxyCountEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN16b2ContactManager15SetWorldPointerEP7b2World($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 188|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN8b2Island5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 32|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8b2Island3AddEP6b2Body($this,$body) {
 $this = $this|0;
 $body = $body|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $body;
 $2 = $0;
 $3 = (($2) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = (($2) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = $1;
  $13 = (($2) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($2) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = $12;
  $18 = (($2) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((24336|0),(24208|0),56,(24288|0));
  // unreachable;
 }
}
function __ZNK9b2Contact9IsEnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(4);
 STACKTOP = sp;return ($5|0);
}
function __ZN8b2Island3AddEP9b2Contact($this,$contact) {
 $this = $this|0;
 $contact = $contact|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = $1;
  $9 = (($2) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($2) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  HEAP32[$14>>2] = $8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((24296|0),(24208|0),64,(24288|0));
  // unreachable;
 }
}
function __ZN8b2Island3AddEP7b2Joint($this,$joint) {
 $this = $this|0;
 $joint = $joint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $joint;
 $2 = $0;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if ($7) {
  $8 = $1;
  $9 = (($2) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($2) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  HEAP32[$14>>2] = $8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((24176|0),(24208|0),70,(24288|0));
  // unreachable;
 }
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp + 8|0;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN7b2Sweep7AdvanceEf($this,$alpha) {
 $this = $this|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $beta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $alpha;
 $5 = $0;
 $6 = (($5) + 32|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 < 1.0;
 if ($8) {
  $9 = $1;
  $10 = (($5) + 32|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = (($5) + 32|0);
  $14 = +HEAPF32[$13>>2];
  $15 = 1.0 - $14;
  $16 = $12 / $15;
  $beta = $16;
  $17 = (($5) + 8|0);
  $18 = $beta;
  $19 = 1.0 - $18;
  $20 = (($5) + 8|0);
  __ZmlfRK6b2Vec2($3,$19,$20);
  $21 = $beta;
  $22 = (($5) + 16|0);
  __ZmlfRK6b2Vec2($4,$21,$22);
  __ZplRK6b2Vec2S1_($2,$3,$4);
  ;HEAP32[$17+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$17+4>>2]=HEAP32[$2+4>>2]|0;
  $23 = $beta;
  $24 = 1.0 - $23;
  $25 = (($5) + 24|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $24 * $26;
  $28 = $beta;
  $29 = (($5) + 28|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 * $30;
  $32 = $27 + $31;
  $33 = (($5) + 24|0);
  HEAPF32[$33>>2] = $32;
  $34 = $1;
  $35 = (($5) + 32|0);
  HEAPF32[$35>>2] = $34;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((22336|0),(24096|0),715,(24168|0));
  // unreachable;
 }
}
function __ZN10b2TOIInputC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = (($1) + 28|0);
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = (($1) + 56|0);
 __ZN7b2SweepC2Ev($3);
 $4 = (($1) + 92|0);
 __ZN7b2SweepC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN9b2Fixture8GetShapeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN6b2Body7AdvanceEf($this,$alpha) {
 $this = $this|0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $3 = sp;
 $0 = $this;
 $1 = $alpha;
 $4 = $0;
 $5 = (($4) + 28|0);
 $6 = $1;
 __ZN7b2Sweep7AdvanceEf($5,$6);
 $7 = (($4) + 28|0);
 $8 = (($7) + 16|0);
 $9 = (($4) + 28|0);
 $10 = (($9) + 8|0);
 ;HEAP32[$8+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;
 $11 = (($4) + 28|0);
 $12 = (($11) + 24|0);
 $13 = +HEAPF32[$12>>2];
 $14 = (($4) + 28|0);
 $15 = (($14) + 28|0);
 HEAPF32[$15>>2] = $13;
 $16 = (($4) + 12|0);
 $17 = (($16) + 8|0);
 $18 = (($4) + 28|0);
 $19 = (($18) + 28|0);
 $20 = +HEAPF32[$19>>2];
 __ZN5b2Rot3SetEf($17,$20);
 $21 = (($4) + 12|0);
 $22 = (($4) + 28|0);
 $23 = (($22) + 16|0);
 $24 = (($4) + 12|0);
 $25 = (($24) + 8|0);
 $26 = (($4) + 28|0);
 __Z5b2MulRK5b2RotRK6b2Vec2($3,$25,$26);
 __ZmiRK6b2Vec2S1_($2,$23,$3);
 ;HEAP32[$21+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$21+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN9b2Contact10SetEnabledEb($this,$flag) {
 $this = $this|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $flag&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 if ($5) {
  $6 = (($3) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | 4;
  HEAP32[$6>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $9 = (($3) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & -5;
  HEAP32[$9>>2] = $11;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i12 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 48|0;
 $17 = sp + 688|0;
 $39 = sp + 40|0;
 $42 = sp + 689|0;
 $72 = sp + 660|0;
 $73 = sp;
 $76 = sp + 348|0;
 $77 = sp + 352|0;
 $78 = sp + 8|0;
 $81 = sp + 376|0;
 $82 = sp + 32|0;
 $89 = sp + 16|0;
 $92 = sp + 690|0;
 $117 = sp + 24|0;
 $120 = sp + 691|0;
 $144 = sp + 148|0;
 $__parent = sp + 528|0;
 $__inserted = sp + 692|0;
 $147 = sp + 316|0;
 $__h = sp + 336|0;
 $148 = sp + 88|0;
 $149 = sp + 540|0;
 $152 = sp + 92|0;
 $145 = $this;
 $146 = $__v;
 $153 = $145;
 $154 = $146;
 $155 = (__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($153,$__parent,$154)|0);
 $__child = $155;
 $156 = $__child;
 $157 = HEAP32[$156>>2]|0;
 $__r = $157;
 HEAP8[$__inserted>>0] = 0;
 $158 = $__child;
 $159 = HEAP32[$158>>2]|0;
 $142 = $144;
 $143 = -1;
 $160 = $142;
 HEAP32[$160>>2] = 0;
 $161 = HEAP32[$144>>2]|0;
 HEAP32[$147>>2] = $161;
 $141 = $147;
 $162 = ($159|0)==(0|0);
 if (!($162)) {
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $163 = $146;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($149,$153,$163);
 $110 = $149;
 $164 = $110;
 $108 = $148;
 $109 = $164;
 $165 = $108;
 $166 = $109;
 HEAP32[$165>>2] = $166;
 ;HEAP8[$82+0>>0]=HEAP8[$148+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$148+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$148+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$148+3>>0]|0;
 $80 = $__h;
 $167 = $80;
 $79 = $82;
 $168 = $79;
 $169 = HEAP32[$168>>2]|0;
 $62 = $169;
 $170 = $62;
 $61 = $170;
 $171 = $61;
 $60 = $171;
 $172 = $60;
 $173 = HEAP32[$172>>2]|0;
 $__t$i$i = $173;
 $59 = $170;
 $174 = $59;
 $58 = $174;
 $175 = $58;
 HEAP32[$175>>2] = 0;
 $176 = $__t$i$i;
 $63 = $82;
 $177 = $63;
 $178 = HEAP32[$177>>2]|0;
 $66 = $178;
 $179 = $66;
 $65 = $179;
 $180 = $65;
 $64 = $180;
 $181 = $64;
 $182 = (($181) + 4|0);
 $67 = $182;
 $183 = $67;
 ;HEAP32[$81+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$183+4>>2]|0;
 ;HEAP8[$78+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $167;
 HEAP32[$76>>2] = $176;
 $184 = $75;
 $74 = $76;
 $185 = $74;
 $186 = HEAP32[$185>>2]|0;
 $68 = $78;
 $187 = $68;
 ;HEAP32[$77+0>>2]=HEAP32[$187+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$187+4>>2]|0;
 ;HEAP8[$73+0>>0]=HEAP8[$77+0>>0]|0;HEAP8[$73+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$73+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$73+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$73+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$73+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $184;
 HEAP32[$72>>2] = $186;
 $188 = $71;
 $70 = $72;
 $189 = $70;
 $190 = HEAP32[$189>>2]|0;
 HEAP32[$188>>2] = $190;
 $191 = (($188) + 4|0);
 $69 = $73;
 $192 = $69;
 ;HEAP32[$191+0>>2]=HEAP32[$192+0>>2]|0;HEAP32[$191+4>>2]=HEAP32[$192+4>>2]|0;
 $32 = $149;
 $193 = $32;
 $30 = $193;
 $31 = 0;
 $194 = $30;
 $29 = $194;
 $195 = $29;
 $28 = $195;
 $196 = $28;
 $197 = HEAP32[$196>>2]|0;
 $__tmp$i$i12 = $197;
 $198 = $31;
 $11 = $194;
 $199 = $11;
 $10 = $199;
 $200 = $10;
 HEAP32[$200>>2] = $198;
 $201 = $__tmp$i$i12;
 $202 = ($201|0)!=(0|0);
 if ($202) {
  $9 = $194;
  $203 = $9;
  $8 = $203;
  $204 = $8;
  $205 = (($204) + 4|0);
  $206 = $__tmp$i$i12;
  $26 = $205;
  $27 = $206;
  $207 = $26;
  $208 = (($207) + 4|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&1;
  if ($210) {
   $211 = HEAP32[$207>>2]|0;
   $212 = $27;
   $213 = (($212) + 16|0);
   $25 = $213;
   $214 = $25;
   $15 = $211;
   $16 = $214;
   $215 = $15;
   $216 = $16;
   ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
   $12 = $215;
   $13 = $216;
  }
  $217 = $27;
  $218 = ($217|0)!=(0|0);
  if ($218) {
   $219 = HEAP32[$207>>2]|0;
   $220 = $27;
   $22 = $219;
   $23 = $220;
   $24 = 1;
   $221 = $22;
   $222 = $23;
   $223 = $24;
   $19 = $221;
   $20 = $222;
   $21 = $223;
   $224 = $20;
   $18 = $224;
   $225 = $18;
   __ZdlPv($225);
  }
 }
 $226 = HEAP32[$__parent>>2]|0;
 $227 = $__child;
 $7 = $__h;
 $228 = $7;
 $6 = $228;
 $229 = $6;
 $5 = $229;
 $230 = $5;
 $231 = HEAP32[$230>>2]|0;
 __THREW__ = 0;
 invoke_viiii(549,($153|0),($226|0),($227|0),($231|0));
 $232 = __THREW__; __THREW__ = 0;
 $233 = $232&1;
 if (!($233)) {
  $4 = $__h;
  $234 = $4;
  $3 = $234;
  $235 = $3;
  $2 = $235;
  $236 = $2;
  $237 = HEAP32[$236>>2]|0;
  $__t$i = $237;
  $1 = $234;
  $238 = $1;
  $0 = $238;
  $239 = $0;
  HEAP32[$239>>2] = 0;
  $240 = $__t$i;
  $__r = $240;
  HEAP8[$__inserted>>0] = 1;
  $57 = $__h;
  $241 = $57;
  $55 = $241;
  $56 = 0;
  $242 = $55;
  $54 = $242;
  $243 = $54;
  $53 = $243;
  $244 = $53;
  $245 = HEAP32[$244>>2]|0;
  $__tmp$i$i7 = $245;
  $246 = $56;
  $36 = $242;
  $247 = $36;
  $35 = $247;
  $248 = $35;
  HEAP32[$248>>2] = $246;
  $249 = $__tmp$i$i7;
  $250 = ($249|0)!=(0|0);
  if ($250) {
   $34 = $242;
   $251 = $34;
   $33 = $251;
   $252 = $33;
   $253 = (($252) + 4|0);
   $254 = $__tmp$i$i7;
   $51 = $253;
   $52 = $254;
   $255 = $51;
   $256 = (($255) + 4|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&1;
   if ($258) {
    $259 = HEAP32[$255>>2]|0;
    $260 = $52;
    $261 = (($260) + 16|0);
    $50 = $261;
    $262 = $50;
    $40 = $259;
    $41 = $262;
    $263 = $40;
    $264 = $41;
    ;HEAP8[$39+0>>0]=HEAP8[$42+0>>0]|0;
    $37 = $263;
    $38 = $264;
   }
   $265 = $52;
   $266 = ($265|0)!=(0|0);
   if ($266) {
    $267 = HEAP32[$255>>2]|0;
    $268 = $52;
    $47 = $267;
    $48 = $268;
    $49 = 1;
    $269 = $47;
    $270 = $48;
    $271 = $49;
    $44 = $269;
    $45 = $270;
    $46 = $271;
    $272 = $45;
    $43 = $272;
    $273 = $43;
    __ZdlPv($273);
   }
  }
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $274 = ___cxa_find_matching_catch()|0;
 $275 = tempRet0;
 $150 = $274;
 $151 = $275;
 $135 = $__h;
 $276 = $135;
 $133 = $276;
 $134 = 0;
 $277 = $133;
 $132 = $277;
 $278 = $132;
 $131 = $278;
 $279 = $131;
 $280 = HEAP32[$279>>2]|0;
 $__tmp$i$i = $280;
 $281 = $134;
 $114 = $277;
 $282 = $114;
 $113 = $282;
 $283 = $113;
 HEAP32[$283>>2] = $281;
 $284 = $__tmp$i$i;
 $285 = ($284|0)!=(0|0);
 if ($285) {
  $112 = $277;
  $286 = $112;
  $111 = $286;
  $287 = $111;
  $288 = (($287) + 4|0);
  $289 = $__tmp$i$i;
  $129 = $288;
  $130 = $289;
  $290 = $129;
  $291 = (($290) + 4|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&1;
  if ($293) {
   $294 = HEAP32[$290>>2]|0;
   $295 = $130;
   $296 = (($295) + 16|0);
   $128 = $296;
   $297 = $128;
   $118 = $294;
   $119 = $297;
   $298 = $118;
   $299 = $119;
   ;HEAP8[$117+0>>0]=HEAP8[$120+0>>0]|0;
   $115 = $298;
   $116 = $299;
  }
  $300 = $130;
  $301 = ($300|0)!=(0|0);
  if ($301) {
   $302 = HEAP32[$290>>2]|0;
   $303 = $130;
   $125 = $302;
   $126 = $303;
   $127 = 1;
   $304 = $125;
   $305 = $126;
   $306 = $127;
   $122 = $304;
   $123 = $305;
   $124 = $306;
   $307 = $123;
   $121 = $307;
   $308 = $121;
   __ZdlPv($308);
  }
 }
 $319 = $150;
 $320 = $151;
 ___resumeException($319|0);
 // unreachable;
}
function __ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK9b2Fixture7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK7b2Shape7GetTypeEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK6b2Body12GetTransformEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK12b2BroadPhase13GetProxyCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 4|0;
 $12 = sp + 44|0;
 $22 = sp + 84|0;
 $39 = sp + 8|0;
 $40 = sp;
 $41 = sp + 72|0;
 $36 = $this;
 $37 = $__parent;
 $38 = $__v;
 $42 = $36;
 $34 = $42;
 $43 = $34;
 $33 = $43;
 $44 = $33;
 $45 = (($44) + 4|0);
 $32 = $45;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = HEAP32[$49>>2]|0;
 $__nd = $50;
 $51 = $__nd;
 $0 = $2;
 $1 = -1;
 $52 = $0;
 HEAP32[$52>>2] = 0;
 $53 = HEAP32[$2>>2]|0;
 HEAP32[$39>>2] = $53;
 $3 = $39;
 $54 = ($51|0)!=(0|0);
 if (!($54)) {
  $28 = $42;
  $107 = $28;
  $108 = (($107) + 4|0);
  $27 = $108;
  $109 = $27;
  $26 = $109;
  $110 = $26;
  $25 = $110;
  $111 = $25;
  $24 = $111;
  $112 = $24;
  $113 = $37;
  HEAP32[$113>>2] = $112;
  $114 = $37;
  $115 = HEAP32[$114>>2]|0;
  $35 = $115;
  $116 = $35;
  STACKTOP = sp;return ($116|0);
 }
 while(1) {
  $6 = $42;
  $55 = $6;
  $56 = (($55) + 8|0);
  $5 = $56;
  $57 = $5;
  $4 = $57;
  $58 = $4;
  $59 = $38;
  $60 = $__nd;
  $61 = (($60) + 16|0);
  $7 = $58;
  $8 = $59;
  $9 = $61;
  $62 = $8;
  $63 = HEAP32[$62>>2]|0;
  $64 = $9;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($63>>>0)<($65>>>0);
  if ($66) {
   $67 = $__nd;
   $68 = HEAP32[$67>>2]|0;
   $10 = $12;
   $11 = -1;
   $69 = $10;
   HEAP32[$69>>2] = 0;
   $70 = HEAP32[$12>>2]|0;
   HEAP32[$40>>2] = $70;
   $13 = $40;
   $71 = ($68|0)!=(0|0);
   if (!($71)) {
    label = 6;
    break;
   }
   $72 = $__nd;
   $73 = HEAP32[$72>>2]|0;
   $__nd = $73;
  } else {
   $16 = $42;
   $78 = $16;
   $79 = (($78) + 8|0);
   $15 = $79;
   $80 = $15;
   $14 = $80;
   $81 = $14;
   $82 = $__nd;
   $83 = (($82) + 16|0);
   $84 = $38;
   $17 = $81;
   $18 = $83;
   $19 = $84;
   $85 = $18;
   $86 = HEAP32[$85>>2]|0;
   $87 = $19;
   $88 = HEAP32[$87>>2]|0;
   $89 = ($86>>>0)<($88>>>0);
   if (!($89)) {
    label = 13;
    break;
   }
   $90 = $__nd;
   $91 = (($90) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   $20 = $22;
   $21 = -1;
   $93 = $20;
   HEAP32[$93>>2] = 0;
   $94 = HEAP32[$22>>2]|0;
   HEAP32[$41>>2] = $94;
   $23 = $41;
   $95 = ($92|0)!=(0|0);
   if (!($95)) {
    label = 11;
    break;
   }
   $96 = $__nd;
   $97 = (($96) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $__nd = $98;
  }
 }
 if ((label|0) == 6) {
  $74 = $__nd;
  $75 = $37;
  HEAP32[$75>>2] = $74;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $35 = $77;
  $116 = $35;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 11) {
  $99 = $__nd;
  $100 = $37;
  HEAP32[$100>>2] = $99;
  $101 = $37;
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + 4|0);
  $35 = $103;
  $116 = $35;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 13) {
  $104 = $__nd;
  $105 = $37;
  HEAP32[$105>>2] = $104;
  $106 = $37;
  $35 = $106;
  $116 = $35;
  STACKTOP = sp;return ($116|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i9$i = 0, $__tmp$i$i = 0, $__tmp$i$i12 = 0, $__tmp$i$i2 = 0, $__tmp$i$i2$i = 0, $__tmp$i$i7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 344|0;
 $18 = sp + 56|0;
 $21 = sp + 212|0;
 $22 = sp + 160|0;
 $23 = sp + 16|0;
 $26 = sp + 184|0;
 $27 = sp + 40|0;
 $34 = sp + 8|0;
 $37 = sp + 1204|0;
 $70 = sp + 372|0;
 $71 = sp + 64|0;
 $74 = sp + 388|0;
 $75 = sp + 392|0;
 $76 = sp + 88|0;
 $79 = sp + 416|0;
 $80 = sp;
 $84 = sp + 440|0;
 $85 = sp + 444|0;
 $86 = sp + 456|0;
 $104 = sp + 532|0;
 $105 = sp + 80|0;
 $108 = sp + 552|0;
 $109 = sp + 560|0;
 $110 = sp + 48|0;
 $113 = sp + 584|0;
 $114 = sp + 72|0;
 $124 = sp + 32|0;
 $127 = sp + 1205|0;
 $150 = sp + 112|0;
 $153 = sp + 1206|0;
 $178 = sp + 96|0;
 $181 = sp + 1207|0;
 $202 = sp + 964|0;
 $203 = sp + 128|0;
 $206 = sp + 980|0;
 $207 = sp + 984|0;
 $208 = sp + 24|0;
 $211 = sp + 1004|0;
 $212 = sp + 536|0;
 $213 = sp + 104|0;
 $220 = sp + 120|0;
 $223 = sp + 1208|0;
 $__h = sp + 1164|0;
 $252 = sp + 760|0;
 $255 = sp + 752|0;
 $256 = sp + 1188|0;
 $250 = $this;
 $251 = $__v;
 $258 = $250;
 $249 = $258;
 $259 = $249;
 $260 = (($259) + 4|0);
 $248 = $260;
 $261 = $248;
 $247 = $261;
 $262 = $247;
 $__na = $262;
 $263 = $__na;
 $245 = $263;
 $246 = 1;
 $264 = $245;
 $265 = $246;
 $242 = $264;
 $243 = $265;
 $244 = 0;
 $266 = $243;
 $267 = ($266*20)|0;
 $241 = $267;
 $268 = $241;
 $269 = (__Znwj($268)|0);
 $270 = $__na;
 $239 = $252;
 $240 = $270;
 $271 = $239;
 $272 = $240;
 HEAP32[$271>>2] = $272;
 $273 = (($271) + 4|0);
 HEAP8[$273>>0] = 0;
 ;HEAP8[$213+0>>0]=HEAP8[$252+0>>0]|0;HEAP8[$213+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$213+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$213+3>>0]=HEAP8[$252+3>>0]|0;HEAP8[$213+4>>0]=HEAP8[$252+4>>0]|0;HEAP8[$213+5>>0]=HEAP8[$252+5>>0]|0;HEAP8[$213+6>>0]=HEAP8[$252+6>>0]|0;HEAP8[$213+7>>0]=HEAP8[$252+7>>0]|0;
 $210 = $__h;
 HEAP32[$211>>2] = $269;
 $274 = $210;
 $209 = $211;
 $275 = $209;
 $276 = HEAP32[$275>>2]|0;
 $197 = $213;
 $277 = $197;
 ;HEAP32[$212+0>>2]=HEAP32[$277+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$277+4>>2]|0;
 ;HEAP8[$208+0>>0]=HEAP8[$212+0>>0]|0;HEAP8[$208+1>>0]=HEAP8[$212+1>>0]|0;HEAP8[$208+2>>0]=HEAP8[$212+2>>0]|0;HEAP8[$208+3>>0]=HEAP8[$212+3>>0]|0;HEAP8[$208+4>>0]=HEAP8[$212+4>>0]|0;HEAP8[$208+5>>0]=HEAP8[$212+5>>0]|0;HEAP8[$208+6>>0]=HEAP8[$212+6>>0]|0;HEAP8[$208+7>>0]=HEAP8[$212+7>>0]|0;
 $205 = $274;
 HEAP32[$206>>2] = $276;
 $278 = $205;
 $204 = $206;
 $279 = $204;
 $280 = HEAP32[$279>>2]|0;
 $198 = $208;
 $281 = $198;
 ;HEAP32[$207+0>>2]=HEAP32[$281+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$281+4>>2]|0;
 ;HEAP8[$203+0>>0]=HEAP8[$207+0>>0]|0;HEAP8[$203+1>>0]=HEAP8[$207+1>>0]|0;HEAP8[$203+2>>0]=HEAP8[$207+2>>0]|0;HEAP8[$203+3>>0]=HEAP8[$207+3>>0]|0;HEAP8[$203+4>>0]=HEAP8[$207+4>>0]|0;HEAP8[$203+5>>0]=HEAP8[$207+5>>0]|0;HEAP8[$203+6>>0]=HEAP8[$207+6>>0]|0;HEAP8[$203+7>>0]=HEAP8[$207+7>>0]|0;
 $201 = $278;
 HEAP32[$202>>2] = $280;
 $282 = $201;
 $200 = $202;
 $283 = $200;
 $284 = HEAP32[$283>>2]|0;
 HEAP32[$282>>2] = $284;
 $285 = (($282) + 4|0);
 $199 = $203;
 $286 = $199;
 ;HEAP32[$285+0>>2]=HEAP32[$286+0>>2]|0;HEAP32[$285+4>>2]=HEAP32[$286+4>>2]|0;
 $287 = $__na;
 $171 = $__h;
 $288 = $171;
 $170 = $288;
 $289 = $170;
 $169 = $289;
 $290 = $169;
 $291 = HEAP32[$290>>2]|0;
 $292 = (($291) + 16|0);
 $143 = $292;
 $293 = $143;
 $294 = $251;
 $115 = $287;
 $116 = $293;
 $117 = $294;
 $295 = $116;
 $296 = ($295|0)==(0|0);
 if (!($296)) {
  $297 = $117;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$295>>2] = $298;
 }
 $2 = $__h;
 $299 = $2;
 $1 = $299;
 $300 = $1;
 $0 = $300;
 $301 = $0;
 $302 = (($301) + 4|0);
 $303 = (($302) + 4|0);
 HEAP8[$303>>0] = 1;
 $83 = $__h;
 $304 = $83;
 $81 = $86;
 $82 = $304;
 $305 = $81;
 $306 = $82;
 HEAP32[$305>>2] = $306;
 ;HEAP8[$80+0>>0]=HEAP8[$86+0>>0]|0;HEAP8[$80+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$86+3>>0]|0;
 $78 = $85;
 $307 = $78;
 $77 = $80;
 $308 = $77;
 $309 = HEAP32[$308>>2]|0;
 $60 = $309;
 $310 = $60;
 $59 = $310;
 $311 = $59;
 $58 = $311;
 $312 = $58;
 $313 = HEAP32[$312>>2]|0;
 $__t$i$i$i = $313;
 $57 = $310;
 $314 = $57;
 $56 = $314;
 $315 = $56;
 HEAP32[$315>>2] = 0;
 $316 = $__t$i$i$i;
 $61 = $80;
 $317 = $61;
 $318 = HEAP32[$317>>2]|0;
 $64 = $318;
 $319 = $64;
 $63 = $319;
 $320 = $63;
 $62 = $320;
 $321 = $62;
 $322 = (($321) + 4|0);
 $65 = $322;
 $323 = $65;
 ;HEAP32[$79+0>>2]=HEAP32[$323+0>>2]|0;HEAP32[$79+4>>2]=HEAP32[$323+4>>2]|0;
 ;HEAP8[$76+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$76+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$76+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$76+3>>0]=HEAP8[$79+3>>0]|0;HEAP8[$76+4>>0]=HEAP8[$79+4>>0]|0;HEAP8[$76+5>>0]=HEAP8[$79+5>>0]|0;HEAP8[$76+6>>0]=HEAP8[$79+6>>0]|0;HEAP8[$76+7>>0]=HEAP8[$79+7>>0]|0;
 $73 = $307;
 HEAP32[$74>>2] = $316;
 $324 = $73;
 $72 = $74;
 $325 = $72;
 $326 = HEAP32[$325>>2]|0;
 $66 = $76;
 $327 = $66;
 ;HEAP32[$75+0>>2]=HEAP32[$327+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$327+4>>2]|0;
 ;HEAP8[$71+0>>0]=HEAP8[$75+0>>0]|0;HEAP8[$71+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$71+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$71+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$71+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$71+7>>0]=HEAP8[$75+7>>0]|0;
 $69 = $324;
 HEAP32[$70>>2] = $326;
 $328 = $69;
 $68 = $70;
 $329 = $68;
 $330 = HEAP32[$329>>2]|0;
 HEAP32[$328>>2] = $330;
 $331 = (($328) + 4|0);
 $67 = $71;
 $332 = $67;
 ;HEAP32[$331+0>>2]=HEAP32[$332+0>>2]|0;HEAP32[$331+4>>2]=HEAP32[$332+4>>2]|0;
 $55 = $85;
 $333 = $55;
 $53 = $84;
 $54 = $333;
 $334 = $53;
 $335 = $54;
 HEAP32[$334>>2] = $335;
 ;HEAP8[$27+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$84+3>>0]|0;
 $25 = $256;
 $336 = $25;
 $24 = $27;
 $337 = $24;
 $338 = HEAP32[$337>>2]|0;
 $7 = $338;
 $339 = $7;
 $6 = $339;
 $340 = $6;
 $5 = $340;
 $341 = $5;
 $342 = HEAP32[$341>>2]|0;
 $__t$i$i9$i = $342;
 $4 = $339;
 $343 = $4;
 $3 = $343;
 $344 = $3;
 HEAP32[$344>>2] = 0;
 $345 = $__t$i$i9$i;
 $8 = $27;
 $346 = $8;
 $347 = HEAP32[$346>>2]|0;
 $11 = $347;
 $348 = $11;
 $10 = $348;
 $349 = $10;
 $9 = $349;
 $350 = $9;
 $351 = (($350) + 4|0);
 $12 = $351;
 $352 = $12;
 ;HEAP32[$26+0>>2]=HEAP32[$352+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$352+4>>2]|0;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $336;
 HEAP32[$21>>2] = $345;
 $353 = $20;
 $19 = $21;
 $354 = $19;
 $355 = HEAP32[$354>>2]|0;
 $13 = $23;
 $356 = $13;
 ;HEAP32[$22+0>>2]=HEAP32[$356+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$356+4>>2]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $353;
 HEAP32[$17>>2] = $355;
 $357 = $16;
 $15 = $17;
 $358 = $15;
 $359 = HEAP32[$358>>2]|0;
 HEAP32[$357>>2] = $359;
 $360 = (($357) + 4|0);
 $14 = $18;
 $361 = $14;
 ;HEAP32[$360+0>>2]=HEAP32[$361+0>>2]|0;HEAP32[$360+4>>2]=HEAP32[$361+4>>2]|0;
 $52 = $85;
 $362 = $52;
 $50 = $362;
 $51 = 0;
 $363 = $50;
 $49 = $363;
 $364 = $49;
 $48 = $364;
 $365 = $48;
 $366 = HEAP32[$365>>2]|0;
 $__tmp$i$i2$i = $366;
 $367 = $51;
 $31 = $363;
 $368 = $31;
 $30 = $368;
 $369 = $30;
 HEAP32[$369>>2] = $367;
 $370 = $__tmp$i$i2$i;
 $371 = ($370|0)!=(0|0);
 if ($371) {
  $29 = $363;
  $372 = $29;
  $28 = $372;
  $373 = $28;
  $374 = (($373) + 4|0);
  $375 = $__tmp$i$i2$i;
  $46 = $374;
  $47 = $375;
  $376 = $46;
  $377 = (($376) + 4|0);
  $378 = HEAP8[$377>>0]|0;
  $379 = $378&1;
  if ($379) {
   $380 = HEAP32[$376>>2]|0;
   $381 = $47;
   $382 = (($381) + 16|0);
   $45 = $382;
   $383 = $45;
   $35 = $380;
   $36 = $383;
   $384 = $35;
   $385 = $36;
   ;HEAP8[$34+0>>0]=HEAP8[$37+0>>0]|0;
   $32 = $384;
   $33 = $385;
  }
  $386 = $47;
  $387 = ($386|0)!=(0|0);
  if ($387) {
   $388 = HEAP32[$376>>2]|0;
   $389 = $47;
   $42 = $388;
   $43 = $389;
   $44 = 1;
   $390 = $42;
   $391 = $43;
   $392 = $44;
   $39 = $390;
   $40 = $391;
   $41 = $392;
   $393 = $40;
   $38 = $393;
   $394 = $38;
   __ZdlPv($394);
  }
 }
 $89 = $256;
 $395 = $89;
 $87 = $255;
 $88 = $395;
 $396 = $87;
 $397 = $88;
 HEAP32[$396>>2] = $397;
 ;HEAP8[$114+0>>0]=HEAP8[$255+0>>0]|0;HEAP8[$114+1>>0]=HEAP8[$255+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$255+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$255+3>>0]|0;
 $112 = $agg$result;
 $398 = $112;
 $111 = $114;
 $399 = $111;
 $400 = HEAP32[$399>>2]|0;
 $94 = $400;
 $401 = $94;
 $93 = $401;
 $402 = $93;
 $92 = $402;
 $403 = $92;
 $404 = HEAP32[$403>>2]|0;
 $__t$i$i = $404;
 $91 = $401;
 $405 = $91;
 $90 = $405;
 $406 = $90;
 HEAP32[$406>>2] = 0;
 $407 = $__t$i$i;
 $95 = $114;
 $408 = $95;
 $409 = HEAP32[$408>>2]|0;
 $98 = $409;
 $410 = $98;
 $97 = $410;
 $411 = $97;
 $96 = $411;
 $412 = $96;
 $413 = (($412) + 4|0);
 $99 = $413;
 $414 = $99;
 ;HEAP32[$113+0>>2]=HEAP32[$414+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$414+4>>2]|0;
 ;HEAP8[$110+0>>0]=HEAP8[$113+0>>0]|0;HEAP8[$110+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$113+3>>0]|0;HEAP8[$110+4>>0]=HEAP8[$113+4>>0]|0;HEAP8[$110+5>>0]=HEAP8[$113+5>>0]|0;HEAP8[$110+6>>0]=HEAP8[$113+6>>0]|0;HEAP8[$110+7>>0]=HEAP8[$113+7>>0]|0;
 $107 = $398;
 HEAP32[$108>>2] = $407;
 $415 = $107;
 $106 = $108;
 $416 = $106;
 $417 = HEAP32[$416>>2]|0;
 $100 = $110;
 $418 = $100;
 ;HEAP32[$109+0>>2]=HEAP32[$418+0>>2]|0;HEAP32[$109+4>>2]=HEAP32[$418+4>>2]|0;
 ;HEAP8[$105+0>>0]=HEAP8[$109+0>>0]|0;HEAP8[$105+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$109+3>>0]|0;HEAP8[$105+4>>0]=HEAP8[$109+4>>0]|0;HEAP8[$105+5>>0]=HEAP8[$109+5>>0]|0;HEAP8[$105+6>>0]=HEAP8[$109+6>>0]|0;HEAP8[$105+7>>0]=HEAP8[$109+7>>0]|0;
 $103 = $415;
 HEAP32[$104>>2] = $417;
 $419 = $103;
 $102 = $104;
 $420 = $102;
 $421 = HEAP32[$420>>2]|0;
 HEAP32[$419>>2] = $421;
 $422 = (($419) + 4|0);
 $101 = $105;
 $423 = $101;
 ;HEAP32[$422+0>>2]=HEAP32[$423+0>>2]|0;HEAP32[$422+4>>2]=HEAP32[$423+4>>2]|0;
 $142 = $256;
 $424 = $142;
 $140 = $424;
 $141 = 0;
 $425 = $140;
 $139 = $425;
 $426 = $139;
 $138 = $426;
 $427 = $138;
 $428 = HEAP32[$427>>2]|0;
 $__tmp$i$i12 = $428;
 $429 = $141;
 $121 = $425;
 $430 = $121;
 $120 = $430;
 $431 = $120;
 HEAP32[$431>>2] = $429;
 $432 = $__tmp$i$i12;
 $433 = ($432|0)!=(0|0);
 if ($433) {
  $119 = $425;
  $434 = $119;
  $118 = $434;
  $435 = $118;
  $436 = (($435) + 4|0);
  $437 = $__tmp$i$i12;
  $136 = $436;
  $137 = $437;
  $438 = $136;
  $439 = (($438) + 4|0);
  $440 = HEAP8[$439>>0]|0;
  $441 = $440&1;
  if ($441) {
   $442 = HEAP32[$438>>2]|0;
   $443 = $137;
   $444 = (($443) + 16|0);
   $135 = $444;
   $445 = $135;
   $125 = $442;
   $126 = $445;
   $446 = $125;
   $447 = $126;
   ;HEAP8[$124+0>>0]=HEAP8[$127+0>>0]|0;
   $122 = $446;
   $123 = $447;
  }
  $448 = $137;
  $449 = ($448|0)!=(0|0);
  if ($449) {
   $450 = HEAP32[$438>>2]|0;
   $451 = $137;
   $132 = $450;
   $133 = $451;
   $134 = 1;
   $452 = $132;
   $453 = $133;
   $454 = $134;
   $129 = $452;
   $130 = $453;
   $131 = $454;
   $455 = $130;
   $128 = $455;
   $456 = $128;
   __ZdlPv($456);
  }
 }
 $257 = 1;
 $168 = $__h;
 $457 = $168;
 $166 = $457;
 $167 = 0;
 $458 = $166;
 $165 = $458;
 $459 = $165;
 $164 = $459;
 $460 = $164;
 $461 = HEAP32[$460>>2]|0;
 $__tmp$i$i7 = $461;
 $462 = $167;
 $147 = $458;
 $463 = $147;
 $146 = $463;
 $464 = $146;
 HEAP32[$464>>2] = $462;
 $465 = $__tmp$i$i7;
 $466 = ($465|0)!=(0|0);
 if (!($466)) {
  STACKTOP = sp;return;
 }
 $145 = $458;
 $467 = $145;
 $144 = $467;
 $468 = $144;
 $469 = (($468) + 4|0);
 $470 = $__tmp$i$i7;
 $162 = $469;
 $163 = $470;
 $471 = $162;
 $472 = (($471) + 4|0);
 $473 = HEAP8[$472>>0]|0;
 $474 = $473&1;
 if ($474) {
  $475 = HEAP32[$471>>2]|0;
  $476 = $163;
  $477 = (($476) + 16|0);
  $161 = $477;
  $478 = $161;
  $151 = $475;
  $152 = $478;
  $479 = $151;
  $480 = $152;
  ;HEAP8[$150+0>>0]=HEAP8[$153+0>>0]|0;
  $148 = $479;
  $149 = $480;
 }
 $481 = $163;
 $482 = ($481|0)!=(0|0);
 if ($482) {
  $483 = HEAP32[$471>>2]|0;
  $484 = $163;
  $158 = $483;
  $159 = $484;
  $160 = 1;
  $485 = $158;
  $486 = $159;
  $487 = $160;
  $155 = $485;
  $156 = $486;
  $157 = $487;
  $488 = $156;
  $154 = $488;
  $489 = $154;
  __ZdlPv($489);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 44|0;
 $7 = sp + 24|0;
 $22 = sp + 12|0;
 $27 = sp + 40|0;
 $28 = sp + 92|0;
 $29 = sp + 48|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($26,$35);
 $2 = $26;
 $36 = $2;
 $37 = (($36) + 4|0);
 $1 = $37;
 $38 = $1;
 $0 = $38;
 $39 = $0;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $3 = $42;
 $43 = $3;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $__na;
 $47 = $22;
 $14 = $46;
 $15 = $47;
 $16 = 1;
 $48 = $14;
 $49 = $15;
 $50 = $16;
 $11 = $48;
 $12 = $49;
 $13 = $50;
 $51 = $12;
 $10 = $51;
 $52 = $10;
 __ZdlPv($52);
 STACKTOP = sp;return;
}
function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collide = 0, $filterA = 0, $filterB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $fixtureA;
 $3 = $fixtureB;
 $4 = $2;
 $5 = (__ZNK9b2Fixture13GetFilterDataEv($4)|0);
 $filterA = $5;
 $6 = $3;
 $7 = (__ZNK9b2Fixture13GetFilterDataEv($6)|0);
 $filterB = $7;
 $8 = $filterA;
 $9 = (($8) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = $filterB;
 $13 = (($12) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($11|0)==($15|0);
 if ($16) {
  $17 = $filterA;
  $18 = (($17) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $filterA;
   $23 = (($22) + 4|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = ($25|0)>(0);
   $$expand_i1_val = $26&1;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $49 = $$pre_trunc&1;
   STACKTOP = sp;return ($49|0);
  }
 }
 $27 = $filterA;
 $28 = (($27) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $filterB;
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $30 & $33;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $filterA;
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = $filterB;
  $40 = (($39) + 2|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $38 & $42;
  $44 = ($43|0)!=(0);
  $46 = $44;
 } else {
  $46 = 0;
 }
 $45 = $46&1;
 $collide = $45;
 $47 = $collide;
 $48 = $47&1;
 $$expand_i1_val2 = $48&1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function __ZN15b2ContactFilterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(48,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNK9b2Fixture13GetFilterDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = (__ZN16b2BlockAllocator8AllocateEi($5,144)|0);
 $mem = $6;
 $7 = $mem;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($7,$9,$10,$11,$12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this,$fixtureA,$indexA,$fixtureB,$indexB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 $12 = (24424 + 8|0);
 HEAP32[$7>>2] = $12;
 $13 = (($7) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_ii(550,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(3);
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiii(468,(24448|0),(24496|0),43,(24600|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
    // unreachable;
   }
   $25 = (($7) + 52|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $27 = (invoke_ii(550,($26|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $30 = ($27|0)==(0);
    if ($30) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(24624|0),(24496|0),44,(24600|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $5 = $21;
 $6 = $22;
 __THREW__ = 0;
 invoke_vi(60,($7|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 }
 $33 = $5;
 $34 = $6;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edge = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN9b2Fixture8GetShapeEv($8)|0);
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = (($6) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viii(551,($10|0),($edge|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $1;
  $16 = $2;
  $17 = (($6) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_ii(528,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(552,($15|0),($edge|0),($16|0),($19|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __THREW__ = 0;
 invoke_vi(4,($edge|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $4;
 $30 = $5;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN23b2ChainAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN23b2ChainAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(52,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN9b2ContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = (__ZN16b2BlockAllocator8AllocateEi($5,144)|0);
 $mem = $6;
 $7 = $mem;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($7,$9,$10,$11,$12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this,$fixtureA,$indexA,$fixtureB,$indexB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7,$8,$9,$10,$11);
 $12 = (24744 + 8|0);
 HEAP32[$7>>2] = $12;
 $13 = (($7) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_ii(550,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(3);
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiii(468,(24768|0),(24816|0),43,(24920|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
    // unreachable;
   }
   $25 = (($7) + 52|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $27 = (invoke_ii(550,($26|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $30 = ($27|0)==(2);
    if ($30) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(24952|0),(24816|0),44,(24920|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $5 = $21;
 $6 = $22;
 __THREW__ = 0;
 invoke_vi(60,($7|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 }
 $33 = $5;
 $34 = $6;
 ___resumeException($33|0);
 // unreachable;
}
function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $edge = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN9b2Fixture8GetShapeEv($8)|0);
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = (($6) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viii(551,($10|0),($edge|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $1;
  $16 = $2;
  $17 = (($6) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_ii(528,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(553,($15|0),($edge|0),($16|0),($19|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __THREW__ = 0;
 invoke_vi(4,($edge|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $4;
 $30 = $5;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN24b2ChainAndPolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN24b2ChainAndPolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(55,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $2;
 $12 = $4;
 __ZN15b2CircleContactC2EP9b2FixtureS1_($9,$11,$12);
 $13 = $9;
 STACKTOP = sp;return ($13|0);
}
function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = (25048 + 8|0);
 HEAP32[$5>>2] = $8;
 $9 = (($5) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(550,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(0);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(468,(25072|0),(25120|0),44,(25216|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    // unreachable;
   }
   $21 = (($5) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_ii(550,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ($23|0)==(0);
    if ($26) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(25232|0),(25120|0),45,(25216|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $3 = $17;
 $4 = $18;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = (($4) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN15b2CircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(58,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN9b2Contact19InitializeRegistersEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(554,555,0,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(556,557,2,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(558,559,2,2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(560,561,1,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(562,563,1,2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(564,565,3,0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(566,567,3,2);
 STACKTOP = sp;return;
}
function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn,$destoryFcn,$type1,$type2) {
 $createFcn = $createFcn|0;
 $destoryFcn = $destoryFcn|0;
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $createFcn;
 $1 = $destoryFcn;
 $2 = $type1;
 $3 = $type2;
 $4 = $2;
 $5 = (0)<=($4|0);
 if (!($5)) {
  ___assert_fail((25520|0),(25568|0),54,(25656|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)<(4);
 if (!($7)) {
  ___assert_fail((25520|0),(25568|0),54,(25656|0));
  // unreachable;
 }
 $8 = $3;
 $9 = (0)<=($8|0);
 if (!($9)) {
  ___assert_fail((25664|0),(25568|0),55,(25656|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ($10|0)<(4);
 if (!($11)) {
  ___assert_fail((25664|0),(25568|0),55,(25656|0));
  // unreachable;
 }
 $12 = $0;
 $13 = $3;
 $14 = $2;
 $15 = (25320 + (($14*48)|0)|0);
 $16 = (($15) + (($13*12)|0)|0);
 HEAP32[$16>>2] = $12;
 $17 = $1;
 $18 = $3;
 $19 = $2;
 $20 = (25320 + (($19*48)|0)|0);
 $21 = (($20) + (($18*12)|0)|0);
 $22 = (($21) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = $3;
 $24 = $2;
 $25 = (25320 + (($24*48)|0)|0);
 $26 = (($25) + (($23*12)|0)|0);
 $27 = (($26) + 8|0);
 HEAP8[$27>>0] = 1;
 $28 = $2;
 $29 = $3;
 $30 = ($28|0)!=($29|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $0;
 $32 = $2;
 $33 = $3;
 $34 = (25320 + (($33*48)|0)|0);
 $35 = (($34) + (($32*12)|0)|0);
 HEAP32[$35>>2] = $31;
 $36 = $1;
 $37 = $2;
 $38 = $3;
 $39 = (25320 + (($38*48)|0)|0);
 $40 = (($39) + (($37*12)|0)|0);
 $41 = (($40) + 4|0);
 HEAP32[$41>>2] = $36;
 $42 = $2;
 $43 = $3;
 $44 = (25320 + (($43*48)|0)|0);
 $45 = (($44) + (($42*12)|0)|0);
 $46 = (($45) + 8|0);
 HEAP8[$46>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$indexA,$fixtureB,$indexB,$allocator) {
 $fixtureA = $fixtureA|0;
 $indexA = $indexA|0;
 $fixtureB = $fixtureB|0;
 $indexB = $indexB|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $createFcn = 0, $type1 = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $5 = $allocator;
 $6 = HEAP8[25512>>0]|0;
 $7 = $6&1;
 $8 = $7&1;
 $9 = ($8|0)==(0);
 if ($9) {
  __ZN9b2Contact19InitializeRegistersEv();
  HEAP8[25512>>0] = 1;
 }
 $10 = $1;
 $11 = (__ZNK9b2Fixture7GetTypeEv($10)|0);
 $type1 = $11;
 $12 = $3;
 $13 = (__ZNK9b2Fixture7GetTypeEv($12)|0);
 $type2 = $13;
 $14 = $type1;
 $15 = (0)<=($14|0);
 if (!($15)) {
  ___assert_fail((25520|0),(25568|0),80,(25712|0));
  // unreachable;
 }
 $16 = $type1;
 $17 = ($16|0)<(4);
 if (!($17)) {
  ___assert_fail((25520|0),(25568|0),80,(25712|0));
  // unreachable;
 }
 $18 = $type2;
 $19 = (0)<=($18|0);
 if (!($19)) {
  ___assert_fail((25664|0),(25568|0),81,(25712|0));
  // unreachable;
 }
 $20 = $type2;
 $21 = ($20|0)<(4);
 if (!($21)) {
  ___assert_fail((25664|0),(25568|0),81,(25712|0));
  // unreachable;
 }
 $22 = $type2;
 $23 = $type1;
 $24 = (25320 + (($23*48)|0)|0);
 $25 = (($24) + (($22*12)|0)|0);
 $26 = HEAP32[$25>>2]|0;
 $createFcn = $26;
 $27 = $createFcn;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $29 = $type2;
 $30 = $type1;
 $31 = (25320 + (($30*48)|0)|0);
 $32 = (($31) + (($29*12)|0)|0);
 $33 = (($32) + 8|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 if ($35) {
  $36 = $createFcn;
  $37 = $1;
  $38 = $2;
  $39 = $3;
  $40 = $4;
  $41 = $5;
  $42 = (FUNCTION_TABLE_iiiiii[$36 & 1023]($37,$38,$39,$40,$41)|0);
  $0 = $42;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 } else {
  $43 = $createFcn;
  $44 = $3;
  $45 = $4;
  $46 = $1;
  $47 = $2;
  $48 = $5;
  $49 = (FUNCTION_TABLE_iiiiii[$43 & 1023]($44,$45,$46,$47,$48)|0);
  $0 = $49;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return 0|0;
}
function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $destroyFcn = 0, $typeA = 0, $typeB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = HEAP8[25512>>0]|0;
 $3 = $2&1;
 $4 = $3&1;
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___assert_fail((25720|0),(25568|0),103,(25744|0));
  // unreachable;
 }
 $6 = $0;
 $7 = (($6) + 64|0);
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = $0;
  $12 = (__ZN9b2Contact11GetFixtureAEv($11)|0);
  $13 = (__ZN9b2Fixture7GetBodyEv($12)|0);
  __ZN6b2Body8SetAwakeEb($13,1);
  $14 = $0;
  $15 = (__ZN9b2Contact11GetFixtureBEv($14)|0);
  $16 = (__ZN9b2Fixture7GetBodyEv($15)|0);
  __ZN6b2Body8SetAwakeEb($16,1);
 }
 $17 = $0;
 $18 = (__ZN9b2Contact11GetFixtureAEv($17)|0);
 $19 = (__ZNK9b2Fixture7GetTypeEv($18)|0);
 $typeA = $19;
 $20 = $0;
 $21 = (__ZN9b2Contact11GetFixtureBEv($20)|0);
 $22 = (__ZNK9b2Fixture7GetTypeEv($21)|0);
 $typeB = $22;
 $23 = $typeA;
 $24 = (0)<=($23|0);
 if (!($24)) {
  ___assert_fail((25752|0),(25568|0),114,(25744|0));
  // unreachable;
 }
 $25 = $typeB;
 $26 = ($25|0)<(4);
 if (!($26)) {
  ___assert_fail((25752|0),(25568|0),114,(25744|0));
  // unreachable;
 }
 $27 = $typeA;
 $28 = (0)<=($27|0);
 if (!($28)) {
  ___assert_fail((25752|0),(25568|0),115,(25744|0));
  // unreachable;
 }
 $29 = $typeB;
 $30 = ($29|0)<(4);
 if ($30) {
  $31 = $typeB;
  $32 = $typeA;
  $33 = (25320 + (($32*48)|0)|0);
  $34 = (($33) + (($31*12)|0)|0);
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $destroyFcn = $36;
  $37 = $destroyFcn;
  $38 = $0;
  $39 = $1;
  FUNCTION_TABLE_vii[$37 & 1023]($38,$39);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((25752|0),(25568|0),115,(25744|0));
  // unreachable;
 }
}
function __ZN9b2ContactC2EP9b2FixtureiS1_i($this,$fA,$indexA,$fB,$indexB) {
 $this = $this|0;
 $fA = $fA|0;
 $indexA = $indexA|0;
 $fB = $fB|0;
 $indexB = $indexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fA;
 $2 = $indexA;
 $3 = $fB;
 $4 = $indexB;
 $5 = $0;
 $6 = (25800 + 8|0);
 HEAP32[$5>>2] = $6;
 $7 = (($5) + 64|0);
 __ZN10b2ManifoldC2Ev($7);
 $8 = (($5) + 4|0);
 HEAP32[$8>>2] = 4;
 $9 = $1;
 $10 = (($5) + 48|0);
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = (($5) + 52|0);
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (($5) + 56|0);
 HEAP32[$14>>2] = $13;
 $15 = $4;
 $16 = (($5) + 60|0);
 HEAP32[$16>>2] = $15;
 $17 = (($5) + 64|0);
 $18 = (($17) + 60|0);
 HEAP32[$18>>2] = 0;
 $19 = (($5) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = (($5) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = (($5) + 16|0);
 $22 = (($21) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = (($5) + 16|0);
 $24 = (($23) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = (($5) + 16|0);
 $26 = (($25) + 12|0);
 HEAP32[$26>>2] = 0;
 $27 = (($5) + 16|0);
 HEAP32[$27>>2] = 0;
 $28 = (($5) + 32|0);
 $29 = (($28) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = (($5) + 32|0);
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = 0;
 $32 = (($5) + 32|0);
 $33 = (($32) + 12|0);
 HEAP32[$33>>2] = 0;
 $34 = (($5) + 32|0);
 HEAP32[$34>>2] = 0;
 $35 = (($5) + 128|0);
 HEAP32[$35>>2] = 0;
 $36 = (($5) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 24|0);
 $39 = +HEAPF32[$38>>2];
 $40 = (($5) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 24|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (+__Z13b2MixFrictionff($39,$43));
 $45 = (($5) + 136|0);
 HEAPF32[$45>>2] = $44;
 $46 = (($5) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 28|0);
 $49 = +HEAPF32[$48>>2];
 $50 = (($5) + 52|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 28|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (+__Z16b2MixRestitutionff($49,$53));
 $55 = (($5) + 140|0);
 HEAPF32[$55>>2] = $54;
 STACKTOP = sp;return;
}
function __ZN9b2Contact6UpdateEP17b2ContactListener($this,$listener) {
 $this = $this|0;
 $listener = $listener|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0.0, $99 = 0, $bodyA = 0, $bodyB = 0, $i = 0, $id2 = 0, $j = 0, $mp1 = 0, $mp2 = 0, $oldManifold = 0, $sensor = 0, $sensorA = 0, $sensorB = 0, $shapeA = 0, $shapeB = 0, $touching = 0, $wasTouching = 0, $xfA = 0, $xfB = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $oldManifold = sp + 8|0;
 $id2 = sp + 104|0;
 $0 = $this;
 $1 = $listener;
 $2 = $0;
 $3 = (($2) + 64|0);
 dest=$oldManifold+0|0; src=$3+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = (($2) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 4;
 HEAP32[$4>>2] = $6;
 $touching = 0;
 $7 = (($2) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)==(2);
 $11 = $10&1;
 $wasTouching = $11;
 $12 = (($2) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZNK9b2Fixture8IsSensorEv($13)|0);
 $15 = $14&1;
 $sensorA = $15;
 $16 = (($2) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZNK9b2Fixture8IsSensorEv($17)|0);
 $19 = $18&1;
 $sensorB = $19;
 $20 = $sensorA;
 $21 = $20&1;
 if ($21) {
  $25 = 1;
 } else {
  $22 = $sensorB;
  $23 = $22&1;
  $25 = $23;
 }
 $24 = $25&1;
 $sensor = $24;
 $26 = (($2) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZN9b2Fixture7GetBodyEv($27)|0);
 $bodyA = $28;
 $29 = (($2) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (__ZN9b2Fixture7GetBodyEv($30)|0);
 $bodyB = $31;
 $32 = $bodyA;
 $33 = (__ZNK6b2Body12GetTransformEv($32)|0);
 $xfA = $33;
 $34 = $bodyB;
 $35 = (__ZNK6b2Body12GetTransformEv($34)|0);
 $xfB = $35;
 $36 = $sensor;
 $37 = $36&1;
 if ($37) {
  $38 = (($2) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZN9b2Fixture8GetShapeEv($39)|0);
  $shapeA = $40;
  $41 = (($2) + 52|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN9b2Fixture8GetShapeEv($42)|0);
  $shapeB = $43;
  $44 = $shapeA;
  $45 = (($2) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $shapeB;
  $48 = (($2) + 60|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $xfA;
  $51 = $xfB;
  $52 = (__Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($44,$46,$47,$49,$50,$51)|0);
  $53 = $52&1;
  $touching = $53;
  $54 = (($2) + 64|0);
  $55 = (($54) + 60|0);
  HEAP32[$55>>2] = 0;
 } else {
  $56 = HEAP32[$2>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($2) + 64|0);
  $59 = $xfA;
  $60 = $xfB;
  FUNCTION_TABLE_viiii[$57 & 1023]($2,$58,$59,$60);
  $61 = (($2) + 64|0);
  $62 = (($61) + 60|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)>(0);
  $65 = $64&1;
  $touching = $65;
  $i = 0;
  while(1) {
   $66 = $i;
   $67 = (($2) + 64|0);
   $68 = (($67) + 60|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($66|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = (($2) + 64|0);
   $72 = $i;
   $73 = (($71) + (($72*20)|0)|0);
   $mp2 = $73;
   $74 = $mp2;
   $75 = (($74) + 8|0);
   HEAPF32[$75>>2] = 0.0;
   $76 = $mp2;
   $77 = (($76) + 12|0);
   HEAPF32[$77>>2] = 0.0;
   $78 = $mp2;
   $79 = (($78) + 16|0);
   ;HEAP32[$id2+0>>2]=HEAP32[$79+0>>2]|0;
   $j = 0;
   while(1) {
    $80 = $j;
    $81 = (($oldManifold) + 60|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)<($82|0);
    if (!($83)) {
     break;
    }
    $84 = $j;
    $85 = (($oldManifold) + (($84*20)|0)|0);
    $mp1 = $85;
    $86 = $mp1;
    $87 = (($86) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP32[$id2>>2]|0;
    $90 = ($88|0)==($89|0);
    if ($90) {
     label = 10;
     break;
    }
    $101 = $j;
    $102 = (($101) + 1)|0;
    $j = $102;
   }
   if ((label|0) == 10) {
    label = 0;
    $91 = $mp1;
    $92 = (($91) + 8|0);
    $93 = +HEAPF32[$92>>2];
    $94 = $mp2;
    $95 = (($94) + 8|0);
    HEAPF32[$95>>2] = $93;
    $96 = $mp1;
    $97 = (($96) + 12|0);
    $98 = +HEAPF32[$97>>2];
    $99 = $mp2;
    $100 = (($99) + 12|0);
    HEAPF32[$100>>2] = $98;
   }
   $103 = $i;
   $104 = (($103) + 1)|0;
   $i = $104;
  }
  $105 = $touching;
  $106 = $105&1;
  $107 = $106&1;
  $108 = $wasTouching;
  $109 = $108&1;
  $110 = $109&1;
  $111 = ($107|0)!=($110|0);
  if ($111) {
   $112 = $bodyA;
   __ZN6b2Body8SetAwakeEb($112,1);
   $113 = $bodyB;
   __ZN6b2Body8SetAwakeEb($113,1);
  }
 }
 $114 = $touching;
 $115 = $114&1;
 if ($115) {
  $116 = (($2) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 | 2;
  HEAP32[$116>>2] = $118;
 } else {
  $119 = (($2) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 & -3;
  HEAP32[$119>>2] = $121;
 }
 $122 = $wasTouching;
 $123 = $122&1;
 $124 = $123&1;
 $125 = ($124|0)==(0);
 if ($125) {
  $126 = $touching;
  $127 = $126&1;
  $128 = $127&1;
  $129 = ($128|0)==(1);
  if ($129) {
   $130 = $1;
   $131 = ($130|0)!=(0|0);
   if ($131) {
    $132 = $1;
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    FUNCTION_TABLE_vii[$135 & 1023]($132,$2);
   }
  }
 }
 $136 = $wasTouching;
 $137 = $136&1;
 $138 = $137&1;
 $139 = ($138|0)==(1);
 if ($139) {
  $140 = $touching;
  $141 = $140&1;
  $142 = $141&1;
  $143 = ($142|0)==(0);
  if ($143) {
   $144 = $1;
   $145 = ($144|0)!=(0|0);
   if ($145) {
    $146 = $1;
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 1023]($146,$2);
   }
  }
 }
 $150 = $sensor;
 $151 = $150&1;
 $152 = $151&1;
 $153 = ($152|0)==(0);
 if (!($153)) {
  STACKTOP = sp;return;
 }
 $154 = $touching;
 $155 = $154&1;
 if (!($155)) {
  STACKTOP = sp;return;
 }
 $156 = $1;
 $157 = ($156|0)!=(0|0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = $1;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($159) + 16|0);
 $161 = HEAP32[$160>>2]|0;
 FUNCTION_TABLE_viii[$161 & 1023]($158,$2,$oldManifold);
 STACKTOP = sp;return;
}
function __ZN9b2ContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(60,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __Z13b2MixFrictionff($friction1,$friction2) {
 $friction1 = +$friction1;
 $friction2 = +$friction2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $friction1;
 $2 = $friction2;
 $3 = $1;
 $4 = $2;
 $5 = $3 * $4;
 $0 = $5;
 $6 = $0;
 $7 = (+Math_sqrt((+$6)));
 STACKTOP = sp;return (+$7);
}
function __Z16b2MixRestitutionff($restitution1,$restitution2) {
 $restitution1 = +$restitution1;
 $restitution2 = +$restitution2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $restitution1;
 $1 = $restitution2;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 if ($4) {
  $5 = $0;
  $7 = $5;
 } else {
  $6 = $1;
  $7 = $6;
 }
 STACKTOP = sp;return (+$7);
}
function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this,$def) {
 $this = $this|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bodyA = 0, $bodyB = 0, $contact = 0, $cp = 0, $fixtureA = 0, $fixtureB = 0, $i = 0, $j = 0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0, $radiusB = 0.0, $shapeA = 0, $shapeB = 0, $vc = 0, $vcp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $def;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$2+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$3+20>>2]|0;
 $4 = $1;
 $5 = (($4) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($2) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 48|0);
 HEAP32[$11>>2] = $10;
 $12 = (($2) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($2) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*88)|0;
 $17 = (__ZN16b2StackAllocator8AllocateEi($13,$16)|0);
 $18 = (($2) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = (($2) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($2) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22*152)|0;
 $24 = (__ZN16b2StackAllocator8AllocateEi($20,$23)|0);
 $25 = (($2) + 40|0);
 HEAP32[$25>>2] = $24;
 $26 = $1;
 $27 = (($26) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($2) + 24|0);
 HEAP32[$29>>2] = $28;
 $30 = $1;
 $31 = (($30) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($2) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = $1;
 $35 = (($34) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($2) + 44|0);
 HEAP32[$37>>2] = $36;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = (($2) + 48|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   label = 14;
   break;
  }
  $42 = $i;
  $43 = (($2) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $contact = $46;
  $47 = $contact;
  $48 = (($47) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $fixtureA = $49;
  $50 = $contact;
  $51 = (($50) + 52|0);
  $52 = HEAP32[$51>>2]|0;
  $fixtureB = $52;
  $53 = $fixtureA;
  $54 = (__ZN9b2Fixture8GetShapeEv($53)|0);
  $shapeA = $54;
  $55 = $fixtureB;
  $56 = (__ZN9b2Fixture8GetShapeEv($55)|0);
  $shapeB = $56;
  $57 = $shapeA;
  $58 = (($57) + 8|0);
  $59 = +HEAPF32[$58>>2];
  $radiusA = $59;
  $60 = $shapeB;
  $61 = (($60) + 8|0);
  $62 = +HEAPF32[$61>>2];
  $radiusB = $62;
  $63 = $fixtureA;
  $64 = (__ZN9b2Fixture7GetBodyEv($63)|0);
  $bodyA = $64;
  $65 = $fixtureB;
  $66 = (__ZN9b2Fixture7GetBodyEv($65)|0);
  $bodyB = $66;
  $67 = $contact;
  $68 = (__ZN9b2Contact11GetManifoldEv($67)|0);
  $manifold = $68;
  $69 = $manifold;
  $70 = (($69) + 60|0);
  $71 = HEAP32[$70>>2]|0;
  $pointCount = $71;
  $72 = $pointCount;
  $73 = ($72|0)>(0);
  if (!($73)) {
   label = 4;
   break;
  }
  $74 = (($2) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $i;
  $77 = (($75) + (($76*152)|0)|0);
  $vc = $77;
  $78 = $contact;
  $79 = (($78) + 136|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $vc;
  $82 = (($81) + 136|0);
  HEAPF32[$82>>2] = $80;
  $83 = $contact;
  $84 = (($83) + 140|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $vc;
  $87 = (($86) + 140|0);
  HEAPF32[$87>>2] = $85;
  $88 = $bodyA;
  $89 = (($88) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $vc;
  $92 = (($91) + 112|0);
  HEAP32[$92>>2] = $90;
  $93 = $bodyB;
  $94 = (($93) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $vc;
  $97 = (($96) + 116|0);
  HEAP32[$97>>2] = $95;
  $98 = $bodyA;
  $99 = (($98) + 128|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $vc;
  $102 = (($101) + 120|0);
  HEAPF32[$102>>2] = $100;
  $103 = $bodyB;
  $104 = (($103) + 128|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $vc;
  $107 = (($106) + 124|0);
  HEAPF32[$107>>2] = $105;
  $108 = $bodyA;
  $109 = (($108) + 136|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $vc;
  $112 = (($111) + 128|0);
  HEAPF32[$112>>2] = $110;
  $113 = $bodyB;
  $114 = (($113) + 136|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $vc;
  $117 = (($116) + 132|0);
  HEAPF32[$117>>2] = $115;
  $118 = $i;
  $119 = $vc;
  $120 = (($119) + 148|0);
  HEAP32[$120>>2] = $118;
  $121 = $pointCount;
  $122 = $vc;
  $123 = (($122) + 144|0);
  HEAP32[$123>>2] = $121;
  $124 = $vc;
  $125 = (($124) + 96|0);
  __ZN7b2Mat227SetZeroEv($125);
  $126 = $vc;
  $127 = (($126) + 80|0);
  __ZN7b2Mat227SetZeroEv($127);
  $128 = (($2) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $i;
  $131 = (($129) + (($130*88)|0)|0);
  $pc = $131;
  $132 = $bodyA;
  $133 = (($132) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $pc;
  $136 = (($135) + 32|0);
  HEAP32[$136>>2] = $134;
  $137 = $bodyB;
  $138 = (($137) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $pc;
  $141 = (($140) + 36|0);
  HEAP32[$141>>2] = $139;
  $142 = $bodyA;
  $143 = (($142) + 128|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $pc;
  $146 = (($145) + 40|0);
  HEAPF32[$146>>2] = $144;
  $147 = $bodyB;
  $148 = (($147) + 128|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $pc;
  $151 = (($150) + 44|0);
  HEAPF32[$151>>2] = $149;
  $152 = $pc;
  $153 = (($152) + 48|0);
  $154 = $bodyA;
  $155 = (($154) + 28|0);
  ;HEAP32[$153+0>>2]=HEAP32[$155+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$155+4>>2]|0;
  $156 = $pc;
  $157 = (($156) + 56|0);
  $158 = $bodyB;
  $159 = (($158) + 28|0);
  ;HEAP32[$157+0>>2]=HEAP32[$159+0>>2]|0;HEAP32[$157+4>>2]=HEAP32[$159+4>>2]|0;
  $160 = $bodyA;
  $161 = (($160) + 136|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $pc;
  $164 = (($163) + 64|0);
  HEAPF32[$164>>2] = $162;
  $165 = $bodyB;
  $166 = (($165) + 136|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $pc;
  $169 = (($168) + 68|0);
  HEAPF32[$169>>2] = $167;
  $170 = $pc;
  $171 = (($170) + 16|0);
  $172 = $manifold;
  $173 = (($172) + 40|0);
  ;HEAP32[$171+0>>2]=HEAP32[$173+0>>2]|0;HEAP32[$171+4>>2]=HEAP32[$173+4>>2]|0;
  $174 = $pc;
  $175 = (($174) + 24|0);
  $176 = $manifold;
  $177 = (($176) + 48|0);
  ;HEAP32[$175+0>>2]=HEAP32[$177+0>>2]|0;HEAP32[$175+4>>2]=HEAP32[$177+4>>2]|0;
  $178 = $pointCount;
  $179 = $pc;
  $180 = (($179) + 84|0);
  HEAP32[$180>>2] = $178;
  $181 = $radiusA;
  $182 = $pc;
  $183 = (($182) + 76|0);
  HEAPF32[$183>>2] = $181;
  $184 = $radiusB;
  $185 = $pc;
  $186 = (($185) + 80|0);
  HEAPF32[$186>>2] = $184;
  $187 = $manifold;
  $188 = (($187) + 56|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $pc;
  $191 = (($190) + 72|0);
  HEAP32[$191>>2] = $189;
  $j = 0;
  while(1) {
   $192 = $j;
   $193 = $pointCount;
   $194 = ($192|0)<($193|0);
   if (!($194)) {
    break;
   }
   $195 = $manifold;
   $196 = $j;
   $197 = (($195) + (($196*20)|0)|0);
   $cp = $197;
   $198 = $vc;
   $199 = $j;
   $200 = (($198) + (($199*36)|0)|0);
   $vcp = $200;
   $201 = (($2) + 20|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&1;
   if ($203) {
    $204 = (($2) + 8|0);
    $205 = +HEAPF32[$204>>2];
    $206 = $cp;
    $207 = (($206) + 8|0);
    $208 = +HEAPF32[$207>>2];
    $209 = $205 * $208;
    $210 = $vcp;
    $211 = (($210) + 16|0);
    HEAPF32[$211>>2] = $209;
    $212 = (($2) + 8|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $cp;
    $215 = (($214) + 12|0);
    $216 = +HEAPF32[$215>>2];
    $217 = $213 * $216;
    $218 = $vcp;
    $219 = (($218) + 20|0);
    HEAPF32[$219>>2] = $217;
   } else {
    $220 = $vcp;
    $221 = (($220) + 16|0);
    HEAPF32[$221>>2] = 0.0;
    $222 = $vcp;
    $223 = (($222) + 20|0);
    HEAPF32[$223>>2] = 0.0;
   }
   $224 = $vcp;
   __ZN6b2Vec27SetZeroEv($224);
   $225 = $vcp;
   $226 = (($225) + 8|0);
   __ZN6b2Vec27SetZeroEv($226);
   $227 = $vcp;
   $228 = (($227) + 24|0);
   HEAPF32[$228>>2] = 0.0;
   $229 = $vcp;
   $230 = (($229) + 28|0);
   HEAPF32[$230>>2] = 0.0;
   $231 = $vcp;
   $232 = (($231) + 32|0);
   HEAPF32[$232>>2] = 0.0;
   $233 = $j;
   $234 = $pc;
   $235 = (($234) + ($233<<3)|0);
   $236 = $cp;
   ;HEAP32[$235+0>>2]=HEAP32[$236+0>>2]|0;HEAP32[$235+4>>2]=HEAP32[$236+4>>2]|0;
   $237 = $j;
   $238 = (($237) + 1)|0;
   $j = $238;
  }
  $239 = $i;
  $240 = (($239) + 1)|0;
  $i = $240;
 }
 if ((label|0) == 4) {
  ___assert_fail((25824|0),(25840|0),71,(25936|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2ContactSolverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($3,$5);
 $6 = (($1) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN16b2StackAllocator4FreeEPv($7,$9);
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0;
 var $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $k11 = 0.0, $k12 = 0.0, $k22 = 0.0, $kNormal = 0.0, $kTangent = 0.0, $k_maxConditionNumber = 0.0, $localCenterA = 0, $localCenterB = 0, $mA = 0.0, $mB = 0.0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0;
 var $radiusB = 0.0, $rn1A = 0.0, $rn1B = 0.0, $rn2A = 0.0, $rn2B = 0.0, $rnA = 0.0, $rnB = 0.0, $rtA = 0.0, $rtB = 0.0, $tangent = 0, $vA = 0, $vB = 0, $vRel = 0.0, $vc = 0, $vcp = 0, $vcp1 = 0, $vcp2 = 0, $wA = 0.0, $wB = 0.0, $worldManifold = 0;
 var $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 48|0;
 $localCenterB = sp + 56|0;
 $cA = sp + 64|0;
 $vA = sp + 80|0;
 $cB = sp + 96|0;
 $vB = sp + 112|0;
 $xfA = sp + 128|0;
 $xfB = sp + 144|0;
 $1 = sp + 320|0;
 $2 = sp + 336|0;
 $3 = sp + 352|0;
 $4 = sp + 368|0;
 $worldManifold = sp + 384|0;
 $5 = sp + 208|0;
 $6 = sp + 216|0;
 $tangent = sp + 240|0;
 $7 = sp + 264|0;
 $8 = sp + 272|0;
 $9 = sp + 280|0;
 $10 = sp + 288|0;
 $11 = sp + 296|0;
 $12 = sp + 176|0;
 $0 = $this;
 $13 = $0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = (($13) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   label = 24;
   break;
  }
  $18 = (($13) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $i;
  $21 = (($19) + (($20*152)|0)|0);
  $vc = $21;
  $22 = (($13) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $i;
  $25 = (($23) + (($24*88)|0)|0);
  $pc = $25;
  $26 = $pc;
  $27 = (($26) + 76|0);
  $28 = +HEAPF32[$27>>2];
  $radiusA = $28;
  $29 = $pc;
  $30 = (($29) + 80|0);
  $31 = +HEAPF32[$30>>2];
  $radiusB = $31;
  $32 = $vc;
  $33 = (($32) + 148|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($13) + 44|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (__ZN9b2Contact11GetManifoldEv($38)|0);
  $manifold = $39;
  $40 = $vc;
  $41 = (($40) + 112|0);
  $42 = HEAP32[$41>>2]|0;
  $indexA = $42;
  $43 = $vc;
  $44 = (($43) + 116|0);
  $45 = HEAP32[$44>>2]|0;
  $indexB = $45;
  $46 = $vc;
  $47 = (($46) + 120|0);
  $48 = +HEAPF32[$47>>2];
  $mA = $48;
  $49 = $vc;
  $50 = (($49) + 124|0);
  $51 = +HEAPF32[$50>>2];
  $mB = $51;
  $52 = $vc;
  $53 = (($52) + 128|0);
  $54 = +HEAPF32[$53>>2];
  $iA = $54;
  $55 = $vc;
  $56 = (($55) + 132|0);
  $57 = +HEAPF32[$56>>2];
  $iB = $57;
  $58 = $pc;
  $59 = (($58) + 48|0);
  ;HEAP32[$localCenterA+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$59+4>>2]|0;
  $60 = $pc;
  $61 = (($60) + 56|0);
  ;HEAP32[$localCenterB+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$61+4>>2]|0;
  $62 = $indexA;
  $63 = (($13) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + (($62*12)|0)|0);
  ;HEAP32[$cA+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$65+4>>2]|0;
  $66 = $indexA;
  $67 = (($13) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + (($66*12)|0)|0);
  $70 = (($69) + 8|0);
  $71 = +HEAPF32[$70>>2];
  $aA = $71;
  $72 = $indexA;
  $73 = (($13) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + (($72*12)|0)|0);
  ;HEAP32[$vA+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$75+4>>2]|0;
  $76 = $indexA;
  $77 = (($13) + 28|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + (($76*12)|0)|0);
  $80 = (($79) + 8|0);
  $81 = +HEAPF32[$80>>2];
  $wA = $81;
  $82 = $indexB;
  $83 = (($13) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + (($82*12)|0)|0);
  ;HEAP32[$cB+0>>2]=HEAP32[$85+0>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$85+4>>2]|0;
  $86 = $indexB;
  $87 = (($13) + 24|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($86*12)|0)|0);
  $90 = (($89) + 8|0);
  $91 = +HEAPF32[$90>>2];
  $aB = $91;
  $92 = $indexB;
  $93 = (($13) + 28|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + (($92*12)|0)|0);
  ;HEAP32[$vB+0>>2]=HEAP32[$95+0>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$95+4>>2]|0;
  $96 = $indexB;
  $97 = (($13) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($96*12)|0)|0);
  $100 = (($99) + 8|0);
  $101 = +HEAPF32[$100>>2];
  $wB = $101;
  $102 = $manifold;
  $103 = (($102) + 60|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)>(0);
  if (!($105)) {
   label = 4;
   break;
  }
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $106 = (($xfA) + 8|0);
  $107 = $aA;
  __ZN5b2Rot3SetEf($106,$107);
  $108 = (($xfB) + 8|0);
  $109 = $aB;
  __ZN5b2Rot3SetEf($108,$109);
  $110 = (($xfA) + 8|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($2,$110,$localCenterA);
  __ZmiRK6b2Vec2S1_($1,$cA,$2);
  ;HEAP32[$xfA+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$1+4>>2]|0;
  $111 = (($xfB) + 8|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($4,$111,$localCenterB);
  __ZmiRK6b2Vec2S1_($3,$cB,$4);
  ;HEAP32[$xfB+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$3+4>>2]|0;
  __ZN15b2WorldManifoldC2Ev($worldManifold);
  $112 = $manifold;
  $113 = $radiusA;
  $114 = $radiusB;
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold,$112,$xfA,$113,$xfB,$114);
  $115 = $vc;
  $116 = (($115) + 72|0);
  ;HEAP32[$116+0>>2]=HEAP32[$worldManifold+0>>2]|0;HEAP32[$116+4>>2]=HEAP32[$worldManifold+4>>2]|0;
  $117 = $vc;
  $118 = (($117) + 144|0);
  $119 = HEAP32[$118>>2]|0;
  $pointCount = $119;
  $j = 0;
  while(1) {
   $120 = $j;
   $121 = $pointCount;
   $122 = ($120|0)<($121|0);
   if (!($122)) {
    break;
   }
   $123 = $vc;
   $124 = $j;
   $125 = (($123) + (($124*36)|0)|0);
   $vcp = $125;
   $126 = $vcp;
   $127 = $j;
   $128 = (($worldManifold) + 8|0);
   $129 = (($128) + ($127<<3)|0);
   __ZmiRK6b2Vec2S1_($5,$129,$cA);
   ;HEAP32[$126+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$126+4>>2]=HEAP32[$5+4>>2]|0;
   $130 = $vcp;
   $131 = (($130) + 8|0);
   $132 = $j;
   $133 = (($worldManifold) + 8|0);
   $134 = (($133) + ($132<<3)|0);
   __ZmiRK6b2Vec2S1_($6,$134,$cB);
   ;HEAP32[$131+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$131+4>>2]=HEAP32[$6+4>>2]|0;
   $135 = $vcp;
   $136 = $vc;
   $137 = (($136) + 72|0);
   $138 = (+__Z7b2CrossRK6b2Vec2S1_($135,$137));
   $rnA = $138;
   $139 = $vcp;
   $140 = (($139) + 8|0);
   $141 = $vc;
   $142 = (($141) + 72|0);
   $143 = (+__Z7b2CrossRK6b2Vec2S1_($140,$142));
   $rnB = $143;
   $144 = $mA;
   $145 = $mB;
   $146 = $144 + $145;
   $147 = $iA;
   $148 = $rnA;
   $149 = $147 * $148;
   $150 = $rnA;
   $151 = $149 * $150;
   $152 = $146 + $151;
   $153 = $iB;
   $154 = $rnB;
   $155 = $153 * $154;
   $156 = $rnB;
   $157 = $155 * $156;
   $158 = $152 + $157;
   $kNormal = $158;
   $159 = $kNormal;
   $160 = $159 > 0.0;
   if ($160) {
    $161 = $kNormal;
    $162 = 1.0 / $161;
    $165 = $162;
   } else {
    $165 = 0.0;
   }
   $163 = $vcp;
   $164 = (($163) + 24|0);
   HEAPF32[$164>>2] = $165;
   $166 = $vc;
   $167 = (($166) + 72|0);
   __Z7b2CrossRK6b2Vec2f($tangent,$167,1.0);
   $168 = $vcp;
   $169 = (+__Z7b2CrossRK6b2Vec2S1_($168,$tangent));
   $rtA = $169;
   $170 = $vcp;
   $171 = (($170) + 8|0);
   $172 = (+__Z7b2CrossRK6b2Vec2S1_($171,$tangent));
   $rtB = $172;
   $173 = $mA;
   $174 = $mB;
   $175 = $173 + $174;
   $176 = $iA;
   $177 = $rtA;
   $178 = $176 * $177;
   $179 = $rtA;
   $180 = $178 * $179;
   $181 = $175 + $180;
   $182 = $iB;
   $183 = $rtB;
   $184 = $182 * $183;
   $185 = $rtB;
   $186 = $184 * $185;
   $187 = $181 + $186;
   $kTangent = $187;
   $188 = $kTangent;
   $189 = $188 > 0.0;
   if ($189) {
    $190 = $kTangent;
    $191 = 1.0 / $190;
    $194 = $191;
   } else {
    $194 = 0.0;
   }
   $192 = $vcp;
   $193 = (($192) + 28|0);
   HEAPF32[$193>>2] = $194;
   $195 = $vcp;
   $196 = (($195) + 32|0);
   HEAPF32[$196>>2] = 0.0;
   $197 = $vc;
   $198 = (($197) + 72|0);
   $199 = $wB;
   $200 = $vcp;
   $201 = (($200) + 8|0);
   __Z7b2CrossfRK6b2Vec2($10,$199,$201);
   __ZplRK6b2Vec2S1_($9,$vB,$10);
   __ZmiRK6b2Vec2S1_($8,$9,$vA);
   $202 = $wA;
   $203 = $vcp;
   __Z7b2CrossfRK6b2Vec2($11,$202,$203);
   __ZmiRK6b2Vec2S1_($7,$8,$11);
   $204 = (+__Z5b2DotRK6b2Vec2S1_($198,$7));
   $vRel = $204;
   $205 = $vRel;
   $206 = $205 < -1.0;
   if ($206) {
    $207 = $vc;
    $208 = (($207) + 140|0);
    $209 = +HEAPF32[$208>>2];
    $210 = -$209;
    $211 = $vRel;
    $212 = $210 * $211;
    $213 = $vcp;
    $214 = (($213) + 32|0);
    HEAPF32[$214>>2] = $212;
   }
   $215 = $j;
   $216 = (($215) + 1)|0;
   $j = $216;
  }
  $217 = $vc;
  $218 = (($217) + 144|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = ($219|0)==(2);
  if ($220) {
   $221 = $vc;
   $vcp1 = $221;
   $222 = $vc;
   $223 = (($222) + 36|0);
   $vcp2 = $223;
   $224 = $vcp1;
   $225 = $vc;
   $226 = (($225) + 72|0);
   $227 = (+__Z7b2CrossRK6b2Vec2S1_($224,$226));
   $rn1A = $227;
   $228 = $vcp1;
   $229 = (($228) + 8|0);
   $230 = $vc;
   $231 = (($230) + 72|0);
   $232 = (+__Z7b2CrossRK6b2Vec2S1_($229,$231));
   $rn1B = $232;
   $233 = $vcp2;
   $234 = $vc;
   $235 = (($234) + 72|0);
   $236 = (+__Z7b2CrossRK6b2Vec2S1_($233,$235));
   $rn2A = $236;
   $237 = $vcp2;
   $238 = (($237) + 8|0);
   $239 = $vc;
   $240 = (($239) + 72|0);
   $241 = (+__Z7b2CrossRK6b2Vec2S1_($238,$240));
   $rn2B = $241;
   $242 = $mA;
   $243 = $mB;
   $244 = $242 + $243;
   $245 = $iA;
   $246 = $rn1A;
   $247 = $245 * $246;
   $248 = $rn1A;
   $249 = $247 * $248;
   $250 = $244 + $249;
   $251 = $iB;
   $252 = $rn1B;
   $253 = $251 * $252;
   $254 = $rn1B;
   $255 = $253 * $254;
   $256 = $250 + $255;
   $k11 = $256;
   $257 = $mA;
   $258 = $mB;
   $259 = $257 + $258;
   $260 = $iA;
   $261 = $rn2A;
   $262 = $260 * $261;
   $263 = $rn2A;
   $264 = $262 * $263;
   $265 = $259 + $264;
   $266 = $iB;
   $267 = $rn2B;
   $268 = $266 * $267;
   $269 = $rn2B;
   $270 = $268 * $269;
   $271 = $265 + $270;
   $k22 = $271;
   $272 = $mA;
   $273 = $mB;
   $274 = $272 + $273;
   $275 = $iA;
   $276 = $rn1A;
   $277 = $275 * $276;
   $278 = $rn2A;
   $279 = $277 * $278;
   $280 = $274 + $279;
   $281 = $iB;
   $282 = $rn1B;
   $283 = $281 * $282;
   $284 = $rn2B;
   $285 = $283 * $284;
   $286 = $280 + $285;
   $k12 = $286;
   $k_maxConditionNumber = 1000.0;
   $287 = $k11;
   $288 = $k11;
   $289 = $287 * $288;
   $290 = $k11;
   $291 = $k22;
   $292 = $290 * $291;
   $293 = $k12;
   $294 = $k12;
   $295 = $293 * $294;
   $296 = $292 - $295;
   $297 = 1000.0 * $296;
   $298 = $289 < $297;
   if ($298) {
    $299 = $vc;
    $300 = (($299) + 96|0);
    $301 = $k11;
    $302 = $k12;
    __ZN6b2Vec23SetEff($300,$301,$302);
    $303 = $vc;
    $304 = (($303) + 96|0);
    $305 = (($304) + 8|0);
    $306 = $k12;
    $307 = $k22;
    __ZN6b2Vec23SetEff($305,$306,$307);
    $308 = $vc;
    $309 = (($308) + 80|0);
    $310 = $vc;
    $311 = (($310) + 96|0);
    __ZNK7b2Mat2210GetInverseEv($12,$311);
    ;HEAP32[$309+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$309+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$309+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$309+12>>2]=HEAP32[$12+12>>2]|0;
   } else {
    $312 = $vc;
    $313 = (($312) + 144|0);
    HEAP32[$313>>2] = 1;
   }
  }
  $314 = $i;
  $315 = (($314) + 1)|0;
  $i = $315;
 }
 if ((label|0) == 4) {
  ___assert_fail((25952|0),(25840|0),168,(25984|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2ContactSolver9WarmStartEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $mA = 0.0, $mB = 0.0, $normal = 0, $pointCount = 0, $tangent = 0;
 var $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $wA = 0.0, $wB = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vA = sp + 128|0;
 $vB = sp + 64|0;
 $normal = sp + 80|0;
 $tangent = sp + 8|0;
 $P = sp + 96|0;
 $1 = sp + 16|0;
 $2 = sp + 40|0;
 $3 = sp + 112|0;
 $4 = sp + 48|0;
 $0 = $this;
 $5 = $0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = (($5) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = (($5) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $i;
  $13 = (($11) + (($12*152)|0)|0);
  $vc = $13;
  $14 = $vc;
  $15 = (($14) + 112|0);
  $16 = HEAP32[$15>>2]|0;
  $indexA = $16;
  $17 = $vc;
  $18 = (($17) + 116|0);
  $19 = HEAP32[$18>>2]|0;
  $indexB = $19;
  $20 = $vc;
  $21 = (($20) + 120|0);
  $22 = +HEAPF32[$21>>2];
  $mA = $22;
  $23 = $vc;
  $24 = (($23) + 128|0);
  $25 = +HEAPF32[$24>>2];
  $iA = $25;
  $26 = $vc;
  $27 = (($26) + 124|0);
  $28 = +HEAPF32[$27>>2];
  $mB = $28;
  $29 = $vc;
  $30 = (($29) + 132|0);
  $31 = +HEAPF32[$30>>2];
  $iB = $31;
  $32 = $vc;
  $33 = (($32) + 144|0);
  $34 = HEAP32[$33>>2]|0;
  $pointCount = $34;
  $35 = $indexA;
  $36 = (($5) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($35*12)|0)|0);
  ;HEAP32[$vA+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$38+4>>2]|0;
  $39 = $indexA;
  $40 = (($5) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + (($39*12)|0)|0);
  $43 = (($42) + 8|0);
  $44 = +HEAPF32[$43>>2];
  $wA = $44;
  $45 = $indexB;
  $46 = (($5) + 28|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($45*12)|0)|0);
  ;HEAP32[$vB+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$48+4>>2]|0;
  $49 = $indexB;
  $50 = (($5) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($49*12)|0)|0);
  $53 = (($52) + 8|0);
  $54 = +HEAPF32[$53>>2];
  $wB = $54;
  $55 = $vc;
  $56 = (($55) + 72|0);
  ;HEAP32[$normal+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$56+4>>2]|0;
  __Z7b2CrossRK6b2Vec2f($tangent,$normal,1.0);
  $j = 0;
  while(1) {
   $57 = $j;
   $58 = $pointCount;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $vc;
   $61 = $j;
   $62 = (($60) + (($61*36)|0)|0);
   $vcp = $62;
   $63 = $vcp;
   $64 = (($63) + 16|0);
   $65 = +HEAPF32[$64>>2];
   __ZmlfRK6b2Vec2($1,$65,$normal);
   $66 = $vcp;
   $67 = (($66) + 20|0);
   $68 = +HEAPF32[$67>>2];
   __ZmlfRK6b2Vec2($2,$68,$tangent);
   __ZplRK6b2Vec2S1_($P,$1,$2);
   $69 = $iA;
   $70 = $vcp;
   $71 = (+__Z7b2CrossRK6b2Vec2S1_($70,$P));
   $72 = $69 * $71;
   $73 = $wA;
   $74 = $73 - $72;
   $wA = $74;
   $75 = $mA;
   __ZmlfRK6b2Vec2($3,$75,$P);
   __ZN6b2Vec2mIERKS_($vA,$3);
   $76 = $iB;
   $77 = $vcp;
   $78 = (($77) + 8|0);
   $79 = (+__Z7b2CrossRK6b2Vec2S1_($78,$P));
   $80 = $76 * $79;
   $81 = $wB;
   $82 = $81 + $80;
   $wB = $82;
   $83 = $mB;
   __ZmlfRK6b2Vec2($4,$83,$P);
   __ZN6b2Vec2pLERKS_($vB,$4);
   $84 = $j;
   $85 = (($84) + 1)|0;
   $j = $85;
  }
  $86 = $indexA;
  $87 = (($5) + 28|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($86*12)|0)|0);
  ;HEAP32[$89+0>>2]=HEAP32[$vA+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$vA+4>>2]|0;
  $90 = $wA;
  $91 = $indexA;
  $92 = (($5) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + (($91*12)|0)|0);
  $95 = (($94) + 8|0);
  HEAPF32[$95>>2] = $90;
  $96 = $indexB;
  $97 = (($5) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($96*12)|0)|0);
  ;HEAP32[$99+0>>2]=HEAP32[$vB+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$vB+4>>2]|0;
  $100 = $wB;
  $101 = $indexB;
  $102 = (($5) + 28|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($101*12)|0)|0);
  $105 = (($104) + 8|0);
  HEAPF32[$105>>2] = $100;
  $106 = $i;
  $107 = (($106) + 1)|0;
  $i = $107;
 }
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0;
 var $404 = 0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $P1 = 0, $P111 = 0, $P114 = 0, $P18 = 0, $P2 = 0, $P212 = 0;
 var $P215 = 0, $P29 = 0, $P5 = 0, $a = 0, $b = 0, $cp1 = 0, $cp2 = 0, $d = 0, $d10 = 0, $d13 = 0, $d7 = 0, $dv = 0, $dv1 = 0, $dv2 = 0, $dv26 = 0, $friction = 0.0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0;
 var $indexB = 0, $j = 0, $k_errorTol = 0.0, $lambda = 0.0, $lambda3 = 0.0, $mA = 0.0, $mB = 0.0, $maxFriction = 0.0, $newImpulse = 0.0, $newImpulse4 = 0.0, $normal = 0, $pointCount = 0, $tangent = 0, $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $vcp1 = 0, $vn = 0.0, $vn1 = 0.0;
 var $vn2 = 0.0, $vt = 0.0, $wA = 0.0, $wB = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vA = sp + 64|0;
 $vB = sp + 80|0;
 $normal = sp + 96|0;
 $tangent = sp + 104|0;
 $dv = sp + 128|0;
 $1 = sp + 136|0;
 $2 = sp + 144|0;
 $3 = sp + 152|0;
 $4 = sp + 160|0;
 $P = sp + 184|0;
 $5 = sp + 192|0;
 $6 = sp + 200|0;
 $dv2 = sp + 216|0;
 $7 = sp + 224|0;
 $8 = sp + 232|0;
 $9 = sp + 240|0;
 $10 = sp + 248|0;
 $P5 = sp + 584|0;
 $11 = sp + 600|0;
 $12 = sp + 616|0;
 $a = sp + 648|0;
 $dv1 = sp + 312|0;
 $13 = sp + 320|0;
 $14 = sp + 328|0;
 $15 = sp + 336|0;
 $16 = sp + 344|0;
 $dv26 = sp + 352|0;
 $17 = sp + 360|0;
 $18 = sp + 368|0;
 $19 = sp + 376|0;
 $20 = sp + 384|0;
 $b = sp + 400|0;
 $21 = sp + 408|0;
 $x = sp + 424|0;
 $22 = sp + 432|0;
 $d = sp + 440|0;
 $P1 = sp + 448|0;
 $P2 = sp + 456|0;
 $23 = sp + 464|0;
 $24 = sp + 472|0;
 $25 = sp + 480|0;
 $26 = sp + 488|0;
 $d7 = sp + 496|0;
 $P18 = sp + 504|0;
 $P29 = sp + 512|0;
 $27 = sp + 520|0;
 $28 = sp + 528|0;
 $29 = sp + 536|0;
 $30 = sp + 544|0;
 $d10 = sp + 552|0;
 $P111 = sp + 560|0;
 $P212 = sp + 48|0;
 $31 = sp + 40|0;
 $32 = sp + 568|0;
 $33 = sp + 272|0;
 $34 = sp + 576|0;
 $d13 = sp + 32|0;
 $P114 = sp;
 $P215 = sp + 280|0;
 $35 = sp + 592|0;
 $36 = sp + 24|0;
 $37 = sp + 8|0;
 $38 = sp + 288|0;
 $0 = $this;
 $39 = $0;
 $i = 0;
 while(1) {
  $40 = $i;
  $41 = (($39) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($40|0)<($42|0);
  if (!($43)) {
   label = 32;
   break;
  }
  $44 = (($39) + 40|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $i;
  $47 = (($45) + (($46*152)|0)|0);
  $vc = $47;
  $48 = $vc;
  $49 = (($48) + 112|0);
  $50 = HEAP32[$49>>2]|0;
  $indexA = $50;
  $51 = $vc;
  $52 = (($51) + 116|0);
  $53 = HEAP32[$52>>2]|0;
  $indexB = $53;
  $54 = $vc;
  $55 = (($54) + 120|0);
  $56 = +HEAPF32[$55>>2];
  $mA = $56;
  $57 = $vc;
  $58 = (($57) + 128|0);
  $59 = +HEAPF32[$58>>2];
  $iA = $59;
  $60 = $vc;
  $61 = (($60) + 124|0);
  $62 = +HEAPF32[$61>>2];
  $mB = $62;
  $63 = $vc;
  $64 = (($63) + 132|0);
  $65 = +HEAPF32[$64>>2];
  $iB = $65;
  $66 = $vc;
  $67 = (($66) + 144|0);
  $68 = HEAP32[$67>>2]|0;
  $pointCount = $68;
  $69 = $indexA;
  $70 = (($39) + 28|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($69*12)|0)|0);
  ;HEAP32[$vA+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$vA+4>>2]=HEAP32[$72+4>>2]|0;
  $73 = $indexA;
  $74 = (($39) + 28|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + (($73*12)|0)|0);
  $77 = (($76) + 8|0);
  $78 = +HEAPF32[$77>>2];
  $wA = $78;
  $79 = $indexB;
  $80 = (($39) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + (($79*12)|0)|0);
  ;HEAP32[$vB+0>>2]=HEAP32[$82+0>>2]|0;HEAP32[$vB+4>>2]=HEAP32[$82+4>>2]|0;
  $83 = $indexB;
  $84 = (($39) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($83*12)|0)|0);
  $87 = (($86) + 8|0);
  $88 = +HEAPF32[$87>>2];
  $wB = $88;
  $89 = $vc;
  $90 = (($89) + 72|0);
  ;HEAP32[$normal+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$90+4>>2]|0;
  __Z7b2CrossRK6b2Vec2f($tangent,$normal,1.0);
  $91 = $vc;
  $92 = (($91) + 136|0);
  $93 = +HEAPF32[$92>>2];
  $friction = $93;
  $94 = $pointCount;
  $95 = ($94|0)==(1);
  if (!($95)) {
   $96 = $pointCount;
   $97 = ($96|0)==(2);
   if (!($97)) {
    label = 5;
    break;
   }
  }
  $j = 0;
  while(1) {
   $98 = $j;
   $99 = $pointCount;
   $100 = ($98|0)<($99|0);
   if (!($100)) {
    break;
   }
   $101 = $vc;
   $102 = $j;
   $103 = (($101) + (($102*36)|0)|0);
   $vcp = $103;
   $104 = $wB;
   $105 = $vcp;
   $106 = (($105) + 8|0);
   __Z7b2CrossfRK6b2Vec2($3,$104,$106);
   __ZplRK6b2Vec2S1_($2,$vB,$3);
   __ZmiRK6b2Vec2S1_($1,$2,$vA);
   $107 = $wA;
   $108 = $vcp;
   __Z7b2CrossfRK6b2Vec2($4,$107,$108);
   __ZmiRK6b2Vec2S1_($dv,$1,$4);
   $109 = (+__Z5b2DotRK6b2Vec2S1_($dv,$tangent));
   $vt = $109;
   $110 = $vcp;
   $111 = (($110) + 28|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $vt;
   $114 = -$113;
   $115 = $112 * $114;
   $lambda = $115;
   $116 = $friction;
   $117 = $vcp;
   $118 = (($117) + 16|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $116 * $119;
   $maxFriction = $120;
   $121 = $vcp;
   $122 = (($121) + 20|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $lambda;
   $125 = $123 + $124;
   $126 = $maxFriction;
   $127 = -$126;
   $128 = $maxFriction;
   $129 = (+__Z7b2ClampIfET_S0_S0_S0_($125,$127,$128));
   $newImpulse = $129;
   $130 = $newImpulse;
   $131 = $vcp;
   $132 = (($131) + 20|0);
   $133 = +HEAPF32[$132>>2];
   $134 = $130 - $133;
   $lambda = $134;
   $135 = $newImpulse;
   $136 = $vcp;
   $137 = (($136) + 20|0);
   HEAPF32[$137>>2] = $135;
   $138 = $lambda;
   __ZmlfRK6b2Vec2($P,$138,$tangent);
   $139 = $mA;
   __ZmlfRK6b2Vec2($5,$139,$P);
   __ZN6b2Vec2mIERKS_($vA,$5);
   $140 = $iA;
   $141 = $vcp;
   $142 = (+__Z7b2CrossRK6b2Vec2S1_($141,$P));
   $143 = $140 * $142;
   $144 = $wA;
   $145 = $144 - $143;
   $wA = $145;
   $146 = $mB;
   __ZmlfRK6b2Vec2($6,$146,$P);
   __ZN6b2Vec2pLERKS_($vB,$6);
   $147 = $iB;
   $148 = $vcp;
   $149 = (($148) + 8|0);
   $150 = (+__Z7b2CrossRK6b2Vec2S1_($149,$P));
   $151 = $147 * $150;
   $152 = $wB;
   $153 = $152 + $151;
   $wB = $153;
   $154 = $j;
   $155 = (($154) + 1)|0;
   $j = $155;
  }
  $156 = $vc;
  $157 = (($156) + 144|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158|0)==(1);
  if ($159) {
   $160 = $vc;
   $vcp1 = $160;
   $161 = $wB;
   $162 = $vcp1;
   $163 = (($162) + 8|0);
   __Z7b2CrossfRK6b2Vec2($9,$161,$163);
   __ZplRK6b2Vec2S1_($8,$vB,$9);
   __ZmiRK6b2Vec2S1_($7,$8,$vA);
   $164 = $wA;
   $165 = $vcp1;
   __Z7b2CrossfRK6b2Vec2($10,$164,$165);
   __ZmiRK6b2Vec2S1_($dv2,$7,$10);
   $166 = (+__Z5b2DotRK6b2Vec2S1_($dv2,$normal));
   $vn = $166;
   $167 = $vcp1;
   $168 = (($167) + 24|0);
   $169 = +HEAPF32[$168>>2];
   $170 = -$169;
   $171 = $vn;
   $172 = $vcp1;
   $173 = (($172) + 32|0);
   $174 = +HEAPF32[$173>>2];
   $175 = $171 - $174;
   $176 = $170 * $175;
   $lambda3 = $176;
   $177 = $vcp1;
   $178 = (($177) + 16|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $lambda3;
   $181 = $179 + $180;
   $182 = (+__Z5b2MaxIfET_S0_S0_($181,0.0));
   $newImpulse4 = $182;
   $183 = $newImpulse4;
   $184 = $vcp1;
   $185 = (($184) + 16|0);
   $186 = +HEAPF32[$185>>2];
   $187 = $183 - $186;
   $lambda3 = $187;
   $188 = $newImpulse4;
   $189 = $vcp1;
   $190 = (($189) + 16|0);
   HEAPF32[$190>>2] = $188;
   $191 = $lambda3;
   __ZmlfRK6b2Vec2($P5,$191,$normal);
   $192 = $mA;
   __ZmlfRK6b2Vec2($11,$192,$P5);
   __ZN6b2Vec2mIERKS_($vA,$11);
   $193 = $iA;
   $194 = $vcp1;
   $195 = (+__Z7b2CrossRK6b2Vec2S1_($194,$P5));
   $196 = $193 * $195;
   $197 = $wA;
   $198 = $197 - $196;
   $wA = $198;
   $199 = $mB;
   __ZmlfRK6b2Vec2($12,$199,$P5);
   __ZN6b2Vec2pLERKS_($vB,$12);
   $200 = $iB;
   $201 = $vcp1;
   $202 = (($201) + 8|0);
   $203 = (+__Z7b2CrossRK6b2Vec2S1_($202,$P5));
   $204 = $200 * $203;
   $205 = $wB;
   $206 = $205 + $204;
   $wB = $206;
  } else {
   $207 = $vc;
   $cp1 = $207;
   $208 = $vc;
   $209 = (($208) + 36|0);
   $cp2 = $209;
   $210 = $cp1;
   $211 = (($210) + 16|0);
   $212 = +HEAPF32[$211>>2];
   $213 = $cp2;
   $214 = (($213) + 16|0);
   $215 = +HEAPF32[$214>>2];
   __ZN6b2Vec2C2Eff($a,$212,$215);
   $216 = +HEAPF32[$a>>2];
   $217 = $216 >= 0.0;
   if (!($217)) {
    label = 14;
    break;
   }
   $218 = (($a) + 4|0);
   $219 = +HEAPF32[$218>>2];
   $220 = $219 >= 0.0;
   if (!($220)) {
    label = 14;
    break;
   }
   $221 = $wB;
   $222 = $cp1;
   $223 = (($222) + 8|0);
   __Z7b2CrossfRK6b2Vec2($15,$221,$223);
   __ZplRK6b2Vec2S1_($14,$vB,$15);
   __ZmiRK6b2Vec2S1_($13,$14,$vA);
   $224 = $wA;
   $225 = $cp1;
   __Z7b2CrossfRK6b2Vec2($16,$224,$225);
   __ZmiRK6b2Vec2S1_($dv1,$13,$16);
   $226 = $wB;
   $227 = $cp2;
   $228 = (($227) + 8|0);
   __Z7b2CrossfRK6b2Vec2($19,$226,$228);
   __ZplRK6b2Vec2S1_($18,$vB,$19);
   __ZmiRK6b2Vec2S1_($17,$18,$vA);
   $229 = $wA;
   $230 = $cp2;
   __Z7b2CrossfRK6b2Vec2($20,$229,$230);
   __ZmiRK6b2Vec2S1_($dv26,$17,$20);
   $231 = (+__Z5b2DotRK6b2Vec2S1_($dv1,$normal));
   $vn1 = $231;
   $232 = (+__Z5b2DotRK6b2Vec2S1_($dv26,$normal));
   $vn2 = $232;
   __ZN6b2Vec2C2Ev($b);
   $233 = $vn1;
   $234 = $cp1;
   $235 = (($234) + 32|0);
   $236 = +HEAPF32[$235>>2];
   $237 = $233 - $236;
   HEAPF32[$b>>2] = $237;
   $238 = $vn2;
   $239 = $cp2;
   $240 = (($239) + 32|0);
   $241 = +HEAPF32[$240>>2];
   $242 = $238 - $241;
   $243 = (($b) + 4|0);
   HEAPF32[$243>>2] = $242;
   $244 = $vc;
   $245 = (($244) + 96|0);
   __Z5b2MulRK7b2Mat22RK6b2Vec2($21,$245,$a);
   __ZN6b2Vec2mIERKS_($b,$21);
   $k_errorTol = 0.0010000000474974513;
   $246 = $vc;
   $247 = (($246) + 80|0);
   __Z5b2MulRK7b2Mat22RK6b2Vec2($22,$247,$b);
   __ZNK6b2Vec2ngEv($x,$22);
   $248 = +HEAPF32[$x>>2];
   $249 = $248 >= 0.0;
   if ($249) {
    $250 = (($x) + 4|0);
    $251 = +HEAPF32[$250>>2];
    $252 = $251 >= 0.0;
    if ($252) {
     __ZmiRK6b2Vec2S1_($d,$x,$a);
     $253 = +HEAPF32[$d>>2];
     __ZmlfRK6b2Vec2($P1,$253,$normal);
     $254 = (($d) + 4|0);
     $255 = +HEAPF32[$254>>2];
     __ZmlfRK6b2Vec2($P2,$255,$normal);
     $256 = $mA;
     __ZplRK6b2Vec2S1_($24,$P1,$P2);
     __ZmlfRK6b2Vec2($23,$256,$24);
     __ZN6b2Vec2mIERKS_($vA,$23);
     $257 = $iA;
     $258 = $cp1;
     $259 = (+__Z7b2CrossRK6b2Vec2S1_($258,$P1));
     $260 = $cp2;
     $261 = (+__Z7b2CrossRK6b2Vec2S1_($260,$P2));
     $262 = $259 + $261;
     $263 = $257 * $262;
     $264 = $wA;
     $265 = $264 - $263;
     $wA = $265;
     $266 = $mB;
     __ZplRK6b2Vec2S1_($26,$P1,$P2);
     __ZmlfRK6b2Vec2($25,$266,$26);
     __ZN6b2Vec2pLERKS_($vB,$25);
     $267 = $iB;
     $268 = $cp1;
     $269 = (($268) + 8|0);
     $270 = (+__Z7b2CrossRK6b2Vec2S1_($269,$P1));
     $271 = $cp2;
     $272 = (($271) + 8|0);
     $273 = (+__Z7b2CrossRK6b2Vec2S1_($272,$P2));
     $274 = $270 + $273;
     $275 = $267 * $274;
     $276 = $wB;
     $277 = $276 + $275;
     $wB = $277;
     $278 = +HEAPF32[$x>>2];
     $279 = $cp1;
     $280 = (($279) + 16|0);
     HEAPF32[$280>>2] = $278;
     $281 = (($x) + 4|0);
     $282 = +HEAPF32[$281>>2];
     $283 = $cp2;
     $284 = (($283) + 16|0);
     HEAPF32[$284>>2] = $282;
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     $285 = $cp1;
     $286 = (($285) + 24|0);
     $287 = +HEAPF32[$286>>2];
     $288 = -$287;
     $289 = +HEAPF32[$b>>2];
     $290 = $288 * $289;
     HEAPF32[$x>>2] = $290;
     $291 = (($x) + 4|0);
     HEAPF32[$291>>2] = 0.0;
     $vn1 = 0.0;
     $292 = $vc;
     $293 = (($292) + 96|0);
     $294 = (($293) + 4|0);
     $295 = +HEAPF32[$294>>2];
     $296 = +HEAPF32[$x>>2];
     $297 = $295 * $296;
     $298 = (($b) + 4|0);
     $299 = +HEAPF32[$298>>2];
     $300 = $297 + $299;
     $vn2 = $300;
     $301 = +HEAPF32[$x>>2];
     $302 = $301 >= 0.0;
     if ($302) {
      $303 = $vn2;
      $304 = $303 >= 0.0;
      if ($304) {
       __ZmiRK6b2Vec2S1_($d7,$x,$a);
       $305 = +HEAPF32[$d7>>2];
       __ZmlfRK6b2Vec2($P18,$305,$normal);
       $306 = (($d7) + 4|0);
       $307 = +HEAPF32[$306>>2];
       __ZmlfRK6b2Vec2($P29,$307,$normal);
       $308 = $mA;
       __ZplRK6b2Vec2S1_($28,$P18,$P29);
       __ZmlfRK6b2Vec2($27,$308,$28);
       __ZN6b2Vec2mIERKS_($vA,$27);
       $309 = $iA;
       $310 = $cp1;
       $311 = (+__Z7b2CrossRK6b2Vec2S1_($310,$P18));
       $312 = $cp2;
       $313 = (+__Z7b2CrossRK6b2Vec2S1_($312,$P29));
       $314 = $311 + $313;
       $315 = $309 * $314;
       $316 = $wA;
       $317 = $316 - $315;
       $wA = $317;
       $318 = $mB;
       __ZplRK6b2Vec2S1_($30,$P18,$P29);
       __ZmlfRK6b2Vec2($29,$318,$30);
       __ZN6b2Vec2pLERKS_($vB,$29);
       $319 = $iB;
       $320 = $cp1;
       $321 = (($320) + 8|0);
       $322 = (+__Z7b2CrossRK6b2Vec2S1_($321,$P18));
       $323 = $cp2;
       $324 = (($323) + 8|0);
       $325 = (+__Z7b2CrossRK6b2Vec2S1_($324,$P29));
       $326 = $322 + $325;
       $327 = $319 * $326;
       $328 = $wB;
       $329 = $328 + $327;
       $wB = $329;
       $330 = +HEAPF32[$x>>2];
       $331 = $cp1;
       $332 = (($331) + 16|0);
       HEAPF32[$332>>2] = $330;
       $333 = (($x) + 4|0);
       $334 = +HEAPF32[$333>>2];
       $335 = $cp2;
       $336 = (($335) + 16|0);
       HEAPF32[$336>>2] = $334;
       break;
      }
     }
     HEAPF32[$x>>2] = 0.0;
     $337 = $cp2;
     $338 = (($337) + 24|0);
     $339 = +HEAPF32[$338>>2];
     $340 = -$339;
     $341 = (($b) + 4|0);
     $342 = +HEAPF32[$341>>2];
     $343 = $340 * $342;
     $344 = (($x) + 4|0);
     HEAPF32[$344>>2] = $343;
     $345 = $vc;
     $346 = (($345) + 96|0);
     $347 = (($346) + 8|0);
     $348 = +HEAPF32[$347>>2];
     $349 = (($x) + 4|0);
     $350 = +HEAPF32[$349>>2];
     $351 = $348 * $350;
     $352 = +HEAPF32[$b>>2];
     $353 = $351 + $352;
     $vn1 = $353;
     $vn2 = 0.0;
     $354 = (($x) + 4|0);
     $355 = +HEAPF32[$354>>2];
     $356 = $355 >= 0.0;
     if ($356) {
      $357 = $vn1;
      $358 = $357 >= 0.0;
      if ($358) {
       __ZmiRK6b2Vec2S1_($d10,$x,$a);
       $359 = +HEAPF32[$d10>>2];
       __ZmlfRK6b2Vec2($P111,$359,$normal);
       $360 = (($d10) + 4|0);
       $361 = +HEAPF32[$360>>2];
       __ZmlfRK6b2Vec2($P212,$361,$normal);
       $362 = $mA;
       __ZplRK6b2Vec2S1_($32,$P111,$P212);
       __ZmlfRK6b2Vec2($31,$362,$32);
       __ZN6b2Vec2mIERKS_($vA,$31);
       $363 = $iA;
       $364 = $cp1;
       $365 = (+__Z7b2CrossRK6b2Vec2S1_($364,$P111));
       $366 = $cp2;
       $367 = (+__Z7b2CrossRK6b2Vec2S1_($366,$P212));
       $368 = $365 + $367;
       $369 = $363 * $368;
       $370 = $wA;
       $371 = $370 - $369;
       $wA = $371;
       $372 = $mB;
       __ZplRK6b2Vec2S1_($34,$P111,$P212);
       __ZmlfRK6b2Vec2($33,$372,$34);
       __ZN6b2Vec2pLERKS_($vB,$33);
       $373 = $iB;
       $374 = $cp1;
       $375 = (($374) + 8|0);
       $376 = (+__Z7b2CrossRK6b2Vec2S1_($375,$P111));
       $377 = $cp2;
       $378 = (($377) + 8|0);
       $379 = (+__Z7b2CrossRK6b2Vec2S1_($378,$P212));
       $380 = $376 + $379;
       $381 = $373 * $380;
       $382 = $wB;
       $383 = $382 + $381;
       $wB = $383;
       $384 = +HEAPF32[$x>>2];
       $385 = $cp1;
       $386 = (($385) + 16|0);
       HEAPF32[$386>>2] = $384;
       $387 = (($x) + 4|0);
       $388 = +HEAPF32[$387>>2];
       $389 = $cp2;
       $390 = (($389) + 16|0);
       HEAPF32[$390>>2] = $388;
       break;
      }
     }
     HEAPF32[$x>>2] = 0.0;
     $391 = (($x) + 4|0);
     HEAPF32[$391>>2] = 0.0;
     $392 = +HEAPF32[$b>>2];
     $vn1 = $392;
     $393 = (($b) + 4|0);
     $394 = +HEAPF32[$393>>2];
     $vn2 = $394;
     $395 = $vn1;
     $396 = $395 >= 0.0;
     if ($396) {
      $397 = $vn2;
      $398 = $397 >= 0.0;
      if ($398) {
       __ZmiRK6b2Vec2S1_($d13,$x,$a);
       $399 = +HEAPF32[$d13>>2];
       __ZmlfRK6b2Vec2($P114,$399,$normal);
       $400 = (($d13) + 4|0);
       $401 = +HEAPF32[$400>>2];
       __ZmlfRK6b2Vec2($P215,$401,$normal);
       $402 = $mA;
       __ZplRK6b2Vec2S1_($36,$P114,$P215);
       __ZmlfRK6b2Vec2($35,$402,$36);
       __ZN6b2Vec2mIERKS_($vA,$35);
       $403 = $iA;
       $404 = $cp1;
       $405 = (+__Z7b2CrossRK6b2Vec2S1_($404,$P114));
       $406 = $cp2;
       $407 = (+__Z7b2CrossRK6b2Vec2S1_($406,$P215));
       $408 = $405 + $407;
       $409 = $403 * $408;
       $410 = $wA;
       $411 = $410 - $409;
       $wA = $411;
       $412 = $mB;
       __ZplRK6b2Vec2S1_($38,$P114,$P215);
       __ZmlfRK6b2Vec2($37,$412,$38);
       __ZN6b2Vec2pLERKS_($vB,$37);
       $413 = $iB;
       $414 = $cp1;
       $415 = (($414) + 8|0);
       $416 = (+__Z7b2CrossRK6b2Vec2S1_($415,$P114));
       $417 = $cp2;
       $418 = (($417) + 8|0);
       $419 = (+__Z7b2CrossRK6b2Vec2S1_($418,$P215));
       $420 = $416 + $419;
       $421 = $413 * $420;
       $422 = $wB;
       $423 = $422 + $421;
       $wB = $423;
       $424 = +HEAPF32[$x>>2];
       $425 = $cp1;
       $426 = (($425) + 16|0);
       HEAPF32[$426>>2] = $424;
       $427 = (($x) + 4|0);
       $428 = +HEAPF32[$427>>2];
       $429 = $cp2;
       $430 = (($429) + 16|0);
       HEAPF32[$430>>2] = $428;
       break;
      }
     }
    }
   } while(0);
  }
  $431 = $indexA;
  $432 = (($39) + 28|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = (($433) + (($431*12)|0)|0);
  ;HEAP32[$434+0>>2]=HEAP32[$vA+0>>2]|0;HEAP32[$434+4>>2]=HEAP32[$vA+4>>2]|0;
  $435 = $wA;
  $436 = $indexA;
  $437 = (($39) + 28|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = (($438) + (($436*12)|0)|0);
  $440 = (($439) + 8|0);
  HEAPF32[$440>>2] = $435;
  $441 = $indexB;
  $442 = (($39) + 28|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = (($443) + (($441*12)|0)|0);
  ;HEAP32[$444+0>>2]=HEAP32[$vB+0>>2]|0;HEAP32[$444+4>>2]=HEAP32[$vB+4>>2]|0;
  $445 = $wB;
  $446 = $indexB;
  $447 = (($39) + 28|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = (($448) + (($446*12)|0)|0);
  $450 = (($449) + 8|0);
  HEAPF32[$450>>2] = $445;
  $451 = $i;
  $452 = (($451) + 1)|0;
  $i = $452;
 }
 if ((label|0) == 5) {
  ___assert_fail((26016|0),(25840|0),311,(26056|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  ___assert_fail((26088|0),(25840|0),406,(26056|0));
  // unreachable;
 }
 else if ((label|0) == 32) {
  STACKTOP = sp;return;
 }
}
function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $manifold = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = (($1) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = (($1) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = (($7) + (($8*152)|0)|0);
  $vc = $9;
  $10 = $vc;
  $11 = (($10) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($1) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN9b2Contact11GetManifoldEv($16)|0);
  $manifold = $17;
  $j = 0;
  while(1) {
   $18 = $j;
   $19 = $vc;
   $20 = (($19) + 144|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $j;
   $24 = $vc;
   $25 = (($24) + (($23*36)|0)|0);
   $26 = (($25) + 16|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $j;
   $29 = $manifold;
   $30 = (($29) + (($28*20)|0)|0);
   $31 = (($30) + 8|0);
   HEAPF32[$31>>2] = $27;
   $32 = $j;
   $33 = $vc;
   $34 = (($33) + (($32*36)|0)|0);
   $35 = (($34) + 20|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $j;
   $38 = $manifold;
   $39 = (($38) + (($37*20)|0)|0);
   $40 = (($39) + 12|0);
   HEAPF32[$40>>2] = $36;
   $41 = $j;
   $42 = (($41) + 1)|0;
   $j = $42;
  }
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 STACKTOP = sp;return;
}
function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0, $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0;
 var $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0, $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 32|0;
 $localCenterB = sp + 48|0;
 $cA = sp + 72|0;
 $cB = sp + 200|0;
 $xfA = sp + 232|0;
 $xfB = sp + 248|0;
 $1 = sp + 112|0;
 $2 = sp + 120|0;
 $3 = sp + 128|0;
 $4 = sp + 136|0;
 $psm = sp + 144|0;
 $normal = sp + 168|0;
 $point = sp + 176|0;
 $rA = sp + 16|0;
 $rB = sp;
 $P = sp + 24|0;
 $5 = sp + 96|0;
 $6 = sp + 216|0;
 $0 = $this;
 $7 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (($7) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = (($7) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $i;
  $15 = (($13) + (($14*88)|0)|0);
  $pc = $15;
  $16 = $pc;
  $17 = (($16) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $indexA = $18;
  $19 = $pc;
  $20 = (($19) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $indexB = $21;
  $22 = $pc;
  $23 = (($22) + 48|0);
  ;HEAP32[$localCenterA+0>>2]=HEAP32[$23+0>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$23+4>>2]|0;
  $24 = $pc;
  $25 = (($24) + 40|0);
  $26 = +HEAPF32[$25>>2];
  $mA = $26;
  $27 = $pc;
  $28 = (($27) + 64|0);
  $29 = +HEAPF32[$28>>2];
  $iA = $29;
  $30 = $pc;
  $31 = (($30) + 56|0);
  ;HEAP32[$localCenterB+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $pc;
  $33 = (($32) + 44|0);
  $34 = +HEAPF32[$33>>2];
  $mB = $34;
  $35 = $pc;
  $36 = (($35) + 68|0);
  $37 = +HEAPF32[$36>>2];
  $iB = $37;
  $38 = $pc;
  $39 = (($38) + 84|0);
  $40 = HEAP32[$39>>2]|0;
  $pointCount = $40;
  $41 = $indexA;
  $42 = (($7) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + (($41*12)|0)|0);
  ;HEAP32[$cA+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$44+4>>2]|0;
  $45 = $indexA;
  $46 = (($7) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($45*12)|0)|0);
  $49 = (($48) + 8|0);
  $50 = +HEAPF32[$49>>2];
  $aA = $50;
  $51 = $indexB;
  $52 = (($7) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($51*12)|0)|0);
  ;HEAP32[$cB+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$54+4>>2]|0;
  $55 = $indexB;
  $56 = (($7) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + (($55*12)|0)|0);
  $59 = (($58) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $aB = $60;
  $j = 0;
  while(1) {
   $61 = $j;
   $62 = $pointCount;
   $63 = ($61|0)<($62|0);
   if (!($63)) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $64 = (($xfA) + 8|0);
   $65 = $aA;
   __ZN5b2Rot3SetEf($64,$65);
   $66 = (($xfB) + 8|0);
   $67 = $aB;
   __ZN5b2Rot3SetEf($66,$67);
   $68 = (($xfA) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($2,$68,$localCenterA);
   __ZmiRK6b2Vec2S1_($1,$cA,$2);
   ;HEAP32[$xfA+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$1+4>>2]|0;
   $69 = (($xfB) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($4,$69,$localCenterB);
   __ZmiRK6b2Vec2S1_($3,$cB,$4);
   ;HEAP32[$xfB+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$3+4>>2]|0;
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $70 = $pc;
   $71 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm,$70,$xfA,$xfB,$71);
   ;HEAP32[$normal+0>>2]=HEAP32[$psm+0>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$psm+4>>2]|0;
   $72 = (($psm) + 8|0);
   ;HEAP32[$point+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$point+4>>2]=HEAP32[$72+4>>2]|0;
   $73 = (($psm) + 16|0);
   $74 = +HEAPF32[$73>>2];
   $separation = $74;
   __ZmiRK6b2Vec2S1_($rA,$point,$cA);
   __ZmiRK6b2Vec2S1_($rB,$point,$cB);
   $75 = $minSeparation;
   $76 = $separation;
   $77 = (+__Z5b2MinIfET_S0_S0_($75,$76));
   $minSeparation = $77;
   $78 = $separation;
   $79 = $78 + 0.004999999888241291;
   $80 = 0.20000000298023224 * $79;
   $81 = (+__Z7b2ClampIfET_S0_S0_S0_($80,-0.20000000298023224,0.0));
   $C = $81;
   $82 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$normal));
   $rnA = $82;
   $83 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$normal));
   $rnB = $83;
   $84 = $mA;
   $85 = $mB;
   $86 = $84 + $85;
   $87 = $iA;
   $88 = $rnA;
   $89 = $87 * $88;
   $90 = $rnA;
   $91 = $89 * $90;
   $92 = $86 + $91;
   $93 = $iB;
   $94 = $rnB;
   $95 = $93 * $94;
   $96 = $rnB;
   $97 = $95 * $96;
   $98 = $92 + $97;
   $K = $98;
   $99 = $K;
   $100 = $99 > 0.0;
   if ($100) {
    $101 = $C;
    $102 = -$101;
    $103 = $K;
    $104 = $102 / $103;
    $105 = $104;
   } else {
    $105 = 0.0;
   }
   $impulse = $105;
   $106 = $impulse;
   __ZmlfRK6b2Vec2($P,$106,$normal);
   $107 = $mA;
   __ZmlfRK6b2Vec2($5,$107,$P);
   __ZN6b2Vec2mIERKS_($cA,$5);
   $108 = $iA;
   $109 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$P));
   $110 = $108 * $109;
   $111 = $aA;
   $112 = $111 - $110;
   $aA = $112;
   $113 = $mB;
   __ZmlfRK6b2Vec2($6,$113,$P);
   __ZN6b2Vec2pLERKS_($cB,$6);
   $114 = $iB;
   $115 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$P));
   $116 = $114 * $115;
   $117 = $aB;
   $118 = $117 + $116;
   $aB = $118;
   $119 = $j;
   $120 = (($119) + 1)|0;
   $j = $120;
  }
  $121 = $indexA;
  $122 = (($7) + 24|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($121*12)|0)|0);
  ;HEAP32[$124+0>>2]=HEAP32[$cA+0>>2]|0;HEAP32[$124+4>>2]=HEAP32[$cA+4>>2]|0;
  $125 = $aA;
  $126 = $indexA;
  $127 = (($7) + 24|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + (($126*12)|0)|0);
  $130 = (($129) + 8|0);
  HEAPF32[$130>>2] = $125;
  $131 = $indexB;
  $132 = (($7) + 24|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($131*12)|0)|0);
  ;HEAP32[$134+0>>2]=HEAP32[$cB+0>>2]|0;HEAP32[$134+4>>2]=HEAP32[$cB+4>>2]|0;
  $135 = $aB;
  $136 = $indexB;
  $137 = (($7) + 24|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + (($136*12)|0)|0);
  $140 = (($139) + 8|0);
  HEAPF32[$140>>2] = $135;
  $141 = $i;
  $142 = (($141) + 1)|0;
  $i = $142;
 }
 $143 = $minSeparation;
 $144 = $143 >= -0.014999999664723873;
 STACKTOP = sp;return ($144|0);
}
function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this,$toiIndexA,$toiIndexB) {
 $this = $this|0;
 $toiIndexA = $toiIndexA|0;
 $toiIndexB = $toiIndexB|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0, $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0;
 var $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0, $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localCenterA = sp + 40|0;
 $localCenterB = sp + 48|0;
 $cA = sp + 200|0;
 $cB = sp + 224|0;
 $xfA = sp + 256|0;
 $xfB = sp + 104|0;
 $3 = sp + 120|0;
 $4 = sp + 128|0;
 $5 = sp + 136|0;
 $6 = sp + 144|0;
 $psm = sp + 152|0;
 $normal = sp + 176|0;
 $point = sp + 184|0;
 $rA = sp + 16|0;
 $rB = sp;
 $P = sp + 216|0;
 $7 = sp + 88|0;
 $8 = sp + 232|0;
 $0 = $this;
 $1 = $toiIndexA;
 $2 = $toiIndexB;
 $9 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = (($9) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = (($9) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $i;
  $17 = (($15) + (($16*88)|0)|0);
  $pc = $17;
  $18 = $pc;
  $19 = (($18) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $indexA = $20;
  $21 = $pc;
  $22 = (($21) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $indexB = $23;
  $24 = $pc;
  $25 = (($24) + 48|0);
  ;HEAP32[$localCenterA+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$localCenterA+4>>2]=HEAP32[$25+4>>2]|0;
  $26 = $pc;
  $27 = (($26) + 56|0);
  ;HEAP32[$localCenterB+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$localCenterB+4>>2]=HEAP32[$27+4>>2]|0;
  $28 = $pc;
  $29 = (($28) + 84|0);
  $30 = HEAP32[$29>>2]|0;
  $pointCount = $30;
  $mA = 0.0;
  $iA = 0.0;
  $31 = $indexA;
  $32 = $1;
  $33 = ($31|0)==($32|0);
  if ($33) {
   label = 5;
  } else {
   $34 = $indexA;
   $35 = $2;
   $36 = ($34|0)==($35|0);
   if ($36) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $37 = $pc;
   $38 = (($37) + 40|0);
   $39 = +HEAPF32[$38>>2];
   $mA = $39;
   $40 = $pc;
   $41 = (($40) + 64|0);
   $42 = +HEAPF32[$41>>2];
   $iA = $42;
  }
  $43 = $pc;
  $44 = (($43) + 44|0);
  $45 = +HEAPF32[$44>>2];
  $mB = $45;
  $46 = $pc;
  $47 = (($46) + 68|0);
  $48 = +HEAPF32[$47>>2];
  $iB = $48;
  $49 = $indexB;
  $50 = $1;
  $51 = ($49|0)==($50|0);
  if ($51) {
   label = 8;
  } else {
   $52 = $indexB;
   $53 = $2;
   $54 = ($52|0)==($53|0);
   if ($54) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $55 = $pc;
   $56 = (($55) + 44|0);
   $57 = +HEAPF32[$56>>2];
   $mB = $57;
   $58 = $pc;
   $59 = (($58) + 68|0);
   $60 = +HEAPF32[$59>>2];
   $iB = $60;
  }
  $61 = $indexA;
  $62 = (($9) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + (($61*12)|0)|0);
  ;HEAP32[$cA+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$cA+4>>2]=HEAP32[$64+4>>2]|0;
  $65 = $indexA;
  $66 = (($9) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($65*12)|0)|0);
  $69 = (($68) + 8|0);
  $70 = +HEAPF32[$69>>2];
  $aA = $70;
  $71 = $indexB;
  $72 = (($9) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + (($71*12)|0)|0);
  ;HEAP32[$cB+0>>2]=HEAP32[$74+0>>2]|0;HEAP32[$cB+4>>2]=HEAP32[$74+4>>2]|0;
  $75 = $indexB;
  $76 = (($9) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + (($75*12)|0)|0);
  $79 = (($78) + 8|0);
  $80 = +HEAPF32[$79>>2];
  $aB = $80;
  $j = 0;
  while(1) {
   $81 = $j;
   $82 = $pointCount;
   $83 = ($81|0)<($82|0);
   if (!($83)) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $84 = (($xfA) + 8|0);
   $85 = $aA;
   __ZN5b2Rot3SetEf($84,$85);
   $86 = (($xfB) + 8|0);
   $87 = $aB;
   __ZN5b2Rot3SetEf($86,$87);
   $88 = (($xfA) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($4,$88,$localCenterA);
   __ZmiRK6b2Vec2S1_($3,$cA,$4);
   ;HEAP32[$xfA+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$xfA+4>>2]=HEAP32[$3+4>>2]|0;
   $89 = (($xfB) + 8|0);
   __Z5b2MulRK5b2RotRK6b2Vec2($6,$89,$localCenterB);
   __ZmiRK6b2Vec2S1_($5,$cB,$6);
   ;HEAP32[$xfB+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$xfB+4>>2]=HEAP32[$5+4>>2]|0;
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $90 = $pc;
   $91 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm,$90,$xfA,$xfB,$91);
   ;HEAP32[$normal+0>>2]=HEAP32[$psm+0>>2]|0;HEAP32[$normal+4>>2]=HEAP32[$psm+4>>2]|0;
   $92 = (($psm) + 8|0);
   ;HEAP32[$point+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$point+4>>2]=HEAP32[$92+4>>2]|0;
   $93 = (($psm) + 16|0);
   $94 = +HEAPF32[$93>>2];
   $separation = $94;
   __ZmiRK6b2Vec2S1_($rA,$point,$cA);
   __ZmiRK6b2Vec2S1_($rB,$point,$cB);
   $95 = $minSeparation;
   $96 = $separation;
   $97 = (+__Z5b2MinIfET_S0_S0_($95,$96));
   $minSeparation = $97;
   $98 = $separation;
   $99 = $98 + 0.004999999888241291;
   $100 = 0.75 * $99;
   $101 = (+__Z7b2ClampIfET_S0_S0_S0_($100,-0.20000000298023224,0.0));
   $C = $101;
   $102 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$normal));
   $rnA = $102;
   $103 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$normal));
   $rnB = $103;
   $104 = $mA;
   $105 = $mB;
   $106 = $104 + $105;
   $107 = $iA;
   $108 = $rnA;
   $109 = $107 * $108;
   $110 = $rnA;
   $111 = $109 * $110;
   $112 = $106 + $111;
   $113 = $iB;
   $114 = $rnB;
   $115 = $113 * $114;
   $116 = $rnB;
   $117 = $115 * $116;
   $118 = $112 + $117;
   $K = $118;
   $119 = $K;
   $120 = $119 > 0.0;
   if ($120) {
    $121 = $C;
    $122 = -$121;
    $123 = $K;
    $124 = $122 / $123;
    $125 = $124;
   } else {
    $125 = 0.0;
   }
   $impulse = $125;
   $126 = $impulse;
   __ZmlfRK6b2Vec2($P,$126,$normal);
   $127 = $mA;
   __ZmlfRK6b2Vec2($7,$127,$P);
   __ZN6b2Vec2mIERKS_($cA,$7);
   $128 = $iA;
   $129 = (+__Z7b2CrossRK6b2Vec2S1_($rA,$P));
   $130 = $128 * $129;
   $131 = $aA;
   $132 = $131 - $130;
   $aA = $132;
   $133 = $mB;
   __ZmlfRK6b2Vec2($8,$133,$P);
   __ZN6b2Vec2pLERKS_($cB,$8);
   $134 = $iB;
   $135 = (+__Z7b2CrossRK6b2Vec2S1_($rB,$P));
   $136 = $134 * $135;
   $137 = $aB;
   $138 = $137 + $136;
   $aB = $138;
   $139 = $j;
   $140 = (($139) + 1)|0;
   $j = $140;
  }
  $141 = $indexA;
  $142 = (($9) + 24|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + (($141*12)|0)|0);
  ;HEAP32[$144+0>>2]=HEAP32[$cA+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$cA+4>>2]|0;
  $145 = $aA;
  $146 = $indexA;
  $147 = (($9) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($146*12)|0)|0);
  $150 = (($149) + 8|0);
  HEAPF32[$150>>2] = $145;
  $151 = $indexB;
  $152 = (($9) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + (($151*12)|0)|0);
  ;HEAP32[$154+0>>2]=HEAP32[$cB+0>>2]|0;HEAP32[$154+4>>2]=HEAP32[$cB+4>>2]|0;
  $155 = $aB;
  $156 = $indexB;
  $157 = (($9) + 24|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($156*12)|0)|0);
  $160 = (($159) + 8|0);
  HEAPF32[$160>>2] = $155;
  $161 = $i;
  $162 = (($161) + 1)|0;
  $i = $162;
 }
 $163 = $minSeparation;
 $164 = $163 >= -0.0074999998323619366;
 STACKTOP = sp;return ($164|0);
}
function __ZN7b2Mat227SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = (($1) + 8|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = (($1) + 4|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = (($1) + 8|0);
 $5 = (($4) + 4|0);
 HEAPF32[$5>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN15b2WorldManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 $3 = (($2) + 16|0);
 $4 = $2;
 while(1) {
  __ZN6b2Vec2C2Ev($4);
  $5 = (($4) + 8|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK7b2Mat2210GetInverseEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0.0;
 var $b = 0.0, $c = 0.0, $d = 0.0, $det = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $a = $2;
 $3 = (($1) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $b = $4;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $c = $6;
 $7 = (($1) + 8|0);
 $8 = (($7) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $d = $9;
 __ZN7b2Mat22C2Ev($agg$result);
 $10 = $a;
 $11 = $d;
 $12 = $10 * $11;
 $13 = $b;
 $14 = $c;
 $15 = $13 * $14;
 $16 = $12 - $15;
 $det = $16;
 $17 = $det;
 $18 = $17 != 0.0;
 if ($18) {
  $19 = $det;
  $20 = 1.0 / $19;
  $det = $20;
 }
 $21 = $det;
 $22 = $d;
 $23 = $21 * $22;
 HEAPF32[$agg$result>>2] = $23;
 $24 = $det;
 $25 = -$24;
 $26 = $b;
 $27 = $25 * $26;
 $28 = (($agg$result) + 8|0);
 HEAPF32[$28>>2] = $27;
 $29 = $det;
 $30 = -$29;
 $31 = $c;
 $32 = $30 * $31;
 $33 = (($agg$result) + 4|0);
 HEAPF32[$33>>2] = $32;
 $34 = $det;
 $35 = $a;
 $36 = $34 * $35;
 $37 = (($agg$result) + 8|0);
 $38 = (($37) + 4|0);
 HEAPF32[$38>>2] = $36;
 STACKTOP = sp;return;
}
function __Z5b2MulRK7b2Mat22RK6b2Vec2($agg$result,$A,$v) {
 $agg$result = $agg$result|0;
 $A = $A|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $A;
 $1 = $v;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = (($15) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = $0;
 $22 = (($21) + 8|0);
 $23 = (($22) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $1;
 $26 = (($25) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 * $27;
 $29 = $20 + $28;
 __ZN6b2Vec2C2Eff($agg$result,$14,$29);
 STACKTOP = sp;return;
}
function __ZN24b2PositionSolverManifoldC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this,$pc,$xfA,$xfB,$index) {
 $this = $this|0;
 $pc = $pc|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $clipPoint = 0, $clipPoint2 = 0, $planePoint = 0, $planePoint1 = 0, $pointA = 0, $pointB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pointA = sp + 32|0;
 $pointB = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 112|0;
 $7 = sp + 128|0;
 $8 = sp + 136|0;
 $9 = sp + 64|0;
 $planePoint = sp + 16|0;
 $clipPoint = sp;
 $10 = sp + 8|0;
 $11 = sp + 72|0;
 $planePoint1 = sp + 88|0;
 $clipPoint2 = sp + 48|0;
 $12 = sp + 104|0;
 $13 = sp + 24|0;
 $0 = $this;
 $1 = $pc;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $index;
 $14 = $0;
 $15 = $1;
 $16 = (($15) + 84|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if (!($18)) {
  ___assert_fail((26120|0),(25840|0),617,(26144|0));
  // unreachable;
 }
 $19 = $1;
 $20 = (($19) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 if ((($21|0) == 0)) {
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA,$22,$24);
  $25 = $3;
  $26 = $1;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB,$25,$26);
  __ZmiRK6b2Vec2S1_($5,$pointB,$pointA);
  ;HEAP32[$14+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$14+4>>2]=HEAP32[$5+4>>2]|0;
  (+__ZN6b2Vec29NormalizeEv($14));
  $27 = (($14) + 8|0);
  __ZplRK6b2Vec2S1_($7,$pointA,$pointB);
  __ZmlfRK6b2Vec2($6,0.5,$7);
  ;HEAP32[$27+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$6+4>>2]|0;
  __ZmiRK6b2Vec2S1_($8,$pointB,$pointA);
  $28 = (+__Z5b2DotRK6b2Vec2S1_($8,$14));
  $29 = $1;
  $30 = (($29) + 76|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $28 - $31;
  $33 = $1;
  $34 = (($33) + 80|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $32 - $35;
  $37 = (($14) + 16|0);
  HEAPF32[$37>>2] = $36;
  STACKTOP = sp;return;
 } else if ((($21|0) == 1)) {
  $38 = $2;
  $39 = (($38) + 8|0);
  $40 = $1;
  $41 = (($40) + 16|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($9,$39,$41);
  ;HEAP32[$14+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$14+4>>2]=HEAP32[$9+4>>2]|0;
  $42 = $2;
  $43 = $1;
  $44 = (($43) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint,$42,$44);
  $45 = $3;
  $46 = $4;
  $47 = $1;
  $48 = (($47) + ($46<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint,$45,$48);
  __ZmiRK6b2Vec2S1_($10,$clipPoint,$planePoint);
  $49 = (+__Z5b2DotRK6b2Vec2S1_($10,$14));
  $50 = $1;
  $51 = (($50) + 76|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 - $52;
  $54 = $1;
  $55 = (($54) + 80|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $53 - $56;
  $58 = (($14) + 16|0);
  HEAPF32[$58>>2] = $57;
  $59 = (($14) + 8|0);
  ;HEAP32[$59+0>>2]=HEAP32[$clipPoint+0>>2]|0;HEAP32[$59+4>>2]=HEAP32[$clipPoint+4>>2]|0;
  STACKTOP = sp;return;
 } else if ((($21|0) == 2)) {
  $60 = $3;
  $61 = (($60) + 8|0);
  $62 = $1;
  $63 = (($62) + 16|0);
  __Z5b2MulRK5b2RotRK6b2Vec2($11,$61,$63);
  ;HEAP32[$14+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$14+4>>2]=HEAP32[$11+4>>2]|0;
  $64 = $3;
  $65 = $1;
  $66 = (($65) + 24|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint1,$64,$66);
  $67 = $2;
  $68 = $4;
  $69 = $1;
  $70 = (($69) + ($68<<3)|0);
  __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint2,$67,$70);
  __ZmiRK6b2Vec2S1_($12,$clipPoint2,$planePoint1);
  $71 = (+__Z5b2DotRK6b2Vec2S1_($12,$14));
  $72 = $1;
  $73 = (($72) + 76|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $71 - $74;
  $76 = $1;
  $77 = (($76) + 80|0);
  $78 = +HEAPF32[$77>>2];
  $79 = $75 - $78;
  $80 = (($14) + 16|0);
  HEAPF32[$80>>2] = $79;
  $81 = (($14) + 8|0);
  ;HEAP32[$81+0>>2]=HEAP32[$clipPoint2+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$clipPoint2+4>>2]|0;
  __ZNK6b2Vec2ngEv($13,$14);
  ;HEAP32[$14+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$14+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN7b2Mat22C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = (($1) + 8|0);
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $2;
 $12 = $4;
 __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($9,$11,$12);
 $13 = $9;
 STACKTOP = sp;return ($13|0);
}
function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = (26160 + 8|0);
 HEAP32[$5>>2] = $8;
 $9 = (($5) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(550,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(1);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(468,(26184|0),(26232|0),41,(26336|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    // unreachable;
   }
   $21 = (($5) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_ii(550,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ($23|0)==(0);
    if ($26) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(26360|0),(26232|0),42,(26336|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $3 = $17;
 $4 = $18;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = (($4) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN22b2EdgeAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(63,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $2;
 $12 = $4;
 __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($9,$11,$12);
 $13 = $9;
 STACKTOP = sp;return ($13|0);
}
function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = (26456 + 8|0);
 HEAP32[$5>>2] = $8;
 $9 = (($5) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(550,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(1);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(468,(26480|0),(26528|0),41,(26632|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    // unreachable;
   }
   $21 = (($5) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_ii(550,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ($23|0)==(2);
    if ($26) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(26656|0),(26528|0),42,(26632|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $3 = $17;
 $4 = $18;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = (($4) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(66,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $2;
 $12 = $4;
 __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($9,$11,$12);
 $13 = $9;
 STACKTOP = sp;return ($13|0);
}
function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = (26752 + 8|0);
 HEAP32[$5>>2] = $8;
 $9 = (($5) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(550,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(2);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(468,(26776|0),(26824|0),41,(26928|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    // unreachable;
   }
   $21 = (($5) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_ii(550,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ($23|0)==(0);
    if ($26) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(26960|0),(26824|0),42,(26928|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $3 = $17;
 $4 = $18;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = (($4) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN25b2PolygonAndCircleContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(69,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA,$0,$fixtureB,$1,$allocator) {
 $fixtureA = $fixtureA|0;
 $0 = $0|0;
 $fixtureB = $fixtureB|0;
 $1 = $1|0;
 $allocator = $allocator|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = (__ZN16b2BlockAllocator8AllocateEi($7,144)|0);
 $mem = $8;
 $9 = $mem;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $11 = $2;
 $12 = $4;
 __ZN16b2PolygonContactC2EP9b2FixtureS1_($9,$11,$12);
 $13 = $9;
 STACKTOP = sp;return ($13|0);
}
function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact,$allocator) {
 $contact = $contact|0;
 $allocator = $allocator|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6,$7,144);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this,$fixtureA,$fixtureB) {
 $this = $this|0;
 $fixtureA = $fixtureA|0;
 $fixtureB = $fixtureB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5,$6,0,$7,0);
 $8 = (27056 + 8|0);
 HEAP32[$5>>2] = $8;
 $9 = (($5) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii(550,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = ($11|0)==(2);
   if (!($14)) {
    __THREW__ = 0;
    invoke_viiii(468,(27080|0),(27128|0),44,(27224|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    // unreachable;
   }
   $21 = (($5) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_ii(550,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ($23|0)==(2);
    if ($26) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_viiii(468,(27248|0),(27128|0),45,(27224|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  }
 } while(0);
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $3 = $17;
 $4 = $18;
 __THREW__ = 0;
 invoke_vi(60,($5|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 }
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this,$manifold,$xfA,$xfB) {
 $this = $this|0;
 $manifold = $manifold|0;
 $xfA = $xfA|0;
 $xfB = $xfB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN9b2Fixture8GetShapeEv($7)|0);
 $9 = $2;
 $10 = (($4) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN9b2Fixture8GetShapeEv($11)|0);
 $13 = $3;
 __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($5,$8,$9,$12,$13);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContactD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN16b2PolygonContactD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(72,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNK6b2Body8GetAngleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = (($2) + 28|0);
 $4 = +HEAPF32[$3>>2];
 STACKTOP = sp;return (+$4);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $angle = 0.0, $body = 0, $bodyDef = 0, $dynamicBox = 0, $fixtureDef = 0, $gravity = 0, $groundBody = 0, $groundBodyDef = 0, $groundBox = 0, $i = 0, $position = 0, $positionIterations = 0, $timeStep = 0.0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $velocityIterations = 0, $world = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $gravity = sp + 104480|0;
 $world = sp + 24|0;
 $groundBodyDef = sp + 104052|0;
 $groundBox = sp + 104120|0;
 $bodyDef = sp + 104272|0;
 $dynamicBox = sp + 104328|0;
 $fixtureDef = sp + 104488|0;
 $position = sp + 104536|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 __ZN6b2Vec2C2Eff($gravity,0.0,-10.0);
 __ZN7b2WorldC2ERK6b2Vec2($world,$gravity);
 __THREW__ = 0;
 invoke_vi(568,($groundBodyDef|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   label = 22;
  } else {
   $8 = (($groundBodyDef) + 4|0);
   __THREW__ = 0;
   invoke_vidd(569,($8|0),0.0,-10.0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    label = 22;
   } else {
    __THREW__ = 0;
    $11 = (invoke_iii(570,($world|0),($groundBodyDef|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 22;
    } else {
     $groundBody = $11;
     __THREW__ = 0;
     invoke_vi(571,($groundBox|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      label = 22;
     } else {
      __THREW__ = 0;
      invoke_vidd(572,($groundBox|0),50.0,10.0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      L6: do {
       if ($17) {
        label = 23;
       } else {
        $18 = $groundBody;
        __THREW__ = 0;
        (invoke_iiid(573,($18|0),($groundBox|0),0.0)|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if ($20) {
         label = 23;
        } else {
         __THREW__ = 0;
         invoke_vi(568,($bodyDef|0));
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if ($22) {
          label = 23;
         } else {
          HEAP32[$bodyDef>>2] = 2;
          $23 = (($bodyDef) + 4|0);
          __THREW__ = 0;
          invoke_vidd(569,($23|0),0.0,4.0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if ($25) {
           label = 23;
          } else {
           __THREW__ = 0;
           $26 = (invoke_iii(570,($world|0),($bodyDef|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if ($28) {
            label = 23;
           } else {
            $body = $26;
            __THREW__ = 0;
            invoke_vi(571,($dynamicBox|0));
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if ($30) {
             label = 23;
            } else {
             __THREW__ = 0;
             invoke_vidd(572,($dynamicBox|0),1.0,1.0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             L13: do {
              if (!($32)) {
               __THREW__ = 0;
               invoke_vi(574,($fixtureDef|0));
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                HEAP32[$fixtureDef>>2] = $dynamicBox;
                $35 = (($fixtureDef) + 16|0);
                HEAPF32[$35>>2] = 1.0;
                $36 = (($fixtureDef) + 8|0);
                HEAPF32[$36>>2] = 0.30000001192092896;
                $37 = $body;
                __THREW__ = 0;
                (invoke_iii(575,($37|0),($fixtureDef|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 $timeStep = 0.01666666753590107;
                 $velocityIterations = 6;
                 $positionIterations = 2;
                 $i = 0;
                 while(1) {
                  $40 = $i;
                  $41 = ($40|0)<(60);
                  if (!($41)) {
                   break;
                  }
                  $42 = $timeStep;
                  $43 = $velocityIterations;
                  $44 = $positionIterations;
                  __THREW__ = 0;
                  invoke_vidii(576,($world|0),(+$42),($43|0),($44|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   break L13;
                  }
                  $47 = $body;
                  __THREW__ = 0;
                  $48 = (invoke_ii(577,($47|0))|0);
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   break L13;
                  }
                  ;HEAP32[$position+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$position+4>>2]=HEAP32[$48+4>>2]|0;
                  $51 = $body;
                  __THREW__ = 0;
                  $52 = (+invoke_di(578,($51|0)));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   break L13;
                  }
                  $angle = $52;
                  $55 = +HEAPF32[$position>>2];
                  $56 = $55;
                  $57 = (($position) + 4|0);
                  $58 = +HEAPF32[$57>>2];
                  $59 = $58;
                  $60 = $angle;
                  $61 = $60;
                  __THREW__ = 0;
                  HEAPF64[tempDoublePtr>>3]=$56;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
                  $vararg_ptr1 = (($vararg_buffer) + 8|0);
                  HEAPF64[tempDoublePtr>>3]=$59;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
                  $vararg_ptr2 = (($vararg_buffer) + 16|0);
                  HEAPF64[tempDoublePtr>>3]=$61;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
                  (invoke_iii(467,(27336|0),($vararg_buffer|0))|0);
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if ($63) {
                   break L13;
                  }
                  $64 = $i;
                  $65 = (($64) + 1)|0;
                  $i = $65;
                 }
                 $0 = 0;
                 $5 = 1;
                 __THREW__ = 0;
                 invoke_vi(12,($dynamicBox|0));
                 $74 = __THREW__; __THREW__ = 0;
                 $75 = $74&1;
                 if ($75) {
                  label = 23;
                  break L6;
                 }
                 __THREW__ = 0;
                 invoke_vi(12,($groundBox|0));
                 $76 = __THREW__; __THREW__ = 0;
                 $77 = $76&1;
                 if ($77) {
                  label = 22;
                  break L1;
                 }
                 __ZN7b2WorldD2Ev($world);
                 $78 = $0;
                 STACKTOP = sp;return ($78|0);
                }
               }
              }
             } while(0);
             $70 = ___cxa_find_matching_catch()|0;
             $71 = tempRet0;
             $3 = $70;
             $4 = $71;
             __THREW__ = 0;
             invoke_vi(12,($dynamicBox|0));
             $72 = __THREW__; __THREW__ = 0;
             $73 = $72&1;
             if ($73) {
              $85 = ___cxa_find_matching_catch(0|0)|0;
              $86 = tempRet0;
              ___clang_call_terminate($85);
              // unreachable;
             } else {
              break;
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 23) {
       $68 = ___cxa_find_matching_catch()|0;
       $69 = tempRet0;
       $3 = $68;
       $4 = $69;
      }
      __THREW__ = 0;
      invoke_vi(12,($groundBox|0));
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       $85 = ___cxa_find_matching_catch(0|0)|0;
       $86 = tempRet0;
       ___clang_call_terminate($85);
       // unreachable;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $3 = $66;
  $4 = $67;
 }
 __THREW__ = 0;
 invoke_vi(579,($world|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $85 = ___cxa_find_matching_catch(0|0)|0;
  $86 = tempRet0;
  ___clang_call_terminate($85);
  // unreachable;
 }
 $83 = $3;
 $84 = $4;
 ___resumeException($83|0);
 // unreachable;
 return 0|0;
}
function __ZN9b2BodyDefC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 __ZN6b2Vec2C2Ev($2);
 $3 = (($1) + 16|0);
 __ZN6b2Vec2C2Ev($3);
 $4 = (($1) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 4|0);
 __ZN6b2Vec23SetEff($5,0.0,0.0);
 $6 = (($1) + 12|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = (($1) + 16|0);
 __ZN6b2Vec23SetEff($7,0.0,0.0);
 $8 = (($1) + 24|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = (($1) + 28|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = (($1) + 32|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = (($1) + 36|0);
 HEAP8[$11>>0] = 1;
 $12 = (($1) + 37|0);
 HEAP8[$12>>0] = 1;
 $13 = (($1) + 38|0);
 HEAP8[$13>>0] = 0;
 $14 = (($1) + 39|0);
 HEAP8[$14>>0] = 0;
 HEAP32[$1>>2] = 0;
 $15 = (($1) + 40|0);
 HEAP8[$15>>0] = 1;
 $16 = (($1) + 48|0);
 HEAPF32[$16>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZNK6b2Body11GetPositionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(28072,$0,28128);
 HEAP32[27360>>2] = ((29320 + 12|0));
 HEAP32[((27360 + 8|0))>>2] = ((29320 + 32|0));
 HEAP32[((27360 + 4|0))>>2] = 0;
 $1 = HEAP32[29320>>2]|0;
 $2 = (27360 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(431,($2|0),(28072|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((27360 + 8|0)));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (27360 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (27360 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(28176,$9,((28128 + 8|0)));
 HEAP32[27448>>2] = ((29400 + 12|0));
 HEAP32[((27448 + 4|0))>>2] = ((29400 + 32|0));
 $10 = HEAP32[29400>>2]|0;
 $11 = (27448 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(431,($11|0),(28176|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((27448 + 4|0)));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (27448 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (27448 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(28224,$18,((28128 + 16|0)));
 HEAP32[27536>>2] = ((29400 + 12|0));
 HEAP32[((27536 + 4|0))>>2] = ((29400 + 32|0));
 $19 = (27536 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(431,($19|0),(28224|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((27536 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (27536 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (27536 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[27536>>2]|0;
 $27 = (($26) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (27536 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[27624>>2] = ((29400 + 12|0));
 HEAP32[((27624 + 4|0))>>2] = ((29400 + 32|0));
 $31 = (27624 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(431,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((27624 + 4|0)));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (27624 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (27624 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[27360>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (27360 + ($$sum19)|0);
 HEAP32[$41>>2] = 27448;
 $42 = HEAP32[27536>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (27536 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[27536>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (27536 + ($$sum21)|0);
 HEAP32[$51>>2] = 27448;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(28272,$0,((28128 + 24|0)));
 HEAP32[27712>>2] = ((29360 + 12|0));
 HEAP32[((27712 + 8|0))>>2] = ((29360 + 32|0));
 HEAP32[((27712 + 4|0))>>2] = 0;
 $52 = HEAP32[29360>>2]|0;
 $53 = (27712 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(431,($53|0),(28272|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((27712 + 8|0)));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (27712 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (27712 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(28328,$9,((28128 + 32|0)));
 HEAP32[27800>>2] = ((29440 + 12|0));
 HEAP32[((27800 + 4|0))>>2] = ((29440 + 32|0));
 $60 = HEAP32[29440>>2]|0;
 $61 = (27800 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(431,($61|0),(28328|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((27800 + 4|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (27800 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (27800 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(28376,$18,((28128 + 40|0)));
 HEAP32[27888>>2] = ((29440 + 12|0));
 HEAP32[((27888 + 4|0))>>2] = ((29440 + 32|0));
 $68 = (27888 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(431,($68|0),(28376|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((27888 + 4|0)));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (27888 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (27888 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[27888>>2]|0;
 $76 = (($75) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (27888 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[27976>>2] = ((29440 + 12|0));
 HEAP32[((27976 + 4|0))>>2] = ((29440 + 32|0));
 $80 = (27976 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(431,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((27976 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (27976 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (27976 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[27712>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (27712 + ($$sum23)|0);
  HEAP32[$90>>2] = 27800;
  $91 = HEAP32[27888>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (27888 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[27888>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (27888 + ($$sum25)|0);
  HEAP32[$100>>2] = 27800;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(580,(27448|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(580,(27624|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(581,(27800|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(581,(27976|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40408 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(582,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40432 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(582,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40432 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(582,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
  ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$what_arg>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = $3&255;
  $9 = $8 >>> 1;
  $11 = $9;
 } else {
  $6 = (($what_arg) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 }
 $10 = ($11|0)==(0);
 if ($10) {
  $17 = $1;
 } else {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,28936)|0);
  $$pre = HEAP32[$ec>>2]|0;
  $17 = $$pre;
 }
 $12 = (($ec) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
 $18 = HEAP8[$0>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $25 = (($0) + 1|0);
  $26 = $18&255;
  $27 = $26 >>> 1;
  $28 = $25;$29 = $27;
 } else {
  $21 = (($0) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $28 = $22;$29 = $24;
 }
 __THREW__ = 0;
 (invoke_iiii(583,($what_arg|0),($28|0),($29|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(584,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $19;$$01 = $18;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(585,($this|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  HEAP32[$this>>2] = ((28944 + 8|0));
  $7 = (($this) + 8|0);
  $8 = $ec;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $7;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $$0 = $21;$$01 = $20;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((29088|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((29112|0),(29088|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((29088|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(586,(29088|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(587,(29088|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(586,(29088|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(588,(29112|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(587,(29088|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(586,(29088|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(588,(29112|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(589);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(429);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(590,($0|0),(29160|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((40488 + 8|0));
  ___cxa_throw(($0|0),(40536|0),(393|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0;
 var $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $42 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(420,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 1|0);
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $42 & 1;
 $43 = ($41<<24>>24)==(0);
 if ($43) {
  $46 = $42&255;
  $47 = $46 >>> 1;
  $49 = $47;
 } else {
  $44 = (($this) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $49 = $45;
 }
 $48 = (($49) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($48|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $50 = (($21) + 1)|0;
  $51 = $50 | 1;
  HEAP32[$this>>2] = $51;
  $52 = (($this) + 4|0);
  HEAP32[$52>>2] = $15;
  $53 = (($this) + 8|0);
  HEAP32[$53>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $54 = $15 << 1;
  $55 = $54&255;
  HEAP8[$this>>0] = $55;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0;
 var $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $43 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(420,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = HEAP8[$this>>0]|0;
   $37 = $36 & 1;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $41 = (($this) + 4|0);
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $41;$__was_long$0$off0 = 0;
    break;
   } else {
    $39 = (($this) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $42 = $43 & 1;
 $44 = ($42<<24>>24)==(0);
 if ($44) {
  $47 = $43&255;
  $48 = $47 >>> 1;
  $50 = $48;
 } else {
  $45 = (($this) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $50 = $46;
 }
 $49 = (($50) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$49)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $51 = (($21) + 1)|0;
  $52 = $51 | 1;
  HEAP32[$this>>2] = $52;
  $53 = (($this) + 4|0);
  HEAP32[$53>>2] = $15;
  $54 = (($this) + 8|0);
  HEAP32[$54>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $55 = $15 << 1;
  $56 = $55&255;
  HEAP8[$this>>0] = $56;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = 1;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = (29536);
 __THREW__ = 0;
 invoke_viii(591,($13|0),(29592|0),($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($20|0);
  // unreachable;
 } else {
  ___cxa_throw(($13|0),(29640|0),(137|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29576 + 8|0));
 __THREW__ = 0;
 invoke_vii(592,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 32|0);
 $4 = (($this) + 36|0);
 $i$01 = $1;
 while(1) {
  $5 = (($i$01) + -1)|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $12 = ($5|0)==(0);
  if ($12) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29192 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29192 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29192 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29192 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29256 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29256 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29256 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((29256 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 7;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = (($$01) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$01 = $14;$__i$02 = $13;
  } else {
   $__i$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $14 = (($$02) + 4|0);
  $15 = (($__i$01) + 1)|0;
  $16 = ($15|0)<($__n|0);
  if ($16) {
   $$02 = $14;$__i$01 = $15;
  } else {
   $__i$0$lcssa = $15;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$sum = 0, $$sum$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $isascii1$i = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $94 = (($__is) + ($3)|0);
  $95 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($94,$95);
  STACKTOP = sp;return;
 }
 $$sum13 = (($3) + 72)|0;
 $7 = (($__is) + ($$sum13)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 do {
  if (!($__noskipws)) {
   $10 = HEAP32[$__is>>2]|0;
   $11 = (($10) + -12|0);
   $12 = HEAP32[$11>>2]|0;
   $$sum14 = (($12) + 4)|0;
   $13 = (($__is) + ($$sum14)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$sum15 = (($12) + 28)|0;
    $17 = (($__is) + ($$sum15)|0);
    __ZNSt3__16localeC2ERKS0_($0,$17);
    __THREW__ = 0;
    $18 = (invoke_iii(436,($0|0),(31960|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     __ZNSt3__16localeD2Ev($0);
     ___resumeException($59|0);
     // unreachable;
    }
    __ZNSt3__16localeD2Ev($0);
    $21 = HEAP32[$__is>>2]|0;
    $22 = (($21) + -12|0);
    $23 = HEAP32[$22>>2]|0;
    $$sum$i = (($23) + 24)|0;
    $24 = (($__is) + ($$sum$i)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($18) + 8|0);
    $28 = $25;
    while(1) {
     $27 = ($28|0)==(0|0);
     if ($27) {
      break;
     }
     $29 = (($28) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($28) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$28>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
      $38 = ($37|0)==(-1);
      $$ = $38 ? 0 : $28;
      $39 = ($$|0)==(0|0);
      if ($39) {
       break;
      } else {
       $41 = $$;
      }
     } else {
      $41 = $28;
     }
     $40 = (($41) + 12|0);
     $42 = HEAP32[$40>>2]|0;
     $43 = (($41) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42|0)==($44|0);
     if ($45) {
      $46 = HEAP32[$41>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_ii[$48 & 1023]($41)|0);
      $$0$i$i = $49;
     } else {
      $50 = HEAP8[$42>>0]|0;
      $51 = $50&255;
      $$0$i$i = $51;
     }
     $52 = $$0$i$i&255;
     $isascii1$i = ($52<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 20;
      break;
     }
     $sext = $$0$i$i << 24;
     $53 = $sext >> 24;
     $54 = HEAP32[$26>>2]|0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56 & 8192;
     $58 = ($57<<16>>16)==(0);
     if ($58) {
      label = 20;
      break;
     }
     $61 = HEAP32[$40>>2]|0;
     $62 = HEAP32[$43>>2]|0;
     $63 = ($61|0)==($62|0);
     if ($63) {
      $64 = HEAP32[$41>>2]|0;
      $65 = (($64) + 40|0);
      $66 = HEAP32[$65>>2]|0;
      (FUNCTION_TABLE_ii[$66 & 1023]($41)|0);
      $28 = $41;
      continue;
     } else {
      $67 = (($61) + 1|0);
      HEAP32[$40>>2] = $67;
      $28 = $41;
      continue;
     }
    }
    if ((label|0) == 20) {
     $68 = ($41|0)==(0|0);
     if (!($68)) {
      $69 = (($41) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($41) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if (!($73)) {
       break;
      }
      $74 = HEAP32[$41>>2]|0;
      $75 = (($74) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 1023]($41)|0);
      $78 = ($77|0)==(-1);
      $79 = ($41|0)==(0|0);
      $or$cond = $78 | $79;
      if (!($or$cond)) {
       break;
      }
     }
    }
    $80 = HEAP32[$__is>>2]|0;
    $81 = (($80) + -12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($__is) + ($82)|0);
    $$sum17 = (($82) + 16)|0;
    $84 = (($__is) + ($$sum17)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85 | 6;
    __ZNSt3__18ios_base5clearEj($83,$86);
   }
  }
 } while(0);
 $87 = HEAP32[$__is>>2]|0;
 $88 = (($87) + -12|0);
 $89 = HEAP32[$88>>2]|0;
 $$sum16 = (($89) + 16)|0;
 $90 = (($__is) + ($$sum16)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0);
 $93 = $92&1;
 HEAP8[$this>>0] = $93;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(593,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(434,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(594,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(429);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($this,$__s,$__n,$__dlm) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 $__dlm = $__dlm|0;
 var $$0 = 0, $$0$i6 = 0, $$__err$0 = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $__err$0 = 0, $__sen = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sen = sp;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 __THREW__ = 0;
 invoke_viii(595,($__sen|0),($this|0),1);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   label = 9;
  } else {
   $3 = HEAP8[$__sen>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    STACKTOP = sp;return ($this|0);
   }
   $5 = (($__n) + -1)|0;
   $$0 = $__s;
   while(1) {
    $6 = HEAP32[$this>>2]|0;
    $7 = (($6) + -12|0);
    $8 = HEAP32[$7>>2]|0;
    $$sum = (($8) + 24)|0;
    $9 = (($this) + ($$sum)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($10) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12|0)==($14|0);
    if ($15) {
     $16 = HEAP32[$10>>2]|0;
     $17 = (($16) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     __THREW__ = 0;
     $19 = (invoke_ii($18|0,($10|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 8;
      break;
     }
     $24 = ($19|0)==(-1);
     if ($24) {
      $__err$0 = 2;
      break;
     } else {
      $$0$i6 = $19;
     }
    } else {
     $22 = HEAP8[$12>>0]|0;
     $23 = $22&255;
     $$0$i6 = $23;
    }
    $35 = $$0$i6&255;
    $36 = ($35<<24>>24)==($__dlm<<24>>24);
    if ($36) {
     label = 14;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    $56 = ($55|0)<($5|0);
    if (!($56)) {
     $__err$0 = 4;
     break;
    }
    $57 = (($$0) + 1|0);
    HEAP8[$$0>>0] = $35;
    $58 = HEAP32[$this>>2]|0;
    $59 = (($58) + -12|0);
    $60 = HEAP32[$59>>2]|0;
    $$sum8 = (($60) + 24)|0;
    $61 = (($this) + ($$sum8)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($64|0)==($66|0);
    if ($67) {
     $68 = HEAP32[$62>>2]|0;
     $69 = (($68) + 40|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     (invoke_ii($70|0,($62|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      label = 8;
      break;
     }
    } else {
     $73 = (($64) + 1|0);
     HEAP32[$63>>2] = $73;
    }
    $74 = HEAP32[$0>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[$0>>2] = $75;
    $$0 = $57;
   }
   if ((label|0) == 8) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    $$pre$phi22Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $25;
    break;
   }
   if ((label|0) == 14) {
    $37 = HEAP32[$this>>2]|0;
    $38 = (($37) + -12|0);
    $39 = HEAP32[$38>>2]|0;
    $$sum9 = (($39) + 24)|0;
    $40 = (($this) + ($$sum9)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if ($46) {
     $47 = HEAP32[$41>>2]|0;
     $48 = (($47) + 40|0);
     $49 = HEAP32[$48>>2]|0;
     __THREW__ = 0;
     (invoke_ii($49|0,($41|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 9;
      break;
     }
    } else {
     $52 = (($43) + 1|0);
     HEAP32[$42>>2] = $52;
    }
    $53 = HEAP32[$0>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$0>>2] = $54;
    $__err$0 = 0;
   }
   $76 = ($__n|0)>(0);
   if ($76) {
    HEAP8[$$0>>0] = 0;
   }
   $77 = HEAP32[$0>>2]|0;
   $78 = ($77|0)==(0);
   $79 = $__err$0 | 4;
   $$__err$0 = $78 ? $79 : $__err$0;
   $80 = HEAP32[$this>>2]|0;
   $81 = (($80) + -12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($this) + ($82)|0);
   $$sum7 = (($82) + 16)|0;
   $84 = (($this) + ($$sum7)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $85 | $$__err$0;
   __THREW__ = 0;
   invoke_vii(434,($83|0),($86|0));
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   if ($88) {
    label = 9;
   } else {
    STACKTOP = sp;return ($this|0);
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  $$pre$phi22Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $27;
 }
 (___cxa_begin_catch(($lpad$phi$index|0))|0);
 $29 = HEAP32[$$pre$phiZ2D>>2]|0;
 $30 = (($29) + -12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($$pre$phi22Z2D) + ($31)|0);
 __THREW__ = 0;
 invoke_vi(594,($32|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $89 = ___cxa_find_matching_catch()|0;
 $90 = tempRet0;
 __THREW__ = 0;
 invoke_v(429);
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $93 = ___cxa_find_matching_catch(0|0)|0;
  $94 = tempRet0;
  ___clang_call_terminate($93);
  // unreachable;
 } else {
  ___resumeException($89|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(596,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(434,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(594,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(429);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(434,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(429);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(434,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(429);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (29480|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,29496,35);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[29544>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((29544|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[29536>>2] = ((30232 + 8|0));
   (___cxa_atexit((141|0),(29536|0),(___dso_handle|0))|0);
   ___cxa_guard_release((29544|0));
  }
 }
 STACKTOP = sp;return (29536|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((29552 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(436,($3|0),(31960|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(436,($4|0),(32104|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(597,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 188|0;
 $0 = sp + 200|0;
 $__buf = sp + 8|0;
 $__a_end = sp + 4|0;
 $__g = sp + 24|0;
 $__g_end = sp + 184|0;
 $__dc = sp + 204|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(435,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(436,($0|0),(31960|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(30472|0),(((30472 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(598,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 39;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre36 = (($__buf) + 8|0);
      $$pre$phi35Z2D = $19;$$pre$phi37Z2D = $$pre36;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre34 = (($__buf) + 1|0);
      $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i8 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i8|0)==(0|0);
      if ($22) {
       $36 = 0;
      } else {
       $23 = (($$pre$i$i$i8) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i8) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i8>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 38;
         break;
        }
        $34 = ($31|0)==(-1);
        if ($34) {
         HEAP32[$__b>>2] = 0;
         $36 = 0;
        } else {
         $36 = $$pre$i$i$i8;
        }
       } else {
        $36 = $$pre$i$i$i8;
       }
      }
      $35 = ($36|0)==(0|0);
      $37 = HEAP32[$__e>>2]|0;
      $38 = ($37|0)==(0|0);
      do {
       if ($38) {
        label = 20;
       } else {
        $39 = (($37) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (($37) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($40|0)==($42|0);
        if (!($43)) {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
        $44 = HEAP32[$37>>2]|0;
        $45 = (($44) + 36|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_ii($46|0,($37|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 38;
         break L14;
        }
        $50 = ($47|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 20;
         break;
        } else {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 20) {
       label = 0;
       if ($35) {
        $$pre$i2$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(598,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 38;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i24 = (($74) + -1)|0;
        $75 = $phitmp$i24;
       }
       __THREW__ = 0;
       invoke_viii(598,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 38;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi35Z2D;
       } else {
        $81 = HEAP32[$$pre$phi37Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($36) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($36) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = HEAP32[$36>>2]|0;
       $100 = (($99) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_ii($101|0,($36|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 38;
        break;
       } else {
        $$0$i$i = $102;
       }
      } else {
       $105 = HEAP8[$95>>0]|0;
       $106 = $105&255;
       $$0$i$i = $106;
      }
      $107 = $$0$i$i&255;
      $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $109 = ($108|0)==(0);
      if (!($109)) {
       $$pre$i2$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $110 = HEAP32[$94>>2]|0;
      $111 = HEAP32[$96>>2]|0;
      $112 = ($110|0)==($111|0);
      if ($112) {
       $113 = HEAP32[$36>>2]|0;
       $114 = (($113) + 40|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       (invoke_ii($115|0,($36|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 38;
        break;
       } else {
        $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $118 = (($110) + 1|0);
       HEAP32[$94>>2] = $118;
       $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 38) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $119 = HEAP32[$__a_end>>2]|0;
     $120 = $119;
     $121 = $__a$2;
     $122 = (($120) - ($121))|0;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($122|0),0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      label = 39;
     } else {
      $125 = HEAP8[$__buf>>0]|0;
      $126 = $125 & 1;
      $127 = ($126<<24>>24)==(0);
      if ($127) {
       $132 = $$pre$phi35Z2D;
      } else {
       $128 = HEAP32[$$pre$phi37Z2D>>2]|0;
       $132 = $128;
      }
      __THREW__ = 0;
      $129 = (invoke_i(599)|0);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       label = 39;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $133 = (invoke_iiiii(600,($132|0),($129|0),(30512|0),($vararg_buffer|0))|0);
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        label = 39;
       } else {
        $136 = ($133|0)==(1);
        if (!($136)) {
         HEAP32[$__err>>2] = 4;
        }
        $137 = ($36|0)==(0|0);
        if ($137) {
         $151 = 0;
        } else {
         $138 = (($36) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($36) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if ($142) {
          $143 = HEAP32[$36>>2]|0;
          $144 = (($143) + 36|0);
          $145 = HEAP32[$144>>2]|0;
          __THREW__ = 0;
          $146 = (invoke_ii($145|0,($36|0))|0);
          $147 = __THREW__; __THREW__ = 0;
          $148 = $147&1;
          if ($148) {
           label = 39;
           break;
          }
          $149 = ($146|0)==(-1);
          if ($149) {
           HEAP32[$__b>>2] = 0;
           $151 = 0;
          } else {
           $151 = $36;
          }
         } else {
          $151 = $36;
         }
        }
        $150 = ($151|0)==(0|0);
        $152 = ($$pre$i2$i$i|0)==(0|0);
        do {
         if ($152) {
          label = 66;
         } else {
          $153 = (($$pre$i2$i$i) + 12|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = (($$pre$i2$i$i) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($154|0)==($156|0);
          if (!($157)) {
           if (!($150)) {
            break;
           }
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $158 = HEAP32[$$pre$i2$i$i>>2]|0;
          $159 = (($158) + 36|0);
          $160 = HEAP32[$159>>2]|0;
          __THREW__ = 0;
          $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
          $162 = __THREW__; __THREW__ = 0;
          $163 = $162&1;
          if ($163) {
           label = 39;
           break L8;
          }
          $164 = ($161|0)==(-1);
          if ($164) {
           HEAP32[$__e>>2] = 0;
           label = 66;
           break;
          }
          $165 = ($$pre$i2$i$i|0)==(0|0);
          $tmp$i$i = $150 ^ $165;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 66) {
         if (!($150)) {
          HEAP32[$agg$result>>2] = $151;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $166 = HEAP32[$__err>>2]|0;
        $167 = $166 | 2;
        HEAP32[$__err>>2] = $167;
        HEAP32[$agg$result>>2] = $151;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (30472 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (30472 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[31856>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((31856|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(601,2147483647,(31864|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((31856|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[31848>>2] = $4;
     ___cxa_guard_release((31856|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[31848>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(436,($3|0),(31952|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(436,($4|0),(32112|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(602,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 188|0;
 $0 = sp + 8|0;
 $__buf = sp + 176|0;
 $__a_end = sp + 4|0;
 $__g = sp + 16|0;
 $__g_end = sp + 304|0;
 $__dc = sp + 308|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(435,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(436,($0|0),(31952|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(30472|0),(((30472 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(598,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 40;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre39 = (($__buf) + 8|0);
      $$pre$phi38Z2D = $19;$$pre$phi40Z2D = $$pre39;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre37 = (($__buf) + 1|0);
      $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i9 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i9|0)==(0|0);
      if ($22) {
       $167 = 1;$95 = 0;
      } else {
       $23 = (($$pre$i$i$i9) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i9) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i9>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 39;
         break;
        } else {
         $$0$i$i$i$i7 = $31;
        }
       } else {
        $34 = HEAP32[$24>>2]|0;
        $$0$i$i$i$i7 = $34;
       }
       $35 = ($$0$i$i$i$i7|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $167 = 1;$95 = 0;
       } else {
        $167 = 0;$95 = $$pre$i$i$i9;
       }
      }
      $36 = HEAP32[$__e>>2]|0;
      $37 = ($36|0)==(0|0);
      do {
       if ($37) {
        label = 21;
       } else {
        $38 = (($36) + 12|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = (($36) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($39|0)==($41|0);
        if ($42) {
         $43 = HEAP32[$36>>2]|0;
         $44 = (($43) + 36|0);
         $45 = HEAP32[$44>>2]|0;
         __THREW__ = 0;
         $46 = (invoke_ii($45|0,($36|0))|0);
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          label = 39;
          break L14;
         } else {
          $$0$i$i1$i$i13 = $46;
         }
        } else {
         $49 = HEAP32[$39>>2]|0;
         $$0$i$i1$i$i13 = $49;
        }
        $50 = ($$0$i$i1$i$i13|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($167) {
          $168 = $36;
          break;
         } else {
          $$pre$i3$i$i = $36;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($167) {
        $$pre$i3$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(598,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 39;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i28 = (($74) + -1)|0;
        $75 = $phitmp$i28;
       }
       __THREW__ = 0;
       invoke_viii(598,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 39;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi38Z2D;
       } else {
        $81 = HEAP32[$$pre$phi40Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($95) + 12|0);
      $96 = HEAP32[$94>>2]|0;
      $97 = (($95) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$95>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($95|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 39;
        break;
       } else {
        $$0$i$i = $103;
       }
      } else {
       $106 = HEAP32[$96>>2]|0;
       $$0$i$i = $106;
      }
      $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $108 = ($107|0)==(0);
      if (!($108)) {
       $$pre$i3$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $109 = HEAP32[$94>>2]|0;
      $110 = HEAP32[$97>>2]|0;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = HEAP32[$95>>2]|0;
       $113 = (($112) + 40|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       (invoke_ii($114|0,($95|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $117 = (($109) + 4|0);
       HEAP32[$94>>2] = $117;
       $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $118 = HEAP32[$__a_end>>2]|0;
     $119 = $118;
     $120 = $__a$2;
     $121 = (($119) - ($120))|0;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($121|0),0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      label = 40;
     } else {
      $124 = HEAP8[$__buf>>0]|0;
      $125 = $124 & 1;
      $126 = ($125<<24>>24)==(0);
      if ($126) {
       $131 = $$pre$phi38Z2D;
      } else {
       $127 = HEAP32[$$pre$phi40Z2D>>2]|0;
       $131 = $127;
      }
      __THREW__ = 0;
      $128 = (invoke_i(599)|0);
      $129 = __THREW__; __THREW__ = 0;
      $130 = $129&1;
      if ($130) {
       label = 40;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $132 = (invoke_iiiii(600,($131|0),($128|0),(30512|0),($vararg_buffer|0))|0);
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 40;
       } else {
        $135 = ($132|0)==(1);
        if (!($135)) {
         HEAP32[$__err>>2] = 4;
        }
        $136 = ($95|0)==(0|0);
        if ($136) {
         $166 = 0;$169 = 1;
        } else {
         $137 = (($95) + 12|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = (($95) + 16|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($138|0)==($140|0);
         if ($141) {
          $142 = HEAP32[$95>>2]|0;
          $143 = (($142) + 36|0);
          $144 = HEAP32[$143>>2]|0;
          __THREW__ = 0;
          $145 = (invoke_ii($144|0,($95|0))|0);
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if ($147) {
           label = 40;
           break;
          } else {
           $$0$i$i$i$i = $145;
          }
         } else {
          $148 = HEAP32[$138>>2]|0;
          $$0$i$i$i$i = $148;
         }
         $149 = ($$0$i$i$i$i|0)==(-1);
         if ($149) {
          HEAP32[$__b>>2] = 0;
          $166 = 0;$169 = 1;
         } else {
          $166 = $95;$169 = 0;
         }
        }
        $150 = ($$pre$i3$i$i|0)==(0|0);
        do {
         if ($150) {
          label = 68;
         } else {
          $151 = (($$pre$i3$i$i) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($$pre$i3$i$i) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$$pre$i3$i$i>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 40;
            break L8;
           } else {
            $$0$i$i1$i$i = $159;
           }
          } else {
           $162 = HEAP32[$152>>2]|0;
           $$0$i$i1$i$i = $162;
          }
          $163 = ($$0$i$i1$i$i|0)==(-1);
          if ($163) {
           HEAP32[$__e>>2] = 0;
           label = 68;
           break;
          }
          if ($169) {
           HEAP32[$agg$result>>2] = $166;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 68) {
         if (!($169)) {
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $164 = HEAP32[$__err>>2]|0;
        $165 = $164 | 2;
        HEAP32[$__err>>2] = $165;
        HEAP32[$agg$result>>2] = $166;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (30472 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (30472 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(436,($__loc|0),(31960|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(30472|0),(((30472 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(436,($__loc|0),(32104|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(436,($__loc|0),(31960|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(30472|0),(((30472 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(436,($__loc|0),(32104|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (30472 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(436,($__loc|0),(31952|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(30472|0),(((30472 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(436,($__loc|0),(32112|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(436,($__loc|0),(31952|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(30472|0),(((30472 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(436,($__loc|0),(32112|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (30472 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(436,($1|0),(32104|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $59 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
  $$0 = $57;$$01 = $58;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
 }
 $26 = (($__nm) + 4|0);
 $28 = $20;$38 = $$ph;
 L17: while(1) {
  $27 = $28 & 1;
  $29 = ($27<<24>>24)==(0);
  if ($29) {
   $32 = $28&255;
   $33 = $32 >>> 1;
   $35 = $$pre$phi4Z2D;$36 = $33;
  } else {
   $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $31 = HEAP32[$26>>2]|0;
   $35 = $30;$36 = $31;
  }
  $34 = (($35) + ($36)|0);
  $37 = ($38|0)==($34|0);
  if ($37) {
   label = 24;
   break;
  }
  $39 = HEAP8[$38>>0]|0;
  $40 = HEAP32[$__s>>2]|0;
  $41 = ($40|0)==(0|0);
  do {
   if (!($41)) {
    $42 = (($40) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($40) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if (!($46)) {
     $47 = (($43) + 1|0);
     HEAP32[$42>>2] = $47;
     HEAP8[$43>>0] = $39;
     break;
    }
    $48 = HEAP32[$40>>2]|0;
    $49 = (($48) + 52|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $39&255;
    __THREW__ = 0;
    $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 23;
     break L17;
    }
    $55 = ($52|0)==(-1);
    if ($55) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $56 = (($38) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $28 = $$pre;$38 = $56;
 }
 if ((label|0) == 23) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  $$0 = $60;$$01 = $61;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $62 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $62;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30752+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30752+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,30656,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(603,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31960)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32104)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L24: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$010)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$12 = $84 ? $79 : $89;
        $90 = (($$12) + ($__dg$010)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$09|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 1|0);
         HEAP32[$__oe>>2] = $95;
         HEAP8[$94>>0] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$010>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $106 = HEAP8[$__p$011>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 28|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 1|0);
       HEAP32[$__oe>>2] = $114;
       HEAP8[$113>>0] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$011) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$09 = $115;$__dg$010 = $__dg$1;$__p$011 = $116;
       } else {
        break L24;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120)|0);
    $122 = HEAP32[$__oe>>2]|0;
    $123 = ($121|0)==($122|0);
    if (!($123)) {
     $124 = (($122) + -1|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP8[$$012$i$i>>0]|0;
       $127 = HEAP8[$128>>0]|0;
       HEAP8[$$012$i$i>>0] = $127;
       HEAP8[$128>>0] = $126;
       $129 = (($$012$i$i) + 1|0);
       $130 = (($128) + -1|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $133 = HEAP32[$__oe>>2]|0;
  $storemerge = $133;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $134 = $__np;
  $135 = $__nb;
  $136 = (($134) - ($135))|0;
  $137 = (($__ob) + ($136)|0);
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,30664,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(603,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30752+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30752+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,30656,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(603,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,30664,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(603,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 68|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,30672,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(599)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(604,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(599)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(604,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$69 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(605);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$69 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$69 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 1;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(605);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $88 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $52 = $$pre10;$63 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(435,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $88 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(606,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $76 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($76)|0);
     $$0 = $74;$$01 = $75;$78 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(607,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $88 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if (!($62)) {
      __THREW__ = 0;
      invoke_vi(608,($63|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $66 = ___cxa_find_matching_catch(0|0)|0;
       $67 = tempRet0;
       ___clang_call_terminate($66);
       // unreachable;
      }
     }
     $68 = ($69|0)==(0|0);
     if ($68) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(608,($69|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      $72 = ___cxa_find_matching_catch(0|0)|0;
      $73 = tempRet0;
      ___clang_call_terminate($72);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$78 = $88;
 }
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  __THREW__ = 0;
  invoke_vi(608,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 $83 = ($69|0)==(0|0);
 if ($83) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(608,($69|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 } else {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$47 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31960)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32104)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$034 = $42;
        while(1) {
         $55 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(599)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(609,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$034) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$034;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$034 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$126 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(599)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(610,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$126) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$126 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$019)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$47 = $116 ? $111 : $121;
        $122 = (($$47) + ($__dg$019)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$018|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 1|0);
         HEAP32[$__oe>>2] = $127;
         HEAP8[$126>>0] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$019>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$019))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
        }
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $138 = HEAP8[$__p$020>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 28|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 1|0);
       HEAP32[$__oe>>2] = $146;
       HEAP8[$145>>0] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$020) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$018 = $147;$__dg$019 = $__dg$1;$__p$020 = $148;
       } else {
        break L43;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152)|0);
    $154 = HEAP32[$__oe>>2]|0;
    $155 = ($153|0)==($154|0);
    if (!($155)) {
     $156 = (($154) + -1|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP8[$$012$i$i7>>0]|0;
       $159 = HEAP8[$160>>0]|0;
       HEAP8[$$012$i$i7>>0] = $159;
       HEAP8[$160>>0] = $158;
       $161 = (($$012$i$i7) + 1|0);
       $162 = (($160) + -1|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        break;
       }
      }
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L63: do {
    if ($164) {
     $__nf$214 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$214>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 51;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 28|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 1|0);
      HEAP32[$__oe>>2] = $183;
      HEAP8[$182>>0] = $179;
      $184 = (($__nf$214) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$214 = $184;
      } else {
       $__nf$3 = $184;
       break L63;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 51) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 1|0);
      HEAP32[$__oe>>2] = $174;
      HEAP8[$173>>0] = $170;
      $175 = (($__nf$214) + 1|0);
      $__nf$3 = $175;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$__oe>>2]|0;
   $187 = HEAP32[$0>>2]|0;
   $188 = (($187) + 32|0);
   $189 = HEAP32[$188>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($189|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,30680,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(599)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(604,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(599)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(604,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(605);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$60 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 1;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(605);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $66 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $50 = $$pre10;$60 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $50 = $38;$60 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(435,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $66 = $60;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(606,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $64 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
     $$0 = $62;$$01 = $63;$65 = $60;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(607,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $66 = $60;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$agg$result>>2] = $59;
     _free($60);
     _free($61);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$65 = $66;
 }
 _free($65);
 _free($61);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 54|0;
 $__nar = sp + 60|0;
 $__o = sp + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30760+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30760+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30760+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30760+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30760+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30760+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(436,($0|0),(31960|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(436,($1|0),(32112|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $57 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  $$0 = $55;$$01 = $56;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
 }
 $27 = $20;$37 = $$ph;
 while(1) {
  $26 = $27 & 1;
  $28 = ($26<<24>>24)==(0);
  if ($28) {
   $31 = $27&255;
   $32 = $31 >>> 1;
   $34 = $$pre$phiZ2D;$35 = $32;
  } else {
   $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = $29;$35 = $30;
  }
  $33 = (($34) + ($35<<2)|0);
  $36 = ($37|0)==($33|0);
  if ($36) {
   label = 24;
   break;
  }
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$__s>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = (($39) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$39>>2]|0;
    $47 = (($46) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 23;
     break;
    } else {
     $$0$i$i = $49;
    }
   } else {
    $52 = (($42) + 4|0);
    HEAP32[$41>>2] = $52;
    HEAP32[$42>>2] = $38;
    $$0$i$i = $38;
   }
   $53 = ($$0$i$i|0)==(-1);
   if ($53) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $54 = (($37) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $27 = $$pre;$37 = $54;
 }
 if ((label|0) == 23) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  $$0 = $58;$$01 = $59;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $60 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $60;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30752+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30752+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,30656,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(611,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31952)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32112)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $137 = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L24: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$09)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$11 = $84 ? $79 : $89;
        $90 = (($$11) + ($__dg$09)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$08|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 4|0);
         HEAP32[$__oe>>2] = $95;
         HEAP32[$94>>2] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$09>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $106 = HEAP8[$__p$010>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 44|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 4|0);
       HEAP32[$__oe>>2] = $114;
       HEAP32[$113>>2] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$010) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$08 = $115;$__dg$09 = $__dg$1;$__p$010 = $116;
       } else {
        $123 = $114;
        break L24;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $123 = $$pre;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120<<2)|0);
    $122 = ($121|0)==($123|0);
    if ($122) {
     $137 = $123;
    } else {
     $124 = (($123) + -4|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP32[$$012$i$i>>2]|0;
       $127 = HEAP32[$128>>2]|0;
       HEAP32[$$012$i$i>>2] = $127;
       HEAP32[$128>>2] = $126;
       $129 = (($$012$i$i) + 4|0);
       $130 = (($128) + -4|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        $137 = $123;
        break;
       }
      }
     } else {
      $137 = $123;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $133 = $__np;
 $134 = $__nb;
 $135 = (($133) - ($134))|0;
 $136 = (($__ob) + ($135<<2)|0);
 $storemerge = $136;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,30664,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(611,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30752+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30752+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30752+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30752+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30752+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30752+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,30656,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(611,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,30664,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(611,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 296|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,30672,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(599)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(604,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(599)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(604,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(605);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 3;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(605);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $70 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $52 = $$pre8;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(435,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $70 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(612,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $67 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
     $$0 = $65;$$01 = $66;$69 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(613,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $70 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if ($62) {
      _free($64);
      STACKTOP = sp;return;
     }
     _free($63);
     _free($64);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$69 = $70;
 }
 $68 = ($69|0)==(0|0);
 if (!($68)) {
  _free($69);
 }
 _free($64);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$46 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0;
 var $__p$019 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31952)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32112)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$033 = $42;
        while(1) {
         $55 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(599)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(609,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$033) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$033;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$033 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$125 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(599)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(610,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$125) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$125 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $201 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$018)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$46 = $116 ? $111 : $121;
        $122 = (($$46) + ($__dg$018)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$017|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 4|0);
         HEAP32[$__oe>>2] = $127;
         HEAP32[$126>>2] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$018>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$018))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
        }
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $138 = HEAP8[$__p$019>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 44|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 4|0);
       HEAP32[$__oe>>2] = $146;
       HEAP32[$145>>2] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$019) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$017 = $147;$__dg$018 = $__dg$1;$__p$019 = $148;
       } else {
        $155 = $146;
        break L43;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $155 = $$pre;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152<<2)|0);
    $154 = ($153|0)==($155|0);
    if ($154) {
     $201 = $155;
    } else {
     $156 = (($155) + -4|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP32[$$012$i$i7>>2]|0;
       $159 = HEAP32[$160>>2]|0;
       HEAP32[$$012$i$i7>>2] = $159;
       HEAP32[$160>>2] = $158;
       $161 = (($$012$i$i7) + 4|0);
       $162 = (($160) + -4|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        $201 = $155;
        break;
       }
      }
     } else {
      $201 = $155;
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L64: do {
    if ($164) {
     $__nf$213 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$213>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 52;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 44|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 4|0);
      HEAP32[$__oe>>2] = $183;
      HEAP32[$182>>2] = $179;
      $184 = (($__nf$213) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$213 = $184;
      } else {
       $189 = $183;$__nf$3 = $184;
       break L64;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 52) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 4|0);
      HEAP32[$__oe>>2] = $174;
      HEAP32[$173>>2] = $170;
      $175 = (($__nf$213) + 1|0);
      $189 = $174;$__nf$3 = $175;
      break;
     }
    } else {
     $189 = $201;$__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$0>>2]|0;
   $187 = (($186) + 48|0);
   $188 = HEAP32[$187>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($188|0,($0|0),($__nf$3|0),($__ne|0),($189|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193<<2)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199<<2)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 288|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,30680,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(599)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(604,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(599)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(604,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(605);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$61 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 3;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(605);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $68 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $50 = $$pre8;$61 = $42;$__ob$0 = $42;
    label = 20;
   }
  } else {
   $50 = $38;$61 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(435,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $68 = $61;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(612,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $65 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
     $$0 = $63;$$01 = $64;$67 = $61;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(613,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $68 = $61;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $59;
     HEAP32[$agg$result>>2] = $59;
     $60 = ($61|0)==(0|0);
     if ($60) {
      _free($62);
      STACKTOP = sp;return;
     }
     _free($61);
     _free($62);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$67 = $68;
 }
 $66 = ($67|0)==(0|0);
 if (!($66)) {
  _free($67);
 }
 _free($62);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 164|0;
 $__nar = sp + 172|0;
 $__o = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 156|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[30760+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[30760+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[30760+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[30760+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[30760+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[30760+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(436,($0|0),(31952|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20<<2)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i22 = 0, $$0$ph$be = 0, $$0$ph35 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i13 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i17 = 0, $$pre$i2$i$i1737 = 0, $$pre$i2$i$i1738 = 0, $$pre36 = 0, $$pre36$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i1 = 0, $isascii1$i20 = 0, $sext = 0, $tmp$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(436,($0|0),(31960|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $40 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 62;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph35 = $__fmtb;$$pre36 = 0;
   L6: while(1) {
    $11 = $$pre36;
    while(1) {
     $10 = ($11|0)==(0);
     if (!($10)) {
      label = 62;
      break L4;
     }
     $12 = HEAP32[$__b>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $25 = 0;
     } else {
      $14 = (($12) + 12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($12) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($15|0)==($17|0);
      if ($18) {
       $19 = HEAP32[$12>>2]|0;
       $20 = (($19) + 36|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (FUNCTION_TABLE_ii[$21 & 1023]($12)|0);
       $23 = ($22|0)==(-1);
       if ($23) {
        HEAP32[$__b>>2] = 0;
        $25 = 0;
       } else {
        $25 = $12;
       }
      } else {
       $25 = $12;
      }
     }
     $24 = ($25|0)==(0|0);
     $26 = HEAP32[$__e>>2]|0;
     $27 = ($26|0)==(0|0);
     do {
      if ($27) {
       label = 15;
      } else {
       $28 = (($26) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($26) + 16|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       if ($32) {
        $33 = HEAP32[$26>>2]|0;
        $34 = (($33) + 36|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (FUNCTION_TABLE_ii[$35 & 1023]($26)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         HEAP32[$__e>>2] = 0;
         label = 15;
         break;
        }
       }
       if ($24) {
        $64 = $26;
       } else {
        label = 16;
        break L6;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($24) {
       label = 16;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $41 = HEAP8[$$0$ph35>>0]|0;
     $42 = HEAP32[$4>>2]|0;
     $43 = (($42) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
     $46 = ($45<<24>>24)==(37);
     if ($46) {
      label = 19;
      break;
     }
     $68 = HEAP8[$$0$ph35>>0]|0;
     $isascii1$i = ($68<<24>>24)>(-1);
     if ($isascii1$i) {
      $69 = $68 << 24 >> 24;
      $70 = HEAP32[$9>>2]|0;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 & 8192;
      $74 = ($73<<16>>16)==(0);
      if (!($74)) {
       $$0$pn = $$0$ph35;
       label = 30;
       break;
      }
     }
     $133 = (($25) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($25) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$25>>2]|0;
      $139 = (($138) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (FUNCTION_TABLE_ii[$140 & 1023]($25)|0);
      $$0$i$i22 = $141;
     } else {
      $142 = HEAP8[$134>>0]|0;
      $143 = $142&255;
      $$0$i$i22 = $143;
     }
     $144 = $$0$i$i22&255;
     $145 = HEAP32[$4>>2]|0;
     $146 = (($145) + 12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
     $149 = HEAP8[$$0$ph35>>0]|0;
     $150 = HEAP32[$4>>2]|0;
     $151 = (($150) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (FUNCTION_TABLE_iii[$152 & 1023]($4,$149)|0);
     $154 = ($148<<24>>24)==($153<<24>>24);
     if ($154) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $11 = 4;
    }
    L34: do {
     if ((label|0) == 19) {
      label = 0;
      $47 = (($$0$ph35) + 1|0);
      $48 = ($47|0)==($__fmte|0);
      if ($48) {
       label = 20;
       break L6;
      }
      $49 = HEAP8[$47>>0]|0;
      $50 = HEAP32[$4>>2]|0;
      $51 = (($50) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
      if ((($53<<24>>24) == 48) | (($53<<24>>24) == 69)) {
       $54 = (($$0$ph35) + 2|0);
       $55 = ($54|0)==($__fmte|0);
       if ($55) {
        label = 23;
        break L6;
       }
       $56 = HEAP8[$54>>0]|0;
       $57 = HEAP32[$4>>2]|0;
       $58 = (($57) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
       $$1 = $54;$__cmd$0 = $60;$__opt$0 = $53;
      } else {
       $$1 = $47;$__cmd$0 = $53;$__opt$0 = 0;
      }
      $61 = HEAP32[$this>>2]|0;
      $62 = (($61) + 36|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$2>>2] = $25;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$63 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 1|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 30) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP8[$$2>>0]|0;
       $isascii1$i1 = ($76<<24>>24)>(-1);
       if (!($isascii1$i1)) {
        $$2$lcssa = $$2;
        break;
       }
       $77 = $76 << 24 >> 24;
       $78 = (($70) + ($77<<1)|0);
       $79 = HEAP16[$78>>1]|0;
       $80 = $79 & 8192;
       $81 = ($80<<16>>16)==(0);
       if ($81) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 30;
       }
      }
      $$pre$i$i$i13 = $25;$$pre$i2$i$i17 = $64;$96 = $64;
      while(1) {
       $82 = ($$pre$i$i$i13|0)==(0|0);
       if ($82) {
        $94 = 0;
       } else {
        $83 = (($$pre$i$i$i13) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($$pre$i$i$i13) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84|0)==($86|0);
        if ($87) {
         $88 = HEAP32[$$pre$i$i$i13>>2]|0;
         $89 = (($88) + 36|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (FUNCTION_TABLE_ii[$90 & 1023]($$pre$i$i$i13)|0);
         $92 = ($91|0)==(-1);
         if ($92) {
          HEAP32[$__b>>2] = 0;
          $94 = 0;
         } else {
          $94 = $$pre$i$i$i13;
         }
        } else {
         $94 = $$pre$i$i$i13;
        }
       }
       $93 = ($94|0)==(0|0);
       $95 = ($96|0)==(0|0);
       do {
        if ($95) {
         $$pre$i2$i$i1738 = $$pre$i2$i$i17;
         label = 43;
        } else {
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($96) + 16|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ($98|0)==($100|0);
         if (!($101)) {
          if ($93) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $96;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
         $102 = HEAP32[$96>>2]|0;
         $103 = (($102) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 1023]($96)|0);
         $106 = ($105|0)==(-1);
         if ($106) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1738 = 0;
          label = 43;
          break;
         } else {
          $107 = ($$pre$i2$i$i17|0)==(0|0);
          $tmp$i$i19 = $93 ^ $107;
          if ($tmp$i$i19) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $$pre$i2$i$i17;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($93) {
         $$0$ph$be = $$2$lcssa;
         break L34;
        } else {
         $$pre$i2$i$i1737 = $$pre$i2$i$i1738;$190 = 0;
        }
       }
       $108 = (($94) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($94) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$94>>2]|0;
        $114 = (($113) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($94)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP8[$109>>0]|0;
        $118 = $117&255;
        $$0$i$i = $118;
       }
       $119 = $$0$i$i&255;
       $isascii1$i20 = ($119<<24>>24)>(-1);
       if (!($isascii1$i20)) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $sext = $$0$i$i << 24;
       $120 = $sext >> 24;
       $121 = HEAP32[$9>>2]|0;
       $122 = (($121) + ($120<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123 & 8192;
       $125 = ($124<<16>>16)==(0);
       if ($125) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $126 = HEAP32[$108>>2]|0;
       $127 = HEAP32[$110>>2]|0;
       $128 = ($126|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$94>>2]|0;
        $130 = (($129) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        (FUNCTION_TABLE_ii[$131 & 1023]($94)|0);
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       } else {
        $132 = (($126) + 1|0);
        HEAP32[$108>>2] = $132;
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $155 = HEAP32[$133>>2]|0;
      $156 = HEAP32[$135>>2]|0;
      $157 = ($155|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$25>>2]|0;
       $159 = (($158) + 40|0);
       $160 = HEAP32[$159>>2]|0;
       (FUNCTION_TABLE_ii[$160 & 1023]($25)|0);
      } else {
       $161 = (($155) + 1|0);
       HEAP32[$133>>2] = $161;
      }
      $162 = (($$0$ph35) + 1|0);
      $$0$ph$be = $162;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 62;
     break L4;
    }
    $$pre36$pre = HEAP32[$__err>>2]|0;
    $$0$ph35 = $$0$ph$be;$$pre36 = $$pre36$pre;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i4 = $$pre;
 }
 $163 = ($$pre$i$i$i4|0)==(0|0);
 if ($163) {
  $175 = 0;
 } else {
  $164 = (($$pre$i$i$i4) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($$pre$i$i$i4) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($165|0)==($167|0);
  if ($168) {
   $169 = HEAP32[$$pre$i$i$i4>>2]|0;
   $170 = (($169) + 36|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (FUNCTION_TABLE_ii[$171 & 1023]($$pre$i$i$i4)|0);
   $173 = ($172|0)==(-1);
   if ($173) {
    HEAP32[$__b>>2] = 0;
    $175 = 0;
   } else {
    $175 = $$pre$i$i$i4;
   }
  } else {
   $175 = $$pre$i$i$i4;
  }
 }
 $174 = ($175|0)==(0|0);
 $176 = HEAP32[$__e>>2]|0;
 $177 = ($176|0)==(0|0);
 do {
  if ($177) {
   label = 72;
  } else {
   $178 = (($176) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($176) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($179|0)==($181|0);
   if ($182) {
    $183 = HEAP32[$176>>2]|0;
    $184 = (($183) + 36|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (FUNCTION_TABLE_ii[$185 & 1023]($176)|0);
    $187 = ($186|0)==(-1);
    if ($187) {
     HEAP32[$__e>>2] = 0;
     label = 72;
     break;
    }
   }
   if ($174) {
    HEAP32[$agg$result>>2] = $175;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($174)) {
   HEAP32[$agg$result>>2] = $175;
   STACKTOP = sp;return;
  }
 }
 $188 = HEAP32[$__err>>2]|0;
 $189 = $188 | 2;
 HEAP32[$__err>>2] = $189;
 HEAP32[$agg$result>>2] = $175;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,30864,((30864 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31960|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31960|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31960|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(436,($1|0),(31960|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,30880,((30880 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,30872,((30872 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,30904,((30904 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,30888,((30888 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,30912,((30912 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $59 = $$pre;
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
  $59 = $48;
 }
 $58 = ($59|0)==(0|0);
 do {
  if ($58) {
   $71 = 0;
  } else {
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$59>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($59)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $59;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i$i$i16 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i22 = 0, $$0$i$i1$i$i7 = 0, $$0$i$i13 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0;
 var $$pre$i3$i$i942 = 0, $$pre$i3$i$i943 = 0, $$pre41 = 0, $$pre41$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i10 = 0, $tmp$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(436,($0|0),(31952|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $39 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($39)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 66;
  } else {
   $$0$ph40 = $__fmtb;$$pre41 = 0;
   L6: while(1) {
    $10 = $$pre41;
    while(1) {
     $9 = ($10|0)==(0);
     if (!($9)) {
      label = 66;
      break L4;
     }
     $11 = HEAP32[$__b>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      $183 = 1;$63 = 0;
     } else {
      $13 = (($11) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (($11) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14|0)==($16|0);
      if ($17) {
       $18 = HEAP32[$11>>2]|0;
       $19 = (($18) + 36|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (FUNCTION_TABLE_ii[$20 & 1023]($11)|0);
       $$0$i$i$i$i = $21;
      } else {
       $22 = HEAP32[$14>>2]|0;
       $$0$i$i$i$i = $22;
      }
      $23 = ($$0$i$i$i$i|0)==(-1);
      if ($23) {
       HEAP32[$__b>>2] = 0;
       $183 = 1;$63 = 0;
      } else {
       $183 = 0;$63 = $11;
      }
     }
     $24 = HEAP32[$__e>>2]|0;
     $25 = ($24|0)==(0|0);
     do {
      if ($25) {
       label = 18;
      } else {
       $26 = (($24) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($24) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[$24>>2]|0;
        $32 = (($31) + 36|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (FUNCTION_TABLE_ii[$33 & 1023]($24)|0);
        $$0$i$i1$i$i = $34;
       } else {
        $35 = HEAP32[$27>>2]|0;
        $$0$i$i1$i$i = $35;
       }
       $36 = ($$0$i$i1$i$i|0)==(-1);
       if ($36) {
        HEAP32[$__e>>2] = 0;
        label = 18;
        break;
       } else {
        if ($183) {
         $64 = $24;
         break;
        } else {
         label = 20;
         break L6;
        }
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      if ($183) {
       label = 20;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $40 = HEAP32[$$0$ph40>>2]|0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($41) + 52|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      label = 23;
      break;
     }
     $68 = HEAP32[$$0$ph40>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (FUNCTION_TABLE_iiii[$71 & 1023]($4,8192,$68)|0);
     if ($72) {
      $$0$pn = $$0$ph40;
      label = 33;
      break;
     }
     $127 = (($63) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($63) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$63>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_ii[$134 & 1023]($63)|0);
      $$0$i$i13 = $135;
     } else {
      $136 = HEAP32[$128>>2]|0;
      $$0$i$i13 = $136;
     }
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (FUNCTION_TABLE_iii[$139 & 1023]($4,$$0$i$i13)|0);
     $141 = HEAP32[$$0$ph40>>2]|0;
     $142 = HEAP32[$4>>2]|0;
     $143 = (($142) + 28|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (FUNCTION_TABLE_iii[$144 & 1023]($4,$141)|0);
     $146 = ($140|0)==($145|0);
     if ($146) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $10 = 4;
    }
    L38: do {
     if ((label|0) == 23) {
      label = 0;
      $46 = (($$0$ph40) + 4|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       label = 24;
       break L6;
      }
      $48 = HEAP32[$46>>2]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = (($49) + 52|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      if ((($52<<24>>24) == 48) | (($52<<24>>24) == 69)) {
       $53 = (($$0$ph40) + 8|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        label = 27;
        break L6;
       }
       $55 = HEAP32[$53>>2]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = (($56) + 52|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $$1 = $53;$__cmd$0 = $59;$__opt$0 = $52;
      } else {
       $$1 = $46;$__cmd$0 = $52;$__opt$0 = 0;
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = (($60) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$2>>2] = $63;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$62 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 4|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $73 = ($$2|0)==($__fmte|0);
       if ($73) {
        $$2$lcssa = $__fmte;
        break;
       }
       $74 = HEAP32[$$2>>2]|0;
       $75 = HEAP32[$4>>2]|0;
       $76 = (($75) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (FUNCTION_TABLE_iiii[$77 & 1023]($4,8192,$74)|0);
       if ($78) {
        $$0$pn = $$2;
        label = 33;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i3 = $63;$$pre$i3$i$i9 = $64;$92 = $64;
      while(1) {
       $79 = ($$pre$i$i$i3|0)==(0|0);
       if ($79) {
        $104 = 1;$106 = 0;
       } else {
        $80 = (($$pre$i$i$i3) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($$pre$i$i$i3) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if ($84) {
         $85 = HEAP32[$$pre$i$i$i3>>2]|0;
         $86 = (($85) + 36|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (FUNCTION_TABLE_ii[$87 & 1023]($$pre$i$i$i3)|0);
         $$0$i$i$i$i1 = $88;
        } else {
         $89 = HEAP32[$81>>2]|0;
         $$0$i$i$i$i1 = $89;
        }
        $90 = ($$0$i$i$i$i1|0)==(-1);
        if ($90) {
         HEAP32[$__b>>2] = 0;
         $104 = 1;$106 = 0;
        } else {
         $104 = 0;$106 = $$pre$i$i$i3;
        }
       }
       $91 = ($92|0)==(0|0);
       do {
        if ($91) {
         $$pre$i3$i$i943 = $$pre$i3$i$i9;
         label = 48;
        } else {
         $93 = (($92) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($92) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$92>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
          $$0$i$i1$i$i7 = $101;
         } else {
          $102 = HEAP32[$94>>2]|0;
          $$0$i$i1$i$i7 = $102;
         }
         $103 = ($$0$i$i1$i$i7|0)==(-1);
         if ($103) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i943 = 0;
          label = 48;
          break;
         } else {
          $phitmp$i4$i$i10 = ($$pre$i3$i$i9|0)==(0|0);
          $tmp$i$i12 = $104 ^ $phitmp$i4$i$i10;
          if ($tmp$i$i12) {
           $$pre$i3$i$i942 = $$pre$i3$i$i9;$184 = $$pre$i3$i$i9;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L38;
          }
         }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        if ($104) {
         $$0$ph$be = $$2$lcssa;
         break L38;
        } else {
         $$pre$i3$i$i942 = $$pre$i3$i$i943;$184 = 0;
        }
       }
       $105 = (($106) + 12|0);
       $107 = HEAP32[$105>>2]|0;
       $108 = (($106) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$106>>2]|0;
        $112 = (($111) + 36|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (FUNCTION_TABLE_ii[$113 & 1023]($106)|0);
        $$0$i$i = $114;
       } else {
        $115 = HEAP32[$107>>2]|0;
        $$0$i$i = $115;
       }
       $116 = HEAP32[$4>>2]|0;
       $117 = (($116) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (FUNCTION_TABLE_iiii[$118 & 1023]($4,8192,$$0$i$i)|0);
       if (!($119)) {
        $$0$ph$be = $$2$lcssa;
        break L38;
       }
       $120 = HEAP32[$105>>2]|0;
       $121 = HEAP32[$108>>2]|0;
       $122 = ($120|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$106>>2]|0;
        $124 = (($123) + 40|0);
        $125 = HEAP32[$124>>2]|0;
        (FUNCTION_TABLE_ii[$125 & 1023]($106)|0);
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       } else {
        $126 = (($120) + 4|0);
        HEAP32[$105>>2] = $126;
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $147 = HEAP32[$127>>2]|0;
      $148 = HEAP32[$129>>2]|0;
      $149 = ($147|0)==($148|0);
      if ($149) {
       $150 = HEAP32[$63>>2]|0;
       $151 = (($150) + 40|0);
       $152 = HEAP32[$151>>2]|0;
       (FUNCTION_TABLE_ii[$152 & 1023]($63)|0);
      } else {
       $153 = (($147) + 4|0);
       HEAP32[$127>>2] = $153;
      }
      $154 = (($$0$ph40) + 4|0);
      $$0$ph$be = $154;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 66;
     break L4;
    }
    $$pre41$pre = HEAP32[$__err>>2]|0;
    $$0$ph40 = $$0$ph$be;$$pre41 = $$pre41$pre;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
  }
 } while(0);
 if ((label|0) == 66) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i18 = $$pre;
 }
 $155 = ($$pre$i$i$i18|0)==(0|0);
 if ($155) {
  $182 = 0;$185 = 1;
 } else {
  $156 = (($$pre$i$i$i18) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($$pre$i$i$i18) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($157|0)==($159|0);
  if ($160) {
   $161 = HEAP32[$$pre$i$i$i18>>2]|0;
   $162 = (($161) + 36|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (FUNCTION_TABLE_ii[$163 & 1023]($$pre$i$i$i18)|0);
   $$0$i$i$i$i16 = $164;
  } else {
   $165 = HEAP32[$157>>2]|0;
   $$0$i$i$i$i16 = $165;
  }
  $166 = ($$0$i$i$i$i16|0)==(-1);
  if ($166) {
   HEAP32[$__b>>2] = 0;
   $182 = 0;$185 = 1;
  } else {
   $182 = $$pre$i$i$i18;$185 = 0;
  }
 }
 $167 = HEAP32[$__e>>2]|0;
 $168 = ($167|0)==(0|0);
 do {
  if ($168) {
   label = 79;
  } else {
   $169 = (($167) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($167) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($170|0)==($172|0);
   if ($173) {
    $174 = HEAP32[$167>>2]|0;
    $175 = (($174) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (FUNCTION_TABLE_ii[$176 & 1023]($167)|0);
    $$0$i$i1$i$i22 = $177;
   } else {
    $178 = HEAP32[$170>>2]|0;
    $$0$i$i1$i$i22 = $178;
   }
   $179 = ($$0$i$i1$i$i22|0)==(-1);
   if ($179) {
    HEAP32[$__e>>2] = 0;
    label = 79;
    break;
   }
   if ($185) {
    HEAP32[$agg$result>>2] = $182;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  if (!($185)) {
   HEAP32[$agg$result>>2] = $182;
   STACKTOP = sp;return;
  }
 }
 $180 = HEAP32[$__err>>2]|0;
 $181 = $180 | 2;
 HEAP32[$__err>>2] = $181;
 HEAP32[$agg$result>>2] = $182;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,31016,((31016 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31952|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31952|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(436,($0|0),(31952|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(436,($1|0),(31952|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,31080,((31080 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,31048,((31048 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,31112,((31112 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,31184,((31184 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,31160,((31160 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $57 = $$pre;
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
  $57 = $46;
 }
 $56 = ($57|0)==(0|0);
 do {
  if ($56) {
   $84 = 1;
  } else {
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$57>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($57)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(599)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(614,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $25 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $9;
     $25 = $$$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $25 = $9;
     break;
    }
   }
  } while(0);
  $22 = (($$01$i$i) + 1|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$9 = $25;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $23 = $5;
  HEAP32[$agg$result>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $24 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $9;
   $24 = $$$i;
  }
  $21 = (($$01$i$i) + 4|0);
  $22 = ($21|0)==($4|0);
  if ($22) {
   $23 = $24;
   break;
  } else {
   $$01$i$i = $21;$9 = $24;
  }
 }
 HEAP32[$agg$result>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(615,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if ($22) {
   ___resumeException($20|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(616,($11|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(616,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(32840);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 8|0;
 $__wn = sp + 4|0;
 $__loc = sp + 20|0;
 $__neg = sp + 240|0;
 $0 = sp + 16|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 617;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(435,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$114 = $32;$$1212 = $33;$105 = 617;$106 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(436,($__loc|0),(31960|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(618,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 32|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(31576|0),(((31576 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       if ($24) {
        $25 = (($23) + 2)|0;
        $26 = (_malloc($25)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         __THREW__ = 0;
         invoke_v(605);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          $30 = ___cxa_find_matching_catch()|0;
          $31 = tempRet0;
          $$0 = $30;$$01 = $31;
          break;
         } else {
          $38 = 0;$__nc$0 = 0;
         }
        } else {
         $38 = $26;$__nc$0 = $26;
        }
       } else {
        $38 = 0;$__nc$0 = $__nbuf;
       }
       $39 = HEAP8[$__neg>>0]|0;
       $40 = ($39<<24>>24)==(0);
       if ($40) {
        $__nc$1 = $__nc$0;
       } else {
        $41 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $41;
       }
       $42 = ($20>>>0)<($19>>>0);
       if ($42) {
        $43 = (($__atoms) + 10|0);
        $44 = $__atoms;
        $__nc$27 = $__nc$1;$__w$08 = $20;
        while(1) {
         $45 = HEAP8[$__w$08>>0]|0;
         $$01$i = $__atoms;
         while(1) {
          $48 = HEAP8[$$01$i>>0]|0;
          $49 = ($48<<24>>24)==($45<<24>>24);
          $47 = (($$01$i) + 1|0);
          if ($49) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $46 = ($47|0)==($43|0);
          if ($46) {
           $$0$lcssa$i = $43;
           break;
          } else {
           $$01$i = $47;
          }
         }
         $50 = $$0$lcssa$i;
         $51 = (($50) - ($44))|0;
         $52 = (31576 + ($51)|0);
         $53 = HEAP8[$52>>0]|0;
         HEAP8[$__nc$27>>0] = $53;
         $54 = (($__w$08) + 1|0);
         $55 = (($__nc$27) + 1|0);
         $56 = HEAP32[$__wn>>2]|0;
         $57 = ($54>>>0)<($56>>>0);
         if ($57) {
          $__nc$27 = $55;$__w$08 = $54;
         } else {
          $__nc$2$lcssa = $55;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $58 = (_sscanf($__nbuf,31592,$vararg_buffer)|0);
       $59 = ($58|0)==(1);
       if (!($59)) {
        __THREW__ = 0;
        invoke_vi(619,(31600|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $36 = ___cxa_find_matching_catch()|0;
         $37 = tempRet0;
         _free($38);
         $$0 = $36;$$01 = $37;
         break;
        }
       }
       _free($38);
      }
      $62 = HEAP32[$__b>>2]|0;
      $63 = ($62|0)==(0|0);
      do {
       if ($63) {
        $77 = 0;
       } else {
        $64 = (($62) + 12|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($62) + 16|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($65|0)==($67|0);
        if ($68) {
         $69 = HEAP32[$62>>2]|0;
         $70 = (($69) + 36|0);
         $71 = HEAP32[$70>>2]|0;
         __THREW__ = 0;
         $72 = (invoke_ii($71|0,($62|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          label = 11;
          break L3;
         }
         $75 = ($72|0)==(-1);
         if ($75) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i;
          break;
         }
        } else {
         $77 = $62;
        }
       }
      } while(0);
      $76 = ($77|0)==(0|0);
      $78 = HEAP32[$__e>>2]|0;
      $79 = ($78|0)==(0|0);
      do {
       if ($79) {
        label = 36;
       } else {
        $80 = (($78) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($78) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if (!($84)) {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
        $85 = HEAP32[$78>>2]|0;
        $86 = (($85) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 11;
         break L3;
        }
        $91 = ($88|0)==(-1);
        if ($91) {
         HEAP32[$__e>>2] = 0;
         label = 36;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 36) {
       if ($76) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       $92 = HEAP32[$__err>>2]|0;
       $93 = $92 | 2;
       HEAP32[$__err>>2] = $93;
      }
      $94 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $94;
      $95 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
      $96 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $97 = ($96|0)==(0|0);
      if ($97) {
       STACKTOP = sp;return;
      }
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $$0 = $34;$$01 = $35;
   }
   $103 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $104 = ($$pre|0)==(0|0);
   if ($104) {
    $$115 = $$0;$$1213 = $$01;
    ___resumeException($$115|0);
    // unreachable;
   } else {
    $$pre17 = HEAP32[$1>>2]|0;
    $$114 = $$0;$$1212 = $$01;$105 = $$pre17;$106 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($105|0,($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $109 = ___cxa_find_matching_catch(0|0)|0;
  $110 = tempRet0;
  ___clang_call_terminate($109);
  // unreachable;
 } else {
  $$115 = $$114;$$1213 = $$1212;
  ___resumeException($$115|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i104 = 0, $$0$i$i111 = 0, $$0$i$i120 = 0, $$0$i$i130 = 0, $$0$i$i147 = 0, $$0$i$i33 = 0, $$0$i$i36 = 0, $$0$i$i49 = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i84 = 0, $$0$i$i87 = 0, $$271 = 0, $$272 = 0, $$273 = 0, $$274 = 0;
 var $$275 = 0, $$276 = 0, $$277 = 0, $$278 = 0, $$279 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i134 = 0, $$pre$i$i$i151 = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i39 = 0, $$pre$i$i$i70 = 0, $$pre$i$i$i94 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i138 = 0, $$pre$i2$i$i155 = 0, $$pre$i2$i$i155249 = 0, $$pre$i2$i$i155250 = 0, $$pre$i2$i$i261$ph = 0, $$pre$i2$i$i261269 = 0;
 var $$pre$i2$i$i43 = 0, $$pre$i2$i$i43240 = 0, $$pre$i2$i$i43242 = 0, $$pre$i2$i$i74 = 0, $$pre$i2$i$i74255$ph = 0, $$pre$i2$i$i74255266 = 0, $$pre$i2$i$i98 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre253 = 0, $$pre257 = 0, $$pre259 = 0, $$sum = 0, $$sum262 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0;
 var $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0232 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0234 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i128 = 0, $isascii1$i161 = 0, $isascii1$i52 = 0, $isascii1$i63 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $sext = 0, $sext199 = 0, $sext200 = 0, $sext201 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i100 = 0, $tmp$i$i140 = 0, $tmp$i$i157 = 0, $tmp$i$i45 = 0, $tmp$i$i76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 32|0;
 $__gb = sp + 472|0;
 $__gn = sp;
 $__ge = sp + 468|0;
 $__pat = sp + 480|0;
 $__dp = sp + 492|0;
 $__ts = sp + 493|0;
 $__grp = sp + 4|0;
 $__sym = sp + 444|0;
 $__psn = sp + 20|0;
 $__nsn = sp + 456|0;
 $__spaces = sp + 432|0;
 $__fd = sp + 16|0;
 $__et = sp + 484|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 617;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(620,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $69 = ___cxa_find_matching_catch()|0;
   $70 = tempRet0;
   $lpad$phi$index = $69;$lpad$phi$index7 = $70;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 1|0);
   $8 = (($__nsn) + 4|0);
   $9 = (($__nsn) + 8|0);
   $10 = (($__psn) + 1|0);
   $11 = (($__psn) + 4|0);
   $12 = (($__psn) + 8|0);
   $13 = $__flags & 512;
   $14 = ($13|0)!=(0);
   $15 = (($__sym) + 1|0);
   $16 = (($__sym) + 8|0);
   $17 = (($__sym) + 4|0);
   $18 = (($__spaces) + 1|0);
   $19 = (($__spaces) + 8|0);
   $20 = (($__spaces) + 4|0);
   $21 = (($__pat) + 3|0);
   $22 = (($__grp) + 4|0);
   $876 = $__gbuf;$__p$0232 = 0;$__trailing_sign$0234 = 0;
   L3: while(1) {
    $23 = HEAP32[$__b>>2]|0;
    $24 = ($23|0)==(0|0);
    do {
     if ($24) {
      $38 = 0;
     } else {
      $25 = (($23) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($23) + 16|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($26|0)==($28|0);
      if ($29) {
       $30 = HEAP32[$23>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($23|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 24;
        break L3;
       }
       $36 = ($33|0)==(-1);
       if ($36) {
        HEAP32[$__b>>2] = 0;
        $38 = 0;
        break;
       } else {
        $$pre$i$i$i23 = HEAP32[$__b>>2]|0;
        $38 = $$pre$i$i$i23;
        break;
       }
      } else {
       $38 = $23;
      }
     }
    } while(0);
    $37 = ($38|0)==(0|0);
    $39 = HEAP32[$__e>>2]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      label = 15;
     } else {
      $41 = (($39) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($39) + 16|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)==($44|0);
      if (!($45)) {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L3;
       }
      }
      $46 = HEAP32[$39>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($39|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 24;
       break L3;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($37) {
      $864 = $876;$878 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
      label = 280;
      break;
     } else {
      $877 = 0;
     }
    }
    $53 = (($__pat) + ($__p$0232)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    L25: do {
     switch ($55|0) {
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      if ($192) {
       $194 = $190&255;
       $195 = $194 >>> 1;
       $205 = $195;
      } else {
       $193 = HEAP32[$11>>2]|0;
       $205 = $193;
      }
      $196 = HEAP8[$__nsn>>0]|0;
      $197 = $196 & 1;
      $198 = ($197<<24>>24)==(0);
      if ($198) {
       $200 = $196&255;
       $201 = $200 >>> 1;
       $203 = $201;
      } else {
       $199 = HEAP32[$8>>2]|0;
       $203 = $199;
      }
      $202 = (0 - ($203))|0;
      $204 = ($205|0)==($202|0);
      if ($204) {
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      } else {
       if ($192) {
        $207 = $190&255;
        $208 = $207 >>> 1;
        $210 = $208;
       } else {
        $206 = HEAP32[$11>>2]|0;
        $210 = $206;
       }
       $209 = ($210|0)==(0);
       if (!($209)) {
        if ($198) {
         $212 = $196&255;
         $213 = $212 >>> 1;
         $215 = $213;
        } else {
         $211 = HEAP32[$8>>2]|0;
         $215 = $211;
        }
        $214 = ($215|0)==(0);
        if (!($214)) {
         $297 = HEAP32[$__b>>2]|0;
         $298 = (($297) + 12|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = (($297) + 16|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ($299|0)==($301|0);
         if ($302) {
          $303 = HEAP32[$297>>2]|0;
          $304 = (($303) + 36|0);
          $305 = HEAP32[$304>>2]|0;
          __THREW__ = 0;
          $306 = (invoke_ii($305|0,($297|0))|0);
          $307 = __THREW__; __THREW__ = 0;
          $308 = $307&1;
          if ($308) {
           label = 24;
           break L3;
          }
          $$pre247 = HEAP8[$__psn>>0]|0;
          $$0$i$i111 = $306;$313 = $$pre247;
         } else {
          $309 = HEAP8[$299>>0]|0;
          $310 = $309&255;
          $$0$i$i111 = $310;$313 = $190;
         }
         $311 = $$0$i$i111&255;
         $312 = $313 & 1;
         $314 = ($312<<24>>24)==(0);
         $315 = HEAP32[$12>>2]|0;
         $$272 = $314 ? $10 : $315;
         $316 = HEAP8[$$272>>0]|0;
         $317 = ($311<<24>>24)==($316<<24>>24);
         $318 = HEAP32[$__b>>2]|0;
         $319 = (($318) + 12|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = (($318) + 16|0);
         $322 = HEAP32[$321>>2]|0;
         $323 = ($320|0)==($322|0);
         if ($317) {
          if ($323) {
           $324 = HEAP32[$318>>2]|0;
           $325 = (($324) + 40|0);
           $326 = HEAP32[$325>>2]|0;
           __THREW__ = 0;
           (invoke_ii($326|0,($318|0))|0);
           $327 = __THREW__; __THREW__ = 0;
           $328 = $327&1;
           if ($328) {
            label = 24;
            break L3;
           }
          } else {
           $329 = (($320) + 1|0);
           HEAP32[$319>>2] = $329;
          }
          $330 = HEAP8[$__psn>>0]|0;
          $331 = $330 & 1;
          $332 = ($331<<24>>24)==(0);
          if ($332) {
           $334 = $330&255;
           $335 = $334 >>> 1;
           $337 = $335;
          } else {
           $333 = HEAP32[$11>>2]|0;
           $337 = $333;
          }
          $336 = ($337>>>0)>(1);
          $__psn$__trailing_sign$09 = $336 ? $__psn : $__trailing_sign$0234;
          $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L25;
         }
         if ($323) {
          $338 = HEAP32[$318>>2]|0;
          $339 = (($338) + 36|0);
          $340 = HEAP32[$339>>2]|0;
          __THREW__ = 0;
          $341 = (invoke_ii($340|0,($318|0))|0);
          $342 = __THREW__; __THREW__ = 0;
          $343 = $342&1;
          if ($343) {
           label = 24;
           break L3;
          } else {
           $$0$i$i120 = $341;
          }
         } else {
          $344 = HEAP8[$320>>0]|0;
          $345 = $344&255;
          $$0$i$i120 = $345;
         }
         $346 = $$0$i$i120&255;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         $350 = HEAP32[$9>>2]|0;
         $$273 = $349 ? $7 : $350;
         $351 = HEAP8[$$273>>0]|0;
         $352 = ($346<<24>>24)==($351<<24>>24);
         if (!($352)) {
          label = 132;
          break L3;
         }
         $353 = HEAP32[$__b>>2]|0;
         $354 = (($353) + 12|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($353) + 16|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($355|0)==($357|0);
         if ($358) {
          $359 = HEAP32[$353>>2]|0;
          $360 = (($359) + 40|0);
          $361 = HEAP32[$360>>2]|0;
          __THREW__ = 0;
          (invoke_ii($361|0,($353|0))|0);
          $362 = __THREW__; __THREW__ = 0;
          $363 = $362&1;
          if ($363) {
           label = 24;
           break L3;
          }
         } else {
          $364 = (($355) + 1|0);
          HEAP32[$354>>2] = $364;
         }
         HEAP8[$__neg>>0] = 1;
         $365 = HEAP8[$__nsn>>0]|0;
         $366 = $365 & 1;
         $367 = ($366<<24>>24)==(0);
         if ($367) {
          $369 = $365&255;
          $370 = $369 >>> 1;
          $372 = $370;
         } else {
          $368 = HEAP32[$8>>2]|0;
          $372 = $368;
         }
         $371 = ($372>>>0)>(1);
         $__nsn$__trailing_sign$010 = $371 ? $__nsn : $__trailing_sign$0234;
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L25;
        }
       }
       if ($192) {
        $217 = $190&255;
        $218 = $217 >>> 1;
        $220 = $218;
       } else {
        $216 = HEAP32[$11>>2]|0;
        $220 = $216;
       }
       $219 = ($220|0)==(0);
       $221 = HEAP32[$__b>>2]|0;
       $222 = (($221) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($221) + 16|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($223|0)==($225|0);
       if ($219) {
        if ($226) {
         $262 = HEAP32[$221>>2]|0;
         $263 = (($262) + 36|0);
         $264 = HEAP32[$263>>2]|0;
         __THREW__ = 0;
         $265 = (invoke_ii($264|0,($221|0))|0);
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          label = 24;
          break L3;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i104 = $265;$272 = $$pre;
        } else {
         $268 = HEAP8[$223>>0]|0;
         $269 = $268&255;
         $$0$i$i104 = $269;$272 = $196;
        }
        $270 = $$0$i$i104&255;
        $271 = $272 & 1;
        $273 = ($271<<24>>24)==(0);
        $274 = HEAP32[$9>>2]|0;
        $$271 = $273 ? $7 : $274;
        $275 = HEAP8[$$271>>0]|0;
        $276 = ($270<<24>>24)==($275<<24>>24);
        if (!($276)) {
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L25;
        }
        $277 = HEAP32[$__b>>2]|0;
        $278 = (($277) + 12|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 16|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279|0)==($281|0);
        if ($282) {
         $283 = HEAP32[$277>>2]|0;
         $284 = (($283) + 40|0);
         $285 = HEAP32[$284>>2]|0;
         __THREW__ = 0;
         (invoke_ii($285|0,($277|0))|0);
         $286 = __THREW__; __THREW__ = 0;
         $287 = $286&1;
         if ($287) {
          label = 24;
          break L3;
         }
        } else {
         $288 = (($279) + 1|0);
         HEAP32[$278>>2] = $288;
        }
        HEAP8[$__neg>>0] = 1;
        $289 = HEAP8[$__nsn>>0]|0;
        $290 = $289 & 1;
        $291 = ($290<<24>>24)==(0);
        if ($291) {
         $293 = $289&255;
         $294 = $293 >>> 1;
         $296 = $294;
        } else {
         $292 = HEAP32[$8>>2]|0;
         $296 = $292;
        }
        $295 = ($296>>>0)>(1);
        $__nsn$__trailing_sign$0 = $295 ? $__nsn : $__trailing_sign$0234;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L25;
       }
       if ($226) {
        $227 = HEAP32[$221>>2]|0;
        $228 = (($227) + 36|0);
        $229 = HEAP32[$228>>2]|0;
        __THREW__ = 0;
        $230 = (invoke_ii($229|0,($221|0))|0);
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        if ($232) {
         label = 24;
         break L3;
        }
        $$pre245 = HEAP8[$__psn>>0]|0;
        $$0$i$i84 = $230;$237 = $$pre245;
       } else {
        $233 = HEAP8[$223>>0]|0;
        $234 = $233&255;
        $$0$i$i84 = $234;$237 = $190;
       }
       $235 = $$0$i$i84&255;
       $236 = $237 & 1;
       $238 = ($236<<24>>24)==(0);
       $239 = HEAP32[$12>>2]|0;
       $$ = $238 ? $10 : $239;
       $240 = HEAP8[$$>>0]|0;
       $241 = ($235<<24>>24)==($240<<24>>24);
       if (!($241)) {
        HEAP8[$__neg>>0] = 1;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L25;
       }
       $242 = HEAP32[$__b>>2]|0;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 16|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($244|0)==($246|0);
       if ($247) {
        $248 = HEAP32[$242>>2]|0;
        $249 = (($248) + 40|0);
        $250 = HEAP32[$249>>2]|0;
        __THREW__ = 0;
        (invoke_ii($250|0,($242|0))|0);
        $251 = __THREW__; __THREW__ = 0;
        $252 = $251&1;
        if ($252) {
         label = 24;
         break L3;
        }
       } else {
        $253 = (($244) + 1|0);
        HEAP32[$243>>2] = $253;
       }
       $254 = HEAP8[$__psn>>0]|0;
       $255 = $254 & 1;
       $256 = ($255<<24>>24)==(0);
       if ($256) {
        $258 = $254&255;
        $259 = $258 >>> 1;
        $261 = $259;
       } else {
        $257 = HEAP32[$11>>2]|0;
        $261 = $257;
       }
       $260 = ($261>>>0)>(1);
       $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0234;
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0232|0)==(3);
      if ($cond) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L3;
      }
      $78 = HEAP32[$__b>>2]|0;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$78>>2]|0;
       $85 = (($84) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($78|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 24;
        break L3;
       } else {
        $$0$i$i33 = $87;
       }
      } else {
       $90 = HEAP8[$80>>0]|0;
       $91 = $90&255;
       $$0$i$i33 = $91;
      }
      $92 = $$0$i$i33&255;
      $isascii1$i = ($92<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L3;
      }
      $sext201 = $$0$i$i33 << 24;
      $93 = $sext201 >> 24;
      $94 = HEAP32[$6>>2]|0;
      $95 = (($94) + ($93<<1)|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96 & 8192;
      $98 = ($97<<16>>16)==(0);
      if ($98) {
       label = 40;
       break L3;
      }
      $99 = HEAP32[$__b>>2]|0;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($99) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($101|0)==($103|0);
      if ($104) {
       $105 = HEAP32[$99>>2]|0;
       $106 = (($105) + 40|0);
       $107 = HEAP32[$106>>2]|0;
       __THREW__ = 0;
       $108 = (invoke_ii($107|0,($99|0))|0);
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
        break L3;
       } else {
        $$0$i$i36 = $108;
       }
      } else {
       $111 = (($101) + 1|0);
       HEAP32[$100>>2] = $111;
       $112 = HEAP8[$101>>0]|0;
       $113 = $112&255;
       $$0$i$i36 = $113;
      }
      $114 = $$0$i$i36&255;
      __THREW__ = 0;
      invoke_vii(621,($__spaces|0),($114|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       label = 24;
       break L3;
      } else {
       label = 41;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 4:  {
      $56 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i138 = $877;$539 = $877;$594 = $876;$__ng$0 = 0;
      L127: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $537 = 0;
        } else {
         $524 = (($522) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = (($522) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = (($529) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 20;
           break L3;
          }
          $535 = ($532|0)==(-1);
          if ($535) {
           HEAP32[$__b>>2] = 0;
           $537 = 0;
           break;
          } else {
           $$pre$i$i$i134 = HEAP32[$__b>>2]|0;
           $537 = $$pre$i$i$i134;
           break;
          }
         } else {
          $537 = $522;
         }
        }
       } while(0);
       $536 = ($537|0)==(0|0);
       $538 = ($539|0)==(0|0);
       do {
        if ($538) {
         $884 = $$pre$i2$i$i138;
         label = 198;
        } else {
         $540 = (($539) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($539) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if (!($544)) {
          if ($536) {
           $885 = $$pre$i2$i$i138;$886 = $539;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L127;
          }
         }
         $545 = HEAP32[$539>>2]|0;
         $546 = (($545) + 36|0);
         $547 = HEAP32[$546>>2]|0;
         __THREW__ = 0;
         $548 = (invoke_ii($547|0,($539|0))|0);
         $549 = __THREW__; __THREW__ = 0;
         $550 = $549&1;
         if ($550) {
          label = 20;
          break L3;
         }
         $551 = ($548|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $884 = 0;
          label = 198;
          break;
         } else {
          $552 = ($$pre$i2$i$i138|0)==(0|0);
          $tmp$i$i140 = $536 ^ $552;
          if ($tmp$i$i140) {
           $885 = $$pre$i2$i$i138;$886 = $$pre$i2$i$i138;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L127;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($536) {
         $$pre$i2$i$i98 = $884;
         break;
        } else {
         $885 = $884;$886 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($553) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = (($559) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 20;
         break L3;
        } else {
         $$0$i$i130 = $562;
        }
       } else {
        $565 = HEAP8[$555>>0]|0;
        $566 = $565&255;
        $$0$i$i130 = $566;
       }
       $567 = $$0$i$i130&255;
       $isascii1$i128 = ($567<<24>>24)>(-1);
       if ($isascii1$i128) {
        $sext199 = $$0$i$i130 << 24;
        $568 = $sext199 >> 24;
        $569 = HEAP32[$6>>2]|0;
        $570 = (($569) + ($568<<1)|0);
        $571 = HEAP16[$570>>1]|0;
        $572 = $571 & 2048;
        $573 = ($572<<16>>16)==(0);
        if ($573) {
         label = 209;
        } else {
         $574 = HEAP32[$__wn>>2]|0;
         $575 = HEAP32[$0>>2]|0;
         $576 = ($574|0)==($575|0);
         if ($576) {
          __THREW__ = 0;
          invoke_viii(622,($__wb|0),($__wn|0),($0|0));
          $577 = __THREW__; __THREW__ = 0;
          $578 = $577&1;
          if ($578) {
           label = 20;
           break L3;
          }
          $$pre257 = HEAP32[$__wn>>2]|0;
          $580 = $$pre257;
         } else {
          $580 = $574;
         }
         $579 = (($580) + 1|0);
         HEAP32[$__wn>>2] = $579;
         HEAP8[$580>>0] = $567;
         $581 = (($__ng$0) + 1)|0;
         $887 = $594;$__ng$1 = $581;
        }
       } else {
        label = 209;
       }
       if ((label|0) == 209) {
        label = 0;
        $582 = HEAP8[$__grp>>0]|0;
        $583 = $582 & 1;
        $584 = ($583<<24>>24)==(0);
        if ($584) {
         $586 = $582&255;
         $587 = $586 >>> 1;
         $589 = $587;
        } else {
         $585 = HEAP32[$22>>2]|0;
         $589 = $585;
        }
        $588 = ($589|0)!=(0);
        $590 = ($__ng$0|0)!=(0);
        $or$cond6 = $588 & $590;
        $591 = ($567<<24>>24)==($56<<24>>24);
        $or$cond12 = $or$cond6 & $591;
        if (!($or$cond12)) {
         $$pre$i2$i$i98 = $885;
         break;
        }
        $592 = HEAP32[$__ge>>2]|0;
        $593 = ($594|0)==($592|0);
        if ($593) {
         __THREW__ = 0;
         invoke_viii(623,($__gb|0),($__gn|0),($__ge|0));
         $595 = __THREW__; __THREW__ = 0;
         $596 = $595&1;
         if ($596) {
          label = 20;
          break L3;
         }
         $$pre259 = HEAP32[$__gn>>2]|0;
         $598 = $$pre259;
        } else {
         $598 = $594;
        }
        $597 = (($598) + 4|0);
        HEAP32[$__gn>>2] = $597;
        HEAP32[$598>>2] = $__ng$0;
        $887 = $597;$__ng$1 = 0;
       }
       $599 = HEAP32[$__b>>2]|0;
       $600 = (($599) + 12|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = (($599) + 16|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ($601|0)==($603|0);
       if ($604) {
        $605 = HEAP32[$599>>2]|0;
        $606 = (($605) + 40|0);
        $607 = HEAP32[$606>>2]|0;
        __THREW__ = 0;
        (invoke_ii($607|0,($599|0))|0);
        $608 = __THREW__; __THREW__ = 0;
        $609 = $608&1;
        if ($609) {
         label = 20;
         break L3;
        } else {
         $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $610 = (($601) + 1|0);
        HEAP32[$600>>2] = $610;
        $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $611 = HEAP32[$__gb>>2]|0;
      $612 = ($611|0)!=($594|0);
      $613 = ($__ng$0|0)!=(0);
      $or$cond8 = $612 & $613;
      if ($or$cond8) {
       $614 = HEAP32[$__ge>>2]|0;
       $615 = ($594|0)==($614|0);
       if ($615) {
        __THREW__ = 0;
        invoke_viii(623,($__gb|0),($__gn|0),($__ge|0));
        $616 = __THREW__; __THREW__ = 0;
        $617 = $616&1;
        if ($617) {
         label = 24;
         break L3;
        }
        $$pre253 = HEAP32[$__gn>>2]|0;
        $619 = $$pre253;
       } else {
        $619 = $594;
       }
       $618 = (($619) + 4|0);
       HEAP32[$__gn>>2] = $618;
       HEAP32[$619>>2] = $__ng$0;
       $888 = $618;
      } else {
       $888 = $594;
      }
      $620 = HEAP32[$__fd>>2]|0;
      $621 = ($620|0)>(0);
      if ($621) {
       $622 = HEAP32[$__b>>2]|0;
       $623 = ($622|0)==(0|0);
       do {
        if ($623) {
         $637 = 0;
        } else {
         $624 = (($622) + 12|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = (($622) + 16|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ($625|0)==($627|0);
         if ($628) {
          $629 = HEAP32[$622>>2]|0;
          $630 = (($629) + 36|0);
          $631 = HEAP32[$630>>2]|0;
          __THREW__ = 0;
          $632 = (invoke_ii($631|0,($622|0))|0);
          $633 = __THREW__; __THREW__ = 0;
          $634 = $633&1;
          if ($634) {
           label = 24;
           break L3;
          }
          $635 = ($632|0)==(-1);
          if ($635) {
           HEAP32[$__b>>2] = 0;
           $637 = 0;
           break;
          } else {
           $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
           $637 = $$pre$i$i$i94;
           break;
          }
         } else {
          $637 = $622;
         }
        }
       } while(0);
       $636 = ($637|0)==(0|0);
       $638 = ($$pre$i2$i$i98|0)==(0|0);
       do {
        if ($638) {
         label = 238;
        } else {
         $639 = (($$pre$i2$i$i98) + 12|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = (($$pre$i2$i$i98) + 16|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($640|0)==($642|0);
         if (!($643)) {
          if ($636) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
         $644 = HEAP32[$$pre$i2$i$i98>>2]|0;
         $645 = (($644) + 36|0);
         $646 = HEAP32[$645>>2]|0;
         __THREW__ = 0;
         $647 = (invoke_ii($646|0,($$pre$i2$i$i98|0))|0);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          label = 24;
          break L3;
         }
         $650 = ($647|0)==(-1);
         if ($650) {
          HEAP32[$__e>>2] = 0;
          label = 238;
          break;
         } else {
          $651 = ($$pre$i2$i$i98|0)==(0|0);
          $tmp$i$i100 = $636 ^ $651;
          if ($tmp$i$i100) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        if ($636) {
         label = 244;
         break L3;
        } else {
         $890 = 0;
        }
       }
       $652 = HEAP32[$__b>>2]|0;
       $653 = (($652) + 12|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = (($652) + 16|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = ($654|0)==($656|0);
       if ($657) {
        $658 = HEAP32[$652>>2]|0;
        $659 = (($658) + 36|0);
        $660 = HEAP32[$659>>2]|0;
        __THREW__ = 0;
        $661 = (invoke_ii($660|0,($652|0))|0);
        $662 = __THREW__; __THREW__ = 0;
        $663 = $662&1;
        if ($663) {
         label = 24;
         break L3;
        } else {
         $$0$i$i87 = $661;
        }
       } else {
        $664 = HEAP8[$654>>0]|0;
        $665 = $664&255;
        $$0$i$i87 = $665;
       }
       $666 = $$0$i$i87&255;
       $667 = HEAP8[$__dp>>0]|0;
       $668 = ($666<<24>>24)==($667<<24>>24);
       if (!($668)) {
        label = 244;
        break L3;
       }
       $671 = HEAP32[$__b>>2]|0;
       $672 = (($671) + 12|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = (($671) + 16|0);
       $675 = HEAP32[$674>>2]|0;
       $676 = ($673|0)==($675|0);
       if ($676) {
        $677 = HEAP32[$671>>2]|0;
        $678 = (($677) + 40|0);
        $679 = HEAP32[$678>>2]|0;
        __THREW__ = 0;
        (invoke_ii($679|0,($671|0))|0);
        $680 = __THREW__; __THREW__ = 0;
        $681 = $680&1;
        if ($681) {
         label = 24;
         break L3;
        } else {
         $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
        }
       } else {
        $682 = (($673) + 1|0);
        HEAP32[$672>>2] = $682;
        $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
       }
       while(1) {
        $683 = HEAP32[$__b>>2]|0;
        $684 = ($683|0)==(0|0);
        do {
         if ($684) {
          $698 = 0;
         } else {
          $685 = (($683) + 12|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = (($683) + 16|0);
          $688 = HEAP32[$687>>2]|0;
          $689 = ($686|0)==($688|0);
          if ($689) {
           $690 = HEAP32[$683>>2]|0;
           $691 = (($690) + 36|0);
           $692 = HEAP32[$691>>2]|0;
           __THREW__ = 0;
           $693 = (invoke_ii($692|0,($683|0))|0);
           $694 = __THREW__; __THREW__ = 0;
           $695 = $694&1;
           if ($695) {
            label = 21;
            break L3;
           }
           $696 = ($693|0)==(-1);
           if ($696) {
            HEAP32[$__b>>2] = 0;
            $698 = 0;
            break;
           } else {
            $$pre$i$i$i70 = HEAP32[$__b>>2]|0;
            $698 = $$pre$i$i$i70;
            break;
           }
          } else {
           $698 = $683;
          }
         }
        } while(0);
        $697 = ($698|0)==(0|0);
        $699 = ($700|0)==(0|0);
        do {
         if ($699) {
          $$pre$i2$i$i74255$ph = $$pre$i2$i$i74;
          label = 260;
         } else {
          $701 = (($700) + 12|0);
          $702 = HEAP32[$701>>2]|0;
          $703 = (($700) + 16|0);
          $704 = HEAP32[$703>>2]|0;
          $705 = ($702|0)==($704|0);
          if (!($705)) {
           if ($697) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $700;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
          $706 = HEAP32[$700>>2]|0;
          $707 = (($706) + 36|0);
          $708 = HEAP32[$707>>2]|0;
          __THREW__ = 0;
          $709 = (invoke_ii($708|0,($700|0))|0);
          $710 = __THREW__; __THREW__ = 0;
          $711 = $710&1;
          if ($711) {
           label = 21;
           break L3;
          }
          $712 = ($709|0)==(-1);
          if ($712) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i74255$ph = 0;
           label = 260;
           break;
          } else {
           $713 = ($$pre$i2$i$i74|0)==(0|0);
           $tmp$i$i76 = $697 ^ $713;
           if ($tmp$i$i76) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $$pre$i2$i$i74;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 260) {
         label = 0;
         if ($697) {
          label = 267;
          break L3;
         } else {
          $$pre$i2$i$i74255266 = $$pre$i2$i$i74255$ph;$891 = 0;
         }
        }
        $714 = HEAP32[$__b>>2]|0;
        $715 = (($714) + 12|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = (($714) + 16|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = ($716|0)==($718|0);
        if ($719) {
         $720 = HEAP32[$714>>2]|0;
         $721 = (($720) + 36|0);
         $722 = HEAP32[$721>>2]|0;
         __THREW__ = 0;
         $723 = (invoke_ii($722|0,($714|0))|0);
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 21;
          break L3;
         } else {
          $$0$i$i65 = $723;
         }
        } else {
         $726 = HEAP8[$716>>0]|0;
         $727 = $726&255;
         $$0$i$i65 = $727;
        }
        $728 = $$0$i$i65&255;
        $isascii1$i63 = ($728<<24>>24)>(-1);
        if (!($isascii1$i63)) {
         label = 267;
         break L3;
        }
        $sext = $$0$i$i65 << 24;
        $729 = $sext >> 24;
        $730 = HEAP32[$6>>2]|0;
        $731 = (($730) + ($729<<1)|0);
        $732 = HEAP16[$731>>1]|0;
        $733 = $732 & 2048;
        $734 = ($733<<16>>16)==(0);
        if ($734) {
         label = 267;
         break L3;
        }
        $737 = HEAP32[$__wn>>2]|0;
        $738 = HEAP32[$0>>2]|0;
        $739 = ($737|0)==($738|0);
        if ($739) {
         __THREW__ = 0;
         invoke_viii(622,($__wb|0),($__wn|0),($0|0));
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 21;
          break L3;
         }
        }
        $742 = HEAP32[$__b>>2]|0;
        $743 = (($742) + 12|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = (($742) + 16|0);
        $746 = HEAP32[$745>>2]|0;
        $747 = ($744|0)==($746|0);
        if ($747) {
         $748 = HEAP32[$742>>2]|0;
         $749 = (($748) + 36|0);
         $750 = HEAP32[$749>>2]|0;
         __THREW__ = 0;
         $751 = (invoke_ii($750|0,($742|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 21;
          break L3;
         } else {
          $$0$i$i58 = $751;
         }
        } else {
         $754 = HEAP8[$744>>0]|0;
         $755 = $754&255;
         $$0$i$i58 = $755;
        }
        $756 = $$0$i$i58&255;
        $757 = HEAP32[$__wn>>2]|0;
        $758 = (($757) + 1|0);
        HEAP32[$__wn>>2] = $758;
        HEAP8[$757>>0] = $756;
        $759 = (($760) + -1)|0;
        HEAP32[$__fd>>2] = $759;
        $761 = HEAP32[$__b>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = (($761) + 16|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($763|0)==($765|0);
        if ($766) {
         $767 = HEAP32[$761>>2]|0;
         $768 = (($767) + 40|0);
         $769 = HEAP32[$768>>2]|0;
         __THREW__ = 0;
         (invoke_ii($769|0,($761|0))|0);
         $770 = __THREW__; __THREW__ = 0;
         $771 = $770&1;
         if ($771) {
          label = 21;
          break L3;
         }
        } else {
         $773 = (($763) + 1|0);
         HEAP32[$762>>2] = $773;
        }
        $772 = ($759|0)>(0);
        if ($772) {
         $$pre$i2$i$i74 = $$pre$i2$i$i74255266;$700 = $891;$760 = $759;
        } else {
         $889 = $$pre$i2$i$i74255266;
         break;
        }
       }
      } else {
       $889 = $$pre$i2$i$i98;
      }
      $774 = HEAP32[$__wn>>2]|0;
      $775 = HEAP32[$__wb>>2]|0;
      $776 = ($774|0)==($775|0);
      if ($776) {
       label = 278;
       break L3;
      } else {
       $879 = $889;$880 = $888;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 2:  {
      $375 = ($__trailing_sign$0234|0)!=(0|0);
      $376 = ($__p$0232>>>0)<(2);
      $or$cond = $375 | $376;
      if (!($or$cond)) {
       $377 = ($__p$0232|0)==(2);
       if ($377) {
        $378 = HEAP8[$21>>0]|0;
        $379 = ($378<<24>>24)!=(0);
        $380 = $379;
       } else {
        $380 = 0;
       }
       $brmerge = $14 | $380;
       if (!($brmerge)) {
        $879 = $877;$880 = $876;$__trailing_sign$1 = 0;
        break L25;
       }
      }
      $381 = HEAP8[$__sym>>0]|0;
      $382 = $381 & 1;
      $383 = ($382<<24>>24)==(0);
      $384 = HEAP32[$16>>2]|0;
      $$274 = $383 ? $15 : $384;
      $385 = ($__p$0232|0)==(0);
      L260: do {
       if ($385) {
        $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
       } else {
        $386 = (($__p$0232) + -1)|0;
        $387 = (($__pat) + ($386)|0);
        $388 = HEAP8[$387>>0]|0;
        $switch = ($388&255)<(2);
        if ($switch) {
         $389 = $381&255;
         $390 = $389 >>> 1;
         $391 = HEAP32[$16>>2]|0;
         $392 = HEAP32[$17>>2]|0;
         $395 = $$274;
         while(1) {
          $$275 = $383 ? $15 : $391;
          $$276 = $383 ? $390 : $392;
          $393 = (($$275) + ($$276)|0);
          $394 = ($395|0)==($393|0);
          if ($394) {
           break;
          }
          $396 = HEAP8[$395>>0]|0;
          $isascii1$i161 = ($396<<24>>24)>(-1);
          if (!($isascii1$i161)) {
           break;
          }
          $397 = $396 << 24 >> 24;
          $398 = HEAP32[$6>>2]|0;
          $399 = (($398) + ($397<<1)|0);
          $400 = HEAP16[$399>>1]|0;
          $401 = $400 & 8192;
          $402 = ($401<<16>>16)==(0);
          $403 = (($395) + 1|0);
          if ($402) {
           break;
          } else {
           $395 = $403;
          }
         }
         $$277 = $383 ? $15 : $391;
         $404 = $395;
         $405 = $$277;
         $406 = (($404) - ($405))|0;
         $407 = HEAP8[$__spaces>>0]|0;
         $408 = $407 & 1;
         $409 = ($408<<24>>24)==(0);
         if ($409) {
          $411 = $407&255;
          $412 = $411 >>> 1;
          $414 = $412;
         } else {
          $410 = HEAP32[$20>>2]|0;
          $414 = $410;
         }
         $413 = ($406>>>0)>($414>>>0);
         L272: do {
          if (!($413)) {
           if ($409) {
            $418 = $407&255;
            $419 = $418 >>> 1;
            $$sum262 = (($419) - ($406))|0;
            $420 = ((($__spaces) + ($$sum262)|0) + 1|0);
            $421 = $407&255;
            $422 = $421 >>> 1;
            $424 = $18;$425 = $422;$427 = $420;
           } else {
            $415 = HEAP32[$19>>2]|0;
            $416 = HEAP32[$20>>2]|0;
            $$sum = (($416) - ($406))|0;
            $417 = (($415) + ($$sum)|0);
            $424 = $415;$425 = $416;$427 = $417;
           }
           $423 = (($424) + ($425)|0);
           $$278 = $383 ? $15 : $391;
           $426 = ($427|0)==($423|0);
           if ($426) {
            $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
            break L260;
           } else {
            $429 = $427;$431 = $$278;
           }
           while(1) {
            $428 = HEAP8[$429>>0]|0;
            $430 = HEAP8[$431>>0]|0;
            $432 = ($428<<24>>24)==($430<<24>>24);
            if (!($432)) {
             break L272;
            }
            $433 = (($429) + 1|0);
            $434 = (($431) + 1|0);
            $435 = ($433|0)==($423|0);
            if ($435) {
             $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
             break L260;
            } else {
             $429 = $433;$431 = $434;
            }
           }
          }
         } while(0);
         $$279 = $383 ? $15 : $391;
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$279;$465 = $877;
        } else {
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
        }
       }
      } while(0);
      L282: while(1) {
       $436 = $437 & 1;
       $438 = ($436<<24>>24)==(0);
       if ($438) {
        $441 = $437&255;
        $442 = $441 >>> 1;
        $444 = $15;$445 = $442;
       } else {
        $439 = HEAP32[$16>>2]|0;
        $440 = HEAP32[$17>>2]|0;
        $444 = $439;$445 = $440;
       }
       $443 = (($444) + ($445)|0);
       $446 = ($447|0)==($443|0);
       if ($446) {
        $882 = $$pre$i2$i$i155;
        break;
       }
       $448 = HEAP32[$__b>>2]|0;
       $449 = ($448|0)==(0|0);
       do {
        if ($449) {
         $463 = 0;
        } else {
         $450 = (($448) + 12|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = (($448) + 16|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ($451|0)==($453|0);
         if ($454) {
          $455 = HEAP32[$448>>2]|0;
          $456 = (($455) + 36|0);
          $457 = HEAP32[$456>>2]|0;
          __THREW__ = 0;
          $458 = (invoke_ii($457|0,($448|0))|0);
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           label = 22;
           break L3;
          }
          $461 = ($458|0)==(-1);
          if ($461) {
           HEAP32[$__b>>2] = 0;
           $463 = 0;
           break;
          } else {
           $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
           $463 = $$pre$i$i$i151;
           break;
          }
         } else {
          $463 = $448;
         }
        }
       } while(0);
       $462 = ($463|0)==(0|0);
       $464 = ($465|0)==(0|0);
       do {
        if ($464) {
         $$pre$i2$i$i155250 = $$pre$i2$i$i155;
         label = 170;
        } else {
         $466 = (($465) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($465) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if (!($470)) {
          if ($462) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $465;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L282;
          }
         }
         $471 = HEAP32[$465>>2]|0;
         $472 = (($471) + 36|0);
         $473 = HEAP32[$472>>2]|0;
         __THREW__ = 0;
         $474 = (invoke_ii($473|0,($465|0))|0);
         $475 = __THREW__; __THREW__ = 0;
         $476 = $475&1;
         if ($476) {
          label = 22;
          break L3;
         }
         $477 = ($474|0)==(-1);
         if ($477) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i155250 = 0;
          label = 170;
          break;
         } else {
          $478 = ($$pre$i2$i$i155|0)==(0|0);
          $tmp$i$i157 = $462 ^ $478;
          if ($tmp$i$i157) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $$pre$i2$i$i155;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L282;
          }
         }
        }
       } while(0);
       if ((label|0) == 170) {
        label = 0;
        if ($462) {
         $882 = $$pre$i2$i$i155250;
         break;
        } else {
         $$pre$i2$i$i155249 = $$pre$i2$i$i155250;$883 = 0;
        }
       }
       $479 = HEAP32[$__b>>2]|0;
       $480 = (($479) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($479) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = (($485) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        __THREW__ = 0;
        $488 = (invoke_ii($487|0,($479|0))|0);
        $489 = __THREW__; __THREW__ = 0;
        $490 = $489&1;
        if ($490) {
         label = 22;
         break L3;
        } else {
         $$0$i$i147 = $488;
        }
       } else {
        $491 = HEAP8[$481>>0]|0;
        $492 = $491&255;
        $$0$i$i147 = $492;
       }
       $493 = $$0$i$i147&255;
       $494 = HEAP8[$447>>0]|0;
       $495 = ($493<<24>>24)==($494<<24>>24);
       if (!($495)) {
        $882 = $$pre$i2$i$i155249;
        break;
       }
       $496 = HEAP32[$__b>>2]|0;
       $497 = (($496) + 12|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = (($496) + 16|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ($498|0)==($500|0);
       if ($501) {
        $502 = HEAP32[$496>>2]|0;
        $503 = (($502) + 40|0);
        $504 = HEAP32[$503>>2]|0;
        __THREW__ = 0;
        (invoke_ii($504|0,($496|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 22;
         break L3;
        }
       } else {
        $507 = (($498) + 1|0);
        HEAP32[$497>>2] = $507;
       }
       $508 = (($447) + 1|0);
       $$pre248 = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i155 = $$pre$i2$i$i155249;$437 = $$pre248;$447 = $508;$465 = $883;
      }
      if ($14) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       if ($511) {
        $514 = $509&255;
        $515 = $514 >>> 1;
        $517 = $15;$518 = $515;
       } else {
        $512 = HEAP32[$16>>2]|0;
        $513 = HEAP32[$17>>2]|0;
        $517 = $512;$518 = $513;
       }
       $516 = (($517) + ($518)|0);
       $519 = ($447|0)==($516|0);
       if ($519) {
        $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
       } else {
        label = 185;
        break L3;
       }
      } else {
       $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     default: {
      $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
     }
     }
    } while(0);
    L324: do {
     if ((label|0) == 41) {
      label = 0;
      $119 = ($__p$0232|0)==(3);
      if ($119) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L3;
      } else {
       $$pre$i2$i$i43 = $877;$137 = $877;
      }
      while(1) {
       $120 = HEAP32[$__b>>2]|0;
       $121 = ($120|0)==(0|0);
       do {
        if ($121) {
         $135 = 0;
        } else {
         $122 = (($120) + 12|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (($120) + 16|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = ($123|0)==($125|0);
         if ($126) {
          $127 = HEAP32[$120>>2]|0;
          $128 = (($127) + 36|0);
          $129 = HEAP32[$128>>2]|0;
          __THREW__ = 0;
          $130 = (invoke_ii($129|0,($120|0))|0);
          $131 = __THREW__; __THREW__ = 0;
          $132 = $131&1;
          if ($132) {
           label = 23;
           break L3;
          }
          $133 = ($130|0)==(-1);
          if ($133) {
           HEAP32[$__b>>2] = 0;
           $135 = 0;
           break;
          } else {
           $$pre$i$i$i39 = HEAP32[$__b>>2]|0;
           $135 = $$pre$i$i$i39;
           break;
          }
         } else {
          $135 = $120;
         }
        }
       } while(0);
       $134 = ($135|0)==(0|0);
       $136 = ($137|0)==(0|0);
       do {
        if ($136) {
         $$pre$i2$i$i43240 = $$pre$i2$i$i43;
         label = 54;
        } else {
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($137) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if (!($142)) {
          if ($134) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $137;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L324;
          }
         }
         $143 = HEAP32[$137>>2]|0;
         $144 = (($143) + 36|0);
         $145 = HEAP32[$144>>2]|0;
         __THREW__ = 0;
         $146 = (invoke_ii($145|0,($137|0))|0);
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 23;
          break L3;
         }
         $149 = ($146|0)==(-1);
         if ($149) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i43240 = 0;
          label = 54;
          break;
         } else {
          $150 = ($$pre$i2$i$i43|0)==(0|0);
          $tmp$i$i45 = $134 ^ $150;
          if ($tmp$i$i45) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $$pre$i2$i$i43;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L324;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($134) {
         $879 = $$pre$i2$i$i43240;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L324;
        } else {
         $$pre$i2$i$i43242 = $$pre$i2$i$i43240;$881 = 0;
        }
       }
       $151 = HEAP32[$__b>>2]|0;
       $152 = (($151) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($151) + 16|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($153|0)==($155|0);
       if ($156) {
        $157 = HEAP32[$151>>2]|0;
        $158 = (($157) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($151|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         label = 23;
         break L3;
        } else {
         $$0$i$i49 = $160;
        }
       } else {
        $163 = HEAP8[$153>>0]|0;
        $164 = $163&255;
        $$0$i$i49 = $164;
       }
       $165 = $$0$i$i49&255;
       $isascii1$i52 = ($165<<24>>24)>(-1);
       if (!($isascii1$i52)) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L324;
       }
       $sext200 = $$0$i$i49 << 24;
       $166 = $sext200 >> 24;
       $167 = HEAP32[$6>>2]|0;
       $168 = (($167) + ($166<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 & 8192;
       $171 = ($170<<16>>16)==(0);
       if ($171) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L324;
       }
       $172 = HEAP32[$__b>>2]|0;
       $173 = (($172) + 12|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 16|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($174|0)==($176|0);
       if ($177) {
        $178 = HEAP32[$172>>2]|0;
        $179 = (($178) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        __THREW__ = 0;
        $181 = (invoke_ii($180|0,($172|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         label = 23;
         break L3;
        } else {
         $$0$i$i55 = $181;
        }
       } else {
        $184 = (($174) + 1|0);
        HEAP32[$173>>2] = $184;
        $185 = HEAP8[$174>>0]|0;
        $186 = $185&255;
        $$0$i$i55 = $186;
       }
       $187 = $$0$i$i55&255;
       __THREW__ = 0;
       invoke_vii(621,($__spaces|0),($187|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 23;
        break L3;
       } else {
        $$pre$i2$i$i43 = $$pre$i2$i$i43242;$137 = $881;
       }
      }
     }
    } while(0);
    $779 = (($__p$0232) + 1)|0;
    $780 = ($779>>>0)<(4);
    if ($780) {
     $876 = $880;$__p$0232 = $779;$__trailing_sign$0234 = $__trailing_sign$1;
    } else {
     $864 = $880;$878 = $879;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 280;
     break;
    }
   }
   L359:    switch (label|0) {
    case 20: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
     break;
    }
    case 21: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
     break;
    }
    case 22: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
     break;
    }
    case 23: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
     break;
    }
    case 24: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L1;
     break;
    }
    case 40: {
     $117 = HEAP32[$__err>>2]|0;
     $118 = $117 | 4;
     HEAP32[$__err>>2] = $118;
     $$0 = 0;
     break;
    }
    case 132: {
     $373 = HEAP32[$__err>>2]|0;
     $374 = $373 | 4;
     HEAP32[$__err>>2] = $374;
     $$0 = 0;
     break;
    }
    case 185: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 244: {
     $669 = HEAP32[$__err>>2]|0;
     $670 = $669 | 4;
     HEAP32[$__err>>2] = $670;
     $$0 = 0;
     break;
    }
    case 267: {
     $735 = HEAP32[$__err>>2]|0;
     $736 = $735 | 4;
     HEAP32[$__err>>2] = $736;
     $$0 = 0;
     break;
    }
    case 278: {
     $777 = HEAP32[$__err>>2]|0;
     $778 = $777 | 4;
     HEAP32[$__err>>2] = $778;
     $$0 = 0;
     break;
    }
    case 280: {
     $781 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L365: do {
      if (!($781)) {
       $782 = (($__trailing_sign$0$lcssa) + 1|0);
       $783 = (($__trailing_sign$0$lcssa) + 8|0);
       $784 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $878;$810 = $878;$__i$0 = 1;
       L367: while(1) {
        $785 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $786 = $785 & 1;
        $787 = ($786<<24>>24)==(0);
        if ($787) {
         $789 = $785&255;
         $790 = $789 >>> 1;
         $792 = $790;
        } else {
         $788 = HEAP32[$784>>2]|0;
         $792 = $788;
        }
        $791 = ($__i$0>>>0)<($792>>>0);
        if (!($791)) {
         break L365;
        }
        $793 = HEAP32[$__b>>2]|0;
        $794 = ($793|0)==(0|0);
        do {
         if ($794) {
          $808 = 0;
         } else {
          $795 = (($793) + 12|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = (($793) + 16|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($796|0)==($798|0);
          if ($799) {
           $800 = HEAP32[$793>>2]|0;
           $801 = (($800) + 36|0);
           $802 = HEAP32[$801>>2]|0;
           __THREW__ = 0;
           $803 = (invoke_ii($802|0,($793|0))|0);
           $804 = __THREW__; __THREW__ = 0;
           $805 = $804&1;
           if ($805) {
            label = 19;
            break L367;
           }
           $806 = ($803|0)==(-1);
           if ($806) {
            HEAP32[$__b>>2] = 0;
            $808 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $808 = $$pre$i$i$i;
            break;
           }
          } else {
           $808 = $793;
          }
         }
        } while(0);
        $807 = ($808|0)==(0|0);
        $809 = ($810|0)==(0|0);
        do {
         if ($809) {
          $$pre$i2$i$i261$ph = $$pre$i2$i$i;
          label = 298;
         } else {
          $811 = (($810) + 12|0);
          $812 = HEAP32[$811>>2]|0;
          $813 = (($810) + 16|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ($812|0)==($814|0);
          if (!($815)) {
           if ($807) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $810;
            break;
           } else {
            label = 306;
            break L367;
           }
          }
          $816 = HEAP32[$810>>2]|0;
          $817 = (($816) + 36|0);
          $818 = HEAP32[$817>>2]|0;
          __THREW__ = 0;
          $819 = (invoke_ii($818|0,($810|0))|0);
          $820 = __THREW__; __THREW__ = 0;
          $821 = $820&1;
          if ($821) {
           label = 19;
           break L367;
          }
          $822 = ($819|0)==(-1);
          if ($822) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i261$ph = 0;
           label = 298;
           break;
          } else {
           $823 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $807 ^ $823;
           if ($tmp$i$i) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $$pre$i2$i$i;
            break;
           } else {
            label = 306;
            break L367;
           }
          }
         }
        } while(0);
        if ((label|0) == 298) {
         label = 0;
         if ($807) {
          label = 306;
          break;
         } else {
          $$pre$i2$i$i261269 = $$pre$i2$i$i261$ph;$892 = 0;
         }
        }
        $824 = HEAP32[$__b>>2]|0;
        $825 = (($824) + 12|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = (($824) + 16|0);
        $828 = HEAP32[$827>>2]|0;
        $829 = ($826|0)==($828|0);
        if ($829) {
         $830 = HEAP32[$824>>2]|0;
         $831 = (($830) + 36|0);
         $832 = HEAP32[$831>>2]|0;
         __THREW__ = 0;
         $833 = (invoke_ii($832|0,($824|0))|0);
         $834 = __THREW__; __THREW__ = 0;
         $835 = $834&1;
         if ($835) {
          label = 19;
          break;
         } else {
          $$0$i$i = $833;
         }
        } else {
         $836 = HEAP8[$826>>0]|0;
         $837 = $836&255;
         $$0$i$i = $837;
        }
        $838 = $$0$i$i&255;
        $839 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $840 = $839 & 1;
        $841 = ($840<<24>>24)==(0);
        if ($841) {
         $844 = $782;
        } else {
         $842 = HEAP32[$783>>2]|0;
         $844 = $842;
        }
        $843 = (($844) + ($__i$0)|0);
        $845 = HEAP8[$843>>0]|0;
        $846 = ($838<<24>>24)==($845<<24>>24);
        if (!($846)) {
         label = 306;
         break;
        }
        $849 = (($__i$0) + 1)|0;
        $850 = HEAP32[$__b>>2]|0;
        $851 = (($850) + 12|0);
        $852 = HEAP32[$851>>2]|0;
        $853 = (($850) + 16|0);
        $854 = HEAP32[$853>>2]|0;
        $855 = ($852|0)==($854|0);
        if ($855) {
         $856 = HEAP32[$850>>2]|0;
         $857 = (($856) + 40|0);
         $858 = HEAP32[$857>>2]|0;
         __THREW__ = 0;
         (invoke_ii($858|0,($850|0))|0);
         $859 = __THREW__; __THREW__ = 0;
         $860 = $859&1;
         if ($860) {
          label = 19;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
          continue;
         }
        } else {
         $861 = (($852) + 1|0);
         HEAP32[$851>>2] = $861;
         $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
         continue;
        }
       }
       if ((label|0) == 19) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $lpad$phi$index = $57;$lpad$phi$index7 = $58;
        break L1;
       }
       else if ((label|0) == 306) {
        $847 = HEAP32[$__err>>2]|0;
        $848 = $847 | 4;
        HEAP32[$__err>>2] = $848;
        $$0 = 0;
        break L359;
       }
      }
     } while(0);
     $862 = HEAP32[$__gb>>2]|0;
     $863 = ($862|0)==($864|0);
     if ($863) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$862,$864,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if ($870) {
    STACKTOP = sp;return ($$0|0);
   }
   $871 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($871|0,($869|0));
   $872 = __THREW__; __THREW__ = 0;
   $873 = $872&1;
   if ($873) {
    $874 = ___cxa_find_matching_catch(0|0)|0;
    $875 = tempRet0;
    ___clang_call_terminate($874);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $71 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $73 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($73|0,($71|0));
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $76 = ___cxa_find_matching_catch(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(624,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(40576|0),(396|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 8|0;
 $__wn = sp + 24|0;
 $__loc = sp + 20|0;
 $__neg = sp + 128|0;
 $0 = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 617;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(435,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $32;$$014 = $31;$95 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(436,($__loc|0),(31960|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(618,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(621,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      L18: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP8[$__w$05>>0]|0;
         $46 = ($45<<24>>24)==($36<<24>>24);
         $44 = (($__w$05) + 1|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L18;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(625,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $64 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $64 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $64 = $$pre$i$i$i;
         break;
        }
       } else {
        $64 = $49;
       }
      }
     } while(0);
     $63 = ($64|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 29;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($63) {
         break;
        } else {
         label = 31;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 29;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $63 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($63) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      STACKTOP = sp;return;
     }
     $85 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($85|0,($83|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0113 = $91;$$015 = $90;
   ___resumeException($$015|0);
   // unreachable;
  } else {
   $$0112 = $91;$$014 = $90;$95 = $$pre;
  }
 }
 $94 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($94|0,($95|0));
 $96 = __THREW__; __THREW__ = 0;
 $97 = $96&1;
 if ($97) {
  $98 = ___cxa_find_matching_catch(0|0)|0;
  $99 = tempRet0;
  ___clang_call_terminate($98);
  // unreachable;
 } else {
  $$0113 = $$0112;$$015 = $$014;
  ___resumeException($$015|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31400)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 1|0);
   HEAP8[$38>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP8[$36>>0] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 1|0);
   HEAP8[$74>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP8[$72>>0] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31336)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 1|0);
   HEAP8[$97>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP8[$95>>0] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 1|0);
   HEAP8[$111>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP8[$109>>0] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP8[$__dp>>0] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP8[$__ts>>0] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 1|0);
   HEAP8[$147>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = (($49) + -1)|0;
 $51 = ($50>>>0)<($48>>>0);
 if ($51) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0;
 var $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 464|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 576|0;
 $0 = sp + 56|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 617;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(435,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$112 = $33;$$1210 = $34;$107 = 617;$108 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(436,($__loc|0),(31952|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L4: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(627,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 48|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(31656|0),(((31656 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       if ($24) {
        $25 = $23 >> 2;
        $26 = (($25) + 2)|0;
        $27 = (_malloc($26)|0);
        $28 = ($27|0)==(0|0);
        if ($28) {
         __THREW__ = 0;
         invoke_v(605);
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if ($30) {
          $31 = ___cxa_find_matching_catch()|0;
          $32 = tempRet0;
          $$0 = $31;$$01 = $32;
          break;
         } else {
          $39 = 0;$__nc$0 = 0;
         }
        } else {
         $39 = $27;$__nc$0 = $27;
        }
       } else {
        $39 = 0;$__nc$0 = $__nbuf;
       }
       $40 = HEAP8[$__neg>>0]|0;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $__nc$1 = $__nc$0;
       } else {
        $42 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $42;
       }
       $43 = ($20>>>0)<($19>>>0);
       if ($43) {
        $44 = (($__atoms) + 40|0);
        $45 = $__atoms;
        $__nc$26 = $__nc$1;$__w$07 = $20;
        while(1) {
         $46 = HEAP32[$__w$07>>2]|0;
         $$01$i = $__atoms;
         while(1) {
          $49 = HEAP32[$$01$i>>2]|0;
          $50 = ($49|0)==($46|0);
          $48 = (($$01$i) + 4|0);
          if ($50) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $47 = ($48|0)==($44|0);
          if ($47) {
           $$0$lcssa$i = $44;
           break;
          } else {
           $$01$i = $48;
          }
         }
         $51 = $$0$lcssa$i;
         $52 = (($51) - ($45))|0;
         $53 = $52 >> 2;
         $54 = (31656 + ($53)|0);
         $55 = HEAP8[$54>>0]|0;
         HEAP8[$__nc$26>>0] = $55;
         $56 = (($__w$07) + 4|0);
         $57 = (($__nc$26) + 1|0);
         $58 = HEAP32[$__wn>>2]|0;
         $59 = ($56>>>0)<($58>>>0);
         if ($59) {
          $__nc$26 = $57;$__w$07 = $56;
         } else {
          $__nc$2$lcssa = $57;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $60 = (_sscanf($__nbuf,31592,$vararg_buffer)|0);
       $61 = ($60|0)==(1);
       if (!($61)) {
        __THREW__ = 0;
        invoke_vi(619,(31600|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         $37 = ___cxa_find_matching_catch()|0;
         $38 = tempRet0;
         _free($39);
         $$0 = $37;$$01 = $38;
         break;
        }
       }
       _free($39);
      }
      $64 = HEAP32[$__b>>2]|0;
      $65 = ($64|0)==(0|0);
      do {
       if ($65) {
        $113 = 1;
       } else {
        $66 = (($64) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($64) + 16|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($67|0)==($69|0);
        if ($70) {
         $71 = HEAP32[$64>>2]|0;
         $72 = (($71) + 36|0);
         $73 = HEAP32[$72>>2]|0;
         __THREW__ = 0;
         $74 = (invoke_ii($73|0,($64|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 11;
          break L4;
         } else {
          $$0$i$i$i$i = $74;
         }
        } else {
         $77 = HEAP32[$67>>2]|0;
         $$0$i$i$i$i = $77;
        }
        $78 = ($$0$i$i$i$i|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $113 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $113 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $79 = HEAP32[$__e>>2]|0;
      $80 = ($79|0)==(0|0);
      do {
       if ($80) {
        label = 37;
       } else {
        $81 = (($79) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($79) + 16|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        if ($85) {
         $86 = HEAP32[$79>>2]|0;
         $87 = (($86) + 36|0);
         $88 = HEAP32[$87>>2]|0;
         __THREW__ = 0;
         $89 = (invoke_ii($88|0,($79|0))|0);
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if ($91) {
          label = 11;
          break L4;
         } else {
          $$0$i$i1$i$i = $89;
         }
        } else {
         $92 = HEAP32[$82>>2]|0;
         $$0$i$i1$i$i = $92;
        }
        $93 = ($$0$i$i1$i$i|0)==(-1);
        if ($93) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        } else {
         if ($113) {
          break;
         } else {
          label = 39;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       if ($113) {
        label = 39;
       }
      }
      if ((label|0) == 39) {
       $94 = HEAP32[$__err>>2]|0;
       $95 = $94 | 2;
       HEAP32[$__err>>2] = $95;
      }
      $96 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $96;
      $97 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
      $98 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $99 = ($98|0)==(0|0);
      if ($99) {
       STACKTOP = sp;return;
      }
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $$0 = $35;$$01 = $36;
   }
   $105 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $106 = ($$pre|0)==(0|0);
   if ($106) {
    $$113 = $$0;$$1211 = $$01;
    ___resumeException($$113|0);
    // unreachable;
   } else {
    $$pre15 = HEAP32[$1>>2]|0;
    $$112 = $$0;$$1210 = $$01;$107 = $$pre15;$108 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($107|0,($108|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch(0|0)|0;
  $112 = tempRet0;
  ___clang_call_terminate($111);
  // unreachable;
 } else {
  $$113 = $$112;$$1211 = $$1210;
  ___resumeException($$113|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i$i$i149 = 0, $$0$i$i$i$i174 = 0, $$0$i$i$i$i22 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i83 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i123 = 0, $$0$i$i1$i$i155 = 0, $$0$i$i1$i$i180 = 0, $$0$i$i1$i$i28 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i89 = 0, $$0$i$i101 = 0, $$0$i$i110 = 0, $$0$i$i113 = 0;
 var $$0$i$i135 = 0, $$0$i$i146 = 0, $$0$i$i170 = 0, $$0$i$i37 = 0, $$0$i$i41 = 0, $$0$i$i58 = 0, $$0$i$i64 = 0, $$0$i$i69 = 0, $$0$i$i77 = 0, $$0$i$i80 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0;
 var $$pre$i$i$i151 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i85 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i125 = 0, $$pre$i3$i$i157 = 0, $$pre$i3$i$i182 = 0, $$pre$i3$i$i182268 = 0, $$pre$i3$i$i182269 = 0, $$pre$i3$i$i279$ph = 0, $$pre$i3$i$i279287 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51260 = 0, $$pre$i3$i$i51262 = 0, $$pre$i3$i$i91 = 0, $$pre$i3$i$i91273$ph = 0, $$pre$i3$i$i91273284 = 0, $$pre263 = 0;
 var $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre275 = 0, $$pre277 = 0, $$sum = 0, $$sum280 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0250 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0252 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $phitmp$i$i$i152 = 0, $phitmp$i$i$i177 = 0;
 var $phitmp$i$i$i25 = 0, $phitmp$i$i$i46 = 0, $phitmp$i$i$i86 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i158 = 0, $phitmp$i4$i$i183 = 0, $phitmp$i4$i$i52 = 0, $phitmp$i4$i$i92 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i160 = 0, $tmp$i$i185 = 0, $tmp$i$i54 = 0, $tmp$i$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 492|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 48|0;
 $__gn = sp + 44|0;
 $__ge = sp + 36|0;
 $__pat = sp + 84|0;
 $__dp = sp + 488|0;
 $__ts = sp + 496|0;
 $__grp = sp + 56|0;
 $__sym = sp + 24|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 68|0;
 $__spaces = sp;
 $__fd = sp + 40|0;
 $__et = sp + 80|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 617;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(628,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $lpad$phi$index = $66;$lpad$phi$index8 = $67;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $855 = $__gbuf;$__p$0250 = 0;$__trailing_sign$0252 = 0;
   L3: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $856 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L3;
       } else {
        $$0$i$i$i$i22 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i22 = $31;
      }
      $32 = ($$0$i$i$i$i22|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $856 = 1;
       break;
      } else {
       $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i25 = ($$pre$i$i$i24|0)==(0|0);
       $856 = $phitmp$i$i$i25;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L3;
       } else {
        $$0$i$i1$i$i28 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i28 = $46;
      }
      $47 = ($$0$i$i1$i$i28|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($856) {
        $858 = $33;
        break;
       } else {
        $843 = $855;$857 = $33;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
        label = 291;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($856) {
      $843 = $855;$857 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
      label = 291;
      break;
     } else {
      $858 = 0;
     }
    }
    $48 = (($__pat) + ($__p$0250)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    L27: do {
     switch ($50|0) {
     case 4:  {
      $51 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i157 = $858;$529 = $858;$583 = $855;$__ng$0 = 0;
      L29: while(1) {
       $513 = HEAP32[$__b>>2]|0;
       $514 = ($513|0)==(0|0);
       do {
        if ($514) {
         $543 = 1;
        } else {
         $515 = (($513) + 12|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (($513) + 16|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = ($516|0)==($518|0);
         if ($519) {
          $520 = HEAP32[$513>>2]|0;
          $521 = (($520) + 36|0);
          $522 = HEAP32[$521>>2]|0;
          __THREW__ = 0;
          $523 = (invoke_ii($522|0,($513|0))|0);
          $524 = __THREW__; __THREW__ = 0;
          $525 = $524&1;
          if ($525) {
           label = 21;
           break L3;
          } else {
           $$0$i$i$i$i149 = $523;
          }
         } else {
          $526 = HEAP32[$516>>2]|0;
          $$0$i$i$i$i149 = $526;
         }
         $527 = ($$0$i$i$i$i149|0)==(-1);
         if ($527) {
          HEAP32[$__b>>2] = 0;
          $543 = 1;
          break;
         } else {
          $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i152 = ($$pre$i$i$i151|0)==(0|0);
          $543 = $phitmp$i$i$i152;
          break;
         }
        }
       } while(0);
       $528 = ($529|0)==(0|0);
       do {
        if ($528) {
         $864 = $$pre$i3$i$i157;
         label = 207;
        } else {
         $530 = (($529) + 12|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = (($529) + 16|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = ($531|0)==($533|0);
         if ($534) {
          $535 = HEAP32[$529>>2]|0;
          $536 = (($535) + 36|0);
          $537 = HEAP32[$536>>2]|0;
          __THREW__ = 0;
          $538 = (invoke_ii($537|0,($529|0))|0);
          $539 = __THREW__; __THREW__ = 0;
          $540 = $539&1;
          if ($540) {
           label = 21;
           break L3;
          } else {
           $$0$i$i1$i$i155 = $538;
          }
         } else {
          $541 = HEAP32[$531>>2]|0;
          $$0$i$i1$i$i155 = $541;
         }
         $542 = ($$0$i$i1$i$i155|0)==(-1);
         if ($542) {
          HEAP32[$__e>>2] = 0;
          $864 = 0;
          label = 207;
          break;
         } else {
          $phitmp$i4$i$i158 = ($$pre$i3$i$i157|0)==(0|0);
          $tmp$i$i160 = $543 ^ $phitmp$i4$i$i158;
          if ($tmp$i$i160) {
           $865 = $$pre$i3$i$i157;$866 = $$pre$i3$i$i157;
           break;
          } else {
           $$pre$i3$i$i125 = $$pre$i3$i$i157;
           break L29;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($543) {
         $$pre$i3$i$i125 = $864;
         break;
        } else {
         $865 = $864;$866 = 0;
        }
       }
       $544 = HEAP32[$__b>>2]|0;
       $545 = (($544) + 12|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($544) + 16|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = ($546|0)==($548|0);
       if ($549) {
        $550 = HEAP32[$544>>2]|0;
        $551 = (($550) + 36|0);
        $552 = HEAP32[$551>>2]|0;
        __THREW__ = 0;
        $553 = (invoke_ii($552|0,($544|0))|0);
        $554 = __THREW__; __THREW__ = 0;
        $555 = $554&1;
        if ($555) {
         label = 21;
         break L3;
        } else {
         $$0$i$i146 = $553;
        }
       } else {
        $556 = HEAP32[$546>>2]|0;
        $$0$i$i146 = $556;
       }
       $557 = HEAP32[$__ct>>2]|0;
       $558 = (($557) + 12|0);
       $559 = HEAP32[$558>>2]|0;
       __THREW__ = 0;
       $560 = (invoke_iiii($559|0,($__ct|0),2048,($$0$i$i146|0))|0);
       $561 = __THREW__; __THREW__ = 0;
       $562 = $561&1;
       if ($562) {
        label = 21;
        break L3;
       }
       if ($560) {
        $563 = HEAP32[$__wn>>2]|0;
        $564 = HEAP32[$0>>2]|0;
        $565 = ($563|0)==($564|0);
        if ($565) {
         __THREW__ = 0;
         invoke_viii(630,($__wb|0),($__wn|0),($0|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          label = 21;
          break L3;
         }
         $$pre275 = HEAP32[$__wn>>2]|0;
         $569 = $$pre275;
        } else {
         $569 = $563;
        }
        $568 = (($569) + 4|0);
        HEAP32[$__wn>>2] = $568;
        HEAP32[$569>>2] = $$0$i$i146;
        $570 = (($__ng$0) + 1)|0;
        $867 = $583;$__ng$1 = $570;
       } else {
        $571 = HEAP8[$__grp>>0]|0;
        $572 = $571 & 1;
        $573 = ($572<<24>>24)==(0);
        if ($573) {
         $575 = $571&255;
         $576 = $575 >>> 1;
         $578 = $576;
        } else {
         $574 = HEAP32[$17>>2]|0;
         $578 = $574;
        }
        $577 = ($578|0)!=(0);
        $579 = ($__ng$0|0)!=(0);
        $or$cond6 = $577 & $579;
        $580 = ($$0$i$i146|0)==($51|0);
        $or$cond12 = $or$cond6 & $580;
        if (!($or$cond12)) {
         $$pre$i3$i$i125 = $865;
         break;
        }
        $581 = HEAP32[$__ge>>2]|0;
        $582 = ($583|0)==($581|0);
        if ($582) {
         __THREW__ = 0;
         invoke_viii(623,($__gb|0),($__gn|0),($__ge|0));
         $584 = __THREW__; __THREW__ = 0;
         $585 = $584&1;
         if ($585) {
          label = 21;
          break L3;
         }
         $$pre277 = HEAP32[$__gn>>2]|0;
         $587 = $$pre277;
        } else {
         $587 = $583;
        }
        $586 = (($587) + 4|0);
        HEAP32[$__gn>>2] = $586;
        HEAP32[$587>>2] = $__ng$0;
        $867 = $586;$__ng$1 = 0;
       }
       $588 = HEAP32[$__b>>2]|0;
       $589 = (($588) + 12|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (($588) + 16|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = ($590|0)==($592|0);
       if ($593) {
        $594 = HEAP32[$588>>2]|0;
        $595 = (($594) + 40|0);
        $596 = HEAP32[$595>>2]|0;
        __THREW__ = 0;
        (invoke_ii($596|0,($588|0))|0);
        $597 = __THREW__; __THREW__ = 0;
        $598 = $597&1;
        if ($598) {
         label = 21;
         break L3;
        } else {
         $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $599 = (($590) + 4|0);
        HEAP32[$589>>2] = $599;
        $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $600 = HEAP32[$__gb>>2]|0;
      $601 = ($600|0)!=($583|0);
      $602 = ($__ng$0|0)!=(0);
      $or$cond8 = $601 & $602;
      if ($or$cond8) {
       $603 = HEAP32[$__ge>>2]|0;
       $604 = ($583|0)==($603|0);
       if ($604) {
        __THREW__ = 0;
        invoke_viii(623,($__gb|0),($__gn|0),($__ge|0));
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         label = 26;
         break L3;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $608 = $$pre271;
       } else {
        $608 = $583;
       }
       $607 = (($608) + 4|0);
       HEAP32[$__gn>>2] = $607;
       HEAP32[$608>>2] = $__ng$0;
       $868 = $607;
      } else {
       $868 = $583;
      }
      $609 = HEAP32[$__fd>>2]|0;
      $610 = ($609|0)>(0);
      if ($610) {
       $611 = HEAP32[$__b>>2]|0;
       $612 = ($611|0)==(0|0);
       do {
        if ($612) {
         $870 = 1;
        } else {
         $613 = (($611) + 12|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = (($611) + 16|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = ($614|0)==($616|0);
         if ($617) {
          $618 = HEAP32[$611>>2]|0;
          $619 = (($618) + 36|0);
          $620 = HEAP32[$619>>2]|0;
          __THREW__ = 0;
          $621 = (invoke_ii($620|0,($611|0))|0);
          $622 = __THREW__; __THREW__ = 0;
          $623 = $622&1;
          if ($623) {
           label = 26;
           break L3;
          } else {
           $$0$i$i$i$i117 = $621;
          }
         } else {
          $624 = HEAP32[$614>>2]|0;
          $$0$i$i$i$i117 = $624;
         }
         $625 = ($$0$i$i$i$i117|0)==(-1);
         if ($625) {
          HEAP32[$__b>>2] = 0;
          $870 = 1;
          break;
         } else {
          $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
          $870 = $phitmp$i$i$i120;
          break;
         }
        }
       } while(0);
       $626 = ($$pre$i3$i$i125|0)==(0|0);
       do {
        if ($626) {
         label = 248;
        } else {
         $627 = (($$pre$i3$i$i125) + 12|0);
         $628 = HEAP32[$627>>2]|0;
         $629 = (($$pre$i3$i$i125) + 16|0);
         $630 = HEAP32[$629>>2]|0;
         $631 = ($628|0)==($630|0);
         if ($631) {
          $632 = HEAP32[$$pre$i3$i$i125>>2]|0;
          $633 = (($632) + 36|0);
          $634 = HEAP32[$633>>2]|0;
          __THREW__ = 0;
          $635 = (invoke_ii($634|0,($$pre$i3$i$i125|0))|0);
          $636 = __THREW__; __THREW__ = 0;
          $637 = $636&1;
          if ($637) {
           label = 26;
           break L3;
          } else {
           $$0$i$i1$i$i123 = $635;
          }
         } else {
          $638 = HEAP32[$628>>2]|0;
          $$0$i$i1$i$i123 = $638;
         }
         $639 = ($$0$i$i1$i$i123|0)==(-1);
         if ($639) {
          HEAP32[$__e>>2] = 0;
          label = 248;
          break;
         } else {
          if ($870) {
           $871 = $$pre$i3$i$i125;
           break;
          } else {
           label = 254;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 248) {
        label = 0;
        if ($870) {
         label = 254;
         break L3;
        } else {
         $871 = 0;
        }
       }
       $640 = HEAP32[$__b>>2]|0;
       $641 = (($640) + 12|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = (($640) + 16|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ($642|0)==($644|0);
       if ($645) {
        $646 = HEAP32[$640>>2]|0;
        $647 = (($646) + 36|0);
        $648 = HEAP32[$647>>2]|0;
        __THREW__ = 0;
        $649 = (invoke_ii($648|0,($640|0))|0);
        $650 = __THREW__; __THREW__ = 0;
        $651 = $650&1;
        if ($651) {
         label = 26;
         break L3;
        } else {
         $$0$i$i110 = $649;
        }
       } else {
        $652 = HEAP32[$642>>2]|0;
        $$0$i$i110 = $652;
       }
       $653 = HEAP32[$__dp>>2]|0;
       $654 = ($$0$i$i110|0)==($653|0);
       if (!($654)) {
        label = 254;
        break L3;
       }
       $657 = HEAP32[$__b>>2]|0;
       $658 = (($657) + 12|0);
       $659 = HEAP32[$658>>2]|0;
       $660 = (($657) + 16|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = ($659|0)==($661|0);
       if ($662) {
        $663 = HEAP32[$657>>2]|0;
        $664 = (($663) + 40|0);
        $665 = HEAP32[$664>>2]|0;
        __THREW__ = 0;
        (invoke_ii($665|0,($657|0))|0);
        $666 = __THREW__; __THREW__ = 0;
        $667 = $666&1;
        if ($667) {
         label = 26;
         break L3;
        } else {
         $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
        }
       } else {
        $668 = (($659) + 4|0);
        HEAP32[$658>>2] = $668;
        $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
       }
       while(1) {
        $669 = HEAP32[$__b>>2]|0;
        $670 = ($669|0)==(0|0);
        do {
         if ($670) {
          $699 = 1;
         } else {
          $671 = (($669) + 12|0);
          $672 = HEAP32[$671>>2]|0;
          $673 = (($669) + 16|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = ($672|0)==($674|0);
          if ($675) {
           $676 = HEAP32[$669>>2]|0;
           $677 = (($676) + 36|0);
           $678 = HEAP32[$677>>2]|0;
           __THREW__ = 0;
           $679 = (invoke_ii($678|0,($669|0))|0);
           $680 = __THREW__; __THREW__ = 0;
           $681 = $680&1;
           if ($681) {
            label = 22;
            break L3;
           } else {
            $$0$i$i$i$i83 = $679;
           }
          } else {
           $682 = HEAP32[$672>>2]|0;
           $$0$i$i$i$i83 = $682;
          }
          $683 = ($$0$i$i$i$i83|0)==(-1);
          if ($683) {
           HEAP32[$__b>>2] = 0;
           $699 = 1;
           break;
          } else {
           $$pre$i$i$i85 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i86 = ($$pre$i$i$i85|0)==(0|0);
           $699 = $phitmp$i$i$i86;
           break;
          }
         }
        } while(0);
        $684 = ($685|0)==(0|0);
        do {
         if ($684) {
          $$pre$i3$i$i91273$ph = $$pre$i3$i$i91;
          label = 271;
         } else {
          $686 = (($685) + 12|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = (($685) + 16|0);
          $689 = HEAP32[$688>>2]|0;
          $690 = ($687|0)==($689|0);
          if ($690) {
           $691 = HEAP32[$685>>2]|0;
           $692 = (($691) + 36|0);
           $693 = HEAP32[$692>>2]|0;
           __THREW__ = 0;
           $694 = (invoke_ii($693|0,($685|0))|0);
           $695 = __THREW__; __THREW__ = 0;
           $696 = $695&1;
           if ($696) {
            label = 22;
            break L3;
           } else {
            $$0$i$i1$i$i89 = $694;
           }
          } else {
           $697 = HEAP32[$687>>2]|0;
           $$0$i$i1$i$i89 = $697;
          }
          $698 = ($$0$i$i1$i$i89|0)==(-1);
          if ($698) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i91273$ph = 0;
           label = 271;
           break;
          } else {
           $phitmp$i4$i$i92 = ($$pre$i3$i$i91|0)==(0|0);
           $tmp$i$i94 = $699 ^ $phitmp$i4$i$i92;
           if ($tmp$i$i94) {
            $$pre$i3$i$i91273284 = $$pre$i3$i$i91;$872 = $$pre$i3$i$i91;
            break;
           } else {
            label = 278;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 271) {
         label = 0;
         if ($699) {
          label = 278;
          break L3;
         } else {
          $$pre$i3$i$i91273284 = $$pre$i3$i$i91273$ph;$872 = 0;
         }
        }
        $700 = HEAP32[$__b>>2]|0;
        $701 = (($700) + 12|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = (($700) + 16|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = ($702|0)==($704|0);
        if ($705) {
         $706 = HEAP32[$700>>2]|0;
         $707 = (($706) + 36|0);
         $708 = HEAP32[$707>>2]|0;
         __THREW__ = 0;
         $709 = (invoke_ii($708|0,($700|0))|0);
         $710 = __THREW__; __THREW__ = 0;
         $711 = $710&1;
         if ($711) {
          label = 22;
          break L3;
         } else {
          $$0$i$i77 = $709;
         }
        } else {
         $712 = HEAP32[$702>>2]|0;
         $$0$i$i77 = $712;
        }
        $713 = HEAP32[$__ct>>2]|0;
        $714 = (($713) + 12|0);
        $715 = HEAP32[$714>>2]|0;
        __THREW__ = 0;
        $716 = (invoke_iiii($715|0,($__ct|0),2048,($$0$i$i77|0))|0);
        $717 = __THREW__; __THREW__ = 0;
        $718 = $717&1;
        if ($718) {
         label = 22;
         break L3;
        }
        if (!($716)) {
         label = 278;
         break L3;
        }
        $721 = HEAP32[$__wn>>2]|0;
        $722 = HEAP32[$0>>2]|0;
        $723 = ($721|0)==($722|0);
        if ($723) {
         __THREW__ = 0;
         invoke_viii(630,($__wb|0),($__wn|0),($0|0));
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 22;
          break L3;
         }
        }
        $726 = HEAP32[$__b>>2]|0;
        $727 = (($726) + 12|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = (($726) + 16|0);
        $730 = HEAP32[$729>>2]|0;
        $731 = ($728|0)==($730|0);
        if ($731) {
         $732 = HEAP32[$726>>2]|0;
         $733 = (($732) + 36|0);
         $734 = HEAP32[$733>>2]|0;
         __THREW__ = 0;
         $735 = (invoke_ii($734|0,($726|0))|0);
         $736 = __THREW__; __THREW__ = 0;
         $737 = $736&1;
         if ($737) {
          label = 22;
          break L3;
         } else {
          $$0$i$i69 = $735;
         }
        } else {
         $738 = HEAP32[$728>>2]|0;
         $$0$i$i69 = $738;
        }
        $739 = HEAP32[$__wn>>2]|0;
        $740 = (($739) + 4|0);
        HEAP32[$__wn>>2] = $740;
        HEAP32[$739>>2] = $$0$i$i69;
        $741 = (($742) + -1)|0;
        HEAP32[$__fd>>2] = $741;
        $743 = HEAP32[$__b>>2]|0;
        $744 = (($743) + 12|0);
        $745 = HEAP32[$744>>2]|0;
        $746 = (($743) + 16|0);
        $747 = HEAP32[$746>>2]|0;
        $748 = ($745|0)==($747|0);
        if ($748) {
         $749 = HEAP32[$743>>2]|0;
         $750 = (($749) + 40|0);
         $751 = HEAP32[$750>>2]|0;
         __THREW__ = 0;
         (invoke_ii($751|0,($743|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 22;
          break L3;
         }
        } else {
         $755 = (($745) + 4|0);
         HEAP32[$744>>2] = $755;
        }
        $754 = ($741|0)>(0);
        if ($754) {
         $$pre$i3$i$i91 = $$pre$i3$i$i91273284;$685 = $872;$742 = $741;
        } else {
         $869 = $$pre$i3$i$i91273284;
         break;
        }
       }
      } else {
       $869 = $$pre$i3$i$i125;
      }
      $756 = HEAP32[$__wn>>2]|0;
      $757 = HEAP32[$__wb>>2]|0;
      $758 = ($756|0)==($757|0);
      if ($758) {
       label = 289;
       break L3;
      } else {
       $859 = $869;$860 = $868;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0250|0)==(3);
      if ($cond) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L3;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        label = 26;
        break L3;
       } else {
        $$0$i$i37 = $84;
       }
      } else {
       $87 = HEAP32[$77>>2]|0;
       $$0$i$i37 = $87;
      }
      $88 = HEAP32[$__ct>>2]|0;
      $89 = (($88) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      __THREW__ = 0;
      $91 = (invoke_iiii($90|0,($__ct|0),8192,($$0$i$i37|0))|0);
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       label = 26;
       break L3;
      }
      if (!($91)) {
       label = 42;
       break L3;
      }
      $94 = HEAP32[$__b>>2]|0;
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 40|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($94|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 26;
        break L3;
       } else {
        $$0$i$i41 = $103;
       }
      } else {
       $106 = (($96) + 4|0);
       HEAP32[$95>>2] = $106;
       $107 = HEAP32[$96>>2]|0;
       $$0$i$i41 = $107;
      }
      __THREW__ = 0;
      invoke_vii(629,($__spaces|0),($$0$i$i41|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       label = 26;
       break L3;
      } else {
       label = 43;
      }
      break;
     }
     case 0:  {
      label = 43;
      break;
     }
     case 3:  {
      $179 = HEAP8[$__psn>>0]|0;
      $180 = $179 & 1;
      $181 = ($180<<24>>24)==(0);
      if ($181) {
       $183 = $179&255;
       $184 = $183 >>> 1;
       $194 = $184;
      } else {
       $182 = HEAP32[$8>>2]|0;
       $194 = $182;
      }
      $185 = HEAP8[$__nsn>>0]|0;
      $186 = $185 & 1;
      $187 = ($186<<24>>24)==(0);
      if ($187) {
       $189 = $185&255;
       $190 = $189 >>> 1;
       $192 = $190;
      } else {
       $188 = HEAP32[$6>>2]|0;
       $192 = $188;
      }
      $191 = (0 - ($192))|0;
      $193 = ($194|0)==($191|0);
      if ($193) {
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      } else {
       if ($181) {
        $196 = $179&255;
        $197 = $196 >>> 1;
        $199 = $197;
       } else {
        $195 = HEAP32[$8>>2]|0;
        $199 = $195;
       }
       $198 = ($199|0)==(0);
       if (!($198)) {
        if ($187) {
         $201 = $185&255;
         $202 = $201 >>> 1;
         $204 = $202;
        } else {
         $200 = HEAP32[$6>>2]|0;
         $204 = $200;
        }
        $203 = ($204|0)==(0);
        if (!($203)) {
         $282 = HEAP32[$__b>>2]|0;
         $283 = (($282) + 12|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = (($282) + 16|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ($284|0)==($286|0);
         if ($287) {
          $288 = HEAP32[$282>>2]|0;
          $289 = (($288) + 36|0);
          $290 = HEAP32[$289>>2]|0;
          __THREW__ = 0;
          $291 = (invoke_ii($290|0,($282|0))|0);
          $292 = __THREW__; __THREW__ = 0;
          $293 = $292&1;
          if ($293) {
           label = 26;
           break L3;
          }
          $$pre264 = HEAP8[$__psn>>0]|0;
          $$0$i$i113 = $291;$296 = $$pre264;
         } else {
          $294 = HEAP32[$284>>2]|0;
          $$0$i$i113 = $294;$296 = $179;
         }
         $295 = $296 & 1;
         $297 = ($295<<24>>24)==(0);
         $298 = HEAP32[$9>>2]|0;
         $$289 = $297 ? $8 : $298;
         $299 = HEAP32[$$289>>2]|0;
         $300 = ($$0$i$i113|0)==($299|0);
         $301 = HEAP32[$__b>>2]|0;
         $302 = (($301) + 12|0);
         $303 = HEAP32[$302>>2]|0;
         $304 = (($301) + 16|0);
         $305 = HEAP32[$304>>2]|0;
         $306 = ($303|0)==($305|0);
         if ($300) {
          if ($306) {
           $307 = HEAP32[$301>>2]|0;
           $308 = (($307) + 40|0);
           $309 = HEAP32[$308>>2]|0;
           __THREW__ = 0;
           (invoke_ii($309|0,($301|0))|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 26;
            break L3;
           }
          } else {
           $312 = (($303) + 4|0);
           HEAP32[$302>>2] = $312;
          }
          $313 = HEAP8[$__psn>>0]|0;
          $314 = $313 & 1;
          $315 = ($314<<24>>24)==(0);
          if ($315) {
           $317 = $313&255;
           $318 = $317 >>> 1;
           $320 = $318;
          } else {
           $316 = HEAP32[$8>>2]|0;
           $320 = $316;
          }
          $319 = ($320>>>0)>(1);
          $__psn$__trailing_sign$09 = $319 ? $__psn : $__trailing_sign$0252;
          $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L27;
         }
         if ($306) {
          $321 = HEAP32[$301>>2]|0;
          $322 = (($321) + 36|0);
          $323 = HEAP32[$322>>2]|0;
          __THREW__ = 0;
          $324 = (invoke_ii($323|0,($301|0))|0);
          $325 = __THREW__; __THREW__ = 0;
          $326 = $325&1;
          if ($326) {
           label = 26;
           break L3;
          } else {
           $$0$i$i135 = $324;
          }
         } else {
          $327 = HEAP32[$303>>2]|0;
          $$0$i$i135 = $327;
         }
         $328 = HEAP8[$__nsn>>0]|0;
         $329 = $328 & 1;
         $330 = ($329<<24>>24)==(0);
         $331 = HEAP32[$7>>2]|0;
         $$290 = $330 ? $6 : $331;
         $332 = HEAP32[$$290>>2]|0;
         $333 = ($$0$i$i135|0)==($332|0);
         if (!($333)) {
          label = 135;
          break L3;
         }
         $334 = HEAP32[$__b>>2]|0;
         $335 = (($334) + 12|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = (($334) + 16|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($336|0)==($338|0);
         if ($339) {
          $340 = HEAP32[$334>>2]|0;
          $341 = (($340) + 40|0);
          $342 = HEAP32[$341>>2]|0;
          __THREW__ = 0;
          (invoke_ii($342|0,($334|0))|0);
          $343 = __THREW__; __THREW__ = 0;
          $344 = $343&1;
          if ($344) {
           label = 26;
           break L3;
          }
         } else {
          $345 = (($336) + 4|0);
          HEAP32[$335>>2] = $345;
         }
         HEAP8[$__neg>>0] = 1;
         $346 = HEAP8[$__nsn>>0]|0;
         $347 = $346 & 1;
         $348 = ($347<<24>>24)==(0);
         if ($348) {
          $350 = $346&255;
          $351 = $350 >>> 1;
          $353 = $351;
         } else {
          $349 = HEAP32[$6>>2]|0;
          $353 = $349;
         }
         $352 = ($353>>>0)>(1);
         $__nsn$__trailing_sign$010 = $352 ? $__nsn : $__trailing_sign$0252;
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L27;
        }
       }
       if ($181) {
        $206 = $179&255;
        $207 = $206 >>> 1;
        $209 = $207;
       } else {
        $205 = HEAP32[$8>>2]|0;
        $209 = $205;
       }
       $208 = ($209|0)==(0);
       $210 = HEAP32[$__b>>2]|0;
       $211 = (($210) + 12|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($210) + 16|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($212|0)==($214|0);
       if ($208) {
        if ($215) {
         $249 = HEAP32[$210>>2]|0;
         $250 = (($249) + 36|0);
         $251 = HEAP32[$250>>2]|0;
         __THREW__ = 0;
         $252 = (invoke_ii($251|0,($210|0))|0);
         $253 = __THREW__; __THREW__ = 0;
         $254 = $253&1;
         if ($254) {
          label = 26;
          break L3;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i101 = $252;$257 = $$pre;
        } else {
         $255 = HEAP32[$212>>2]|0;
         $$0$i$i101 = $255;$257 = $185;
        }
        $256 = $257 & 1;
        $258 = ($256<<24>>24)==(0);
        $259 = HEAP32[$7>>2]|0;
        $$288 = $258 ? $6 : $259;
        $260 = HEAP32[$$288>>2]|0;
        $261 = ($$0$i$i101|0)==($260|0);
        if (!($261)) {
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L27;
        }
        $262 = HEAP32[$__b>>2]|0;
        $263 = (($262) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($262) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = (($268) + 40|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         (invoke_ii($270|0,($262|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 26;
          break L3;
         }
        } else {
         $273 = (($264) + 4|0);
         HEAP32[$263>>2] = $273;
        }
        HEAP8[$__neg>>0] = 1;
        $274 = HEAP8[$__nsn>>0]|0;
        $275 = $274 & 1;
        $276 = ($275<<24>>24)==(0);
        if ($276) {
         $278 = $274&255;
         $279 = $278 >>> 1;
         $281 = $279;
        } else {
         $277 = HEAP32[$6>>2]|0;
         $281 = $277;
        }
        $280 = ($281>>>0)>(1);
        $__nsn$__trailing_sign$0 = $280 ? $__nsn : $__trailing_sign$0252;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L27;
       }
       if ($215) {
        $216 = HEAP32[$210>>2]|0;
        $217 = (($216) + 36|0);
        $218 = HEAP32[$217>>2]|0;
        __THREW__ = 0;
        $219 = (invoke_ii($218|0,($210|0))|0);
        $220 = __THREW__; __THREW__ = 0;
        $221 = $220&1;
        if ($221) {
         label = 26;
         break L3;
        }
        $$pre263 = HEAP8[$__psn>>0]|0;
        $$0$i$i80 = $219;$224 = $$pre263;
       } else {
        $222 = HEAP32[$212>>2]|0;
        $$0$i$i80 = $222;$224 = $179;
       }
       $223 = $224 & 1;
       $225 = ($223<<24>>24)==(0);
       $226 = HEAP32[$9>>2]|0;
       $$ = $225 ? $8 : $226;
       $227 = HEAP32[$$>>2]|0;
       $228 = ($$0$i$i80|0)==($227|0);
       if (!($228)) {
        HEAP8[$__neg>>0] = 1;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L27;
       }
       $229 = HEAP32[$__b>>2]|0;
       $230 = (($229) + 12|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 16|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($231|0)==($233|0);
       if ($234) {
        $235 = HEAP32[$229>>2]|0;
        $236 = (($235) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        __THREW__ = 0;
        (invoke_ii($237|0,($229|0))|0);
        $238 = __THREW__; __THREW__ = 0;
        $239 = $238&1;
        if ($239) {
         label = 26;
         break L3;
        }
       } else {
        $240 = (($231) + 4|0);
        HEAP32[$230>>2] = $240;
       }
       $241 = HEAP8[$__psn>>0]|0;
       $242 = $241 & 1;
       $243 = ($242<<24>>24)==(0);
       if ($243) {
        $245 = $241&255;
        $246 = $245 >>> 1;
        $248 = $246;
       } else {
        $244 = HEAP32[$8>>2]|0;
        $248 = $244;
       }
       $247 = ($248>>>0)>(1);
       $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0252;
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $356 = ($__trailing_sign$0252|0)!=(0|0);
      $357 = ($__p$0250>>>0)<(2);
      $or$cond = $356 | $357;
      if (!($or$cond)) {
       $358 = ($__p$0250|0)==(2);
       if ($358) {
        $359 = HEAP8[$16>>0]|0;
        $360 = ($359<<24>>24)!=(0);
        $361 = $360;
       } else {
        $361 = 0;
       }
       $brmerge = $11 | $361;
       if (!($brmerge)) {
        $859 = $858;$860 = $855;$__trailing_sign$1 = 0;
        break L27;
       }
      }
      $362 = HEAP8[$__sym>>0]|0;
      $363 = $362 & 1;
      $364 = ($363<<24>>24)==(0);
      $365 = HEAP32[$13>>2]|0;
      $$291 = $364 ? $12 : $365;
      $366 = ($__p$0250|0)==(0);
      L267: do {
       if ($366) {
        $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
       } else {
        $367 = (($__p$0250) + -1)|0;
        $368 = (($__pat) + ($367)|0);
        $369 = HEAP8[$368>>0]|0;
        $switch = ($369&255)<(2);
        if ($switch) {
         $371 = $362;$381 = $$291;
         while(1) {
          $370 = $371 & 1;
          $372 = ($370<<24>>24)==(0);
          if ($372) {
           $375 = $371&255;
           $376 = $375 >>> 1;
           $378 = $12;$379 = $376;
          } else {
           $373 = HEAP32[$13>>2]|0;
           $374 = HEAP32[$12>>2]|0;
           $378 = $373;$379 = $374;
          }
          $377 = (($378) + ($379<<2)|0);
          $380 = ($381|0)==($377|0);
          if ($380) {
           $391 = $371;
           break;
          }
          $382 = HEAP32[$381>>2]|0;
          $383 = HEAP32[$__ct>>2]|0;
          $384 = (($383) + 12|0);
          $385 = HEAP32[$384>>2]|0;
          __THREW__ = 0;
          $386 = (invoke_iiii($385|0,($__ct|0),8192,($382|0))|0);
          $387 = __THREW__; __THREW__ = 0;
          $388 = $387&1;
          if ($388) {
           label = 23;
           break L3;
          }
          if (!($386)) {
           label = 148;
           break;
          }
          $389 = (($381) + 4|0);
          $$pre265 = HEAP8[$__sym>>0]|0;
          $371 = $$pre265;$381 = $389;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre266 = HEAP8[$__sym>>0]|0;
          $391 = $$pre266;
         }
         $390 = $391 & 1;
         $392 = ($390<<24>>24)==(0);
         $393 = HEAP32[$13>>2]|0;
         $$292 = $392 ? $12 : $393;
         $394 = $381;
         $395 = $$292;
         $396 = (($394) - ($395))|0;
         $397 = $396 >> 2;
         $398 = HEAP8[$__spaces>>0]|0;
         $399 = $398 & 1;
         $400 = ($399<<24>>24)==(0);
         if ($400) {
          $402 = $398&255;
          $403 = $402 >>> 1;
          $405 = $403;
         } else {
          $401 = HEAP32[$14>>2]|0;
          $405 = $401;
         }
         $404 = ($397>>>0)>($405>>>0);
         L285: do {
          if (!($404)) {
           if ($400) {
            $409 = $398&255;
            $410 = $409 >>> 1;
            $$sum280 = (($410) - ($397))|0;
            $411 = (($14) + ($$sum280<<2)|0);
            $412 = $398&255;
            $413 = $412 >>> 1;
            $415 = $14;$416 = $413;$419 = $411;
           } else {
            $406 = HEAP32[$15>>2]|0;
            $407 = HEAP32[$14>>2]|0;
            $$sum = (($407) - ($397))|0;
            $408 = (($406) + ($$sum<<2)|0);
            $415 = $406;$416 = $407;$419 = $408;
           }
           $414 = (($415) + ($416<<2)|0);
           $417 = HEAP32[$13>>2]|0;
           $$293 = $392 ? $12 : $417;
           $418 = ($419|0)==($414|0);
           if ($418) {
            $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
            break L267;
           } else {
            $421 = $419;$423 = $$293;
           }
           while(1) {
            $420 = HEAP32[$421>>2]|0;
            $422 = HEAP32[$423>>2]|0;
            $424 = ($420|0)==($422|0);
            if (!($424)) {
             break L285;
            }
            $425 = (($421) + 4|0);
            $426 = (($423) + 4|0);
            $427 = ($425|0)==($414|0);
            if ($427) {
             $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
             break L267;
            } else {
             $421 = $425;$423 = $426;
            }
           }
          }
         } while(0);
         $428 = HEAP32[$13>>2]|0;
         $$294 = $392 ? $12 : $428;
         $$pre$i3$i$i182 = $858;$430 = $391;$440 = $$294;$457 = $858;
        } else {
         $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
        }
       }
      } while(0);
      L295: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $12;$438 = $435;
       } else {
        $432 = HEAP32[$13>>2]|0;
        $433 = HEAP32[$12>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438<<2)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        $862 = $$pre$i3$i$i182;
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $471 = 1;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 24;
           break L3;
          } else {
           $$0$i$i$i$i174 = $451;
          }
         } else {
          $454 = HEAP32[$444>>2]|0;
          $$0$i$i$i$i174 = $454;
         }
         $455 = ($$0$i$i$i$i174|0)==(-1);
         if ($455) {
          HEAP32[$__b>>2] = 0;
          $471 = 1;
          break;
         } else {
          $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i177 = ($$pre$i$i$i176|0)==(0|0);
          $471 = $phitmp$i$i$i177;
          break;
         }
        }
       } while(0);
       $456 = ($457|0)==(0|0);
       do {
        if ($456) {
         $$pre$i3$i$i182269 = $$pre$i3$i$i182;
         label = 178;
        } else {
         $458 = (($457) + 12|0);
         $459 = HEAP32[$458>>2]|0;
         $460 = (($457) + 16|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ($459|0)==($461|0);
         if ($462) {
          $463 = HEAP32[$457>>2]|0;
          $464 = (($463) + 36|0);
          $465 = HEAP32[$464>>2]|0;
          __THREW__ = 0;
          $466 = (invoke_ii($465|0,($457|0))|0);
          $467 = __THREW__; __THREW__ = 0;
          $468 = $467&1;
          if ($468) {
           label = 24;
           break L3;
          } else {
           $$0$i$i1$i$i180 = $466;
          }
         } else {
          $469 = HEAP32[$459>>2]|0;
          $$0$i$i1$i$i180 = $469;
         }
         $470 = ($$0$i$i1$i$i180|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i182269 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i183 = ($$pre$i3$i$i182|0)==(0|0);
          $tmp$i$i185 = $471 ^ $phitmp$i4$i$i183;
          if ($tmp$i$i185) {
           $$pre$i3$i$i182268 = $$pre$i3$i$i182;$863 = $$pre$i3$i$i182;
           break;
          } else {
           $862 = $$pre$i3$i$i182;
           break L295;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($471) {
         $862 = $$pre$i3$i$i182269;
         break;
        } else {
         $$pre$i3$i$i182268 = $$pre$i3$i$i182269;$863 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 24;
         break L3;
        } else {
         $$0$i$i170 = $481;
        }
       } else {
        $484 = HEAP32[$474>>2]|0;
        $$0$i$i170 = $484;
       }
       $485 = HEAP32[$440>>2]|0;
       $486 = ($$0$i$i170|0)==($485|0);
       if (!($486)) {
        $862 = $$pre$i3$i$i182268;
        break;
       }
       $487 = HEAP32[$__b>>2]|0;
       $488 = (($487) + 12|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = (($487) + 16|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = ($489|0)==($491|0);
       if ($492) {
        $493 = HEAP32[$487>>2]|0;
        $494 = (($493) + 40|0);
        $495 = HEAP32[$494>>2]|0;
        __THREW__ = 0;
        (invoke_ii($495|0,($487|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 24;
         break L3;
        }
       } else {
        $498 = (($489) + 4|0);
        HEAP32[$488>>2] = $498;
       }
       $499 = (($440) + 4|0);
       $$pre267 = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i182 = $$pre$i3$i$i182268;$430 = $$pre267;$440 = $499;$457 = $863;
      }
      if ($11) {
       $500 = HEAP8[$__sym>>0]|0;
       $501 = $500 & 1;
       $502 = ($501<<24>>24)==(0);
       if ($502) {
        $505 = $500&255;
        $506 = $505 >>> 1;
        $508 = $12;$509 = $506;
       } else {
        $503 = HEAP32[$13>>2]|0;
        $504 = HEAP32[$12>>2]|0;
        $508 = $503;$509 = $504;
       }
       $507 = (($508) + ($509<<2)|0);
       $510 = ($440|0)==($507|0);
       if ($510) {
        $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
       } else {
        label = 193;
        break L3;
       }
      } else {
       $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     default: {
      $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
     }
     }
    } while(0);
    L339: do {
     if ((label|0) == 43) {
      label = 0;
      $112 = ($__p$0250|0)==(3);
      if ($112) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L3;
      } else {
       $$pre$i3$i$i51 = $858;$129 = $858;
      }
      while(1) {
       $113 = HEAP32[$__b>>2]|0;
       $114 = ($113|0)==(0|0);
       do {
        if ($114) {
         $143 = 1;
        } else {
         $115 = (($113) + 12|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($113) + 16|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         if ($119) {
          $120 = HEAP32[$113>>2]|0;
          $121 = (($120) + 36|0);
          $122 = HEAP32[$121>>2]|0;
          __THREW__ = 0;
          $123 = (invoke_ii($122|0,($113|0))|0);
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           label = 25;
           break L3;
          } else {
           $$0$i$i$i$i43 = $123;
          }
         } else {
          $126 = HEAP32[$116>>2]|0;
          $$0$i$i$i$i43 = $126;
         }
         $127 = ($$0$i$i$i$i43|0)==(-1);
         if ($127) {
          HEAP32[$__b>>2] = 0;
          $143 = 1;
          break;
         } else {
          $$pre$i$i$i45 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i46 = ($$pre$i$i$i45|0)==(0|0);
          $143 = $phitmp$i$i$i46;
          break;
         }
        }
       } while(0);
       $128 = ($129|0)==(0|0);
       do {
        if ($128) {
         $$pre$i3$i$i51260 = $$pre$i3$i$i51;
         label = 57;
        } else {
         $130 = (($129) + 12|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($129) + 16|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($131|0)==($133|0);
         if ($134) {
          $135 = HEAP32[$129>>2]|0;
          $136 = (($135) + 36|0);
          $137 = HEAP32[$136>>2]|0;
          __THREW__ = 0;
          $138 = (invoke_ii($137|0,($129|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 25;
           break L3;
          } else {
           $$0$i$i1$i$i49 = $138;
          }
         } else {
          $141 = HEAP32[$131>>2]|0;
          $$0$i$i1$i$i49 = $141;
         }
         $142 = ($$0$i$i1$i$i49|0)==(-1);
         if ($142) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i51260 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i52 = ($$pre$i3$i$i51|0)==(0|0);
          $tmp$i$i54 = $143 ^ $phitmp$i4$i$i52;
          if ($tmp$i$i54) {
           $$pre$i3$i$i51262 = $$pre$i3$i$i51;$861 = $$pre$i3$i$i51;
           break;
          } else {
           $859 = $$pre$i3$i$i51;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
           break L339;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($143) {
         $859 = $$pre$i3$i$i51260;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L339;
        } else {
         $$pre$i3$i$i51262 = $$pre$i3$i$i51260;$861 = 0;
        }
       }
       $144 = HEAP32[$__b>>2]|0;
       $145 = (($144) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($144) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$144>>2]|0;
        $151 = (($150) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        __THREW__ = 0;
        $153 = (invoke_ii($152|0,($144|0))|0);
        $154 = __THREW__; __THREW__ = 0;
        $155 = $154&1;
        if ($155) {
         label = 25;
         break L3;
        } else {
         $$0$i$i58 = $153;
        }
       } else {
        $156 = HEAP32[$146>>2]|0;
        $$0$i$i58 = $156;
       }
       $157 = HEAP32[$__ct>>2]|0;
       $158 = (($157) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       __THREW__ = 0;
       $160 = (invoke_iiii($159|0,($__ct|0),8192,($$0$i$i58|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 25;
        break L3;
       }
       if (!($160)) {
        $859 = $$pre$i3$i$i51262;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L339;
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = (($163) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($163) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = (($169) + 40|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 25;
         break L3;
        } else {
         $$0$i$i64 = $172;
        }
       } else {
        $175 = (($165) + 4|0);
        HEAP32[$164>>2] = $175;
        $176 = HEAP32[$165>>2]|0;
        $$0$i$i64 = $176;
       }
       __THREW__ = 0;
       invoke_vii(629,($__spaces|0),($$0$i$i64|0));
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        label = 25;
        break L3;
       } else {
        $$pre$i3$i$i51 = $$pre$i3$i$i51262;$129 = $861;
       }
      }
     }
    } while(0);
    $761 = (($__p$0250) + 1)|0;
    $762 = ($761>>>0)<(4);
    if ($762) {
     $855 = $860;$__p$0250 = $761;$__trailing_sign$0252 = $__trailing_sign$1;
    } else {
     $843 = $860;$857 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 291;
     break;
    }
   }
   L376:    switch (label|0) {
    case 21: {
     $54 = ___cxa_find_matching_catch()|0;
     $55 = tempRet0;
     $lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
     break;
    }
    case 22: {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
     break;
    }
    case 23: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
     break;
    }
    case 24: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
     break;
    }
    case 25: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
     break;
    }
    case 26: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L1;
     break;
    }
    case 42: {
     $110 = HEAP32[$__err>>2]|0;
     $111 = $110 | 4;
     HEAP32[$__err>>2] = $111;
     $$0 = 0;
     break;
    }
    case 135: {
     $354 = HEAP32[$__err>>2]|0;
     $355 = $354 | 4;
     HEAP32[$__err>>2] = $355;
     $$0 = 0;
     break;
    }
    case 193: {
     $511 = HEAP32[$__err>>2]|0;
     $512 = $511 | 4;
     HEAP32[$__err>>2] = $512;
     $$0 = 0;
     break;
    }
    case 254: {
     $655 = HEAP32[$__err>>2]|0;
     $656 = $655 | 4;
     HEAP32[$__err>>2] = $656;
     $$0 = 0;
     break;
    }
    case 278: {
     $719 = HEAP32[$__err>>2]|0;
     $720 = $719 | 4;
     HEAP32[$__err>>2] = $720;
     $$0 = 0;
     break;
    }
    case 289: {
     $759 = HEAP32[$__err>>2]|0;
     $760 = $759 | 4;
     HEAP32[$__err>>2] = $760;
     $$0 = 0;
     break;
    }
    case 291: {
     $763 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L384: do {
      if (!($763)) {
       $764 = (($__trailing_sign$0$lcssa) + 4|0);
       $765 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $857;$790 = $857;$__i$0 = 1;
       L386: while(1) {
        $766 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $767 = $766 & 1;
        $768 = ($767<<24>>24)==(0);
        if ($768) {
         $770 = $766&255;
         $771 = $770 >>> 1;
         $773 = $771;
        } else {
         $769 = HEAP32[$764>>2]|0;
         $773 = $769;
        }
        $772 = ($__i$0>>>0)<($773>>>0);
        if (!($772)) {
         break L384;
        }
        $774 = HEAP32[$__b>>2]|0;
        $775 = ($774|0)==(0|0);
        do {
         if ($775) {
          $804 = 1;
         } else {
          $776 = (($774) + 12|0);
          $777 = HEAP32[$776>>2]|0;
          $778 = (($774) + 16|0);
          $779 = HEAP32[$778>>2]|0;
          $780 = ($777|0)==($779|0);
          if ($780) {
           $781 = HEAP32[$774>>2]|0;
           $782 = (($781) + 36|0);
           $783 = HEAP32[$782>>2]|0;
           __THREW__ = 0;
           $784 = (invoke_ii($783|0,($774|0))|0);
           $785 = __THREW__; __THREW__ = 0;
           $786 = $785&1;
           if ($786) {
            label = 20;
            break L386;
           } else {
            $$0$i$i$i$i = $784;
           }
          } else {
           $787 = HEAP32[$777>>2]|0;
           $$0$i$i$i$i = $787;
          }
          $788 = ($$0$i$i$i$i|0)==(-1);
          if ($788) {
           HEAP32[$__b>>2] = 0;
           $804 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $804 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $789 = ($790|0)==(0|0);
        do {
         if ($789) {
          $$pre$i3$i$i279$ph = $$pre$i3$i$i;
          label = 310;
         } else {
          $791 = (($790) + 12|0);
          $792 = HEAP32[$791>>2]|0;
          $793 = (($790) + 16|0);
          $794 = HEAP32[$793>>2]|0;
          $795 = ($792|0)==($794|0);
          if ($795) {
           $796 = HEAP32[$790>>2]|0;
           $797 = (($796) + 36|0);
           $798 = HEAP32[$797>>2]|0;
           __THREW__ = 0;
           $799 = (invoke_ii($798|0,($790|0))|0);
           $800 = __THREW__; __THREW__ = 0;
           $801 = $800&1;
           if ($801) {
            label = 20;
            break L386;
           } else {
            $$0$i$i1$i$i = $799;
           }
          } else {
           $802 = HEAP32[$792>>2]|0;
           $$0$i$i1$i$i = $802;
          }
          $803 = ($$0$i$i1$i$i|0)==(-1);
          if ($803) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i279$ph = 0;
           label = 310;
           break;
          } else {
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $804 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            $$pre$i3$i$i279287 = $$pre$i3$i$i;$873 = $$pre$i3$i$i;
            break;
           } else {
            label = 318;
            break L386;
           }
          }
         }
        } while(0);
        if ((label|0) == 310) {
         label = 0;
         if ($804) {
          label = 318;
          break;
         } else {
          $$pre$i3$i$i279287 = $$pre$i3$i$i279$ph;$873 = 0;
         }
        }
        $805 = HEAP32[$__b>>2]|0;
        $806 = (($805) + 12|0);
        $807 = HEAP32[$806>>2]|0;
        $808 = (($805) + 16|0);
        $809 = HEAP32[$808>>2]|0;
        $810 = ($807|0)==($809|0);
        if ($810) {
         $811 = HEAP32[$805>>2]|0;
         $812 = (($811) + 36|0);
         $813 = HEAP32[$812>>2]|0;
         __THREW__ = 0;
         $814 = (invoke_ii($813|0,($805|0))|0);
         $815 = __THREW__; __THREW__ = 0;
         $816 = $815&1;
         if ($816) {
          label = 20;
          break;
         } else {
          $$0$i$i = $814;
         }
        } else {
         $817 = HEAP32[$807>>2]|0;
         $$0$i$i = $817;
        }
        $818 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $819 = $818 & 1;
        $820 = ($819<<24>>24)==(0);
        if ($820) {
         $823 = $764;
        } else {
         $821 = HEAP32[$765>>2]|0;
         $823 = $821;
        }
        $822 = (($823) + ($__i$0<<2)|0);
        $824 = HEAP32[$822>>2]|0;
        $825 = ($$0$i$i|0)==($824|0);
        if (!($825)) {
         label = 318;
         break;
        }
        $828 = (($__i$0) + 1)|0;
        $829 = HEAP32[$__b>>2]|0;
        $830 = (($829) + 12|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = (($829) + 16|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = ($831|0)==($833|0);
        if ($834) {
         $835 = HEAP32[$829>>2]|0;
         $836 = (($835) + 40|0);
         $837 = HEAP32[$836>>2]|0;
         __THREW__ = 0;
         (invoke_ii($837|0,($829|0))|0);
         $838 = __THREW__; __THREW__ = 0;
         $839 = $838&1;
         if ($839) {
          label = 20;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
          continue;
         }
        } else {
         $840 = (($831) + 4|0);
         HEAP32[$830>>2] = $840;
         $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
         continue;
        }
       }
       if ((label|0) == 20) {
        $52 = ___cxa_find_matching_catch()|0;
        $53 = tempRet0;
        $lpad$phi$index = $52;$lpad$phi$index8 = $53;
        break L1;
       }
       else if ((label|0) == 318) {
        $826 = HEAP32[$__err>>2]|0;
        $827 = $826 | 4;
        HEAP32[$__err>>2] = $827;
        $$0 = 0;
        break L376;
       }
      }
     } while(0);
     $841 = HEAP32[$__gb>>2]|0;
     $842 = ($841|0)==($843|0);
     if ($842) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$841,$843,$__et);
      $844 = HEAP32[$__et>>2]|0;
      $845 = ($844|0)==(0);
      if ($845) {
       $$0 = 1;
      } else {
       $846 = HEAP32[$__err>>2]|0;
       $847 = $846 | 4;
       HEAP32[$__err>>2] = $847;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $848 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $849 = ($848|0)==(0|0);
   if ($849) {
    STACKTOP = sp;return ($$0|0);
   }
   $850 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($850|0,($848|0));
   $851 = __THREW__; __THREW__ = 0;
   $852 = $851&1;
   if ($852) {
    $853 = ___cxa_find_matching_catch(0|0)|0;
    $854 = tempRet0;
    ___clang_call_terminate($853);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $68 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $70 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($70|0,($68|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0111 = 0, $$0112 = 0, $$013 = 0, $$014 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 420|0;
 $__loc = sp;
 $__neg = sp + 424|0;
 $0 = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 617;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(435,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0111 = $32;$$013 = $31;$94 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(436,($__loc|0),(31952|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(627,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 44|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(629,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -4|0);
      $42 = ($39>>>0)<($41>>>0);
      L17: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP32[$__w$05>>2]|0;
         $46 = ($45|0)==($36|0);
         $44 = (($__w$05) + 4|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L17;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(631,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $99 = 1;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L3;
        } else {
         $$0$i$i$i$i = $59;
        }
       } else {
        $62 = HEAP32[$52>>2]|0;
        $$0$i$i$i$i = $62;
       }
       $63 = ($$0$i$i$i$i|0)==(-1);
       if ($63) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $64 = ($8|0)==(0|0);
     do {
      if ($64) {
       label = 30;
      } else {
       $65 = (($8) + 12|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($8) + 16|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($66|0)==($68|0);
       if ($69) {
        $70 = HEAP32[$8>>2]|0;
        $71 = (($70) + 36|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_ii($72|0,($8|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L3;
        } else {
         $$0$i$i1$i$i = $73;
        }
       } else {
        $76 = HEAP32[$66>>2]|0;
        $$0$i$i1$i$i = $76;
       }
       $77 = ($$0$i$i1$i$i|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($99) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $78 = HEAP32[$__err>>2]|0;
      $79 = $78 | 2;
      HEAP32[$__err>>2] = $79;
     }
     $80 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $80;
     $81 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($81)|0);
     $82 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      STACKTOP = sp;return;
     }
     $84 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($84|0,($82|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $91 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($91)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0112 = $90;$$014 = $89;
   ___resumeException($$014|0);
   // unreachable;
  } else {
   $$0111 = $90;$$013 = $89;$94 = $$pre;
  }
 }
 $93 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($93|0,($94|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $97 = ___cxa_find_matching_catch(0|0)|0;
  $98 = tempRet0;
  ___clang_call_terminate($97);
  // unreachable;
 } else {
  $$0112 = $$0111;$$014 = $$013;
  ___resumeException($$014|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31528)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 4|0);
   HEAP32[$38>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$36>>2] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 4|0);
   HEAP32[$74>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$72>>2] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31464)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 4|0);
   HEAP32[$97>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 4|0);
   HEAP32[$111>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP32[$109>>2] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP32[$__dp>>2] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP32[$__ts>>2] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$145>>2] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 84|0;
 $__bb = sp + 48|0;
 $__digits = sp + 184|0;
 $__loc = sp + 76|0;
 $__pat = sp + 52|0;
 $__dp = sp + 284|0;
 $__ts = sp + 388|0;
 $__grp = sp + 64|0;
 $__sym = sp + 20|0;
 $__sn = sp + 32|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 288|0;
 $__mi = sp + 56|0;
 $__me = sp + 16|0;
 $0 = sp + 44|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,31712,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(599)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(604,($__bb|0),($3|0),(31712|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(605);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(605);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(435,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(436,($__loc|0),(31960|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(633,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(605);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(634,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(607,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
   _free($110);
   _free($111);
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 92|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 $10 = sp + 28|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31400)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 1|0);
     HEAP8[$26>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP8[$24>>0] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 1|0);
     HEAP8[$43>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP8[$41>>0] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31336)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 1|0);
     HEAP8[$102>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP8[$100>>0] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 1|0);
     HEAP8[$119>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP8[$117>>0] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP8[$__dp>>0] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP8[$__ts>>0] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 1|0);
   HEAP8[$155>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP8[$153>>0] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i20 = 0, $$01$i$i = 0, $$01$i$i18 = 0, $$012$i$i = 0, $$055 = 0, $$2 = 0, $$lcssa41 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa63 = 0, $__d$032 = 0, $__d$1$lcssa77 = 0, $__d$1$lcssa78 = 0, $__d$135 = 0, $__d$2 = 0, $__d$348 = 0, $__f$0$lcssa75 = 0;
 var $__f$0$lcssa76 = 0, $__f$036 = 0, $__f$142 = 0, $__gl$051 = 0, $__gl$1 = 0, $__ig$050 = 0, $__ig$1 = 0, $__ng$049 = 0, $__ng$1 = 0, $__p$054 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $or$cond3 = 0, $scevgep66 = 0, $scevgep6667 = 0, $scevgep68 = 0, $umax = 0, $umax65 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$055 = $__db;$__p$054 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$054)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$055;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$055;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$055;
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$055;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $or$cond3 = $44 | $4;
   if ($or$cond3) {
    $$2 = $$055;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i20 = $53;
    } else {
     $$01$i$i18 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$01$i$i18>>0] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i18) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i20 = $59;
       break;
      } else {
       $$01$i$i18 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i20;
    $$2 = $$055;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$055) + 1|0);
   $$$0 = $__neg ? $62 : $$055;
   $63 = ($$$0>>>0)<($__de>>>0);
   L30: do {
    if ($63) {
     $__d$032 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$032>>0]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$032;
       break L30;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$032) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$032;
       break L30;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$032 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa63 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = $$$0;
     $75 = (($74) - ($__d$0$lcssa63))|0;
     $76 = ($75>>>0)<($13>>>0);
     $umax = $76 ? $13 : $75;
     $umax65 = $umax;
     $scevgep66 = (($umax65) + ($__fd)|0);
     $scevgep6667 = $scevgep66;
     $80 = $61;$__d$135 = $__d$0$lcssa;$__f$036 = $__fd;
     while(1) {
      $77 = (($__d$135) + -1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($80) + 1|0);
      HEAP32[$__me>>2] = $79;
      HEAP8[$80>>0] = $78;
      $81 = (($__f$036) + -1)|0;
      $82 = ($77>>>0)>($$$0>>>0);
      $83 = ($81|0)>(0);
      $or$cond = $82 & $83;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $80 = $$pre;$__d$135 = $77;$__f$036 = $81;
     }
     $scevgep68 = (($__d$0$lcssa) + ($umax)|0);
     if ($83) {
      $__d$1$lcssa78 = $scevgep68;$__f$0$lcssa76 = $scevgep6667;
      label = 32;
     } else {
      $91 = 0;$__d$1$lcssa77 = $scevgep68;$__f$0$lcssa75 = $scevgep6667;
     }
    } else {
     $__d$1$lcssa78 = $__d$0$lcssa;$__f$0$lcssa76 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $84 = HEAP32[$__ct>>2]|0;
     $85 = (($84) + 28|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (FUNCTION_TABLE_iii[$86 & 1023]($__ct,48)|0);
     $91 = $87;$__d$1$lcssa77 = $__d$1$lcssa78;$__f$0$lcssa75 = $__f$0$lcssa76;
    }
    $88 = ($__f$0$lcssa75|0)>(0);
    $89 = HEAP32[$__me>>2]|0;
    $90 = (($89) + 1|0);
    HEAP32[$__me>>2] = $90;
    if ($88) {
     $92 = $89;$__f$142 = $__f$0$lcssa75;
     while(1) {
      HEAP8[$92>>0] = $91;
      $93 = (($__f$142) + -1)|0;
      $94 = ($93|0)>(0);
      $95 = HEAP32[$__me>>2]|0;
      $96 = (($95) + 1|0);
      HEAP32[$__me>>2] = $96;
      if ($94) {
       $92 = $95;$__f$142 = $93;
      } else {
       $$lcssa41 = $95;
       break;
      }
     }
    } else {
     $$lcssa41 = $89;
    }
    HEAP8[$$lcssa41>>0] = $__dp;
    $__d$2 = $__d$1$lcssa77;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $97 = ($__d$2|0)==($$$0|0);
   if ($97) {
    $98 = HEAP32[$__ct>>2]|0;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (FUNCTION_TABLE_iii[$100 & 1023]($__ct,48)|0);
    $102 = HEAP32[$__me>>2]|0;
    $103 = (($102) + 1|0);
    HEAP32[$__me>>2] = $103;
    HEAP8[$102>>0] = $101;
   } else {
    $104 = HEAP8[$__grp>>0]|0;
    $105 = $104 & 1;
    $106 = ($105<<24>>24)==(0);
    if ($106) {
     $108 = $104&255;
     $109 = $108 >>> 1;
     $111 = $109;
    } else {
     $107 = HEAP32[$11>>2]|0;
     $111 = $107;
    }
    $110 = ($111|0)==(0);
    if ($110) {
     $__d$348 = $__d$2;$__gl$051 = -1;$__ig$050 = 0;$__ng$049 = 0;
    } else {
     if ($106) {
      $114 = $9;
     } else {
      $112 = HEAP32[$10>>2]|0;
      $114 = $112;
     }
     $113 = HEAP8[$114>>0]|0;
     $115 = $113 << 24 >> 24;
     $__d$348 = $__d$2;$__gl$051 = $115;$__ig$050 = 0;$__ng$049 = 0;
    }
    while(1) {
     $116 = ($__ng$049|0)==($__gl$051|0);
     if ($116) {
      $117 = HEAP32[$__me>>2]|0;
      $118 = (($117) + 1|0);
      HEAP32[$__me>>2] = $118;
      HEAP8[$117>>0] = $__ts;
      $119 = (($__ig$050) + 1)|0;
      $120 = HEAP8[$__grp>>0]|0;
      $121 = $120 & 1;
      $122 = ($121<<24>>24)==(0);
      if ($122) {
       $124 = $120&255;
       $125 = $124 >>> 1;
       $127 = $125;
      } else {
       $123 = HEAP32[$11>>2]|0;
       $127 = $123;
      }
      $126 = ($119>>>0)<($127>>>0);
      if ($126) {
       if ($122) {
        $130 = $9;
       } else {
        $128 = HEAP32[$10>>2]|0;
        $130 = $128;
       }
       $129 = (($130) + ($119)|0);
       $131 = HEAP8[$129>>0]|0;
       $132 = ($131<<24>>24)==(127);
       if ($132) {
        $__gl$1 = -1;$__ig$1 = $119;$__ng$1 = 0;
       } else {
        if ($122) {
         $135 = $9;
        } else {
         $133 = HEAP32[$10>>2]|0;
         $135 = $133;
        }
        $134 = (($135) + ($119)|0);
        $136 = HEAP8[$134>>0]|0;
        $137 = $136 << 24 >> 24;
        $__gl$1 = $137;$__ig$1 = $119;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$051;$__ig$1 = $119;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$051;$__ig$1 = $__ig$050;$__ng$1 = $__ng$049;
     }
     $138 = (($__d$348) + -1|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = HEAP32[$__me>>2]|0;
     $141 = (($140) + 1|0);
     HEAP32[$__me>>2] = $141;
     HEAP8[$140>>0] = $139;
     $142 = (($__ng$1) + 1)|0;
     $143 = ($138|0)==($$$0|0);
     if ($143) {
      break;
     } else {
      $__d$348 = $138;$__gl$051 = $__gl$1;$__ig$050 = $__ig$1;$__ng$049 = $142;
     }
    }
   }
   $144 = HEAP32[$__me>>2]|0;
   $145 = ($61|0)==($144|0);
   if ($145) {
    $$2 = $$$0;
   } else {
    $146 = (($144) + -1|0);
    $147 = ($146>>>0)>($61>>>0);
    if ($147) {
     $$012$i$i = $61;$150 = $146;
     while(1) {
      $148 = HEAP8[$$012$i$i>>0]|0;
      $149 = HEAP8[$150>>0]|0;
      HEAP8[$$012$i$i>>0] = $149;
      HEAP8[$150>>0] = $148;
      $151 = (($$012$i$i) + 1|0);
      $152 = (($150) + -1|0);
      $153 = ($151>>>0)<($152>>>0);
      if ($153) {
       $$012$i$i = $151;$150 = $152;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$055;
  }
  }
  $154 = (($__p$054) + 1)|0;
  $exitcond = ($154|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$055 = $$2;$__p$054 = $154;
  }
 }
 $155 = HEAP8[$__sn>>0]|0;
 $156 = $155 & 1;
 $157 = ($156<<24>>24)==(0);
 if ($157) {
  $159 = $155&255;
  $160 = $159 >>> 1;
  $162 = $160;
 } else {
  $158 = HEAP32[$2>>2]|0;
  $162 = $158;
 }
 $161 = ($162>>>0)>(1);
 if ($161) {
  if ($157) {
   $165 = $155&255;
   $166 = $165 >>> 1;
   $$pn = $0;$169 = $0;$170 = $166;
  } else {
   $163 = HEAP32[$1>>2]|0;
   $164 = HEAP32[$2>>2]|0;
   $$pn = $163;$169 = $163;$170 = $164;
  }
  $167 = (($$pn) + 1|0);
  $168 = (($169) + ($170)|0);
  $171 = HEAP32[$__me>>2]|0;
  $172 = ($167|0)==($168|0);
  if ($172) {
   $$0$lcssa$i$i = $171;
  } else {
   $$01$i$i = $171;$174 = $167;
   while(1) {
    $173 = HEAP8[$174>>0]|0;
    HEAP8[$$01$i$i>>0] = $173;
    $175 = (($174) + 1|0);
    $176 = (($$01$i$i) + 1|0);
    $177 = ($175|0)==($168|0);
    if ($177) {
     $$0$lcssa$i$i = $176;
     break;
    } else {
     $$01$i$i = $176;$174 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $__loc = sp + 24|0;
 $__pat = sp + 12|0;
 $__dp = sp + 64|0;
 $__ts = sp + 65|0;
 $__grp = sp;
 $__sym = sp + 52|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 68|0;
 $__mi = sp + 44|0;
 $__me = sp + 48|0;
 $0 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(436,($__loc|0),(31960|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(633,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(605);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(634,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(607,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $122 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch()|0;
 $91 = tempRet0;
 $$1 = $90;$$12 = $91;
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 444|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $__buf = sp + 896|0;
 $__bb = sp + 424|0;
 $__digits = sp + 24|0;
 $__loc = sp + 428|0;
 $__pat = sp + 436|0;
 $__dp = sp + 888|0;
 $__ts = sp + 892|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__sn = sp + 472|0;
 $__fd = sp + 484|0;
 $__mbuf = sp + 488|0;
 $__mi = sp + 16|0;
 $__me = sp + 432|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,31712,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(599)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(604,($__bb|0),($3|0),(31712|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(605);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(605);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $112 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $112 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $112 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(435,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $112;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(436,($__loc|0),(31952|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(635,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(605);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $96 = 0;$__mb$0 = 0;
         }
        } else {
         $96 = $83;$__mb$0 = $83;
        }
       } else {
        $96 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(636,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(613,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($96|0)==(0|0);
         if (!($109)) {
          _free($96);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $111 = ($112|0)==(0|0);
         if ($111) {
          _free($113);
          STACKTOP = sp;return;
         }
         _free($112);
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $95 = ($96|0)==(0|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($96);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$116 = $112;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$116 = $119;$117 = $118;
 }
 $115 = ($116|0)==(0|0);
 if ($115) {
  _free($117);
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($116);
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 92|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 $10 = sp + 28|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31528)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$24>>2] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(632,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[$41>>2] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(632,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 4|0);
   HEAP32[$79>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$77>>2] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,31464)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 4|0);
     HEAP32[$102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$100>>2] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(632,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 4|0);
     HEAP32[$119>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$117>>2] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(632,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 4|0);
   HEAP32[$155>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$153>>2] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(632,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa45 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i16 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $88$phi = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7881 = 0, $__d$1$lcssa79 = 0;
 var $__d$137 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$146 = 0, $__gl$057 = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i17 = 0;
 var $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $or$cond3 = $40 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i16 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i17 = (($47) + ($$sum33<<2)|0);
     $52 = $scevgep$i$i17;
     $53 = (($52) - ($$promoted4$i$i16))|0;
     $54 = $53 >>> 2;
     $$01$i$i19 = $49;$56 = $51;
     while(1) {
      $55 = HEAP32[$56>>2]|0;
      HEAP32[$$01$i$i19>>2] = $55;
      $57 = (($56) + 4|0);
      $58 = (($$01$i$i19) + 4|0);
      $59 = ($57|0)==($46|0);
      if ($59) {
       break;
      } else {
       $$01$i$i19 = $58;$56 = $57;
      }
     }
     $60 = (($54) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($60<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$060;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$060;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$060) + 4|0);
   $$$0 = $__neg ? $62 : $$060;
   $63 = ($$$0>>>0)<($__de>>>0);
   L32: do {
    if ($63) {
     $__d$034 = $$$0;
     while(1) {
      $66 = HEAP32[$__d$034>>2]|0;
      $67 = HEAP32[$__ct>>2]|0;
      $68 = (($67) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($__ct,2048,$66)|0);
      $65 = (($__d$034) + 4|0);
      if (!($70)) {
       $__d$0$lcssa = $__d$034;
       break L32;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$034 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $71 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($71) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $75 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $72 = (($__d$137) + -4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($75) + 4|0);
      HEAP32[$75>>2] = $73;
      $76 = (($__f$038) + -1)|0;
      $77 = ($72>>>0)>($$$0>>>0);
      $78 = ($76|0)>(0);
      $or$cond = $77 & $78;
      if ($or$cond) {
       $75 = $74;$__d$137 = $72;$__f$038 = $76;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $74;
     if ($78) {
      $__d$1$lcssa79 = $72;$__f$0$lcssa77 = $76;
      label = 33;
     } else {
      $79 = HEAP32[$__me>>2]|0;
      $80 = (($79) + 4|0);
      HEAP32[$__me>>2] = $80;
      $$lcssa45 = $79;$__d$1$lcssa7881 = $72;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $81 = HEAP32[$__ct>>2]|0;
     $82 = (($81) + 44|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (FUNCTION_TABLE_iii[$83 & 1023]($__ct,48)|0);
     $85 = ($__f$0$lcssa77|0)>(0);
     $86 = HEAP32[$__me>>2]|0;
     $87 = (($86) + 4|0);
     HEAP32[$__me>>2] = $87;
     if ($85) {
      $88 = $86;$92 = $87;$__f$146 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$88>>2] = $84;
       $89 = (($__f$146) + -1)|0;
       $90 = ($89|0)>(0);
       $91 = (($92) + 4|0);
       if ($90) {
        $88$phi = $92;$92 = $91;$__f$146 = $89;$88 = $88$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($86) + ($$sum75<<2)|0);
      $scevgep71 = (($86) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa45 = $scevgep71;$__d$1$lcssa7881 = $__d$1$lcssa79;
     } else {
      $$lcssa45 = $86;$__d$1$lcssa7881 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa45>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7881;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $93 = ($__d$2|0)==($$$0|0);
   if ($93) {
    $94 = HEAP32[$__ct>>2]|0;
    $95 = (($94) + 44|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (FUNCTION_TABLE_iii[$96 & 1023]($__ct,48)|0);
    $98 = HEAP32[$__me>>2]|0;
    $99 = (($98) + 4|0);
    HEAP32[$__me>>2] = $99;
    HEAP32[$98>>2] = $97;
    $141 = $99;
   } else {
    $100 = HEAP8[$__grp>>0]|0;
    $101 = $100 & 1;
    $102 = ($101<<24>>24)==(0);
    if ($102) {
     $104 = $100&255;
     $105 = $104 >>> 1;
     $107 = $105;
    } else {
     $103 = HEAP32[$9>>2]|0;
     $107 = $103;
    }
    $106 = ($107|0)==(0);
    if ($106) {
     $__d$354 = $__d$2;$__gl$057 = -1;$__ig$056 = 0;$__ng$055 = 0;
    } else {
     if ($102) {
      $110 = $7;
     } else {
      $108 = HEAP32[$8>>2]|0;
      $110 = $108;
     }
     $109 = HEAP8[$110>>0]|0;
     $111 = $109 << 24 >> 24;
     $__d$354 = $__d$2;$__gl$057 = $111;$__ig$056 = 0;$__ng$055 = 0;
    }
    while(1) {
     $112 = ($__ng$055|0)==($__gl$057|0);
     $113 = HEAP32[$__me>>2]|0;
     if ($112) {
      $114 = (($113) + 4|0);
      HEAP32[$__me>>2] = $114;
      HEAP32[$113>>2] = $__ts;
      $115 = (($__ig$056) + 1)|0;
      $116 = HEAP8[$__grp>>0]|0;
      $117 = $116 & 1;
      $118 = ($117<<24>>24)==(0);
      if ($118) {
       $120 = $116&255;
       $121 = $120 >>> 1;
       $123 = $121;
      } else {
       $119 = HEAP32[$9>>2]|0;
       $123 = $119;
      }
      $122 = ($115>>>0)<($123>>>0);
      if ($122) {
       if ($118) {
        $126 = $7;
       } else {
        $124 = HEAP32[$8>>2]|0;
        $126 = $124;
       }
       $125 = (($126) + ($115)|0);
       $127 = HEAP8[$125>>0]|0;
       $128 = ($127<<24>>24)==(127);
       if ($128) {
        $137 = $114;$__gl$1 = -1;$__ig$1 = $115;$__ng$1 = 0;
       } else {
        if ($118) {
         $131 = $7;
        } else {
         $129 = HEAP32[$8>>2]|0;
         $131 = $129;
        }
        $130 = (($131) + ($115)|0);
        $132 = HEAP8[$130>>0]|0;
        $133 = $132 << 24 >> 24;
        $137 = $114;$__gl$1 = $133;$__ig$1 = $115;$__ng$1 = 0;
       }
      } else {
       $137 = $114;$__gl$1 = $__gl$057;$__ig$1 = $115;$__ng$1 = 0;
      }
     } else {
      $137 = $113;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $134 = (($__d$354) + -4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($137) + 4|0);
     HEAP32[$__me>>2] = $136;
     HEAP32[$137>>2] = $135;
     $138 = (($__ng$1) + 1)|0;
     $139 = ($134|0)==($$$0|0);
     if ($139) {
      $141 = $136;
      break;
     } else {
      $__d$354 = $134;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $138;
     }
    }
   }
   $140 = ($61|0)==($141|0);
   if ($140) {
    $$2 = $$$0;
   } else {
    $142 = (($141) + -4|0);
    $143 = ($142>>>0)>($61>>>0);
    if ($143) {
     $$012$i$i = $61;$146 = $142;
     while(1) {
      $144 = HEAP32[$$012$i$i>>2]|0;
      $145 = HEAP32[$146>>2]|0;
      HEAP32[$$012$i$i>>2] = $145;
      HEAP32[$146>>2] = $144;
      $147 = (($$012$i$i) + 4|0);
      $148 = (($146) + -4|0);
      $149 = ($147>>>0)<($148>>>0);
      if ($149) {
       $$012$i$i = $147;$146 = $148;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $150 = (($__p$059) + 1)|0;
  $exitcond = ($150|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $150;
  }
 }
 $151 = HEAP8[$__sn>>0]|0;
 $152 = $151 & 1;
 $153 = ($152<<24>>24)==(0);
 if ($153) {
  $155 = $151&255;
  $156 = $155 >>> 1;
  $158 = $156;
 } else {
  $154 = HEAP32[$0>>2]|0;
  $158 = $154;
 }
 $157 = ($158>>>0)>(1);
 if ($157) {
  if ($153) {
   $161 = $151&255;
   $162 = $161 >>> 1;
   $$pn = $0;$165 = $0;$166 = $162;
  } else {
   $159 = HEAP32[$1>>2]|0;
   $160 = HEAP32[$0>>2]|0;
   $$pn = $159;$165 = $159;$166 = $160;
  }
  $163 = (($$pn) + 4|0);
  $164 = (($165) + ($166<<2)|0);
  $167 = HEAP32[$__me>>2]|0;
  $168 = ($163|0)==($164|0);
  if ($168) {
   $$0$lcssa$i$i = $167;
  } else {
   $$promoted4$i$i = $163;
   $$sum = (($166) + -1)|0;
   $scevgep$i$i = (($165) + ($$sum<<2)|0);
   $169 = $scevgep$i$i;
   $170 = (($169) - ($$promoted4$i$i))|0;
   $171 = $170 >>> 2;
   $$01$i$i = $167;$173 = $163;
   while(1) {
    $172 = HEAP32[$173>>2]|0;
    HEAP32[$$01$i$i>>2] = $172;
    $174 = (($173) + 4|0);
    $175 = (($$01$i$i) + 4|0);
    $176 = ($174|0)==($164|0);
    if ($176) {
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
   $177 = (($171) + 1)|0;
   $scevgep6$i$i = (($167) + ($177<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 456|0;
 $__loc = sp + 440|0;
 $__pat = sp + 28|0;
 $__dp = sp + 24|0;
 $__ts = sp + 436|0;
 $__grp = sp + 444|0;
 $__sym = sp + 460|0;
 $__sn = sp + 8|0;
 $__fd = sp + 4|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 20|0;
 $__me = sp + 432|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(436,($__loc|0),(31952|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(635,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(605);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$98 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$98 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$98 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(636,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(613,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($98|0)==(0|0);
       if ($123) {
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
        $124 = HEAP32[$__loc>>2]|0;
        (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
        STACKTOP = sp;return;
       }
       _free($98);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $97 = ($98|0)==(0|0);
     if ($97) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($98);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $125 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $$1 = $91;$$12 = $92;
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(621,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(637,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(621,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i21 = 0, $$pre44 = 0, $$pre9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond3$i = 0, $or$cond3$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((33608 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$05$i16 = $22;$25 = ((33608 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$05$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$05$i16|0);
    $or$cond3$i17 = $30 | $32;
    if ($or$cond3$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$04$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$04$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(621,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$04$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$04$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(619,(32840|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(637,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((33712 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$05$i = $56;$78 = ((33712 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$05$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$05$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$05$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$05$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$05$i|0);
  $or$cond3$i = $88 | $90;
  if ($or$cond3$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$04$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$04$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(629,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$04$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$04$i = $98;
    } else {
     break;
    }
   }
   $$pre9$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre9$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$05$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(619,(32840|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch()|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch()|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch()|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(590,($0|0),(31840|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((40488 + 8|0));
  ___cxa_throw(($0|0),(40536|0),(393|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((31872 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(638,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $$1 = $85;$$12 = $84;
  ___resumeException($$12|0);
  // unreachable;
 }
 $5 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(639,($5|0),(31864|0),1);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $86 = ___cxa_find_matching_catch()|0;
  $87 = tempRet0;
  $$0 = $87;$$01 = $86;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($this) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($8|0);
  if (!($11)) {
   $__new_last2$i$i$i = $8;
   $scevgep$i$i$i = (($10) + -4|0);
   $12 = $scevgep$i$i$i;
   $13 = (($12) - ($__new_last2$i$i$i))|0;
   $14 = $13 >>> 2;
   $15 = $14 ^ -1;
   $scevgep4$i$i$i = (($10) + ($15<<2)|0);
   HEAP32[$9>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((36768 + 4|0))>>2] = 0;
  HEAP32[36768>>2] = ((30320 + 8|0));
  __THREW__ = 0;
  invoke_vii(640,($this|0),(36768|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if ($17) {
    label = 41;
   } else {
    HEAP32[((36760 + 4|0))>>2] = 0;
    HEAP32[36760>>2] = ((30360 + 8|0));
    __THREW__ = 0;
    invoke_vii(641,($this|0),(36760|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 41;
    } else {
     __ZNSt3__15ctypeIcEC2EPKtbj(36744,0,0,1);
     __THREW__ = 0;
     invoke_vii(642,($this|0),(36744|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 41;
     } else {
      HEAP32[((36736 + 4|0))>>2] = 0;
      HEAP32[36736>>2] = ((32928 + 8|0));
      __THREW__ = 0;
      invoke_vii(643,($this|0),(36736|0));
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 41;
      } else {
       HEAP32[((36728 + 4|0))>>2] = 0;
       HEAP32[36728>>2] = ((33144 + 8|0));
       __THREW__ = 0;
       invoke_vii(644,($this|0),(36728|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        label = 41;
       } else {
        __THREW__ = 0;
        invoke_vii(645,(36712|0),1);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(646,($this|0),(36712|0));
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          label = 41;
         } else {
          HEAP32[((36704 + 4|0))>>2] = 0;
          HEAP32[36704>>2] = ((33368 + 8|0));
          __THREW__ = 0;
          invoke_vii(647,($this|0),(36704|0));
          $30 = __THREW__; __THREW__ = 0;
          $31 = $30&1;
          if ($31) {
           label = 41;
          } else {
           HEAP32[((36696 + 4|0))>>2] = 0;
           HEAP32[36696>>2] = ((33488 + 8|0));
           __THREW__ = 0;
           invoke_vii(648,($this|0),(36696|0));
           $32 = __THREW__; __THREW__ = 0;
           $33 = $32&1;
           if ($33) {
            label = 41;
           } else {
            HEAP32[((36672 + 4|0))>>2] = 0;
            HEAP32[36672>>2] = ((32120 + 8|0));
            HEAP8[((36672 + 8|0))>>0] = 46;
            HEAP8[((36672 + 9|0))>>0] = 44;
            ;HEAP32[((36672 + 12|0))+0>>2]=0|0;HEAP32[((36672 + 12|0))+4>>2]=0|0;HEAP32[((36672 + 12|0))+8>>2]=0|0;
            __THREW__ = 0;
            invoke_vii(649,($this|0),(36672|0));
            $34 = __THREW__; __THREW__ = 0;
            $35 = $34&1;
            if ($35) {
             label = 41;
            } else {
             HEAP32[((36640 + 4|0))>>2] = 0;
             HEAP32[36640>>2] = ((32160 + 8|0));
             HEAP32[((36640 + 8|0))>>2] = 46;
             HEAP32[((36640 + 12|0))>>2] = 44;
             ;HEAP32[((36640 + 16|0))+0>>2]=0|0;HEAP32[((36640 + 16|0))+4>>2]=0|0;HEAP32[((36640 + 16|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(650,($this|0),(36640|0));
             $36 = __THREW__; __THREW__ = 0;
             $37 = $36&1;
             if ($37) {
              label = 41;
             } else {
              HEAP32[((36632 + 4|0))>>2] = 0;
              HEAP32[36632>>2] = ((30400 + 8|0));
              __THREW__ = 0;
              invoke_vii(651,($this|0),(36632|0));
              $38 = __THREW__; __THREW__ = 0;
              $39 = $38&1;
              if ($39) {
               label = 41;
              } else {
               HEAP32[((36624 + 4|0))>>2] = 0;
               HEAP32[36624>>2] = ((30520 + 8|0));
               __THREW__ = 0;
               invoke_vii(652,($this|0),(36624|0));
               $40 = __THREW__; __THREW__ = 0;
               $41 = $40&1;
               if ($41) {
                label = 41;
               } else {
                HEAP32[((36616 + 4|0))>>2] = 0;
                HEAP32[36616>>2] = ((30592 + 8|0));
                __THREW__ = 0;
                invoke_vii(653,($this|0),(36616|0));
                $42 = __THREW__; __THREW__ = 0;
                $43 = $42&1;
                if ($43) {
                 label = 41;
                } else {
                 HEAP32[((36608 + 4|0))>>2] = 0;
                 HEAP32[36608>>2] = ((30688 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(654,($this|0),(36608|0));
                 $44 = __THREW__; __THREW__ = 0;
                 $45 = $44&1;
                 if ($45) {
                  label = 41;
                 } else {
                  HEAP32[((36600 + 4|0))>>2] = 0;
                  HEAP32[36600>>2] = ((31280 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(655,($this|0),(36600|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36592 + 4|0))>>2] = 0;
                  HEAP32[36592>>2] = ((31344 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(656,($this|0),(36592|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36584 + 4|0))>>2] = 0;
                  HEAP32[36584>>2] = ((31408 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(657,($this|0),(36584|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36576 + 4|0))>>2] = 0;
                  HEAP32[36576>>2] = ((31472 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(658,($this|0),(36576|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36568 + 4|0))>>2] = 0;
                  HEAP32[36568>>2] = ((31536 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(659,($this|0),(36568|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36560 + 4|0))>>2] = 0;
                  HEAP32[36560>>2] = ((31616 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(660,($this|0),(36560|0));
                  $56 = __THREW__; __THREW__ = 0;
                  $57 = $56&1;
                  if ($57) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36552 + 4|0))>>2] = 0;
                  HEAP32[36552>>2] = ((31672 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(661,($this|0),(36552|0));
                  $58 = __THREW__; __THREW__ = 0;
                  $59 = $58&1;
                  if ($59) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36544 + 4|0))>>2] = 0;
                  HEAP32[36544>>2] = ((31720 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(662,($this|0),(36544|0));
                  $60 = __THREW__; __THREW__ = 0;
                  $61 = $60&1;
                  if ($61) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36528 + 4|0))>>2] = 0;
                  HEAP32[36528>>2] = ((30768 + 8|0));
                  HEAP32[((36528 + 8|0))>>2] = ((30768 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(663,($this|0),(36528|0));
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if ($63) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36512 + 4|0))>>2] = 0;
                  HEAP32[36512>>2] = ((30920 + 8|0));
                  HEAP32[((36512 + 8|0))>>2] = ((30920 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(664,($this|0),(36512|0));
                  $64 = __THREW__; __THREW__ = 0;
                  $65 = $64&1;
                  if ($65) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36496 + 4|0))>>2] = 0;
                  HEAP32[36496>>2] = ((32864 + 8|0));
                  __THREW__ = 0;
                  $66 = (invoke_i(599)|0);
                  $67 = __THREW__; __THREW__ = 0;
                  $68 = $67&1;
                  if ($68) {
                   $69 = ___cxa_find_matching_catch()|0;
                   $70 = tempRet0;
                   $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
                   break;
                  }
                  HEAP32[((36496 + 8|0))>>2] = $66;
                  HEAP32[36496>>2] = ((31216 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(665,($this|0),(36496|0));
                  $71 = __THREW__; __THREW__ = 0;
                  $72 = $71&1;
                  if ($72) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36480 + 4|0))>>2] = 0;
                  HEAP32[36480>>2] = ((32864 + 8|0));
                  __THREW__ = 0;
                  $73 = (invoke_i(599)|0);
                  $74 = __THREW__; __THREW__ = 0;
                  $75 = $74&1;
                  if ($75) {
                   $76 = ___cxa_find_matching_catch()|0;
                   $77 = tempRet0;
                   $eh$lpad$body$index3Z2D = $77;$eh$lpad$body$indexZ2D = $76;
                   break;
                  }
                  HEAP32[((36480 + 8|0))>>2] = $73;
                  HEAP32[36480>>2] = ((31248 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(666,($this|0),(36480|0));
                  $78 = __THREW__; __THREW__ = 0;
                  $79 = $78&1;
                  if ($79) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36472 + 4|0))>>2] = 0;
                  HEAP32[36472>>2] = ((31760 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(667,($this|0),(36472|0));
                  $80 = __THREW__; __THREW__ = 0;
                  $81 = $80&1;
                  if ($81) {
                   label = 41;
                   break;
                  }
                  HEAP32[((36464 + 4|0))>>2] = 0;
                  HEAP32[36464>>2] = ((31800 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(668,($this|0),(36464|0));
                  $82 = __THREW__; __THREW__ = 0;
                  $83 = $82&1;
                  if ($83) {
                   label = 41;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 41) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $eh$lpad$body$index3Z2D = $89;$eh$lpad$body$indexZ2D = $88;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 $$1 = $$0;$$12 = $$01;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[31912>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((31912|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(669)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((31912|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[31904>>2] = 31896;
     ___cxa_guard_release((31912|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[31904>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(670,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if ($14) {
    ___resumeException($12|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
  $19 = (($20) + ($id<<2)|0);
  HEAP32[$19>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
 $$pre2 = HEAP32[$0>>2]|0;
 $20 = $$pre2;
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((31872 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $18;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $11 = $$pre;$13 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $11;$6 = $13;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(40672|0),(399|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(36304,1);
 HEAP32[31896>>2] = 36304;
 STACKTOP = sp;return (31896|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[31920>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return (31920|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[31936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((31936|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(671)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((31936|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[31928>>2] = 31920;
     ___cxa_guard_release((31936|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[31928>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(672)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (673);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,674);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[31944>>2]|0;HEAP32[31944>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $1 = (($0) + ($c<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & $m;
 $4 = ($3<<16>>16)!=(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(675)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $7 = (($6) + ($5<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8;
  } else {
   $9 = 0;
  }
  HEAP16[$$03>>1] = $9;
  $10 = (($$012) + 4|0);
  $11 = (($$03) + 2|0);
  $12 = ($10|0)==($high|0);
  if ($12) {
   break;
  } else {
   $$012 = $10;$$03 = $11;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = (($$01) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $5 = (($4) + ($3<<1)|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & $m;
    $8 = ($7<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($8) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $2;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(676)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(677)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $7 = (($$012) + 4|0);
  $8 = (($$03) + 1|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   break;
  } else {
   $$012 = $7;$$03 = $8;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((31968 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$2>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((31968 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c&255;
 $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c << 24 >> 24;
 $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((32040 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(599)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre101 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$054 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$054 = $frm;
   while(1) {
    $3 = HEAP32[$fend$054>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$054) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$054;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$054 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(678,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(616,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(679,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(616,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L25: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012>>0]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97>>0] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L25;
         }
         $100 = (($p$012) + 1|0);
         $$pre101 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre101;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L30: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L30;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre99 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre99;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(616,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L55: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(679,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(616,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L55;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L55;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch()|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(616,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(616,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre114 = 0, $$pre115 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$061 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$061 = $frm;
   while(1) {
    $3 = HEAP8[$fend$061>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$061) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$061;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$061 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(680,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(616,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre114 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre114;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(681,($70|0),($$pre114|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(616,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L22: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216>>0]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L22;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre115 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre115;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(616,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L38: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(681,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(616,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == -2)) {
         label = 28;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else if ((($47|0) == -1)) {
         label = 27;
         break;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L38;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(616,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(616,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(679,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(616,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(616,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27>>0] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(616,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(682,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(616,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(616,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(616,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(616,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(683,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(616,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(616,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(616,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(616,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((32120 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((32160 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,32200,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(32208)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,32208,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,32232,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(32240)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,32240,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else {
  $$0 = 10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[32264>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((32272|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[32264>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[39472>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((39472|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((39304|0),0,168)|0;
   (___cxa_atexit((684|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((39472|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(685,(39304|0),(39480|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(685,(((39304 + 12|0))|0),(39488|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(685,(((39304 + 24|0))|0),(39496|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(685,(((39304 + 36|0))|0),(39504|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(685,(((39304 + 48|0))|0),(39520|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(685,(((39304 + 60|0))|0),(39536|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(685,(((39304 + 72|0))|0),(39544|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(685,(((39304 + 84|0))|0),(39560|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(685,(((39304 + 96|0))|0),(39568|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(685,(((39304 + 108|0))|0),(39576|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(685,(((39304 + 120|0))|0),(39584|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(685,(((39304 + 132|0))|0),(39592|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(685,(((39304 + 144|0))|0),(39600|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(685,(((39304 + 156|0))|0),(39608|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[32264>>2] = 39304;
               ___cxa_guard_release((32272|0));
               $36 = HEAP32[32264>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((32272|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32288>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[32280>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((32288|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[32280>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[38936>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((38936|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((38768|0),0,168)|0;
   (___cxa_atexit((686|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((38936|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(687,(38768|0),(38944|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(687,(((38768 + 12|0))|0),(38976|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(687,(((38768 + 24|0))|0),(39008|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(687,(((38768 + 36|0))|0),(39040|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(687,(((38768 + 48|0))|0),(39080|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(687,(((38768 + 60|0))|0),(39120|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(687,(((38768 + 72|0))|0),(39152|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(687,(((38768 + 84|0))|0),(39192|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(687,(((38768 + 96|0))|0),(39208|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(687,(((38768 + 108|0))|0),(39224|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(687,(((38768 + 120|0))|0),(39240|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(687,(((38768 + 132|0))|0),(39256|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(687,(((38768 + 144|0))|0),(39272|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(687,(((38768 + 156|0))|0),(39288|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[32280>>2] = 38768;
               ___cxa_guard_release((32288|0));
               $36 = HEAP32[32280>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((32288|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32304>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[32296>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((32304|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[32296>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[38544>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((38544|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((38256|0),0,288)|0;
   (___cxa_atexit((688|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((38544|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(685,(38256|0),(38552|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(685,(((38256 + 12|0))|0),(38560|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(685,(((38256 + 24|0))|0),(38576|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(685,(((38256 + 36|0))|0),(38584|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(685,(((38256 + 48|0))|0),(38592|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(685,(((38256 + 60|0))|0),(38600|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(685,(((38256 + 72|0))|0),(38608|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(685,(((38256 + 84|0))|0),(38616|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(685,(((38256 + 96|0))|0),(38624|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(685,(((38256 + 108|0))|0),(38640|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(685,(((38256 + 120|0))|0),(38648|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(685,(((38256 + 132|0))|0),(38664|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(685,(((38256 + 144|0))|0),(38680|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(685,(((38256 + 156|0))|0),(38688|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(685,(((38256 + 168|0))|0),(38696|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(685,(((38256 + 180|0))|0),(38704|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 192|0))|0),(38592|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 204|0))|0),(38712|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 216|0))|0),(38720|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 228|0))|0),(38728|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 240|0))|0),(38736|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 252|0))|0),(38744|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 264|0))|0),(38752|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(685,(((38256 + 276|0))|0),(38760|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[32296>>2] = 38256;
                  ___cxa_guard_release((32304|0));
                  $56 = HEAP32[32296>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((32304|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32320>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[32312>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((32320|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[32312>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[37704>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((37704|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((37416|0),0,288)|0;
   (___cxa_atexit((689|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((37704|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(687,(37416|0),(37712|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(687,(((37416 + 12|0))|0),(37744|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(687,(((37416 + 24|0))|0),(37784|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(687,(((37416 + 36|0))|0),(37808|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(687,(((37416 + 48|0))|0),(38128|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(687,(((37416 + 60|0))|0),(37832|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(687,(((37416 + 72|0))|0),(37856|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(687,(((37416 + 84|0))|0),(37880|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(687,(((37416 + 96|0))|0),(37912|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(687,(((37416 + 108|0))|0),(37952|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(687,(((37416 + 120|0))|0),(37984|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(687,(((37416 + 132|0))|0),(38024|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(687,(((37416 + 144|0))|0),(38064|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(687,(((37416 + 156|0))|0),(38080|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(687,(((37416 + 168|0))|0),(38096|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(687,(((37416 + 180|0))|0),(38112|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 192|0))|0),(38128|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 204|0))|0),(38144|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 216|0))|0),(38160|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 228|0))|0),(38176|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 240|0))|0),(38192|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 252|0))|0),(38208|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 264|0))|0),(38224|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(687,(((37416 + 276|0))|0),(38240|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[32312>>2] = 37416;
                  ___cxa_guard_release((32320|0));
                  $56 = HEAP32[32312>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((32320|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32336>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[32328>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((32336|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[32328>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[37392>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((37392|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((37104|0),0,288)|0;
   (___cxa_atexit((690|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((37392|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(685,(37104|0),(37400|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((32336|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(685,(((37104 + 12|0))|0),(37408|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((32336|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[32328>>2] = 37104;
 ___cxa_guard_release((32336|0));
 $12 = HEAP32[32328>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32352>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[32344>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((32352|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[32344>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[37064>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((37064|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((36776|0),0,288)|0;
   (___cxa_atexit((691|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((37064|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(687,(36776|0),(37072|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((32352|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(687,(((36776 + 12|0))|0),(37088|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((32352|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[32344>>2] = 36776;
 ___cxa_guard_release((32352|0));
 $12 = HEAP32[32344>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32376>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32360|0);
 }
 $2 = (___cxa_guard_acquire((32376|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32360|0);
 }
 __THREW__ = 0;
 invoke_viii(639,(32360|0),(32384|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((32376|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((430|0),(32360|0),(___dso_handle|0))|0);
 ___cxa_guard_release((32376|0));
 STACKTOP = sp;return (32360|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32416>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32400|0);
 }
 $2 = (___cxa_guard_acquire((32416|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32400|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(692,(32424|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(693,(32400|0),(32424|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((694|0),(32400|0),(___dso_handle|0))|0);
   ___cxa_guard_release((32416|0));
   STACKTOP = sp;return (32400|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((32416|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32480>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32464|0);
 }
 $2 = (___cxa_guard_acquire((32480|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32464|0);
 }
 __THREW__ = 0;
 invoke_viii(639,(32464|0),(32488|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((32480|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((430|0),(32464|0),(___dso_handle|0))|0);
 ___cxa_guard_release((32480|0));
 STACKTOP = sp;return (32464|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32520>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32504|0);
 }
 $2 = (___cxa_guard_acquire((32520|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32504|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(692,(32528|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(693,(32504|0),(32528|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((694|0),(32504|0),(___dso_handle|0))|0);
   ___cxa_guard_release((32520|0));
   STACKTOP = sp;return (32504|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((32520|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32584>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32568|0);
 }
 $2 = (___cxa_guard_acquire((32584|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32568|0);
 }
 __THREW__ = 0;
 invoke_viii(639,(32568|0),(32592|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((32584|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((430|0),(32568|0),(___dso_handle|0))|0);
 ___cxa_guard_release((32584|0));
 STACKTOP = sp;return (32568|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32632>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32616|0);
 }
 $2 = (___cxa_guard_acquire((32632|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32616|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(692,(32640|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(693,(32616|0),(32640|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((694|0),(32616|0),(___dso_handle|0))|0);
   ___cxa_guard_release((32632|0));
   STACKTOP = sp;return (32616|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((32632|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32744>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32728|0);
 }
 $2 = (___cxa_guard_acquire((32744|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32728|0);
 }
 __THREW__ = 0;
 invoke_viii(639,(32728|0),(32752|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((32744|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((430|0),(32728|0),(___dso_handle|0))|0);
 ___cxa_guard_release((32744|0));
 STACKTOP = sp;return (32728|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32784>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (32768|0);
 }
 $2 = (___cxa_guard_acquire((32784|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (32768|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(692,(32792|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(693,(32768|0),(32792|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((694|0),(32768|0),(___dso_handle|0))|0);
   ___cxa_guard_release((32784|0));
   STACKTOP = sp;return (32768|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((32784|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((32040 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(599)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(614,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __GLOBAL__I_a1034() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((695|0),(28064|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32032)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32032)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(28640);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32024)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,32024)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(28640);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((28792 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(108,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((28680 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(436,($0|0),(32024|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((28536 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(89,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((28424 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(436,($0|0),(32032|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = $__last;
 $16 = (($15) - ($0))|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $17 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $17;
  $18 = (($$02) + 1|0);
  $19 = (($__p$01) + 1|0);
  $20 = ($18|0)==($__last|0);
  if ($20) {
   break;
  } else {
   $$02 = $18;$__p$01 = $19;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($16)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = $scevgep;
 $18 = (($17) - ($0))|0;
 $19 = $18 >>> 2;
 $20 = (($19) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $21 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $21;
  $22 = (($$02) + 4|0);
  $23 = (($__p$01) + 4|0);
  $24 = ($22|0)==($__last|0);
  if ($24) {
   break;
  } else {
   $$02 = $22;$__p$01 = $23;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$025 = 0, $$027 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i2$i$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off036 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$063 = 0, $__ky1$037 = 0, $__ky2$048 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$061 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$333 = 0, $__n_does_match$4 = 0, $__n_does_match$546 = 0, $__n_does_match$6 = 0;
 var $__n_might_match$0$lcssa = 0, $__n_might_match$060 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$332 = 0, $__n_might_match$4 = 0, $__st$062 = 0, $__st$134 = 0, $__st$247 = 0, $__st$326 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(605);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$063 = $__kb;$__n_does_match$061 = 0;$__n_might_match$060 = $3;$__st$062 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$063>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$063) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$062>>0] = 2;
    $33 = (($__n_might_match$060) + -1)|0;
    $34 = (($__n_does_match$061) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$062>>0] = 1;
    $__n_does_match$1 = $__n_does_match$061;$__n_might_match$1 = $__n_might_match$060;
   }
   $35 = (($__ky$063) + 12|0);
   $36 = (($__st$062) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$063 = $35;$__n_does_match$061 = $__n_does_match$1;$__n_might_match$060 = $__n_might_match$1;$__st$062 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i17 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i17 = 0;
    } else {
     $$pre$i2$i$i17 = $54;
    }
   } else {
    $$pre$i2$i$i17 = $54;
   }
  }
  $68 = ($$pre$i2$i$i17|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 65;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off036 = 0;$__ky1$037 = $__kb;$__n_does_match$333 = $__n_does_match$2;$__n_might_match$332 = $__n_might_match$2;$__st$134 = $__status$0;
  }
  while(1) {
   $91 = HEAP8[$__st$134>>0]|0;
   $92 = ($91<<24>>24)==(1);
   do {
    if ($92) {
     $93 = HEAP8[$__ky1$037>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      $98 = (($__ky1$037) + 1|0);
      $100 = $98;
     } else {
      $96 = (($__ky1$037) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $100 = $97;
     }
     $99 = (($100) + ($__indx$0)|0);
     $101 = HEAP8[$99>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $101;
     } else {
      $102 = HEAP32[$__ct>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      __THREW__ = 0;
      $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $105;
      }
     }
     $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($108)) {
      HEAP8[$__st$134>>0] = 0;
      $120 = (($__n_might_match$332) + -1)|0;
      $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $120;
      break;
     }
     $109 = HEAP8[$__ky1$037>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $114 = $109&255;
      $115 = $114 >>> 1;
      $117 = $115;
     } else {
      $112 = (($__ky1$037) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $117 = $113;
     }
     $116 = ($117|0)==($$pre|0);
     if ($116) {
      HEAP8[$__st$134>>0] = 2;
      $118 = (($__n_might_match$332) + -1)|0;
      $119 = (($__n_does_match$333) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
    }
   } while(0);
   $121 = (($__ky1$037) + 12|0);
   $122 = (($__st$134) + 1|0);
   $123 = ($121|0)==($__ke|0);
   if ($123) {
    break;
   } else {
    $__consume$0$off036 = $__consume$1$off0;$__ky1$037 = $121;$__n_does_match$333 = $__n_does_match$4;$__n_might_match$332 = $__n_might_match$4;$__st$134 = $122;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $124 = HEAP32[$__b>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$124>>2]|0;
   $131 = (($130) + 40|0);
   $132 = HEAP32[$131>>2]|0;
   __THREW__ = 0;
   (invoke_ii($132|0,($124|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 6;
    break;
   }
  } else {
   $135 = (($126) + 1|0);
   HEAP32[$125>>2] = $135;
  }
  $136 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($136>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$048 = $__kb;$__n_does_match$546 = $__n_does_match$4;$__st$247 = $__status$0;
  }
  while(1) {
   $137 = HEAP8[$__st$247>>0]|0;
   $138 = ($137<<24>>24)==(2);
   if ($138) {
    $139 = HEAP8[$__ky2$048>>0]|0;
    $140 = $139 & 1;
    $141 = ($140<<24>>24)==(0);
    if ($141) {
     $144 = $139&255;
     $145 = $144 >>> 1;
     $147 = $145;
    } else {
     $142 = (($__ky2$048) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $147 = $143;
    }
    $146 = ($147|0)==($$pre|0);
    if ($146) {
     $__n_does_match$6 = $__n_does_match$546;
    } else {
     HEAP8[$__st$247>>0] = 0;
     $148 = (($__n_does_match$546) + -1)|0;
     $__n_does_match$6 = $148;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$546;
   }
   $149 = (($__ky2$048) + 12|0);
   $150 = (($__st$247) + 1|0);
   $151 = ($149|0)==($__ke|0);
   if ($151) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$048 = $149;$__n_does_match$546 = $__n_does_match$6;$__st$247 = $150;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 65) {
  $152 = ($70|0)==(0|0);
  do {
   if ($152) {
    $166 = 0;
    label = 71;
   } else {
    $153 = (($70) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($70) + 16|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($154|0)==($156|0);
    if ($157) {
     $158 = HEAP32[$70>>2]|0;
     $159 = (($158) + 36|0);
     $160 = HEAP32[$159>>2]|0;
     __THREW__ = 0;
     $161 = (invoke_ii($160|0,($70|0))|0);
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if (!($163)) {
      $164 = ($161|0)==(-1);
      if ($164) {
       HEAP32[$__b>>2] = 0;
       $166 = 0;
       label = 71;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $166 = $$pre$i$i$i13;
       label = 71;
       break;
      }
     }
    } else {
     $166 = $70;
     label = 71;
    }
   }
  } while(0);
  L90: do {
   if ((label|0) == 71) {
    $165 = ($166|0)==(0|0);
    do {
     if ($68) {
      label = 77;
     } else {
      $167 = (($$pre$i2$i$i17) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (($$pre$i2$i$i17) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if (!($171)) {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
      $172 = HEAP32[$$pre$i2$i$i17>>2]|0;
      $173 = (($172) + 36|0);
      $174 = HEAP32[$173>>2]|0;
      __THREW__ = 0;
      $175 = (invoke_ii($174|0,($$pre$i2$i$i17|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      $177 = $176&1;
      if ($177) {
       break L90;
      }
      $178 = ($175|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      } else {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($165) {
      label = 79;
     }
    }
    if ((label|0) == 79) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L106: do {
     if ($23) {
      label = 83;
     } else {
      $$027 = $__kb;$__st$326 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$326>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$025 = $$027;
        break L106;
       }
       $183 = (($$027) + 12|0);
       $184 = (($__st$326) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 83;
        break;
       } else {
        $$027 = $183;$__st$326 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 83) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$025 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$025|0);
    }
    __THREW__ = 0;
    invoke_vi(608,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$025|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(608,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(696,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(697,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(698,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(699,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(700,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(701,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(702,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(703,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(704,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(616,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i12 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i18 = 0, $$029 = 0, $$031 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i14 = 0, $$pre$i3$i$i20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off040 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$067 = 0, $__ky1$041 = 0, $__ky2$052 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$065 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$2$phi = 0, $__n_does_match$337 = 0, $__n_does_match$4 = 0, $__n_does_match$550 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$064 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$336 = 0, $__n_might_match$4 = 0, $__st$066 = 0, $__st$138 = 0, $__st$251 = 0, $__st$330 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i15 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(605);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$067 = $__kb;$__n_does_match$065 = 0;$__n_might_match$064 = $3;$__st$066 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$067>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$067) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$066>>0] = 2;
    $33 = (($__n_might_match$064) + -1)|0;
    $34 = (($__n_does_match$065) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$066>>0] = 1;
    $__n_does_match$1 = $__n_does_match$065;$__n_might_match$1 = $__n_might_match$064;
   }
   $35 = (($__ky$067) + 12|0);
   $36 = (($__st$066) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$067 = $35;$__n_does_match$065 = $__n_does_match$1;$__n_might_match$064 = $__n_might_match$1;$__st$066 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i20 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i20 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i20 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 67;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off040 = 0;$__ky1$041 = $__kb;$__n_does_match$337 = $__n_does_match$2;$__n_might_match$336 = $__n_might_match$2;$__st$138 = $__status$0;
  }
  while(1) {
   $90 = HEAP8[$__st$138>>0]|0;
   $91 = ($90<<24>>24)==(1);
   do {
    if ($91) {
     $92 = HEAP8[$__ky1$041>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     if ($94) {
      $97 = (($__ky1$041) + 4|0);
      $99 = $97;
     } else {
      $95 = (($__ky1$041) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $99 = $96;
     }
     $98 = (($99) + ($__indx$0<<2)|0);
     $100 = HEAP32[$98>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $100;
     } else {
      $101 = HEAP32[$__ct>>2]|0;
      $102 = (($101) + 28|0);
      $103 = HEAP32[$102>>2]|0;
      __THREW__ = 0;
      $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $104;
      }
     }
     $107 = ($__c$0|0)==($__kc$0|0);
     if (!($107)) {
      HEAP8[$__st$138>>0] = 0;
      $119 = (($__n_might_match$336) + -1)|0;
      $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $119;
      break;
     }
     $108 = HEAP8[$__ky1$041>>0]|0;
     $109 = $108 & 1;
     $110 = ($109<<24>>24)==(0);
     if ($110) {
      $113 = $108&255;
      $114 = $113 >>> 1;
      $116 = $114;
     } else {
      $111 = (($__ky1$041) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $116 = $112;
     }
     $115 = ($116|0)==($$pre|0);
     if ($115) {
      HEAP8[$__st$138>>0] = 2;
      $117 = (($__n_might_match$336) + -1)|0;
      $118 = (($__n_does_match$337) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
    }
   } while(0);
   $120 = (($__ky1$041) + 12|0);
   $121 = (($__st$138) + 1|0);
   $122 = ($120|0)==($__ke|0);
   if ($122) {
    break;
   } else {
    $__consume$0$off040 = $__consume$1$off0;$__ky1$041 = $120;$__n_does_match$337 = $__n_does_match$4;$__n_might_match$336 = $__n_might_match$4;$__st$138 = $121;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $123 = HEAP32[$__b>>2]|0;
  $124 = (($123) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$123>>2]|0;
   $130 = (($129) + 40|0);
   $131 = HEAP32[$130>>2]|0;
   __THREW__ = 0;
   (invoke_ii($131|0,($123|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 6;
    break;
   }
  } else {
   $134 = (($125) + 4|0);
   HEAP32[$124>>2] = $134;
  }
  $135 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($135>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$052 = $__kb;$__n_does_match$550 = $__n_does_match$4;$__st$251 = $__status$0;
  }
  while(1) {
   $136 = HEAP8[$__st$251>>0]|0;
   $137 = ($136<<24>>24)==(2);
   if ($137) {
    $138 = HEAP8[$__ky2$052>>0]|0;
    $139 = $138 & 1;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $143 = $138&255;
     $144 = $143 >>> 1;
     $146 = $144;
    } else {
     $141 = (($__ky2$052) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $146 = $142;
    }
    $145 = ($146|0)==($$pre|0);
    if ($145) {
     $__n_does_match$6 = $__n_does_match$550;
    } else {
     HEAP8[$__st$251>>0] = 0;
     $147 = (($__n_does_match$550) + -1)|0;
     $__n_does_match$6 = $147;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$550;
   }
   $148 = (($__ky2$052) + 12|0);
   $149 = (($__st$251) + 1|0);
   $150 = ($148|0)==($__ke|0);
   if ($150) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$052 = $148;$__n_does_match$550 = $__n_does_match$6;$__st$251 = $149;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 67) {
  $151 = ($71|0)==(0|0);
  do {
   if ($151) {
    $193 = 1;
    label = 74;
   } else {
    $152 = (($71) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($71) + 16|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($153|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$71>>2]|0;
     $158 = (($157) + 36|0);
     $159 = HEAP32[$158>>2]|0;
     __THREW__ = 0;
     $160 = (invoke_ii($159|0,($71|0))|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     if ($162) {
      break;
     } else {
      $$0$i$i$i$i12 = $160;
     }
    } else {
     $163 = HEAP32[$153>>2]|0;
     $$0$i$i$i$i12 = $163;
    }
    $164 = ($$0$i$i$i$i12|0)==(-1);
    if ($164) {
     HEAP32[$__b>>2] = 0;
     $193 = 1;
     label = 74;
     break;
    } else {
     $$pre$i$i$i14 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i15 = ($$pre$i$i$i14|0)==(0|0);
     $193 = $phitmp$i$i$i15;
     label = 74;
     break;
    }
   }
  } while(0);
  L96: do {
   if ((label|0) == 74) {
    $165 = ($$pre$i3$i$i20|0)==(0|0);
    do {
     if ($165) {
      label = 80;
     } else {
      $166 = (($$pre$i3$i$i20) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($$pre$i3$i$i20) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($167|0)==($169|0);
      if ($170) {
       $171 = HEAP32[$$pre$i3$i$i20>>2]|0;
       $172 = (($171) + 36|0);
       $173 = HEAP32[$172>>2]|0;
       __THREW__ = 0;
       $174 = (invoke_ii($173|0,($$pre$i3$i$i20|0))|0);
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if ($176) {
        break L96;
       } else {
        $$0$i$i1$i$i18 = $174;
       }
      } else {
       $177 = HEAP32[$167>>2]|0;
       $$0$i$i1$i$i18 = $177;
      }
      $178 = ($$0$i$i1$i$i18|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 80;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 82;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 80) {
     if ($193) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L112: do {
     if ($23) {
      label = 86;
     } else {
      $$031 = $__kb;$__st$330 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$330>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$029 = $$031;
        break L112;
       }
       $183 = (($$031) + 12|0);
       $184 = (($__st$330) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 86;
        break;
       } else {
        $$031 = $183;$__st$330 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 86) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$029 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$029|0);
    }
    __THREW__ = 0;
    invoke_vi(608,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$029|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(608,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(696,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(697,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(698,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(699,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(700,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(701,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(702,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(703,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(598,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(598,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(704,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(616,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP8[$__sp>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $23 = (($__sp) + 1|0);
    $27 = $23;
   } else {
    $21 = (($__sp) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $27 = $22;
   }
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 48|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iiii($26|0,($0|0),($27|0),($__ns$0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    ___resumeException($32|0);
    // unreachable;
   }
   $31 = ($28|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $34 = (($2) - ($9))|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
  $40 = ($39|0)==($34|0);
  if (!($40)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(705,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(616,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(616,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i13 = 0, $or$cond = 0, $sext = 0, $sext25 = 0, $tmp$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i4;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i21 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $$pre$i2$i$i8;
      }
     } else {
      $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i10 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $or$cond = $tmp$i$i10 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($or$cond)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
     $$0$i$i11 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i11 = $105;
    }
    $106 = $$0$i$i11&255;
    $isascii1$i13 = ($106<<24>>24)>(-1);
    if (!($isascii1$i13)) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $sext25 = $$0$i$i11 << 24;
    $107 = $sext25 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 1023]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i17 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i17;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i21|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i21) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i21) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i21>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i21)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$02 = $__r$0;
       STACKTOP = sp;return ($$02|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$02 = $__r$0;
      STACKTOP = sp;return ($$02|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0, $$pre$i3$i$i26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i6 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
     $$0$i$i$i$i3 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i3 = $71;
    }
    $72 = ($$0$i$i$i$i3|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i5 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i6 = ($$pre$i$i$i5|0)==(0|0);
     $86 = $phitmp$i$i$i6;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
     $$0$i$i1$i$i9 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i9 = $84;
    }
    $85 = ($$0$i$i1$i$i9|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i26 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
     $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = $$pre$i3$i$i11;$87 = $phitmp$i4$i$i12;
     break;
    }
   }
  } while(0);
  $tmp$i$i14 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $or$cond = $tmp$i$i14 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
   $$0$i$i15 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i15 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i15)|0);
  if (!($103)) {
   $$02 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i15,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$02|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 1023]($89)|0);
    $$0$i$i$i$i18 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i18 = $131;
   }
   $132 = ($$0$i$i$i$i18|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
    $150 = $phitmp$i$i$i21;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i26|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i26) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i26) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i26>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i26)|0);
    $$0$i$i1$i$i24 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i24 = $143;
   }
   $144 = ($$0$i$i1$i$i24|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$02 = $__r$0;
   STACKTOP = sp;return ($$02|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$02 = $__r$0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(617|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 608;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(617|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 608;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(617|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 608;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$46 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$46 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $46;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = $scevgep;
  $31 = (($30) - ($0))|0;
  $32 = $31 >>> 2;
  $33 = (($17) + ($32))|0;
  $34 = (($33) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $35 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $35;
   $36 = (($__p$02) + 4|0);
   $37 = (($$01) + 4|0);
   $38 = ($37|0)==($__last|0);
   if ($38) {
    break;
   } else {
    $$01 = $37;$__p$02 = $36;
   }
  }
  $scevgep5 = (($28) + ($34<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $39 = (($17) + ($13))|0;
 $40 = HEAP8[$this>>0]|0;
 $41 = $40 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $44 = $39 << 1;
  $45 = $44&255;
  HEAP8[$this>>0] = $45;
  STACKTOP = sp;return ($this|0);
 } else {
  $43 = (($this) + 4|0);
  HEAP32[$43>>2] = $39;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(706,($this|0),($__n|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($6|0);
  // unreachable;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30352)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30392)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31960)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31952)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32024)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32032)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32088)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32096)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32104)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(32112)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30464)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30584)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30744)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31336)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31400)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31464)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31528)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31568)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31704)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31752)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(30856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31008)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31240)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31272)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31792)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(31832)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = (($this) + 16|0);
 $10 = ($9|0)==($0|0);
 if ($10) {
  $11 = (($this) + 128|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $__new_last2$i$i = $10;
 $scevgep$i$i = (($1) + -4|0);
 $12 = $scevgep$i$i;
 $13 = (($12) - ($__new_last2$i$i))|0;
 $14 = $13 >>> 2;
 $15 = $14 ^ -1;
 $scevgep4$i$i = (($1) + ($15<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (($3) + ($id<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre1;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond15 = $15 & $16;
 L7: do {
  if ($or$cond15) {
   $17 = $frm_end;
   $frm_nxt$117 = $frm_nxt$1$ph;$nchar16_t$016 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$117>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$117) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$016;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$117;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $28 = (($frm_nxt$117) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $38 = (($frm_nxt$117) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$117;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $43 = (($frm_nxt$117) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$117) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $71 = (($frm_nxt$117) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $73 = $frm_nxt$117;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      $76 = (($mx) - ($nchar16_t$016))|0;
      $77 = ($76>>>0)<(2);
      $or$cond2 = $75 | $77;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $78 = (($frm_nxt$117) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$117) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$117) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 35;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 37;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $113 = (($nchar16_t$016) + 1)|0;
      $114 = (($frm_nxt$117) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$117 = $frm_nxt$2;$nchar16_t$016 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre1;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = (($nchar32_t$014) + 1)|0;
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($112>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $112;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $115 = $frm_nxt$1$lcssa;
 $116 = $frm;
 $117 = (($115) - ($116))|0;
 $$0 = $117;
 STACKTOP = sp;return ($$0|0);
}
function ___cxx_global_array_dtor112($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((39304 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(39304);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor97($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((38768 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(38768);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor73($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((38256 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(38256);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor48($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((37416 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(37416);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((37104 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(37104);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((36776 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(36776);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($6|0)==(34);
 do {
  if ($10) {
   HEAP32[$__err>>2] = 4;
   $21 = ($5|0)>(0);
   $22 = ($4>>>0)>(0);
   $23 = ($5|0)==(0);
   $24 = $23 & $22;
   $25 = $21 | $24;
   if ($25) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $11 = ($5|0)<(-1);
   $12 = ($4>>>0)<(2147483648);
   $13 = ($5|0)==(-1);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $16 = ($5|0)>(0);
   $17 = ($4>>>0)>(2147483647);
   $18 = ($5|0)==(0);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ($6|0)==(34);
 if ($10) {
  HEAP32[$__err>>2] = 4;
  $11 = ($5|0)>(0);
  $12 = ($4>>>0)>(0);
  $13 = ($5|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  $16 = $15 ? -1 : 0;
  $17 = $15 ? 2147483647 : -2147483648;
  tempRet0 = $17;
  STACKTOP = sp;return ($16|0);
 } else {
  $18 = $5;$19 = $4;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(65535);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = $6&65535;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (+_strtold_l($__a,$__p2,$3));
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
 }
 $10 = $4;
 $$0 = $10;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = ($14>>>0)>(1073741823);
 if ($15) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $16 = (($4) - ($11))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)<(536870911);
 if ($18) {
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($14>>>0);
  $21 = $20 ? $14 : $19;
  $$0$i = $21;
 } else {
  $$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $$not$i$i & $5;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($9|0);
 if ($13) {
  $14 = (($12) + 112|0);
  HEAP8[$14>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($9);
  STACKTOP = sp;return;
 }
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 39824;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 39832 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (39616 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$ = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$030 = 0, $ws$1 = 0;
 var $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $5 | $6;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$18 = $32;$cnt$0$lcssa = $cnt$029;$ws$0$lcssa = $ws$030;
     label = 7;
     break L1;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $cnt$3 = -1;
     break L1;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $15 & $16;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa = $7;$$014$lcssa = $$115;$18 = $14;$cnt$0$lcssa = $13;$ws$0$lcssa = $ws$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$18 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $17 = ($18|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $17 & $19;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $20;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $18;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $cnt$3 = $30;
      break L9;
     }
    }
    if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    } else if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$148 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$830 = 0, $$in = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1033 = 0, $s$1034 = 0, $s$19 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$518>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    L12: do {
     if ($66) {
      $67 = $s$518;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4716>>>0)>(4);
      $or$cond = $69 & $70;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        $76 = $71&255;
        if (!($75)) {
         $$2 = $$1;$$6 = $$5;$94 = $76;$s$7 = $s$6;
         break L12;
        }
        $77 = (($s$6) + 1|0);
        $78 = $71 & 255;
        $79 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = (($s$6) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = (($$1) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = (($s$6) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = (($$1) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = (($s$6) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = (($$1) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$88>>0]|0;
       $$2 = $91;$$6 = $92;$94 = $$pre$pre;$s$7 = $88;
      } else {
       $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0217 = $98;$$4716 = $99;$s$518 = $97;
    }
   }
   $101 = (($93) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$432 = $$2;$$830 = $$6;$s$1034 = $s$7;
    label = 47;
    break;
   }
   $103 = (($s$7) + 1|0);
   $104 = (39616 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $105;$s$8 = $103;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$148 = $$03;$s$19 = $s$0;
      while(1) {
       $19 = (($s$19) + 4|0);
       $20 = (($$148) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$148 = $20;$s$19 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$432 = $ws;$$830 = $$25;$s$1034 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (39616 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 37;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 40;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 43;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 46;
 }
 else if ((label|0) == 23) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 46;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 37) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 46;
 }
 else if ((label|0) == 40) {
  $124 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $118;$s$10 = $124;
  label = 46;
 }
 else if ((label|0) == 43) {
  $134 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $128;$s$10 = $134;
  label = 46;
 }
 if ((label|0) == 46) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$432 = $$4;$$830 = $$8;$s$1034 = $s$10;
   label = 47;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $142 = HEAP8[$s$1034>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$432|0)==(0|0);
   if (!($144)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$830))|0;
   $$0 = $145;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$431|0)==(0|0);
 if ($147) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (39616 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$$0 = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0, $s$030 = 0, $s$1 = 0;
 var $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$17 = $33;$cnt$0$lcssa = $cnt$029;$s$0$lcssa = $s$030;
     label = 7;
     break L1;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $cnt$3 = -1;
     break L1;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $14 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa = $6;$$014$lcssa = $$115;$17 = $13;$cnt$0$lcssa = $12;$s$0$lcssa = $s$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$17 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $16 = ($17|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $16 & $18;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $19;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $cnt$3 = $31;
      break L9;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$414>>>0)<($35>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa21 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi243Z2D = 0, $$pre229 = 0, $$pre231 = 0, $$pre235 = 0, $$pre237 = 0, $$pre238 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0224 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$030 = 0, $dest$0 = 0;
 var $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph49 = 0, $i$0$ph49$lcssa = 0, $i$0$ph49$us56 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit723 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp622 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0135 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0141 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$324 = 0, $p$4 = 0;
 var $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0140 = 0, $pos$1 = 0, $pos$2 = 0, $s$0133 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0;
 var $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0134 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph165 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$025 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0135 = 0;$p$0141 = $fmt;$pos$0140 = 0;$s$0133 = 0;$wcs$0134 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0141>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0141) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0141) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0141) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            break;
           }
          }
          $74 = (($p$0141) + 3|0);
          $dest$0 = $72;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp622 = (($77) + -48)|0;
      $isdigit723 = ($isdigittmp622>>>0)<(10);
      if ($isdigit723) {
       $81 = $77;$p$324 = $p$2;$width$025 = 0;
       while(1) {
        $78 = ($width$025*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$324) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$324 = $82;$width$025 = $80;
        } else {
         $$lcssa21 = $83;$p$3$lcssa = $82;$width$0$lcssa = $80;
         break;
        }
       }
      } else {
       $$lcssa21 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa21<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa21;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0133;$wcs$1 = $wcs$0134;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0140;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0140|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $107 = $pos$0140&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0140&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0140;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0140;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre229 = HEAP32[$3>>2]|0;
       if ($124) {
        $129 = $$pre229;
       } else {
        $125 = (($$pre229) + -1|0);
        HEAP32[$3>>2] = $125;
        $129 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $128 = $129;
       $130 = $127;
       $131 = (($126) + ($pos$0140))|0;
       $132 = (($131) + ($128))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $141 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre231 = HEAP32[$4>>2]|0;
       $141 = $$pre231;
      }
      $140 = ($141|0)==(0|0);
      if (!($140)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L78: do {
       switch ($$|0) {
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $324 = (+___floatscan($f,$$size$0,0));
        $325 = HEAP32[$5>>2]|0;
        $326 = HEAP32[$3>>2]|0;
        $327 = HEAP32[$6>>2]|0;
        $328 = $326;
        $329 = $327;
        $330 = (($329) - ($328))|0;
        $331 = ($325|0)==($330|0);
        if ($331) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $332 = ($dest$0|0)==(0|0);
        if ($332) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $333 = $324;
          HEAPF32[$dest$0>>2] = $333;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        L87: do {
         if ($146) {
          $147 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($147) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $148 = (($p$5) + 1|0);
          $149 = HEAP8[$148>>0]|0;
          $150 = ($149<<24>>24)==(94);
          $151 = (($p$5) + 2|0);
          $invert$0 = $150&1;
          $p$6 = $150 ? $151 : $148;
          $152 = $150&1;
          _memset(($scanset|0),($152|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $153 = HEAP8[$p$6>>0]|0;
          if ((($153<<24>>24) == 45)) {
           $154 = (($p$6) + 1|0);
           $155 = $invert$0 ^ 1;
           $156 = $155&255;
           HEAP8[$10>>0] = $156;
           $$pre$phi243Z2D = $156;$p$7$ph = $154;
          } else if ((($153<<24>>24) == 93)) {
           $157 = (($p$6) + 1|0);
           $158 = $invert$0 ^ 1;
           $159 = $158&255;
           HEAP8[$11>>0] = $159;
           $$pre$phi243Z2D = $159;$p$7$ph = $157;
          } else {
           $$pre241 = $invert$0 ^ 1;
           $$pre242 = $$pre241&255;
           $$pre$phi243Z2D = $$pre242;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $160 = HEAP8[$p$7>>0]|0;
           if ((($160<<24>>24) == 0)) {
            $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else if ((($160<<24>>24) == 45)) {
            $161 = (($p$7) + 1|0);
            $162 = HEAP8[$161>>0]|0;
            if ((($162<<24>>24) == 93) | (($162<<24>>24) == 0)) {
             $173 = 45;$p$8 = $p$7;
            } else {
             $163 = (($p$7) + -1|0);
             $164 = HEAP8[$163>>0]|0;
             $165 = ($164&255)<($162&255);
             if ($165) {
              $166 = $164&255;
              $c$030 = $166;
              while(1) {
               $167 = (($c$030) + 1)|0;
               $168 = (($scanset) + ($167)|0);
               HEAP8[$168>>0] = $$pre$phi243Z2D;
               $169 = HEAP8[$161>>0]|0;
               $170 = $169&255;
               $171 = ($167|0)<($170|0);
               if ($171) {
                $c$030 = $167;
               } else {
                $173 = $169;$p$8 = $161;
                break;
               }
              }
             } else {
              $173 = $162;$p$8 = $161;
             }
            }
           } else if ((($160<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L87;
           } else {
            $173 = $160;$p$8 = $p$7;
           }
           $172 = $173&255;
           $174 = (($172) + 1)|0;
           $175 = (($scanset) + ($174)|0);
           HEAP8[$175>>0] = $$pre$phi243Z2D;
           $176 = (($p$8) + 1|0);
           $p$7 = $176;
          }
         }
        } while(0);
        $177 = (($width$1) + 1)|0;
        $$8 = $144 ? $177 : 31;
        $178 = ($$size$0|0)==(1);
        $179 = ($alloc$0|0)!=(0);
        L106: do {
         if ($178) {
          if ($179) {
           $180 = $$8 << 2;
           $181 = (_malloc($180)|0);
           $182 = ($181|0)==(0|0);
           if ($182) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $181;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $181;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L112: while(1) {
           $183 = ($wcs$3$ph|0)==(0|0);
           if ($183) {
            while(1) {
             $186 = HEAP32[$3>>2]|0;
             $197 = HEAP32[$4>>2]|0;
             $198 = ($186>>>0)<($197>>>0);
             if ($198) {
              $185 = (($186) + 1|0);
              HEAP32[$3>>2] = $185;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $190 = $188;
             } else {
              $184 = (___shgetc($f)|0);
              $190 = $184;
             }
             $189 = (($190) + 1)|0;
             $191 = (($scanset) + ($189)|0);
             $192 = HEAP8[$191>>0]|0;
             $193 = ($192<<24>>24)==(0);
             if ($193) {
              $i$0$ph49$lcssa = $i$0$ph;$wcs$3$ph165 = 0;
              break L112;
             }
             $194 = $190&255;
             HEAP8[$0>>0] = $194;
             $195 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($195|0) == -1)) {
              $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             } else if ((($195|0) == -2)) {
              continue;
             }
             $196 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $179 & $196;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($179) {
             $i$0$ph49$us56 = $i$0$ph;
            } else {
             $i$0$ph49 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $201 = HEAP32[$3>>2]|0;
              $215 = HEAP32[$4>>2]|0;
              $216 = ($201>>>0)<($215>>>0);
              if ($216) {
               $200 = (($201) + 1|0);
               HEAP32[$3>>2] = $200;
               $202 = HEAP8[$201>>0]|0;
               $203 = $202&255;
               $205 = $203;
              } else {
               $199 = (___shgetc($f)|0);
               $205 = $199;
              }
              $204 = (($205) + 1)|0;
              $206 = (($scanset) + ($204)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = ($207<<24>>24)==(0);
              if ($208) {
               $i$0$ph49$lcssa = $i$0$ph49$us56;$wcs$3$ph165 = $wcs$3$ph;
               break L112;
              }
              $209 = $205&255;
              HEAP8[$0>>0] = $209;
              $210 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($210|0) == -1)) {
               $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($210|0) == -2))) {
               break;
              }
             }
             $211 = HEAP32[$wc>>2]|0;
             $212 = (($i$0$ph49$us56) + 1)|0;
             $213 = (($wcs$3$ph) + ($i$0$ph49$us56<<2)|0);
             HEAP32[$213>>2] = $211;
             $214 = ($212|0)==($k$0$ph|0);
             if ($214) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph49$us56 = $212;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $234 = $factor | 1;
           $235 = $234 << 2;
           $236 = (_realloc($wcs$3$ph,$235)|0);
           $237 = ($236|0)==(0|0);
           if ($237) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $234;$wcs$3$ph = $236;
          }
          L136: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $217 = HEAP32[$3>>2]|0;
              $218 = HEAP32[$4>>2]|0;
              $219 = ($217>>>0)<($218>>>0);
              if ($219) {
               $220 = (($217) + 1|0);
               HEAP32[$3>>2] = $220;
               $221 = HEAP8[$217>>0]|0;
               $222 = $221&255;
               $225 = $222;
              } else {
               $223 = (___shgetc($f)|0);
               $225 = $223;
              }
              $224 = (($225) + 1)|0;
              $226 = (($scanset) + ($224)|0);
              $227 = HEAP8[$226>>0]|0;
              $228 = ($227<<24>>24)==(0);
              if ($228) {
               $i$0$ph49$lcssa = $i$0$ph49;$wcs$3$ph165 = $wcs$3$ph;
               break L136;
              }
              $229 = $225&255;
              HEAP8[$0>>0] = $229;
              $230 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($230|0) == -1)) {
               $alloc$0224 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($230|0) == -2))) {
               break;
              }
             }
             $231 = HEAP32[$wc>>2]|0;
             $232 = (($i$0$ph49) + 1)|0;
             $233 = (($wcs$3$ph) + ($i$0$ph49<<2)|0);
             HEAP32[$233>>2] = $231;
             $i$0$ph49 = $232;
             label = 98;
            }
           }
          } while(0);
          $238 = (_mbsinit($st)|0);
          $239 = ($238|0)==(0);
          if ($239) {
           $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph165;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph49$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph165;
          }
         } else {
          if ($179) {
           $240 = (_malloc($$8)|0);
           $241 = ($240|0)==(0|0);
           if ($241) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $240;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $242 = HEAP32[$3>>2]|0;
             $243 = HEAP32[$4>>2]|0;
             $244 = ($242>>>0)<($243>>>0);
             if ($244) {
              $245 = (($242) + 1|0);
              HEAP32[$3>>2] = $245;
              $246 = HEAP8[$242>>0]|0;
              $247 = $246&255;
              $250 = $247;
             } else {
              $248 = (___shgetc($f)|0);
              $250 = $248;
             }
             $249 = (($250) + 1)|0;
             $251 = (($scanset) + ($249)|0);
             $252 = HEAP8[$251>>0]|0;
             $253 = ($252<<24>>24)==(0);
             if ($253) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L106;
             }
             $254 = $250&255;
             $255 = (($i$2) + 1)|0;
             $256 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$256>>0] = $254;
             $257 = ($255|0)==($k$1$ph|0);
             if ($257) {
              break;
             } else {
              $i$2 = $255;
             }
            }
            $factor17 = $k$1$ph << 1;
            $258 = $factor17 | 1;
            $259 = (_realloc($s$2$ph,$258)|0);
            $260 = ($259|0)==(0|0);
            if ($260) {
             $alloc$0224 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $258;$s$2$ph = $259;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $261 = ($dest$0|0)==(0|0);
          if ($261) {
           $279 = $141;
           while(1) {
            $277 = HEAP32[$3>>2]|0;
            $278 = ($277>>>0)<($279>>>0);
            if ($278) {
             $280 = (($277) + 1|0);
             HEAP32[$3>>2] = $280;
             $281 = HEAP8[$277>>0]|0;
             $282 = $281&255;
             $285 = $282;
            } else {
             $283 = (___shgetc($f)|0);
             $285 = $283;
            }
            $284 = (($285) + 1)|0;
            $286 = (($scanset) + ($284)|0);
            $287 = HEAP8[$286>>0]|0;
            $288 = ($287<<24>>24)==(0);
            if ($288) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L106;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $279 = $$pre237;
           }
          } else {
           $264 = $141;$i$3 = 0;
           while(1) {
            $262 = HEAP32[$3>>2]|0;
            $263 = ($262>>>0)<($264>>>0);
            if ($263) {
             $265 = (($262) + 1|0);
             HEAP32[$3>>2] = $265;
             $266 = HEAP8[$262>>0]|0;
             $267 = $266&255;
             $270 = $267;
            } else {
             $268 = (___shgetc($f)|0);
             $270 = $268;
            }
            $269 = (($270) + 1)|0;
            $271 = (($scanset) + ($269)|0);
            $272 = HEAP8[$271>>0]|0;
            $273 = ($272<<24>>24)==(0);
            if ($273) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L106;
            }
            $274 = $270&255;
            $275 = (($i$3) + 1)|0;
            $276 = (($dest$0) + ($i$3)|0);
            HEAP8[$276>>0] = $274;
            $$pre238 = HEAP32[$4>>2]|0;
            $264 = $$pre238;$i$3 = $275;
           }
          }
         }
        } while(0);
        $289 = HEAP32[$4>>2]|0;
        $290 = ($289|0)==(0|0);
        $$pre235 = HEAP32[$3>>2]|0;
        if ($290) {
         $295 = $$pre235;
        } else {
         $291 = (($$pre235) + -1|0);
         HEAP32[$3>>2] = $291;
         $295 = $291;
        }
        $292 = HEAP32[$5>>2]|0;
        $293 = HEAP32[$6>>2]|0;
        $294 = $295;
        $296 = $293;
        $297 = (($294) - ($296))|0;
        $298 = (($297) + ($292))|0;
        $299 = ($298|0)==(0);
        if ($299) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $144 ^ 1;
        $300 = ($298|0)==($width$1|0);
        $or$cond9 = $300 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($179) {
          if ($178) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $301 = ($wcs$4|0)==(0|0);
         if (!($301)) {
          $302 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$302>>2] = 0;
         }
         $303 = ($s$3|0)==(0|0);
         if ($303) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $304 = (($s$3) + ($i$4)|0);
          HEAP8[$304>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $305 = (___intscan($f,$base$0,0,-1,-1)|0);
        $306 = tempRet0;
        $307 = HEAP32[$5>>2]|0;
        $308 = HEAP32[$3>>2]|0;
        $309 = HEAP32[$6>>2]|0;
        $310 = $308;
        $311 = $309;
        $312 = (($311) - ($310))|0;
        $313 = ($307|0)==($312|0);
        if ($313) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $314 = ($$|0)==(112);
        $315 = ($dest$0|0)!=(0|0);
        $or$cond3 = $314 & $315;
        if ($or$cond3) {
         $316 = $305;
         HEAP32[$dest$0>>2] = $316;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $317 = ($dest$0|0)==(0|0);
        if ($317) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -1:  {
          $319 = $305&65535;
          HEAP16[$dest$0>>1] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $320 = $dest$0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $322 = (($320) + 4)|0;
          $323 = $322;
          HEAP32[$323>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -2:  {
          $318 = $305&255;
          HEAP8[$dest$0>>0] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $334 = HEAP32[$5>>2]|0;
      $335 = HEAP32[$3>>2]|0;
      $336 = HEAP32[$6>>2]|0;
      $337 = $335;
      $338 = $336;
      $339 = (($334) + ($pos$1))|0;
      $340 = (($339) + ($337))|0;
      $341 = (($340) - ($338))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $342 = $not$&1;
      $matches$0$ = (($342) + ($matches$0135))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $341;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0141) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $65 = (($pos$0140) + 1)|0;
    $matches$1 = $matches$0135;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   } else {
    $p$1 = $p$0141;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre240 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre240;
    } else {
     $33 = (($$pre240) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0140))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0135;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   }
  } while(0);
  $343 = (($p$11) + 1|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = ($344<<24>>24)==(0);
  if ($345) {
   $matches$3 = $matches$1;
   label = 166;
   break;
  } else {
   $13 = $344;$matches$0135 = $matches$1;$p$0141 = $343;$pos$0140 = $pos$2;$s$0133 = $s$5;$wcs$0134 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)>(-1);
  $64 = ($matches$0135|0)!=(0);
  $or$cond5 = $63 | $64;
  if ($or$cond5) {
   $matches$3 = $matches$0135;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0133;$wcs$8 = $wcs$0134;
   label = 163;
  }
 }
 else if ((label|0) == 162) {
  $$old4 = ($matches$0135|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0224;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 163;
  } else {
   $alloc$2 = $alloc$0224;$matches$2 = $matches$0135;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 166) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 163) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 707;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((40032|0),(708|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[40024>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(40040,$vararg_buffer);
  // unreachable;
 }
 return 0|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((40208 + 8|0));
  ___cxa_throw(($7|0),(40264|0),(390|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40208 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (40232|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(709,(40280|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(709,(40320|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(429);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(710)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[9960]|0;HEAP32[9960] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[40376>>2]|0;HEAP32[40376>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40408 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40432 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((40592 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (40616|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,40728,40784,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 1023]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,40728,40896,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(40264|0),(390|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort_message(40008,$vararg_buffer10);
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort_message(40008,$vararg_buffer10);
  // unreachable;
 }
 $4 = (($2) + 80|0);
 $5 = (($2) + 48|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 & -256;
 $13 = ($12|0)==(1126902528);
 $14 = ($11|0)==(1129074247);
 $15 = $13 & $14;
 if (!($15)) {
  $36 = HEAP32[39848>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $36;
  _abort_message(39968,$vararg_buffer7);
  // unreachable;
 }
 $16 = ($8|0)==(1126902529);
 $17 = ($11|0)==(1129074247);
 $18 = $16 & $17;
 if ($18) {
  $19 = (($2) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = $4;
 }
 HEAP32[$thrown_object>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[40400>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 1023](40400,$22,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[39848>>2]|0;
  $31 = HEAP32[$29>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _abort_message(39872,$vararg_buffer);
  // unreachable;
 } else {
  $35 = HEAP32[39848>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $35;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  _abort_message(39920,$vararg_buffer3);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((40024|0),(711|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(40096,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[40024>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(40152,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[41144>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((41144 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((41144 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[41144>>2] = $22;
     } else {
      $23 = HEAP32[((41144 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((41144 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((41144 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((41144 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[41144>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((41144 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((41144 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((41144 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((41144 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[41144>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[41144>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((41144 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((41144 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((41144 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((41144 + 8|0))>>2] = $81;
     HEAP32[((41144 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((41144 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((41144 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((41144 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((41144 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((41144 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((41144 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((41144 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((41144 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((41144 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((41144 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((41144 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((41144 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[41144>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[41144>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((41144 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((41144 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((41144 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((41144 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((41144 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((41144 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((41144 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((41144 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((41144 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((41144 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((41144 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((41144 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((41144 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((41144 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((41144 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((41144 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((41144 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[41144>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[41144>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((41144 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((41144 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((41144 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((41144 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((41144 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((41144 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((41144 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((41144 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((41144 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((41144 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((41144 + 20|0))>>2] = $514;
   HEAP32[((41144 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((41144 + 8|0))>>2] = 0;
   HEAP32[((41144 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((41144 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((41144 + 12|0))>>2] = $528;
  $529 = HEAP32[((41144 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((41144 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[41616>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((41616 + 8|0))>>2] = $538;
    HEAP32[((41616 + 4|0))>>2] = $538;
    HEAP32[((41616 + 12|0))>>2] = -1;
    HEAP32[((41616 + 16|0))>>2] = -1;
    HEAP32[((41616 + 20|0))>>2] = 0;
    HEAP32[((41144 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[41616>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((41616 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((41144 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((41144 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((41144 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((41144 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((41144 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((41144 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((41616 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((41144 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((41144 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((41616 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((41144 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((41144 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((41144 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((41144 + 432|0))>>2] = $633;
  $634 = HEAP32[((41144 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((41144 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((41144 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((41144 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((41144 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((41144 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((41144 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((41144 + 460|0))>>2] = 0;
    $641 = HEAP32[41616>>2]|0;
    HEAP32[((41144 + 36|0))>>2] = $641;
    HEAP32[((41144 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((41144 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((41144 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((41144 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((41144 + 24|0))>>2] = $654;
    HEAP32[((41144 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((41616 + 16|0))>>2]|0;
    HEAP32[((41144 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((41144 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((41144 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((41144 + 24|0))>>2] = $684;
       HEAP32[((41144 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((41616 + 16|0))>>2]|0;
       HEAP32[((41144 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((41144 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((41144 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((41144 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((41144 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((41144 + 12|0))>>2] = $731;
        HEAP32[((41144 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((41144 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((41144 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((41144 + 8|0))>>2] = $737;
         HEAP32[((41144 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L352: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((41144 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[41144>>2]|0;
            $764 = $763 & $762;
            HEAP32[41144>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((41144 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((41144 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((41144 + 4|0))>>2] = $807;
             break L352;
            } else {
             $808 = HEAP32[((41144 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L352;
             }
            }
           } while(0);
           $815 = HEAP32[((41144 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((41144 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((41144 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[41144>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[41144>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((41144 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((41144 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((41144 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((41144 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((41144 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((41144 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L441: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L441;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((41144 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((41144 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((41144 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((41144 + 24|0))>>2] = $953;
    HEAP32[((41144 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((41616 + 16|0))>>2]|0;
    HEAP32[((41144 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((41144 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((41144 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((41144 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((41144 + 448|0))+12>>2]|0;
    HEAP32[((41144 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((41144 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((41144 + 460|0))>>2] = 0;
    HEAP32[((41144 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((41144 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[41144>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[41144>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((41144 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((41144 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((41144 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((41144 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((41144 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((41144 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((41144 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((41144 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((41144 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((41144 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((41144 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((41144 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((41144 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((41144 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((41144 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((41144 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[41144>>2]|0;
     $36 = $35 & $34;
     HEAP32[41144>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((41144 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((41144 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((41144 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((41144 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((41144 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((41144 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((41144 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((41144 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((41144 + 12|0))>>2] = $120;
   HEAP32[((41144 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((41144 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((41144 + 20|0))>>2] = 0;
   HEAP32[((41144 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((41144 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((41144 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((41144 + 8|0))>>2] = $128;
   HEAP32[((41144 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((41144 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((41144 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[41144>>2]|0;
     $152 = $151 & $150;
     HEAP32[41144>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((41144 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((41144 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((41144 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((41144 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((41144 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((41144 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((41144 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((41144 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((41144 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((41144 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((41144 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((41144 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[41144>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[41144>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((41144 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((41144 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((41144 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((41144 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((41144 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((41144 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L204: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L204;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((41144 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((41144 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((41144 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((41144 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((41144 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((41144 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  STACKTOP = sp;return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$126 = 8;$c$127 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum23 = (($46) + 1)|0;
   $47 = (41640 + ($$sum23)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   } else {
    $$126 = 16;$c$127 = $46;
    label = 46;
   }
  } else {
   $$base24 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (41640 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base24>>>0);
   if ($60) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$073 = 0;
    while(1) {
     $69 = ($x$073*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $or$cond7 = $80 & $81;
     if ($or$cond7) {
      $71 = $79;$x$073 = $70;
     } else {
      break;
     }
    }
    $281 = $70;$282 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$89 = $82;$c$362 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $88 = ($89|0)<(0);
     $90 = $88 << 31 >> 31;
     $91 = $89 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $89;$283 = $84;$284 = $85;$c$3$lcssa = $c$362;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($89|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond9 = $108 & $113;
     if ($or$cond9) {
      $84 = $98;$85 = $99;$89 = $107;$c$362 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $253 = $284;$255 = $283;
    } else {
     $$125 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $253 = $282;$255 = $281;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$126) + -1)|0;
   $116 = $115 & $$126;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$126*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (41904 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $128 = (41640 + ($$sum1737)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$126>>>0);
    if ($131) {
     $134 = $130;$x$138 = 0;
     while(1) {
      $132 = $x$138 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $142 = (41640 + ($$sum17)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$126>>>0);
      $146 = ($133>>>0)<(134217728);
      $or$cond11 = $145 & $146;
      if ($or$cond11) {
       $134 = $144;$x$138 = $133;
      } else {
       break;
      }
     }
     $150 = $143;$153 = 0;$155 = $133;$c$4$lcssa = $c$4$be;
    } else {
     $150 = $129;$153 = 0;$155 = 0;$c$4$lcssa = $c$127;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$126>>>0);
    $152 = ($153>>>0)>($148>>>0);
    $154 = ($155>>>0)>($147>>>0);
    $156 = ($153|0)==($148|0);
    $157 = $156 & $154;
    $158 = $152 | $157;
    $or$cond31 = $151 | $158;
    if ($or$cond31) {
     $$125 = $$126;$285 = $155;$286 = $153;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $155;$160 = $153;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $173 = (41640 + ($$sum18)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$126>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$125 = $$126;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $118 = (41640 + ($$sum2155)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$126>>>0);
   if ($121) {
    $184 = $120;$x$256 = 0;
    while(1) {
     $182 = Math_imul($x$256, $$126)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $192 = (41640 + ($$sum21)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$126>>>0);
     $196 = ($183>>>0)<(119304647);
     $or$cond13 = $195 & $196;
     if ($or$cond13) {
      $184 = $194;$x$256 = $183;
     } else {
      break;
     }
    }
    $198 = $193;$287 = $183;$288 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$127;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$126>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $201 = tempRet0;
    $203 = $288;$205 = $287;$212 = $198;$c$747 = $c$6$lcssa;
    while(1) {
     $202 = ($203>>>0)>($201>>>0);
     $204 = ($205>>>0)>($200>>>0);
     $206 = ($203|0)==($201|0);
     $207 = $206 & $204;
     $208 = $202 | $207;
     if ($208) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($205|0),($203|0),($$126|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $228 = (41640 + ($$sum22)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$126>>>0);
     if ($231) {
      $203 = $220;$205 = $219;$212 = $229;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $232 = (41640 + ($$sum19)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$125>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $243 = (41640 + ($$sum20)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$125>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $253 = $1;$255 = $0;
  } else {
   $253 = $286;$255 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $252 = ($253>>>0)<($1>>>0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = ($253|0)==($1|0);
 $257 = $256 & $254;
 $258 = $252 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond15 = $262 | $263;
  if (!($or$cond15)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
  $267 = ($253>>>0)>($1>>>0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = ($253|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $255 ^ $neg$0;
 $276 = $253 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 STACKTOP = sp;return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0;
 var $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0;
 var $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge = 0;
 var $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0;
 var $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0;
 var $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0;
 var $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0, $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0;
 var $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0;
 var $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0;
 var $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0;
 var $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $23 = $c$171 | 32;
  $24 = (41920 + ($i$070)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $28 = ($i$070>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $36 = (($i$070) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$171 = $c$2;$i$070 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $52 = $c$369 | 32;
      $53 = (41936 + ($i$268)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $57 = ($i$268>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $65 = (($i$268) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$369 = $c$4;$i$268 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $322 = HEAP32[$1>>2]|0;
       $323 = ($322|0)==(0|0);
       if ($323) {
        $c$6 = 48;
        break;
       }
       $324 = HEAP32[$0>>2]|0;
       $325 = (($324) + -1|0);
       HEAP32[$0>>2] = $325;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $157 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $157 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $156 = ($157|0)==(48);
         if ($156) {
          $152 = $154;$153 = $155;
         } else {
          $168 = 0;$170 = 0;$212 = $154;$214 = $155;$c$2$i = $157;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L78: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond$i = $162 | $163;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L78;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $713 = $170;$714 = $168;$715 = $170;$716 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L78;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $167 = ($168|0)<(0);
        $169 = ($170>>>0)<(8);
        $171 = ($168|0)==(0);
        $172 = $171 & $169;
        $173 = $167 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($168|0)<(0);
          $177 = ($170>>>0)<(14);
          $178 = ($168|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $185 | $186;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($170|0),($168|0),1,0)|0);
        $190 = tempRet0;
        $713 = $212;$714 = $214;$715 = $189;$716 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $170 : $212;
      $213 = $210 ? $168 : $214;
      $215 = ($168|0)<(0);
      $216 = ($170>>>0)<(8);
      $217 = ($168|0)==(0);
      $218 = $217 & $216;
      $219 = $215 | $218;
      if ($219) {
       $221 = $170;$222 = $168;$x$318$i = $x$0$i;
       while(1) {
        $220 = $x$318$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($223>>>0)<(8);
        $227 = ($224|0)==(0);
        $228 = $227 & $226;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$318$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         $237 = ($pok|0)==(0);
         if ($237) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $238 = HEAP32[$1>>2]|0;
          $239 = ($238|0)==(0|0);
          if ($239) {
           $250 = 0;$251 = 0;
           break;
          }
          $240 = HEAP32[$0>>2]|0;
          $241 = (($240) + -1|0);
          HEAP32[$0>>2] = $241;
          $250 = 0;$251 = 0;
          break;
         }
        } else {
         $250 = $232;$251 = $233;
        }
       } else {
        $242 = HEAP32[$1>>2]|0;
        $243 = ($242|0)==(0|0);
        if ($243) {
         $250 = 0;$251 = 0;
        } else {
         $244 = HEAP32[$0>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$0>>2] = $245;
         $250 = 0;$251 = 0;
        }
       }
      } while(0);
      $246 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $247 = tempRet0;
      $248 = (_i64Add(($246|0),($247|0),-32,-1)|0);
      $249 = tempRet0;
      $252 = (_i64Add(($248|0),($249|0),($250|0),($251|0))|0);
      $253 = tempRet0;
      $254 = ($x$3$lcssa$i|0)==(0);
      if ($254) {
       $255 = (+($sign$0|0));
       $256 = $255 * 0.0;
       $$0 = $256;
       STACKTOP = sp;return (+$$0);
      }
      $257 = (0 - ($emin$0$ph))|0;
      $258 = ($253|0)>(0);
      $259 = ($252>>>0)>($257>>>0);
      $260 = ($253|0)==(0);
      $261 = $260 & $259;
      $262 = $258 | $261;
      if ($262) {
       $263 = (___errno_location()|0);
       HEAP32[$263>>2] = 34;
       $264 = (+($sign$0|0));
       $265 = $264 * 1.7976931348623157E+308;
       $266 = $265 * 1.7976931348623157E+308;
       $$0 = $266;
       STACKTOP = sp;return (+$$0);
      }
      $267 = (($emin$0$ph) + -106)|0;
      $268 = ($267|0)<(0);
      $269 = $268 << 31 >> 31;
      $270 = ($253|0)<($269|0);
      $271 = ($252>>>0)<($267>>>0);
      $272 = ($253|0)==($269|0);
      $273 = $272 & $271;
      $274 = $270 | $273;
      if ($274) {
       $276 = (___errno_location()|0);
       HEAP32[$276>>2] = 34;
       $277 = (+($sign$0|0));
       $278 = $277 * 2.2250738585072014E-308;
       $279 = $278 * 2.2250738585072014E-308;
       $$0 = $279;
       STACKTOP = sp;return (+$$0);
      }
      $275 = ($x$3$lcssa$i|0)>(-1);
      if ($275) {
       $284 = $252;$285 = $253;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $280 = !($y$314$i >= 0.5);
        $281 = $x$413$i << 1;
        if ($280) {
         $$pn$i = $y$314$i;$x$5$i = $281;
        } else {
         $282 = $281 | 1;
         $283 = $y$314$i + -1.0;
         $$pn$i = $283;$x$5$i = $282;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $286 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $287 = tempRet0;
        $288 = ($x$5$i|0)>(-1);
        if ($288) {
         $284 = $286;$285 = $287;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $293 = $286;$294 = $287;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $252;$294 = $253;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $289 = ($emin$0$ph|0)<(0);
      $290 = $289 << 31 >> 31;
      $291 = (_i64Subtract(32,0,($emin$0$ph|0),($290|0))|0);
      $292 = tempRet0;
      $295 = (_i64Add(($293|0),($294|0),($291|0),($292|0))|0);
      $296 = tempRet0;
      $297 = (0)>($296|0);
      $298 = ($bits$0$ph>>>0)>($295>>>0);
      $299 = (0)==($296|0);
      $300 = $299 & $298;
      $301 = $297 | $300;
      if ($301) {
       $302 = ($295|0)<(0);
       if ($302) {
        $$0611$i = 0;
        label = 126;
       } else {
        $$06$i = $295;
        label = 124;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $303 = ($$06$i|0)<(53);
       if ($303) {
        $$0611$i = $$06$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $304 = (84 - ($$0611$i))|0;
       $305 = (+_scalbn(1.0,$304));
       $306 = (+($sign$0|0));
       $307 = (+_copysignl((+$305),(+$306)));
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $306;$bias$0$i = $307;
      }
      $308 = ($$0612$i|0)<(32);
      $309 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $308 & $309;
      $310 = $x$4$lcssa$i & 1;
      $311 = ($310|0)==(0);
      $or$cond8$i = $or$cond5$i & $311;
      $312 = $or$cond8$i&1;
      $x$6$i = (($312) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $313 = (+($x$6$i>>>0));
      $314 = $$pre$phi$iZ2D * $313;
      $315 = $bias$0$i + $314;
      $316 = $$pre$phi$iZ2D * $y$5$i;
      $317 = $316 + $315;
      $318 = $317 - $bias$0$i;
      $319 = $318 != 0.0;
      if (!($319)) {
       $320 = (___errno_location()|0);
       HEAP32[$320>>2] = 34;
      }
      $321 = (+_scalbnl($318,$293));
      $$0 = $321;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $326 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 137;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $327 = HEAP32[$0>>2]|0;
     $328 = HEAP32[$1>>2]|0;
     $329 = ($327>>>0)<($328>>>0);
     if ($329) {
      $330 = (($327) + 1|0);
      HEAP32[$0>>2] = $330;
      $331 = HEAP8[$327>>0]|0;
      $332 = $331&255;
      $$011$i = $332;$gotdig$0$i11 = 1;
      continue;
     } else {
      $333 = (___shgetc($f)|0);
      $$011$i = $333;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $334 = HEAP32[$0>>2]|0;
     $335 = HEAP32[$1>>2]|0;
     $336 = ($334>>>0)<($335>>>0);
     if ($336) {
      $337 = (($334) + 1|0);
      HEAP32[$0>>2] = $337;
      $338 = HEAP8[$334>>0]|0;
      $339 = $338&255;
      $$1$ph$i = $339;
     } else {
      $340 = (___shgetc($f)|0);
      $$1$ph$i = $340;
     }
     $341 = ($$1$ph$i|0)==(48);
     if ($341) {
      $342 = 0;$343 = 0;
      while(1) {
       $344 = (_i64Add(($342|0),($343|0),-1,-1)|0);
       $345 = tempRet0;
       $346 = HEAP32[$0>>2]|0;
       $347 = HEAP32[$1>>2]|0;
       $348 = ($346>>>0)<($347>>>0);
       if ($348) {
        $349 = (($346) + 1|0);
        HEAP32[$0>>2] = $349;
        $350 = HEAP8[$346>>0]|0;
        $351 = $350&255;
        $$1$be$i = $351;
       } else {
        $352 = (___shgetc($f)|0);
        $$1$be$i = $352;
       }
       $353 = ($$1$be$i|0)==(48);
       if ($353) {
        $342 = $344;$343 = $345;
       } else {
        $$2$i = $$1$be$i;$717 = $344;$718 = $345;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $354 = (($$2$i) + -48)|0;
    $355 = ($354>>>0)<(10);
    $356 = ($$2$i|0)==(46);
    $or$cond112$i = $355 | $356;
    L180: do {
     if ($or$cond112$i) {
      $357 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$360 = 0;$361 = 0;$719 = $356;$720 = $354;$721 = $717;$722 = $718;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L182: while(1) {
       do {
        if ($719) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $723 = $360;$724 = $361;$725 = $360;$726 = $361;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L182;
         }
        } else {
         $359 = ($k$0118$i|0)<(125);
         $362 = (_i64Add(($360|0),($361|0),1,0)|0);
         $363 = tempRet0;
         $364 = ($$3120$i|0)!=(48);
         if (!($359)) {
          if (!($364)) {
           $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $374 = HEAP32[$357>>2]|0;
          $375 = $374 | 1;
          HEAP32[$357>>2] = $375;
          $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $364 ? $362 : $lnz$0115$i;
         $365 = ($j$0119$i|0)==(0);
         $366 = (($x$i) + ($k$0118$i<<2)|0);
         if ($365) {
          $storemerge$i = $720;
         } else {
          $367 = HEAP32[$366>>2]|0;
          $368 = ($367*10)|0;
          $369 = (($$3120$i) + -48)|0;
          $370 = (($369) + ($368))|0;
          $storemerge$i = $370;
         }
         HEAP32[$366>>2] = $storemerge$i;
         $371 = (($j$0119$i) + 1)|0;
         $372 = ($371|0)==(9);
         $373 = $372&1;
         $$k$0$i = (($373) + ($k$0118$i))|0;
         $$13$i = $372 ? 0 : $371;
         $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $376 = HEAP32[$0>>2]|0;
       $377 = HEAP32[$1>>2]|0;
       $378 = ($376>>>0)<($377>>>0);
       if ($378) {
        $379 = (($376) + 1|0);
        HEAP32[$0>>2] = $379;
        $380 = HEAP8[$376>>0]|0;
        $381 = $380&255;
        $$3$be$i = $381;
       } else {
        $382 = (___shgetc($f)|0);
        $$3$be$i = $382;
       }
       $383 = (($$3$be$i) + -48)|0;
       $384 = ($383>>>0)<(10);
       $385 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $384 | $385;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$360 = $725;$361 = $726;$719 = $385;$720 = $383;$721 = $723;$722 = $724;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$388 = $725;$389 = $723;$391 = $726;$392 = $724;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L180;
       }
      }
      $358 = ($gotdig$3116$i|0)!=(0);
      $727 = $360;$728 = $361;$729 = $721;$730 = $722;$731 = $358;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$388 = 0;$389 = $717;$391 = 0;$392 = $718;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $386 = ($gotrad$1$lcssa$i|0)==(0);
      $387 = $386 ? $388 : $389;
      $390 = $386 ? $391 : $392;
      $393 = ($gotdig$3$lcssa$i|0)!=(0);
      $394 = $$3$lcssa$i | 32;
      $395 = ($394|0)==(101);
      $or$cond15$i = $393 & $395;
      if (!($or$cond15$i)) {
       $410 = ($$3$lcssa$i|0)>(-1);
       if ($410) {
        $727 = $388;$728 = $391;$729 = $387;$730 = $390;$731 = $393;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $732 = $388;$733 = $391;$734 = $393;$735 = $387;$736 = $390;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $396 = (_scanexp($f,$pok)|0);
      $397 = tempRet0;
      $398 = ($396|0)==(0);
      $399 = ($397|0)==(-2147483648);
      $400 = $398 & $399;
      do {
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $402 = HEAP32[$1>>2]|0;
         $403 = ($402|0)==(0|0);
         if ($403) {
          $406 = 0;$407 = 0;
          break;
         }
         $404 = HEAP32[$0>>2]|0;
         $405 = (($404) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
         break;
        }
       } else {
        $406 = $396;$407 = $397;
       }
      } while(0);
      $408 = (_i64Add(($406|0),($407|0),($387|0),($390|0))|0);
      $409 = tempRet0;
      $421 = $408;$422 = $388;$424 = $409;$425 = $391;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $411 = HEAP32[$1>>2]|0;
     $412 = ($411|0)==(0|0);
     if ($412) {
      $732 = $727;$733 = $728;$734 = $731;$735 = $729;$736 = $730;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 170;
     } else {
      $413 = HEAP32[$0>>2]|0;
      $414 = (($413) + -1|0);
      HEAP32[$0>>2] = $414;
      if ($731) {
       $421 = $729;$422 = $727;$424 = $730;$425 = $728;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($734) {
      $421 = $735;$422 = $732;$424 = $736;$425 = $733;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $415 = (___errno_location()|0);
     HEAP32[$415>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $416 = HEAP32[$x$i>>2]|0;
    $417 = ($416|0)==(0);
    if ($417) {
     $418 = (+($sign$0|0));
     $419 = $418 * 0.0;
     $$0 = $419;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($421|0)==($422|0);
    $423 = ($424|0)==($425|0);
    $426 = $420 & $423;
    $427 = ($425|0)<(0);
    $428 = ($422>>>0)<(10);
    $429 = ($425|0)==(0);
    $430 = $429 & $428;
    $431 = $427 | $430;
    $or$cond3$i16 = $426 & $431;
    if ($or$cond3$i16) {
     $432 = ($bits$0$ph>>>0)>(30);
     $433 = $416 >>> $bits$0$ph;
     $434 = ($433|0)==(0);
     $or$cond17$i = $432 | $434;
     if ($or$cond17$i) {
      $435 = (+($sign$0|0));
      $436 = (+($416>>>0));
      $437 = $435 * $436;
      $$0 = $437;
      STACKTOP = sp;return (+$$0);
     }
    }
    $438 = (($emin$0$ph|0) / -2)&-1;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = ($424|0)>($440|0);
    $442 = ($421>>>0)>($438>>>0);
    $443 = ($424|0)==($440|0);
    $444 = $443 & $442;
    $445 = $441 | $444;
    if ($445) {
     $446 = (___errno_location()|0);
     HEAP32[$446>>2] = 34;
     $447 = (+($sign$0|0));
     $448 = $447 * 1.7976931348623157E+308;
     $449 = $448 * 1.7976931348623157E+308;
     $$0 = $449;
     STACKTOP = sp;return (+$$0);
    }
    $450 = (($emin$0$ph) + -106)|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ($424|0)<($452|0);
    $454 = ($421>>>0)<($450>>>0);
    $455 = ($424|0)==($452|0);
    $456 = $455 & $454;
    $457 = $453 | $456;
    if ($457) {
     $458 = (___errno_location()|0);
     HEAP32[$458>>2] = 34;
     $459 = (+($sign$0|0));
     $460 = $459 * 2.2250738585072014E-308;
     $461 = $460 * 2.2250738585072014E-308;
     $$0 = $461;
     STACKTOP = sp;return (+$$0);
    }
    $462 = ($j$0108$i|0)==(0);
    if ($462) {
     $k$3$i = $k$0104$i;
    } else {
     $463 = ($j$0108$i|0)<(9);
     if ($463) {
      $464 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$464>>2]|0;
      $466 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $465 = ($466*10)|0;
       $467 = (($j$388$i) + 1)|0;
       $exitcond$i = ($467|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $466 = $465;$j$388$i = $467;
       }
      }
      HEAP32[$464>>2] = $465;
     }
     $468 = (($k$0104$i) + 1)|0;
     $k$3$i = $468;
    }
    $469 = ($lnz$098$i|0)<(9);
    if ($469) {
     $470 = ($lnz$098$i|0)<=($421|0);
     $471 = ($421|0)<(18);
     $or$cond5$i17 = $470 & $471;
     if ($or$cond5$i17) {
      $472 = ($421|0)==(9);
      if ($472) {
       $473 = (+($sign$0|0));
       $474 = HEAP32[$x$i>>2]|0;
       $475 = (+($474>>>0));
       $476 = $473 * $475;
       $$0 = $476;
       STACKTOP = sp;return (+$$0);
      }
      $477 = ($421|0)<(9);
      if ($477) {
       $478 = (+($sign$0|0));
       $479 = HEAP32[$x$i>>2]|0;
       $480 = (+($479>>>0));
       $481 = $478 * $480;
       $482 = (8 - ($421))|0;
       $483 = (41952 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (+($484|0));
       $486 = $481 / $485;
       $$0 = $486;
       STACKTOP = sp;return (+$$0);
      }
      $487 = Math_imul($421, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $488 = (($$neg37$i) + ($487))|0;
      $489 = ($488|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $490 = $$pre$i18 >>> $488;
      $491 = ($490|0)==(0);
      $or$cond187$i = $489 | $491;
      if ($or$cond187$i) {
       $492 = (+($sign$0|0));
       $493 = (+($$pre$i18>>>0));
       $494 = $492 * $493;
       $495 = (($421) + -10)|0;
       $496 = (41952 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (+($497|0));
       $499 = $494 * $498;
       $$0 = $499;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $500 = (($421|0) % 9)&-1;
    $501 = ($500|0)==(0);
    if ($501) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $421;$z$1$ph56$i = $k$3$i;
    } else {
     $502 = ($421|0)>(-1);
     $503 = (($500) + 9)|0;
     $504 = $502 ? $500 : $503;
     $505 = (8 - ($504))|0;
     $506 = (41952 + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($k$3$i|0)==(0);
     if ($508) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $421;$z$0$i = 0;
     } else {
      $509 = (1000000000 / ($507|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $421;
      while(1) {
       $510 = (($x$i) + ($k$479$i<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511>>>0) % ($507>>>0))&-1;
       $513 = (($511>>>0) / ($507>>>0))&-1;
       $514 = (($513) + ($carry$080$i))|0;
       HEAP32[$510>>2] = $514;
       $515 = Math_imul($512, $509)|0;
       $516 = ($k$479$i|0)==($a$078$i|0);
       $517 = ($514|0)==(0);
       $or$cond18$i = $516 & $517;
       $518 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $519 = $518 & 127;
        $520 = (($rp$077$i) + -9)|0;
        $a$1$i = $519;$rp$1$i19 = $520;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $521 = ($518|0)==($k$3$i|0);
       if ($521) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $515;$k$479$i = $518;$rp$077$i = $rp$1$i19;
       }
      }
      $522 = ($515|0)==(0);
      if ($522) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $523 = (($k$3$i) + 1)|0;
       $524 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$524>>2] = $515;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $523;
      }
     }
     $525 = (9 - ($504))|0;
     $526 = (($525) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $526;$z$1$ph56$i = $z$0$i;
    }
    L274: while(1) {
     $527 = ($rp$2$ph55$i|0)<(18);
     $528 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($527) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $530 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = (($x$i) + ($k$5$us$i<<2)|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = (_bitshift64Shl(($532|0),0,29)|0);
        $534 = tempRet0;
        $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
        $536 = tempRet0;
        $537 = ($536>>>0)>(0);
        $538 = ($535>>>0)>(1000000000);
        $539 = ($536|0)==(0);
        $540 = $539 & $538;
        $541 = $537 | $540;
        if ($541) {
         $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
         $543 = tempRet0;
         $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
         $545 = tempRet0;
         $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
        }
        HEAP32[$531>>2] = $$sink$off0$us$i;
        $546 = (($z$2$us$i) + 127)|0;
        $547 = $546 & 127;
        $548 = ($k$5$us$i|0)!=($547|0);
        $549 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $548 | $549;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $550 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $551 = (($k$5$us$i) + -1)|0;
        if ($549) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
        }
       }
       $552 = (($e2$0$us$i) + -29)|0;
       $553 = ($carry1$1$us$i|0)==(0);
       if ($553) {
        $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $529 = ($rp$2$ph55$i|0)==(18);
      if ($529) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $554 = HEAP32[$528>>2]|0;
       $555 = ($554>>>0)<(9007199);
       if (!($555)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L274;
       }
       $556 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $556;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $557 = (($x$i) + ($k$5$us67$i<<2)|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (_bitshift64Shl(($558|0),0,29)|0);
        $560 = tempRet0;
        $561 = (_i64Add(($559|0),($560|0),($carry1$0$us66$i|0),0)|0);
        $562 = tempRet0;
        $563 = ($562>>>0)>(0);
        $564 = ($561>>>0)>(1000000000);
        $565 = ($562|0)==(0);
        $566 = $565 & $564;
        $567 = $563 | $566;
        if ($567) {
         $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
         $569 = tempRet0;
         $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
         $571 = tempRet0;
         $$sink$off0$us70$i = $570;$carry1$1$us71$i = $568;
        } else {
         $$sink$off0$us70$i = $561;$carry1$1$us71$i = 0;
        }
        HEAP32[$557>>2] = $$sink$off0$us70$i;
        $572 = (($z$2$us64$i) + 127)|0;
        $573 = $572 & 127;
        $574 = ($k$5$us67$i|0)!=($573|0);
        $575 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $574 | $575;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $576 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $576 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $577 = (($k$5$us67$i) + -1)|0;
        if ($575) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $577;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $578 = (($e2$0$us61$i) + -29)|0;
       $579 = ($carry1$1$us71$i|0)==(0);
       if ($579) {
        $e2$0$us61$i = $578;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $580 = (($rp$2$ph55$i) + 9)|0;
     $581 = (($a$2$ph57$i) + 127)|0;
     $582 = $581 & 127;
     $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
     if ($583) {
      $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $585 = $584 & 127;
      $586 = (($x$i) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $589 = $588 & 127;
      $590 = (($x$i) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $591 | $587;
      HEAP32[$590>>2] = $592;
      $z$4$i = $585;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $593 = (($x$i) + ($582<<2)|0);
     HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $582;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $580;$z$1$ph56$i = $z$4$i;
    }
    L305: while(1) {
     $630 = (($z$5$ph$i) + 1)|0;
     $628 = $630 & 127;
     $631 = (($z$5$ph$i) + 127)|0;
     $632 = $631 & 127;
     $633 = (($x$i) + ($632<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $606 = ($rp$3$i$ph|0)==(18);
      $634 = ($rp$3$i$ph|0)>(27);
      $$20$i = $634 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $596 = (($i$042$i) + ($a$3$i))|0;
        $597 = $596 & 127;
        $598 = ($597|0)==($z$5$ph$i|0);
        if ($598) {
         $i$1$i = 2;
         break;
        }
        $599 = (($x$i) + ($597<<2)|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = (41944 + ($i$042$i<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = ($600>>>0)<($602>>>0);
        if ($603) {
         $i$1$i = 2;
         break;
        }
        $604 = ($600>>>0)>($602>>>0);
        $595 = (($i$042$i) + 1)|0;
        if ($604) {
         $i$1$i = $i$042$i;
         break;
        }
        $594 = ($595|0)<(2);
        if ($594) {
         $i$042$i = $595;
        } else {
         $i$1$i = $595;
         break;
        }
       }
       $605 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $605 & $606;
       if ($or$cond8$i20) {
        break L305;
       }
       $609 = (($$20$i) + ($e2$1$i))|0;
       $610 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($610) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $609;
       } else {
        break;
       }
      }
      $611 = 1 << $$20$i;
      $612 = (($611) + -1)|0;
      $613 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $614 = (($x$i) + ($k$645$i<<2)|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $615 & $612;
       $617 = $615 >>> $$20$i;
       $618 = (($617) + ($carry3$047$i))|0;
       HEAP32[$614>>2] = $618;
       $619 = Math_imul($616, $613)|0;
       $620 = ($k$645$i|0)==($a$444$i|0);
       $621 = ($618|0)==(0);
       $or$cond21$i = $620 & $621;
       $622 = (($k$645$i) + 1)|0;
       $623 = $622 & 127;
       $624 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $624 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $623 : $a$444$i;
       $625 = ($623|0)==($z$5$ph$i|0);
       if ($625) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $619;$k$645$i = $623;$rp$443$i = $rp$5$i;
       }
      }
      $626 = ($619|0)==(0);
      if ($626) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($628|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $635 = HEAP32[$633>>2]|0;
      $636 = $635 | 1;
      HEAP32[$633>>2] = $636;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
     }
     $629 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$629>>2] = $619;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $609;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $628;
    }
    $607 = $a$3$i & 127;
    $608 = ($607|0)==($z$5$ph$i|0);
    if ($608) {
     $637 = (($628) + -1)|0;
     $638 = (($x$i) + ($637<<2)|0);
     HEAP32[$638>>2] = 0;
     $z$7$i = $628;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $639 = (($x$i) + ($607<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (+($640>>>0));
    $642 = (($a$3$i) + 1)|0;
    $643 = $642 & 127;
    $644 = ($643|0)==($z$7$i|0);
    if ($644) {
     $703 = (($z$7$i) + 1)|0;
     $704 = $703 & 127;
     $705 = (($704) + -1)|0;
     $706 = (($x$i) + ($705<<2)|0);
     HEAP32[$706>>2] = 0;
     $z$7$1$i = $704;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $707 = $641 * 1.0E+9;
    $708 = (($x$i) + ($643<<2)|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = (+($709>>>0));
    $711 = $707 + $710;
    $668 = (+($sign$0|0));
    $650 = $668 * $711;
    $688 = (($e2$1$i) + 53)|0;
    $646 = (($688) - ($emin$0$ph))|0;
    $712 = ($646|0)<($bits$0$ph|0);
    if ($712) {
     $645 = ($646|0)<(0);
     if ($645) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 244;
     } else {
      $$012$i = $646;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $647 = ($$012$i|0)<(53);
     if ($647) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 244;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $650;
     }
    }
    if ((label|0) == 244) {
     $648 = (105 - ($$01231$i))|0;
     $649 = (+_scalbn(1.0,$648));
     $651 = (+_copysignl((+$649),(+$650)));
     $652 = (53 - ($$01231$i))|0;
     $653 = (+_scalbn(1.0,$652));
     $654 = (+_fmodl((+$650),(+$653)));
     $655 = $650 - $654;
     $656 = $651 + $655;
     $$01232$i = $$01231$i;$bias$0$i25 = $651;$denormal$029$i = $denormal$030$i;$frac$0$i = $654;$y$1$i24 = $656;
    }
    $657 = (($a$3$i) + 2)|0;
    $658 = $657 & 127;
    $659 = ($658|0)==($z$7$1$i|0);
    do {
     if ($659) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = (($x$i) + ($658<<2)|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($661>>>0)<(500000000);
      do {
       if ($662) {
        $663 = ($661|0)==(0);
        if ($663) {
         $664 = (($a$3$i) + 3)|0;
         $665 = $664 & 127;
         $666 = ($665|0)==($z$7$1$i|0);
         if ($666) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $667 = $668 * 0.25;
        $669 = $667 + $frac$0$i;
        $frac$1$i = $669;
       } else {
        $670 = ($661>>>0)>(500000000);
        if ($670) {
         $671 = $668 * 0.75;
         $672 = $671 + $frac$0$i;
         $frac$1$i = $672;
         break;
        }
        $673 = (($a$3$i) + 3)|0;
        $674 = $673 & 127;
        $675 = ($674|0)==($z$7$1$i|0);
        if ($675) {
         $676 = $668 * 0.5;
         $677 = $676 + $frac$0$i;
         $frac$1$i = $677;
         break;
        } else {
         $678 = $668 * 0.75;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        }
       }
      } while(0);
      $680 = (53 - ($$01232$i))|0;
      $681 = ($680|0)>(1);
      if (!($681)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $682 = (+_fmodl((+$frac$1$i),1.0));
      $683 = $682 != 0.0;
      if ($683) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = $frac$1$i + 1.0;
      $frac$2$i = $684;
     }
    } while(0);
    $685 = $y$1$i24 + $frac$2$i;
    $686 = $685 - $bias$0$i25;
    $687 = $688 & 2147483647;
    $689 = (-2 - ($sum$i))|0;
    $690 = ($687|0)>($689|0);
    do {
     if ($690) {
      $691 = (+Math_abs((+$686)));
      $692 = !($691 >= 9007199254740992.0);
      if ($692) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $686;
      } else {
       $693 = ($denormal$029$i|0)!=(0);
       $694 = ($$01232$i|0)==($646|0);
       $or$cond22$i = $693 & $694;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $695 = $686 * 0.5;
       $696 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $696;$y$2$i26 = $695;
      }
      $697 = (($e2$2$i) + 50)|0;
      $698 = ($697|0)>($326|0);
      if (!($698)) {
       $699 = ($denormal$2$i|0)!=(0);
       $700 = $frac$2$i != 0.0;
       $or$cond10$i = $699 & $700;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $701 = (___errno_location()|0);
      HEAP32[$701>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $686;
     }
    } while(0);
    $702 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $702;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $75 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $75 = $73;
    }
    $74 = ($75|0)==(40);
    if ($74) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($88|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4|0)==(0);
    $brmerge108 = $100 | $97;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=42552+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((41144 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((41616 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((41144 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((41144 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((41144 + 24|0))>>2] = $36;
  HEAP32[((41144 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((41144 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((41144 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((41144 + 8|0))>>2] = $storemerge21;
  HEAP32[((41144 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((41144 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[41144>>2]|0;
    $88 = $87 & $86;
    HEAP32[41144>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((41144 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((41144 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((41144 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((41144 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((41144 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((41144 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((41144 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((41144 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((41144 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((41144 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[41144>>2]|0;
     $32 = $31 & $30;
     HEAP32[41144>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((41144 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((41144 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((41144 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((41144 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((41144 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((41144 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((41144 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((41144 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((41144 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((41144 + 12|0))>>2] = $115;
   HEAP32[((41144 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((41144 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((41144 + 20|0))>>2] = 0;
   HEAP32[((41144 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((41144 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((41144 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((41144 + 8|0))>>2] = $123;
   HEAP32[((41144 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((41144 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[41144>>2]|0;
     $146 = $145 & $144;
     HEAP32[41144>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((41144 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((41144 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((41144 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((41144 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((41144 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((41144 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((41144 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((41144 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((41144 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[41144>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[41144>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((41144 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((41144 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((41144 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((41144 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((41144 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((41144 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((41144 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((41144 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$116 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $9&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   STACKTOP = sp;return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  STACKTOP = sp;return ($97|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $35;$53 = $47;$c$29 = $c$1$be;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$29|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$29|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond7 = $70 & $75;
   if ($or$cond7) {
    $52 = $60;$53 = $61;$c$29 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $35;$91 = $47;$c$2$lcssa = $c$1$be;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 STACKTOP = sp;return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0;
 var $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre260 = 0, $$pre261 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1029$phi = 0, $103 = 0, $1030 = 0, $1030$phi = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0;
 var $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0;
 var $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0, $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1029 = 0;$1030 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 352;
   break;
  } else {
   $1031 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1031<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   } else if ((($1031<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1031 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt83,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1030$phi = $1030;$1029$phi = $1029;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1030 = $1030$phi;$1029 = $1029$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((41984 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 370;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1032 = $1029;$1033 = $1030;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1032 = $144;$1033 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1029;$218 = $1030;
    } else {
     do {
      switch ($134|0) {
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1034 = 0;$1035 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1034 = $153;$1035 = $151;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1034 = 0;$1035 = $154;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1034 = $1030;$1035 = $150;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1034 = $160;$1035 = $157;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1034 = $165;$1035 = $166;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1034 = 0;$1035 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1034 = $177;$1035 = $176;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1032 = $179;$1033 = $180;
       label = 63;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1034 = $172;$1035 = $173;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1034 = $1030;$1035 = $1029;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1034 = $1033;$1035 = $1032;
    label = 64;
   } else {
    $1029 = $1032;$1030 = $1033;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1035;$218 = $1034;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 42448 : ((42448 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 42448;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 42448 : ((42448 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((42448 + 1|0));
     label = 86;
    }
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1038 = $wc;$1039 = $6;$p$4266 = -1;
    label = 101;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1040 = $191;$1041 = $316;$i$0$lcssa267 = 0;
     label = 106;
    } else {
     $1038 = $316;$1039 = $191;$p$4266 = $p$0;
     label = 101;
    }
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$010$i = $357;$pl$0$i = 1;$prefix$0$i = 42472;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((42472 + 1|0)) : ((42472 + 6|0));
      $$010$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$010$i = $355;$pl$0$i = 1;$prefix$0$i = ((42472 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 42496 : 42504;
     $373 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 42512 : 42520;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i40$i = $377 & $378;
     if ($or$cond$i40$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i42$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i42$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i42$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i44$i = $385;
      } else {
       $$0$lcssa$i44$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i47$i = $387 & $378;
     if ($or$cond$i47$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i49$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i49$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i49$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i51$i = $394;
      } else {
       $$0$lcssa$i51$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$010$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $409 = (($re$1163$i) + -1)|0;
        $410 = $round$0162$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         break;
        } else {
         $re$1163$i = $409;$round$0162$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $410;
        $416 = $410 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $410;
        $419 = $418 - $410;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $433;$$01$lcssa$off0$i$i = $434;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (42528 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i73 = $472 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (42528 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (42528 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre306$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond271 = $505 & $507;
     $508 = $457;
     if ($or$cond271) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre306$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i57$i = $515 & $516;
     if ($or$cond$i57$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i59$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i59$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i59$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i61$i = $523;
      } else {
       $$0$lcssa$i61$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i64$i = $524 & $516;
     if ($or$cond$i64$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i66$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i66$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i66$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i68$i = $531;
      } else {
       $$0$lcssa$i68$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $532 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i72$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i72$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i72$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i74$i = $543;
      } else {
       $$0$lcssa$i74$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i77$i = $544 & $516;
     if ($or$cond$i77$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i79$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i79$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i79$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i81$i = $551;
      } else {
       $$0$lcssa$i81$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $516 ? $w$1 : $513;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$36$i = $556 ? $big$i : $13;
    $558 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $560;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0249$i = (($z$1257$i) + -4|0);
      $569 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $570 = HEAP32[$d$0251$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0250$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0251$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $579 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($579) {
          break;
         } else {
          $carry$0250$i = $577;$d$0251$i = $d$0$i;
         }
        }
        $580 = ($577|0)==(0);
        if ($580) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $581 = (($a$1258$i) + -4|0);
        HEAP32[$581>>2] = $577;
        $a$2$ph$i = $581;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $582 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($582)) {
        break;
       }
       $583 = (($z$2$i) + -4|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ($584|0)==(0);
       if ($585) {
        $z$2$i = $583;
       } else {
        break;
       }
      }
      $586 = HEAP32[$e2$i>>2]|0;
      $587 = (($586) - ($568))|0;
      HEAP32[$e2$i>>2] = $587;
      $588 = ($587|0)>(0);
      if ($588) {
       $567 = $587;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $587;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $560;
    }
    $589 = ($$pr151$i|0)<(0);
    L235: do {
     if ($589) {
      $590 = (($$p$i) + 25)|0;
      $591 = (($590|0) / 9)&-1;
      $592 = (($591) + 1)|0;
      $593 = ($400|0)==(102);
      if ($593) {
       $594 = (($$36$i) + ($592<<2)|0);
       $596 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $595 = (0 - ($596))|0;
        $597 = ($595|0)>(9);
        $$23$us$i = $597 ? 9 : $595;
        $598 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($598) {
          $623 = 1 << $$23$us$i;
          $617 = (($623) + -1)|0;
          $620 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $615 = HEAP32[$d$1237$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$23$us$i;
           $619 = (($618) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $619;
           $606 = Math_imul($616, $620)|0;
           $621 = (($d$1237$us$i) + 4|0);
           $622 = ($621>>>0)<($z$3243$us$i>>>0);
           if ($622) {
            $carry3$0238$us$i = $606;$d$1237$us$i = $621;
           } else {
            break;
           }
          }
          $602 = HEAP32[$a$3244$us$i>>2]|0;
          $603 = ($602|0)==(0);
          $604 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $603 ? $604 : $a$3244$us$i;
          $605 = ($606|0)==(0);
          if ($605) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $607 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $606;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $599 = HEAP32[$a$3244$us$i>>2]|0;
          $600 = ($599|0)==(0);
          $601 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $600 ? $601 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($592|0);
        $$z$4$us$i = $611 ? $594 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $596 = $613;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L235;
        }
       }
      } else {
       $625 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $624 = (0 - ($625))|0;
       $626 = ($624|0)>(9);
       $$23$i = $626 ? 9 : $624;
       $627 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($627) {
         $631 = 1 << $$23$i;
         $632 = (($631) + -1)|0;
         $633 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $634 = HEAP32[$d$1237$i>>2]|0;
          $635 = $634 & $632;
          $636 = $634 >>> $$23$i;
          $637 = (($636) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $637;
          $638 = Math_imul($635, $633)|0;
          $639 = (($d$1237$i) + 4|0);
          $640 = ($639>>>0)<($z$3243$i>>>0);
          if ($640) {
           $carry3$0238$i = $638;$d$1237$i = $639;
          } else {
           break;
          }
         }
         $641 = HEAP32[$a$3244$i>>2]|0;
         $642 = ($641|0)==(0);
         $643 = (($a$3244$i) + 4|0);
         $$a$3$i = $642 ? $643 : $a$3244$i;
         $644 = ($638|0)==(0);
         if ($644) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $645 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $638;
         $$a$3310$i = $$a$3$i;$z$4$i = $645;
        } else {
         $628 = HEAP32[$a$3244$i>>2]|0;
         $629 = ($628|0)==(0);
         $630 = (($a$3244$i) + 4|0);
         $$a$3309$i = $629 ? $630 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $646 = $z$4$i;
       $647 = $$a$3310$i;
       $648 = (($646) - ($647))|0;
       $649 = $648 >> 2;
       $650 = ($649|0)>($592|0);
       if ($650) {
        $651 = (($$a$3310$i) + ($592<<2)|0);
        $z$5$i = $651;
       } else {
        $z$5$i = $z$4$i;
       }
       $652 = HEAP32[$e2$i>>2]|0;
       $653 = (($652) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $653;
       $654 = ($653|0)<(0);
       if ($654) {
        $625 = $653;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $655 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($655) {
      $656 = $a$3$lcssa$i;
      $657 = (($558) - ($656))|0;
      $658 = $657 >> 2;
      $659 = ($658*9)|0;
      $660 = HEAP32[$a$3$lcssa$i>>2]|0;
      $661 = ($660>>>0)<(10);
      if ($661) {
       $e$1$i = $659;
       break;
      } else {
       $e$0233$i = $659;$i$0232$i = 10;
      }
      while(1) {
       $662 = ($i$0232$i*10)|0;
       $663 = (($e$0233$i) + 1)|0;
       $664 = ($660>>>0)<($662>>>0);
       if ($664) {
        $e$1$i = $663;
        break;
       } else {
        $e$0233$i = $663;$i$0232$i = $662;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $665 = ($400|0)!=(102);
    $666 = $665 ? $e$1$i : 0;
    $667 = (($$p$i) - ($666))|0;
    $668 = ($400|0)==(103);
    $669 = ($$p$i|0)!=(0);
    $$24$i = $668 & $669;
    $$neg156$i = $$24$i << 31 >> 31;
    $670 = (($667) + ($$neg156$i))|0;
    $671 = $z$3$lcssa$i;
    $672 = (($671) - ($558))|0;
    $673 = $672 >> 2;
    $674 = ($673*9)|0;
    $675 = (($674) + -9)|0;
    $676 = ($670|0)<($675|0);
    if ($676) {
     $677 = (($670) + 9216)|0;
     $678 = (($677|0) / 9)&-1;
     $$sum$i = (($678) + -1023)|0;
     $679 = (($$36$i) + ($$sum$i<<2)|0);
     $680 = (($677|0) % 9)&-1;
     $j$0224$i = (($680) + 1)|0;
     $681 = ($j$0224$i|0)<(9);
     if ($681) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $682 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $682;
        break;
       } else {
        $i$1225$i = $682;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $683 = HEAP32[$679>>2]|0;
     $684 = (($683>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $685 = ($684|0)==(0);
     if ($685) {
      $$sum18$i = (($678) + -1022)|0;
      $686 = (($$36$i) + ($$sum18$i<<2)|0);
      $687 = ($686|0)==($z$3$lcssa$i|0);
      if ($687) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $688 = (($683>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $689 = $688 & 1;
       $690 = ($689|0)==(0);
       $$25$i = $690 ? 9007199254740992.0 : 9007199254740994.0;
       $691 = (($i$1$lcssa$i|0) / 2)&-1;
       $692 = ($684>>>0)<($691>>>0);
       do {
        if ($692) {
         $small$0$i = 0.5;
        } else {
         $693 = ($684|0)==($691|0);
         if ($693) {
          $$sum19$i = (($678) + -1022)|0;
          $694 = (($$36$i) + ($$sum19$i<<2)|0);
          $695 = ($694|0)==($z$3$lcssa$i|0);
          if ($695) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $696 = ($pl$0$i|0)==(0);
       do {
        if ($696) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $697 = HEAP8[$prefix$0$i>>0]|0;
         $698 = ($697<<24>>24)==(45);
         if (!($698)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $699 = $$25$i * -1.0;
         $700 = $small$0$i * -1.0;
         $round6$1$i = $699;$small$1$i = $700;
        }
       } while(0);
       $701 = (($683) - ($684))|0;
       HEAP32[$679>>2] = $701;
       $702 = $round6$1$i + $small$1$i;
       $703 = $702 != $round6$1$i;
       if (!($703)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
        break;
       }
       $704 = (($701) + ($i$1$lcssa$i))|0;
       HEAP32[$679>>2] = $704;
       $705 = ($704>>>0)>(999999999);
       if ($705) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $679;
        while(1) {
         $706 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $707 = ($706>>>0)<($a$5218$i>>>0);
         if ($707) {
          $708 = (($a$5218$i) + -4|0);
          HEAP32[$708>>2] = 0;
          $a$6$i = $708;
         } else {
          $a$6$i = $a$5218$i;
         }
         $709 = HEAP32[$706>>2]|0;
         $710 = (($709) + 1)|0;
         HEAP32[$706>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5218$i = $a$6$i;$d$2217$i = $706;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $706;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $679;
       }
       $712 = $a$5$lcssa$i;
       $713 = (($558) - ($712))|0;
       $714 = $713 >> 2;
       $715 = ($714*9)|0;
       $716 = HEAP32[$a$5$lcssa$i>>2]|0;
       $717 = ($716>>>0)<(10);
       if ($717) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $715;
        break;
       } else {
        $e$2213$i = $715;$i$2212$i = 10;
       }
       while(1) {
        $718 = ($i$2212$i*10)|0;
        $719 = (($e$2213$i) + 1)|0;
        $720 = ($716>>>0)<($718>>>0);
        if ($720) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $719;
         break;
        } else {
         $e$2213$i = $719;$i$2212$i = $718;
        }
       }
      }
     } while(0);
     $721 = (($d$3$i) + 4|0);
     $722 = ($z$3$lcssa$i>>>0)>($721>>>0);
     $$z$3$i = $722 ? $721 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $723 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $724 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($724)) {
      $$lcssa292$i = 0;
      break;
     }
     $725 = (($z$6$i) + -4|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)==(0);
     if ($727) {
      $z$6$i = $725;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($668) {
      $728 = ($$p$i|0)==(0);
      $729 = $728&1;
      $$$p$i = (($729) + ($$p$i))|0;
      $730 = ($$$p$i|0)>($e$4$ph$i|0);
      $731 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $730 & $731;
      if ($or$cond5$i) {
       $732 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $733 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $732;$$213$i = $733;
      } else {
       $734 = (($t$0) + -2)|0;
       $735 = (($$$p$i) + -1)|0;
       $$016$i = $734;$$213$i = $735;
      }
      $736 = $fl$1$ & 8;
      $737 = ($736|0)==(0);
      if (!($737)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $738 = (($z$6$i) + -4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         $j$2$i = 9;
         break;
        }
        $741 = (($739>>>0) % 10)&-1;
        $742 = ($741|0)==(0);
        if ($742) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $743 = ($i$3204$i*10)|0;
         $744 = (($j$1205$i) + 1)|0;
         $745 = (($739>>>0) % ($743>>>0))&-1;
         $746 = ($745|0)==(0);
         if ($746) {
          $i$3204$i = $743;$j$1205$i = $744;
         } else {
          $j$2$i = $744;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $747 = $$016$i | 32;
      $748 = ($747|0)==(102);
      $749 = $z$6$i;
      $750 = (($749) - ($558))|0;
      $751 = $750 >> 2;
      $752 = ($751*9)|0;
      $753 = (($752) + -9)|0;
      if ($748) {
       $754 = (($753) - ($j$2$i))|0;
       $755 = ($754|0)<(0);
       $$26$i = $755 ? 0 : $754;
       $756 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $756 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $757 = (($753) + ($e$4$ph$i))|0;
       $758 = (($757) - ($j$2$i))|0;
       $759 = ($758|0)<(0);
       $$28$i = $759 ? 0 : $758;
       $760 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $760 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $761 = ($$314$i|0)!=(0);
    if ($761) {
     $765 = 1;
    } else {
     $762 = $fl$1$ & 8;
     $763 = ($762|0)!=(0);
     $765 = $763;
    }
    $764 = $765&1;
    $766 = $$117$i | 32;
    $767 = ($766|0)==(102);
    if ($767) {
     $768 = ($e$4$ph$i|0)>(0);
     $769 = $768 ? $e$4$ph$i : 0;
     $$pn$i = $769;$estr$2$i = 0;
    } else {
     $770 = ($e$4$ph$i|0)<(0);
     $771 = $770 ? $723 : $e$4$ph$i;
     $772 = ($771|0)<(0);
     if ($772) {
      $773 = ($771|0)<(0);
      $774 = $773 << 31 >> 31;
      $$05$i84$i = $7;$775 = $771;$776 = $774;
      while(1) {
       $777 = (___uremdi3(($775|0),($776|0),10,0)|0);
       $778 = tempRet0;
       $779 = $777 | 48;
       $780 = $779&255;
       $781 = (($$05$i84$i) + -1|0);
       HEAP8[$781>>0] = $780;
       $782 = (___udivdi3(($775|0),($776|0),10,0)|0);
       $783 = tempRet0;
       $784 = ($776>>>0)>(9);
       $785 = ($775>>>0)>(4294967295);
       $786 = ($776|0)==(9);
       $787 = $786 & $785;
       $788 = $784 | $787;
       if ($788) {
        $$05$i84$i = $781;$775 = $782;$776 = $783;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $781;$$01$lcssa$off0$i90$i = $782;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $771;
     }
     $789 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($789) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $790 = (($y$03$i91$i>>>0) % 10)&-1;
       $791 = $790 | 48;
       $792 = $791&255;
       $793 = (($$12$i92$i) + -1|0);
       HEAP8[$793>>0] = $792;
       $794 = (($y$03$i91$i>>>0) / 10)&-1;
       $795 = ($y$03$i91$i>>>0)<(10);
       if ($795) {
        $estr$1$ph$i = $793;
        break;
       } else {
        $$12$i92$i = $793;$y$03$i91$i = $794;
       }
      }
     }
     $796 = $estr$1$ph$i;
     $797 = (($9) - ($796))|0;
     $798 = ($797|0)<(2);
     if ($798) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $799 = (($estr$1195$i) + -1|0);
       HEAP8[$799>>0] = 48;
       $800 = $799;
       $801 = (($9) - ($800))|0;
       $802 = ($801|0)<(2);
       if ($802) {
        $estr$1195$i = $799;
       } else {
        $estr$1$lcssa$i = $799;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $803 = $e$4$ph$i >> 31;
     $804 = $803 & 2;
     $805 = (($804) + 43)|0;
     $806 = $805&255;
     $807 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$807>>0] = $806;
     $808 = $$117$i&255;
     $809 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$809>>0] = $808;
     $810 = $809;
     $811 = (($9) - ($810))|0;
     $$pn$i = $811;$estr$2$i = $809;
    }
    $812 = (($pl$0$i) + 1)|0;
    $813 = (($812) + ($$314$i))|0;
    $l$1$i = (($813) + ($764))|0;
    $814 = (($l$1$i) + ($$pn$i))|0;
    $815 = $fl$1$ & 73728;
    $816 = ($815|0)==(0);
    $817 = ($w$1|0)>($814|0);
    $or$cond$i98$i = $816 & $817;
    if ($or$cond$i98$i) {
     $818 = (($w$1) - ($814))|0;
     $819 = ($818>>>0)>(256);
     $820 = $819 ? 256 : $818;
     _memset(($pad$i|0),32,($820|0))|0;
     $821 = ($818>>>0)>(255);
     if ($821) {
      $$01$i100$i = $818;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $822 = (($$01$i100$i) + -256)|0;
       $823 = ($822>>>0)>(255);
       if ($823) {
        $$01$i100$i = $822;
       } else {
        break;
       }
      }
      $824 = $818 & 255;
      $$0$lcssa$i102$i = $824;
     } else {
      $$0$lcssa$i102$i = $818;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $825 = ($815|0)==(65536);
    $or$cond$i105$i = $825 & $817;
    if ($or$cond$i105$i) {
     $826 = (($w$1) - ($814))|0;
     $827 = ($826>>>0)>(256);
     $828 = $827 ? 256 : $826;
     _memset(($pad$i|0),48,($828|0))|0;
     $829 = ($826>>>0)>(255);
     if ($829) {
      $$01$i107$i = $826;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $830 = (($$01$i107$i) + -256)|0;
       $831 = ($830>>>0)>(255);
       if ($831) {
        $$01$i107$i = $830;
       } else {
        break;
       }
      }
      $832 = $826 & 255;
      $$0$lcssa$i109$i = $832;
     } else {
      $$0$lcssa$i109$i = $826;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($767) {
      $833 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $833 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $834 = HEAP32[$d$4180$i>>2]|0;
       $835 = ($834|0)==(0);
       if ($835) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $834;
        while(1) {
         $836 = (($y$03$i114$i>>>0) % 10)&-1;
         $837 = $836 | 48;
         $838 = $837&255;
         $839 = (($$12$i115$i) + -1|0);
         HEAP8[$839>>0] = $838;
         $840 = (($y$03$i114$i>>>0) / 10)&-1;
         $841 = ($y$03$i114$i>>>0)<(10);
         if ($841) {
          $$1$lcssa$i117$i = $839;
          break;
         } else {
          $$12$i115$i = $839;$y$03$i114$i = $840;
         }
        }
       }
       $842 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($842) {
         $846 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($846)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $843 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($843) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $844 = (($s7$0177$i) + -1|0);
          HEAP8[$844>>0] = 48;
          $845 = ($844>>>0)>($buf$i>>>0);
          if ($845) {
           $s7$0177$i = $844;
          } else {
           $s7$1$i = $844;
           break;
          }
         }
        }
       } while(0);
       $847 = $s7$1$i;
       $848 = (($15) - ($847))|0;
       (___fwritex($s7$1$i,$848,$f)|0);
       $849 = (($d$4180$i) + 4|0);
       $850 = ($849>>>0)>($$36$i>>>0);
       if ($850) {
        break;
       } else {
        $d$4180$i = $849;
       }
      }
      $$not$i = $761 ^ 1;
      $851 = $fl$1$ & 8;
      $852 = ($851|0)==(0);
      $or$cond32$i = $852 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(42544,1,$f)|0);
      }
      $853 = ($849>>>0)<($z$6$i>>>0);
      $854 = ($$314$i|0)>(0);
      $or$cond7169$i = $853 & $854;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $849;
       while(1) {
        $855 = HEAP32[$d$5170$i>>2]|0;
        $856 = ($855|0)==(0);
        if ($856) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $855;
         while(1) {
          $857 = (($y$03$i123$i>>>0) % 10)&-1;
          $858 = $857 | 48;
          $859 = $858&255;
          $860 = (($$12$i124$i) + -1|0);
          HEAP8[$860>>0] = $859;
          $861 = (($y$03$i123$i>>>0) / 10)&-1;
          $862 = ($y$03$i123$i>>>0)<(10);
          if ($862) {
           break;
          } else {
           $$12$i124$i = $860;$y$03$i123$i = $861;
          }
         }
         $863 = ($860>>>0)>($buf$i>>>0);
         if ($863) {
          $s8$0165$i = $860;
          label = 301;
         } else {
          $s8$0$lcssa$i = $860;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $864 = (($s8$0165$i) + -1|0);
          HEAP8[$864>>0] = 48;
          $865 = ($864>>>0)>($buf$i>>>0);
          if ($865) {
           $s8$0165$i = $864;
           label = 301;
          } else {
           $s8$0$lcssa$i = $864;
           break;
          }
         }
        }
        $866 = ($$415171$i|0)>(9);
        $867 = $866 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$867,$f)|0);
        $868 = (($d$5170$i) + 4|0);
        $869 = (($$415171$i) + -9)|0;
        $870 = ($868>>>0)<($z$6$i>>>0);
        $871 = ($869|0)>(0);
        $or$cond7$i = $870 & $871;
        if ($or$cond7$i) {
         $$415171$i = $869;$d$5170$i = $868;
        } else {
         $$415$lcssa$i = $869;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $872 = ($$415$lcssa$i|0)>(0);
      if (!($872)) {
       break;
      }
      $873 = ($$415$lcssa$i>>>0)>(256);
      $874 = $873 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($874|0))|0;
      $875 = ($$415$lcssa$i>>>0)>(255);
      if ($875) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $876 = (($$01$i131$i) + -256)|0;
        $877 = ($876>>>0)>(255);
        if ($877) {
         $$01$i131$i = $876;
        } else {
         break;
        }
       }
       $878 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $878;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $879 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $879;
      $880 = ($$314$i|0)>(-1);
      do {
       if ($880) {
        $881 = $fl$1$ & 8;
        $882 = ($881|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $883 = HEAP32[$d$6188$i>>2]|0;
         $884 = ($883|0)==(0);
         if ($884) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $883;
          while(1) {
           $885 = (($y$03$i138$i>>>0) % 10)&-1;
           $886 = $885 | 48;
           $887 = $886&255;
           $888 = (($$12$i139$i) + -1|0);
           HEAP8[$888>>0] = $887;
           $889 = (($y$03$i138$i>>>0) / 10)&-1;
           $890 = ($y$03$i138$i>>>0)<(10);
           if ($890) {
            break;
           } else {
            $$12$i139$i = $888;$y$03$i138$i = $889;
           }
          }
          $891 = ($888|0)==($14|0);
          if ($891) {
           label = 313;
          } else {
           $s9$0$i = $888;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $892 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($892) {
           $896 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $897 = ($$5189$i|0)<(1);
           $or$cond34$i = $897 & $882;
           if ($or$cond34$i) {
            $s9$2$i = $896;
            break;
           }
           (___fwritex(42544,1,$f)|0);
           $s9$2$i = $896;
          } else {
           $893 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($893) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $894 = (($s9$1184$i) + -1|0);
            HEAP8[$894>>0] = 48;
            $895 = ($894>>>0)>($buf$i>>>0);
            if ($895) {
             $s9$1184$i = $894;
            } else {
             $s9$2$i = $894;
             break;
            }
           }
          }
         } while(0);
         $898 = $s9$2$i;
         $899 = (($15) - ($898))|0;
         $900 = ($$5189$i|0)>($899|0);
         $$$5$i = $900 ? $899 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $901 = (($$5189$i) - ($899))|0;
         $902 = (($d$6188$i) + 4|0);
         $903 = ($902>>>0)<($z$6$$i>>>0);
         $904 = ($901|0)>(-1);
         $or$cond9$i = $903 & $904;
         if ($or$cond9$i) {
          $$5189$i = $901;$d$6188$i = $902;
         } else {
          break;
         }
        }
        $905 = ($901|0)>(0);
        if (!($905)) {
         break;
        }
        $906 = ($901>>>0)>(256);
        $907 = $906 ? 256 : $901;
        _memset(($pad$i|0),48,($907|0))|0;
        $908 = ($901>>>0)>(255);
        if ($908) {
         $$01$i146$i = $901;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $909 = (($$01$i146$i) + -256)|0;
          $910 = ($909>>>0)>(255);
          if ($910) {
           $$01$i146$i = $909;
          } else {
           break;
          }
         }
         $911 = $901 & 255;
         $$0$lcssa$i148$i = $911;
        } else {
         $$0$lcssa$i148$i = $901;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $912 = $estr$2$i;
      $913 = (($9) - ($912))|0;
      (___fwritex($estr$2$i,$913,$f)|0);
     }
    } while(0);
    $914 = ($815|0)==(8192);
    $or$cond$i$i = $914 & $817;
    if ($or$cond$i$i) {
     $915 = (($w$1) - ($814))|0;
     $916 = ($915>>>0)>(256);
     $917 = $916 ? 256 : $915;
     _memset(($pad$i|0),32,($917|0))|0;
     $918 = ($915>>>0)>(255);
     if ($918) {
      $$01$i$i = $915;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $919 = (($$01$i$i) + -256)|0;
       $920 = ($919>>>0)>(255);
       if ($920) {
        $$01$i$i = $919;
       } else {
        break;
       }
      }
      $921 = $915 & 255;
      $$0$lcssa$i$i = $921;
     } else {
      $$0$lcssa$i$i = $915;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $817 ? $w$1 : $814;
    $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 42448;
    label = 86;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1036 = $191;$1037 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 42448;$z$2 = $2;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 42464 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   default: {
    $1036 = $191;$1037 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 42448;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 42448;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (42528 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 42448;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (42448 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 42448;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 42448;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1038;
    while(1) {
     $318 = HEAP32[$ws$0167>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4266) - ($i$0166))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond17 = $321 | $323;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $320;
      break;
     }
     $324 = (($ws$0167) + 4|0);
     $325 = (($320) + ($i$0166))|0;
     $326 = ($p$4266>>>0)>($325>>>0);
     if ($326) {
      $i$0166 = $325;$l$1165 = $320;$ws$0167 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1040 = $1039;$1041 = $1038;$i$0$lcssa267 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1036 = $293;$1037 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1036 = $293;$1037 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $329 & $330;
   if ($or$cond$i58) {
    $331 = (($w$1) - ($i$0$lcssa267))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i60 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i60) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i60 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i62 = $337;
    } else {
     $$0$lcssa$i62 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $338 = ($i$0$lcssa267|0)==(0);
   L477: do {
    if (!($338)) {
     $i$1174 = 0;$ws$1175 = $1041;
     while(1) {
      $339 = HEAP32[$ws$1175>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L477;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1174))|0;
      $343 = ($342|0)>($i$0$lcssa267|0);
      if ($343) {
       break L477;
      }
      $344 = (($ws$1175) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa267>>>0);
      if ($345) {
       $i$1174 = $342;$ws$1175 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i65 = $346 & $330;
   if ($or$cond$i65) {
    $347 = (($w$1) - ($i$0$lcssa267))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i67 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i67) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i67 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i69 = $353;
    } else {
     $$0$lcssa$i69 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa267;
   $1029 = $1040;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $922 = $z$2;
  $923 = $a$2;
  $924 = (($922) - ($923))|0;
  $925 = ($p$5|0)<($924|0);
  $$p$5 = $925 ? $924 : $p$5;
  $926 = (($pl$2) + ($$p$5))|0;
  $927 = ($w$1|0)<($926|0);
  $w$2 = $927 ? $926 : $w$1;
  $928 = $fl$6 & 73728;
  $929 = ($928|0)==(0);
  $930 = ($w$2|0)>($926|0);
  $or$cond$i75 = $929 & $930;
  if ($or$cond$i75) {
   $931 = (($w$2) - ($926))|0;
   $932 = ($931>>>0)>(256);
   $933 = $932 ? 256 : $931;
   _memset(($pad$i|0),32,($933|0))|0;
   $934 = ($931>>>0)>(255);
   if ($934) {
    $$01$i77 = $931;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $935 = (($$01$i77) + -256)|0;
     $936 = ($935>>>0)>(255);
     if ($936) {
      $$01$i77 = $935;
     } else {
      break;
     }
    }
    $937 = $931 & 255;
    $$0$lcssa$i79 = $937;
   } else {
    $$0$lcssa$i79 = $931;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $938 = ($928|0)==(65536);
  $or$cond$i51 = $938 & $930;
  if ($or$cond$i51) {
   $939 = (($w$2) - ($926))|0;
   $940 = ($939>>>0)>(256);
   $941 = $940 ? 256 : $939;
   _memset(($pad$i|0),48,($941|0))|0;
   $942 = ($939>>>0)>(255);
   if ($942) {
    $$01$i53 = $939;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $943 = (($$01$i53) + -256)|0;
     $944 = ($943>>>0)>(255);
     if ($944) {
      $$01$i53 = $943;
     } else {
      break;
     }
    }
    $945 = $939 & 255;
    $$0$lcssa$i55 = $945;
   } else {
    $$0$lcssa$i55 = $939;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $946 = ($$p$5|0)>($924|0);
  if ($946) {
   $947 = (($$p$5) - ($924))|0;
   $948 = ($947>>>0)>(256);
   $949 = $948 ? 256 : $947;
   _memset(($pad$i|0),48,($949|0))|0;
   $950 = ($947>>>0)>(255);
   if ($950) {
    $$01$i38 = $947;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $951 = (($$01$i38) + -256)|0;
     $952 = ($951>>>0)>(255);
     if ($952) {
      $$01$i38 = $951;
     } else {
      break;
     }
    }
    $953 = $947 & 255;
    $$0$lcssa$i40 = $953;
   } else {
    $$0$lcssa$i40 = $947;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$924,$f)|0);
  $954 = ($928|0)==(8192);
  $or$cond$i = $954 & $930;
  if (!($or$cond$i)) {
   $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $955 = (($w$2) - ($926))|0;
  $956 = ($955>>>0)>(256);
  $957 = $956 ? 256 : $955;
  _memset(($pad$i|0),32,($957|0))|0;
  $958 = ($955>>>0)>(255);
  if ($958) {
   $$01$i = $955;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $959 = (($$01$i) + -256)|0;
    $960 = ($959>>>0)>(255);
    if ($960) {
     $$01$i = $959;
    } else {
     break;
    }
   }
   $961 = $955 & 255;
   $$0$lcssa$i = $961;
  } else {
   $$0$lcssa$i = $955;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $962 = ($f|0)==(0|0);
  if (!($962)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $963 = ($l10n$0|0)==(0);
  if ($963) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $964 = (($nl_type) + ($i$2100<<2)|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $i$397 = $i$2100;
    break;
   }
   $967 = (($nl_arg) + ($i$2100<<3)|0);
   $968 = ($965>>>0)>(20);
   L535: do {
    if (!($968)) {
     do {
      switch ($965|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $969 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$967>>2] = $969;
       break L535;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $970 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $971 = ($970|0)<(0);
       $972 = $971 << 31 >> 31;
       $973 = $967;
       $974 = $973;
       HEAP32[$974>>2] = $970;
       $975 = (($973) + 4)|0;
       $976 = $975;
       HEAP32[$976>>2] = $972;
       break L535;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $977 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $978 = $967;
       $979 = $978;
       HEAP32[$979>>2] = $977;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = 0;
       break L535;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $982 = $arglist_current44;
       $983 = $982;
       $984 = HEAP32[$983>>2]|0;
       $985 = (($982) + 4)|0;
       $986 = $985;
       $987 = HEAP32[$986>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $988 = $967;
       $989 = $988;
       HEAP32[$989>>2] = $984;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L535;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $993 = $992&65535;
       $994 = $993 << 16 >> 16;
       $995 = ($994|0)<(0);
       $996 = $995 << 31 >> 31;
       $997 = $967;
       $998 = $997;
       HEAP32[$998>>2] = $994;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = $996;
       break L535;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1001 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1001 & 65535;
       $1002 = $967;
       $1003 = $1002;
       HEAP32[$1003>>2] = $$mask1$i;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = 0;
       break L535;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1007 = $1006&255;
       $1008 = $1007 << 24 >> 24;
       $1009 = ($1008|0)<(0);
       $1010 = $1009 << 31 >> 31;
       $1011 = $967;
       $1012 = $1011;
       HEAP32[$1012>>2] = $1008;
       $1013 = (($1011) + 4)|0;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       break L535;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1015 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1015 & 255;
       $1016 = $967;
       $1017 = $1016;
       HEAP32[$1017>>2] = $$mask$i;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = 0;
       break L535;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1020 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$967>>3] = $1020;
       break L535;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1021 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$967>>3] = $1021;
       break L535;
       break;
      }
      default: {
       break L535;
      }
      }
     } while(0);
    }
   } while(0);
   $1022 = (($i$2100) + 1)|0;
   $1023 = ($1022|0)<(10);
   if ($1023) {
    $i$2100 = $1022;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1026 = (($nl_type) + ($i$397<<2)|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1027|0)==(0);
   $1025 = (($i$397) + 1)|0;
   if (!($1028)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1024 = ($1025|0)<(10);
   if ($1024) {
    $i$397 = $1025;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vid(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=+a2;
    FUNCTION_TABLE_vid[index&1023](a1|0,+a2);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&1023](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
  }


  function dynCall_vidii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_vidii[index&1023](a1|0,+a2,a3|0,a4|0);
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_vidi(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=a3|0;
    FUNCTION_TABLE_vidi[index&511](a1|0,+a2,a3|0);
  }


  function dynCall_vidd(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=+a3;
    FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_iiid(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=+a3;
    return FUNCTION_TABLE_iiid[index&1023](a1|0,a2|0,+a3)|0;
  }


  function dynCall_ddd(index,a1,a2) {
    index = index|0;
    a1=+a1; a2=+a2;
    return +FUNCTION_TABLE_ddd[index&1023](+a1,+a2);
  }


  function dynCall_di(index,a1) {
    index = index|0;
    a1=a1|0;
    return +FUNCTION_TABLE_di[index&1023](a1|0);
  }


  function dynCall_dd(index,a1) {
    index = index|0;
    a1=+a1;
    return +FUNCTION_TABLE_dd[index&511](+a1);
  }


  function dynCall_viid(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=+a3;
    FUNCTION_TABLE_viid[index&31](a1|0,a2|0,+a3);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_dii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&1023]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1023]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_vidii(6); }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
  function b8(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_vidi(8); }
  function b9(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(9); }
  function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b11(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(13); }
  function b14(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14); }
  function b15(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(15);return 0; }
  function b16(p0,p1) { p0 = +p0;p1 = +p1; nullFunc_ddd(16);return +0; }
  function b17(p0) { p0 = p0|0; nullFunc_di(17);return +0; }
  function b18(p0) { p0 = +p0; nullFunc_dd(18);return +0; }
  function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(19); }
  function b20(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(20); }
  function b21(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(21); }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(22); }
  function b23(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(23); }
  function b24(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function b25(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(25);return 0; }
  function b26(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(26);return +0; }
  function b27(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(27);return +0; }
  function b28() { ; nullFunc_i(28);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b29(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(29);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b30(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(30); }
  function b31() { ; nullFunc_v(31); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b32(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(32);return 0; }
  function b33(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33); }
  function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0
  ,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10b2CLDevice17copyArrayToDeviceEP7_cl_memPKvjj,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_,__Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN6b2Vec2mLEf,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN7b2Sweep7AdvanceEf,b2,b2,b2,b2,b2,b2,b2,__ZN6b2Body7AdvanceEf,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN7b2ShapeD2Ev,__ZN7b2ShapeD0Ev,b3,__ZN11b2EdgeShapeD2Ev,__ZN11b2EdgeShapeD0Ev,b3,b3,b3,b3,b3,b3,__ZN14b2PolygonShapeD2Ev,__ZN14b2PolygonShapeD0Ev,b3,b3,b3,b3,b3,b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev
  ,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN17b2ContactListenerD2Ev,__ZN17b2ContactListenerD0Ev,b3,b3,b3,b3,__ZN15b2ContactFilterD2Ev,__ZN15b2ContactFilterD0Ev,b3,b3,__ZN23b2ChainAndCircleContactD2Ev,__ZN23b2ChainAndCircleContactD0Ev,b3,__ZN24b2ChainAndPolygonContactD2Ev,__ZN24b2ChainAndPolygonContactD0Ev,b3,__ZN15b2CircleContactD2Ev
  ,__ZN15b2CircleContactD0Ev,__ZN9b2ContactD2Ev,__ZN9b2ContactD0Ev,b3,__ZN22b2EdgeAndCircleContactD2Ev,__ZN22b2EdgeAndCircleContactD0Ev,b3,__ZN23b2EdgeAndPolygonContactD2Ev,__ZN23b2EdgeAndPolygonContactD0Ev,b3,__ZN25b2PolygonAndCircleContactD2Ev,__ZN25b2PolygonAndCircleContactD0Ev,b3,__ZN16b2PolygonContactD2Ev,__ZN16b2PolygonContactD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED0Ev
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3,b3,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev
  ,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
  ,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3
  ,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev
  ,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3
  ,b3,b3,__ZN14b2CLBroadPhaseC2Ev,__ZN13b2DynamicTreeD2Ev,__Z6b2FreePv,__ZN6b2Vec2C2Ev,__ZN6b2Vec27SetZeroEv,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b3,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,__ZNSt3__16localeD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__13mapIPK7b2JointiNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_iEEEEED2Ev,__ZN14b2CLCommonData25initReadLastJointImpulsesEv,__ZN14b2CLCommonData12DeleteJointsEv,b3,__ZN14b2CLCommonDataC2Ev,__ZN14b2CLCommonDataD2Ev,__ZN11b2EdgeShapeC2Ev,b3,b3,__ZN9QuadrupleC2Ev,b3,__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEED2Ev,b3,b3,b3,b3,b3,b3,__ZN10b2CLDeviceC2Ev,__ZN10b2CLDeviceD2Ev,__ZN8b2CLScanC2Ev,__ZN8b2CLScanD2Ev,__ZN12clb2ManifoldC2Ev,__ZN8b2CLSortC2Ev,__ZN8b2CLSortD2Ev
  ,b3,__ZN15b2CLNarrowPhaseC2Ev,b3,__ZN15b2CLNarrowPhaseD2Ev,__ZN12b2BroadPhaseD2Ev,b3,b3,b3,b3,__ZN15b2GrowableStackIiLi256EED2Ev,b3,b3,b3,b3,__ZN15b2ContactSolverD2Ev,b3,__ZN15b2ContactSolver29InitializeVelocityConstraintsEv,__ZN15b2ContactSolver24SolveVelocityConstraintsEv,b3,b3,b3,b3,b3,b3,__ZN6b2Body20SynchronizeTransformEv,b3,__ZN16b2StackAllocatorC2Ev,__ZN16b2ContactManagerC2Ev,__ZN10b2CLSolverC2Ev,__ZN12b2CLSolveTOIC2Ev
  ,b3,__ZN12b2CLSolveTOID2Ev,__ZN10b2CLSolverD2Ev,__ZN16b2ContactManagerD2Ev,__ZN16b2StackAllocatorD2Ev,__ZN16b2BlockAllocatorD2Ev,b3,b3,__ZN8b2IslandD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10b2TOIInputC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8b2Island5ClearEv,b3
  ,b3,b3,__ZN6b2Body19SynchronizeFixturesEv,b3,__ZN16b2ContactManager18cpuFindNewContactsEv,b3,__ZN16b2ContactManager15FindNewContactsEv,__ZN10b2CLDevice18finishCommandQueueEv,b3,__ZNSt3__13setIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN9b2BodyDefC2Ev
  ,b3,b3,__ZN14b2PolygonShapeC2Ev,b3,b3,__ZN12b2FixtureDefC2Ev,b3,b3,b3,b3,__ZN7b2WorldD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,_freelocale__wrapper,b3,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor112,b3,___cxx_global_array_dtor97,b3,___cxx_global_array_dtor73
  ,___cxx_global_array_dtor48,___cxx_global_array_dtor45,___cxx_global_array_dtor,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN17b2ContactListener12BeginContactEP9b2Contact,__ZN17b2ContactListener10EndContactEP9b2Contact,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4
  ,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev,b4,b4,b4,b4,__ZNSt3__18ios_base4initEPv,b4,b4,__ZNSt3__18ios_base5clearEj,__ZNKSt3__18ios_base6getlocEv,b4,b4,b4,b4,b4,b4,__ZN14b2CLCommonData17CopyRevoluteJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData18CopyPrismaticJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData17CopyDistanceJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData15CopyPulleyJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData14CopyMouseJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData13CopyGearJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData14CopyWheelJointEPK7b2JointP9b2clJoint
  ,__ZN14b2CLCommonData13CopyWeldJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData17CopyFrictionJointEPK7b2JointP9b2clJoint,__ZN14b2CLCommonData13CopyRopeJointEPK7b2JointP9b2clJoint,b4,b4,b4,b4,b4,__ZN10b2CLDevice9freeArrayEP7_cl_mem,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,__ZN15b2GrowableStackIiLi256EE4PushERKi,b4,b4,b4,b4,b4,b4,__ZN15b2ContactSolverC2EP18b2ContactSolverDef,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN6b2Vec2pLERKS_,b4,__ZN8b2Island6ReportEPK27b2ContactVelocityConstraint,b4,b4,b4,b4
  ,__ZN16b2ContactManager15SetWorldPointerEP7b2World,b4,b4,b4,b4,b4,__ZN9b2Fixture7DestroyEP16b2BlockAllocator,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput,b4,b4,__ZN9b2Contact6UpdateEP17b2ContactListener,b4,__ZN9b2Contact10SetEnabledEb,__ZN6b2Body8SetAwakeEb,b4,__ZN8b2Island3AddEP6b2Body
  ,__ZN8b2Island3AddEP9b2Contact,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b4,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4,b4,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4
  ,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b4,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_
  ,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,__ZNK11b2EdgeShape13GetChildCountEv,b5,b5,b5,b5,b5,b5,b5,__ZNK14b2PolygonShape13GetChildCountEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b5,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b5,b5,b5,b5
  ,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b5,b5,b5,b5,__ZNKSt13runtime_error4whatEv,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__119__iostream_category4nameEv,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b5
  ,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b5,b5
  ,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv
  ,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b5,b5,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b5,b5
  ,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5,b5,b5,b5,__ZNKSt8bad_cast4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,__Z7b2Alloci,__Znwj,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_fclose__wrapper,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK6b2Body8IsBulletEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,__Znaj,b5,b5,b5,b5,__ZN15b2GrowableStackIiLi256EE8GetCountEv,__ZN15b2GrowableStackIiLi256EE3PopEv,b5,b5,__ZNK10b2TreeNode6IsLeafEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK9b2Contact9IsEnabledEv,__ZN9b2Contact11GetFixtureAEv,__ZN9b2Contact11GetFixtureBEv,__ZNK9b2Fixture8IsSensorEv,__ZN9b2Fixture7GetBodyEv,__ZNK6b2Body7IsAwakeEv,b5,__ZNK9b2Contact14GetChildIndexAEv,__ZNK9b2Contact14GetChildIndexBEv,b5,__ZN9b2Fixture8GetShapeEv,b5,b5,b5,b5,b5,__ZNK9b2Contact10IsTouchingEv,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK9b2Fixture7GetTypeEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK6b2Body11GetPositionEv,b5,b5,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b5,b5,b5,b5,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_uselocale__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_wcslen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_vidii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,__ZN7b2World4StepEfii,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_vidi = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZmlfRK6b2Vec2,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8];
  var FUNCTION_TABLE_vidd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,__ZN6b2Vec23SetEff,b9,b9,__ZN14b2PolygonShape8SetAsBoxEff,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_iiii = [b10,b10,b10,b10,b10,b10,b10,b10,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,b10,b10,b10,b10,b10,b10,b10,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b10,b10,b10,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b10,b10
  ,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b10,b10,b10,b10,b10,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b10,b10
  ,b10,b10,b10,b10,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b10,b10,b10,b10,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b10,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b10,b10,__ZNKSt3__15ctypeIcE9do_narrowEcc,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE5do_isEtw,b10,b10,b10,b10,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b10,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw
  ,b10,b10,__ZNKSt3__15ctypeIwE9do_narrowEwc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_sn_write
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,__ZN10b2CLDevice13allocateArrayEjb,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,_newlocale__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10
  ,b10,b10,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_wcrtomb,b10,b10,_mbtowc,_mbrlen,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_vasprintf,b10,_do_read,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b11,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiiiid = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b13,b13,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b13,b13,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,__ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListenerP7b2WorldP10b2CLSolver,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b14,b14,b14,b14,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iiid = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,__ZN6b2Body13CreateFixtureEPK7b2Shapef,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15];
  var FUNCTION_TABLE_ddd = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__Z5b2MinIfET_S0_S0_,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_di = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK6b2Vec26LengthEv,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK7b2Timer15GetMillisecondsEv,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK6b2Body8GetAngleEv,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_dd = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__Z5b2AbsIfET_S0_,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18];
  var FUNCTION_TABLE_viid = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,b19,b19,b19,b19,b19,b19,b19,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_viiiiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b20,b20,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_
  ,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b20,b20,b20,b20,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b20,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b20,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b20,b20,b20,b20,b20,b20,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE
  ,b20,b20,b20,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b20,b20,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b20,b20,b20,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_viiiiiid = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b21
  ,b21,b21,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_viiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22];
  var FUNCTION_TABLE_viiiiiiiiii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri
  ,b23,b23,b23,b23,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b23,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_iii = [b24,b24,b24,b24,b24,b24,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,b24,b24,b24,b24,b24,b24,b24,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,b24,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b24,__ZNSt3__111__stdoutbufIwE8overflowEj,b24
  ,b24,b24,b24,b24,__ZNSt3__110__stdinbufIwE9pbackfailEj,b24,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b24,__ZNSt3__111__stdoutbufIcE8overflowEi,b24,b24,b24,b24,b24,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIcE10do_toupperEc,b24,__ZNKSt3__15ctypeIcE10do_tolowerEc,b24,__ZNKSt3__15ctypeIcE8do_widenEc,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIwE10do_toupperEw,b24,__ZNKSt3__15ctypeIwE10do_tolowerEw,b24
  ,__ZNKSt3__15ctypeIwE8do_widenEc,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__16locale9use_facetERNS0_2idE,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b24,__ZNKSt3__16locale9has_facetERNS0_2idE,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__13mapIPK7b2Joint9QuadrupleNS_4lessIS3_EENS_9allocatorINS_4pairIKS3_S4_EEEEEixERS9_,_printf__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,__Z22CompareElementsForSortRK12element_typeS1_,b24,b24,b24,b24,__Z14b2PairLessThanRK6b2PairS1_,b24,b24,b24,b24,__Z13b2TestOverlapRK6b2AABBS1_,b24,__ZN12b2BroadPhase13QueryCallbackEi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,__ZN7b2World10CreateBodyEPK9b2BodyDef,b24,b24,b24,b24,__ZN6b2Body13CreateFixtureEPK12b2FixtureDef,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_isxdigit_l,_isdigit_l,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b24,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_iiiiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b25,b25,b25,b25,b25,b25,b25,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b25,b25,b25,b25,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b25,b25,b25,b25
  ,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b25,b25,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b25,b25,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b25,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b25,b25,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b25,b25,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,_wcsnrtombs,b25,_mbsnrtowcs,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25];
  var FUNCTION_TABLE_diii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26];
  var FUNCTION_TABLE_dii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__Z5b2DotRK6b2Vec2S1_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27];
  var FUNCTION_TABLE_i = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,__ZN10b2CLDevice8instanceEv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,__ZNSt3__16__clocEv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNSt3__16locale5__imp12make_classicEv,b28,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b28,b28,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,___cxa_get_globals_fast,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
  ,b28,b28,b28,b28,b28];
  var FUNCTION_TABLE_iiiii = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b29,b29,b29,b29
  ,b29,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b29,b29,b29,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,_mbsrtowcs,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,_catgets__wrapper,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,_mbrtowc,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
  ,b29,b29,b29,b29,b29];
  var FUNCTION_TABLE_viii = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNKSt3__114error_category23default_error_conditionEi,b30,b30,__ZNKSt3__119__iostream_category7messageEi,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE4findIS4_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_,b30,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE15__insert_uniqueERKS6_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN15b2DistanceProxy3SetEPK7b2Shapei,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_,b30,__ZN12b2CLSolveTOI21syncMovedBodytoDeviceERNSt3__13setIP6b2BodyNS0_4lessIS3_EENS0_9allocatorIS3_EEEEP10b2CLSolver,b30,b30,b30,b30,b30,b30,__ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b30,b30,b30,b30,b30,b30,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b30,b30,b30,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b30,b30,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b30,b30,b30,b30,b30
  ,b30,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
  ,b30,b30,b30,b30,b30];
  var FUNCTION_TABLE_v = [b31,b31,b31,___cxa_pure_virtual__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,__ZL25default_terminate_handlerv,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,___cxa_end_catch__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,___cxa_rethrow__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,__ZSt17__throw_bad_allocv,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
  ,b31,b31,b31,b31,b31];
  var FUNCTION_TABLE_iiiiiiiii = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b32,b32,b32,b32,b32,b32,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b32,b32,b32,b32,b32,b32,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
  ,b32,b32,b32];
  var FUNCTION_TABLE_viiii = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,b33,b33,b33,b33,b33,b33,b33,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33
  ,b33,b33,b33,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b33,b33,b33,b33,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,___assert_fail__wrapper,b33,__ZNSt3__16__treeINS_12__value_typeIPK7b2Joint9QuadrupleEENS_19__map_value_compareIS4_S6_NS_4lessIS4_EELb1EEENS_9allocatorIS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSH_SH_,__ZNSt3__16__treeINS_12__value_typeIPK7b2JointiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSG_SG_,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,__ZN8b2Island8SolveTOIERK10b2TimeStepii,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16__treeIP6b2BodyNS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
  ,b33,b33,b33,b33,b33];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a492: __GLOBAL__I_a492, __GLOBAL__I_a1034: __GLOBAL__I_a1034, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_vidii: dynCall_vidii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidi: dynCall_vidi, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_ddd: dynCall_ddd, dynCall_di: dynCall_di, dynCall_dd: dynCall_dd, dynCall_viid: dynCall_viid, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real___GLOBAL__I_a492 = asm["__GLOBAL__I_a492"]; asm["__GLOBAL__I_a492"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a492.apply(null, arguments);
};

var real___GLOBAL__I_a1034 = asm["__GLOBAL__I_a1034"]; asm["__GLOBAL__I_a1034"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a1034.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a492 = Module["__GLOBAL__I_a492"] = asm["__GLOBAL__I_a492"];
var __GLOBAL__I_a1034 = Module["__GLOBAL__I_a1034"] = asm["__GLOBAL__I_a1034"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_ddd = Module["dynCall_ddd"] = asm["dynCall_ddd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



